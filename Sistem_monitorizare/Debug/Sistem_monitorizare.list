
Sistem_monitorizare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f09c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003684  0801f370  0801f370  00020370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080229f4  080229f4  000239f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080229fc  080229fc  000239fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08022a00  08022a00  00023a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000200  24000000  08022a04  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .Rx_PoolSection 00004983  24000200  08022c04  00024200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .RxDecripSection 00000060  24004b84  08027587  00028b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .TxDecripSection 00000060  24004be4  080275e7  00028be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000082d0  24004c44  08027647  00028c44  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2400cf14  08027647  00028f14  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00028c44  2**0
                  CONTENTS, READONLY
 13 .debug_info   00040224  00000000  00000000  00028c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008ab7  00000000  00000000  00068e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002d58  00000000  00000000  00071950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000023c6  00000000  00000000  000746a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000479e7  00000000  00000000  00076a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00046497  00000000  00000000  000be455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018a2aa  00000000  00000000  001048ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0028eb96  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cd40  00000000  00000000  0028ebdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0029b91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24004c44 	.word	0x24004c44
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801f354 	.word	0x0801f354

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24004c48 	.word	0x24004c48
 800030c:	0801f354 	.word	0x0801f354

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <Fan_ON>:
uint32_t lastExecutionTime_mainTask = 0;
uint32_t lastExecutionTime_secondTask = 0;


// Turn on the fan
void Fan_ON(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FAN_GPIO_PORT, FAN_GPIO_PIN, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2140      	movs	r1, #64	@ 0x40
 80006b8:	4802      	ldr	r0, [pc, #8]	@ (80006c4 <Fan_ON+0x14>)
 80006ba:	f005 f9d9 	bl	8005a70 <HAL_GPIO_WritePin>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	58020000 	.word	0x58020000

080006c8 <Fan_OFF>:

// Turn off the fan
void Fan_OFF(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FAN_GPIO_PORT, FAN_GPIO_PIN, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2140      	movs	r1, #64	@ 0x40
 80006d0:	4802      	ldr	r0, [pc, #8]	@ (80006dc <Fan_OFF+0x14>)
 80006d2:	f005 f9cd 	bl	8005a70 <HAL_GPIO_WritePin>
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	58020000 	.word	0x58020000

080006e0 <ReadSensors>:

// Read sensor values
void ReadSensors(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af04      	add	r7, sp, #16
	uint32_t raw_value;

	// Start ADC
	if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 80006e6:	4844      	ldr	r0, [pc, #272]	@ (80007f8 <ReadSensors+0x118>)
 80006e8:	f002 f824 	bl	8002734 <HAL_ADC_Start>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d003      	beq.n	80006fa <ReadSensors+0x1a>
		printf("Error: ADC Start failed!\r\n");
 80006f2:	4842      	ldr	r0, [pc, #264]	@ (80007fc <ReadSensors+0x11c>)
 80006f4:	f01c fece 	bl	801d494 <puts>
		return;
 80006f8:	e07a      	b.n	80007f0 <ReadSensors+0x110>
	}

	// LM35_1 (Channel 10)
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80006fa:	f04f 31ff 	mov.w	r1, #4294967295
 80006fe:	483e      	ldr	r0, [pc, #248]	@ (80007f8 <ReadSensors+0x118>)
 8000700:	f002 f916 	bl	8002930 <HAL_ADC_PollForConversion>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d117      	bne.n	800073a <ReadSensors+0x5a>
		raw_value = HAL_ADC_GetValue(&hadc1);
 800070a:	483b      	ldr	r0, [pc, #236]	@ (80007f8 <ReadSensors+0x118>)
 800070c:	f002 fa04 	bl	8002b18 <HAL_ADC_GetValue>
 8000710:	6078      	str	r0, [r7, #4]
		lm35_1_temp = ((float)raw_value / ADC_RESOLUTION) * ADC_REF_VOLTAGE / LM35_VOLTAGE_TO_TEMP_CONV;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	ee07 3a90 	vmov	s15, r3
 8000718:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800071c:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8000800 <ReadSensors+0x120>
 8000720:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000724:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8000804 <ReadSensors+0x124>
 8000728:	ee27 7a87 	vmul.f32	s14, s15, s14
 800072c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8000808 <ReadSensors+0x128>
 8000730:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000734:	4b35      	ldr	r3, [pc, #212]	@ (800080c <ReadSensors+0x12c>)
 8000736:	edc3 7a00 	vstr	s15, [r3]
	}

	// LM35_2 (Channel 15)
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800073a:	f04f 31ff 	mov.w	r1, #4294967295
 800073e:	482e      	ldr	r0, [pc, #184]	@ (80007f8 <ReadSensors+0x118>)
 8000740:	f002 f8f6 	bl	8002930 <HAL_ADC_PollForConversion>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d117      	bne.n	800077a <ReadSensors+0x9a>
		raw_value = HAL_ADC_GetValue(&hadc1);
 800074a:	482b      	ldr	r0, [pc, #172]	@ (80007f8 <ReadSensors+0x118>)
 800074c:	f002 f9e4 	bl	8002b18 <HAL_ADC_GetValue>
 8000750:	6078      	str	r0, [r7, #4]
		lm35_2_temp = ((float)raw_value / ADC_RESOLUTION) * ADC_REF_VOLTAGE / LM35_VOLTAGE_TO_TEMP_CONV;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	ee07 3a90 	vmov	s15, r3
 8000758:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800075c:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8000800 <ReadSensors+0x120>
 8000760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000764:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000804 <ReadSensors+0x124>
 8000768:	ee27 7a87 	vmul.f32	s14, s15, s14
 800076c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8000808 <ReadSensors+0x128>
 8000770:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000774:	4b26      	ldr	r3, [pc, #152]	@ (8000810 <ReadSensors+0x130>)
 8000776:	edc3 7a00 	vstr	s15, [r3]
	}

	// Dust Sensor (Channel 5)
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800077a:	f04f 31ff 	mov.w	r1, #4294967295
 800077e:	481e      	ldr	r0, [pc, #120]	@ (80007f8 <ReadSensors+0x118>)
 8000780:	f002 f8d6 	bl	8002930 <HAL_ADC_PollForConversion>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d117      	bne.n	80007ba <ReadSensors+0xda>
		raw_value = HAL_ADC_GetValue(&hadc1);
 800078a:	481b      	ldr	r0, [pc, #108]	@ (80007f8 <ReadSensors+0x118>)
 800078c:	f002 f9c4 	bl	8002b18 <HAL_ADC_GetValue>
 8000790:	6078      	str	r0, [r7, #4]
		dust_density = ((float)raw_value / ADC_RESOLUTION) * ADC_REF_VOLTAGE * 100.0f; // Adjust scaling factor if needed
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	ee07 3a90 	vmov	s15, r3
 8000798:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800079c:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000800 <ReadSensors+0x120>
 80007a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007a4:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000804 <ReadSensors+0x124>
 80007a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007ac:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000814 <ReadSensors+0x134>
 80007b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007b4:	4b18      	ldr	r3, [pc, #96]	@ (8000818 <ReadSensors+0x138>)
 80007b6:	edc3 7a00 	vstr	s15, [r3]
	}

	// Stop ADC
	HAL_ADC_Stop(&hadc1);
 80007ba:	480f      	ldr	r0, [pc, #60]	@ (80007f8 <ReadSensors+0x118>)
 80007bc:	f002 f884 	bl	80028c8 <HAL_ADC_Stop>

	// Display sensor readings
	printf("LM35_1: %.2f C | LM35_2: %.2f C | Dust: %.2f μg/m^3\r\n", lm35_1_temp, lm35_2_temp, dust_density);
 80007c0:	4b12      	ldr	r3, [pc, #72]	@ (800080c <ReadSensors+0x12c>)
 80007c2:	edd3 7a00 	vldr	s15, [r3]
 80007c6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <ReadSensors+0x130>)
 80007cc:	edd3 7a00 	vldr	s15, [r3]
 80007d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007d4:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <ReadSensors+0x138>)
 80007d6:	edd3 6a00 	vldr	s13, [r3]
 80007da:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80007de:	ed8d 6b02 	vstr	d6, [sp, #8]
 80007e2:	ed8d 7b00 	vstr	d7, [sp]
 80007e6:	ec53 2b15 	vmov	r2, r3, d5
 80007ea:	480c      	ldr	r0, [pc, #48]	@ (800081c <ReadSensors+0x13c>)
 80007ec:	f01c fdea 	bl	801d3c4 <iprintf>
}
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	24004c6c 	.word	0x24004c6c
 80007fc:	0801f370 	.word	0x0801f370
 8000800:	457ff000 	.word	0x457ff000
 8000804:	40533333 	.word	0x40533333
 8000808:	3c23d70a 	.word	0x3c23d70a
 800080c:	24004c60 	.word	0x24004c60
 8000810:	24004c64 	.word	0x24004c64
 8000814:	42c80000 	.word	0x42c80000
 8000818:	24004c68 	.word	0x24004c68
 800081c:	0801f38c 	.word	0x0801f38c

08000820 <SendDustAlert>:

void SendDustAlert(void) {
 8000820:	b5b0      	push	{r4, r5, r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
	char message[] = "Dust threshold passed!\n"; // Message to send
 8000826:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <SendDustAlert+0x50>)
 8000828:	463c      	mov	r4, r7
 800082a:	461d      	mov	r5, r3
 800082c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800082e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000830:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000834:	e884 0003 	stmia.w	r4, {r0, r1}

	// Transmit the message via Bluetooth (USART2)
	if (HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY) != HAL_OK) {
 8000838:	463b      	mov	r3, r7
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff fdb8 	bl	80003b0 <strlen>
 8000840:	4603      	mov	r3, r0
 8000842:	b29a      	uxth	r2, r3
 8000844:	4639      	mov	r1, r7
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
 800084a:	480a      	ldr	r0, [pc, #40]	@ (8000874 <SendDustAlert+0x54>)
 800084c:	f009 fe4a 	bl	800a4e4 <HAL_UART_Transmit>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d003      	beq.n	800085e <SendDustAlert+0x3e>
		printf("Error: Bluetooth message transmission failed!\r\n");
 8000856:	4808      	ldr	r0, [pc, #32]	@ (8000878 <SendDustAlert+0x58>)
 8000858:	f01c fe1c 	bl	801d494 <puts>
} else {
	printf("Bluetooth message sent: %s\r\n", message);
}
}
 800085c:	e004      	b.n	8000868 <SendDustAlert+0x48>
	printf("Bluetooth message sent: %s\r\n", message);
 800085e:	463b      	mov	r3, r7
 8000860:	4619      	mov	r1, r3
 8000862:	4806      	ldr	r0, [pc, #24]	@ (800087c <SendDustAlert+0x5c>)
 8000864:	f01c fdae 	bl	801d3c4 <iprintf>
}
 8000868:	bf00      	nop
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bdb0      	pop	{r4, r5, r7, pc}
 8000870:	0801f414 	.word	0x0801f414
 8000874:	24004dbc 	.word	0x24004dbc
 8000878:	0801f3c4 	.word	0x0801f3c4
 800087c:	0801f3f4 	.word	0x0801f3f4

08000880 <mainTask>:
		printf("Bluetooth transmission completed.\r\n");
	}
}

// Task for reading sensors and controlling the fan
void mainTask(void *argument) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	for (;;) {

		printf("Starting measurement cycle...\r\n");
 8000888:	4824      	ldr	r0, [pc, #144]	@ (800091c <mainTask+0x9c>)
 800088a:	f01c fe03 	bl	801d494 <puts>
		ReadSensors();  // Perform sensor measurements
 800088e:	f7ff ff27 	bl	80006e0 <ReadSensors>

		// Control fan based on average temperature
		float avg_temp = (lm35_1_temp + lm35_2_temp) / 2.0f;
 8000892:	4b23      	ldr	r3, [pc, #140]	@ (8000920 <mainTask+0xa0>)
 8000894:	ed93 7a00 	vldr	s14, [r3]
 8000898:	4b22      	ldr	r3, [pc, #136]	@ (8000924 <mainTask+0xa4>)
 800089a:	edd3 7a00 	vldr	s15, [r3]
 800089e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008a2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80008a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008aa:	edc7 7a03 	vstr	s15, [r7, #12]
		if (avg_temp > FAN_THRESHOLD) {
 80008ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80008b2:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80008b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008be:	dd0b      	ble.n	80008d8 <mainTask+0x58>
			Fan_ON();
 80008c0:	f7ff fef6 	bl	80006b0 <Fan_ON>
			printf("Fan ON (Avg Temp: %.2f C)\r\n", avg_temp);
 80008c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80008c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008cc:	ec53 2b17 	vmov	r2, r3, d7
 80008d0:	4815      	ldr	r0, [pc, #84]	@ (8000928 <mainTask+0xa8>)
 80008d2:	f01c fd77 	bl	801d3c4 <iprintf>
 80008d6:	e00a      	b.n	80008ee <mainTask+0x6e>
		} else {
			Fan_OFF();
 80008d8:	f7ff fef6 	bl	80006c8 <Fan_OFF>
			printf("Fan OFF (Avg Temp: %.2f C)\r\n", avg_temp);
 80008dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80008e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008e4:	ec53 2b17 	vmov	r2, r3, d7
 80008e8:	4810      	ldr	r0, [pc, #64]	@ (800092c <mainTask+0xac>)
 80008ea:	f01c fd6b 	bl	801d3c4 <iprintf>
		}

		// Release semaphore if dust density exceeds threshold
		if (dust_density > DUST_THRESHOLD) {
 80008ee:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <mainTask+0xb0>)
 80008f0:	edd3 7a00 	vldr	s15, [r3]
 80008f4:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80008f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000900:	dd07      	ble.n	8000912 <mainTask+0x92>
			printf("Dust density exceeded threshold! Releasing semaphore...\r\n");
 8000902:	480c      	ldr	r0, [pc, #48]	@ (8000934 <mainTask+0xb4>)
 8000904:	f01c fdc6 	bl	801d494 <puts>
			osSemaphoreRelease(alertSemaphoreHandle);
 8000908:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <mainTask+0xb8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f00c f907 	bl	800cb20 <osSemaphoreRelease>
		}

		osDelay(2000);  // Delay for 2 seconds
 8000912:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000916:	f00b fe6c 	bl	800c5f2 <osDelay>
	for (;;) {
 800091a:	e7b5      	b.n	8000888 <mainTask+0x8>
 800091c:	0801f450 	.word	0x0801f450
 8000920:	24004c60 	.word	0x24004c60
 8000924:	24004c64 	.word	0x24004c64
 8000928:	0801f470 	.word	0x0801f470
 800092c:	0801f48c 	.word	0x0801f48c
 8000930:	24004c68 	.word	0x24004c68
 8000934:	0801f4ac 	.word	0x0801f4ac
 8000938:	24004ef4 	.word	0x24004ef4

0800093c <secondTask>:
	}
}

// Task for sending alerts via Bluetooth
void secondTask(void *argument) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	for (;;) {
		// Wait for semaphore to be released when dust density exceeds threshold
		if (osSemaphoreAcquire(alertSemaphoreHandle, osWaitForever) == osOK) {
 8000944:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <secondTask+0x28>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f04f 31ff 	mov.w	r1, #4294967295
 800094c:	4618      	mov	r0, r3
 800094e:	f00c f895 	bl	800ca7c <osSemaphoreAcquire>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d101      	bne.n	800095c <secondTask+0x20>
			SendDustAlert(); // Send "ALERT" message via HC-05
 8000958:	f7ff ff62 	bl	8000820 <SendDustAlert>
		}

		osDelay(100); // Allow other tasks to execute
 800095c:	2064      	movs	r0, #100	@ 0x64
 800095e:	f00b fe48 	bl	800c5f2 <osDelay>
		if (osSemaphoreAcquire(alertSemaphoreHandle, osWaitForever) == osOK) {
 8000962:	e7ef      	b.n	8000944 <secondTask+0x8>
 8000964:	24004ef4 	.word	0x24004ef4

08000968 <_write>:
/* USER CODE BEGIN 0 */
// Redirecționare printf -> UART3


int _write(int file, char *ptr, int len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	b29a      	uxth	r2, r3
 8000978:	f04f 33ff 	mov.w	r3, #4294967295
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	4804      	ldr	r0, [pc, #16]	@ (8000990 <_write+0x28>)
 8000980:	f009 fdb0 	bl	800a4e4 <HAL_UART_Transmit>
	return len;
 8000984:	687b      	ldr	r3, [r7, #4]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	24004e50 	.word	0x24004e50

08000994 <InitCycleCounter>:

void InitCycleCounter(void) {
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Activează accesul la DWT
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <InitCycleCounter+0x2c>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	4a08      	ldr	r2, [pc, #32]	@ (80009c0 <InitCycleCounter+0x2c>)
 800099e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80009a2:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;                                // Resetează contorul
 80009a4:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <InitCycleCounter+0x30>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Activează contorul de cicluri
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <InitCycleCounter+0x30>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a05      	ldr	r2, [pc, #20]	@ (80009c4 <InitCycleCounter+0x30>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6013      	str	r3, [r2, #0]
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000edf0 	.word	0xe000edf0
 80009c4:	e0001000 	.word	0xe0001000

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009cc:	f001 f94e 	bl	8001c6c <HAL_Init>

  /* USER CODE BEGIN Init */
  InitCycleCounter();
 80009d0:	f7ff ffe0 	bl	8000994 <InitCycleCounter>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d4:	f000 f878 	bl	8000ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d8:	f000 fac8 	bl	8000f6c <MX_GPIO_Init>
  MX_USB_OTG_HS_USB_Init();
 80009dc:	f000 fabe 	bl	8000f5c <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80009e0:	f000 f8e2 	bl	8000ba8 <MX_ADC1_Init>
  MX_TIM2_Init();
 80009e4:	f000 f97a 	bl	8000cdc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80009e8:	f000 fa20 	bl	8000e2c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80009ec:	f000 f9d2 	bl	8000d94 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80009f0:	f000 fa68 	bl	8000ec4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

	printf("Sistem pornit. Începe monitorizarea..\r\n");
 80009f4:	4823      	ldr	r0, [pc, #140]	@ (8000a84 <main+0xbc>)
 80009f6:	f01c fd4d 	bl	801d494 <puts>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80009fa:	2100      	movs	r1, #0
 80009fc:	4822      	ldr	r0, [pc, #136]	@ (8000a88 <main+0xc0>)
 80009fe:	f008 fd59 	bl	80094b4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a02:	f00b fd05 	bl	800c410 <osKernelInitialize>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of alertSemaphore */
  alertSemaphoreHandle = osSemaphoreNew(1, 1, &alertSemaphore_attributes);
 8000a06:	4a21      	ldr	r2, [pc, #132]	@ (8000a8c <main+0xc4>)
 8000a08:	2101      	movs	r1, #1
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f00b ffac 	bl	800c968 <osSemaphoreNew>
 8000a10:	4603      	mov	r3, r0
 8000a12:	4a1f      	ldr	r2, [pc, #124]	@ (8000a90 <main+0xc8>)
 8000a14:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of SensorTimer */
  SensorTimerHandle = osTimerNew(Callback01, osTimerPeriodic, NULL, &SensorTimer_attributes);
 8000a16:	4b1f      	ldr	r3, [pc, #124]	@ (8000a94 <main+0xcc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	481e      	ldr	r0, [pc, #120]	@ (8000a98 <main+0xd0>)
 8000a1e:	f00b fe19 	bl	800c654 <osTimerNew>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4a1d      	ldr	r2, [pc, #116]	@ (8000a9c <main+0xd4>)
 8000a26:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a28:	4a1d      	ldr	r2, [pc, #116]	@ (8000aa0 <main+0xd8>)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	481d      	ldr	r0, [pc, #116]	@ (8000aa4 <main+0xdc>)
 8000a2e:	f00b fd4e 	bl	800c4ce <osThreadNew>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4a1c      	ldr	r2, [pc, #112]	@ (8000aa8 <main+0xe0>)
 8000a36:	6013      	str	r3, [r2, #0]

  /* creation of SensorTask */
  SensorTaskHandle = osThreadNew(mainTask, NULL, &SensorTask_attributes);
 8000a38:	4a1c      	ldr	r2, [pc, #112]	@ (8000aac <main+0xe4>)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	481c      	ldr	r0, [pc, #112]	@ (8000ab0 <main+0xe8>)
 8000a3e:	f00b fd46 	bl	800c4ce <osThreadNew>
 8000a42:	4603      	mov	r3, r0
 8000a44:	4a1b      	ldr	r2, [pc, #108]	@ (8000ab4 <main+0xec>)
 8000a46:	6013      	str	r3, [r2, #0]

  /* creation of CommTask */
  CommTaskHandle = osThreadNew(secondTask, NULL, &CommTask_attributes);
 8000a48:	4a1b      	ldr	r2, [pc, #108]	@ (8000ab8 <main+0xf0>)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	481b      	ldr	r0, [pc, #108]	@ (8000abc <main+0xf4>)
 8000a4e:	f00b fd3e 	bl	800c4ce <osThreadNew>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4a1a      	ldr	r2, [pc, #104]	@ (8000ac0 <main+0xf8>)
 8000a56:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	alertSemaphoreHandle = osSemaphoreNew(1, 0, NULL);  // Binary semaphore
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f00b ff83 	bl	800c968 <osSemaphoreNew>
 8000a62:	4603      	mov	r3, r0
 8000a64:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <main+0xc8>)
 8000a66:	6013      	str	r3, [r2, #0]
	    if (alertSemaphoreHandle == NULL) {
 8000a68:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <main+0xc8>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d104      	bne.n	8000a7a <main+0xb2>
	        printf("Error: Semaphore initialization failed!\r\n");
 8000a70:	4814      	ldr	r0, [pc, #80]	@ (8000ac4 <main+0xfc>)
 8000a72:	f01c fd0f 	bl	801d494 <puts>
	        while (1);  // Halt the program if semaphore initialization fails
 8000a76:	bf00      	nop
 8000a78:	e7fd      	b.n	8000a76 <main+0xae>
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a7a:	f00b fced 	bl	800c458 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000a7e:	bf00      	nop
 8000a80:	e7fd      	b.n	8000a7e <main+0xb6>
 8000a82:	bf00      	nop
 8000a84:	0801f528 	.word	0x0801f528
 8000a88:	24004cdc 	.word	0x24004cdc
 8000a8c:	0802249c 	.word	0x0802249c
 8000a90:	24004ef4 	.word	0x24004ef4
 8000a94:	0802248c 	.word	0x0802248c
 8000a98:	0800119d 	.word	0x0800119d
 8000a9c:	24004ef0 	.word	0x24004ef0
 8000aa0:	08022420 	.word	0x08022420
 8000aa4:	08001189 	.word	0x08001189
 8000aa8:	24004ee4 	.word	0x24004ee4
 8000aac:	08022444 	.word	0x08022444
 8000ab0:	08000881 	.word	0x08000881
 8000ab4:	24004ee8 	.word	0x24004ee8
 8000ab8:	08022468 	.word	0x08022468
 8000abc:	0800093d 	.word	0x0800093d
 8000ac0:	24004eec 	.word	0x24004eec
 8000ac4:	0801f550 	.word	0x0801f550

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b09c      	sub	sp, #112	@ 0x70
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad2:	224c      	movs	r2, #76	@ 0x4c
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f01c fdcc 	bl	801d674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2220      	movs	r2, #32
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f01c fdc6 	bl	801d674 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f004 ffdb 	bl	8005aa4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba4 <SystemClock_Config+0xdc>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	4a2b      	ldr	r2, [pc, #172]	@ (8000ba4 <SystemClock_Config+0xdc>)
 8000af8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000afc:	6193      	str	r3, [r2, #24]
 8000afe:	4b29      	ldr	r3, [pc, #164]	@ (8000ba4 <SystemClock_Config+0xdc>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b0a:	bf00      	nop
 8000b0c:	4b25      	ldr	r3, [pc, #148]	@ (8000ba4 <SystemClock_Config+0xdc>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b18:	d1f8      	bne.n	8000b0c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b1a:	2321      	movs	r3, #33	@ 0x21
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b1e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b24:	2301      	movs	r3, #1
 8000b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b30:	2304      	movs	r3, #4
 8000b32:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000b34:	f240 1313 	movw	r3, #275	@ 0x113
 8000b38:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b3e:	2304      	movs	r3, #4
 8000b40:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000b46:	2304      	movs	r3, #4
 8000b48:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b56:	4618      	mov	r0, r3
 8000b58:	f004 ffde 	bl	8005b18 <HAL_RCC_OscConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b62:	f000 fb39 	bl	80011d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b66:	233f      	movs	r3, #63	@ 0x3f
 8000b68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b72:	2308      	movs	r3, #8
 8000b74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b76:	2340      	movs	r3, #64	@ 0x40
 8000b78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b7a:	2340      	movs	r3, #64	@ 0x40
 8000b7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b82:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b84:	2340      	movs	r3, #64	@ 0x40
 8000b86:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2103      	movs	r1, #3
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f005 fb9d 	bl	80062cc <HAL_RCC_ClockConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b98:	f000 fb1e 	bl	80011d8 <Error_Handler>
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	3770      	adds	r7, #112	@ 0x70
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	58024800 	.word	0x58024800

08000ba8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08c      	sub	sp, #48	@ 0x30
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bba:	463b      	mov	r3, r7
 8000bbc:	2224      	movs	r2, #36	@ 0x24
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f01c fd57 	bl	801d674 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bc6:	4b40      	ldr	r3, [pc, #256]	@ (8000cc8 <MX_ADC1_Init+0x120>)
 8000bc8:	4a40      	ldr	r2, [pc, #256]	@ (8000ccc <MX_ADC1_Init+0x124>)
 8000bca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bcc:	4b3e      	ldr	r3, [pc, #248]	@ (8000cc8 <MX_ADC1_Init+0x120>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd2:	4b3d      	ldr	r3, [pc, #244]	@ (8000cc8 <MX_ADC1_Init+0x120>)
 8000bd4:	2208      	movs	r2, #8
 8000bd6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8000cc8 <MX_ADC1_Init+0x120>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bde:	4b3a      	ldr	r3, [pc, #232]	@ (8000cc8 <MX_ADC1_Init+0x120>)
 8000be0:	2204      	movs	r2, #4
 8000be2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000be4:	4b38      	ldr	r3, [pc, #224]	@ (8000cc8 <MX_ADC1_Init+0x120>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bea:	4b37      	ldr	r3, [pc, #220]	@ (8000cc8 <MX_ADC1_Init+0x120>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000bf0:	4b35      	ldr	r3, [pc, #212]	@ (8000cc8 <MX_ADC1_Init+0x120>)
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf6:	4b34      	ldr	r3, [pc, #208]	@ (8000cc8 <MX_ADC1_Init+0x120>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bfe:	4b32      	ldr	r3, [pc, #200]	@ (8000cc8 <MX_ADC1_Init+0x120>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c04:	4b30      	ldr	r3, [pc, #192]	@ (8000cc8 <MX_ADC1_Init+0x120>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc8 <MX_ADC1_Init+0x120>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c10:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc8 <MX_ADC1_Init+0x120>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c16:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc8 <MX_ADC1_Init+0x120>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc8 <MX_ADC1_Init+0x120>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000c24:	4b28      	ldr	r3, [pc, #160]	@ (8000cc8 <MX_ADC1_Init+0x120>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c2a:	4827      	ldr	r0, [pc, #156]	@ (8000cc8 <MX_ADC1_Init+0x120>)
 8000c2c:	f001 fb7a 	bl	8002324 <HAL_ADC_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000c36:	f000 facf 	bl	80011d8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	4820      	ldr	r0, [pc, #128]	@ (8000cc8 <MX_ADC1_Init+0x120>)
 8000c46:	f002 ff5f 	bl	8003b08 <HAL_ADCEx_MultiModeConfigChannel>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c50:	f000 fac2 	bl	80011d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c54:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd0 <MX_ADC1_Init+0x128>)
 8000c56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c58:	2306      	movs	r3, #6
 8000c5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000c5c:	2305      	movs	r3, #5
 8000c5e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c60:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c64:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c66:	2304      	movs	r3, #4
 8000c68:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c74:	463b      	mov	r3, r7
 8000c76:	4619      	mov	r1, r3
 8000c78:	4813      	ldr	r0, [pc, #76]	@ (8000cc8 <MX_ADC1_Init+0x120>)
 8000c7a:	f001 ff5b 	bl	8002b34 <HAL_ADC_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000c84:	f000 faa8 	bl	80011d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <MX_ADC1_Init+0x12c>)
 8000c8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c90:	463b      	mov	r3, r7
 8000c92:	4619      	mov	r1, r3
 8000c94:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <MX_ADC1_Init+0x120>)
 8000c96:	f001 ff4d 	bl	8002b34 <HAL_ADC_ConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000ca0:	f000 fa9a 	bl	80011d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <MX_ADC1_Init+0x130>)
 8000ca6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ca8:	2312      	movs	r3, #18
 8000caa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cac:	463b      	mov	r3, r7
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <MX_ADC1_Init+0x120>)
 8000cb2:	f001 ff3f 	bl	8002b34 <HAL_ADC_ConfigChannel>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000cbc:	f000 fa8c 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	3730      	adds	r7, #48	@ 0x30
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	24004c6c 	.word	0x24004c6c
 8000ccc:	40022000 	.word	0x40022000
 8000cd0:	2a000400 	.word	0x2a000400
 8000cd4:	3ef08000 	.word	0x3ef08000
 8000cd8:	14f00020 	.word	0x14f00020

08000cdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cee:	463b      	mov	r3, r7
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
 8000cfc:	615a      	str	r2, [r3, #20]
 8000cfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d00:	4b23      	ldr	r3, [pc, #140]	@ (8000d90 <MX_TIM2_Init+0xb4>)
 8000d02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8000d08:	4b21      	ldr	r3, [pc, #132]	@ (8000d90 <MX_TIM2_Init+0xb4>)
 8000d0a:	f240 3247 	movw	r2, #839	@ 0x347
 8000d0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b1f      	ldr	r3, [pc, #124]	@ (8000d90 <MX_TIM2_Init+0xb4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000d16:	4b1e      	ldr	r3, [pc, #120]	@ (8000d90 <MX_TIM2_Init+0xb4>)
 8000d18:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d90 <MX_TIM2_Init+0xb4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <MX_TIM2_Init+0xb4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d2a:	4819      	ldr	r0, [pc, #100]	@ (8000d90 <MX_TIM2_Init+0xb4>)
 8000d2c:	f008 fb6a 	bl	8009404 <HAL_TIM_PWM_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8000d36:	f000 fa4f 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	4619      	mov	r1, r3
 8000d48:	4811      	ldr	r0, [pc, #68]	@ (8000d90 <MX_TIM2_Init+0xb4>)
 8000d4a:	f009 fac1 	bl	800a2d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000d54:	f000 fa40 	bl	80011d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d58:	2360      	movs	r3, #96	@ 0x60
 8000d5a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 320;
 8000d5c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000d60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4807      	ldr	r0, [pc, #28]	@ (8000d90 <MX_TIM2_Init+0xb4>)
 8000d72:	f008 fdc3 	bl	80098fc <HAL_TIM_PWM_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000d7c:	f000 fa2c 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d80:	4803      	ldr	r0, [pc, #12]	@ (8000d90 <MX_TIM2_Init+0xb4>)
 8000d82:	f000 fb21 	bl	80013c8 <HAL_TIM_MspPostInit>

}
 8000d86:	bf00      	nop
 8000d88:	3728      	adds	r7, #40	@ 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	24004cdc 	.word	0x24004cdc

08000d94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d98:	4b22      	ldr	r3, [pc, #136]	@ (8000e24 <MX_USART1_UART_Init+0x90>)
 8000d9a:	4a23      	ldr	r2, [pc, #140]	@ (8000e28 <MX_USART1_UART_Init+0x94>)
 8000d9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d9e:	4b21      	ldr	r3, [pc, #132]	@ (8000e24 <MX_USART1_UART_Init+0x90>)
 8000da0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000da4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000da6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <MX_USART1_UART_Init+0x90>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dac:	4b1d      	ldr	r3, [pc, #116]	@ (8000e24 <MX_USART1_UART_Init+0x90>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000db2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e24 <MX_USART1_UART_Init+0x90>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <MX_USART1_UART_Init+0x90>)
 8000dba:	220c      	movs	r2, #12
 8000dbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <MX_USART1_UART_Init+0x90>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc4:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <MX_USART1_UART_Init+0x90>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dca:	4b16      	ldr	r3, [pc, #88]	@ (8000e24 <MX_USART1_UART_Init+0x90>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <MX_USART1_UART_Init+0x90>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <MX_USART1_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ddc:	4811      	ldr	r0, [pc, #68]	@ (8000e24 <MX_USART1_UART_Init+0x90>)
 8000dde:	f009 fb31 	bl	800a444 <HAL_UART_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000de8:	f000 f9f6 	bl	80011d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dec:	2100      	movs	r1, #0
 8000dee:	480d      	ldr	r0, [pc, #52]	@ (8000e24 <MX_USART1_UART_Init+0x90>)
 8000df0:	f00a fccb 	bl	800b78a <HAL_UARTEx_SetTxFifoThreshold>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000dfa:	f000 f9ed 	bl	80011d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4808      	ldr	r0, [pc, #32]	@ (8000e24 <MX_USART1_UART_Init+0x90>)
 8000e02:	f00a fd00 	bl	800b806 <HAL_UARTEx_SetRxFifoThreshold>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e0c:	f000 f9e4 	bl	80011d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e10:	4804      	ldr	r0, [pc, #16]	@ (8000e24 <MX_USART1_UART_Init+0x90>)
 8000e12:	f00a fc81 	bl	800b718 <HAL_UARTEx_DisableFifoMode>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e1c:	f000 f9dc 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	24004d28 	.word	0x24004d28
 8000e28:	40011000 	.word	0x40011000

08000e2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e30:	4b22      	ldr	r3, [pc, #136]	@ (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e32:	4a23      	ldr	r2, [pc, #140]	@ (8000ec0 <MX_USART2_UART_Init+0x94>)
 8000e34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e36:	4b21      	ldr	r3, [pc, #132]	@ (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e38:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000e3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e44:	4b1d      	ldr	r3, [pc, #116]	@ (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e50:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e56:	4b19      	ldr	r3, [pc, #100]	@ (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5c:	4b17      	ldr	r3, [pc, #92]	@ (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e62:	4b16      	ldr	r3, [pc, #88]	@ (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e68:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e6e:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e74:	4811      	ldr	r0, [pc, #68]	@ (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e76:	f009 fae5 	bl	800a444 <HAL_UART_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e80:	f000 f9aa 	bl	80011d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e84:	2100      	movs	r1, #0
 8000e86:	480d      	ldr	r0, [pc, #52]	@ (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e88:	f00a fc7f 	bl	800b78a <HAL_UARTEx_SetTxFifoThreshold>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e92:	f000 f9a1 	bl	80011d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e96:	2100      	movs	r1, #0
 8000e98:	4808      	ldr	r0, [pc, #32]	@ (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e9a:	f00a fcb4 	bl	800b806 <HAL_UARTEx_SetRxFifoThreshold>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ea4:	f000 f998 	bl	80011d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ea8:	4804      	ldr	r0, [pc, #16]	@ (8000ebc <MX_USART2_UART_Init+0x90>)
 8000eaa:	f00a fc35 	bl	800b718 <HAL_UARTEx_DisableFifoMode>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000eb4:	f000 f990 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	24004dbc 	.word	0x24004dbc
 8000ec0:	40004400 	.word	0x40004400

08000ec4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ec8:	4b22      	ldr	r3, [pc, #136]	@ (8000f54 <MX_USART3_UART_Init+0x90>)
 8000eca:	4a23      	ldr	r2, [pc, #140]	@ (8000f58 <MX_USART3_UART_Init+0x94>)
 8000ecc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ece:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <MX_USART3_UART_Init+0x90>)
 8000ed0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ed4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f54 <MX_USART3_UART_Init+0x90>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000edc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f54 <MX_USART3_UART_Init+0x90>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f54 <MX_USART3_UART_Init+0x90>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f54 <MX_USART3_UART_Init+0x90>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eee:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <MX_USART3_UART_Init+0x90>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef4:	4b17      	ldr	r3, [pc, #92]	@ (8000f54 <MX_USART3_UART_Init+0x90>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000efa:	4b16      	ldr	r3, [pc, #88]	@ (8000f54 <MX_USART3_UART_Init+0x90>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f00:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <MX_USART3_UART_Init+0x90>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f06:	4b13      	ldr	r3, [pc, #76]	@ (8000f54 <MX_USART3_UART_Init+0x90>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f0c:	4811      	ldr	r0, [pc, #68]	@ (8000f54 <MX_USART3_UART_Init+0x90>)
 8000f0e:	f009 fa99 	bl	800a444 <HAL_UART_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f18:	f000 f95e 	bl	80011d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	480d      	ldr	r0, [pc, #52]	@ (8000f54 <MX_USART3_UART_Init+0x90>)
 8000f20:	f00a fc33 	bl	800b78a <HAL_UARTEx_SetTxFifoThreshold>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f2a:	f000 f955 	bl	80011d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4808      	ldr	r0, [pc, #32]	@ (8000f54 <MX_USART3_UART_Init+0x90>)
 8000f32:	f00a fc68 	bl	800b806 <HAL_UARTEx_SetRxFifoThreshold>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f3c:	f000 f94c 	bl	80011d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f40:	4804      	ldr	r0, [pc, #16]	@ (8000f54 <MX_USART3_UART_Init+0x90>)
 8000f42:	f00a fbe9 	bl	800b718 <HAL_UARTEx_DisableFifoMode>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f4c:	f000 f944 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	24004e50 	.word	0x24004e50
 8000f58:	40004800 	.word	0x40004800

08000f5c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08c      	sub	sp, #48	@ 0x30
 8000f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	4b7a      	ldr	r3, [pc, #488]	@ (800116c <MX_GPIO_Init+0x200>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f88:	4a78      	ldr	r2, [pc, #480]	@ (800116c <MX_GPIO_Init+0x200>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f92:	4b76      	ldr	r3, [pc, #472]	@ (800116c <MX_GPIO_Init+0x200>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
 8000f9e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa0:	4b72      	ldr	r3, [pc, #456]	@ (800116c <MX_GPIO_Init+0x200>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa6:	4a71      	ldr	r2, [pc, #452]	@ (800116c <MX_GPIO_Init+0x200>)
 8000fa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb0:	4b6e      	ldr	r3, [pc, #440]	@ (800116c <MX_GPIO_Init+0x200>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b6b      	ldr	r3, [pc, #428]	@ (800116c <MX_GPIO_Init+0x200>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc4:	4a69      	ldr	r2, [pc, #420]	@ (800116c <MX_GPIO_Init+0x200>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fce:	4b67      	ldr	r3, [pc, #412]	@ (800116c <MX_GPIO_Init+0x200>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fdc:	4b63      	ldr	r3, [pc, #396]	@ (800116c <MX_GPIO_Init+0x200>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe2:	4a62      	ldr	r2, [pc, #392]	@ (800116c <MX_GPIO_Init+0x200>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fec:	4b5f      	ldr	r3, [pc, #380]	@ (800116c <MX_GPIO_Init+0x200>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	4b5c      	ldr	r3, [pc, #368]	@ (800116c <MX_GPIO_Init+0x200>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001000:	4a5a      	ldr	r2, [pc, #360]	@ (800116c <MX_GPIO_Init+0x200>)
 8001002:	f043 0308 	orr.w	r3, r3, #8
 8001006:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800100a:	4b58      	ldr	r3, [pc, #352]	@ (800116c <MX_GPIO_Init+0x200>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001010:	f003 0308 	and.w	r3, r3, #8
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001018:	4b54      	ldr	r3, [pc, #336]	@ (800116c <MX_GPIO_Init+0x200>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101e:	4a53      	ldr	r2, [pc, #332]	@ (800116c <MX_GPIO_Init+0x200>)
 8001020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001024:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001028:	4b50      	ldr	r3, [pc, #320]	@ (800116c <MX_GPIO_Init+0x200>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001036:	4b4d      	ldr	r3, [pc, #308]	@ (800116c <MX_GPIO_Init+0x200>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103c:	4a4b      	ldr	r2, [pc, #300]	@ (800116c <MX_GPIO_Init+0x200>)
 800103e:	f043 0310 	orr.w	r3, r3, #16
 8001042:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001046:	4b49      	ldr	r3, [pc, #292]	@ (800116c <MX_GPIO_Init+0x200>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104c:	f003 0310 	and.w	r3, r3, #16
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2140      	movs	r1, #64	@ 0x40
 8001058:	4845      	ldr	r0, [pc, #276]	@ (8001170 <MX_GPIO_Init+0x204>)
 800105a:	f004 fd09 	bl	8005a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001064:	4843      	ldr	r0, [pc, #268]	@ (8001174 <MX_GPIO_Init+0x208>)
 8001066:	f004 fd03 	bl	8005a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001070:	4841      	ldr	r0, [pc, #260]	@ (8001178 <MX_GPIO_Init+0x20c>)
 8001072:	f004 fcfd 	bl	8005a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	2102      	movs	r1, #2
 800107a:	4840      	ldr	r0, [pc, #256]	@ (800117c <MX_GPIO_Init+0x210>)
 800107c:	f004 fcf8 	bl	8005a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001080:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4619      	mov	r1, r3
 8001094:	483a      	ldr	r0, [pc, #232]	@ (8001180 <MX_GPIO_Init+0x214>)
 8001096:	f004 fb43 	bl	8005720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800109a:	2340      	movs	r3, #64	@ 0x40
 800109c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	482f      	ldr	r0, [pc, #188]	@ (8001170 <MX_GPIO_Init+0x204>)
 80010b2:	f004 fb35 	bl	8005720 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80010b6:	f244 0301 	movw	r3, #16385	@ 0x4001
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	4619      	mov	r1, r3
 80010ce:	4829      	ldr	r0, [pc, #164]	@ (8001174 <MX_GPIO_Init+0x208>)
 80010d0:	f004 fb26 	bl	8005720 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80010d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	4822      	ldr	r0, [pc, #136]	@ (8001178 <MX_GPIO_Init+0x20c>)
 80010ee:	f004 fb17 	bl	8005720 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80010f2:	2380      	movs	r3, #128	@ 0x80
 80010f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	4619      	mov	r1, r3
 8001106:	481f      	ldr	r0, [pc, #124]	@ (8001184 <MX_GPIO_Init+0x218>)
 8001108:	f004 fb0a 	bl	8005720 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800110c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	4619      	mov	r1, r3
 8001120:	4813      	ldr	r0, [pc, #76]	@ (8001170 <MX_GPIO_Init+0x204>)
 8001122:	f004 fafd 	bl	8005720 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001126:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001138:	230a      	movs	r3, #10
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	480b      	ldr	r0, [pc, #44]	@ (8001170 <MX_GPIO_Init+0x204>)
 8001144:	f004 faec 	bl	8005720 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001148:	2302      	movs	r3, #2
 800114a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114c:	2301      	movs	r3, #1
 800114e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	4807      	ldr	r0, [pc, #28]	@ (800117c <MX_GPIO_Init+0x210>)
 8001160:	f004 fade 	bl	8005720 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001164:	bf00      	nop
 8001166:	3730      	adds	r7, #48	@ 0x30
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	58024400 	.word	0x58024400
 8001170:	58020000 	.word	0x58020000
 8001174:	58020400 	.word	0x58020400
 8001178:	58020c00 	.word	0x58020c00
 800117c:	58021000 	.word	0x58021000
 8001180:	58020800 	.word	0x58020800
 8001184:	58021800 	.word	0x58021800

08001188 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001190:	f00a fbc6 	bl	800b920 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8001194:	2001      	movs	r0, #1
 8001196:	f00b fa2c 	bl	800c5f2 <osDelay>
 800119a:	e7fb      	b.n	8001194 <StartDefaultTask+0xc>

0800119c <Callback01>:
/* USER CODE END Header_mainTask */


/* Callback01 function */
void Callback01(void *argument)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

  /* USER CODE END Callback01 */
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 80011b8:	f107 0318 	add.w	r3, r7, #24
 80011bc:	60fb      	str	r3, [r7, #12]
	        printf("Bluetooth transmission complete.\r\n");
	    }
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a04      	ldr	r2, [pc, #16]	@ (80011d4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d101      	bne.n	80011cc <HAL_TIM_PeriodElapsedCallback+0x1c>
    HAL_IncTick();
 80011c8:	f000 fd8c 	bl	8001ce4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40001000 	.word	0x40001000

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <Error_Handler+0x8>

080011e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <HAL_MspInit+0x38>)
 80011ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011f0:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <HAL_MspInit+0x38>)
 80011f2:	f043 0302 	orr.w	r3, r3, #2
 80011f6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <HAL_MspInit+0x38>)
 80011fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001208:	2200      	movs	r2, #0
 800120a:	210f      	movs	r1, #15
 800120c:	f06f 0001 	mvn.w	r0, #1
 8001210:	f002 fe14 	bl	8003e3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	58024400 	.word	0x58024400

08001220 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b0ba      	sub	sp, #232	@ 0xe8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001238:	f107 0318 	add.w	r3, r7, #24
 800123c:	22b8      	movs	r2, #184	@ 0xb8
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f01c fa17 	bl	801d674 <memset>
  if(hadc->Instance==ADC1)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a4a      	ldr	r2, [pc, #296]	@ (8001374 <HAL_ADC_MspInit+0x154>)
 800124c:	4293      	cmp	r3, r2
 800124e:	f040 808c 	bne.w	800136a <HAL_ADC_MspInit+0x14a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001252:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001256:	f04f 0300 	mov.w	r3, #0
 800125a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800125e:	2301      	movs	r3, #1
 8001260:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 24;
 8001262:	2318      	movs	r3, #24
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001266:	2302      	movs	r3, #2
 8001268:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800126a:	2302      	movs	r3, #2
 800126c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800126e:	2302      	movs	r3, #2
 8001270:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001272:	23c0      	movs	r3, #192	@ 0xc0
 8001274:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001276:	2300      	movs	r3, #0
 8001278:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001284:	f107 0318 	add.w	r3, r7, #24
 8001288:	4618      	mov	r0, r3
 800128a:	f005 fbed 	bl	8006a68 <HAL_RCCEx_PeriphCLKConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8001294:	f7ff ffa0 	bl	80011d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001298:	4b37      	ldr	r3, [pc, #220]	@ (8001378 <HAL_ADC_MspInit+0x158>)
 800129a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800129e:	4a36      	ldr	r2, [pc, #216]	@ (8001378 <HAL_ADC_MspInit+0x158>)
 80012a0:	f043 0320 	orr.w	r3, r3, #32
 80012a4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80012a8:	4b33      	ldr	r3, [pc, #204]	@ (8001378 <HAL_ADC_MspInit+0x158>)
 80012aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012ae:	f003 0320 	and.w	r3, r3, #32
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b6:	4b30      	ldr	r3, [pc, #192]	@ (8001378 <HAL_ADC_MspInit+0x158>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012bc:	4a2e      	ldr	r2, [pc, #184]	@ (8001378 <HAL_ADC_MspInit+0x158>)
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001378 <HAL_ADC_MspInit+0x158>)
 80012c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	4b28      	ldr	r3, [pc, #160]	@ (8001378 <HAL_ADC_MspInit+0x158>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012da:	4a27      	ldr	r2, [pc, #156]	@ (8001378 <HAL_ADC_MspInit+0x158>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e4:	4b24      	ldr	r3, [pc, #144]	@ (8001378 <HAL_ADC_MspInit+0x158>)
 80012e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <HAL_ADC_MspInit+0x158>)
 80012f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001378 <HAL_ADC_MspInit+0x158>)
 80012fa:	f043 0302 	orr.w	r3, r3, #2
 80012fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001302:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <HAL_ADC_MspInit+0x158>)
 8001304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA3     ------> ADC1_INP15
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001310:	2301      	movs	r3, #1
 8001312:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001316:	2303      	movs	r3, #3
 8001318:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001322:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001326:	4619      	mov	r1, r3
 8001328:	4814      	ldr	r0, [pc, #80]	@ (800137c <HAL_ADC_MspInit+0x15c>)
 800132a:	f004 f9f9 	bl	8005720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800132e:	2308      	movs	r3, #8
 8001330:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001334:	2303      	movs	r3, #3
 8001336:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001344:	4619      	mov	r1, r3
 8001346:	480e      	ldr	r0, [pc, #56]	@ (8001380 <HAL_ADC_MspInit+0x160>)
 8001348:	f004 f9ea 	bl	8005720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800134c:	2302      	movs	r3, #2
 800134e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001352:	2303      	movs	r3, #3
 8001354:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001362:	4619      	mov	r1, r3
 8001364:	4807      	ldr	r0, [pc, #28]	@ (8001384 <HAL_ADC_MspInit+0x164>)
 8001366:	f004 f9db 	bl	8005720 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800136a:	bf00      	nop
 800136c:	37e8      	adds	r7, #232	@ 0xe8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40022000 	.word	0x40022000
 8001378:	58024400 	.word	0x58024400
 800137c:	58020800 	.word	0x58020800
 8001380:	58020000 	.word	0x58020000
 8001384:	58020400 	.word	0x58020400

08001388 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001398:	d10e      	bne.n	80013b8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800139a:	4b0a      	ldr	r3, [pc, #40]	@ (80013c4 <HAL_TIM_PWM_MspInit+0x3c>)
 800139c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013a0:	4a08      	ldr	r2, [pc, #32]	@ (80013c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013aa:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80013ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	58024400 	.word	0x58024400

080013c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013e8:	d11e      	bne.n	8001428 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <HAL_TIM_MspPostInit+0x68>)
 80013ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001430 <HAL_TIM_MspPostInit+0x68>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <HAL_TIM_MspPostInit+0x68>)
 80013fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001408:	2301      	movs	r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001418:	2301      	movs	r3, #1
 800141a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	4619      	mov	r1, r3
 8001422:	4804      	ldr	r0, [pc, #16]	@ (8001434 <HAL_TIM_MspPostInit+0x6c>)
 8001424:	f004 f97c 	bl	8005720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001428:	bf00      	nop
 800142a:	3720      	adds	r7, #32
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	58024400 	.word	0x58024400
 8001434:	58020000 	.word	0x58020000

08001438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b0bc      	sub	sp, #240	@ 0xf0
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001450:	f107 0320 	add.w	r3, r7, #32
 8001454:	22b8      	movs	r2, #184	@ 0xb8
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f01c f90b 	bl	801d674 <memset>
  if(huart->Instance==USART1)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a88      	ldr	r2, [pc, #544]	@ (8001684 <HAL_UART_MspInit+0x24c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d15c      	bne.n	8001522 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001468:	f04f 0201 	mov.w	r2, #1
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800147a:	f107 0320 	add.w	r3, r7, #32
 800147e:	4618      	mov	r0, r3
 8001480:	f005 faf2 	bl	8006a68 <HAL_RCCEx_PeriphCLKConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800148a:	f7ff fea5 	bl	80011d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800148e:	4b7e      	ldr	r3, [pc, #504]	@ (8001688 <HAL_UART_MspInit+0x250>)
 8001490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001494:	4a7c      	ldr	r2, [pc, #496]	@ (8001688 <HAL_UART_MspInit+0x250>)
 8001496:	f043 0310 	orr.w	r3, r3, #16
 800149a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800149e:	4b7a      	ldr	r3, [pc, #488]	@ (8001688 <HAL_UART_MspInit+0x250>)
 80014a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014a4:	f003 0310 	and.w	r3, r3, #16
 80014a8:	61fb      	str	r3, [r7, #28]
 80014aa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ac:	4b76      	ldr	r3, [pc, #472]	@ (8001688 <HAL_UART_MspInit+0x250>)
 80014ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b2:	4a75      	ldr	r2, [pc, #468]	@ (8001688 <HAL_UART_MspInit+0x250>)
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014bc:	4b72      	ldr	r3, [pc, #456]	@ (8001688 <HAL_UART_MspInit+0x250>)
 80014be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80014e4:	2304      	movs	r3, #4
 80014e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ea:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014ee:	4619      	mov	r1, r3
 80014f0:	4866      	ldr	r0, [pc, #408]	@ (800168c <HAL_UART_MspInit+0x254>)
 80014f2:	f004 f915 	bl	8005720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014f6:	2340      	movs	r3, #64	@ 0x40
 80014f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800150e:	2307      	movs	r3, #7
 8001510:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001518:	4619      	mov	r1, r3
 800151a:	485c      	ldr	r0, [pc, #368]	@ (800168c <HAL_UART_MspInit+0x254>)
 800151c:	f004 f900 	bl	8005720 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001520:	e0ac      	b.n	800167c <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a5a      	ldr	r2, [pc, #360]	@ (8001690 <HAL_UART_MspInit+0x258>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d15b      	bne.n	80015e4 <HAL_UART_MspInit+0x1ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800152c:	f04f 0202 	mov.w	r2, #2
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800153e:	f107 0320 	add.w	r3, r7, #32
 8001542:	4618      	mov	r0, r3
 8001544:	f005 fa90 	bl	8006a68 <HAL_RCCEx_PeriphCLKConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_UART_MspInit+0x11a>
      Error_Handler();
 800154e:	f7ff fe43 	bl	80011d8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001552:	4b4d      	ldr	r3, [pc, #308]	@ (8001688 <HAL_UART_MspInit+0x250>)
 8001554:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001558:	4a4b      	ldr	r2, [pc, #300]	@ (8001688 <HAL_UART_MspInit+0x250>)
 800155a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800155e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001562:	4b49      	ldr	r3, [pc, #292]	@ (8001688 <HAL_UART_MspInit+0x250>)
 8001564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001570:	4b45      	ldr	r3, [pc, #276]	@ (8001688 <HAL_UART_MspInit+0x250>)
 8001572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001576:	4a44      	ldr	r2, [pc, #272]	@ (8001688 <HAL_UART_MspInit+0x250>)
 8001578:	f043 0308 	orr.w	r3, r3, #8
 800157c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001580:	4b41      	ldr	r3, [pc, #260]	@ (8001688 <HAL_UART_MspInit+0x250>)
 8001582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800158e:	2320      	movs	r3, #32
 8001590:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a6:	2307      	movs	r3, #7
 80015a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015b0:	4619      	mov	r1, r3
 80015b2:	4838      	ldr	r0, [pc, #224]	@ (8001694 <HAL_UART_MspInit+0x25c>)
 80015b4:	f004 f8b4 	bl	8005720 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015b8:	2340      	movs	r3, #64	@ 0x40
 80015ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015d0:	2307      	movs	r3, #7
 80015d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015da:	4619      	mov	r1, r3
 80015dc:	482d      	ldr	r0, [pc, #180]	@ (8001694 <HAL_UART_MspInit+0x25c>)
 80015de:	f004 f89f 	bl	8005720 <HAL_GPIO_Init>
}
 80015e2:	e04b      	b.n	800167c <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART3)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001698 <HAL_UART_MspInit+0x260>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d146      	bne.n	800167c <HAL_UART_MspInit+0x244>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015ee:	f04f 0202 	mov.w	r2, #2
 80015f2:	f04f 0300 	mov.w	r3, #0
 80015f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4618      	mov	r0, r3
 8001606:	f005 fa2f 	bl	8006a68 <HAL_RCCEx_PeriphCLKConfig>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8001610:	f7ff fde2 	bl	80011d8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001614:	4b1c      	ldr	r3, [pc, #112]	@ (8001688 <HAL_UART_MspInit+0x250>)
 8001616:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800161a:	4a1b      	ldr	r2, [pc, #108]	@ (8001688 <HAL_UART_MspInit+0x250>)
 800161c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001620:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001624:	4b18      	ldr	r3, [pc, #96]	@ (8001688 <HAL_UART_MspInit+0x250>)
 8001626:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800162a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001632:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <HAL_UART_MspInit+0x250>)
 8001634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001638:	4a13      	ldr	r2, [pc, #76]	@ (8001688 <HAL_UART_MspInit+0x250>)
 800163a:	f043 0308 	orr.w	r3, r3, #8
 800163e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001642:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <HAL_UART_MspInit+0x250>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001650:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001654:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800166a:	2307      	movs	r3, #7
 800166c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001670:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001674:	4619      	mov	r1, r3
 8001676:	4807      	ldr	r0, [pc, #28]	@ (8001694 <HAL_UART_MspInit+0x25c>)
 8001678:	f004 f852 	bl	8005720 <HAL_GPIO_Init>
}
 800167c:	bf00      	nop
 800167e:	37f0      	adds	r7, #240	@ 0xf0
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40011000 	.word	0x40011000
 8001688:	58024400 	.word	0x58024400
 800168c:	58020400 	.word	0x58020400
 8001690:	40004400 	.word	0x40004400
 8001694:	58020c00 	.word	0x58020c00
 8001698:	40004800 	.word	0x40004800

0800169c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b090      	sub	sp, #64	@ 0x40
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b0f      	cmp	r3, #15
 80016a8:	d827      	bhi.n	80016fa <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	2036      	movs	r0, #54	@ 0x36
 80016b0:	f002 fbc4 	bl	8003e3c <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016b4:	2036      	movs	r0, #54	@ 0x36
 80016b6:	f002 fbdb 	bl	8003e70 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80016ba:	4a29      	ldr	r2, [pc, #164]	@ (8001760 <HAL_InitTick+0xc4>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016c0:	4b28      	ldr	r3, [pc, #160]	@ (8001764 <HAL_InitTick+0xc8>)
 80016c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016c6:	4a27      	ldr	r2, [pc, #156]	@ (8001764 <HAL_InitTick+0xc8>)
 80016c8:	f043 0310 	orr.w	r3, r3, #16
 80016cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016d0:	4b24      	ldr	r3, [pc, #144]	@ (8001764 <HAL_InitTick+0xc8>)
 80016d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016de:	f107 0210 	add.w	r2, r7, #16
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f005 f97b 	bl	80069e4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d106      	bne.n	8001706 <HAL_InitTick+0x6a>
 80016f8:	e001      	b.n	80016fe <HAL_InitTick+0x62>
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e02b      	b.n	8001756 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016fe:	f005 f945 	bl	800698c <HAL_RCC_GetPCLK1Freq>
 8001702:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001704:	e004      	b.n	8001710 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001706:	f005 f941 	bl	800698c <HAL_RCC_GetPCLK1Freq>
 800170a:	4603      	mov	r3, r0
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001712:	4a15      	ldr	r2, [pc, #84]	@ (8001768 <HAL_InitTick+0xcc>)
 8001714:	fba2 2303 	umull	r2, r3, r2, r3
 8001718:	0c9b      	lsrs	r3, r3, #18
 800171a:	3b01      	subs	r3, #1
 800171c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800171e:	4b13      	ldr	r3, [pc, #76]	@ (800176c <HAL_InitTick+0xd0>)
 8001720:	4a13      	ldr	r2, [pc, #76]	@ (8001770 <HAL_InitTick+0xd4>)
 8001722:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001724:	4b11      	ldr	r3, [pc, #68]	@ (800176c <HAL_InitTick+0xd0>)
 8001726:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800172a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800172c:	4a0f      	ldr	r2, [pc, #60]	@ (800176c <HAL_InitTick+0xd0>)
 800172e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001730:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001732:	4b0e      	ldr	r3, [pc, #56]	@ (800176c <HAL_InitTick+0xd0>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001738:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <HAL_InitTick+0xd0>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800173e:	480b      	ldr	r0, [pc, #44]	@ (800176c <HAL_InitTick+0xd0>)
 8001740:	f007 fd78 	bl	8009234 <HAL_TIM_Base_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d104      	bne.n	8001754 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800174a:	4808      	ldr	r0, [pc, #32]	@ (800176c <HAL_InitTick+0xd0>)
 800174c:	f007 fdd4 	bl	80092f8 <HAL_TIM_Base_Start_IT>
 8001750:	4603      	mov	r3, r0
 8001752:	e000      	b.n	8001756 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
}
 8001756:	4618      	mov	r0, r3
 8001758:	3740      	adds	r7, #64	@ 0x40
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	24000008 	.word	0x24000008
 8001764:	58024400 	.word	0x58024400
 8001768:	431bde83 	.word	0x431bde83
 800176c:	24004f48 	.word	0x24004f48
 8001770:	40001000 	.word	0x40001000

08001774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <NMI_Handler+0x4>

0800177c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <HardFault_Handler+0x4>

08001784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <MemManage_Handler+0x4>

0800178c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <BusFault_Handler+0x4>

08001794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <UsageFault_Handler+0x4>

0800179c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017b0:	4802      	ldr	r0, [pc, #8]	@ (80017bc <TIM6_DAC_IRQHandler+0x10>)
 80017b2:	f007 ff9b 	bl	80096ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	24004f48 	.word	0x24004f48

080017c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return 1;
 80017c4:	2301      	movs	r3, #1
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <_kill>:

int _kill(int pid, int sig)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017da:	4b05      	ldr	r3, [pc, #20]	@ (80017f0 <_kill+0x20>)
 80017dc:	2216      	movs	r2, #22
 80017de:	601a      	str	r2, [r3, #0]
  return -1;
 80017e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	2400cf04 	.word	0x2400cf04

080017f4 <_exit>:

void _exit (int status)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ffe5 	bl	80017d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001806:	bf00      	nop
 8001808:	e7fd      	b.n	8001806 <_exit+0x12>

0800180a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	e00a      	b.n	8001832 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800181c:	f3af 8000 	nop.w
 8001820:	4601      	mov	r1, r0
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	60ba      	str	r2, [r7, #8]
 8001828:	b2ca      	uxtb	r2, r1
 800182a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	3301      	adds	r3, #1
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	429a      	cmp	r2, r3
 8001838:	dbf0      	blt.n	800181c <_read+0x12>
  }

  return len;
 800183a:	687b      	ldr	r3, [r7, #4]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800186c:	605a      	str	r2, [r3, #4]
  return 0;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <_isatty>:

int _isatty(int file)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001884:	2301      	movs	r3, #1
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001892:	b480      	push	{r7}
 8001894:	b085      	sub	sp, #20
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b4:	4a14      	ldr	r2, [pc, #80]	@ (8001908 <_sbrk+0x5c>)
 80018b6:	4b15      	ldr	r3, [pc, #84]	@ (800190c <_sbrk+0x60>)
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c0:	4b13      	ldr	r3, [pc, #76]	@ (8001910 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c8:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <_sbrk+0x64>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	@ (8001914 <_sbrk+0x68>)
 80018cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ce:	4b10      	ldr	r3, [pc, #64]	@ (8001910 <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d205      	bcs.n	80018e8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80018dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <_sbrk+0x6c>)
 80018de:	220c      	movs	r2, #12
 80018e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	e009      	b.n	80018fc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e8:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ee:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	4a06      	ldr	r2, [pc, #24]	@ (8001910 <_sbrk+0x64>)
 80018f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	371c      	adds	r7, #28
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	24050000 	.word	0x24050000
 800190c:	00000400 	.word	0x00000400
 8001910:	24004f94 	.word	0x24004f94
 8001914:	2400cf18 	.word	0x2400cf18
 8001918:	2400cf04 	.word	0x2400cf04

0800191c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001920:	4b32      	ldr	r3, [pc, #200]	@ (80019ec <SystemInit+0xd0>)
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001926:	4a31      	ldr	r2, [pc, #196]	@ (80019ec <SystemInit+0xd0>)
 8001928:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800192c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001930:	4b2f      	ldr	r3, [pc, #188]	@ (80019f0 <SystemInit+0xd4>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 030f 	and.w	r3, r3, #15
 8001938:	2b06      	cmp	r3, #6
 800193a:	d807      	bhi.n	800194c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800193c:	4b2c      	ldr	r3, [pc, #176]	@ (80019f0 <SystemInit+0xd4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f023 030f 	bic.w	r3, r3, #15
 8001944:	4a2a      	ldr	r2, [pc, #168]	@ (80019f0 <SystemInit+0xd4>)
 8001946:	f043 0307 	orr.w	r3, r3, #7
 800194a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800194c:	4b29      	ldr	r3, [pc, #164]	@ (80019f4 <SystemInit+0xd8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a28      	ldr	r2, [pc, #160]	@ (80019f4 <SystemInit+0xd8>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001958:	4b26      	ldr	r3, [pc, #152]	@ (80019f4 <SystemInit+0xd8>)
 800195a:	2200      	movs	r2, #0
 800195c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800195e:	4b25      	ldr	r3, [pc, #148]	@ (80019f4 <SystemInit+0xd8>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4924      	ldr	r1, [pc, #144]	@ (80019f4 <SystemInit+0xd8>)
 8001964:	4b24      	ldr	r3, [pc, #144]	@ (80019f8 <SystemInit+0xdc>)
 8001966:	4013      	ands	r3, r2
 8001968:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800196a:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <SystemInit+0xd4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d007      	beq.n	8001986 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001976:	4b1e      	ldr	r3, [pc, #120]	@ (80019f0 <SystemInit+0xd4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 030f 	bic.w	r3, r3, #15
 800197e:	4a1c      	ldr	r2, [pc, #112]	@ (80019f0 <SystemInit+0xd4>)
 8001980:	f043 0307 	orr.w	r3, r3, #7
 8001984:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001986:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <SystemInit+0xd8>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800198c:	4b19      	ldr	r3, [pc, #100]	@ (80019f4 <SystemInit+0xd8>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001992:	4b18      	ldr	r3, [pc, #96]	@ (80019f4 <SystemInit+0xd8>)
 8001994:	2200      	movs	r2, #0
 8001996:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001998:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <SystemInit+0xd8>)
 800199a:	4a18      	ldr	r2, [pc, #96]	@ (80019fc <SystemInit+0xe0>)
 800199c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <SystemInit+0xd8>)
 80019a0:	4a17      	ldr	r2, [pc, #92]	@ (8001a00 <SystemInit+0xe4>)
 80019a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80019a4:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <SystemInit+0xd8>)
 80019a6:	4a17      	ldr	r2, [pc, #92]	@ (8001a04 <SystemInit+0xe8>)
 80019a8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019aa:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <SystemInit+0xd8>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80019b0:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <SystemInit+0xd8>)
 80019b2:	4a14      	ldr	r2, [pc, #80]	@ (8001a04 <SystemInit+0xe8>)
 80019b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019b6:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <SystemInit+0xd8>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019bc:	4b0d      	ldr	r3, [pc, #52]	@ (80019f4 <SystemInit+0xd8>)
 80019be:	4a11      	ldr	r2, [pc, #68]	@ (8001a04 <SystemInit+0xe8>)
 80019c0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019c2:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <SystemInit+0xd8>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	@ (80019f4 <SystemInit+0xd8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a09      	ldr	r2, [pc, #36]	@ (80019f4 <SystemInit+0xd8>)
 80019ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019d4:	4b07      	ldr	r3, [pc, #28]	@ (80019f4 <SystemInit+0xd8>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80019da:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <SystemInit+0xec>)
 80019dc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80019e0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00
 80019f0:	52002000 	.word	0x52002000
 80019f4:	58024400 	.word	0x58024400
 80019f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80019fc:	02020200 	.word	0x02020200
 8001a00:	01ff0000 	.word	0x01ff0000
 8001a04:	01010280 	.word	0x01010280
 8001a08:	52004000 	.word	0x52004000

08001a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a10:	f7ff ff84 	bl	800191c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a14:	480c      	ldr	r0, [pc, #48]	@ (8001a48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a16:	490d      	ldr	r1, [pc, #52]	@ (8001a4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a18:	4a0d      	ldr	r2, [pc, #52]	@ (8001a50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f01b fec3 	bl	801d7c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a3e:	f7fe ffc3 	bl	80009c8 <main>
  bx  lr
 8001a42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a44:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001a48:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a4c:	24000200 	.word	0x24000200
  ldr r2, =_sidata
 8001a50:	08022a04 	.word	0x08022a04
  ldr r2, =_sbss
 8001a54:	24004c44 	.word	0x24004c44
  ldr r4, =_ebss
 8001a58:	2400cf14 	.word	0x2400cf14

08001a5c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC3_IRQHandler>

08001a5e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00b      	beq.n	8001a86 <LAN8742_RegisterBusIO+0x28>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d007      	beq.n	8001a86 <LAN8742_RegisterBusIO+0x28>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <LAN8742_RegisterBusIO+0x28>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d102      	bne.n	8001a8c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	e014      	b.n	8001ab6 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d139      	bne.n	8001b52 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2220      	movs	r2, #32
 8001af0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	e01c      	b.n	8001b32 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	f107 020c 	add.w	r2, r7, #12
 8001b00:	2112      	movs	r1, #18
 8001b02:	6978      	ldr	r0, [r7, #20]
 8001b04:	4798      	blx	r3
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	da03      	bge.n	8001b14 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001b0c:	f06f 0304 	mvn.w	r3, #4
 8001b10:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001b12:	e00b      	b.n	8001b2c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d105      	bne.n	8001b2c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
         break;
 8001b2a:	e005      	b.n	8001b38 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2b1f      	cmp	r3, #31
 8001b36:	d9df      	bls.n	8001af8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b1f      	cmp	r3, #31
 8001b3e:	d902      	bls.n	8001b46 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001b40:	f06f 0302 	mvn.w	r3, #2
 8001b44:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001b52:	693b      	ldr	r3, [r7, #16]
 }
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6810      	ldr	r0, [r2, #0]
 8001b70:	f107 020c 	add.w	r2, r7, #12
 8001b74:	2101      	movs	r1, #1
 8001b76:	4798      	blx	r3
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	da02      	bge.n	8001b84 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b7e:	f06f 0304 	mvn.w	r3, #4
 8001b82:	e06e      	b.n	8001c62 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6810      	ldr	r0, [r2, #0]
 8001b8c:	f107 020c 	add.w	r2, r7, #12
 8001b90:	2101      	movs	r1, #1
 8001b92:	4798      	blx	r3
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	da02      	bge.n	8001ba0 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b9a:	f06f 0304 	mvn.w	r3, #4
 8001b9e:	e060      	b.n	8001c62 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e059      	b.n	8001c62 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6810      	ldr	r0, [r2, #0]
 8001bb6:	f107 020c 	add.w	r2, r7, #12
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4798      	blx	r3
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	da02      	bge.n	8001bca <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001bc4:	f06f 0304 	mvn.w	r3, #4
 8001bc8:	e04b      	b.n	8001c62 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d11b      	bne.n	8001c0c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d006      	beq.n	8001bec <LAN8742_GetLinkState+0x90>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001be8:	2302      	movs	r3, #2
 8001bea:	e03a      	b.n	8001c62 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e033      	b.n	8001c62 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001c04:	2304      	movs	r3, #4
 8001c06:	e02c      	b.n	8001c62 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001c08:	2305      	movs	r3, #5
 8001c0a:	e02a      	b.n	8001c62 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6810      	ldr	r0, [r2, #0]
 8001c14:	f107 020c 	add.w	r2, r7, #12
 8001c18:	211f      	movs	r1, #31
 8001c1a:	4798      	blx	r3
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	da02      	bge.n	8001c28 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001c22:	f06f 0304 	mvn.w	r3, #4
 8001c26:	e01c      	b.n	8001c62 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001c32:	2306      	movs	r3, #6
 8001c34:	e015      	b.n	8001c62 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f003 031c 	and.w	r3, r3, #28
 8001c3c:	2b18      	cmp	r3, #24
 8001c3e:	d101      	bne.n	8001c44 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001c40:	2302      	movs	r3, #2
 8001c42:	e00e      	b.n	8001c62 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f003 031c 	and.w	r3, r3, #28
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d101      	bne.n	8001c52 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e007      	b.n	8001c62 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f003 031c 	and.w	r3, r3, #28
 8001c58:	2b14      	cmp	r3, #20
 8001c5a:	d101      	bne.n	8001c60 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	e000      	b.n	8001c62 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001c60:	2305      	movs	r3, #5
    }
  }
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c72:	2003      	movs	r0, #3
 8001c74:	f002 f8d7 	bl	8003e26 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c78:	f004 fcde 	bl	8006638 <HAL_RCC_GetSysClockFreq>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <HAL_Init+0x68>)
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	4913      	ldr	r1, [pc, #76]	@ (8001cd8 <HAL_Init+0x6c>)
 8001c8a:	5ccb      	ldrb	r3, [r1, r3]
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
 8001c94:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c96:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <HAL_Init+0x68>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001cd8 <HAL_Init+0x6c>)
 8001ca0:	5cd3      	ldrb	r3, [r2, r3]
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cac:	4a0b      	ldr	r2, [pc, #44]	@ (8001cdc <HAL_Init+0x70>)
 8001cae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ce0 <HAL_Init+0x74>)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cb6:	200f      	movs	r0, #15
 8001cb8:	f7ff fcf0 	bl	800169c <HAL_InitTick>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e002      	b.n	8001ccc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc6:	f7ff fa8d 	bl	80011e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	58024400 	.word	0x58024400
 8001cd8:	080224ac 	.word	0x080224ac
 8001cdc:	24000004 	.word	0x24000004
 8001ce0:	24000000 	.word	0x24000000

08001ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <HAL_IncTick+0x20>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <HAL_IncTick+0x24>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	4a04      	ldr	r2, [pc, #16]	@ (8001d08 <HAL_IncTick+0x24>)
 8001cf6:	6013      	str	r3, [r2, #0]
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	2400000c 	.word	0x2400000c
 8001d08:	24004f98 	.word	0x24004f98

08001d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d10:	4b03      	ldr	r3, [pc, #12]	@ (8001d20 <HAL_GetTick+0x14>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	24004f98 	.word	0x24004f98

08001d24 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001d2c:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001d34:	4904      	ldr	r1, [pc, #16]	@ (8001d48 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	58000400 	.word	0x58000400

08001d4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	609a      	str	r2, [r3, #8]
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	3360      	adds	r3, #96	@ 0x60
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4a10      	ldr	r2, [pc, #64]	@ (8001e14 <LL_ADC_SetOffset+0x60>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d10b      	bne.n	8001df0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001dee:	e00b      	b.n	8001e08 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	430b      	orrs	r3, r1
 8001e02:	431a      	orrs	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	601a      	str	r2, [r3, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	371c      	adds	r7, #28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	58026000 	.word	0x58026000

08001e18 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3360      	adds	r3, #96	@ 0x60
 8001e26:	461a      	mov	r2, r3
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f003 031f 	and.w	r3, r3, #31
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	fa01 f303 	lsl.w	r3, r1, r3
 8001e64:	431a      	orrs	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	611a      	str	r2, [r3, #16]
}
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d00e      	beq.n	8001eaa <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	3360      	adds	r3, #96	@ 0x60
 8001e90:	461a      	mov	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	601a      	str	r2, [r3, #0]
  }
}
 8001eaa:	bf00      	nop
 8001eac:	371c      	adds	r7, #28
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	58026000 	.word	0x58026000

08001ebc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4a0c      	ldr	r2, [pc, #48]	@ (8001efc <LL_ADC_SetOffsetSaturation+0x40>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d10e      	bne.n	8001eee <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3360      	adds	r3, #96	@ 0x60
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001eee:	bf00      	nop
 8001ef0:	371c      	adds	r7, #28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	58026000 	.word	0x58026000

08001f00 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f40 <LL_ADC_SetOffsetSign+0x40>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d10e      	bne.n	8001f32 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	3360      	adds	r3, #96	@ 0x60
 8001f18:	461a      	mov	r2, r3
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001f32:	bf00      	nop
 8001f34:	371c      	adds	r7, #28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	58026000 	.word	0x58026000

08001f44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	3360      	adds	r3, #96	@ 0x60
 8001f54:	461a      	mov	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4a0c      	ldr	r2, [pc, #48]	@ (8001f94 <LL_ADC_SetOffsetState+0x50>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d108      	bne.n	8001f78 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001f76:	e007      	b.n	8001f88 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	601a      	str	r2, [r3, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	371c      	adds	r7, #28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	58026000 	.word	0x58026000

08001f98 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b087      	sub	sp, #28
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	3330      	adds	r3, #48	@ 0x30
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	4413      	add	r3, r2
 8001fdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	f003 031f 	and.w	r3, r3, #31
 8001fe8:	211f      	movs	r1, #31
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	0e9b      	lsrs	r3, r3, #26
 8001ff6:	f003 011f 	and.w	r1, r3, #31
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f003 031f 	and.w	r3, r3, #31
 8002000:	fa01 f303 	lsl.w	r3, r1, r3
 8002004:	431a      	orrs	r2, r3
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800200a:	bf00      	nop
 800200c:	371c      	adds	r7, #28
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002016:	b480      	push	{r7}
 8002018:	b087      	sub	sp, #28
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	3314      	adds	r3, #20
 8002026:	461a      	mov	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	0e5b      	lsrs	r3, r3, #25
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	4413      	add	r3, r2
 8002034:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	0d1b      	lsrs	r3, r3, #20
 800203e:	f003 031f 	and.w	r3, r3, #31
 8002042:	2107      	movs	r1, #7
 8002044:	fa01 f303 	lsl.w	r3, r1, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	401a      	ands	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	0d1b      	lsrs	r3, r3, #20
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	431a      	orrs	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002060:	bf00      	nop
 8002062:	371c      	adds	r7, #28
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4a1a      	ldr	r2, [pc, #104]	@ (80020e4 <LL_ADC_SetChannelSingleDiff+0x78>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d115      	bne.n	80020ac <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800208c:	43db      	mvns	r3, r3
 800208e:	401a      	ands	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f003 0318 	and.w	r3, r3, #24
 8002096:	4914      	ldr	r1, [pc, #80]	@ (80020e8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002098:	40d9      	lsrs	r1, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	400b      	ands	r3, r1
 800209e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020a2:	431a      	orrs	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80020aa:	e014      	b.n	80020d6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020b8:	43db      	mvns	r3, r3
 80020ba:	401a      	ands	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f003 0318 	and.w	r3, r3, #24
 80020c2:	4909      	ldr	r1, [pc, #36]	@ (80020e8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80020c4:	40d9      	lsrs	r1, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	400b      	ands	r3, r1
 80020ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020ce:	431a      	orrs	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	58026000 	.word	0x58026000
 80020e8:	000fffff 	.word	0x000fffff

080020ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 031f 	and.w	r3, r3, #31
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	4b04      	ldr	r3, [pc, #16]	@ (8002144 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002132:	4013      	ands	r3, r2
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6093      	str	r3, [r2, #8]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	5fffffc0 	.word	0x5fffffc0

08002148 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002158:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800215c:	d101      	bne.n	8002162 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <LL_ADC_EnableInternalRegulator+0x24>)
 800217e:	4013      	ands	r3, r2
 8002180:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	6fffffc0 	.word	0x6fffffc0

08002198 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021ac:	d101      	bne.n	80021b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <LL_ADC_Enable+0x24>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	f043 0201 	orr.w	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	7fffffc0 	.word	0x7fffffc0

080021e8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	4b05      	ldr	r3, [pc, #20]	@ (800220c <LL_ADC_Disable+0x24>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	f043 0202 	orr.w	r2, r3, #2
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	7fffffc0 	.word	0x7fffffc0

08002210 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <LL_ADC_IsEnabled+0x18>
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <LL_ADC_IsEnabled+0x1a>
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b02      	cmp	r3, #2
 8002248:	d101      	bne.n	800224e <LL_ADC_IsDisableOngoing+0x18>
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <LL_ADC_IsDisableOngoing+0x1a>
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	4b05      	ldr	r3, [pc, #20]	@ (8002280 <LL_ADC_REG_StartConversion+0x24>)
 800226a:	4013      	ands	r3, r2
 800226c:	f043 0204 	orr.w	r2, r3, #4
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	7fffffc0 	.word	0x7fffffc0

08002284 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	4b05      	ldr	r3, [pc, #20]	@ (80022a8 <LL_ADC_REG_StopConversion+0x24>)
 8002292:	4013      	ands	r3, r2
 8002294:	f043 0210 	orr.w	r2, r3, #16
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	7fffffc0 	.word	0x7fffffc0

080022ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d101      	bne.n	80022c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	4b05      	ldr	r3, [pc, #20]	@ (80022f8 <LL_ADC_INJ_StopConversion+0x24>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	f043 0220 	orr.w	r2, r3, #32
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	7fffffc0 	.word	0x7fffffc0

080022fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b08      	cmp	r3, #8
 800230e:	d101      	bne.n	8002314 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b089      	sub	sp, #36	@ 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e1ee      	b.n	800271c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002348:	2b00      	cmp	r3, #0
 800234a:	d109      	bne.n	8002360 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7fe ff67 	bl	8001220 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff feef 	bl	8002148 <LL_ADC_IsDeepPowerDownEnabled>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d004      	beq.n	800237a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fed5 	bl	8002124 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff ff0a 	bl	8002198 <LL_ADC_IsInternalRegulatorEnabled>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d114      	bne.n	80023b4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff feee 	bl	8002170 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002394:	4b8e      	ldr	r3, [pc, #568]	@ (80025d0 <HAL_ADC_Init+0x2ac>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	099b      	lsrs	r3, r3, #6
 800239a:	4a8e      	ldr	r2, [pc, #568]	@ (80025d4 <HAL_ADC_Init+0x2b0>)
 800239c:	fba2 2303 	umull	r2, r3, r2, r3
 80023a0:	099b      	lsrs	r3, r3, #6
 80023a2:	3301      	adds	r3, #1
 80023a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023a6:	e002      	b.n	80023ae <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f9      	bne.n	80023a8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff feed 	bl	8002198 <LL_ADC_IsInternalRegulatorEnabled>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10d      	bne.n	80023e0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c8:	f043 0210 	orr.w	r2, r3, #16
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023d4:	f043 0201 	orr.w	r2, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff61 	bl	80022ac <LL_ADC_REG_IsConversionOngoing>
 80023ea:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f040 8188 	bne.w	800270a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f040 8184 	bne.w	800270a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002406:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800240a:	f043 0202 	orr.w	r2, r3, #2
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fefa 	bl	8002210 <LL_ADC_IsEnabled>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d136      	bne.n	8002490 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a6c      	ldr	r2, [pc, #432]	@ (80025d8 <HAL_ADC_Init+0x2b4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d004      	beq.n	8002436 <HAL_ADC_Init+0x112>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a6a      	ldr	r2, [pc, #424]	@ (80025dc <HAL_ADC_Init+0x2b8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d10e      	bne.n	8002454 <HAL_ADC_Init+0x130>
 8002436:	4868      	ldr	r0, [pc, #416]	@ (80025d8 <HAL_ADC_Init+0x2b4>)
 8002438:	f7ff feea 	bl	8002210 <LL_ADC_IsEnabled>
 800243c:	4604      	mov	r4, r0
 800243e:	4867      	ldr	r0, [pc, #412]	@ (80025dc <HAL_ADC_Init+0x2b8>)
 8002440:	f7ff fee6 	bl	8002210 <LL_ADC_IsEnabled>
 8002444:	4603      	mov	r3, r0
 8002446:	4323      	orrs	r3, r4
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	e008      	b.n	8002466 <HAL_ADC_Init+0x142>
 8002454:	4862      	ldr	r0, [pc, #392]	@ (80025e0 <HAL_ADC_Init+0x2bc>)
 8002456:	f7ff fedb 	bl	8002210 <LL_ADC_IsEnabled>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	bf0c      	ite	eq
 8002460:	2301      	moveq	r3, #1
 8002462:	2300      	movne	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d012      	beq.n	8002490 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a5a      	ldr	r2, [pc, #360]	@ (80025d8 <HAL_ADC_Init+0x2b4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d004      	beq.n	800247e <HAL_ADC_Init+0x15a>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a58      	ldr	r2, [pc, #352]	@ (80025dc <HAL_ADC_Init+0x2b8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d101      	bne.n	8002482 <HAL_ADC_Init+0x15e>
 800247e:	4a59      	ldr	r2, [pc, #356]	@ (80025e4 <HAL_ADC_Init+0x2c0>)
 8002480:	e000      	b.n	8002484 <HAL_ADC_Init+0x160>
 8002482:	4a59      	ldr	r2, [pc, #356]	@ (80025e8 <HAL_ADC_Init+0x2c4>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4619      	mov	r1, r3
 800248a:	4610      	mov	r0, r2
 800248c:	f7ff fc5e 	bl	8001d4c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a52      	ldr	r2, [pc, #328]	@ (80025e0 <HAL_ADC_Init+0x2bc>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d129      	bne.n	80024ee <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	7e5b      	ldrb	r3, [r3, #25]
 800249e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80024a4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80024aa:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d013      	beq.n	80024dc <HAL_ADC_Init+0x1b8>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b0c      	cmp	r3, #12
 80024ba:	d00d      	beq.n	80024d8 <HAL_ADC_Init+0x1b4>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	2b1c      	cmp	r3, #28
 80024c2:	d007      	beq.n	80024d4 <HAL_ADC_Init+0x1b0>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b18      	cmp	r3, #24
 80024ca:	d101      	bne.n	80024d0 <HAL_ADC_Init+0x1ac>
 80024cc:	2318      	movs	r3, #24
 80024ce:	e006      	b.n	80024de <HAL_ADC_Init+0x1ba>
 80024d0:	2300      	movs	r3, #0
 80024d2:	e004      	b.n	80024de <HAL_ADC_Init+0x1ba>
 80024d4:	2310      	movs	r3, #16
 80024d6:	e002      	b.n	80024de <HAL_ADC_Init+0x1ba>
 80024d8:	2308      	movs	r3, #8
 80024da:	e000      	b.n	80024de <HAL_ADC_Init+0x1ba>
 80024dc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80024de:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
 80024ec:	e00e      	b.n	800250c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	7e5b      	ldrb	r3, [r3, #25]
 80024f2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024f8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80024fe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002506:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d106      	bne.n	8002524 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251a:	3b01      	subs	r3, #1
 800251c:	045b      	lsls	r3, r3, #17
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002528:	2b00      	cmp	r3, #0
 800252a:	d009      	beq.n	8002540 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002530:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002538:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a26      	ldr	r2, [pc, #152]	@ (80025e0 <HAL_ADC_Init+0x2bc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d115      	bne.n	8002576 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	4b26      	ldr	r3, [pc, #152]	@ (80025ec <HAL_ADC_Init+0x2c8>)
 8002552:	4013      	ands	r3, r2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	69b9      	ldr	r1, [r7, #24]
 800255a:	430b      	orrs	r3, r1
 800255c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	611a      	str	r2, [r3, #16]
 8002574:	e009      	b.n	800258a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	4b1c      	ldr	r3, [pc, #112]	@ (80025f0 <HAL_ADC_Init+0x2cc>)
 800257e:	4013      	ands	r3, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	69b9      	ldr	r1, [r7, #24]
 8002586:	430b      	orrs	r3, r1
 8002588:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fe8c 	bl	80022ac <LL_ADC_REG_IsConversionOngoing>
 8002594:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff feae 	bl	80022fc <LL_ADC_INJ_IsConversionOngoing>
 80025a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f040 808e 	bne.w	80026c6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f040 808a 	bne.w	80026c6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a0a      	ldr	r2, [pc, #40]	@ (80025e0 <HAL_ADC_Init+0x2bc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d11b      	bne.n	80025f4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	7e1b      	ldrb	r3, [r3, #24]
 80025c0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025c8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	e018      	b.n	8002602 <HAL_ADC_Init+0x2de>
 80025d0:	24000000 	.word	0x24000000
 80025d4:	053e2d63 	.word	0x053e2d63
 80025d8:	40022000 	.word	0x40022000
 80025dc:	40022100 	.word	0x40022100
 80025e0:	58026000 	.word	0x58026000
 80025e4:	40022300 	.word	0x40022300
 80025e8:	58026300 	.word	0x58026300
 80025ec:	fff04007 	.word	0xfff04007
 80025f0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7e1b      	ldrb	r3, [r3, #24]
 80025f8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	4b46      	ldr	r3, [pc, #280]	@ (8002724 <HAL_ADC_Init+0x400>)
 800260a:	4013      	ands	r3, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	69b9      	ldr	r1, [r7, #24]
 8002612:	430b      	orrs	r3, r1
 8002614:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800261c:	2b01      	cmp	r3, #1
 800261e:	d137      	bne.n	8002690 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002624:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a3f      	ldr	r2, [pc, #252]	@ (8002728 <HAL_ADC_Init+0x404>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d116      	bne.n	800265e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	4b3d      	ldr	r3, [pc, #244]	@ (800272c <HAL_ADC_Init+0x408>)
 8002638:	4013      	ands	r3, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002642:	4311      	orrs	r1, r2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002648:	4311      	orrs	r1, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800264e:	430a      	orrs	r2, r1
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	611a      	str	r2, [r3, #16]
 800265c:	e020      	b.n	80026a0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	4b32      	ldr	r3, [pc, #200]	@ (8002730 <HAL_ADC_Init+0x40c>)
 8002666:	4013      	ands	r3, r2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800266c:	3a01      	subs	r2, #1
 800266e:	0411      	lsls	r1, r2, #16
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002674:	4311      	orrs	r1, r2
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800267a:	4311      	orrs	r1, r2
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002680:	430a      	orrs	r2, r1
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0201 	orr.w	r2, r2, #1
 800268c:	611a      	str	r2, [r3, #16]
 800268e:	e007      	b.n	80026a0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691a      	ldr	r2, [r3, #16]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002728 <HAL_ADC_Init+0x404>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d002      	beq.n	80026c6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f001 f90d 	bl	80038e0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d10c      	bne.n	80026e8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d4:	f023 010f 	bic.w	r1, r3, #15
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	1e5a      	subs	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80026e6:	e007      	b.n	80026f8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 020f 	bic.w	r2, r2, #15
 80026f6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026fc:	f023 0303 	bic.w	r3, r3, #3
 8002700:	f043 0201 	orr.w	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	661a      	str	r2, [r3, #96]	@ 0x60
 8002708:	e007      	b.n	800271a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800270e:	f043 0210 	orr.w	r2, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800271a:	7ffb      	ldrb	r3, [r7, #31]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3724      	adds	r7, #36	@ 0x24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd90      	pop	{r4, r7, pc}
 8002724:	ffffbffc 	.word	0xffffbffc
 8002728:	58026000 	.word	0x58026000
 800272c:	fc00f81f 	.word	0xfc00f81f
 8002730:	fc00f81e 	.word	0xfc00f81e

08002734 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a5c      	ldr	r2, [pc, #368]	@ (80028b4 <HAL_ADC_Start+0x180>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d004      	beq.n	8002750 <HAL_ADC_Start+0x1c>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a5b      	ldr	r2, [pc, #364]	@ (80028b8 <HAL_ADC_Start+0x184>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d101      	bne.n	8002754 <HAL_ADC_Start+0x20>
 8002750:	4b5a      	ldr	r3, [pc, #360]	@ (80028bc <HAL_ADC_Start+0x188>)
 8002752:	e000      	b.n	8002756 <HAL_ADC_Start+0x22>
 8002754:	4b5a      	ldr	r3, [pc, #360]	@ (80028c0 <HAL_ADC_Start+0x18c>)
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fcc8 	bl	80020ec <LL_ADC_GetMultimode>
 800275c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fda2 	bl	80022ac <LL_ADC_REG_IsConversionOngoing>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	f040 809a 	bne.w	80028a4 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_ADC_Start+0x4a>
 800277a:	2302      	movs	r3, #2
 800277c:	e095      	b.n	80028aa <HAL_ADC_Start+0x176>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 ffc0 	bl	800370c <ADC_Enable>
 800278c:	4603      	mov	r3, r0
 800278e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002790:	7dfb      	ldrb	r3, [r7, #23]
 8002792:	2b00      	cmp	r3, #0
 8002794:	f040 8081 	bne.w	800289a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800279c:	4b49      	ldr	r3, [pc, #292]	@ (80028c4 <HAL_ADC_Start+0x190>)
 800279e:	4013      	ands	r3, r2
 80027a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a42      	ldr	r2, [pc, #264]	@ (80028b8 <HAL_ADC_Start+0x184>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d002      	beq.n	80027b8 <HAL_ADC_Start+0x84>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	e000      	b.n	80027ba <HAL_ADC_Start+0x86>
 80027b8:	4b3e      	ldr	r3, [pc, #248]	@ (80028b4 <HAL_ADC_Start+0x180>)
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	4293      	cmp	r3, r2
 80027c0:	d002      	beq.n	80027c8 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027e0:	d106      	bne.n	80027f0 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027e6:	f023 0206 	bic.w	r2, r3, #6
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	665a      	str	r2, [r3, #100]	@ 0x64
 80027ee:	e002      	b.n	80027f6 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	221c      	movs	r2, #28
 80027fc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a2b      	ldr	r2, [pc, #172]	@ (80028b8 <HAL_ADC_Start+0x184>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d002      	beq.n	8002816 <HAL_ADC_Start+0xe2>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	e000      	b.n	8002818 <HAL_ADC_Start+0xe4>
 8002816:	4b27      	ldr	r3, [pc, #156]	@ (80028b4 <HAL_ADC_Start+0x180>)
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	4293      	cmp	r3, r2
 800281e:	d008      	beq.n	8002832 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	2b05      	cmp	r3, #5
 800282a:	d002      	beq.n	8002832 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	2b09      	cmp	r3, #9
 8002830:	d114      	bne.n	800285c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d007      	beq.n	8002850 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002844:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002848:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fd01 	bl	800225c <LL_ADC_REG_StartConversion>
 800285a:	e025      	b.n	80028a8 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002860:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a12      	ldr	r2, [pc, #72]	@ (80028b8 <HAL_ADC_Start+0x184>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d002      	beq.n	8002878 <HAL_ADC_Start+0x144>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	e000      	b.n	800287a <HAL_ADC_Start+0x146>
 8002878:	4b0e      	ldr	r3, [pc, #56]	@ (80028b4 <HAL_ADC_Start+0x180>)
 800287a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00f      	beq.n	80028a8 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800288c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002890:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	661a      	str	r2, [r3, #96]	@ 0x60
 8002898:	e006      	b.n	80028a8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80028a2:	e001      	b.n	80028a8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028a4:	2302      	movs	r3, #2
 80028a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40022000 	.word	0x40022000
 80028b8:	40022100 	.word	0x40022100
 80028bc:	40022300 	.word	0x40022300
 80028c0:	58026300 	.word	0x58026300
 80028c4:	fffff0fe 	.word	0xfffff0fe

080028c8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_ADC_Stop+0x16>
 80028da:	2302      	movs	r3, #2
 80028dc:	e021      	b.n	8002922 <HAL_ADC_Stop+0x5a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80028e6:	2103      	movs	r1, #3
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 fe53 	bl	8003594 <ADC_ConversionStop>
 80028ee:	4603      	mov	r3, r0
 80028f0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10f      	bne.n	8002918 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 ff91 	bl	8003820 <ADC_Disable>
 80028fe:	4603      	mov	r3, r0
 8002900:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d107      	bne.n	8002918 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800290c:	4b07      	ldr	r3, [pc, #28]	@ (800292c <HAL_ADC_Stop+0x64>)
 800290e:	4013      	ands	r3, r2
 8002910:	f043 0201 	orr.w	r2, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002920:	7bfb      	ldrb	r3, [r7, #15]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	ffffeefe 	.word	0xffffeefe

08002930 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a72      	ldr	r2, [pc, #456]	@ (8002b08 <HAL_ADC_PollForConversion+0x1d8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d004      	beq.n	800294e <HAL_ADC_PollForConversion+0x1e>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a70      	ldr	r2, [pc, #448]	@ (8002b0c <HAL_ADC_PollForConversion+0x1dc>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_ADC_PollForConversion+0x22>
 800294e:	4b70      	ldr	r3, [pc, #448]	@ (8002b10 <HAL_ADC_PollForConversion+0x1e0>)
 8002950:	e000      	b.n	8002954 <HAL_ADC_PollForConversion+0x24>
 8002952:	4b70      	ldr	r3, [pc, #448]	@ (8002b14 <HAL_ADC_PollForConversion+0x1e4>)
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fbc9 	bl	80020ec <LL_ADC_GetMultimode>
 800295a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	2b08      	cmp	r3, #8
 8002962:	d102      	bne.n	800296a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002964:	2308      	movs	r3, #8
 8002966:	61fb      	str	r3, [r7, #28]
 8002968:	e037      	b.n	80029da <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2b05      	cmp	r3, #5
 8002974:	d002      	beq.n	800297c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b09      	cmp	r3, #9
 800297a:	d111      	bne.n	80029a0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d007      	beq.n	800299a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800298e:	f043 0220 	orr.w	r2, r3, #32
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e0b1      	b.n	8002afe <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800299a:	2304      	movs	r3, #4
 800299c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800299e:	e01c      	b.n	80029da <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a58      	ldr	r2, [pc, #352]	@ (8002b08 <HAL_ADC_PollForConversion+0x1d8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d004      	beq.n	80029b4 <HAL_ADC_PollForConversion+0x84>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a57      	ldr	r2, [pc, #348]	@ (8002b0c <HAL_ADC_PollForConversion+0x1dc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d101      	bne.n	80029b8 <HAL_ADC_PollForConversion+0x88>
 80029b4:	4b56      	ldr	r3, [pc, #344]	@ (8002b10 <HAL_ADC_PollForConversion+0x1e0>)
 80029b6:	e000      	b.n	80029ba <HAL_ADC_PollForConversion+0x8a>
 80029b8:	4b56      	ldr	r3, [pc, #344]	@ (8002b14 <HAL_ADC_PollForConversion+0x1e4>)
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fba4 	bl	8002108 <LL_ADC_GetMultiDMATransfer>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d007      	beq.n	80029d6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ca:	f043 0220 	orr.w	r2, r3, #32
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e093      	b.n	8002afe <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80029d6:	2304      	movs	r3, #4
 80029d8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80029da:	f7ff f997 	bl	8001d0c <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029e0:	e021      	b.n	8002a26 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e8:	d01d      	beq.n	8002a26 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80029ea:	f7ff f98f 	bl	8001d0c <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d302      	bcc.n	8002a00 <HAL_ADC_PollForConversion+0xd0>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d112      	bne.n	8002a26 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10b      	bne.n	8002a26 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a12:	f043 0204 	orr.w	r2, r3, #4
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e06b      	b.n	8002afe <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0d6      	beq.n	80029e2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a38:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff faa7 	bl	8001f98 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d01c      	beq.n	8002a8a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7e5b      	ldrb	r3, [r3, #25]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d118      	bne.n	8002a8a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d111      	bne.n	8002a8a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a6a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d105      	bne.n	8002a8a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a82:	f043 0201 	orr.w	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8002b0c <HAL_ADC_PollForConversion+0x1dc>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d002      	beq.n	8002a9a <HAL_ADC_PollForConversion+0x16a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	e000      	b.n	8002a9c <HAL_ADC_PollForConversion+0x16c>
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b08 <HAL_ADC_PollForConversion+0x1d8>)
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d008      	beq.n	8002ab6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d005      	beq.n	8002ab6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2b05      	cmp	r3, #5
 8002aae:	d002      	beq.n	8002ab6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2b09      	cmp	r3, #9
 8002ab4:	d104      	bne.n	8002ac0 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	61bb      	str	r3, [r7, #24]
 8002abe:	e00c      	b.n	8002ada <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a11      	ldr	r2, [pc, #68]	@ (8002b0c <HAL_ADC_PollForConversion+0x1dc>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d002      	beq.n	8002ad0 <HAL_ADC_PollForConversion+0x1a0>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	e000      	b.n	8002ad2 <HAL_ADC_PollForConversion+0x1a2>
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8002b08 <HAL_ADC_PollForConversion+0x1d8>)
 8002ad2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d104      	bne.n	8002aea <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	e008      	b.n	8002afc <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d103      	bne.n	8002afc <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	220c      	movs	r2, #12
 8002afa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40022000 	.word	0x40022000
 8002b0c:	40022100 	.word	0x40022100
 8002b10:	40022300 	.word	0x40022300
 8002b14:	58026300 	.word	0x58026300

08002b18 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b34:	b590      	push	{r4, r7, lr}
 8002b36:	b0b9      	sub	sp, #228	@ 0xe4
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b4e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4aab      	ldr	r2, [pc, #684]	@ (8002e04 <HAL_ADC_ConfigChannel+0x2d0>)
 8002b56:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d102      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x34>
 8002b62:	2302      	movs	r3, #2
 8002b64:	f000 bcfe 	b.w	8003564 <HAL_ADC_ConfigChannel+0xa30>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fb99 	bl	80022ac <LL_ADC_REG_IsConversionOngoing>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f040 84e2 	bne.w	8003546 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	db38      	blt.n	8002bfc <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a9e      	ldr	r2, [pc, #632]	@ (8002e08 <HAL_ADC_ConfigChannel+0x2d4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d033      	beq.n	8002bfc <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d108      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x7e>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	0e9b      	lsrs	r3, r3, #26
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	2201      	movs	r2, #1
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	e01d      	b.n	8002bee <HAL_ADC_ConfigChannel+0xba>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bbe:	fa93 f3a3 	rbit	r3, r3
 8002bc2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8002bd6:	2320      	movs	r3, #32
 8002bd8:	e004      	b.n	8002be4 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8002bda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	2201      	movs	r2, #1
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	69d1      	ldr	r1, [r2, #28]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6812      	ldr	r2, [r2, #0]
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	6859      	ldr	r1, [r3, #4]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	f7ff f9d8 	bl	8001fbe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fb4a 	bl	80022ac <LL_ADC_REG_IsConversionOngoing>
 8002c18:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fb6b 	bl	80022fc <LL_ADC_INJ_IsConversionOngoing>
 8002c26:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f040 8270 	bne.w	8003114 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c34:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f040 826b 	bne.w	8003114 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6819      	ldr	r1, [r3, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f7ff f9e3 	bl	8002016 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a6c      	ldr	r2, [pc, #432]	@ (8002e08 <HAL_ADC_ConfigChannel+0x2d4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d10d      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	08db      	lsrs	r3, r3, #3
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c74:	e032      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c76:	4b65      	ldr	r3, [pc, #404]	@ (8002e0c <HAL_ADC_ConfigChannel+0x2d8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002c7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c82:	d10b      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x168>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	695a      	ldr	r2, [r3, #20]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	089b      	lsrs	r3, r3, #2
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	e01d      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x1a4>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f003 0310 	and.w	r3, r3, #16
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10b      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x18e>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	089b      	lsrs	r3, r3, #2
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	e00a      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x1a4>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	089b      	lsrs	r3, r3, #2
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d048      	beq.n	8002d76 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6919      	ldr	r1, [r3, #16]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002cf4:	f7ff f85e 	bl	8001db4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a42      	ldr	r2, [pc, #264]	@ (8002e08 <HAL_ADC_ConfigChannel+0x2d4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d119      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6919      	ldr	r1, [r3, #16]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f7ff f8f6 	bl	8001f00 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	6919      	ldr	r1, [r3, #16]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d102      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x1f8>
 8002d26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d2a:	e000      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x1fa>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f7ff f8c4 	bl	8001ebc <LL_ADC_SetOffsetSaturation>
 8002d34:	e1ee      	b.n	8003114 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6919      	ldr	r1, [r3, #16]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d102      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x21a>
 8002d48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002d4c:	e000      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x21c>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	461a      	mov	r2, r3
 8002d52:	f7ff f891 	bl	8001e78 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6919      	ldr	r1, [r3, #16]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	7e1b      	ldrb	r3, [r3, #24]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d102      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x238>
 8002d66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d6a:	e000      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x23a>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f7ff f868 	bl	8001e44 <LL_ADC_SetDataRightShift>
 8002d74:	e1ce      	b.n	8003114 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a23      	ldr	r2, [pc, #140]	@ (8002e08 <HAL_ADC_ConfigChannel+0x2d4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	f040 8181 	bne.w	8003084 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff f845 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x27a>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff f83a 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002da4:	4603      	mov	r3, r0
 8002da6:	0e9b      	lsrs	r3, r3, #26
 8002da8:	f003 021f 	and.w	r2, r3, #31
 8002dac:	e01e      	b.n	8002dec <HAL_ADC_ConfigChannel+0x2b8>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff f82f 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8002dcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002dd0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8002dd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8002ddc:	2320      	movs	r3, #32
 8002dde:	e004      	b.n	8002dea <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8002de0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002de4:	fab3 f383 	clz	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10b      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x2dc>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	0e9b      	lsrs	r3, r3, #26
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	e01e      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x30e>
 8002e04:	47ff0000 	.word	0x47ff0000
 8002e08:	58026000 	.word	0x58026000
 8002e0c:	5c001000 	.word	0x5c001000
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002e24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002e2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8002e34:	2320      	movs	r3, #32
 8002e36:	e004      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8002e38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d106      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff f878 	bl	8001f44 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2101      	movs	r1, #1
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe ffdc 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10a      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x34c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2101      	movs	r1, #1
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fe ffd1 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002e76:	4603      	mov	r3, r0
 8002e78:	0e9b      	lsrs	r3, r3, #26
 8002e7a:	f003 021f 	and.w	r2, r3, #31
 8002e7e:	e01e      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x38a>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2101      	movs	r1, #1
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fe ffc6 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002e9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ea2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002ea6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002eae:	2320      	movs	r3, #32
 8002eb0:	e004      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8002eb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d105      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x3a2>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	0e9b      	lsrs	r3, r3, #26
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	e018      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x3d4>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002eea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002eee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002ef2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8002efa:	2320      	movs	r3, #32
 8002efc:	e004      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8002efe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d106      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2200      	movs	r2, #0
 8002f12:	2101      	movs	r1, #1
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff f815 	bl	8001f44 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2102      	movs	r1, #2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fe ff79 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10a      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x412>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2102      	movs	r1, #2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fe ff6e 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	0e9b      	lsrs	r3, r3, #26
 8002f40:	f003 021f 	and.w	r2, r3, #31
 8002f44:	e01e      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x450>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2102      	movs	r1, #2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fe ff63 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f5c:	fa93 f3a3 	rbit	r3, r3
 8002f60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002f64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002f6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8002f74:	2320      	movs	r3, #32
 8002f76:	e004      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8002f78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f7c:	fab3 f383 	clz	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d105      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x468>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	0e9b      	lsrs	r3, r3, #26
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	e014      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x492>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fa4:	fa93 f3a3 	rbit	r3, r3
 8002fa8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002faa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002fb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002fb8:	2320      	movs	r3, #32
 8002fba:	e004      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002fbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fc0:	fab3 f383 	clz	r3, r3
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d106      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2102      	movs	r1, #2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe ffb6 	bl	8001f44 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2103      	movs	r1, #3
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe ff1a 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10a      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x4d0>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2103      	movs	r1, #3
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fe ff0f 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	0e9b      	lsrs	r3, r3, #26
 8002ffe:	f003 021f 	and.w	r2, r3, #31
 8003002:	e017      	b.n	8003034 <HAL_ADC_ConfigChannel+0x500>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2103      	movs	r1, #3
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe ff04 	bl	8001e18 <LL_ADC_GetOffsetChannel>
 8003010:	4603      	mov	r3, r0
 8003012:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800301c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800301e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003020:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003026:	2320      	movs	r3, #32
 8003028:	e003      	b.n	8003032 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800302a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800302c:	fab3 f383 	clz	r3, r3
 8003030:	b2db      	uxtb	r3, r3
 8003032:	461a      	mov	r2, r3
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800303c:	2b00      	cmp	r3, #0
 800303e:	d105      	bne.n	800304c <HAL_ADC_ConfigChannel+0x518>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	0e9b      	lsrs	r3, r3, #26
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	e011      	b.n	8003070 <HAL_ADC_ConfigChannel+0x53c>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800305a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800305c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800305e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003064:	2320      	movs	r3, #32
 8003066:	e003      	b.n	8003070 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003068:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800306a:	fab3 f383 	clz	r3, r3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	429a      	cmp	r2, r3
 8003072:	d14f      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2200      	movs	r2, #0
 800307a:	2103      	movs	r1, #3
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe ff61 	bl	8001f44 <LL_ADC_SetOffsetState>
 8003082:	e047      	b.n	8003114 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800308a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	069b      	lsls	r3, r3, #26
 8003094:	429a      	cmp	r2, r3
 8003096:	d107      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030a6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	069b      	lsls	r3, r3, #26
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d107      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030ca:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	069b      	lsls	r3, r3, #26
 80030dc:	429a      	cmp	r2, r3
 80030de:	d107      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030ee:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	069b      	lsls	r3, r3, #26
 8003100:	429a      	cmp	r2, r3
 8003102:	d107      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003112:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff f879 	bl	8002210 <LL_ADC_IsEnabled>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	f040 8219 	bne.w	8003558 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6819      	ldr	r1, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	461a      	mov	r2, r3
 8003134:	f7fe ff9a 	bl	800206c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4aa1      	ldr	r2, [pc, #644]	@ (80033c4 <HAL_ADC_ConfigChannel+0x890>)
 800313e:	4293      	cmp	r3, r2
 8003140:	f040 812e 	bne.w	80033a0 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10b      	bne.n	800316c <HAL_ADC_ConfigChannel+0x638>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	0e9b      	lsrs	r3, r3, #26
 800315a:	3301      	adds	r3, #1
 800315c:	f003 031f 	and.w	r3, r3, #31
 8003160:	2b09      	cmp	r3, #9
 8003162:	bf94      	ite	ls
 8003164:	2301      	movls	r3, #1
 8003166:	2300      	movhi	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e019      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x66c>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003174:	fa93 f3a3 	rbit	r3, r3
 8003178:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800317a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800317c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800317e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003184:	2320      	movs	r3, #32
 8003186:	e003      	b.n	8003190 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003188:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
 8003190:	3301      	adds	r3, #1
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	2b09      	cmp	r3, #9
 8003198:	bf94      	ite	ls
 800319a:	2301      	movls	r3, #1
 800319c:	2300      	movhi	r3, #0
 800319e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d079      	beq.n	8003298 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d107      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x68c>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	0e9b      	lsrs	r3, r3, #26
 80031b6:	3301      	adds	r3, #1
 80031b8:	069b      	lsls	r3, r3, #26
 80031ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031be:	e015      	b.n	80031ec <HAL_ADC_ConfigChannel+0x6b8>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031c8:	fa93 f3a3 	rbit	r3, r3
 80031cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80031ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031d0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80031d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80031d8:	2320      	movs	r3, #32
 80031da:	e003      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80031dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031de:	fab3 f383 	clz	r3, r3
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	3301      	adds	r3, #1
 80031e6:	069b      	lsls	r3, r3, #26
 80031e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d109      	bne.n	800320c <HAL_ADC_ConfigChannel+0x6d8>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	0e9b      	lsrs	r3, r3, #26
 80031fe:	3301      	adds	r3, #1
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	2101      	movs	r1, #1
 8003206:	fa01 f303 	lsl.w	r3, r1, r3
 800320a:	e017      	b.n	800323c <HAL_ADC_ConfigChannel+0x708>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003214:	fa93 f3a3 	rbit	r3, r3
 8003218:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800321a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800321c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800321e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8003224:	2320      	movs	r3, #32
 8003226:	e003      	b.n	8003230 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8003228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800322a:	fab3 f383 	clz	r3, r3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	3301      	adds	r3, #1
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	2101      	movs	r1, #1
 8003238:	fa01 f303 	lsl.w	r3, r1, r3
 800323c:	ea42 0103 	orr.w	r1, r2, r3
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10a      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x72e>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	0e9b      	lsrs	r3, r3, #26
 8003252:	3301      	adds	r3, #1
 8003254:	f003 021f 	and.w	r2, r3, #31
 8003258:	4613      	mov	r3, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4413      	add	r3, r2
 800325e:	051b      	lsls	r3, r3, #20
 8003260:	e018      	b.n	8003294 <HAL_ADC_ConfigChannel+0x760>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800326a:	fa93 f3a3 	rbit	r3, r3
 800326e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003272:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800327a:	2320      	movs	r3, #32
 800327c:	e003      	b.n	8003286 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800327e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003280:	fab3 f383 	clz	r3, r3
 8003284:	b2db      	uxtb	r3, r3
 8003286:	3301      	adds	r3, #1
 8003288:	f003 021f 	and.w	r2, r3, #31
 800328c:	4613      	mov	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4413      	add	r3, r2
 8003292:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003294:	430b      	orrs	r3, r1
 8003296:	e07e      	b.n	8003396 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d107      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x780>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	0e9b      	lsrs	r3, r3, #26
 80032aa:	3301      	adds	r3, #1
 80032ac:	069b      	lsls	r3, r3, #26
 80032ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032b2:	e015      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x7ac>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032bc:	fa93 f3a3 	rbit	r3, r3
 80032c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80032c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80032cc:	2320      	movs	r3, #32
 80032ce:	e003      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80032d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d2:	fab3 f383 	clz	r3, r3
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	3301      	adds	r3, #1
 80032da:	069b      	lsls	r3, r3, #26
 80032dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d109      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x7cc>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	0e9b      	lsrs	r3, r3, #26
 80032f2:	3301      	adds	r3, #1
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	2101      	movs	r1, #1
 80032fa:	fa01 f303 	lsl.w	r3, r1, r3
 80032fe:	e017      	b.n	8003330 <HAL_ADC_ConfigChannel+0x7fc>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	fa93 f3a3 	rbit	r3, r3
 800330c:	61bb      	str	r3, [r7, #24]
  return result;
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8003318:	2320      	movs	r3, #32
 800331a:	e003      	b.n	8003324 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	fab3 f383 	clz	r3, r3
 8003322:	b2db      	uxtb	r3, r3
 8003324:	3301      	adds	r3, #1
 8003326:	f003 031f 	and.w	r3, r3, #31
 800332a:	2101      	movs	r1, #1
 800332c:	fa01 f303 	lsl.w	r3, r1, r3
 8003330:	ea42 0103 	orr.w	r1, r2, r3
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10d      	bne.n	800335c <HAL_ADC_ConfigChannel+0x828>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	0e9b      	lsrs	r3, r3, #26
 8003346:	3301      	adds	r3, #1
 8003348:	f003 021f 	and.w	r2, r3, #31
 800334c:	4613      	mov	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4413      	add	r3, r2
 8003352:	3b1e      	subs	r3, #30
 8003354:	051b      	lsls	r3, r3, #20
 8003356:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800335a:	e01b      	b.n	8003394 <HAL_ADC_ConfigChannel+0x860>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	fa93 f3a3 	rbit	r3, r3
 8003368:	60fb      	str	r3, [r7, #12]
  return result;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8003374:	2320      	movs	r3, #32
 8003376:	e003      	b.n	8003380 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	fab3 f383 	clz	r3, r3
 800337e:	b2db      	uxtb	r3, r3
 8003380:	3301      	adds	r3, #1
 8003382:	f003 021f 	and.w	r2, r3, #31
 8003386:	4613      	mov	r3, r2
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	4413      	add	r3, r2
 800338c:	3b1e      	subs	r3, #30
 800338e:	051b      	lsls	r3, r3, #20
 8003390:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003394:	430b      	orrs	r3, r1
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	6892      	ldr	r2, [r2, #8]
 800339a:	4619      	mov	r1, r3
 800339c:	f7fe fe3b 	bl	8002016 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f280 80d7 	bge.w	8003558 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a06      	ldr	r2, [pc, #24]	@ (80033c8 <HAL_ADC_ConfigChannel+0x894>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d004      	beq.n	80033be <HAL_ADC_ConfigChannel+0x88a>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a04      	ldr	r2, [pc, #16]	@ (80033cc <HAL_ADC_ConfigChannel+0x898>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d10a      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x8a0>
 80033be:	4b04      	ldr	r3, [pc, #16]	@ (80033d0 <HAL_ADC_ConfigChannel+0x89c>)
 80033c0:	e009      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x8a2>
 80033c2:	bf00      	nop
 80033c4:	47ff0000 	.word	0x47ff0000
 80033c8:	40022000 	.word	0x40022000
 80033cc:	40022100 	.word	0x40022100
 80033d0:	40022300 	.word	0x40022300
 80033d4:	4b65      	ldr	r3, [pc, #404]	@ (800356c <HAL_ADC_ConfigChannel+0xa38>)
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fcde 	bl	8001d98 <LL_ADC_GetCommonPathInternalCh>
 80033dc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a62      	ldr	r2, [pc, #392]	@ (8003570 <HAL_ADC_ConfigChannel+0xa3c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d004      	beq.n	80033f4 <HAL_ADC_ConfigChannel+0x8c0>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a61      	ldr	r2, [pc, #388]	@ (8003574 <HAL_ADC_ConfigChannel+0xa40>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d10e      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x8de>
 80033f4:	485e      	ldr	r0, [pc, #376]	@ (8003570 <HAL_ADC_ConfigChannel+0xa3c>)
 80033f6:	f7fe ff0b 	bl	8002210 <LL_ADC_IsEnabled>
 80033fa:	4604      	mov	r4, r0
 80033fc:	485d      	ldr	r0, [pc, #372]	@ (8003574 <HAL_ADC_ConfigChannel+0xa40>)
 80033fe:	f7fe ff07 	bl	8002210 <LL_ADC_IsEnabled>
 8003402:	4603      	mov	r3, r0
 8003404:	4323      	orrs	r3, r4
 8003406:	2b00      	cmp	r3, #0
 8003408:	bf0c      	ite	eq
 800340a:	2301      	moveq	r3, #1
 800340c:	2300      	movne	r3, #0
 800340e:	b2db      	uxtb	r3, r3
 8003410:	e008      	b.n	8003424 <HAL_ADC_ConfigChannel+0x8f0>
 8003412:	4859      	ldr	r0, [pc, #356]	@ (8003578 <HAL_ADC_ConfigChannel+0xa44>)
 8003414:	f7fe fefc 	bl	8002210 <LL_ADC_IsEnabled>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	bf0c      	ite	eq
 800341e:	2301      	moveq	r3, #1
 8003420:	2300      	movne	r3, #0
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8084 	beq.w	8003532 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a53      	ldr	r2, [pc, #332]	@ (800357c <HAL_ADC_ConfigChannel+0xa48>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d132      	bne.n	800349a <HAL_ADC_ConfigChannel+0x966>
 8003434:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003438:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d12c      	bne.n	800349a <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a4c      	ldr	r2, [pc, #304]	@ (8003578 <HAL_ADC_ConfigChannel+0xa44>)
 8003446:	4293      	cmp	r3, r2
 8003448:	f040 8086 	bne.w	8003558 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a47      	ldr	r2, [pc, #284]	@ (8003570 <HAL_ADC_ConfigChannel+0xa3c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d004      	beq.n	8003460 <HAL_ADC_ConfigChannel+0x92c>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a46      	ldr	r2, [pc, #280]	@ (8003574 <HAL_ADC_ConfigChannel+0xa40>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d101      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x930>
 8003460:	4a47      	ldr	r2, [pc, #284]	@ (8003580 <HAL_ADC_ConfigChannel+0xa4c>)
 8003462:	e000      	b.n	8003466 <HAL_ADC_ConfigChannel+0x932>
 8003464:	4a41      	ldr	r2, [pc, #260]	@ (800356c <HAL_ADC_ConfigChannel+0xa38>)
 8003466:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800346a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800346e:	4619      	mov	r1, r3
 8003470:	4610      	mov	r0, r2
 8003472:	f7fe fc7e 	bl	8001d72 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003476:	4b43      	ldr	r3, [pc, #268]	@ (8003584 <HAL_ADC_ConfigChannel+0xa50>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	099b      	lsrs	r3, r3, #6
 800347c:	4a42      	ldr	r2, [pc, #264]	@ (8003588 <HAL_ADC_ConfigChannel+0xa54>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	099b      	lsrs	r3, r3, #6
 8003484:	3301      	adds	r3, #1
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800348a:	e002      	b.n	8003492 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	3b01      	subs	r3, #1
 8003490:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f9      	bne.n	800348c <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003498:	e05e      	b.n	8003558 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a3b      	ldr	r2, [pc, #236]	@ (800358c <HAL_ADC_ConfigChannel+0xa58>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d120      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x9b2>
 80034a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d11a      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a30      	ldr	r2, [pc, #192]	@ (8003578 <HAL_ADC_ConfigChannel+0xa44>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d14e      	bne.n	8003558 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a2c      	ldr	r2, [pc, #176]	@ (8003570 <HAL_ADC_ConfigChannel+0xa3c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d004      	beq.n	80034ce <HAL_ADC_ConfigChannel+0x99a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a2a      	ldr	r2, [pc, #168]	@ (8003574 <HAL_ADC_ConfigChannel+0xa40>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d101      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x99e>
 80034ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003580 <HAL_ADC_ConfigChannel+0xa4c>)
 80034d0:	e000      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x9a0>
 80034d2:	4a26      	ldr	r2, [pc, #152]	@ (800356c <HAL_ADC_ConfigChannel+0xa38>)
 80034d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034dc:	4619      	mov	r1, r3
 80034de:	4610      	mov	r0, r2
 80034e0:	f7fe fc47 	bl	8001d72 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034e4:	e038      	b.n	8003558 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a29      	ldr	r2, [pc, #164]	@ (8003590 <HAL_ADC_ConfigChannel+0xa5c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d133      	bne.n	8003558 <HAL_ADC_ConfigChannel+0xa24>
 80034f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d12d      	bne.n	8003558 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1d      	ldr	r2, [pc, #116]	@ (8003578 <HAL_ADC_ConfigChannel+0xa44>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d128      	bne.n	8003558 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a19      	ldr	r2, [pc, #100]	@ (8003570 <HAL_ADC_ConfigChannel+0xa3c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d004      	beq.n	800351a <HAL_ADC_ConfigChannel+0x9e6>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a17      	ldr	r2, [pc, #92]	@ (8003574 <HAL_ADC_ConfigChannel+0xa40>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d101      	bne.n	800351e <HAL_ADC_ConfigChannel+0x9ea>
 800351a:	4a19      	ldr	r2, [pc, #100]	@ (8003580 <HAL_ADC_ConfigChannel+0xa4c>)
 800351c:	e000      	b.n	8003520 <HAL_ADC_ConfigChannel+0x9ec>
 800351e:	4a13      	ldr	r2, [pc, #76]	@ (800356c <HAL_ADC_ConfigChannel+0xa38>)
 8003520:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003524:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003528:	4619      	mov	r1, r3
 800352a:	4610      	mov	r0, r2
 800352c:	f7fe fc21 	bl	8001d72 <LL_ADC_SetCommonPathInternalCh>
 8003530:	e012      	b.n	8003558 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003536:	f043 0220 	orr.w	r2, r3, #32
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8003544:	e008      	b.n	8003558 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354a:	f043 0220 	orr.w	r2, r3, #32
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003560:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8003564:	4618      	mov	r0, r3
 8003566:	37e4      	adds	r7, #228	@ 0xe4
 8003568:	46bd      	mov	sp, r7
 800356a:	bd90      	pop	{r4, r7, pc}
 800356c:	58026300 	.word	0x58026300
 8003570:	40022000 	.word	0x40022000
 8003574:	40022100 	.word	0x40022100
 8003578:	58026000 	.word	0x58026000
 800357c:	c7520000 	.word	0xc7520000
 8003580:	40022300 	.word	0x40022300
 8003584:	24000000 	.word	0x24000000
 8003588:	053e2d63 	.word	0x053e2d63
 800358c:	c3210000 	.word	0xc3210000
 8003590:	cb840000 	.word	0xcb840000

08003594 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800359e:	2300      	movs	r3, #0
 80035a0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fe fe7e 	bl	80022ac <LL_ADC_REG_IsConversionOngoing>
 80035b0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fe fea0 	bl	80022fc <LL_ADC_INJ_IsConversionOngoing>
 80035bc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d103      	bne.n	80035cc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 8098 	beq.w	80036fc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d02a      	beq.n	8003630 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	7e5b      	ldrb	r3, [r3, #25]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d126      	bne.n	8003630 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	7e1b      	ldrb	r3, [r3, #24]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d122      	bne.n	8003630 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80035ea:	2301      	movs	r3, #1
 80035ec:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80035ee:	e014      	b.n	800361a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	4a45      	ldr	r2, [pc, #276]	@ (8003708 <ADC_ConversionStop+0x174>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d90d      	bls.n	8003614 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035fc:	f043 0210 	orr.w	r2, r3, #16
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003608:	f043 0201 	orr.w	r2, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e074      	b.n	80036fe <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	3301      	adds	r3, #1
 8003618:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003624:	2b40      	cmp	r3, #64	@ 0x40
 8003626:	d1e3      	bne.n	80035f0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2240      	movs	r2, #64	@ 0x40
 800362e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d014      	beq.n	8003660 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe fe36 	bl	80022ac <LL_ADC_REG_IsConversionOngoing>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00c      	beq.n	8003660 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe fdf3 	bl	8002236 <LL_ADC_IsDisableOngoing>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d104      	bne.n	8003660 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fe fe12 	bl	8002284 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d014      	beq.n	8003690 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe fe46 	bl	80022fc <LL_ADC_INJ_IsConversionOngoing>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00c      	beq.n	8003690 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7fe fddb 	bl	8002236 <LL_ADC_IsDisableOngoing>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d104      	bne.n	8003690 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7fe fe22 	bl	80022d4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d005      	beq.n	80036a2 <ADC_ConversionStop+0x10e>
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b03      	cmp	r3, #3
 800369a:	d105      	bne.n	80036a8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800369c:	230c      	movs	r3, #12
 800369e:	617b      	str	r3, [r7, #20]
        break;
 80036a0:	e005      	b.n	80036ae <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80036a2:	2308      	movs	r3, #8
 80036a4:	617b      	str	r3, [r7, #20]
        break;
 80036a6:	e002      	b.n	80036ae <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80036a8:	2304      	movs	r3, #4
 80036aa:	617b      	str	r3, [r7, #20]
        break;
 80036ac:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80036ae:	f7fe fb2d 	bl	8001d0c <HAL_GetTick>
 80036b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036b4:	e01b      	b.n	80036ee <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80036b6:	f7fe fb29 	bl	8001d0c <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b05      	cmp	r3, #5
 80036c2:	d914      	bls.n	80036ee <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	4013      	ands	r3, r2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00d      	beq.n	80036ee <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d6:	f043 0210 	orr.w	r2, r3, #16
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036e2:	f043 0201 	orr.w	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e007      	b.n	80036fe <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1dc      	bne.n	80036b6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3720      	adds	r7, #32
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	000cdbff 	.word	0x000cdbff

0800370c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f7fe fd79 	bl	8002210 <LL_ADC_IsEnabled>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d16e      	bne.n	8003802 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	4b38      	ldr	r3, [pc, #224]	@ (800380c <ADC_Enable+0x100>)
 800372c:	4013      	ands	r3, r2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00d      	beq.n	800374e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003736:	f043 0210 	orr.w	r2, r3, #16
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003742:	f043 0201 	orr.w	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e05a      	b.n	8003804 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7fe fd34 	bl	80021c0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003758:	f7fe fad8 	bl	8001d0c <HAL_GetTick>
 800375c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a2b      	ldr	r2, [pc, #172]	@ (8003810 <ADC_Enable+0x104>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d004      	beq.n	8003772 <ADC_Enable+0x66>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a29      	ldr	r2, [pc, #164]	@ (8003814 <ADC_Enable+0x108>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d101      	bne.n	8003776 <ADC_Enable+0x6a>
 8003772:	4b29      	ldr	r3, [pc, #164]	@ (8003818 <ADC_Enable+0x10c>)
 8003774:	e000      	b.n	8003778 <ADC_Enable+0x6c>
 8003776:	4b29      	ldr	r3, [pc, #164]	@ (800381c <ADC_Enable+0x110>)
 8003778:	4618      	mov	r0, r3
 800377a:	f7fe fcb7 	bl	80020ec <LL_ADC_GetMultimode>
 800377e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a23      	ldr	r2, [pc, #140]	@ (8003814 <ADC_Enable+0x108>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d002      	beq.n	8003790 <ADC_Enable+0x84>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	e000      	b.n	8003792 <ADC_Enable+0x86>
 8003790:	4b1f      	ldr	r3, [pc, #124]	@ (8003810 <ADC_Enable+0x104>)
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6812      	ldr	r2, [r2, #0]
 8003796:	4293      	cmp	r3, r2
 8003798:	d02c      	beq.n	80037f4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d130      	bne.n	8003802 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037a0:	e028      	b.n	80037f4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fe fd32 	bl	8002210 <LL_ADC_IsEnabled>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d104      	bne.n	80037bc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe fd02 	bl	80021c0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037bc:	f7fe faa6 	bl	8001d0c <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d914      	bls.n	80037f4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d00d      	beq.n	80037f4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037dc:	f043 0210 	orr.w	r2, r3, #16
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037e8:	f043 0201 	orr.w	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e007      	b.n	8003804 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d1cf      	bne.n	80037a2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	8000003f 	.word	0x8000003f
 8003810:	40022000 	.word	0x40022000
 8003814:	40022100 	.word	0x40022100
 8003818:	40022300 	.word	0x40022300
 800381c:	58026300 	.word	0x58026300

08003820 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f7fe fd02 	bl	8002236 <LL_ADC_IsDisableOngoing>
 8003832:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f7fe fce9 	bl	8002210 <LL_ADC_IsEnabled>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d047      	beq.n	80038d4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d144      	bne.n	80038d4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 030d 	and.w	r3, r3, #13
 8003854:	2b01      	cmp	r3, #1
 8003856:	d10c      	bne.n	8003872 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f7fe fcc3 	bl	80021e8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2203      	movs	r2, #3
 8003868:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800386a:	f7fe fa4f 	bl	8001d0c <HAL_GetTick>
 800386e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003870:	e029      	b.n	80038c6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003876:	f043 0210 	orr.w	r2, r3, #16
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003882:	f043 0201 	orr.w	r2, r3, #1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e023      	b.n	80038d6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800388e:	f7fe fa3d 	bl	8001d0c <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d914      	bls.n	80038c6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00d      	beq.n	80038c6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ae:	f043 0210 	orr.w	r2, r3, #16
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038ba:	f043 0201 	orr.w	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e007      	b.n	80038d6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1dc      	bne.n	800388e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a6c      	ldr	r2, [pc, #432]	@ (8003aa0 <ADC_ConfigureBoostMode+0x1c0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d004      	beq.n	80038fc <ADC_ConfigureBoostMode+0x1c>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a6b      	ldr	r2, [pc, #428]	@ (8003aa4 <ADC_ConfigureBoostMode+0x1c4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d109      	bne.n	8003910 <ADC_ConfigureBoostMode+0x30>
 80038fc:	4b6a      	ldr	r3, [pc, #424]	@ (8003aa8 <ADC_ConfigureBoostMode+0x1c8>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003904:	2b00      	cmp	r3, #0
 8003906:	bf14      	ite	ne
 8003908:	2301      	movne	r3, #1
 800390a:	2300      	moveq	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	e008      	b.n	8003922 <ADC_ConfigureBoostMode+0x42>
 8003910:	4b66      	ldr	r3, [pc, #408]	@ (8003aac <ADC_ConfigureBoostMode+0x1cc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf14      	ite	ne
 800391c:	2301      	movne	r3, #1
 800391e:	2300      	moveq	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d01c      	beq.n	8003960 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003926:	f003 f801 	bl	800692c <HAL_RCC_GetHCLKFreq>
 800392a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003934:	d010      	beq.n	8003958 <ADC_ConfigureBoostMode+0x78>
 8003936:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800393a:	d873      	bhi.n	8003a24 <ADC_ConfigureBoostMode+0x144>
 800393c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003940:	d002      	beq.n	8003948 <ADC_ConfigureBoostMode+0x68>
 8003942:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003946:	d16d      	bne.n	8003a24 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	0c1b      	lsrs	r3, r3, #16
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	60fb      	str	r3, [r7, #12]
        break;
 8003956:	e068      	b.n	8003a2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	089b      	lsrs	r3, r3, #2
 800395c:	60fb      	str	r3, [r7, #12]
        break;
 800395e:	e064      	b.n	8003a2a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003960:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003964:	f04f 0100 	mov.w	r1, #0
 8003968:	f004 fa1e 	bl	8007da8 <HAL_RCCEx_GetPeriphCLKFreq>
 800396c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003976:	d051      	beq.n	8003a1c <ADC_ConfigureBoostMode+0x13c>
 8003978:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800397c:	d854      	bhi.n	8003a28 <ADC_ConfigureBoostMode+0x148>
 800397e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003982:	d047      	beq.n	8003a14 <ADC_ConfigureBoostMode+0x134>
 8003984:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003988:	d84e      	bhi.n	8003a28 <ADC_ConfigureBoostMode+0x148>
 800398a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800398e:	d03d      	beq.n	8003a0c <ADC_ConfigureBoostMode+0x12c>
 8003990:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003994:	d848      	bhi.n	8003a28 <ADC_ConfigureBoostMode+0x148>
 8003996:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800399a:	d033      	beq.n	8003a04 <ADC_ConfigureBoostMode+0x124>
 800399c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039a0:	d842      	bhi.n	8003a28 <ADC_ConfigureBoostMode+0x148>
 80039a2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80039a6:	d029      	beq.n	80039fc <ADC_ConfigureBoostMode+0x11c>
 80039a8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80039ac:	d83c      	bhi.n	8003a28 <ADC_ConfigureBoostMode+0x148>
 80039ae:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80039b2:	d01a      	beq.n	80039ea <ADC_ConfigureBoostMode+0x10a>
 80039b4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80039b8:	d836      	bhi.n	8003a28 <ADC_ConfigureBoostMode+0x148>
 80039ba:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80039be:	d014      	beq.n	80039ea <ADC_ConfigureBoostMode+0x10a>
 80039c0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80039c4:	d830      	bhi.n	8003a28 <ADC_ConfigureBoostMode+0x148>
 80039c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039ca:	d00e      	beq.n	80039ea <ADC_ConfigureBoostMode+0x10a>
 80039cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039d0:	d82a      	bhi.n	8003a28 <ADC_ConfigureBoostMode+0x148>
 80039d2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80039d6:	d008      	beq.n	80039ea <ADC_ConfigureBoostMode+0x10a>
 80039d8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80039dc:	d824      	bhi.n	8003a28 <ADC_ConfigureBoostMode+0x148>
 80039de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039e2:	d002      	beq.n	80039ea <ADC_ConfigureBoostMode+0x10a>
 80039e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80039e8:	d11e      	bne.n	8003a28 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	0c9b      	lsrs	r3, r3, #18
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f8:	60fb      	str	r3, [r7, #12]
        break;
 80039fa:	e016      	b.n	8003a2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	091b      	lsrs	r3, r3, #4
 8003a00:	60fb      	str	r3, [r7, #12]
        break;
 8003a02:	e012      	b.n	8003a2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	60fb      	str	r3, [r7, #12]
        break;
 8003a0a:	e00e      	b.n	8003a2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	099b      	lsrs	r3, r3, #6
 8003a10:	60fb      	str	r3, [r7, #12]
        break;
 8003a12:	e00a      	b.n	8003a2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	09db      	lsrs	r3, r3, #7
 8003a18:	60fb      	str	r3, [r7, #12]
        break;
 8003a1a:	e006      	b.n	8003a2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	0a1b      	lsrs	r3, r3, #8
 8003a20:	60fb      	str	r3, [r7, #12]
        break;
 8003a22:	e002      	b.n	8003a2a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003a24:	bf00      	nop
 8003a26:	e000      	b.n	8003a2a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003a28:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	085b      	lsrs	r3, r3, #1
 8003a2e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4a1f      	ldr	r2, [pc, #124]	@ (8003ab0 <ADC_ConfigureBoostMode+0x1d0>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d808      	bhi.n	8003a4a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003a46:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003a48:	e025      	b.n	8003a96 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4a19      	ldr	r2, [pc, #100]	@ (8003ab4 <ADC_ConfigureBoostMode+0x1d4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d80a      	bhi.n	8003a68 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a64:	609a      	str	r2, [r3, #8]
}
 8003a66:	e016      	b.n	8003a96 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4a13      	ldr	r2, [pc, #76]	@ (8003ab8 <ADC_ConfigureBoostMode+0x1d8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d80a      	bhi.n	8003a86 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a82:	609a      	str	r2, [r3, #8]
}
 8003a84:	e007      	b.n	8003a96 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003a94:	609a      	str	r2, [r3, #8]
}
 8003a96:	bf00      	nop
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40022000 	.word	0x40022000
 8003aa4:	40022100 	.word	0x40022100
 8003aa8:	40022300 	.word	0x40022300
 8003aac:	58026300 	.word	0x58026300
 8003ab0:	005f5e10 	.word	0x005f5e10
 8003ab4:	00bebc20 	.word	0x00bebc20
 8003ab8:	017d7840 	.word	0x017d7840

08003abc <LL_ADC_IsEnabled>:
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <LL_ADC_IsEnabled+0x18>
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e000      	b.n	8003ad6 <LL_ADC_IsEnabled+0x1a>
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d101      	bne.n	8003afa <LL_ADC_REG_IsConversionOngoing+0x18>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003b08:	b590      	push	{r4, r7, lr}
 8003b0a:	b0a3      	sub	sp, #140	@ 0x8c
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e0c1      	b.n	8003caa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a5e      	ldr	r2, [pc, #376]	@ (8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d102      	bne.n	8003b46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b40:	4b5d      	ldr	r3, [pc, #372]	@ (8003cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	e001      	b.n	8003b4a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10b      	bne.n	8003b68 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b54:	f043 0220 	orr.w	r2, r3, #32
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0a0      	b.n	8003caa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff ffb9 	bl	8003ae2 <LL_ADC_REG_IsConversionOngoing>
 8003b70:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff ffb2 	bl	8003ae2 <LL_ADC_REG_IsConversionOngoing>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f040 8081 	bne.w	8003c88 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003b86:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d17c      	bne.n	8003c88 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a48      	ldr	r2, [pc, #288]	@ (8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d004      	beq.n	8003ba2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a46      	ldr	r2, [pc, #280]	@ (8003cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d101      	bne.n	8003ba6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003ba2:	4b46      	ldr	r3, [pc, #280]	@ (8003cbc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003ba4:	e000      	b.n	8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003ba6:	4b46      	ldr	r3, [pc, #280]	@ (8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003ba8:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d039      	beq.n	8003c26 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003bb2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bc2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a3a      	ldr	r2, [pc, #232]	@ (8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d004      	beq.n	8003bd8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a39      	ldr	r2, [pc, #228]	@ (8003cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d10e      	bne.n	8003bf6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003bd8:	4836      	ldr	r0, [pc, #216]	@ (8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003bda:	f7ff ff6f 	bl	8003abc <LL_ADC_IsEnabled>
 8003bde:	4604      	mov	r4, r0
 8003be0:	4835      	ldr	r0, [pc, #212]	@ (8003cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003be2:	f7ff ff6b 	bl	8003abc <LL_ADC_IsEnabled>
 8003be6:	4603      	mov	r3, r0
 8003be8:	4323      	orrs	r3, r4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	bf0c      	ite	eq
 8003bee:	2301      	moveq	r3, #1
 8003bf0:	2300      	movne	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	e008      	b.n	8003c08 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003bf6:	4833      	ldr	r0, [pc, #204]	@ (8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003bf8:	f7ff ff60 	bl	8003abc <LL_ADC_IsEnabled>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bf0c      	ite	eq
 8003c02:	2301      	moveq	r3, #1
 8003c04:	2300      	movne	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d047      	beq.n	8003c9c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	4b2d      	ldr	r3, [pc, #180]	@ (8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c12:	4013      	ands	r3, r2
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	6811      	ldr	r1, [r2, #0]
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	6892      	ldr	r2, [r2, #8]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c22:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c24:	e03a      	b.n	8003c9c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003c26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c30:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d004      	beq.n	8003c46 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d10e      	bne.n	8003c64 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003c46:	481b      	ldr	r0, [pc, #108]	@ (8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c48:	f7ff ff38 	bl	8003abc <LL_ADC_IsEnabled>
 8003c4c:	4604      	mov	r4, r0
 8003c4e:	481a      	ldr	r0, [pc, #104]	@ (8003cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c50:	f7ff ff34 	bl	8003abc <LL_ADC_IsEnabled>
 8003c54:	4603      	mov	r3, r0
 8003c56:	4323      	orrs	r3, r4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e008      	b.n	8003c76 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003c64:	4817      	ldr	r0, [pc, #92]	@ (8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003c66:	f7ff ff29 	bl	8003abc <LL_ADC_IsEnabled>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bf0c      	ite	eq
 8003c70:	2301      	moveq	r3, #1
 8003c72:	2300      	movne	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d010      	beq.n	8003c9c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	4b12      	ldr	r3, [pc, #72]	@ (8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003c84:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c86:	e009      	b.n	8003c9c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c8c:	f043 0220 	orr.w	r2, r3, #32
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003c9a:	e000      	b.n	8003c9e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003ca6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	378c      	adds	r7, #140	@ 0x8c
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd90      	pop	{r4, r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40022000 	.word	0x40022000
 8003cb8:	40022100 	.word	0x40022100
 8003cbc:	40022300 	.word	0x40022300
 8003cc0:	58026300 	.word	0x58026300
 8003cc4:	58026000 	.word	0x58026000
 8003cc8:	fffff0e0 	.word	0xfffff0e0

08003ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8003d0c <__NVIC_SetPriorityGrouping+0x40>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ce8:	4013      	ands	r3, r2
 8003cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003cf4:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <__NVIC_SetPriorityGrouping+0x44>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cfa:	4a04      	ldr	r2, [pc, #16]	@ (8003d0c <__NVIC_SetPriorityGrouping+0x40>)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	60d3      	str	r3, [r2, #12]
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	e000ed00 	.word	0xe000ed00
 8003d10:	05fa0000 	.word	0x05fa0000

08003d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d18:	4b04      	ldr	r3, [pc, #16]	@ (8003d2c <__NVIC_GetPriorityGrouping+0x18>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	0a1b      	lsrs	r3, r3, #8
 8003d1e:	f003 0307 	and.w	r3, r3, #7
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	e000ed00 	.word	0xe000ed00

08003d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	db0b      	blt.n	8003d5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	f003 021f 	and.w	r2, r3, #31
 8003d48:	4907      	ldr	r1, [pc, #28]	@ (8003d68 <__NVIC_EnableIRQ+0x38>)
 8003d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	2001      	movs	r0, #1
 8003d52:	fa00 f202 	lsl.w	r2, r0, r2
 8003d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	e000e100 	.word	0xe000e100

08003d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	6039      	str	r1, [r7, #0]
 8003d76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	db0a      	blt.n	8003d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	490c      	ldr	r1, [pc, #48]	@ (8003db8 <__NVIC_SetPriority+0x4c>)
 8003d86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d8a:	0112      	lsls	r2, r2, #4
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	440b      	add	r3, r1
 8003d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d94:	e00a      	b.n	8003dac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	4908      	ldr	r1, [pc, #32]	@ (8003dbc <__NVIC_SetPriority+0x50>)
 8003d9c:	88fb      	ldrh	r3, [r7, #6]
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	3b04      	subs	r3, #4
 8003da4:	0112      	lsls	r2, r2, #4
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	440b      	add	r3, r1
 8003daa:	761a      	strb	r2, [r3, #24]
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	e000e100 	.word	0xe000e100
 8003dbc:	e000ed00 	.word	0xe000ed00

08003dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b089      	sub	sp, #36	@ 0x24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f1c3 0307 	rsb	r3, r3, #7
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	bf28      	it	cs
 8003dde:	2304      	movcs	r3, #4
 8003de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3304      	adds	r3, #4
 8003de6:	2b06      	cmp	r3, #6
 8003de8:	d902      	bls.n	8003df0 <NVIC_EncodePriority+0x30>
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	3b03      	subs	r3, #3
 8003dee:	e000      	b.n	8003df2 <NVIC_EncodePriority+0x32>
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df4:	f04f 32ff 	mov.w	r2, #4294967295
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43da      	mvns	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	401a      	ands	r2, r3
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e08:	f04f 31ff 	mov.w	r1, #4294967295
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e12:	43d9      	mvns	r1, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e18:	4313      	orrs	r3, r2
         );
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3724      	adds	r7, #36	@ 0x24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff ff4c 	bl	8003ccc <__NVIC_SetPriorityGrouping>
}
 8003e34:	bf00      	nop
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e4a:	f7ff ff63 	bl	8003d14 <__NVIC_GetPriorityGrouping>
 8003e4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	68b9      	ldr	r1, [r7, #8]
 8003e54:	6978      	ldr	r0, [r7, #20]
 8003e56:	f7ff ffb3 	bl	8003dc0 <NVIC_EncodePriority>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e60:	4611      	mov	r1, r2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff ff82 	bl	8003d6c <__NVIC_SetPriority>
}
 8003e68:	bf00      	nop
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff ff56 	bl	8003d30 <__NVIC_EnableIRQ>
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e0e3      	b.n	8004066 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d106      	bne.n	8003eb6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2223      	movs	r2, #35	@ 0x23
 8003eac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f008 f81b 	bl	800beec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb6:	4b6e      	ldr	r3, [pc, #440]	@ (8004070 <HAL_ETH_Init+0x1e4>)
 8003eb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ebc:	4a6c      	ldr	r2, [pc, #432]	@ (8004070 <HAL_ETH_Init+0x1e4>)
 8003ebe:	f043 0302 	orr.w	r3, r3, #2
 8003ec2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003ec6:	4b6a      	ldr	r3, [pc, #424]	@ (8004070 <HAL_ETH_Init+0x1e4>)
 8003ec8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	7a1b      	ldrb	r3, [r3, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d103      	bne.n	8003ee4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003edc:	2000      	movs	r0, #0
 8003ede:	f7fd ff21 	bl	8001d24 <HAL_SYSCFG_ETHInterfaceSelect>
 8003ee2:	e003      	b.n	8003eec <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003ee4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8003ee8:	f7fd ff1c 	bl	8001d24 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003eec:	4b61      	ldr	r3, [pc, #388]	@ (8004074 <HAL_ETH_Init+0x1e8>)
 8003eee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6812      	ldr	r2, [r2, #0]
 8003efe:	f043 0301 	orr.w	r3, r3, #1
 8003f02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f08:	f7fd ff00 	bl	8001d0c <HAL_GetTick>
 8003f0c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003f0e:	e011      	b.n	8003f34 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003f10:	f7fd fefc 	bl	8001d0c <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003f1e:	d909      	bls.n	8003f34 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2204      	movs	r2, #4
 8003f24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	22e0      	movs	r2, #224	@ 0xe0
 8003f2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e098      	b.n	8004066 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1e4      	bne.n	8003f10 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fe0a 	bl	8004b60 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003f4c:	f002 fcee 	bl	800692c <HAL_RCC_GetHCLKFreq>
 8003f50:	4603      	mov	r3, r0
 8003f52:	4a49      	ldr	r2, [pc, #292]	@ (8004078 <HAL_ETH_Init+0x1ec>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
 8003f58:	0c9a      	lsrs	r2, r3, #18
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3a01      	subs	r2, #1
 8003f60:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fffb 	bl	8004f60 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f72:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003f76:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6812      	ldr	r2, [r2, #0]
 8003f7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f82:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f86:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d009      	beq.n	8003faa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	22e0      	movs	r2, #224	@ 0xe0
 8003fa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e05d      	b.n	8004066 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fb2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003fb6:	4b31      	ldr	r3, [pc, #196]	@ (800407c <HAL_ETH_Init+0x1f0>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6952      	ldr	r2, [r2, #20]
 8003fbe:	0051      	lsls	r1, r2, #1
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fca:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f001 f863 	bl	800509a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f001 f8a9 	bl	800512c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	3305      	adds	r3, #5
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	021a      	lsls	r2, r3, #8
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	4619      	mov	r1, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	3303      	adds	r3, #3
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	061a      	lsls	r2, r3, #24
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	3302      	adds	r3, #2
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	041b      	lsls	r3, r3, #16
 800400c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	3301      	adds	r3, #1
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004018:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004026:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004028:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4b11      	ldr	r3, [pc, #68]	@ (8004080 <HAL_ETH_Init+0x1f4>)
 800403a:	430b      	orrs	r3, r1
 800403c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4b0d      	ldr	r3, [pc, #52]	@ (8004084 <HAL_ETH_Init+0x1f8>)
 800404e:	430b      	orrs	r3, r1
 8004050:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2210      	movs	r2, #16
 8004060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	58024400 	.word	0x58024400
 8004074:	58000400 	.word	0x58000400
 8004078:	431bde83 	.word	0x431bde83
 800407c:	ffff8001 	.word	0xffff8001
 8004080:	0c020060 	.word	0x0c020060
 8004084:	0c20c000 	.word	0x0c20c000

08004088 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004096:	2b10      	cmp	r3, #16
 8004098:	d165      	bne.n	8004166 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2223      	movs	r2, #35	@ 0x23
 800409e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2204      	movs	r2, #4
 80040ac:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f9e4 	bl	800447c <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040bc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6812      	ldr	r2, [r2, #0]
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040cc:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040e8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040f4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8004100:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004104:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0201 	orr.w	r2, r2, #1
 8004118:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f042 0202 	orr.w	r2, r2, #2
 800412a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0201 	orr.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004144:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8004150:	430b      	orrs	r3, r1
 8004152:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004156:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2223      	movs	r2, #35	@ 0x23
 800415e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	e000      	b.n	8004168 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
  }
}
 8004168:	4618      	mov	r0, r3
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800417e:	2b23      	cmp	r3, #35	@ 0x23
 8004180:	d165      	bne.n	800424e <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2223      	movs	r2, #35	@ 0x23
 8004186:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004192:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	4b30      	ldr	r3, [pc, #192]	@ (800425c <HAL_ETH_Stop_IT+0xec>)
 800419c:	400b      	ands	r3, r1
 800419e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041a2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041ae:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	f023 0301 	bic.w	r3, r3, #1
 80041ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041be:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	f023 0301 	bic.w	r3, r3, #1
 80041d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041da:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0201 	bic.w	r2, r2, #1
 80041ec:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0201 	orr.w	r2, r2, #1
 80041fe:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0202 	bic.w	r2, r2, #2
 8004210:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	e00e      	b.n	8004236 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	3212      	adds	r2, #18
 800421e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004222:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3301      	adds	r3, #1
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b03      	cmp	r3, #3
 800423a:	d9ed      	bls.n	8004218 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2210      	movs	r2, #16
 8004246:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	e000      	b.n	8004250 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
  }
}
 8004250:	4618      	mov	r0, r3
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	ffff2f3e 	.word	0xffff2f3e

08004260 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d109      	bne.n	8004284 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004276:	f043 0201 	orr.w	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e03a      	b.n	80042fa <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800428a:	2b23      	cmp	r3, #35	@ 0x23
 800428c:	d134      	bne.n	80042f8 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004296:	2201      	movs	r2, #1
 8004298:	6839      	ldr	r1, [r7, #0]
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 ffa4 	bl	80051e8 <ETH_Prepare_Tx_Descriptors>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ac:	f043 0202 	orr.w	r2, r3, #2
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e01f      	b.n	80042fa <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80042ba:	f3bf 8f4f 	dsb	sy
}
 80042be:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d904      	bls.n	80042dc <HAL_ETH_Transmit_IT+0x7c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d6:	1f1a      	subs	r2, r3, #4
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3106      	adds	r1, #6
 80042e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80042ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80042f0:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 80042f4:	2300      	movs	r3, #0
 80042f6:	e000      	b.n	80042fa <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
  }
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b088      	sub	sp, #32
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d109      	bne.n	800432e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004320:	f043 0201 	orr.w	r2, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e0a2      	b.n	8004474 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004334:	2b23      	cmp	r3, #35	@ 0x23
 8004336:	d001      	beq.n	800433c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e09b      	b.n	8004474 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004340:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69fa      	ldr	r2, [r7, #28]
 8004346:	3212      	adds	r2, #18
 8004348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800434c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004352:	f1c3 0304 	rsb	r3, r3, #4
 8004356:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004358:	e064      	b.n	8004424 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d007      	beq.n	8004376 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d103      	bne.n	800438a <HAL_ETH_ReadData+0x88>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d03a      	beq.n	8004400 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d005      	beq.n	80043ca <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80043c6:	2301      	movs	r3, #1
 80043c8:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80043da:	461a      	mov	r2, r3
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	b29b      	uxth	r3, r3
 80043e0:	f007 ff5e 	bl	800c2a0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	441a      	add	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2200      	movs	r2, #0
 80043fe:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	3301      	adds	r3, #1
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	2b03      	cmp	r3, #3
 800440a:	d902      	bls.n	8004412 <HAL_ETH_ReadData+0x110>
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	3b04      	subs	r3, #4
 8004410:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	3212      	adds	r2, #18
 8004418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800441c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	3301      	adds	r3, #1
 8004422:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8004428:	2b00      	cmp	r3, #0
 800442a:	db06      	blt.n	800443a <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	429a      	cmp	r2, r3
 8004432:	d202      	bcs.n	800443a <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8004434:	7cfb      	ldrb	r3, [r7, #19]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d08f      	beq.n	800435a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	441a      	add	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f814 	bl	800447c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	69fa      	ldr	r2, [r7, #28]
 8004458:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800445a:	7cfb      	ldrb	r3, [r7, #19]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d108      	bne.n	8004472 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	e000      	b.n	8004474 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
}
 8004474:	4618      	mov	r0, r3
 8004476:	3720      	adds	r7, #32
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004484:	2300      	movs	r3, #0
 8004486:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004488:	2301      	movs	r3, #1
 800448a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004490:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69fa      	ldr	r2, [r7, #28]
 8004496:	3212      	adds	r2, #18
 8004498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800449c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044a2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80044a4:	e038      	b.n	8004518 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d112      	bne.n	80044d4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80044ae:	f107 0308 	add.w	r3, r7, #8
 80044b2:	4618      	mov	r0, r3
 80044b4:	f007 fec4 	bl	800c240 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d102      	bne.n	80044c4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	74fb      	strb	r3, [r7, #19]
 80044c2:	e007      	b.n	80044d4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	461a      	mov	r2, r3
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	461a      	mov	r2, r3
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80044d4:	7cfb      	ldrb	r3, [r7, #19]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d01e      	beq.n	8004518 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d004      	beq.n	80044ec <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80044e8:	60da      	str	r2, [r3, #12]
 80044ea:	e003      	b.n	80044f4 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 80044f2:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	3301      	adds	r3, #1
 80044f8:	61fb      	str	r3, [r7, #28]
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d902      	bls.n	8004506 <ETH_UpdateDescriptor+0x8a>
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	3b04      	subs	r3, #4
 8004504:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	3212      	adds	r2, #18
 800450c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004510:	617b      	str	r3, [r7, #20]
      desccount--;
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	3b01      	subs	r3, #1
 8004516:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <ETH_UpdateDescriptor+0xa8>
 800451e:	7cfb      	ldrb	r3, [r7, #19]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1c0      	bne.n	80044a6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	429a      	cmp	r2, r3
 800452c:	d01b      	beq.n	8004566 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	3301      	adds	r3, #1
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004538:	f3bf 8f5f 	dmb	sy
}
 800453c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6919      	ldr	r1, [r3, #16]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4613      	mov	r3, r2
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	4413      	add	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	18ca      	adds	r2, r1, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004556:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69fa      	ldr	r2, [r7, #28]
 800455e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004566:	bf00      	nop
 8004568:	3720      	adds	r7, #32
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b086      	sub	sp, #24
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3318      	adds	r3, #24
 800457a:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004580:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004586:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004588:	2301      	movs	r3, #1
 800458a:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800458c:	e047      	b.n	800461e <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800458e:	2301      	movs	r3, #1
 8004590:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	3b01      	subs	r3, #1
 8004596:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	3304      	adds	r3, #4
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10a      	bne.n	80045be <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	3301      	adds	r3, #1
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d902      	bls.n	80045ba <HAL_ETH_ReleaseTxPacket+0x4c>
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	3b04      	subs	r3, #4
 80045b8:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80045be:	7bbb      	ldrb	r3, [r7, #14]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d02c      	beq.n	800461e <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68d9      	ldr	r1, [r3, #12]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4613      	mov	r3, r2
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	4413      	add	r3, r2
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	440b      	add	r3, r1
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	db1f      	blt.n	800461a <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	3304      	adds	r3, #4
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f007 fec2 	bl	800c370 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	3304      	adds	r3, #4
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	2200      	movs	r2, #0
 80045f8:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	3301      	adds	r3, #1
 80045fe:	613b      	str	r3, [r7, #16]
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2b03      	cmp	r3, #3
 8004604:	d902      	bls.n	800460c <HAL_ETH_ReleaseTxPacket+0x9e>
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	3b04      	subs	r3, #4
 800460a:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004618:	e001      	b.n	800461e <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <HAL_ETH_ReleaseTxPacket+0xbc>
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1b1      	bne.n	800458e <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e03e      	b.n	80046d4 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800465e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	055b      	lsls	r3, r3, #21
 800466a:	4313      	orrs	r3, r2
 800466c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	041b      	lsls	r3, r3, #16
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f043 030c 	orr.w	r3, r3, #12
 8004682:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8004696:	f7fd fb39 	bl	8001d0c <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800469c:	e009      	b.n	80046b2 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800469e:	f7fd fb35 	bl	8001d0c <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046ac:	d901      	bls.n	80046b2 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e010      	b.n	80046d4 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1ed      	bne.n	800469e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	461a      	mov	r2, r3
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e03c      	b.n	8004778 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004706:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	055b      	lsls	r3, r3, #21
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	041b      	lsls	r3, r3, #16
 8004720:	4313      	orrs	r3, r2
 8004722:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f023 030c 	bic.w	r3, r3, #12
 800472a:	f043 0304 	orr.w	r3, r3, #4
 800472e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	b29a      	uxth	r2, r3
 800473c:	4b10      	ldr	r3, [pc, #64]	@ (8004780 <HAL_ETH_WritePHYRegister+0xa4>)
 800473e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8004742:	4a0f      	ldr	r2, [pc, #60]	@ (8004780 <HAL_ETH_WritePHYRegister+0xa4>)
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800474a:	f7fd fadf 	bl	8001d0c <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004750:	e009      	b.n	8004766 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004752:	f7fd fadb 	bl	8001d0c <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004760:	d901      	bls.n	8004766 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e008      	b.n	8004778 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1ed      	bne.n	8004752 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40028000 	.word	0x40028000

08004784 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e1c3      	b.n	8004b20 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 020c 	and.w	r2, r3, #12
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0310 	and.w	r3, r3, #16
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf14      	ite	ne
 80047b4:	2301      	movne	r3, #1
 80047b6:	2300      	moveq	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	461a      	mov	r2, r3
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047da:	2b00      	cmp	r3, #0
 80047dc:	bf0c      	ite	eq
 80047de:	2301      	moveq	r3, #1
 80047e0:	2300      	movne	r3, #0
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	461a      	mov	r2, r3
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	bf14      	ite	ne
 80047fa:	2301      	movne	r3, #1
 80047fc:	2300      	moveq	r3, #0
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004810:	2b00      	cmp	r3, #0
 8004812:	bf0c      	ite	eq
 8004814:	2301      	moveq	r3, #1
 8004816:	2300      	movne	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	461a      	mov	r2, r3
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004826:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800482a:	2b00      	cmp	r3, #0
 800482c:	bf14      	ite	ne
 800482e:	2301      	movne	r3, #1
 8004830:	2300      	moveq	r3, #0
 8004832:	b2db      	uxtb	r3, r3
 8004834:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004844:	2b00      	cmp	r3, #0
 8004846:	bf14      	ite	ne
 8004848:	2301      	movne	r3, #1
 800484a:	2300      	moveq	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	461a      	mov	r2, r3
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800487a:	2b00      	cmp	r3, #0
 800487c:	bf14      	ite	ne
 800487e:	2301      	movne	r3, #1
 8004880:	2300      	moveq	r3, #0
 8004882:	b2db      	uxtb	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004894:	2b00      	cmp	r3, #0
 8004896:	bf0c      	ite	eq
 8004898:	2301      	moveq	r3, #1
 800489a:	2300      	movne	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	461a      	mov	r2, r3
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	bf0c      	ite	eq
 80048b2:	2301      	moveq	r3, #1
 80048b4:	2300      	movne	r3, #0
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	461a      	mov	r2, r3
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	bf14      	ite	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	2300      	moveq	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	461a      	mov	r2, r3
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	bf14      	ite	ne
 80048e6:	2301      	movne	r3, #1
 80048e8:	2300      	moveq	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	bf14      	ite	ne
 8004900:	2301      	movne	r3, #1
 8004902:	2300      	moveq	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	461a      	mov	r2, r3
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004912:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004916:	2b00      	cmp	r3, #0
 8004918:	bf14      	ite	ne
 800491a:	2301      	movne	r3, #1
 800491c:	2300      	moveq	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	bf14      	ite	ne
 8004942:	2301      	movne	r3, #1
 8004944:	2300      	moveq	r3, #0
 8004946:	b2db      	uxtb	r3, r3
 8004948:	461a      	mov	r2, r3
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004974:	2b00      	cmp	r3, #0
 8004976:	bf0c      	ite	eq
 8004978:	2301      	moveq	r3, #1
 800497a:	2300      	movne	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	461a      	mov	r2, r3
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004990:	2b00      	cmp	r3, #0
 8004992:	bf14      	ite	ne
 8004994:	2301      	movne	r3, #1
 8004996:	2300      	moveq	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	461a      	mov	r2, r3
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80049a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	bf14      	ite	ne
 80049b0:	2301      	movne	r3, #1
 80049b2:	2300      	moveq	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	bf14      	ite	ne
 80049cc:	2301      	movne	r3, #1
 80049ce:	2300      	moveq	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	0e5b      	lsrs	r3, r3, #25
 80049e2:	f003 021f 	and.w	r2, r3, #31
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	bf14      	ite	ne
 80049f8:	2301      	movne	r3, #1
 80049fa:	2300      	moveq	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	461a      	mov	r2, r3
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 020f 	and.w	r2, r3, #15
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	bf14      	ite	ne
 8004a22:	2301      	movne	r3, #1
 8004a24:	2300      	moveq	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	bf0c      	ite	eq
 8004a3e:	2301      	moveq	r3, #1
 8004a40:	2300      	movne	r3, #0
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	461a      	mov	r2, r3
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a52:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a60:	0c1b      	lsrs	r3, r3, #16
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	bf14      	ite	ne
 8004a78:	2301      	movne	r3, #1
 8004a7a:	2300      	moveq	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	461a      	mov	r2, r3
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a8e:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	bf14      	ite	ne
 8004a96:	2301      	movne	r3, #1
 8004a98:	2300      	moveq	r3, #0
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8004aac:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004abc:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	bf14      	ite	ne
 8004ad4:	2301      	movne	r3, #1
 8004ad6:	2300      	moveq	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004aea:	f003 0310 	and.w	r3, r3, #16
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	bf14      	ite	ne
 8004af2:	2301      	movne	r3, #1
 8004af4:	2300      	moveq	r3, #0
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	461a      	mov	r2, r3
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	bf0c      	ite	eq
 8004b10:	2301      	moveq	r3, #1
 8004b12:	2300      	movne	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e00b      	b.n	8004b58 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b46:	2b10      	cmp	r3, #16
 8004b48:	d105      	bne.n	8004b56 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004b4a:	6839      	ldr	r1, [r7, #0]
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f865 	bl	8004c1c <ETH_SetMACConfig>

    return HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	e000      	b.n	8004b58 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
  }
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004b70:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b78:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004b7a:	f001 fed7 	bl	800692c <HAL_RCC_GetHCLKFreq>
 8004b7e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4a1a      	ldr	r2, [pc, #104]	@ (8004bec <HAL_ETH_SetMDIOClockRange+0x8c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d804      	bhi.n	8004b92 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	e022      	b.n	8004bd8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	4a16      	ldr	r2, [pc, #88]	@ (8004bf0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d204      	bcs.n	8004ba4 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	e019      	b.n	8004bd8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	4a13      	ldr	r2, [pc, #76]	@ (8004bf4 <HAL_ETH_SetMDIOClockRange+0x94>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d915      	bls.n	8004bd8 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4a12      	ldr	r2, [pc, #72]	@ (8004bf8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d804      	bhi.n	8004bbe <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	e00c      	b.n	8004bd8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	4a0e      	ldr	r2, [pc, #56]	@ (8004bfc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d804      	bhi.n	8004bd0 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	e003      	b.n	8004bd8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8004bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8004be2:	bf00      	nop
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	02160ebf 	.word	0x02160ebf
 8004bf0:	03938700 	.word	0x03938700
 8004bf4:	05f5e0ff 	.word	0x05f5e0ff
 8004bf8:	08f0d17f 	.word	0x08f0d17f
 8004bfc:	0ee6b27f 	.word	0x0ee6b27f

08004c00 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
	...

08004c1c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004c2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	791b      	ldrb	r3, [r3, #4]
 8004c34:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004c36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	7b1b      	ldrb	r3, [r3, #12]
 8004c3c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004c3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	7b5b      	ldrb	r3, [r3, #13]
 8004c44:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004c46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	7b9b      	ldrb	r3, [r3, #14]
 8004c4c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004c4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	7bdb      	ldrb	r3, [r3, #15]
 8004c54:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004c56:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	7c12      	ldrb	r2, [r2, #16]
 8004c5c:	2a00      	cmp	r2, #0
 8004c5e:	d102      	bne.n	8004c66 <ETH_SetMACConfig+0x4a>
 8004c60:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004c64:	e000      	b.n	8004c68 <ETH_SetMACConfig+0x4c>
 8004c66:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004c68:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	7c52      	ldrb	r2, [r2, #17]
 8004c6e:	2a00      	cmp	r2, #0
 8004c70:	d102      	bne.n	8004c78 <ETH_SetMACConfig+0x5c>
 8004c72:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004c76:	e000      	b.n	8004c7a <ETH_SetMACConfig+0x5e>
 8004c78:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004c7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	7c9b      	ldrb	r3, [r3, #18]
 8004c80:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004c82:	431a      	orrs	r2, r3
               macconf->Speed |
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004c88:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004c8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	7f1b      	ldrb	r3, [r3, #28]
 8004c94:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004c96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	7f5b      	ldrb	r3, [r3, #29]
 8004c9c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004c9e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	7f92      	ldrb	r2, [r2, #30]
 8004ca4:	2a00      	cmp	r2, #0
 8004ca6:	d102      	bne.n	8004cae <ETH_SetMACConfig+0x92>
 8004ca8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004cac:	e000      	b.n	8004cb0 <ETH_SetMACConfig+0x94>
 8004cae:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004cb0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	7fdb      	ldrb	r3, [r3, #31]
 8004cb6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004cb8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004cc0:	2a00      	cmp	r2, #0
 8004cc2:	d102      	bne.n	8004cca <ETH_SetMACConfig+0xae>
 8004cc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cc8:	e000      	b.n	8004ccc <ETH_SetMACConfig+0xb0>
 8004cca:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004ccc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004cd2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cda:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004cdc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	4b56      	ldr	r3, [pc, #344]	@ (8004e48 <ETH_SetMACConfig+0x22c>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	68f9      	ldr	r1, [r7, #12]
 8004cf6:	430b      	orrs	r3, r1
 8004cf8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfe:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d06:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004d08:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004d10:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004d12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004d1a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004d1c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8004d24:	2a00      	cmp	r2, #0
 8004d26:	d102      	bne.n	8004d2e <ETH_SetMACConfig+0x112>
 8004d28:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004d2c:	e000      	b.n	8004d30 <ETH_SetMACConfig+0x114>
 8004d2e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004d30:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	4b42      	ldr	r3, [pc, #264]	@ (8004e4c <ETH_SetMACConfig+0x230>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6812      	ldr	r2, [r2, #0]
 8004d48:	68f9      	ldr	r1, [r7, #12]
 8004d4a:	430b      	orrs	r3, r1
 8004d4c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d54:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	4b3a      	ldr	r3, [pc, #232]	@ (8004e50 <ETH_SetMACConfig+0x234>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6812      	ldr	r2, [r2, #0]
 8004d6c:	68f9      	ldr	r1, [r7, #12]
 8004d6e:	430b      	orrs	r3, r1
 8004d70:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004d78:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004d7e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004d86:	2a00      	cmp	r2, #0
 8004d88:	d101      	bne.n	8004d8e <ETH_SetMACConfig+0x172>
 8004d8a:	2280      	movs	r2, #128	@ 0x80
 8004d8c:	e000      	b.n	8004d90 <ETH_SetMACConfig+0x174>
 8004d8e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004d90:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d96:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004da2:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8004da6:	4013      	ands	r3, r2
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6812      	ldr	r2, [r2, #0]
 8004dac:	68f9      	ldr	r1, [r7, #12]
 8004dae:	430b      	orrs	r3, r1
 8004db0:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8004db8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004dc0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dce:	f023 0103 	bic.w	r1, r3, #3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8004de6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8004e02:	2a00      	cmp	r2, #0
 8004e04:	d101      	bne.n	8004e0a <ETH_SetMACConfig+0x1ee>
 8004e06:	2240      	movs	r2, #64	@ 0x40
 8004e08:	e000      	b.n	8004e0c <ETH_SetMACConfig+0x1f0>
 8004e0a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004e0c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8004e14:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004e16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8004e1e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004e2c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8004e3c:	bf00      	nop
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	00048083 	.word	0x00048083
 8004e4c:	c0f88000 	.word	0xc0f88000
 8004e50:	fffffef0 	.word	0xfffffef0

08004e54 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	4b38      	ldr	r3, [pc, #224]	@ (8004f4c <ETH_SetDMAConfig+0xf8>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	6811      	ldr	r1, [r2, #0]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6812      	ldr	r2, [r2, #0]
 8004e74:	430b      	orrs	r3, r1
 8004e76:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004e7a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	791b      	ldrb	r3, [r3, #4]
 8004e80:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004e86:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	7b1b      	ldrb	r3, [r3, #12]
 8004e8c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	4b2c      	ldr	r3, [pc, #176]	@ (8004f50 <ETH_SetDMAConfig+0xfc>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6812      	ldr	r2, [r2, #0]
 8004ea4:	68f9      	ldr	r1, [r7, #12]
 8004ea6:	430b      	orrs	r3, r1
 8004ea8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004eac:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	7b5b      	ldrb	r3, [r3, #13]
 8004eb2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ec4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8004ec8:	4b22      	ldr	r3, [pc, #136]	@ (8004f54 <ETH_SetDMAConfig+0x100>)
 8004eca:	4013      	ands	r3, r2
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6812      	ldr	r2, [r2, #0]
 8004ed0:	68f9      	ldr	r1, [r7, #12]
 8004ed2:	430b      	orrs	r3, r1
 8004ed4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ed8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	7d1b      	ldrb	r3, [r3, #20]
 8004ee4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004ee6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	7f5b      	ldrb	r3, [r3, #29]
 8004eec:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004efa:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8004efe:	4b16      	ldr	r3, [pc, #88]	@ (8004f58 <ETH_SetDMAConfig+0x104>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6812      	ldr	r2, [r2, #0]
 8004f06:	68f9      	ldr	r1, [r7, #12]
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f0e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	7f1b      	ldrb	r3, [r3, #28]
 8004f16:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f28:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f5c <ETH_SetDMAConfig+0x108>)
 8004f2e:	4013      	ands	r3, r2
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	68f9      	ldr	r1, [r7, #12]
 8004f36:	430b      	orrs	r3, r1
 8004f38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f3c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8004f40:	bf00      	nop
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	ffff87fd 	.word	0xffff87fd
 8004f50:	ffff2ffe 	.word	0xffff2ffe
 8004f54:	fffec000 	.word	0xfffec000
 8004f58:	ffc0efef 	.word	0xffc0efef
 8004f5c:	7fc0ffff 	.word	0x7fc0ffff

08004f60 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b0a4      	sub	sp, #144	@ 0x90
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004f72:	2300      	movs	r3, #0
 8004f74:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004f84:	2301      	movs	r3, #1
 8004f86:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004f90:	2300      	movs	r3, #0
 8004f92:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004f9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004fa0:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004fac:	2300      	movs	r3, #0
 8004fae:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8004fb8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8004fbc:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004fec:	2300      	movs	r3, #0
 8004fee:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004ff8:	2320      	movs	r3, #32
 8004ffa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004ffe:	2301      	movs	r3, #1
 8005000:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005004:	2300      	movs	r3, #0
 8005006:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800500a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800500e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005010:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005014:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005016:	2300      	movs	r3, #0
 8005018:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800501c:	2302      	movs	r3, #2
 800501e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005022:	2300      	movs	r3, #0
 8005024:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005028:	2300      	movs	r3, #0
 800502a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800502e:	2300      	movs	r3, #0
 8005030:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005034:	2301      	movs	r3, #1
 8005036:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800503a:	2300      	movs	r3, #0
 800503c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800503e:	2301      	movs	r3, #1
 8005040:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005044:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005048:	4619      	mov	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7ff fde6 	bl	8004c1c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005050:	2301      	movs	r3, #1
 8005052:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005054:	2301      	movs	r3, #1
 8005056:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005058:	2300      	movs	r3, #0
 800505a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800505c:	2300      	movs	r3, #0
 800505e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005062:	2300      	movs	r3, #0
 8005064:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005066:	2300      	movs	r3, #0
 8005068:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800506a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800506e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005070:	2300      	movs	r3, #0
 8005072:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005074:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005078:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800507a:	2300      	movs	r3, #0
 800507c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005080:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8005084:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005086:	f107 0308 	add.w	r3, r7, #8
 800508a:	4619      	mov	r1, r3
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7ff fee1 	bl	8004e54 <ETH_SetDMAConfig>
}
 8005092:	bf00      	nop
 8005094:	3790      	adds	r7, #144	@ 0x90
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800509a:	b480      	push	{r7}
 800509c:	b085      	sub	sp, #20
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	e01d      	b.n	80050e4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68d9      	ldr	r1, [r3, #12]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4613      	mov	r3, r2
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	4413      	add	r3, r2
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	440b      	add	r3, r1
 80050b8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2200      	movs	r2, #0
 80050c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2200      	movs	r2, #0
 80050ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2200      	movs	r2, #0
 80050d0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80050d2:	68b9      	ldr	r1, [r7, #8]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	3206      	adds	r2, #6
 80050da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	3301      	adds	r3, #1
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d9de      	bls.n	80050a8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050f8:	461a      	mov	r2, r3
 80050fa:	2303      	movs	r3, #3
 80050fc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800510c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68da      	ldr	r2, [r3, #12]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800511c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8005120:	bf00      	nop
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005134:	2300      	movs	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	e023      	b.n	8005182 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6919      	ldr	r1, [r3, #16]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4613      	mov	r3, r2
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	4413      	add	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	440b      	add	r3, r1
 800514a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2200      	movs	r2, #0
 8005156:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2200      	movs	r2, #0
 800515c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2200      	movs	r2, #0
 8005162:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2200      	movs	r2, #0
 8005168:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2200      	movs	r2, #0
 800516e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005170:	68b9      	ldr	r1, [r7, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	3212      	adds	r2, #18
 8005178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3301      	adds	r3, #1
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b03      	cmp	r3, #3
 8005186:	d9d8      	bls.n	800513a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051ae:	461a      	mov	r2, r3
 80051b0:	2303      	movs	r3, #3
 80051b2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691a      	ldr	r2, [r3, #16]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051c2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051d6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80051da:	bf00      	nop
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
	...

080051e8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b091      	sub	sp, #68	@ 0x44
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3318      	adds	r3, #24
 80051f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005206:	2300      	movs	r3, #0
 8005208:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800520e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005212:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800521a:	2300      	movs	r3, #0
 800521c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800521e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005226:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800522a:	d007      	beq.n	800523c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800522c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800522e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005230:	3304      	adds	r3, #4
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800523c:	2302      	movs	r3, #2
 800523e:	e266      	b.n	800570e <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	d044      	beq.n	80052d6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800524c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	4b75      	ldr	r3, [pc, #468]	@ (8005428 <ETH_Prepare_Tx_Descriptors+0x240>)
 8005252:	4013      	ands	r3, r2
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005258:	431a      	orrs	r2, r3
 800525a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800525e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005268:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005278:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d027      	beq.n	80052d6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8005286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	b29a      	uxth	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	041b      	lsls	r3, r3, #16
 8005292:	431a      	orrs	r2, r3
 8005294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005296:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8005298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80052a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a2:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80052a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b0:	431a      	orrs	r2, r3
 80052b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b4:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80052c4:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80052d4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00e      	beq.n	8005300 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80052e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e4:	689a      	ldr	r2, [r3, #8]
 80052e6:	4b51      	ldr	r3, [pc, #324]	@ (800542c <ETH_Prepare_Tx_Descriptors+0x244>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	6992      	ldr	r2, [r2, #24]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f2:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80052f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80052fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fe:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	d105      	bne.n	8005318 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0310 	and.w	r3, r3, #16
 8005314:	2b00      	cmp	r3, #0
 8005316:	d036      	beq.n	8005386 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8005318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005322:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005324:	f3bf 8f5f 	dmb	sy
}
 8005328:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800532a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005334:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005338:	3301      	adds	r3, #1
 800533a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800533c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800533e:	2b03      	cmp	r3, #3
 8005340:	d902      	bls.n	8005348 <ETH_Prepare_Tx_Descriptors+0x160>
 8005342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005344:	3b04      	subs	r3, #4
 8005346:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800534c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005350:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8005352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005354:	3301      	adds	r3, #1
 8005356:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005360:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005364:	d10f      	bne.n	8005386 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8005366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005368:	6a3a      	ldr	r2, [r7, #32]
 800536a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800536e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8005370:	f3bf 8f5f 	dmb	sy
}
 8005374:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800537e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005380:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8005382:	2302      	movs	r3, #2
 8005384:	e1c3      	b.n	800570e <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8005386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005388:	3301      	adds	r3, #1
 800538a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800538c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	461a      	mov	r2, r3
 8005392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005394:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005398:	689a      	ldr	r2, [r3, #8]
 800539a:	4b24      	ldr	r3, [pc, #144]	@ (800542c <ETH_Prepare_Tx_Descriptors+0x244>)
 800539c:	4013      	ands	r3, r2
 800539e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053a0:	6852      	ldr	r2, [r2, #4]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a6:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80053a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d012      	beq.n	80053d6 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80053b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80053b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053be:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80053c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005430 <ETH_Prepare_Tx_Descriptors+0x248>)
 80053c6:	4013      	ands	r3, r2
 80053c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ca:	6852      	ldr	r2, [r2, #4]
 80053cc:	0412      	lsls	r2, r2, #16
 80053ce:	431a      	orrs	r2, r3
 80053d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d2:	609a      	str	r2, [r3, #8]
 80053d4:	e008      	b.n	80053e8 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80053d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d8:	2200      	movs	r2, #0
 80053da:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80053dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	4b13      	ldr	r3, [pc, #76]	@ (8005430 <ETH_Prepare_Tx_Descriptors+0x248>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053e6:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d021      	beq.n	8005438 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80053f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	04db      	lsls	r3, r3, #19
 8005402:	431a      	orrs	r2, r3
 8005404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005406:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	4b09      	ldr	r3, [pc, #36]	@ (8005434 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800540e:	4013      	ands	r3, r2
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	69d2      	ldr	r2, [r2, #28]
 8005414:	431a      	orrs	r2, r3
 8005416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005418:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800541a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005424:	60da      	str	r2, [r3, #12]
 8005426:	e02e      	b.n	8005486 <ETH_Prepare_Tx_Descriptors+0x29e>
 8005428:	ffff0000 	.word	0xffff0000
 800542c:	ffffc000 	.word	0xffffc000
 8005430:	c000ffff 	.word	0xc000ffff
 8005434:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	4b7b      	ldr	r3, [pc, #492]	@ (800562c <ETH_Prepare_Tx_Descriptors+0x444>)
 800543e:	4013      	ands	r3, r2
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	6852      	ldr	r2, [r2, #4]
 8005444:	431a      	orrs	r2, r3
 8005446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005448:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d008      	beq.n	8005468 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	431a      	orrs	r2, r3
 8005464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005466:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8005474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	431a      	orrs	r2, r3
 8005482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005484:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0304 	and.w	r3, r3, #4
 800548e:	2b00      	cmp	r3, #0
 8005490:	d008      	beq.n	80054a4 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8005492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800549e:	431a      	orrs	r2, r3
 80054a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80054a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80054ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ae:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80054b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80054b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ba:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80054bc:	f3bf 8f5f 	dmb	sy
}
 80054c0:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80054c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80054ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054cc:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 80da 	beq.w	8005690 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80054dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	431a      	orrs	r2, r3
 80054ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ec:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80054ee:	e0cf      	b.n	8005690 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80054f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80054f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fa:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80054fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054fe:	3301      	adds	r3, #1
 8005500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005504:	2b03      	cmp	r3, #3
 8005506:	d902      	bls.n	800550e <ETH_Prepare_Tx_Descriptors+0x326>
 8005508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800550a:	3b04      	subs	r3, #4
 800550c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800550e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005510:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005516:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005522:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8005524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800552c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005530:	d007      	beq.n	8005542 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005536:	3304      	adds	r3, #4
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d029      	beq.n	8005596 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005548:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800554a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800554e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005550:	2300      	movs	r3, #0
 8005552:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005554:	e019      	b.n	800558a <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8005556:	f3bf 8f5f 	dmb	sy
}
 800555a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800555c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005566:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800556a:	3301      	adds	r3, #1
 800556c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800556e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005570:	2b03      	cmp	r3, #3
 8005572:	d902      	bls.n	800557a <ETH_Prepare_Tx_Descriptors+0x392>
 8005574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005576:	3b04      	subs	r3, #4
 8005578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800557a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800557e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005582:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8005584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005586:	3301      	adds	r3, #1
 8005588:	63bb      	str	r3, [r7, #56]	@ 0x38
 800558a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800558c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800558e:	429a      	cmp	r2, r3
 8005590:	d3e1      	bcc.n	8005556 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8005592:	2302      	movs	r3, #2
 8005594:	e0bb      	b.n	800570e <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8005596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005598:	3301      	adds	r3, #1
 800559a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800559c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80055a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055aa:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80055ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	4b1f      	ldr	r3, [pc, #124]	@ (8005630 <ETH_Prepare_Tx_Descriptors+0x448>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055b6:	6852      	ldr	r2, [r2, #4]
 80055b8:	431a      	orrs	r2, r3
 80055ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055bc:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80055be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d012      	beq.n	80055ec <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80055c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80055cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	461a      	mov	r2, r3
 80055d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80055d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	4b16      	ldr	r3, [pc, #88]	@ (8005634 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80055dc:	4013      	ands	r3, r2
 80055de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055e0:	6852      	ldr	r2, [r2, #4]
 80055e2:	0412      	lsls	r2, r2, #16
 80055e4:	431a      	orrs	r2, r3
 80055e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e8:	609a      	str	r2, [r3, #8]
 80055ea:	e008      	b.n	80055fe <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80055ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ee:	2200      	movs	r2, #0
 80055f0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80055f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005634 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80055f8:	4013      	ands	r3, r2
 80055fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055fc:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0310 	and.w	r3, r3, #16
 8005606:	2b00      	cmp	r3, #0
 8005608:	d018      	beq.n	800563c <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800560a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	4b0a      	ldr	r3, [pc, #40]	@ (8005638 <ETH_Prepare_Tx_Descriptors+0x450>)
 8005610:	4013      	ands	r3, r2
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	69d2      	ldr	r2, [r2, #28]
 8005616:	431a      	orrs	r2, r3
 8005618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800561c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005626:	60da      	str	r2, [r3, #12]
 8005628:	e020      	b.n	800566c <ETH_Prepare_Tx_Descriptors+0x484>
 800562a:	bf00      	nop
 800562c:	ffff8000 	.word	0xffff8000
 8005630:	ffffc000 	.word	0xffffc000
 8005634:	c000ffff 	.word	0xc000ffff
 8005638:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800563c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	4b36      	ldr	r3, [pc, #216]	@ (800571c <ETH_Prepare_Tx_Descriptors+0x534>)
 8005642:	4013      	ands	r3, r2
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	6852      	ldr	r2, [r2, #4]
 8005648:	431a      	orrs	r2, r3
 800564a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d008      	beq.n	800566c <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800565a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	431a      	orrs	r2, r3
 8005668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800566c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800566e:	3301      	adds	r3, #1
 8005670:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8005672:	f3bf 8f5f 	dmb	sy
}
 8005676:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005682:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800568c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8005690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	f47f af2b 	bne.w	80054f0 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d006      	beq.n	80056ae <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80056a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80056a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056aa:	609a      	str	r2, [r3, #8]
 80056ac:	e005      	b.n	80056ba <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80056ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80056b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b8:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80056ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80056c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c4:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ce:	3304      	adds	r3, #4
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	440b      	add	r3, r1
 80056d4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80056d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056da:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056dc:	f3ef 8310 	mrs	r3, PRIMASK
 80056e0:	613b      	str	r3, [r7, #16]
  return(result);
 80056e2:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80056e4:	61fb      	str	r3, [r7, #28]
 80056e6:	2301      	movs	r3, #1
 80056e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f383 8810 	msr	PRIMASK, r3
}
 80056f0:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f8:	4413      	add	r3, r2
 80056fa:	1c5a      	adds	r2, r3, #1
 80056fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	f383 8810 	msr	PRIMASK, r3
}
 800570a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3744      	adds	r7, #68	@ 0x44
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	ffff8000 	.word	0xffff8000

08005720 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005720:	b480      	push	{r7}
 8005722:	b089      	sub	sp, #36	@ 0x24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800572a:	2300      	movs	r3, #0
 800572c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800572e:	4b86      	ldr	r3, [pc, #536]	@ (8005948 <HAL_GPIO_Init+0x228>)
 8005730:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005732:	e18c      	b.n	8005a4e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	2101      	movs	r1, #1
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	fa01 f303 	lsl.w	r3, r1, r3
 8005740:	4013      	ands	r3, r2
 8005742:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 817e 	beq.w	8005a48 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f003 0303 	and.w	r3, r3, #3
 8005754:	2b01      	cmp	r3, #1
 8005756:	d005      	beq.n	8005764 <HAL_GPIO_Init+0x44>
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f003 0303 	and.w	r3, r3, #3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d130      	bne.n	80057c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	2203      	movs	r2, #3
 8005770:	fa02 f303 	lsl.w	r3, r2, r3
 8005774:	43db      	mvns	r3, r3
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	4013      	ands	r3, r2
 800577a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	4313      	orrs	r3, r2
 800578c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800579a:	2201      	movs	r2, #1
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	fa02 f303 	lsl.w	r3, r2, r3
 80057a2:	43db      	mvns	r3, r3
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	4013      	ands	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	091b      	lsrs	r3, r3, #4
 80057b0:	f003 0201 	and.w	r2, r3, #1
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4313      	orrs	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	2b03      	cmp	r3, #3
 80057d0:	d017      	beq.n	8005802 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	2203      	movs	r2, #3
 80057de:	fa02 f303 	lsl.w	r3, r2, r3
 80057e2:	43db      	mvns	r3, r3
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	4013      	ands	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f003 0303 	and.w	r3, r3, #3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d123      	bne.n	8005856 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	08da      	lsrs	r2, r3, #3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	3208      	adds	r2, #8
 8005816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800581a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	220f      	movs	r2, #15
 8005826:	fa02 f303 	lsl.w	r3, r2, r3
 800582a:	43db      	mvns	r3, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4013      	ands	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	fa02 f303 	lsl.w	r3, r2, r3
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	4313      	orrs	r3, r2
 8005846:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	08da      	lsrs	r2, r3, #3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3208      	adds	r2, #8
 8005850:	69b9      	ldr	r1, [r7, #24]
 8005852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	2203      	movs	r2, #3
 8005862:	fa02 f303 	lsl.w	r3, r2, r3
 8005866:	43db      	mvns	r3, r3
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	4013      	ands	r3, r2
 800586c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f003 0203 	and.w	r2, r3, #3
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	4313      	orrs	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 80d8 	beq.w	8005a48 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005898:	4b2c      	ldr	r3, [pc, #176]	@ (800594c <HAL_GPIO_Init+0x22c>)
 800589a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800589e:	4a2b      	ldr	r2, [pc, #172]	@ (800594c <HAL_GPIO_Init+0x22c>)
 80058a0:	f043 0302 	orr.w	r3, r3, #2
 80058a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80058a8:	4b28      	ldr	r3, [pc, #160]	@ (800594c <HAL_GPIO_Init+0x22c>)
 80058aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058b6:	4a26      	ldr	r2, [pc, #152]	@ (8005950 <HAL_GPIO_Init+0x230>)
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	089b      	lsrs	r3, r3, #2
 80058bc:	3302      	adds	r3, #2
 80058be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	220f      	movs	r2, #15
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	43db      	mvns	r3, r3
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	4013      	ands	r3, r2
 80058d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005954 <HAL_GPIO_Init+0x234>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d04a      	beq.n	8005978 <HAL_GPIO_Init+0x258>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005958 <HAL_GPIO_Init+0x238>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d02b      	beq.n	8005942 <HAL_GPIO_Init+0x222>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a1b      	ldr	r2, [pc, #108]	@ (800595c <HAL_GPIO_Init+0x23c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d025      	beq.n	800593e <HAL_GPIO_Init+0x21e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005960 <HAL_GPIO_Init+0x240>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d01f      	beq.n	800593a <HAL_GPIO_Init+0x21a>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a19      	ldr	r2, [pc, #100]	@ (8005964 <HAL_GPIO_Init+0x244>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d019      	beq.n	8005936 <HAL_GPIO_Init+0x216>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a18      	ldr	r2, [pc, #96]	@ (8005968 <HAL_GPIO_Init+0x248>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d013      	beq.n	8005932 <HAL_GPIO_Init+0x212>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a17      	ldr	r2, [pc, #92]	@ (800596c <HAL_GPIO_Init+0x24c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d00d      	beq.n	800592e <HAL_GPIO_Init+0x20e>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a16      	ldr	r2, [pc, #88]	@ (8005970 <HAL_GPIO_Init+0x250>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d007      	beq.n	800592a <HAL_GPIO_Init+0x20a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a15      	ldr	r2, [pc, #84]	@ (8005974 <HAL_GPIO_Init+0x254>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d101      	bne.n	8005926 <HAL_GPIO_Init+0x206>
 8005922:	2309      	movs	r3, #9
 8005924:	e029      	b.n	800597a <HAL_GPIO_Init+0x25a>
 8005926:	230a      	movs	r3, #10
 8005928:	e027      	b.n	800597a <HAL_GPIO_Init+0x25a>
 800592a:	2307      	movs	r3, #7
 800592c:	e025      	b.n	800597a <HAL_GPIO_Init+0x25a>
 800592e:	2306      	movs	r3, #6
 8005930:	e023      	b.n	800597a <HAL_GPIO_Init+0x25a>
 8005932:	2305      	movs	r3, #5
 8005934:	e021      	b.n	800597a <HAL_GPIO_Init+0x25a>
 8005936:	2304      	movs	r3, #4
 8005938:	e01f      	b.n	800597a <HAL_GPIO_Init+0x25a>
 800593a:	2303      	movs	r3, #3
 800593c:	e01d      	b.n	800597a <HAL_GPIO_Init+0x25a>
 800593e:	2302      	movs	r3, #2
 8005940:	e01b      	b.n	800597a <HAL_GPIO_Init+0x25a>
 8005942:	2301      	movs	r3, #1
 8005944:	e019      	b.n	800597a <HAL_GPIO_Init+0x25a>
 8005946:	bf00      	nop
 8005948:	58000080 	.word	0x58000080
 800594c:	58024400 	.word	0x58024400
 8005950:	58000400 	.word	0x58000400
 8005954:	58020000 	.word	0x58020000
 8005958:	58020400 	.word	0x58020400
 800595c:	58020800 	.word	0x58020800
 8005960:	58020c00 	.word	0x58020c00
 8005964:	58021000 	.word	0x58021000
 8005968:	58021400 	.word	0x58021400
 800596c:	58021800 	.word	0x58021800
 8005970:	58021c00 	.word	0x58021c00
 8005974:	58022400 	.word	0x58022400
 8005978:	2300      	movs	r3, #0
 800597a:	69fa      	ldr	r2, [r7, #28]
 800597c:	f002 0203 	and.w	r2, r2, #3
 8005980:	0092      	lsls	r2, r2, #2
 8005982:	4093      	lsls	r3, r2
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	4313      	orrs	r3, r2
 8005988:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800598a:	4938      	ldr	r1, [pc, #224]	@ (8005a6c <HAL_GPIO_Init+0x34c>)
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	089b      	lsrs	r3, r3, #2
 8005990:	3302      	adds	r3, #2
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	43db      	mvns	r3, r3
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	4013      	ands	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80059be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80059c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	43db      	mvns	r3, r3
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	4013      	ands	r3, r2
 80059d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80059ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	43db      	mvns	r3, r3
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	4013      	ands	r3, r2
 8005a02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	43db      	mvns	r3, r3
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	fa22 f303 	lsr.w	r3, r2, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f47f ae6b 	bne.w	8005734 <HAL_GPIO_Init+0x14>
  }
}
 8005a5e:	bf00      	nop
 8005a60:	bf00      	nop
 8005a62:	3724      	adds	r7, #36	@ 0x24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	58000400 	.word	0x58000400

08005a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	807b      	strh	r3, [r7, #2]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a80:	787b      	ldrb	r3, [r7, #1]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a86:	887a      	ldrh	r2, [r7, #2]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005a8c:	e003      	b.n	8005a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005a8e:	887b      	ldrh	r3, [r7, #2]
 8005a90:	041a      	lsls	r2, r3, #16
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	619a      	str	r2, [r3, #24]
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
	...

08005aa4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005aac:	4b19      	ldr	r3, [pc, #100]	@ (8005b14 <HAL_PWREx_ConfigSupply+0x70>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d00a      	beq.n	8005ace <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ab8:	4b16      	ldr	r3, [pc, #88]	@ (8005b14 <HAL_PWREx_ConfigSupply+0x70>)
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f003 0307 	and.w	r3, r3, #7
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d001      	beq.n	8005aca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e01f      	b.n	8005b0a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	e01d      	b.n	8005b0a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005ace:	4b11      	ldr	r3, [pc, #68]	@ (8005b14 <HAL_PWREx_ConfigSupply+0x70>)
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f023 0207 	bic.w	r2, r3, #7
 8005ad6:	490f      	ldr	r1, [pc, #60]	@ (8005b14 <HAL_PWREx_ConfigSupply+0x70>)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005ade:	f7fc f915 	bl	8001d0c <HAL_GetTick>
 8005ae2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ae4:	e009      	b.n	8005afa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ae6:	f7fc f911 	bl	8001d0c <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005af4:	d901      	bls.n	8005afa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e007      	b.n	8005b0a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005afa:	4b06      	ldr	r3, [pc, #24]	@ (8005b14 <HAL_PWREx_ConfigSupply+0x70>)
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b06:	d1ee      	bne.n	8005ae6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	58024800 	.word	0x58024800

08005b18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b08c      	sub	sp, #48	@ 0x30
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e3c8      	b.n	80062bc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 8087 	beq.w	8005c46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b38:	4b88      	ldr	r3, [pc, #544]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b42:	4b86      	ldr	r3, [pc, #536]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b46:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b4a:	2b10      	cmp	r3, #16
 8005b4c:	d007      	beq.n	8005b5e <HAL_RCC_OscConfig+0x46>
 8005b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b50:	2b18      	cmp	r3, #24
 8005b52:	d110      	bne.n	8005b76 <HAL_RCC_OscConfig+0x5e>
 8005b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d10b      	bne.n	8005b76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b5e:	4b7f      	ldr	r3, [pc, #508]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d06c      	beq.n	8005c44 <HAL_RCC_OscConfig+0x12c>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d168      	bne.n	8005c44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e3a2      	b.n	80062bc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b7e:	d106      	bne.n	8005b8e <HAL_RCC_OscConfig+0x76>
 8005b80:	4b76      	ldr	r3, [pc, #472]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a75      	ldr	r2, [pc, #468]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b8a:	6013      	str	r3, [r2, #0]
 8005b8c:	e02e      	b.n	8005bec <HAL_RCC_OscConfig+0xd4>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10c      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x98>
 8005b96:	4b71      	ldr	r3, [pc, #452]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a70      	ldr	r2, [pc, #448]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005b9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	4b6e      	ldr	r3, [pc, #440]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a6d      	ldr	r2, [pc, #436]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005ba8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	e01d      	b.n	8005bec <HAL_RCC_OscConfig+0xd4>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005bb8:	d10c      	bne.n	8005bd4 <HAL_RCC_OscConfig+0xbc>
 8005bba:	4b68      	ldr	r3, [pc, #416]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a67      	ldr	r2, [pc, #412]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005bc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	4b65      	ldr	r3, [pc, #404]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a64      	ldr	r2, [pc, #400]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	e00b      	b.n	8005bec <HAL_RCC_OscConfig+0xd4>
 8005bd4:	4b61      	ldr	r3, [pc, #388]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a60      	ldr	r2, [pc, #384]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005bda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bde:	6013      	str	r3, [r2, #0]
 8005be0:	4b5e      	ldr	r3, [pc, #376]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a5d      	ldr	r2, [pc, #372]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005be6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d013      	beq.n	8005c1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf4:	f7fc f88a 	bl	8001d0c <HAL_GetTick>
 8005bf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bfa:	e008      	b.n	8005c0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bfc:	f7fc f886 	bl	8001d0c <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b64      	cmp	r3, #100	@ 0x64
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e356      	b.n	80062bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c0e:	4b53      	ldr	r3, [pc, #332]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0f0      	beq.n	8005bfc <HAL_RCC_OscConfig+0xe4>
 8005c1a:	e014      	b.n	8005c46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1c:	f7fc f876 	bl	8001d0c <HAL_GetTick>
 8005c20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c22:	e008      	b.n	8005c36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c24:	f7fc f872 	bl	8001d0c <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b64      	cmp	r3, #100	@ 0x64
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e342      	b.n	80062bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c36:	4b49      	ldr	r3, [pc, #292]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1f0      	bne.n	8005c24 <HAL_RCC_OscConfig+0x10c>
 8005c42:	e000      	b.n	8005c46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 808c 	beq.w	8005d6c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c54:	4b41      	ldr	r3, [pc, #260]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c5c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c62:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d007      	beq.n	8005c7a <HAL_RCC_OscConfig+0x162>
 8005c6a:	6a3b      	ldr	r3, [r7, #32]
 8005c6c:	2b18      	cmp	r3, #24
 8005c6e:	d137      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x1c8>
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	f003 0303 	and.w	r3, r3, #3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d132      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c7a:	4b38      	ldr	r3, [pc, #224]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d005      	beq.n	8005c92 <HAL_RCC_OscConfig+0x17a>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e314      	b.n	80062bc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c92:	4b32      	ldr	r3, [pc, #200]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f023 0219 	bic.w	r2, r3, #25
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	492f      	ldr	r1, [pc, #188]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca4:	f7fc f832 	bl	8001d0c <HAL_GetTick>
 8005ca8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005caa:	e008      	b.n	8005cbe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cac:	f7fc f82e 	bl	8001d0c <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e2fe      	b.n	80062bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cbe:	4b27      	ldr	r3, [pc, #156]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0304 	and.w	r3, r3, #4
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0f0      	beq.n	8005cac <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cca:	4b24      	ldr	r3, [pc, #144]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	061b      	lsls	r3, r3, #24
 8005cd8:	4920      	ldr	r1, [pc, #128]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cde:	e045      	b.n	8005d6c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d026      	beq.n	8005d36 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f023 0219 	bic.w	r2, r3, #25
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	4919      	ldr	r1, [pc, #100]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfa:	f7fc f807 	bl	8001d0c <HAL_GetTick>
 8005cfe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d00:	e008      	b.n	8005d14 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d02:	f7fc f803 	bl	8001d0c <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d901      	bls.n	8005d14 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e2d3      	b.n	80062bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d14:	4b11      	ldr	r3, [pc, #68]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d0f0      	beq.n	8005d02 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d20:	4b0e      	ldr	r3, [pc, #56]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	061b      	lsls	r3, r3, #24
 8005d2e:	490b      	ldr	r1, [pc, #44]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	604b      	str	r3, [r1, #4]
 8005d34:	e01a      	b.n	8005d6c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d36:	4b09      	ldr	r3, [pc, #36]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a08      	ldr	r2, [pc, #32]	@ (8005d5c <HAL_RCC_OscConfig+0x244>)
 8005d3c:	f023 0301 	bic.w	r3, r3, #1
 8005d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d42:	f7fb ffe3 	bl	8001d0c <HAL_GetTick>
 8005d46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d48:	e00a      	b.n	8005d60 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d4a:	f7fb ffdf 	bl	8001d0c <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d903      	bls.n	8005d60 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e2af      	b.n	80062bc <HAL_RCC_OscConfig+0x7a4>
 8005d5c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d60:	4b96      	ldr	r3, [pc, #600]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1ee      	bne.n	8005d4a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0310 	and.w	r3, r3, #16
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d06a      	beq.n	8005e4e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d78:	4b90      	ldr	r3, [pc, #576]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d80:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d82:	4b8e      	ldr	r3, [pc, #568]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d86:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	2b08      	cmp	r3, #8
 8005d8c:	d007      	beq.n	8005d9e <HAL_RCC_OscConfig+0x286>
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	2b18      	cmp	r3, #24
 8005d92:	d11b      	bne.n	8005dcc <HAL_RCC_OscConfig+0x2b4>
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d116      	bne.n	8005dcc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d9e:	4b87      	ldr	r3, [pc, #540]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d005      	beq.n	8005db6 <HAL_RCC_OscConfig+0x29e>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	2b80      	cmp	r3, #128	@ 0x80
 8005db0:	d001      	beq.n	8005db6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e282      	b.n	80062bc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005db6:	4b81      	ldr	r3, [pc, #516]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	061b      	lsls	r3, r3, #24
 8005dc4:	497d      	ldr	r1, [pc, #500]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005dca:	e040      	b.n	8005e4e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d023      	beq.n	8005e1c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005dd4:	4b79      	ldr	r3, [pc, #484]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a78      	ldr	r2, [pc, #480]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de0:	f7fb ff94 	bl	8001d0c <HAL_GetTick>
 8005de4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005de6:	e008      	b.n	8005dfa <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005de8:	f7fb ff90 	bl	8001d0c <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e260      	b.n	80062bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005dfa:	4b70      	ldr	r3, [pc, #448]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0f0      	beq.n	8005de8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e06:	4b6d      	ldr	r3, [pc, #436]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	061b      	lsls	r3, r3, #24
 8005e14:	4969      	ldr	r1, [pc, #420]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	60cb      	str	r3, [r1, #12]
 8005e1a:	e018      	b.n	8005e4e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005e1c:	4b67      	ldr	r3, [pc, #412]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a66      	ldr	r2, [pc, #408]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005e22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e28:	f7fb ff70 	bl	8001d0c <HAL_GetTick>
 8005e2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e2e:	e008      	b.n	8005e42 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e30:	f7fb ff6c 	bl	8001d0c <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e23c      	b.n	80062bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e42:	4b5e      	ldr	r3, [pc, #376]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1f0      	bne.n	8005e30 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0308 	and.w	r3, r3, #8
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d036      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d019      	beq.n	8005e96 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e62:	4b56      	ldr	r3, [pc, #344]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e66:	4a55      	ldr	r2, [pc, #340]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005e68:	f043 0301 	orr.w	r3, r3, #1
 8005e6c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e6e:	f7fb ff4d 	bl	8001d0c <HAL_GetTick>
 8005e72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e74:	e008      	b.n	8005e88 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e76:	f7fb ff49 	bl	8001d0c <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d901      	bls.n	8005e88 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e219      	b.n	80062bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e88:	4b4c      	ldr	r3, [pc, #304]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005e8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0f0      	beq.n	8005e76 <HAL_RCC_OscConfig+0x35e>
 8005e94:	e018      	b.n	8005ec8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e96:	4b49      	ldr	r3, [pc, #292]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e9a:	4a48      	ldr	r2, [pc, #288]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005e9c:	f023 0301 	bic.w	r3, r3, #1
 8005ea0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea2:	f7fb ff33 	bl	8001d0c <HAL_GetTick>
 8005ea6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ea8:	e008      	b.n	8005ebc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eaa:	f7fb ff2f 	bl	8001d0c <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d901      	bls.n	8005ebc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e1ff      	b.n	80062bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ebc:	4b3f      	ldr	r3, [pc, #252]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005ebe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1f0      	bne.n	8005eaa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0320 	and.w	r3, r3, #32
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d036      	beq.n	8005f42 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d019      	beq.n	8005f10 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005edc:	4b37      	ldr	r3, [pc, #220]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a36      	ldr	r2, [pc, #216]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005ee2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ee6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ee8:	f7fb ff10 	bl	8001d0c <HAL_GetTick>
 8005eec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ef0:	f7fb ff0c 	bl	8001d0c <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e1dc      	b.n	80062bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f02:	4b2e      	ldr	r3, [pc, #184]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f0      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x3d8>
 8005f0e:	e018      	b.n	8005f42 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f10:	4b2a      	ldr	r3, [pc, #168]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a29      	ldr	r2, [pc, #164]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005f16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f1c:	f7fb fef6 	bl	8001d0c <HAL_GetTick>
 8005f20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f22:	e008      	b.n	8005f36 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f24:	f7fb fef2 	bl	8001d0c <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e1c2      	b.n	80062bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f36:	4b21      	ldr	r3, [pc, #132]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1f0      	bne.n	8005f24 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 8086 	beq.w	800605c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f50:	4b1b      	ldr	r3, [pc, #108]	@ (8005fc0 <HAL_RCC_OscConfig+0x4a8>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a1a      	ldr	r2, [pc, #104]	@ (8005fc0 <HAL_RCC_OscConfig+0x4a8>)
 8005f56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f5c:	f7fb fed6 	bl	8001d0c <HAL_GetTick>
 8005f60:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f64:	f7fb fed2 	bl	8001d0c <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b64      	cmp	r3, #100	@ 0x64
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e1a2      	b.n	80062bc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f76:	4b12      	ldr	r3, [pc, #72]	@ (8005fc0 <HAL_RCC_OscConfig+0x4a8>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0f0      	beq.n	8005f64 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d106      	bne.n	8005f98 <HAL_RCC_OscConfig+0x480>
 8005f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f8e:	4a0b      	ldr	r2, [pc, #44]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005f90:	f043 0301 	orr.w	r3, r3, #1
 8005f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f96:	e032      	b.n	8005ffe <HAL_RCC_OscConfig+0x4e6>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d111      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x4ac>
 8005fa0:	4b06      	ldr	r3, [pc, #24]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fa4:	4a05      	ldr	r2, [pc, #20]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005fa6:	f023 0301 	bic.w	r3, r3, #1
 8005faa:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fac:	4b03      	ldr	r3, [pc, #12]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb0:	4a02      	ldr	r2, [pc, #8]	@ (8005fbc <HAL_RCC_OscConfig+0x4a4>)
 8005fb2:	f023 0304 	bic.w	r3, r3, #4
 8005fb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fb8:	e021      	b.n	8005ffe <HAL_RCC_OscConfig+0x4e6>
 8005fba:	bf00      	nop
 8005fbc:	58024400 	.word	0x58024400
 8005fc0:	58024800 	.word	0x58024800
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	2b05      	cmp	r3, #5
 8005fca:	d10c      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x4ce>
 8005fcc:	4b83      	ldr	r3, [pc, #524]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8005fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fd0:	4a82      	ldr	r2, [pc, #520]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8005fd2:	f043 0304 	orr.w	r3, r3, #4
 8005fd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fd8:	4b80      	ldr	r3, [pc, #512]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8005fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fdc:	4a7f      	ldr	r2, [pc, #508]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8005fde:	f043 0301 	orr.w	r3, r3, #1
 8005fe2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fe4:	e00b      	b.n	8005ffe <HAL_RCC_OscConfig+0x4e6>
 8005fe6:	4b7d      	ldr	r3, [pc, #500]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8005fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fea:	4a7c      	ldr	r2, [pc, #496]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8005fec:	f023 0301 	bic.w	r3, r3, #1
 8005ff0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ff2:	4b7a      	ldr	r3, [pc, #488]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8005ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff6:	4a79      	ldr	r2, [pc, #484]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8005ff8:	f023 0304 	bic.w	r3, r3, #4
 8005ffc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d015      	beq.n	8006032 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006006:	f7fb fe81 	bl	8001d0c <HAL_GetTick>
 800600a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800600c:	e00a      	b.n	8006024 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800600e:	f7fb fe7d 	bl	8001d0c <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	f241 3288 	movw	r2, #5000	@ 0x1388
 800601c:	4293      	cmp	r3, r2
 800601e:	d901      	bls.n	8006024 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e14b      	b.n	80062bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006024:	4b6d      	ldr	r3, [pc, #436]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8006026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0ee      	beq.n	800600e <HAL_RCC_OscConfig+0x4f6>
 8006030:	e014      	b.n	800605c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006032:	f7fb fe6b 	bl	8001d0c <HAL_GetTick>
 8006036:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006038:	e00a      	b.n	8006050 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800603a:	f7fb fe67 	bl	8001d0c <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006048:	4293      	cmp	r3, r2
 800604a:	d901      	bls.n	8006050 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e135      	b.n	80062bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006050:	4b62      	ldr	r3, [pc, #392]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8006052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1ee      	bne.n	800603a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 812a 	beq.w	80062ba <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006066:	4b5d      	ldr	r3, [pc, #372]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800606e:	2b18      	cmp	r3, #24
 8006070:	f000 80ba 	beq.w	80061e8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006078:	2b02      	cmp	r3, #2
 800607a:	f040 8095 	bne.w	80061a8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800607e:	4b57      	ldr	r3, [pc, #348]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a56      	ldr	r2, [pc, #344]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8006084:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800608a:	f7fb fe3f 	bl	8001d0c <HAL_GetTick>
 800608e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006090:	e008      	b.n	80060a4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006092:	f7fb fe3b 	bl	8001d0c <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d901      	bls.n	80060a4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e10b      	b.n	80062bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060a4:	4b4d      	ldr	r3, [pc, #308]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1f0      	bne.n	8006092 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060b0:	4b4a      	ldr	r3, [pc, #296]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 80060b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060b4:	4b4a      	ldr	r3, [pc, #296]	@ (80061e0 <HAL_RCC_OscConfig+0x6c8>)
 80060b6:	4013      	ands	r3, r2
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80060c0:	0112      	lsls	r2, r2, #4
 80060c2:	430a      	orrs	r2, r1
 80060c4:	4945      	ldr	r1, [pc, #276]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	628b      	str	r3, [r1, #40]	@ 0x28
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ce:	3b01      	subs	r3, #1
 80060d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060d8:	3b01      	subs	r3, #1
 80060da:	025b      	lsls	r3, r3, #9
 80060dc:	b29b      	uxth	r3, r3
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e4:	3b01      	subs	r3, #1
 80060e6:	041b      	lsls	r3, r3, #16
 80060e8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80060ec:	431a      	orrs	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f2:	3b01      	subs	r3, #1
 80060f4:	061b      	lsls	r3, r3, #24
 80060f6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80060fa:	4938      	ldr	r1, [pc, #224]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006100:	4b36      	ldr	r3, [pc, #216]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8006102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006104:	4a35      	ldr	r2, [pc, #212]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8006106:	f023 0301 	bic.w	r3, r3, #1
 800610a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800610c:	4b33      	ldr	r3, [pc, #204]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 800610e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006110:	4b34      	ldr	r3, [pc, #208]	@ (80061e4 <HAL_RCC_OscConfig+0x6cc>)
 8006112:	4013      	ands	r3, r2
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006118:	00d2      	lsls	r2, r2, #3
 800611a:	4930      	ldr	r1, [pc, #192]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 800611c:	4313      	orrs	r3, r2
 800611e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006120:	4b2e      	ldr	r3, [pc, #184]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8006122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006124:	f023 020c 	bic.w	r2, r3, #12
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800612c:	492b      	ldr	r1, [pc, #172]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 800612e:	4313      	orrs	r3, r2
 8006130:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006132:	4b2a      	ldr	r3, [pc, #168]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8006134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006136:	f023 0202 	bic.w	r2, r3, #2
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800613e:	4927      	ldr	r1, [pc, #156]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8006140:	4313      	orrs	r3, r2
 8006142:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006144:	4b25      	ldr	r3, [pc, #148]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8006146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006148:	4a24      	ldr	r2, [pc, #144]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 800614a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800614e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006150:	4b22      	ldr	r3, [pc, #136]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8006152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006154:	4a21      	ldr	r2, [pc, #132]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8006156:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800615a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800615c:	4b1f      	ldr	r3, [pc, #124]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 800615e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006160:	4a1e      	ldr	r2, [pc, #120]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8006162:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006166:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006168:	4b1c      	ldr	r3, [pc, #112]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 800616a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616c:	4a1b      	ldr	r2, [pc, #108]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 800616e:	f043 0301 	orr.w	r3, r3, #1
 8006172:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006174:	4b19      	ldr	r3, [pc, #100]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a18      	ldr	r2, [pc, #96]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 800617a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800617e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006180:	f7fb fdc4 	bl	8001d0c <HAL_GetTick>
 8006184:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006188:	f7fb fdc0 	bl	8001d0c <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e090      	b.n	80062bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800619a:	4b10      	ldr	r3, [pc, #64]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0f0      	beq.n	8006188 <HAL_RCC_OscConfig+0x670>
 80061a6:	e088      	b.n	80062ba <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a8:	4b0c      	ldr	r3, [pc, #48]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a0b      	ldr	r2, [pc, #44]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 80061ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b4:	f7fb fdaa 	bl	8001d0c <HAL_GetTick>
 80061b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061ba:	e008      	b.n	80061ce <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061bc:	f7fb fda6 	bl	8001d0c <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e076      	b.n	80062bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061ce:	4b03      	ldr	r3, [pc, #12]	@ (80061dc <HAL_RCC_OscConfig+0x6c4>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1f0      	bne.n	80061bc <HAL_RCC_OscConfig+0x6a4>
 80061da:	e06e      	b.n	80062ba <HAL_RCC_OscConfig+0x7a2>
 80061dc:	58024400 	.word	0x58024400
 80061e0:	fffffc0c 	.word	0xfffffc0c
 80061e4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80061e8:	4b36      	ldr	r3, [pc, #216]	@ (80062c4 <HAL_RCC_OscConfig+0x7ac>)
 80061ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80061ee:	4b35      	ldr	r3, [pc, #212]	@ (80062c4 <HAL_RCC_OscConfig+0x7ac>)
 80061f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061f2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d031      	beq.n	8006260 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f003 0203 	and.w	r2, r3, #3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006206:	429a      	cmp	r2, r3
 8006208:	d12a      	bne.n	8006260 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	091b      	lsrs	r3, r3, #4
 800620e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006216:	429a      	cmp	r2, r3
 8006218:	d122      	bne.n	8006260 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006224:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006226:	429a      	cmp	r2, r3
 8006228:	d11a      	bne.n	8006260 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	0a5b      	lsrs	r3, r3, #9
 800622e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006236:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006238:	429a      	cmp	r2, r3
 800623a:	d111      	bne.n	8006260 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	0c1b      	lsrs	r3, r3, #16
 8006240:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006248:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800624a:	429a      	cmp	r2, r3
 800624c:	d108      	bne.n	8006260 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	0e1b      	lsrs	r3, r3, #24
 8006252:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800625a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800625c:	429a      	cmp	r2, r3
 800625e:	d001      	beq.n	8006264 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e02b      	b.n	80062bc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006264:	4b17      	ldr	r3, [pc, #92]	@ (80062c4 <HAL_RCC_OscConfig+0x7ac>)
 8006266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006268:	08db      	lsrs	r3, r3, #3
 800626a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800626e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	429a      	cmp	r2, r3
 8006278:	d01f      	beq.n	80062ba <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800627a:	4b12      	ldr	r3, [pc, #72]	@ (80062c4 <HAL_RCC_OscConfig+0x7ac>)
 800627c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627e:	4a11      	ldr	r2, [pc, #68]	@ (80062c4 <HAL_RCC_OscConfig+0x7ac>)
 8006280:	f023 0301 	bic.w	r3, r3, #1
 8006284:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006286:	f7fb fd41 	bl	8001d0c <HAL_GetTick>
 800628a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800628c:	bf00      	nop
 800628e:	f7fb fd3d 	bl	8001d0c <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006296:	4293      	cmp	r3, r2
 8006298:	d0f9      	beq.n	800628e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800629a:	4b0a      	ldr	r3, [pc, #40]	@ (80062c4 <HAL_RCC_OscConfig+0x7ac>)
 800629c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800629e:	4b0a      	ldr	r3, [pc, #40]	@ (80062c8 <HAL_RCC_OscConfig+0x7b0>)
 80062a0:	4013      	ands	r3, r2
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80062a6:	00d2      	lsls	r2, r2, #3
 80062a8:	4906      	ldr	r1, [pc, #24]	@ (80062c4 <HAL_RCC_OscConfig+0x7ac>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80062ae:	4b05      	ldr	r3, [pc, #20]	@ (80062c4 <HAL_RCC_OscConfig+0x7ac>)
 80062b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b2:	4a04      	ldr	r2, [pc, #16]	@ (80062c4 <HAL_RCC_OscConfig+0x7ac>)
 80062b4:	f043 0301 	orr.w	r3, r3, #1
 80062b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3730      	adds	r7, #48	@ 0x30
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	58024400 	.word	0x58024400
 80062c8:	ffff0007 	.word	0xffff0007

080062cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e19c      	b.n	800661a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062e0:	4b8a      	ldr	r3, [pc, #552]	@ (800650c <HAL_RCC_ClockConfig+0x240>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 030f 	and.w	r3, r3, #15
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d910      	bls.n	8006310 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ee:	4b87      	ldr	r3, [pc, #540]	@ (800650c <HAL_RCC_ClockConfig+0x240>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f023 020f 	bic.w	r2, r3, #15
 80062f6:	4985      	ldr	r1, [pc, #532]	@ (800650c <HAL_RCC_ClockConfig+0x240>)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062fe:	4b83      	ldr	r3, [pc, #524]	@ (800650c <HAL_RCC_ClockConfig+0x240>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	429a      	cmp	r2, r3
 800630a:	d001      	beq.n	8006310 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e184      	b.n	800661a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0304 	and.w	r3, r3, #4
 8006318:	2b00      	cmp	r3, #0
 800631a:	d010      	beq.n	800633e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	691a      	ldr	r2, [r3, #16]
 8006320:	4b7b      	ldr	r3, [pc, #492]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006328:	429a      	cmp	r2, r3
 800632a:	d908      	bls.n	800633e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800632c:	4b78      	ldr	r3, [pc, #480]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	4975      	ldr	r1, [pc, #468]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 800633a:	4313      	orrs	r3, r2
 800633c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0308 	and.w	r3, r3, #8
 8006346:	2b00      	cmp	r3, #0
 8006348:	d010      	beq.n	800636c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	695a      	ldr	r2, [r3, #20]
 800634e:	4b70      	ldr	r3, [pc, #448]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006356:	429a      	cmp	r2, r3
 8006358:	d908      	bls.n	800636c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800635a:	4b6d      	ldr	r3, [pc, #436]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	496a      	ldr	r1, [pc, #424]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 8006368:	4313      	orrs	r3, r2
 800636a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0310 	and.w	r3, r3, #16
 8006374:	2b00      	cmp	r3, #0
 8006376:	d010      	beq.n	800639a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	699a      	ldr	r2, [r3, #24]
 800637c:	4b64      	ldr	r3, [pc, #400]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006384:	429a      	cmp	r2, r3
 8006386:	d908      	bls.n	800639a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006388:	4b61      	ldr	r3, [pc, #388]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 800638a:	69db      	ldr	r3, [r3, #28]
 800638c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	495e      	ldr	r1, [pc, #376]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 8006396:	4313      	orrs	r3, r2
 8006398:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0320 	and.w	r3, r3, #32
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d010      	beq.n	80063c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69da      	ldr	r2, [r3, #28]
 80063aa:	4b59      	ldr	r3, [pc, #356]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d908      	bls.n	80063c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80063b6:	4b56      	ldr	r3, [pc, #344]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	4953      	ldr	r1, [pc, #332]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d010      	beq.n	80063f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	4b4d      	ldr	r3, [pc, #308]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	f003 030f 	and.w	r3, r3, #15
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d908      	bls.n	80063f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063e4:	4b4a      	ldr	r3, [pc, #296]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	f023 020f 	bic.w	r2, r3, #15
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	4947      	ldr	r1, [pc, #284]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d055      	beq.n	80064ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006402:	4b43      	ldr	r3, [pc, #268]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	4940      	ldr	r1, [pc, #256]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 8006410:	4313      	orrs	r3, r2
 8006412:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	2b02      	cmp	r3, #2
 800641a:	d107      	bne.n	800642c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800641c:	4b3c      	ldr	r3, [pc, #240]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d121      	bne.n	800646c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e0f6      	b.n	800661a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	2b03      	cmp	r3, #3
 8006432:	d107      	bne.n	8006444 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006434:	4b36      	ldr	r3, [pc, #216]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d115      	bne.n	800646c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e0ea      	b.n	800661a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d107      	bne.n	800645c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800644c:	4b30      	ldr	r3, [pc, #192]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006454:	2b00      	cmp	r3, #0
 8006456:	d109      	bne.n	800646c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e0de      	b.n	800661a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800645c:	4b2c      	ldr	r3, [pc, #176]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e0d6      	b.n	800661a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800646c:	4b28      	ldr	r3, [pc, #160]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	f023 0207 	bic.w	r2, r3, #7
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	4925      	ldr	r1, [pc, #148]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 800647a:	4313      	orrs	r3, r2
 800647c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800647e:	f7fb fc45 	bl	8001d0c <HAL_GetTick>
 8006482:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006484:	e00a      	b.n	800649c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006486:	f7fb fc41 	bl	8001d0c <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006494:	4293      	cmp	r3, r2
 8006496:	d901      	bls.n	800649c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e0be      	b.n	800661a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800649c:	4b1c      	ldr	r3, [pc, #112]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	00db      	lsls	r3, r3, #3
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d1eb      	bne.n	8006486 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d010      	beq.n	80064dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	4b14      	ldr	r3, [pc, #80]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	f003 030f 	and.w	r3, r3, #15
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d208      	bcs.n	80064dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064ca:	4b11      	ldr	r3, [pc, #68]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	f023 020f 	bic.w	r2, r3, #15
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	490e      	ldr	r1, [pc, #56]	@ (8006510 <HAL_RCC_ClockConfig+0x244>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064dc:	4b0b      	ldr	r3, [pc, #44]	@ (800650c <HAL_RCC_ClockConfig+0x240>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 030f 	and.w	r3, r3, #15
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d214      	bcs.n	8006514 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ea:	4b08      	ldr	r3, [pc, #32]	@ (800650c <HAL_RCC_ClockConfig+0x240>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f023 020f 	bic.w	r2, r3, #15
 80064f2:	4906      	ldr	r1, [pc, #24]	@ (800650c <HAL_RCC_ClockConfig+0x240>)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064fa:	4b04      	ldr	r3, [pc, #16]	@ (800650c <HAL_RCC_ClockConfig+0x240>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 030f 	and.w	r3, r3, #15
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d005      	beq.n	8006514 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e086      	b.n	800661a <HAL_RCC_ClockConfig+0x34e>
 800650c:	52002000 	.word	0x52002000
 8006510:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b00      	cmp	r3, #0
 800651e:	d010      	beq.n	8006542 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	691a      	ldr	r2, [r3, #16]
 8006524:	4b3f      	ldr	r3, [pc, #252]	@ (8006624 <HAL_RCC_ClockConfig+0x358>)
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800652c:	429a      	cmp	r2, r3
 800652e:	d208      	bcs.n	8006542 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006530:	4b3c      	ldr	r3, [pc, #240]	@ (8006624 <HAL_RCC_ClockConfig+0x358>)
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	4939      	ldr	r1, [pc, #228]	@ (8006624 <HAL_RCC_ClockConfig+0x358>)
 800653e:	4313      	orrs	r3, r2
 8006540:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0308 	and.w	r3, r3, #8
 800654a:	2b00      	cmp	r3, #0
 800654c:	d010      	beq.n	8006570 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	695a      	ldr	r2, [r3, #20]
 8006552:	4b34      	ldr	r3, [pc, #208]	@ (8006624 <HAL_RCC_ClockConfig+0x358>)
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800655a:	429a      	cmp	r2, r3
 800655c:	d208      	bcs.n	8006570 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800655e:	4b31      	ldr	r3, [pc, #196]	@ (8006624 <HAL_RCC_ClockConfig+0x358>)
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	492e      	ldr	r1, [pc, #184]	@ (8006624 <HAL_RCC_ClockConfig+0x358>)
 800656c:	4313      	orrs	r3, r2
 800656e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0310 	and.w	r3, r3, #16
 8006578:	2b00      	cmp	r3, #0
 800657a:	d010      	beq.n	800659e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	699a      	ldr	r2, [r3, #24]
 8006580:	4b28      	ldr	r3, [pc, #160]	@ (8006624 <HAL_RCC_ClockConfig+0x358>)
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006588:	429a      	cmp	r2, r3
 800658a:	d208      	bcs.n	800659e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800658c:	4b25      	ldr	r3, [pc, #148]	@ (8006624 <HAL_RCC_ClockConfig+0x358>)
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	4922      	ldr	r1, [pc, #136]	@ (8006624 <HAL_RCC_ClockConfig+0x358>)
 800659a:	4313      	orrs	r3, r2
 800659c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d010      	beq.n	80065cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	69da      	ldr	r2, [r3, #28]
 80065ae:	4b1d      	ldr	r3, [pc, #116]	@ (8006624 <HAL_RCC_ClockConfig+0x358>)
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d208      	bcs.n	80065cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80065ba:	4b1a      	ldr	r3, [pc, #104]	@ (8006624 <HAL_RCC_ClockConfig+0x358>)
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	4917      	ldr	r1, [pc, #92]	@ (8006624 <HAL_RCC_ClockConfig+0x358>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80065cc:	f000 f834 	bl	8006638 <HAL_RCC_GetSysClockFreq>
 80065d0:	4602      	mov	r2, r0
 80065d2:	4b14      	ldr	r3, [pc, #80]	@ (8006624 <HAL_RCC_ClockConfig+0x358>)
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	0a1b      	lsrs	r3, r3, #8
 80065d8:	f003 030f 	and.w	r3, r3, #15
 80065dc:	4912      	ldr	r1, [pc, #72]	@ (8006628 <HAL_RCC_ClockConfig+0x35c>)
 80065de:	5ccb      	ldrb	r3, [r1, r3]
 80065e0:	f003 031f 	and.w	r3, r3, #31
 80065e4:	fa22 f303 	lsr.w	r3, r2, r3
 80065e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80065ea:	4b0e      	ldr	r3, [pc, #56]	@ (8006624 <HAL_RCC_ClockConfig+0x358>)
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	f003 030f 	and.w	r3, r3, #15
 80065f2:	4a0d      	ldr	r2, [pc, #52]	@ (8006628 <HAL_RCC_ClockConfig+0x35c>)
 80065f4:	5cd3      	ldrb	r3, [r2, r3]
 80065f6:	f003 031f 	and.w	r3, r3, #31
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006600:	4a0a      	ldr	r2, [pc, #40]	@ (800662c <HAL_RCC_ClockConfig+0x360>)
 8006602:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006604:	4a0a      	ldr	r2, [pc, #40]	@ (8006630 <HAL_RCC_ClockConfig+0x364>)
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800660a:	4b0a      	ldr	r3, [pc, #40]	@ (8006634 <HAL_RCC_ClockConfig+0x368>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f7fb f844 	bl	800169c <HAL_InitTick>
 8006614:	4603      	mov	r3, r0
 8006616:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006618:	7bfb      	ldrb	r3, [r7, #15]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	58024400 	.word	0x58024400
 8006628:	080224ac 	.word	0x080224ac
 800662c:	24000004 	.word	0x24000004
 8006630:	24000000 	.word	0x24000000
 8006634:	24000008 	.word	0x24000008

08006638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006638:	b480      	push	{r7}
 800663a:	b089      	sub	sp, #36	@ 0x24
 800663c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800663e:	4bb3      	ldr	r3, [pc, #716]	@ (800690c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006646:	2b18      	cmp	r3, #24
 8006648:	f200 8155 	bhi.w	80068f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800664c:	a201      	add	r2, pc, #4	@ (adr r2, 8006654 <HAL_RCC_GetSysClockFreq+0x1c>)
 800664e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006652:	bf00      	nop
 8006654:	080066b9 	.word	0x080066b9
 8006658:	080068f7 	.word	0x080068f7
 800665c:	080068f7 	.word	0x080068f7
 8006660:	080068f7 	.word	0x080068f7
 8006664:	080068f7 	.word	0x080068f7
 8006668:	080068f7 	.word	0x080068f7
 800666c:	080068f7 	.word	0x080068f7
 8006670:	080068f7 	.word	0x080068f7
 8006674:	080066df 	.word	0x080066df
 8006678:	080068f7 	.word	0x080068f7
 800667c:	080068f7 	.word	0x080068f7
 8006680:	080068f7 	.word	0x080068f7
 8006684:	080068f7 	.word	0x080068f7
 8006688:	080068f7 	.word	0x080068f7
 800668c:	080068f7 	.word	0x080068f7
 8006690:	080068f7 	.word	0x080068f7
 8006694:	080066e5 	.word	0x080066e5
 8006698:	080068f7 	.word	0x080068f7
 800669c:	080068f7 	.word	0x080068f7
 80066a0:	080068f7 	.word	0x080068f7
 80066a4:	080068f7 	.word	0x080068f7
 80066a8:	080068f7 	.word	0x080068f7
 80066ac:	080068f7 	.word	0x080068f7
 80066b0:	080068f7 	.word	0x080068f7
 80066b4:	080066eb 	.word	0x080066eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066b8:	4b94      	ldr	r3, [pc, #592]	@ (800690c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0320 	and.w	r3, r3, #32
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d009      	beq.n	80066d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066c4:	4b91      	ldr	r3, [pc, #580]	@ (800690c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	08db      	lsrs	r3, r3, #3
 80066ca:	f003 0303 	and.w	r3, r3, #3
 80066ce:	4a90      	ldr	r2, [pc, #576]	@ (8006910 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066d0:	fa22 f303 	lsr.w	r3, r2, r3
 80066d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80066d6:	e111      	b.n	80068fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80066d8:	4b8d      	ldr	r3, [pc, #564]	@ (8006910 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066da:	61bb      	str	r3, [r7, #24]
      break;
 80066dc:	e10e      	b.n	80068fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80066de:	4b8d      	ldr	r3, [pc, #564]	@ (8006914 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80066e0:	61bb      	str	r3, [r7, #24]
      break;
 80066e2:	e10b      	b.n	80068fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80066e4:	4b8c      	ldr	r3, [pc, #560]	@ (8006918 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80066e6:	61bb      	str	r3, [r7, #24]
      break;
 80066e8:	e108      	b.n	80068fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066ea:	4b88      	ldr	r3, [pc, #544]	@ (800690c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ee:	f003 0303 	and.w	r3, r3, #3
 80066f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80066f4:	4b85      	ldr	r3, [pc, #532]	@ (800690c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f8:	091b      	lsrs	r3, r3, #4
 80066fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006700:	4b82      	ldr	r3, [pc, #520]	@ (800690c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800670a:	4b80      	ldr	r3, [pc, #512]	@ (800690c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800670c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800670e:	08db      	lsrs	r3, r3, #3
 8006710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	fb02 f303 	mul.w	r3, r2, r3
 800671a:	ee07 3a90 	vmov	s15, r3
 800671e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006722:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 80e1 	beq.w	80068f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2b02      	cmp	r3, #2
 8006732:	f000 8083 	beq.w	800683c <HAL_RCC_GetSysClockFreq+0x204>
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2b02      	cmp	r3, #2
 800673a:	f200 80a1 	bhi.w	8006880 <HAL_RCC_GetSysClockFreq+0x248>
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <HAL_RCC_GetSysClockFreq+0x114>
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d056      	beq.n	80067f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800674a:	e099      	b.n	8006880 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800674c:	4b6f      	ldr	r3, [pc, #444]	@ (800690c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0320 	and.w	r3, r3, #32
 8006754:	2b00      	cmp	r3, #0
 8006756:	d02d      	beq.n	80067b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006758:	4b6c      	ldr	r3, [pc, #432]	@ (800690c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	08db      	lsrs	r3, r3, #3
 800675e:	f003 0303 	and.w	r3, r3, #3
 8006762:	4a6b      	ldr	r2, [pc, #428]	@ (8006910 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006764:	fa22 f303 	lsr.w	r3, r2, r3
 8006768:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	ee07 3a90 	vmov	s15, r3
 8006770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006782:	4b62      	ldr	r3, [pc, #392]	@ (800690c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800678a:	ee07 3a90 	vmov	s15, r3
 800678e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006792:	ed97 6a02 	vldr	s12, [r7, #8]
 8006796:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800691c <HAL_RCC_GetSysClockFreq+0x2e4>
 800679a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800679e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80067b2:	e087      	b.n	80068c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067be:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006920 <HAL_RCC_GetSysClockFreq+0x2e8>
 80067c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067c6:	4b51      	ldr	r3, [pc, #324]	@ (800690c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ce:	ee07 3a90 	vmov	s15, r3
 80067d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80067da:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800691c <HAL_RCC_GetSysClockFreq+0x2e4>
 80067de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067f6:	e065      	b.n	80068c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	ee07 3a90 	vmov	s15, r3
 80067fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006802:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006924 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800680a:	4b40      	ldr	r3, [pc, #256]	@ (800690c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800680c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800680e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006812:	ee07 3a90 	vmov	s15, r3
 8006816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800681a:	ed97 6a02 	vldr	s12, [r7, #8]
 800681e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800691c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800682a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800682e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006836:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800683a:	e043      	b.n	80068c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	ee07 3a90 	vmov	s15, r3
 8006842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006846:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006928 <HAL_RCC_GetSysClockFreq+0x2f0>
 800684a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800684e:	4b2f      	ldr	r3, [pc, #188]	@ (800690c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006856:	ee07 3a90 	vmov	s15, r3
 800685a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800685e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006862:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800691c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800686a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800686e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800687a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800687e:	e021      	b.n	80068c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	ee07 3a90 	vmov	s15, r3
 8006886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800688a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006924 <HAL_RCC_GetSysClockFreq+0x2ec>
 800688e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006892:	4b1e      	ldr	r3, [pc, #120]	@ (800690c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800689a:	ee07 3a90 	vmov	s15, r3
 800689e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80068a6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800691c <HAL_RCC_GetSysClockFreq+0x2e4>
 80068aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80068c4:	4b11      	ldr	r3, [pc, #68]	@ (800690c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c8:	0a5b      	lsrs	r3, r3, #9
 80068ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068ce:	3301      	adds	r3, #1
 80068d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	ee07 3a90 	vmov	s15, r3
 80068d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80068dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80068e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068e8:	ee17 3a90 	vmov	r3, s15
 80068ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80068ee:	e005      	b.n	80068fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	61bb      	str	r3, [r7, #24]
      break;
 80068f4:	e002      	b.n	80068fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80068f6:	4b07      	ldr	r3, [pc, #28]	@ (8006914 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80068f8:	61bb      	str	r3, [r7, #24]
      break;
 80068fa:	bf00      	nop
  }

  return sysclockfreq;
 80068fc:	69bb      	ldr	r3, [r7, #24]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3724      	adds	r7, #36	@ 0x24
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	58024400 	.word	0x58024400
 8006910:	03d09000 	.word	0x03d09000
 8006914:	003d0900 	.word	0x003d0900
 8006918:	007a1200 	.word	0x007a1200
 800691c:	46000000 	.word	0x46000000
 8006920:	4c742400 	.word	0x4c742400
 8006924:	4a742400 	.word	0x4a742400
 8006928:	4af42400 	.word	0x4af42400

0800692c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006932:	f7ff fe81 	bl	8006638 <HAL_RCC_GetSysClockFreq>
 8006936:	4602      	mov	r2, r0
 8006938:	4b10      	ldr	r3, [pc, #64]	@ (800697c <HAL_RCC_GetHCLKFreq+0x50>)
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	0a1b      	lsrs	r3, r3, #8
 800693e:	f003 030f 	and.w	r3, r3, #15
 8006942:	490f      	ldr	r1, [pc, #60]	@ (8006980 <HAL_RCC_GetHCLKFreq+0x54>)
 8006944:	5ccb      	ldrb	r3, [r1, r3]
 8006946:	f003 031f 	and.w	r3, r3, #31
 800694a:	fa22 f303 	lsr.w	r3, r2, r3
 800694e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006950:	4b0a      	ldr	r3, [pc, #40]	@ (800697c <HAL_RCC_GetHCLKFreq+0x50>)
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	f003 030f 	and.w	r3, r3, #15
 8006958:	4a09      	ldr	r2, [pc, #36]	@ (8006980 <HAL_RCC_GetHCLKFreq+0x54>)
 800695a:	5cd3      	ldrb	r3, [r2, r3]
 800695c:	f003 031f 	and.w	r3, r3, #31
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	fa22 f303 	lsr.w	r3, r2, r3
 8006966:	4a07      	ldr	r2, [pc, #28]	@ (8006984 <HAL_RCC_GetHCLKFreq+0x58>)
 8006968:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800696a:	4a07      	ldr	r2, [pc, #28]	@ (8006988 <HAL_RCC_GetHCLKFreq+0x5c>)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006970:	4b04      	ldr	r3, [pc, #16]	@ (8006984 <HAL_RCC_GetHCLKFreq+0x58>)
 8006972:	681b      	ldr	r3, [r3, #0]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	58024400 	.word	0x58024400
 8006980:	080224ac 	.word	0x080224ac
 8006984:	24000004 	.word	0x24000004
 8006988:	24000000 	.word	0x24000000

0800698c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006990:	f7ff ffcc 	bl	800692c <HAL_RCC_GetHCLKFreq>
 8006994:	4602      	mov	r2, r0
 8006996:	4b06      	ldr	r3, [pc, #24]	@ (80069b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	091b      	lsrs	r3, r3, #4
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	4904      	ldr	r1, [pc, #16]	@ (80069b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80069a2:	5ccb      	ldrb	r3, [r1, r3]
 80069a4:	f003 031f 	and.w	r3, r3, #31
 80069a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	58024400 	.word	0x58024400
 80069b4:	080224ac 	.word	0x080224ac

080069b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80069bc:	f7ff ffb6 	bl	800692c <HAL_RCC_GetHCLKFreq>
 80069c0:	4602      	mov	r2, r0
 80069c2:	4b06      	ldr	r3, [pc, #24]	@ (80069dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	0a1b      	lsrs	r3, r3, #8
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	4904      	ldr	r1, [pc, #16]	@ (80069e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80069ce:	5ccb      	ldrb	r3, [r1, r3]
 80069d0:	f003 031f 	and.w	r3, r3, #31
 80069d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80069d8:	4618      	mov	r0, r3
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	58024400 	.word	0x58024400
 80069e0:	080224ac 	.word	0x080224ac

080069e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	223f      	movs	r2, #63	@ 0x3f
 80069f2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80069f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006a60 <HAL_RCC_GetClockConfig+0x7c>)
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	f003 0207 	and.w	r2, r3, #7
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006a00:	4b17      	ldr	r3, [pc, #92]	@ (8006a60 <HAL_RCC_GetClockConfig+0x7c>)
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006a0c:	4b14      	ldr	r3, [pc, #80]	@ (8006a60 <HAL_RCC_GetClockConfig+0x7c>)
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	f003 020f 	and.w	r2, r3, #15
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006a18:	4b11      	ldr	r3, [pc, #68]	@ (8006a60 <HAL_RCC_GetClockConfig+0x7c>)
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006a24:	4b0e      	ldr	r3, [pc, #56]	@ (8006a60 <HAL_RCC_GetClockConfig+0x7c>)
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006a30:	4b0b      	ldr	r3, [pc, #44]	@ (8006a60 <HAL_RCC_GetClockConfig+0x7c>)
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006a3c:	4b08      	ldr	r3, [pc, #32]	@ (8006a60 <HAL_RCC_GetClockConfig+0x7c>)
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a48:	4b06      	ldr	r3, [pc, #24]	@ (8006a64 <HAL_RCC_GetClockConfig+0x80>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 020f 	and.w	r2, r3, #15
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	601a      	str	r2, [r3, #0]
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	58024400 	.word	0x58024400
 8006a64:	52002000 	.word	0x52002000

08006a68 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a6c:	b0c6      	sub	sp, #280	@ 0x118
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a74:	2300      	movs	r3, #0
 8006a76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a88:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006a8c:	2500      	movs	r5, #0
 8006a8e:	ea54 0305 	orrs.w	r3, r4, r5
 8006a92:	d049      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a9e:	d02f      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006aa0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006aa4:	d828      	bhi.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006aa6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006aaa:	d01a      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006aac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ab0:	d822      	bhi.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006aba:	d007      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006abc:	e01c      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006abe:	4bab      	ldr	r3, [pc, #684]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac2:	4aaa      	ldr	r2, [pc, #680]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006aca:	e01a      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad0:	3308      	adds	r3, #8
 8006ad2:	2102      	movs	r1, #2
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f002 fa49 	bl	8008f6c <RCCEx_PLL2_Config>
 8006ada:	4603      	mov	r3, r0
 8006adc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ae0:	e00f      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ae6:	3328      	adds	r3, #40	@ 0x28
 8006ae8:	2102      	movs	r1, #2
 8006aea:	4618      	mov	r0, r3
 8006aec:	f002 faf0 	bl	80090d0 <RCCEx_PLL3_Config>
 8006af0:	4603      	mov	r3, r0
 8006af2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006af6:	e004      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006afe:	e000      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10a      	bne.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006b0a:	4b98      	ldr	r3, [pc, #608]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b18:	4a94      	ldr	r2, [pc, #592]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b1a:	430b      	orrs	r3, r1
 8006b1c:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b1e:	e003      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b30:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006b34:	f04f 0900 	mov.w	r9, #0
 8006b38:	ea58 0309 	orrs.w	r3, r8, r9
 8006b3c:	d047      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b44:	2b04      	cmp	r3, #4
 8006b46:	d82a      	bhi.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006b48:	a201      	add	r2, pc, #4	@ (adr r2, 8006b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4e:	bf00      	nop
 8006b50:	08006b65 	.word	0x08006b65
 8006b54:	08006b73 	.word	0x08006b73
 8006b58:	08006b89 	.word	0x08006b89
 8006b5c:	08006ba7 	.word	0x08006ba7
 8006b60:	08006ba7 	.word	0x08006ba7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b64:	4b81      	ldr	r3, [pc, #516]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b68:	4a80      	ldr	r2, [pc, #512]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b70:	e01a      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b76:	3308      	adds	r3, #8
 8006b78:	2100      	movs	r1, #0
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f002 f9f6 	bl	8008f6c <RCCEx_PLL2_Config>
 8006b80:	4603      	mov	r3, r0
 8006b82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b86:	e00f      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b8c:	3328      	adds	r3, #40	@ 0x28
 8006b8e:	2100      	movs	r1, #0
 8006b90:	4618      	mov	r0, r3
 8006b92:	f002 fa9d 	bl	80090d0 <RCCEx_PLL3_Config>
 8006b96:	4603      	mov	r3, r0
 8006b98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b9c:	e004      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ba4:	e000      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ba8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10a      	bne.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006bb0:	4b6e      	ldr	r3, [pc, #440]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bb4:	f023 0107 	bic.w	r1, r3, #7
 8006bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bbe:	4a6b      	ldr	r2, [pc, #428]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8006bc4:	e003      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006bda:	f04f 0b00 	mov.w	fp, #0
 8006bde:	ea5a 030b 	orrs.w	r3, sl, fp
 8006be2:	d05b      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006bec:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006bf0:	d03b      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006bf2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006bf6:	d834      	bhi.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006bf8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bfc:	d037      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006bfe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c02:	d82e      	bhi.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006c04:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006c08:	d033      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006c0a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006c0e:	d828      	bhi.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006c10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c14:	d01a      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006c16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c1a:	d822      	bhi.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006c20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c24:	d007      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006c26:	e01c      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c28:	4b50      	ldr	r3, [pc, #320]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2c:	4a4f      	ldr	r2, [pc, #316]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c34:	e01e      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f002 f994 	bl	8008f6c <RCCEx_PLL2_Config>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006c4a:	e013      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c50:	3328      	adds	r3, #40	@ 0x28
 8006c52:	2100      	movs	r1, #0
 8006c54:	4618      	mov	r0, r3
 8006c56:	f002 fa3b 	bl	80090d0 <RCCEx_PLL3_Config>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c60:	e008      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c68:	e004      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006c6a:	bf00      	nop
 8006c6c:	e002      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006c6e:	bf00      	nop
 8006c70:	e000      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006c72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10b      	bne.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006c7c:	4b3b      	ldr	r3, [pc, #236]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c80:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006c8c:	4a37      	ldr	r2, [pc, #220]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c8e:	430b      	orrs	r3, r1
 8006c90:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c92:	e003      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006ca8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006cac:	2300      	movs	r3, #0
 8006cae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006cb2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	d05d      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006cc4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006cc8:	d03b      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006cca:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006cce:	d834      	bhi.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006cd0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cd4:	d037      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006cd6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cda:	d82e      	bhi.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006cdc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ce0:	d033      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006ce2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ce6:	d828      	bhi.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006ce8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cec:	d01a      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006cee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cf2:	d822      	bhi.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006cf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cfc:	d007      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006cfe:	e01c      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d00:	4b1a      	ldr	r3, [pc, #104]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d04:	4a19      	ldr	r2, [pc, #100]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d0c:	e01e      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d12:	3308      	adds	r3, #8
 8006d14:	2100      	movs	r1, #0
 8006d16:	4618      	mov	r0, r3
 8006d18:	f002 f928 	bl	8008f6c <RCCEx_PLL2_Config>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006d22:	e013      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d28:	3328      	adds	r3, #40	@ 0x28
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f002 f9cf 	bl	80090d0 <RCCEx_PLL3_Config>
 8006d32:	4603      	mov	r3, r0
 8006d34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d38:	e008      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d40:	e004      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006d42:	bf00      	nop
 8006d44:	e002      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006d46:	bf00      	nop
 8006d48:	e000      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10d      	bne.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006d54:	4b05      	ldr	r3, [pc, #20]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d58:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006d64:	4a01      	ldr	r2, [pc, #4]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d66:	430b      	orrs	r3, r1
 8006d68:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d6a:	e005      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006d6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d80:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006d84:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d88:	2300      	movs	r3, #0
 8006d8a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006d8e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006d92:	460b      	mov	r3, r1
 8006d94:	4313      	orrs	r3, r2
 8006d96:	d03a      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d9e:	2b30      	cmp	r3, #48	@ 0x30
 8006da0:	d01f      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006da2:	2b30      	cmp	r3, #48	@ 0x30
 8006da4:	d819      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006da6:	2b20      	cmp	r3, #32
 8006da8:	d00c      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006daa:	2b20      	cmp	r3, #32
 8006dac:	d815      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d019      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006db2:	2b10      	cmp	r3, #16
 8006db4:	d111      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006db6:	4baa      	ldr	r3, [pc, #680]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dba:	4aa9      	ldr	r2, [pc, #676]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006dc2:	e011      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc8:	3308      	adds	r3, #8
 8006dca:	2102      	movs	r1, #2
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f002 f8cd 	bl	8008f6c <RCCEx_PLL2_Config>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006dd8:	e006      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006de0:	e002      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006de2:	bf00      	nop
 8006de4:	e000      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006de8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10a      	bne.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006df0:	4b9b      	ldr	r3, [pc, #620]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006df4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dfe:	4a98      	ldr	r2, [pc, #608]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e00:	430b      	orrs	r3, r1
 8006e02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006e04:	e003      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e16:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006e1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e1e:	2300      	movs	r3, #0
 8006e20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006e24:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006e28:	460b      	mov	r3, r1
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	d051      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e38:	d035      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006e3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e3e:	d82e      	bhi.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006e40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e44:	d031      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006e46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e4a:	d828      	bhi.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006e4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e50:	d01a      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e56:	d822      	bhi.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d003      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006e5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e60:	d007      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006e62:	e01c      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e64:	4b7e      	ldr	r3, [pc, #504]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e68:	4a7d      	ldr	r2, [pc, #500]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e70:	e01c      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e76:	3308      	adds	r3, #8
 8006e78:	2100      	movs	r1, #0
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f002 f876 	bl	8008f6c <RCCEx_PLL2_Config>
 8006e80:	4603      	mov	r3, r0
 8006e82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e86:	e011      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8c:	3328      	adds	r3, #40	@ 0x28
 8006e8e:	2100      	movs	r1, #0
 8006e90:	4618      	mov	r0, r3
 8006e92:	f002 f91d 	bl	80090d0 <RCCEx_PLL3_Config>
 8006e96:	4603      	mov	r3, r0
 8006e98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e9c:	e006      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ea4:	e002      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006ea6:	bf00      	nop
 8006ea8:	e000      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10a      	bne.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006eb4:	4b6a      	ldr	r3, [pc, #424]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eb8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ec2:	4a67      	ldr	r2, [pc, #412]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ec4:	430b      	orrs	r3, r1
 8006ec6:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ec8:	e003      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ece:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eda:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006ede:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ee8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006eec:	460b      	mov	r3, r1
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	d053      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006efc:	d033      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006efe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f02:	d82c      	bhi.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006f04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f08:	d02f      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006f0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f0e:	d826      	bhi.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006f10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f14:	d02b      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006f16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f1a:	d820      	bhi.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006f1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f20:	d012      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006f22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f26:	d81a      	bhi.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d022      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f30:	d115      	bne.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f36:	3308      	adds	r3, #8
 8006f38:	2101      	movs	r1, #1
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f002 f816 	bl	8008f6c <RCCEx_PLL2_Config>
 8006f40:	4603      	mov	r3, r0
 8006f42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f46:	e015      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f4c:	3328      	adds	r3, #40	@ 0x28
 8006f4e:	2101      	movs	r1, #1
 8006f50:	4618      	mov	r0, r3
 8006f52:	f002 f8bd 	bl	80090d0 <RCCEx_PLL3_Config>
 8006f56:	4603      	mov	r3, r0
 8006f58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f5c:	e00a      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f64:	e006      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f66:	bf00      	nop
 8006f68:	e004      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f6a:	bf00      	nop
 8006f6c:	e002      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f6e:	bf00      	nop
 8006f70:	e000      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10a      	bne.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006f7c:	4b38      	ldr	r3, [pc, #224]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f80:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f8a:	4a35      	ldr	r2, [pc, #212]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f90:	e003      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f96:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006faa:	2300      	movs	r3, #0
 8006fac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006fb0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	d058      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006fc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fc6:	d033      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fcc:	d82c      	bhi.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fd2:	d02f      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fd8:	d826      	bhi.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006fda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fde:	d02b      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006fe0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fe4:	d820      	bhi.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006fe6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fea:	d012      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006fec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ff0:	d81a      	bhi.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d022      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006ff6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ffa:	d115      	bne.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007000:	3308      	adds	r3, #8
 8007002:	2101      	movs	r1, #1
 8007004:	4618      	mov	r0, r3
 8007006:	f001 ffb1 	bl	8008f6c <RCCEx_PLL2_Config>
 800700a:	4603      	mov	r3, r0
 800700c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007010:	e015      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007016:	3328      	adds	r3, #40	@ 0x28
 8007018:	2101      	movs	r1, #1
 800701a:	4618      	mov	r0, r3
 800701c:	f002 f858 	bl	80090d0 <RCCEx_PLL3_Config>
 8007020:	4603      	mov	r3, r0
 8007022:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007026:	e00a      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800702e:	e006      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007030:	bf00      	nop
 8007032:	e004      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007034:	bf00      	nop
 8007036:	e002      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007038:	bf00      	nop
 800703a:	e000      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800703c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800703e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10e      	bne.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007046:	4b06      	ldr	r3, [pc, #24]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800704a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800704e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007052:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007056:	4a02      	ldr	r2, [pc, #8]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007058:	430b      	orrs	r3, r1
 800705a:	6593      	str	r3, [r2, #88]	@ 0x58
 800705c:	e006      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800705e:	bf00      	nop
 8007060:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007064:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007068:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800706c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007074:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007078:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800707c:	2300      	movs	r3, #0
 800707e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007082:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007086:	460b      	mov	r3, r1
 8007088:	4313      	orrs	r3, r2
 800708a:	d037      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800708c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007090:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007092:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007096:	d00e      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007098:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800709c:	d816      	bhi.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x664>
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d018      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80070a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070a6:	d111      	bne.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070a8:	4bc4      	ldr	r3, [pc, #784]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ac:	4ac3      	ldr	r2, [pc, #780]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80070b4:	e00f      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ba:	3308      	adds	r3, #8
 80070bc:	2101      	movs	r1, #1
 80070be:	4618      	mov	r0, r3
 80070c0:	f001 ff54 	bl	8008f6c <RCCEx_PLL2_Config>
 80070c4:	4603      	mov	r3, r0
 80070c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80070ca:	e004      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80070d2:	e000      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80070d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10a      	bne.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80070de:	4bb7      	ldr	r3, [pc, #732]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80070e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070ec:	4ab3      	ldr	r2, [pc, #716]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070ee:	430b      	orrs	r3, r1
 80070f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80070f2:	e003      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80070fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007104:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007108:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800710c:	2300      	movs	r3, #0
 800710e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007112:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007116:	460b      	mov	r3, r1
 8007118:	4313      	orrs	r3, r2
 800711a:	d039      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800711c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007122:	2b03      	cmp	r3, #3
 8007124:	d81c      	bhi.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007126:	a201      	add	r2, pc, #4	@ (adr r2, 800712c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712c:	08007169 	.word	0x08007169
 8007130:	0800713d 	.word	0x0800713d
 8007134:	0800714b 	.word	0x0800714b
 8007138:	08007169 	.word	0x08007169
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800713c:	4b9f      	ldr	r3, [pc, #636]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800713e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007140:	4a9e      	ldr	r2, [pc, #632]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007142:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007146:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007148:	e00f      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800714a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800714e:	3308      	adds	r3, #8
 8007150:	2102      	movs	r1, #2
 8007152:	4618      	mov	r0, r3
 8007154:	f001 ff0a 	bl	8008f6c <RCCEx_PLL2_Config>
 8007158:	4603      	mov	r3, r0
 800715a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800715e:	e004      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007166:	e000      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800716a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10a      	bne.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007172:	4b92      	ldr	r3, [pc, #584]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007176:	f023 0103 	bic.w	r1, r3, #3
 800717a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800717e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007180:	4a8e      	ldr	r2, [pc, #568]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007182:	430b      	orrs	r3, r1
 8007184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007186:	e003      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007188:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800718c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007198:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800719c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071a0:	2300      	movs	r3, #0
 80071a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80071a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80071aa:	460b      	mov	r3, r1
 80071ac:	4313      	orrs	r3, r2
 80071ae:	f000 8099 	beq.w	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071b2:	4b83      	ldr	r3, [pc, #524]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a82      	ldr	r2, [pc, #520]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80071b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071be:	f7fa fda5 	bl	8001d0c <HAL_GetTick>
 80071c2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071c6:	e00b      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071c8:	f7fa fda0 	bl	8001d0c <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	2b64      	cmp	r3, #100	@ 0x64
 80071d6:	d903      	bls.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071de:	e005      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071e0:	4b77      	ldr	r3, [pc, #476]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d0ed      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80071ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d173      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80071f4:	4b71      	ldr	r3, [pc, #452]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80071f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007200:	4053      	eors	r3, r2
 8007202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007206:	2b00      	cmp	r3, #0
 8007208:	d015      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800720a:	4b6c      	ldr	r3, [pc, #432]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800720c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800720e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007212:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007216:	4b69      	ldr	r3, [pc, #420]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800721a:	4a68      	ldr	r2, [pc, #416]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800721c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007220:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007222:	4b66      	ldr	r3, [pc, #408]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007226:	4a65      	ldr	r2, [pc, #404]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007228:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800722c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800722e:	4a63      	ldr	r2, [pc, #396]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007230:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007234:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800723a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800723e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007242:	d118      	bne.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007244:	f7fa fd62 	bl	8001d0c <HAL_GetTick>
 8007248:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800724c:	e00d      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800724e:	f7fa fd5d 	bl	8001d0c <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007258:	1ad2      	subs	r2, r2, r3
 800725a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800725e:	429a      	cmp	r2, r3
 8007260:	d903      	bls.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007268:	e005      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800726a:	4b54      	ldr	r3, [pc, #336]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800726c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b00      	cmp	r3, #0
 8007274:	d0eb      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007276:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800727a:	2b00      	cmp	r3, #0
 800727c:	d129      	bne.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800727e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007282:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800728a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800728e:	d10e      	bne.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007290:	4b4a      	ldr	r3, [pc, #296]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800729c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80072a0:	091a      	lsrs	r2, r3, #4
 80072a2:	4b48      	ldr	r3, [pc, #288]	@ (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80072a4:	4013      	ands	r3, r2
 80072a6:	4a45      	ldr	r2, [pc, #276]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072a8:	430b      	orrs	r3, r1
 80072aa:	6113      	str	r3, [r2, #16]
 80072ac:	e005      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x852>
 80072ae:	4b43      	ldr	r3, [pc, #268]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	4a42      	ldr	r2, [pc, #264]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80072b8:	6113      	str	r3, [r2, #16]
 80072ba:	4b40      	ldr	r3, [pc, #256]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80072be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80072c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072ca:	4a3c      	ldr	r2, [pc, #240]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072cc:	430b      	orrs	r3, r1
 80072ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80072d0:	e008      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80072da:	e003      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80072e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ec:	f002 0301 	and.w	r3, r2, #1
 80072f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072f4:	2300      	movs	r3, #0
 80072f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80072fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80072fe:	460b      	mov	r3, r1
 8007300:	4313      	orrs	r3, r2
 8007302:	f000 808f 	beq.w	8007424 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800730a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800730c:	2b28      	cmp	r3, #40	@ 0x28
 800730e:	d871      	bhi.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007310:	a201      	add	r2, pc, #4	@ (adr r2, 8007318 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007316:	bf00      	nop
 8007318:	080073fd 	.word	0x080073fd
 800731c:	080073f5 	.word	0x080073f5
 8007320:	080073f5 	.word	0x080073f5
 8007324:	080073f5 	.word	0x080073f5
 8007328:	080073f5 	.word	0x080073f5
 800732c:	080073f5 	.word	0x080073f5
 8007330:	080073f5 	.word	0x080073f5
 8007334:	080073f5 	.word	0x080073f5
 8007338:	080073c9 	.word	0x080073c9
 800733c:	080073f5 	.word	0x080073f5
 8007340:	080073f5 	.word	0x080073f5
 8007344:	080073f5 	.word	0x080073f5
 8007348:	080073f5 	.word	0x080073f5
 800734c:	080073f5 	.word	0x080073f5
 8007350:	080073f5 	.word	0x080073f5
 8007354:	080073f5 	.word	0x080073f5
 8007358:	080073df 	.word	0x080073df
 800735c:	080073f5 	.word	0x080073f5
 8007360:	080073f5 	.word	0x080073f5
 8007364:	080073f5 	.word	0x080073f5
 8007368:	080073f5 	.word	0x080073f5
 800736c:	080073f5 	.word	0x080073f5
 8007370:	080073f5 	.word	0x080073f5
 8007374:	080073f5 	.word	0x080073f5
 8007378:	080073fd 	.word	0x080073fd
 800737c:	080073f5 	.word	0x080073f5
 8007380:	080073f5 	.word	0x080073f5
 8007384:	080073f5 	.word	0x080073f5
 8007388:	080073f5 	.word	0x080073f5
 800738c:	080073f5 	.word	0x080073f5
 8007390:	080073f5 	.word	0x080073f5
 8007394:	080073f5 	.word	0x080073f5
 8007398:	080073fd 	.word	0x080073fd
 800739c:	080073f5 	.word	0x080073f5
 80073a0:	080073f5 	.word	0x080073f5
 80073a4:	080073f5 	.word	0x080073f5
 80073a8:	080073f5 	.word	0x080073f5
 80073ac:	080073f5 	.word	0x080073f5
 80073b0:	080073f5 	.word	0x080073f5
 80073b4:	080073f5 	.word	0x080073f5
 80073b8:	080073fd 	.word	0x080073fd
 80073bc:	58024400 	.word	0x58024400
 80073c0:	58024800 	.word	0x58024800
 80073c4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073cc:	3308      	adds	r3, #8
 80073ce:	2101      	movs	r1, #1
 80073d0:	4618      	mov	r0, r3
 80073d2:	f001 fdcb 	bl	8008f6c <RCCEx_PLL2_Config>
 80073d6:	4603      	mov	r3, r0
 80073d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073dc:	e00f      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e2:	3328      	adds	r3, #40	@ 0x28
 80073e4:	2101      	movs	r1, #1
 80073e6:	4618      	mov	r0, r3
 80073e8:	f001 fe72 	bl	80090d0 <RCCEx_PLL3_Config>
 80073ec:	4603      	mov	r3, r0
 80073ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073f2:	e004      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80073fa:	e000      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80073fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10a      	bne.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007406:	4bbf      	ldr	r3, [pc, #764]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800740a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800740e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007412:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007414:	4abb      	ldr	r2, [pc, #748]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007416:	430b      	orrs	r3, r1
 8007418:	6553      	str	r3, [r2, #84]	@ 0x54
 800741a:	e003      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800741c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007420:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742c:	f002 0302 	and.w	r3, r2, #2
 8007430:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007434:	2300      	movs	r3, #0
 8007436:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800743a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800743e:	460b      	mov	r3, r1
 8007440:	4313      	orrs	r3, r2
 8007442:	d041      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800744a:	2b05      	cmp	r3, #5
 800744c:	d824      	bhi.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800744e:	a201      	add	r2, pc, #4	@ (adr r2, 8007454 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007454:	080074a1 	.word	0x080074a1
 8007458:	0800746d 	.word	0x0800746d
 800745c:	08007483 	.word	0x08007483
 8007460:	080074a1 	.word	0x080074a1
 8007464:	080074a1 	.word	0x080074a1
 8007468:	080074a1 	.word	0x080074a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800746c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007470:	3308      	adds	r3, #8
 8007472:	2101      	movs	r1, #1
 8007474:	4618      	mov	r0, r3
 8007476:	f001 fd79 	bl	8008f6c <RCCEx_PLL2_Config>
 800747a:	4603      	mov	r3, r0
 800747c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007480:	e00f      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007486:	3328      	adds	r3, #40	@ 0x28
 8007488:	2101      	movs	r1, #1
 800748a:	4618      	mov	r0, r3
 800748c:	f001 fe20 	bl	80090d0 <RCCEx_PLL3_Config>
 8007490:	4603      	mov	r3, r0
 8007492:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007496:	e004      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800749e:	e000      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80074a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10a      	bne.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80074aa:	4b96      	ldr	r3, [pc, #600]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80074ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ae:	f023 0107 	bic.w	r1, r3, #7
 80074b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074b8:	4a92      	ldr	r2, [pc, #584]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80074ba:	430b      	orrs	r3, r1
 80074bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80074be:	e003      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80074c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	f002 0304 	and.w	r3, r2, #4
 80074d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80074d8:	2300      	movs	r3, #0
 80074da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074de:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80074e2:	460b      	mov	r3, r1
 80074e4:	4313      	orrs	r3, r2
 80074e6:	d044      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80074e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074f0:	2b05      	cmp	r3, #5
 80074f2:	d825      	bhi.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80074f4:	a201      	add	r2, pc, #4	@ (adr r2, 80074fc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80074f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fa:	bf00      	nop
 80074fc:	08007549 	.word	0x08007549
 8007500:	08007515 	.word	0x08007515
 8007504:	0800752b 	.word	0x0800752b
 8007508:	08007549 	.word	0x08007549
 800750c:	08007549 	.word	0x08007549
 8007510:	08007549 	.word	0x08007549
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007518:	3308      	adds	r3, #8
 800751a:	2101      	movs	r1, #1
 800751c:	4618      	mov	r0, r3
 800751e:	f001 fd25 	bl	8008f6c <RCCEx_PLL2_Config>
 8007522:	4603      	mov	r3, r0
 8007524:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007528:	e00f      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800752a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800752e:	3328      	adds	r3, #40	@ 0x28
 8007530:	2101      	movs	r1, #1
 8007532:	4618      	mov	r0, r3
 8007534:	f001 fdcc 	bl	80090d0 <RCCEx_PLL3_Config>
 8007538:	4603      	mov	r3, r0
 800753a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800753e:	e004      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007546:	e000      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800754a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10b      	bne.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007552:	4b6c      	ldr	r3, [pc, #432]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007556:	f023 0107 	bic.w	r1, r3, #7
 800755a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800755e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007562:	4a68      	ldr	r2, [pc, #416]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007564:	430b      	orrs	r3, r1
 8007566:	6593      	str	r3, [r2, #88]	@ 0x58
 8007568:	e003      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800756a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800756e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757a:	f002 0320 	and.w	r3, r2, #32
 800757e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007582:	2300      	movs	r3, #0
 8007584:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007588:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800758c:	460b      	mov	r3, r1
 800758e:	4313      	orrs	r3, r2
 8007590:	d055      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007596:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800759a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800759e:	d033      	beq.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80075a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075a4:	d82c      	bhi.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80075a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075aa:	d02f      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80075ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075b0:	d826      	bhi.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80075b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075b6:	d02b      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80075b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075bc:	d820      	bhi.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80075be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075c2:	d012      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80075c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075c8:	d81a      	bhi.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d022      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80075ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075d2:	d115      	bne.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d8:	3308      	adds	r3, #8
 80075da:	2100      	movs	r1, #0
 80075dc:	4618      	mov	r0, r3
 80075de:	f001 fcc5 	bl	8008f6c <RCCEx_PLL2_Config>
 80075e2:	4603      	mov	r3, r0
 80075e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075e8:	e015      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ee:	3328      	adds	r3, #40	@ 0x28
 80075f0:	2102      	movs	r1, #2
 80075f2:	4618      	mov	r0, r3
 80075f4:	f001 fd6c 	bl	80090d0 <RCCEx_PLL3_Config>
 80075f8:	4603      	mov	r3, r0
 80075fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075fe:	e00a      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007606:	e006      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007608:	bf00      	nop
 800760a:	e004      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800760c:	bf00      	nop
 800760e:	e002      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007610:	bf00      	nop
 8007612:	e000      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007616:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10b      	bne.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800761e:	4b39      	ldr	r3, [pc, #228]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007622:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800762a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800762e:	4a35      	ldr	r2, [pc, #212]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007630:	430b      	orrs	r3, r1
 8007632:	6553      	str	r3, [r2, #84]	@ 0x54
 8007634:	e003      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007636:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800763a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800763e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007646:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800764a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800764e:	2300      	movs	r3, #0
 8007650:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007654:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007658:	460b      	mov	r3, r1
 800765a:	4313      	orrs	r3, r2
 800765c:	d058      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800765e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007662:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007666:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800766a:	d033      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800766c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007670:	d82c      	bhi.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007672:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007676:	d02f      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007678:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800767c:	d826      	bhi.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800767e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007682:	d02b      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007684:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007688:	d820      	bhi.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800768a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800768e:	d012      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007690:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007694:	d81a      	bhi.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007696:	2b00      	cmp	r3, #0
 8007698:	d022      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800769a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800769e:	d115      	bne.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a4:	3308      	adds	r3, #8
 80076a6:	2100      	movs	r1, #0
 80076a8:	4618      	mov	r0, r3
 80076aa:	f001 fc5f 	bl	8008f6c <RCCEx_PLL2_Config>
 80076ae:	4603      	mov	r3, r0
 80076b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80076b4:	e015      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ba:	3328      	adds	r3, #40	@ 0x28
 80076bc:	2102      	movs	r1, #2
 80076be:	4618      	mov	r0, r3
 80076c0:	f001 fd06 	bl	80090d0 <RCCEx_PLL3_Config>
 80076c4:	4603      	mov	r3, r0
 80076c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80076ca:	e00a      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076d2:	e006      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80076d4:	bf00      	nop
 80076d6:	e004      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80076d8:	bf00      	nop
 80076da:	e002      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80076dc:	bf00      	nop
 80076de:	e000      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80076e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10e      	bne.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076ea:	4b06      	ldr	r3, [pc, #24]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80076ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80076f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80076fa:	4a02      	ldr	r2, [pc, #8]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80076fc:	430b      	orrs	r3, r1
 80076fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8007700:	e006      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007702:	bf00      	nop
 8007704:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007708:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800770c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007718:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800771c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007720:	2300      	movs	r3, #0
 8007722:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007726:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800772a:	460b      	mov	r3, r1
 800772c:	4313      	orrs	r3, r2
 800772e:	d055      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007734:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007738:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800773c:	d033      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800773e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007742:	d82c      	bhi.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007744:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007748:	d02f      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800774a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800774e:	d826      	bhi.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007750:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007754:	d02b      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007756:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800775a:	d820      	bhi.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800775c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007760:	d012      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007762:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007766:	d81a      	bhi.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007768:	2b00      	cmp	r3, #0
 800776a:	d022      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800776c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007770:	d115      	bne.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007776:	3308      	adds	r3, #8
 8007778:	2100      	movs	r1, #0
 800777a:	4618      	mov	r0, r3
 800777c:	f001 fbf6 	bl	8008f6c <RCCEx_PLL2_Config>
 8007780:	4603      	mov	r3, r0
 8007782:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007786:	e015      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800778c:	3328      	adds	r3, #40	@ 0x28
 800778e:	2102      	movs	r1, #2
 8007790:	4618      	mov	r0, r3
 8007792:	f001 fc9d 	bl	80090d0 <RCCEx_PLL3_Config>
 8007796:	4603      	mov	r3, r0
 8007798:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800779c:	e00a      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077a4:	e006      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80077a6:	bf00      	nop
 80077a8:	e004      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80077aa:	bf00      	nop
 80077ac:	e002      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80077ae:	bf00      	nop
 80077b0:	e000      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80077b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10b      	bne.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80077bc:	4ba0      	ldr	r3, [pc, #640]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077c0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80077c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077cc:	4a9c      	ldr	r2, [pc, #624]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077ce:	430b      	orrs	r3, r1
 80077d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80077d2:	e003      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80077dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e4:	f002 0308 	and.w	r3, r2, #8
 80077e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077ec:	2300      	movs	r3, #0
 80077ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80077f2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80077f6:	460b      	mov	r3, r1
 80077f8:	4313      	orrs	r3, r2
 80077fa:	d01e      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80077fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007804:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007808:	d10c      	bne.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800780a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800780e:	3328      	adds	r3, #40	@ 0x28
 8007810:	2102      	movs	r1, #2
 8007812:	4618      	mov	r0, r3
 8007814:	f001 fc5c 	bl	80090d0 <RCCEx_PLL3_Config>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007824:	4b86      	ldr	r3, [pc, #536]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007828:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800782c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007834:	4a82      	ldr	r2, [pc, #520]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007836:	430b      	orrs	r3, r1
 8007838:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800783a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800783e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007842:	f002 0310 	and.w	r3, r2, #16
 8007846:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800784a:	2300      	movs	r3, #0
 800784c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007850:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007854:	460b      	mov	r3, r1
 8007856:	4313      	orrs	r3, r2
 8007858:	d01e      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800785a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800785e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007866:	d10c      	bne.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800786c:	3328      	adds	r3, #40	@ 0x28
 800786e:	2102      	movs	r1, #2
 8007870:	4618      	mov	r0, r3
 8007872:	f001 fc2d 	bl	80090d0 <RCCEx_PLL3_Config>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007882:	4b6f      	ldr	r3, [pc, #444]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007886:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800788a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800788e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007892:	4a6b      	ldr	r2, [pc, #428]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007894:	430b      	orrs	r3, r1
 8007896:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80078a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80078a6:	2300      	movs	r3, #0
 80078a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078aa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80078ae:	460b      	mov	r3, r1
 80078b0:	4313      	orrs	r3, r2
 80078b2:	d03e      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80078b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80078bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078c0:	d022      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80078c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078c6:	d81b      	bhi.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80078cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078d0:	d00b      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80078d2:	e015      	b.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d8:	3308      	adds	r3, #8
 80078da:	2100      	movs	r1, #0
 80078dc:	4618      	mov	r0, r3
 80078de:	f001 fb45 	bl	8008f6c <RCCEx_PLL2_Config>
 80078e2:	4603      	mov	r3, r0
 80078e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078e8:	e00f      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ee:	3328      	adds	r3, #40	@ 0x28
 80078f0:	2102      	movs	r1, #2
 80078f2:	4618      	mov	r0, r3
 80078f4:	f001 fbec 	bl	80090d0 <RCCEx_PLL3_Config>
 80078f8:	4603      	mov	r3, r0
 80078fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078fe:	e004      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007906:	e000      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800790a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10b      	bne.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007912:	4b4b      	ldr	r3, [pc, #300]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007916:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800791a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800791e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007922:	4a47      	ldr	r2, [pc, #284]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007924:	430b      	orrs	r3, r1
 8007926:	6593      	str	r3, [r2, #88]	@ 0x58
 8007928:	e003      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800792a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800792e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800793e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007940:	2300      	movs	r3, #0
 8007942:	677b      	str	r3, [r7, #116]	@ 0x74
 8007944:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007948:	460b      	mov	r3, r1
 800794a:	4313      	orrs	r3, r2
 800794c:	d03b      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800794e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007952:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007956:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800795a:	d01f      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800795c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007960:	d818      	bhi.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007962:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007966:	d003      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007968:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800796c:	d007      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800796e:	e011      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007970:	4b33      	ldr	r3, [pc, #204]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007974:	4a32      	ldr	r2, [pc, #200]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800797a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800797c:	e00f      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800797e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007982:	3328      	adds	r3, #40	@ 0x28
 8007984:	2101      	movs	r1, #1
 8007986:	4618      	mov	r0, r3
 8007988:	f001 fba2 	bl	80090d0 <RCCEx_PLL3_Config>
 800798c:	4603      	mov	r3, r0
 800798e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007992:	e004      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800799a:	e000      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800799c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800799e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10b      	bne.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80079a6:	4b26      	ldr	r3, [pc, #152]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80079ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079b6:	4a22      	ldr	r2, [pc, #136]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079b8:	430b      	orrs	r3, r1
 80079ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80079bc:	e003      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80079c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80079d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079d4:	2300      	movs	r3, #0
 80079d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80079d8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80079dc:	460b      	mov	r3, r1
 80079de:	4313      	orrs	r3, r2
 80079e0:	d034      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80079e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d003      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80079ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079f0:	d007      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80079f2:	e011      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079f4:	4b12      	ldr	r3, [pc, #72]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f8:	4a11      	ldr	r2, [pc, #68]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a00:	e00e      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a06:	3308      	adds	r3, #8
 8007a08:	2102      	movs	r1, #2
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f001 faae 	bl	8008f6c <RCCEx_PLL2_Config>
 8007a10:	4603      	mov	r3, r0
 8007a12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a16:	e003      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10d      	bne.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a28:	4b05      	ldr	r3, [pc, #20]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a2c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a36:	4a02      	ldr	r2, [pc, #8]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a38:	430b      	orrs	r3, r1
 8007a3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a3c:	e006      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007a3e:	bf00      	nop
 8007a40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007a58:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a5e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007a62:	460b      	mov	r3, r1
 8007a64:	4313      	orrs	r3, r2
 8007a66:	d00c      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a6c:	3328      	adds	r3, #40	@ 0x28
 8007a6e:	2102      	movs	r1, #2
 8007a70:	4618      	mov	r0, r3
 8007a72:	f001 fb2d 	bl	80090d0 <RCCEx_PLL3_Config>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007a8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a90:	2300      	movs	r3, #0
 8007a92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a94:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007a98:	460b      	mov	r3, r1
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	d036      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007aa4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007aa8:	d018      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007aaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007aae:	d811      	bhi.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ab4:	d014      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007ab6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aba:	d80b      	bhi.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d011      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007ac0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ac4:	d106      	bne.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ac6:	4bb7      	ldr	r3, [pc, #732]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aca:	4ab6      	ldr	r2, [pc, #728]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ad0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007ad2:	e008      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ada:	e004      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007adc:	bf00      	nop
 8007ade:	e002      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007ae0:	bf00      	nop
 8007ae2:	e000      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ae6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10a      	bne.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007aee:	4bad      	ldr	r3, [pc, #692]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007afa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007afc:	4aa9      	ldr	r2, [pc, #676]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007afe:	430b      	orrs	r3, r1
 8007b00:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b02:	e003      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b14:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007b18:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b1e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007b22:	460b      	mov	r3, r1
 8007b24:	4313      	orrs	r3, r2
 8007b26:	d009      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b28:	4b9e      	ldr	r3, [pc, #632]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b2c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b36:	4a9b      	ldr	r2, [pc, #620]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b38:	430b      	orrs	r3, r1
 8007b3a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b44:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007b48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b4e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007b52:	460b      	mov	r3, r1
 8007b54:	4313      	orrs	r3, r2
 8007b56:	d009      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b58:	4b92      	ldr	r3, [pc, #584]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b5c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b66:	4a8f      	ldr	r2, [pc, #572]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b68:	430b      	orrs	r3, r1
 8007b6a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b74:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007b78:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b7e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007b82:	460b      	mov	r3, r1
 8007b84:	4313      	orrs	r3, r2
 8007b86:	d00e      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b88:	4b86      	ldr	r3, [pc, #536]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	4a85      	ldr	r2, [pc, #532]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b92:	6113      	str	r3, [r2, #16]
 8007b94:	4b83      	ldr	r3, [pc, #524]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b96:	6919      	ldr	r1, [r3, #16]
 8007b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007ba0:	4a80      	ldr	r2, [pc, #512]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ba2:	430b      	orrs	r3, r1
 8007ba4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bae:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bb8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	d009      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007bc2:	4b78      	ldr	r3, [pc, #480]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bc6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bd0:	4a74      	ldr	r2, [pc, #464]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bd2:	430b      	orrs	r3, r1
 8007bd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007be2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007be4:	2300      	movs	r3, #0
 8007be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007be8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007bec:	460b      	mov	r3, r1
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	d00a      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007bf2:	4b6c      	ldr	r3, [pc, #432]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bf6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c02:	4a68      	ldr	r2, [pc, #416]	@ (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c04:	430b      	orrs	r3, r1
 8007c06:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	2100      	movs	r1, #0
 8007c12:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c1a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4313      	orrs	r3, r2
 8007c22:	d011      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c28:	3308      	adds	r3, #8
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f001 f99d 	bl	8008f6c <RCCEx_PLL2_Config>
 8007c32:	4603      	mov	r3, r0
 8007c34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007c38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c50:	2100      	movs	r1, #0
 8007c52:	6239      	str	r1, [r7, #32]
 8007c54:	f003 0302 	and.w	r3, r3, #2
 8007c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c5a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007c5e:	460b      	mov	r3, r1
 8007c60:	4313      	orrs	r3, r2
 8007c62:	d011      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c68:	3308      	adds	r3, #8
 8007c6a:	2101      	movs	r1, #1
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f001 f97d 	bl	8008f6c <RCCEx_PLL2_Config>
 8007c72:	4603      	mov	r3, r0
 8007c74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007c78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d003      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c90:	2100      	movs	r1, #0
 8007c92:	61b9      	str	r1, [r7, #24]
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	61fb      	str	r3, [r7, #28]
 8007c9a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	d011      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca8:	3308      	adds	r3, #8
 8007caa:	2102      	movs	r1, #2
 8007cac:	4618      	mov	r0, r3
 8007cae:	f001 f95d 	bl	8008f6c <RCCEx_PLL2_Config>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007cb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d003      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	6139      	str	r1, [r7, #16]
 8007cd4:	f003 0308 	and.w	r3, r3, #8
 8007cd8:	617b      	str	r3, [r7, #20]
 8007cda:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	d011      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce8:	3328      	adds	r3, #40	@ 0x28
 8007cea:	2100      	movs	r1, #0
 8007cec:	4618      	mov	r0, r3
 8007cee:	f001 f9ef 	bl	80090d0 <RCCEx_PLL3_Config>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007cf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d003      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d10:	2100      	movs	r1, #0
 8007d12:	60b9      	str	r1, [r7, #8]
 8007d14:	f003 0310 	and.w	r3, r3, #16
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007d1e:	460b      	mov	r3, r1
 8007d20:	4313      	orrs	r3, r2
 8007d22:	d011      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d28:	3328      	adds	r3, #40	@ 0x28
 8007d2a:	2101      	movs	r1, #1
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f001 f9cf 	bl	80090d0 <RCCEx_PLL3_Config>
 8007d32:	4603      	mov	r3, r0
 8007d34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007d38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d003      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d50:	2100      	movs	r1, #0
 8007d52:	6039      	str	r1, [r7, #0]
 8007d54:	f003 0320 	and.w	r3, r3, #32
 8007d58:	607b      	str	r3, [r7, #4]
 8007d5a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007d5e:	460b      	mov	r3, r1
 8007d60:	4313      	orrs	r3, r2
 8007d62:	d011      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d68:	3328      	adds	r3, #40	@ 0x28
 8007d6a:	2102      	movs	r1, #2
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f001 f9af 	bl	80090d0 <RCCEx_PLL3_Config>
 8007d72:	4603      	mov	r3, r0
 8007d74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007d78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d003      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007d88:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	e000      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007da2:	bf00      	nop
 8007da4:	58024400 	.word	0x58024400

08007da8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b090      	sub	sp, #64	@ 0x40
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007db2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007db6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007dba:	430b      	orrs	r3, r1
 8007dbc:	f040 8094 	bne.w	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007dc0:	4b9b      	ldr	r3, [pc, #620]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dc4:	f003 0307 	and.w	r3, r3, #7
 8007dc8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dcc:	2b04      	cmp	r3, #4
 8007dce:	f200 8087 	bhi.w	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd8:	08007ded 	.word	0x08007ded
 8007ddc:	08007e15 	.word	0x08007e15
 8007de0:	08007e3d 	.word	0x08007e3d
 8007de4:	08007ed9 	.word	0x08007ed9
 8007de8:	08007e65 	.word	0x08007e65
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007dec:	4b90      	ldr	r3, [pc, #576]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007df4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007df8:	d108      	bne.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 ff62 	bl	8008cc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e08:	f000 bc93 	b.w	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e10:	f000 bc8f 	b.w	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e14:	4b86      	ldr	r3, [pc, #536]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e20:	d108      	bne.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e22:	f107 0318 	add.w	r3, r7, #24
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 fca6 	bl	8008778 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e30:	f000 bc7f 	b.w	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e34:	2300      	movs	r3, #0
 8007e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e38:	f000 bc7b 	b.w	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e3c:	4b7c      	ldr	r3, [pc, #496]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e48:	d108      	bne.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e4a:	f107 030c 	add.w	r3, r7, #12
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 fde6 	bl	8008a20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e58:	f000 bc6b 	b.w	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e60:	f000 bc67 	b.w	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e64:	4b72      	ldr	r3, [pc, #456]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e6c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e6e:	4b70      	ldr	r3, [pc, #448]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0304 	and.w	r3, r3, #4
 8007e76:	2b04      	cmp	r3, #4
 8007e78:	d10c      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d109      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e80:	4b6b      	ldr	r3, [pc, #428]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	08db      	lsrs	r3, r3, #3
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	4a6a      	ldr	r2, [pc, #424]	@ (8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e92:	e01f      	b.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e94:	4b66      	ldr	r3, [pc, #408]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ea0:	d106      	bne.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ea4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ea8:	d102      	bne.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007eaa:	4b63      	ldr	r3, [pc, #396]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007eae:	e011      	b.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007eb0:	4b5f      	ldr	r3, [pc, #380]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ebc:	d106      	bne.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ec0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ec4:	d102      	bne.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007ec6:	4b5d      	ldr	r3, [pc, #372]	@ (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007eca:	e003      	b.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007ed0:	f000 bc2f 	b.w	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007ed4:	f000 bc2d 	b.w	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ed8:	4b59      	ldr	r3, [pc, #356]	@ (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007edc:	f000 bc29 	b.w	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ee4:	f000 bc25 	b.w	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007ee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eec:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007ef0:	430b      	orrs	r3, r1
 8007ef2:	f040 80a7 	bne.w	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007ef6:	4b4e      	ldr	r3, [pc, #312]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007efa:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007efe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f06:	d054      	beq.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f0e:	f200 808b 	bhi.w	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f14:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007f18:	f000 8083 	beq.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007f22:	f200 8081 	bhi.w	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f2c:	d02f      	beq.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f34:	d878      	bhi.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d004      	beq.n	8007f46 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f42:	d012      	beq.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007f44:	e070      	b.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f46:	4b3a      	ldr	r3, [pc, #232]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f52:	d107      	bne.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f000 feb5 	bl	8008cc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f62:	e3e6      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f64:	2300      	movs	r3, #0
 8007f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f68:	e3e3      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f6a:	4b31      	ldr	r3, [pc, #196]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f76:	d107      	bne.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f78:	f107 0318 	add.w	r3, r7, #24
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 fbfb 	bl	8008778 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f86:	e3d4      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f8c:	e3d1      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f8e:	4b28      	ldr	r3, [pc, #160]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f9a:	d107      	bne.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f9c:	f107 030c 	add.w	r3, r7, #12
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f000 fd3d 	bl	8008a20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007faa:	e3c2      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fac:	2300      	movs	r3, #0
 8007fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fb0:	e3bf      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fb6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007fba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0304 	and.w	r3, r3, #4
 8007fc4:	2b04      	cmp	r3, #4
 8007fc6:	d10c      	bne.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8007fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d109      	bne.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fce:	4b18      	ldr	r3, [pc, #96]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	08db      	lsrs	r3, r3, #3
 8007fd4:	f003 0303 	and.w	r3, r3, #3
 8007fd8:	4a16      	ldr	r2, [pc, #88]	@ (8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007fda:	fa22 f303 	lsr.w	r3, r2, r3
 8007fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fe0:	e01e      	b.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fe2:	4b13      	ldr	r3, [pc, #76]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fee:	d106      	bne.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ff2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ff6:	d102      	bne.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ffc:	e010      	b.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008006:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800800a:	d106      	bne.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800800c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800800e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008012:	d102      	bne.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008014:	4b09      	ldr	r3, [pc, #36]	@ (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008018:	e002      	b.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800801a:	2300      	movs	r3, #0
 800801c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800801e:	e388      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008020:	e387      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008022:	4b07      	ldr	r3, [pc, #28]	@ (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008026:	e384      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008028:	2300      	movs	r3, #0
 800802a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800802c:	e381      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800802e:	bf00      	nop
 8008030:	58024400 	.word	0x58024400
 8008034:	03d09000 	.word	0x03d09000
 8008038:	003d0900 	.word	0x003d0900
 800803c:	007a1200 	.word	0x007a1200
 8008040:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008044:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008048:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800804c:	430b      	orrs	r3, r1
 800804e:	f040 809c 	bne.w	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008052:	4b9e      	ldr	r3, [pc, #632]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008056:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800805a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800805c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008062:	d054      	beq.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008066:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800806a:	f200 808b 	bhi.w	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800806e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008070:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008074:	f000 8083 	beq.w	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800807e:	f200 8081 	bhi.w	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008084:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008088:	d02f      	beq.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800808a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008090:	d878      	bhi.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008094:	2b00      	cmp	r3, #0
 8008096:	d004      	beq.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800809e:	d012      	beq.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80080a0:	e070      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080a2:	4b8a      	ldr	r3, [pc, #552]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080ae:	d107      	bne.n	80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080b4:	4618      	mov	r0, r3
 80080b6:	f000 fe07 	bl	8008cc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080be:	e338      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080c0:	2300      	movs	r3, #0
 80080c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080c4:	e335      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080c6:	4b81      	ldr	r3, [pc, #516]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080d2:	d107      	bne.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080d4:	f107 0318 	add.w	r3, r7, #24
 80080d8:	4618      	mov	r0, r3
 80080da:	f000 fb4d 	bl	8008778 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080e2:	e326      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080e4:	2300      	movs	r3, #0
 80080e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080e8:	e323      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080ea:	4b78      	ldr	r3, [pc, #480]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080f6:	d107      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080f8:	f107 030c 	add.w	r3, r7, #12
 80080fc:	4618      	mov	r0, r3
 80080fe:	f000 fc8f 	bl	8008a20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008106:	e314      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008108:	2300      	movs	r3, #0
 800810a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800810c:	e311      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800810e:	4b6f      	ldr	r3, [pc, #444]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008112:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008116:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008118:	4b6c      	ldr	r3, [pc, #432]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 0304 	and.w	r3, r3, #4
 8008120:	2b04      	cmp	r3, #4
 8008122:	d10c      	bne.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008126:	2b00      	cmp	r3, #0
 8008128:	d109      	bne.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800812a:	4b68      	ldr	r3, [pc, #416]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	08db      	lsrs	r3, r3, #3
 8008130:	f003 0303 	and.w	r3, r3, #3
 8008134:	4a66      	ldr	r2, [pc, #408]	@ (80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008136:	fa22 f303 	lsr.w	r3, r2, r3
 800813a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800813c:	e01e      	b.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800813e:	4b63      	ldr	r3, [pc, #396]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008146:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800814a:	d106      	bne.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800814c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800814e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008152:	d102      	bne.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008154:	4b5f      	ldr	r3, [pc, #380]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008158:	e010      	b.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800815a:	4b5c      	ldr	r3, [pc, #368]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008162:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008166:	d106      	bne.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800816a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800816e:	d102      	bne.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008170:	4b59      	ldr	r3, [pc, #356]	@ (80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008172:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008174:	e002      	b.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800817a:	e2da      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800817c:	e2d9      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800817e:	4b57      	ldr	r3, [pc, #348]	@ (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008182:	e2d6      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008184:	2300      	movs	r3, #0
 8008186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008188:	e2d3      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800818a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800818e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008192:	430b      	orrs	r3, r1
 8008194:	f040 80a7 	bne.w	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008198:	4b4c      	ldr	r3, [pc, #304]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800819a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800819c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80081a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80081a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081a8:	d055      	beq.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80081aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081b0:	f200 8096 	bhi.w	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80081b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80081ba:	f000 8084 	beq.w	80082c6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80081be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80081c4:	f200 808c 	bhi.w	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80081c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081ce:	d030      	beq.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80081d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081d6:	f200 8083 	bhi.w	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80081da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d004      	beq.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80081e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081e6:	d012      	beq.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80081e8:	e07a      	b.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081ea:	4b38      	ldr	r3, [pc, #224]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081f6:	d107      	bne.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081fc:	4618      	mov	r0, r3
 80081fe:	f000 fd63 	bl	8008cc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008206:	e294      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008208:	2300      	movs	r3, #0
 800820a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800820c:	e291      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800820e:	4b2f      	ldr	r3, [pc, #188]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008216:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800821a:	d107      	bne.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800821c:	f107 0318 	add.w	r3, r7, #24
 8008220:	4618      	mov	r0, r3
 8008222:	f000 faa9 	bl	8008778 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800822a:	e282      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800822c:	2300      	movs	r3, #0
 800822e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008230:	e27f      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008232:	4b26      	ldr	r3, [pc, #152]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800823a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800823e:	d107      	bne.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008240:	f107 030c 	add.w	r3, r7, #12
 8008244:	4618      	mov	r0, r3
 8008246:	f000 fbeb 	bl	8008a20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800824e:	e270      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008250:	2300      	movs	r3, #0
 8008252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008254:	e26d      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008256:	4b1d      	ldr	r3, [pc, #116]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800825a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800825e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008260:	4b1a      	ldr	r3, [pc, #104]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0304 	and.w	r3, r3, #4
 8008268:	2b04      	cmp	r3, #4
 800826a:	d10c      	bne.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800826c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800826e:	2b00      	cmp	r3, #0
 8008270:	d109      	bne.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008272:	4b16      	ldr	r3, [pc, #88]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	08db      	lsrs	r3, r3, #3
 8008278:	f003 0303 	and.w	r3, r3, #3
 800827c:	4a14      	ldr	r2, [pc, #80]	@ (80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800827e:	fa22 f303 	lsr.w	r3, r2, r3
 8008282:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008284:	e01e      	b.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008286:	4b11      	ldr	r3, [pc, #68]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800828e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008292:	d106      	bne.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008296:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800829a:	d102      	bne.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800829c:	4b0d      	ldr	r3, [pc, #52]	@ (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800829e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082a0:	e010      	b.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082a2:	4b0a      	ldr	r3, [pc, #40]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082ae:	d106      	bne.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80082b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082b6:	d102      	bne.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80082b8:	4b07      	ldr	r3, [pc, #28]	@ (80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082bc:	e002      	b.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80082be:	2300      	movs	r3, #0
 80082c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80082c2:	e236      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80082c4:	e235      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80082c6:	4b05      	ldr	r3, [pc, #20]	@ (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80082c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082ca:	e232      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80082cc:	58024400 	.word	0x58024400
 80082d0:	03d09000 	.word	0x03d09000
 80082d4:	003d0900 	.word	0x003d0900
 80082d8:	007a1200 	.word	0x007a1200
 80082dc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80082e0:	2300      	movs	r3, #0
 80082e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082e4:	e225      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80082e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082ea:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80082ee:	430b      	orrs	r3, r1
 80082f0:	f040 8085 	bne.w	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80082f4:	4b9c      	ldr	r3, [pc, #624]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80082f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082f8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80082fc:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80082fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008304:	d06b      	beq.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008308:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800830c:	d874      	bhi.n	80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800830e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008310:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008314:	d056      	beq.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008318:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800831c:	d86c      	bhi.n	80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800831e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008320:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008324:	d03b      	beq.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008328:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800832c:	d864      	bhi.n	80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800832e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008330:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008334:	d021      	beq.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008338:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800833c:	d85c      	bhi.n	80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800833e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008340:	2b00      	cmp	r3, #0
 8008342:	d004      	beq.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008346:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800834a:	d004      	beq.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800834c:	e054      	b.n	80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800834e:	f7fe fb1d 	bl	800698c <HAL_RCC_GetPCLK1Freq>
 8008352:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008354:	e1ed      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008356:	4b84      	ldr	r3, [pc, #528]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800835e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008362:	d107      	bne.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008364:	f107 0318 	add.w	r3, r7, #24
 8008368:	4618      	mov	r0, r3
 800836a:	f000 fa05 	bl	8008778 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008372:	e1de      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008374:	2300      	movs	r3, #0
 8008376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008378:	e1db      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800837a:	4b7b      	ldr	r3, [pc, #492]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008382:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008386:	d107      	bne.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008388:	f107 030c 	add.w	r3, r7, #12
 800838c:	4618      	mov	r0, r3
 800838e:	f000 fb47 	bl	8008a20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008396:	e1cc      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008398:	2300      	movs	r3, #0
 800839a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800839c:	e1c9      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800839e:	4b72      	ldr	r3, [pc, #456]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 0304 	and.w	r3, r3, #4
 80083a6:	2b04      	cmp	r3, #4
 80083a8:	d109      	bne.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083aa:	4b6f      	ldr	r3, [pc, #444]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	08db      	lsrs	r3, r3, #3
 80083b0:	f003 0303 	and.w	r3, r3, #3
 80083b4:	4a6d      	ldr	r2, [pc, #436]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80083b6:	fa22 f303 	lsr.w	r3, r2, r3
 80083ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083bc:	e1b9      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083c2:	e1b6      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80083c4:	4b68      	ldr	r3, [pc, #416]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083d0:	d102      	bne.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80083d2:	4b67      	ldr	r3, [pc, #412]	@ (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80083d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083d6:	e1ac      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083d8:	2300      	movs	r3, #0
 80083da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083dc:	e1a9      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80083de:	4b62      	ldr	r3, [pc, #392]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083ea:	d102      	bne.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80083ec:	4b61      	ldr	r3, [pc, #388]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80083ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083f0:	e19f      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083f2:	2300      	movs	r3, #0
 80083f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083f6:	e19c      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80083f8:	2300      	movs	r3, #0
 80083fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083fc:	e199      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80083fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008402:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008406:	430b      	orrs	r3, r1
 8008408:	d173      	bne.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800840a:	4b57      	ldr	r3, [pc, #348]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800840c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800840e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008412:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008416:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800841a:	d02f      	beq.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800841c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008422:	d863      	bhi.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008426:	2b00      	cmp	r3, #0
 8008428:	d004      	beq.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800842a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008430:	d012      	beq.n	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8008432:	e05b      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008434:	4b4c      	ldr	r3, [pc, #304]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800843c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008440:	d107      	bne.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008442:	f107 0318 	add.w	r3, r7, #24
 8008446:	4618      	mov	r0, r3
 8008448:	f000 f996 	bl	8008778 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008450:	e16f      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008452:	2300      	movs	r3, #0
 8008454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008456:	e16c      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008458:	4b43      	ldr	r3, [pc, #268]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008460:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008464:	d107      	bne.n	8008476 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008466:	f107 030c 	add.w	r3, r7, #12
 800846a:	4618      	mov	r0, r3
 800846c:	f000 fad8 	bl	8008a20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008474:	e15d      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008476:	2300      	movs	r3, #0
 8008478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800847a:	e15a      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800847c:	4b3a      	ldr	r3, [pc, #232]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800847e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008480:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008484:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008486:	4b38      	ldr	r3, [pc, #224]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 0304 	and.w	r3, r3, #4
 800848e:	2b04      	cmp	r3, #4
 8008490:	d10c      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008494:	2b00      	cmp	r3, #0
 8008496:	d109      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008498:	4b33      	ldr	r3, [pc, #204]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	08db      	lsrs	r3, r3, #3
 800849e:	f003 0303 	and.w	r3, r3, #3
 80084a2:	4a32      	ldr	r2, [pc, #200]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80084a4:	fa22 f303 	lsr.w	r3, r2, r3
 80084a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084aa:	e01e      	b.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084ac:	4b2e      	ldr	r3, [pc, #184]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084b8:	d106      	bne.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80084ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084c0:	d102      	bne.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80084c2:	4b2b      	ldr	r3, [pc, #172]	@ (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80084c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084c6:	e010      	b.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084c8:	4b27      	ldr	r3, [pc, #156]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084d4:	d106      	bne.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80084d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084dc:	d102      	bne.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80084de:	4b25      	ldr	r3, [pc, #148]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80084e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084e2:	e002      	b.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80084e4:	2300      	movs	r3, #0
 80084e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80084e8:	e123      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80084ea:	e122      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084f0:	e11f      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80084f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084f6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80084fa:	430b      	orrs	r3, r1
 80084fc:	d13c      	bne.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80084fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008502:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008506:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800850a:	2b00      	cmp	r3, #0
 800850c:	d004      	beq.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800850e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008514:	d012      	beq.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008516:	e023      	b.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008518:	4b13      	ldr	r3, [pc, #76]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008520:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008524:	d107      	bne.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800852a:	4618      	mov	r0, r3
 800852c:	f000 fbcc 	bl	8008cc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008534:	e0fd      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008536:	2300      	movs	r3, #0
 8008538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800853a:	e0fa      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800853c:	4b0a      	ldr	r3, [pc, #40]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008544:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008548:	d107      	bne.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800854a:	f107 0318 	add.w	r3, r7, #24
 800854e:	4618      	mov	r0, r3
 8008550:	f000 f912 	bl	8008778 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008554:	6a3b      	ldr	r3, [r7, #32]
 8008556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008558:	e0eb      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800855a:	2300      	movs	r3, #0
 800855c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800855e:	e0e8      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008560:	2300      	movs	r3, #0
 8008562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008564:	e0e5      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008566:	bf00      	nop
 8008568:	58024400 	.word	0x58024400
 800856c:	03d09000 	.word	0x03d09000
 8008570:	003d0900 	.word	0x003d0900
 8008574:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800857c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008580:	430b      	orrs	r3, r1
 8008582:	f040 8085 	bne.w	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008586:	4b6d      	ldr	r3, [pc, #436]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800858a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800858e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008592:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008596:	d06b      	beq.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800859a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800859e:	d874      	bhi.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80085a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085a6:	d056      	beq.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80085a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085ae:	d86c      	bhi.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80085b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80085b6:	d03b      	beq.n	8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80085b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80085be:	d864      	bhi.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80085c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085c6:	d021      	beq.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80085c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085ce:	d85c      	bhi.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80085d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d004      	beq.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80085d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085dc:	d004      	beq.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80085de:	e054      	b.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80085e0:	f000 f8b4 	bl	800874c <HAL_RCCEx_GetD3PCLK1Freq>
 80085e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80085e6:	e0a4      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085e8:	4b54      	ldr	r3, [pc, #336]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085f4:	d107      	bne.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085f6:	f107 0318 	add.w	r3, r7, #24
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 f8bc 	bl	8008778 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008604:	e095      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008606:	2300      	movs	r3, #0
 8008608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800860a:	e092      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800860c:	4b4b      	ldr	r3, [pc, #300]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008614:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008618:	d107      	bne.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800861a:	f107 030c 	add.w	r3, r7, #12
 800861e:	4618      	mov	r0, r3
 8008620:	f000 f9fe 	bl	8008a20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008628:	e083      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800862a:	2300      	movs	r3, #0
 800862c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800862e:	e080      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008630:	4b42      	ldr	r3, [pc, #264]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 0304 	and.w	r3, r3, #4
 8008638:	2b04      	cmp	r3, #4
 800863a:	d109      	bne.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800863c:	4b3f      	ldr	r3, [pc, #252]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	08db      	lsrs	r3, r3, #3
 8008642:	f003 0303 	and.w	r3, r3, #3
 8008646:	4a3e      	ldr	r2, [pc, #248]	@ (8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008648:	fa22 f303 	lsr.w	r3, r2, r3
 800864c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800864e:	e070      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008650:	2300      	movs	r3, #0
 8008652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008654:	e06d      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008656:	4b39      	ldr	r3, [pc, #228]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800865e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008662:	d102      	bne.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008664:	4b37      	ldr	r3, [pc, #220]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008668:	e063      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800866a:	2300      	movs	r3, #0
 800866c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800866e:	e060      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008670:	4b32      	ldr	r3, [pc, #200]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008678:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800867c:	d102      	bne.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800867e:	4b32      	ldr	r3, [pc, #200]	@ (8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008682:	e056      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008684:	2300      	movs	r3, #0
 8008686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008688:	e053      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800868a:	2300      	movs	r3, #0
 800868c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800868e:	e050      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008694:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008698:	430b      	orrs	r3, r1
 800869a:	d148      	bne.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800869c:	4b27      	ldr	r3, [pc, #156]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800869e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80086a4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80086a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086ac:	d02a      	beq.n	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80086ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086b4:	d838      	bhi.n	8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80086b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d004      	beq.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80086bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086c2:	d00d      	beq.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80086c4:	e030      	b.n	8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086c6:	4b1d      	ldr	r3, [pc, #116]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086d2:	d102      	bne.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80086d4:	4b1c      	ldr	r3, [pc, #112]	@ (8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80086d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086d8:	e02b      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086da:	2300      	movs	r3, #0
 80086dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086de:	e028      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086e0:	4b16      	ldr	r3, [pc, #88]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086ec:	d107      	bne.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 fae8 	bl	8008cc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086fc:	e019      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086fe:	2300      	movs	r3, #0
 8008700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008702:	e016      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008704:	4b0d      	ldr	r3, [pc, #52]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800870c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008710:	d107      	bne.n	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008712:	f107 0318 	add.w	r3, r7, #24
 8008716:	4618      	mov	r0, r3
 8008718:	f000 f82e 	bl	8008778 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008720:	e007      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008722:	2300      	movs	r3, #0
 8008724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008726:	e004      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008728:	2300      	movs	r3, #0
 800872a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800872c:	e001      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800872e:	2300      	movs	r3, #0
 8008730:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008734:	4618      	mov	r0, r3
 8008736:	3740      	adds	r7, #64	@ 0x40
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	58024400 	.word	0x58024400
 8008740:	03d09000 	.word	0x03d09000
 8008744:	003d0900 	.word	0x003d0900
 8008748:	007a1200 	.word	0x007a1200

0800874c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008750:	f7fe f8ec 	bl	800692c <HAL_RCC_GetHCLKFreq>
 8008754:	4602      	mov	r2, r0
 8008756:	4b06      	ldr	r3, [pc, #24]	@ (8008770 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008758:	6a1b      	ldr	r3, [r3, #32]
 800875a:	091b      	lsrs	r3, r3, #4
 800875c:	f003 0307 	and.w	r3, r3, #7
 8008760:	4904      	ldr	r1, [pc, #16]	@ (8008774 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008762:	5ccb      	ldrb	r3, [r1, r3]
 8008764:	f003 031f 	and.w	r3, r3, #31
 8008768:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800876c:	4618      	mov	r0, r3
 800876e:	bd80      	pop	{r7, pc}
 8008770:	58024400 	.word	0x58024400
 8008774:	080224ac 	.word	0x080224ac

08008778 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008778:	b480      	push	{r7}
 800877a:	b089      	sub	sp, #36	@ 0x24
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008780:	4ba1      	ldr	r3, [pc, #644]	@ (8008a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008784:	f003 0303 	and.w	r3, r3, #3
 8008788:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800878a:	4b9f      	ldr	r3, [pc, #636]	@ (8008a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800878c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800878e:	0b1b      	lsrs	r3, r3, #12
 8008790:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008794:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008796:	4b9c      	ldr	r3, [pc, #624]	@ (8008a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800879a:	091b      	lsrs	r3, r3, #4
 800879c:	f003 0301 	and.w	r3, r3, #1
 80087a0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80087a2:	4b99      	ldr	r3, [pc, #612]	@ (8008a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087a6:	08db      	lsrs	r3, r3, #3
 80087a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	fb02 f303 	mul.w	r3, r2, r3
 80087b2:	ee07 3a90 	vmov	s15, r3
 80087b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 8111 	beq.w	80089e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	f000 8083 	beq.w	80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	f200 80a1 	bhi.w	8008918 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d003      	beq.n	80087e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d056      	beq.n	8008890 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80087e2:	e099      	b.n	8008918 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087e4:	4b88      	ldr	r3, [pc, #544]	@ (8008a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0320 	and.w	r3, r3, #32
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d02d      	beq.n	800884c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087f0:	4b85      	ldr	r3, [pc, #532]	@ (8008a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	08db      	lsrs	r3, r3, #3
 80087f6:	f003 0303 	and.w	r3, r3, #3
 80087fa:	4a84      	ldr	r2, [pc, #528]	@ (8008a0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80087fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008800:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	ee07 3a90 	vmov	s15, r3
 8008808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	ee07 3a90 	vmov	s15, r3
 8008812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800881a:	4b7b      	ldr	r3, [pc, #492]	@ (8008a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800881c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800881e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008822:	ee07 3a90 	vmov	s15, r3
 8008826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800882a:	ed97 6a03 	vldr	s12, [r7, #12]
 800882e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008a10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800883a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800883e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008846:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800884a:	e087      	b.n	800895c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	ee07 3a90 	vmov	s15, r3
 8008852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008856:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008a14 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800885a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800885e:	4b6a      	ldr	r3, [pc, #424]	@ (8008a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008866:	ee07 3a90 	vmov	s15, r3
 800886a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800886e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008872:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008a10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800887a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800887e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800888a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800888e:	e065      	b.n	800895c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	ee07 3a90 	vmov	s15, r3
 8008896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800889a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008a18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800889e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088a2:	4b59      	ldr	r3, [pc, #356]	@ (8008a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088aa:	ee07 3a90 	vmov	s15, r3
 80088ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088b6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008a10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088d2:	e043      	b.n	800895c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	ee07 3a90 	vmov	s15, r3
 80088da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088de:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008a1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80088e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088e6:	4b48      	ldr	r3, [pc, #288]	@ (8008a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ee:	ee07 3a90 	vmov	s15, r3
 80088f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80088fa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008a10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800890a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800890e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008916:	e021      	b.n	800895c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	ee07 3a90 	vmov	s15, r3
 800891e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008922:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008a18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800892a:	4b37      	ldr	r3, [pc, #220]	@ (8008a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800892c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800892e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008932:	ee07 3a90 	vmov	s15, r3
 8008936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800893a:	ed97 6a03 	vldr	s12, [r7, #12]
 800893e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008a10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800894a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800894e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008956:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800895a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800895c:	4b2a      	ldr	r3, [pc, #168]	@ (8008a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800895e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008960:	0a5b      	lsrs	r3, r3, #9
 8008962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008966:	ee07 3a90 	vmov	s15, r3
 800896a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800896e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008972:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008976:	edd7 6a07 	vldr	s13, [r7, #28]
 800897a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800897e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008982:	ee17 2a90 	vmov	r2, s15
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800898a:	4b1f      	ldr	r3, [pc, #124]	@ (8008a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800898c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800898e:	0c1b      	lsrs	r3, r3, #16
 8008990:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008994:	ee07 3a90 	vmov	s15, r3
 8008998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800899c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80089a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089b0:	ee17 2a90 	vmov	r2, s15
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80089b8:	4b13      	ldr	r3, [pc, #76]	@ (8008a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089bc:	0e1b      	lsrs	r3, r3, #24
 80089be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80089d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089de:	ee17 2a90 	vmov	r2, s15
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80089e6:	e008      	b.n	80089fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	609a      	str	r2, [r3, #8]
}
 80089fa:	bf00      	nop
 80089fc:	3724      	adds	r7, #36	@ 0x24
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	58024400 	.word	0x58024400
 8008a0c:	03d09000 	.word	0x03d09000
 8008a10:	46000000 	.word	0x46000000
 8008a14:	4c742400 	.word	0x4c742400
 8008a18:	4a742400 	.word	0x4a742400
 8008a1c:	4af42400 	.word	0x4af42400

08008a20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b089      	sub	sp, #36	@ 0x24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a28:	4ba1      	ldr	r3, [pc, #644]	@ (8008cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a2c:	f003 0303 	and.w	r3, r3, #3
 8008a30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008a32:	4b9f      	ldr	r3, [pc, #636]	@ (8008cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a36:	0d1b      	lsrs	r3, r3, #20
 8008a38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008a3e:	4b9c      	ldr	r3, [pc, #624]	@ (8008cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a42:	0a1b      	lsrs	r3, r3, #8
 8008a44:	f003 0301 	and.w	r3, r3, #1
 8008a48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008a4a:	4b99      	ldr	r3, [pc, #612]	@ (8008cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a4e:	08db      	lsrs	r3, r3, #3
 8008a50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a54:	693a      	ldr	r2, [r7, #16]
 8008a56:	fb02 f303 	mul.w	r3, r2, r3
 8008a5a:	ee07 3a90 	vmov	s15, r3
 8008a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f000 8111 	beq.w	8008c90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	f000 8083 	beq.w	8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	f200 80a1 	bhi.w	8008bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d003      	beq.n	8008a8c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d056      	beq.n	8008b38 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008a8a:	e099      	b.n	8008bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a8c:	4b88      	ldr	r3, [pc, #544]	@ (8008cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 0320 	and.w	r3, r3, #32
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d02d      	beq.n	8008af4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a98:	4b85      	ldr	r3, [pc, #532]	@ (8008cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	08db      	lsrs	r3, r3, #3
 8008a9e:	f003 0303 	and.w	r3, r3, #3
 8008aa2:	4a84      	ldr	r2, [pc, #528]	@ (8008cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	ee07 3a90 	vmov	s15, r3
 8008ab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	ee07 3a90 	vmov	s15, r3
 8008aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ac2:	4b7b      	ldr	r3, [pc, #492]	@ (8008cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aca:	ee07 3a90 	vmov	s15, r3
 8008ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ad6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008af2:	e087      	b.n	8008c04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	ee07 3a90 	vmov	s15, r3
 8008afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008afe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008cbc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b06:	4b6a      	ldr	r3, [pc, #424]	@ (8008cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b0e:	ee07 3a90 	vmov	s15, r3
 8008b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b1a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b36:	e065      	b.n	8008c04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	ee07 3a90 	vmov	s15, r3
 8008b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b42:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b4a:	4b59      	ldr	r3, [pc, #356]	@ (8008cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b52:	ee07 3a90 	vmov	s15, r3
 8008b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b5e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b7a:	e043      	b.n	8008c04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	ee07 3a90 	vmov	s15, r3
 8008b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b86:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b8e:	4b48      	ldr	r3, [pc, #288]	@ (8008cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b96:	ee07 3a90 	vmov	s15, r3
 8008b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ba2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bbe:	e021      	b.n	8008c04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	ee07 3a90 	vmov	s15, r3
 8008bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bd2:	4b37      	ldr	r3, [pc, #220]	@ (8008cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bda:	ee07 3a90 	vmov	s15, r3
 8008bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008be6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008c04:	4b2a      	ldr	r3, [pc, #168]	@ (8008cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c08:	0a5b      	lsrs	r3, r3, #9
 8008c0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c0e:	ee07 3a90 	vmov	s15, r3
 8008c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c2a:	ee17 2a90 	vmov	r2, s15
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008c32:	4b1f      	ldr	r3, [pc, #124]	@ (8008cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c36:	0c1b      	lsrs	r3, r3, #16
 8008c38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c3c:	ee07 3a90 	vmov	s15, r3
 8008c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c58:	ee17 2a90 	vmov	r2, s15
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008c60:	4b13      	ldr	r3, [pc, #76]	@ (8008cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c64:	0e1b      	lsrs	r3, r3, #24
 8008c66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c6a:	ee07 3a90 	vmov	s15, r3
 8008c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c86:	ee17 2a90 	vmov	r2, s15
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008c8e:	e008      	b.n	8008ca2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	609a      	str	r2, [r3, #8]
}
 8008ca2:	bf00      	nop
 8008ca4:	3724      	adds	r7, #36	@ 0x24
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	58024400 	.word	0x58024400
 8008cb4:	03d09000 	.word	0x03d09000
 8008cb8:	46000000 	.word	0x46000000
 8008cbc:	4c742400 	.word	0x4c742400
 8008cc0:	4a742400 	.word	0x4a742400
 8008cc4:	4af42400 	.word	0x4af42400

08008cc8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b089      	sub	sp, #36	@ 0x24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cd0:	4ba0      	ldr	r3, [pc, #640]	@ (8008f54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd4:	f003 0303 	and.w	r3, r3, #3
 8008cd8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008cda:	4b9e      	ldr	r3, [pc, #632]	@ (8008f54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cde:	091b      	lsrs	r3, r3, #4
 8008ce0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ce4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008ce6:	4b9b      	ldr	r3, [pc, #620]	@ (8008f54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cea:	f003 0301 	and.w	r3, r3, #1
 8008cee:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008cf0:	4b98      	ldr	r3, [pc, #608]	@ (8008f54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cf4:	08db      	lsrs	r3, r3, #3
 8008cf6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cfa:	693a      	ldr	r2, [r7, #16]
 8008cfc:	fb02 f303 	mul.w	r3, r2, r3
 8008d00:	ee07 3a90 	vmov	s15, r3
 8008d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d08:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f000 8111 	beq.w	8008f36 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	f000 8083 	beq.w	8008e22 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	f200 80a1 	bhi.w	8008e66 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d003      	beq.n	8008d32 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d056      	beq.n	8008dde <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008d30:	e099      	b.n	8008e66 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d32:	4b88      	ldr	r3, [pc, #544]	@ (8008f54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0320 	and.w	r3, r3, #32
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d02d      	beq.n	8008d9a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d3e:	4b85      	ldr	r3, [pc, #532]	@ (8008f54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	08db      	lsrs	r3, r3, #3
 8008d44:	f003 0303 	and.w	r3, r3, #3
 8008d48:	4a83      	ldr	r2, [pc, #524]	@ (8008f58 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d4e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	ee07 3a90 	vmov	s15, r3
 8008d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d68:	4b7a      	ldr	r3, [pc, #488]	@ (8008f54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d70:	ee07 3a90 	vmov	s15, r3
 8008d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d78:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d7c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008f5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d94:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d98:	e087      	b.n	8008eaa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	ee07 3a90 	vmov	s15, r3
 8008da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008f60 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008da8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dac:	4b69      	ldr	r3, [pc, #420]	@ (8008f54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db4:	ee07 3a90 	vmov	s15, r3
 8008db8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dc0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008f5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008dc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dcc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ddc:	e065      	b.n	8008eaa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	ee07 3a90 	vmov	s15, r3
 8008de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008dec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008df0:	4b58      	ldr	r3, [pc, #352]	@ (8008f54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008df8:	ee07 3a90 	vmov	s15, r3
 8008dfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e00:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e04:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008f5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e20:	e043      	b.n	8008eaa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	ee07 3a90 	vmov	s15, r3
 8008e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e2c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008f68 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008e30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e34:	4b47      	ldr	r3, [pc, #284]	@ (8008f54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e3c:	ee07 3a90 	vmov	s15, r3
 8008e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e44:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e48:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008f5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e64:	e021      	b.n	8008eaa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	ee07 3a90 	vmov	s15, r3
 8008e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e70:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008f60 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008e74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e78:	4b36      	ldr	r3, [pc, #216]	@ (8008f54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e80:	ee07 3a90 	vmov	s15, r3
 8008e84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e88:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e8c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008f5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ea4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ea8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8008f54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eae:	0a5b      	lsrs	r3, r3, #9
 8008eb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eb4:	ee07 3a90 	vmov	s15, r3
 8008eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ebc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ec0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ec4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ed0:	ee17 2a90 	vmov	r2, s15
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8008f54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008edc:	0c1b      	lsrs	r3, r3, #16
 8008ede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ee2:	ee07 3a90 	vmov	s15, r3
 8008ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008eee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ef2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008efe:	ee17 2a90 	vmov	r2, s15
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008f06:	4b13      	ldr	r3, [pc, #76]	@ (8008f54 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f0a:	0e1b      	lsrs	r3, r3, #24
 8008f0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f10:	ee07 3a90 	vmov	s15, r3
 8008f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f20:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f2c:	ee17 2a90 	vmov	r2, s15
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008f34:	e008      	b.n	8008f48 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	609a      	str	r2, [r3, #8]
}
 8008f48:	bf00      	nop
 8008f4a:	3724      	adds	r7, #36	@ 0x24
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr
 8008f54:	58024400 	.word	0x58024400
 8008f58:	03d09000 	.word	0x03d09000
 8008f5c:	46000000 	.word	0x46000000
 8008f60:	4c742400 	.word	0x4c742400
 8008f64:	4a742400 	.word	0x4a742400
 8008f68:	4af42400 	.word	0x4af42400

08008f6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f7a:	4b53      	ldr	r3, [pc, #332]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 8008f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f7e:	f003 0303 	and.w	r3, r3, #3
 8008f82:	2b03      	cmp	r3, #3
 8008f84:	d101      	bne.n	8008f8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e099      	b.n	80090be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008f8a:	4b4f      	ldr	r3, [pc, #316]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a4e      	ldr	r2, [pc, #312]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 8008f90:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f96:	f7f8 feb9 	bl	8001d0c <HAL_GetTick>
 8008f9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f9c:	e008      	b.n	8008fb0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f9e:	f7f8 feb5 	bl	8001d0c <HAL_GetTick>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d901      	bls.n	8008fb0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008fac:	2303      	movs	r3, #3
 8008fae:	e086      	b.n	80090be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008fb0:	4b45      	ldr	r3, [pc, #276]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1f0      	bne.n	8008f9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008fbc:	4b42      	ldr	r3, [pc, #264]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 8008fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	031b      	lsls	r3, r3, #12
 8008fca:	493f      	ldr	r1, [pc, #252]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	628b      	str	r3, [r1, #40]	@ 0x28
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	025b      	lsls	r3, r3, #9
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	431a      	orrs	r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	3b01      	subs	r3, #1
 8008fec:	041b      	lsls	r3, r3, #16
 8008fee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	061b      	lsls	r3, r3, #24
 8008ffc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009000:	4931      	ldr	r1, [pc, #196]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 8009002:	4313      	orrs	r3, r2
 8009004:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009006:	4b30      	ldr	r3, [pc, #192]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 8009008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800900a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	492d      	ldr	r1, [pc, #180]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 8009014:	4313      	orrs	r3, r2
 8009016:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009018:	4b2b      	ldr	r3, [pc, #172]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 800901a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800901c:	f023 0220 	bic.w	r2, r3, #32
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	4928      	ldr	r1, [pc, #160]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 8009026:	4313      	orrs	r3, r2
 8009028:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800902a:	4b27      	ldr	r3, [pc, #156]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 800902c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800902e:	4a26      	ldr	r2, [pc, #152]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 8009030:	f023 0310 	bic.w	r3, r3, #16
 8009034:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009036:	4b24      	ldr	r3, [pc, #144]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 8009038:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800903a:	4b24      	ldr	r3, [pc, #144]	@ (80090cc <RCCEx_PLL2_Config+0x160>)
 800903c:	4013      	ands	r3, r2
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	69d2      	ldr	r2, [r2, #28]
 8009042:	00d2      	lsls	r2, r2, #3
 8009044:	4920      	ldr	r1, [pc, #128]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 8009046:	4313      	orrs	r3, r2
 8009048:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800904a:	4b1f      	ldr	r3, [pc, #124]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 800904c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800904e:	4a1e      	ldr	r2, [pc, #120]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 8009050:	f043 0310 	orr.w	r3, r3, #16
 8009054:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d106      	bne.n	800906a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800905c:	4b1a      	ldr	r3, [pc, #104]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 800905e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009060:	4a19      	ldr	r2, [pc, #100]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 8009062:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009066:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009068:	e00f      	b.n	800908a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d106      	bne.n	800907e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009070:	4b15      	ldr	r3, [pc, #84]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 8009072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009074:	4a14      	ldr	r2, [pc, #80]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 8009076:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800907a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800907c:	e005      	b.n	800908a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800907e:	4b12      	ldr	r3, [pc, #72]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 8009080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009082:	4a11      	ldr	r2, [pc, #68]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 8009084:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009088:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800908a:	4b0f      	ldr	r3, [pc, #60]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a0e      	ldr	r2, [pc, #56]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 8009090:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009094:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009096:	f7f8 fe39 	bl	8001d0c <HAL_GetTick>
 800909a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800909c:	e008      	b.n	80090b0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800909e:	f7f8 fe35 	bl	8001d0c <HAL_GetTick>
 80090a2:	4602      	mov	r2, r0
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	1ad3      	subs	r3, r2, r3
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d901      	bls.n	80090b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80090ac:	2303      	movs	r3, #3
 80090ae:	e006      	b.n	80090be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80090b0:	4b05      	ldr	r3, [pc, #20]	@ (80090c8 <RCCEx_PLL2_Config+0x15c>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d0f0      	beq.n	800909e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	58024400 	.word	0x58024400
 80090cc:	ffff0007 	.word	0xffff0007

080090d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80090da:	2300      	movs	r3, #0
 80090dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090de:	4b53      	ldr	r3, [pc, #332]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 80090e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e2:	f003 0303 	and.w	r3, r3, #3
 80090e6:	2b03      	cmp	r3, #3
 80090e8:	d101      	bne.n	80090ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e099      	b.n	8009222 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80090ee:	4b4f      	ldr	r3, [pc, #316]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a4e      	ldr	r2, [pc, #312]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 80090f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090fa:	f7f8 fe07 	bl	8001d0c <HAL_GetTick>
 80090fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009100:	e008      	b.n	8009114 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009102:	f7f8 fe03 	bl	8001d0c <HAL_GetTick>
 8009106:	4602      	mov	r2, r0
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	2b02      	cmp	r3, #2
 800910e:	d901      	bls.n	8009114 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009110:	2303      	movs	r3, #3
 8009112:	e086      	b.n	8009222 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009114:	4b45      	ldr	r3, [pc, #276]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1f0      	bne.n	8009102 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009120:	4b42      	ldr	r3, [pc, #264]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 8009122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009124:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	051b      	lsls	r3, r3, #20
 800912e:	493f      	ldr	r1, [pc, #252]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 8009130:	4313      	orrs	r3, r2
 8009132:	628b      	str	r3, [r1, #40]	@ 0x28
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	3b01      	subs	r3, #1
 800913a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	3b01      	subs	r3, #1
 8009144:	025b      	lsls	r3, r3, #9
 8009146:	b29b      	uxth	r3, r3
 8009148:	431a      	orrs	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	3b01      	subs	r3, #1
 8009150:	041b      	lsls	r3, r3, #16
 8009152:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009156:	431a      	orrs	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	3b01      	subs	r3, #1
 800915e:	061b      	lsls	r3, r3, #24
 8009160:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009164:	4931      	ldr	r1, [pc, #196]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 8009166:	4313      	orrs	r3, r2
 8009168:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800916a:	4b30      	ldr	r3, [pc, #192]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 800916c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800916e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	695b      	ldr	r3, [r3, #20]
 8009176:	492d      	ldr	r1, [pc, #180]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 8009178:	4313      	orrs	r3, r2
 800917a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800917c:	4b2b      	ldr	r3, [pc, #172]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 800917e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009180:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	4928      	ldr	r1, [pc, #160]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 800918a:	4313      	orrs	r3, r2
 800918c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800918e:	4b27      	ldr	r3, [pc, #156]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 8009190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009192:	4a26      	ldr	r2, [pc, #152]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 8009194:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009198:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800919a:	4b24      	ldr	r3, [pc, #144]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 800919c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800919e:	4b24      	ldr	r3, [pc, #144]	@ (8009230 <RCCEx_PLL3_Config+0x160>)
 80091a0:	4013      	ands	r3, r2
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	69d2      	ldr	r2, [r2, #28]
 80091a6:	00d2      	lsls	r2, r2, #3
 80091a8:	4920      	ldr	r1, [pc, #128]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 80091aa:	4313      	orrs	r3, r2
 80091ac:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80091ae:	4b1f      	ldr	r3, [pc, #124]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 80091b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b2:	4a1e      	ldr	r2, [pc, #120]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 80091b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d106      	bne.n	80091ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80091c0:	4b1a      	ldr	r3, [pc, #104]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 80091c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c4:	4a19      	ldr	r2, [pc, #100]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 80091c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80091ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80091cc:	e00f      	b.n	80091ee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d106      	bne.n	80091e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80091d4:	4b15      	ldr	r3, [pc, #84]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 80091d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d8:	4a14      	ldr	r2, [pc, #80]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 80091da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80091de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80091e0:	e005      	b.n	80091ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80091e2:	4b12      	ldr	r3, [pc, #72]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 80091e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091e6:	4a11      	ldr	r2, [pc, #68]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 80091e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80091ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80091ee:	4b0f      	ldr	r3, [pc, #60]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a0e      	ldr	r2, [pc, #56]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 80091f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091fa:	f7f8 fd87 	bl	8001d0c <HAL_GetTick>
 80091fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009200:	e008      	b.n	8009214 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009202:	f7f8 fd83 	bl	8001d0c <HAL_GetTick>
 8009206:	4602      	mov	r2, r0
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	2b02      	cmp	r3, #2
 800920e:	d901      	bls.n	8009214 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	e006      	b.n	8009222 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009214:	4b05      	ldr	r3, [pc, #20]	@ (800922c <RCCEx_PLL3_Config+0x15c>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d0f0      	beq.n	8009202 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009220:	7bfb      	ldrb	r3, [r7, #15]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	58024400 	.word	0x58024400
 8009230:	ffff0007 	.word	0xffff0007

08009234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d101      	bne.n	8009246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e049      	b.n	80092da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b00      	cmp	r3, #0
 8009250:	d106      	bne.n	8009260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f841 	bl	80092e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2202      	movs	r2, #2
 8009264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	3304      	adds	r3, #4
 8009270:	4619      	mov	r1, r3
 8009272:	4610      	mov	r0, r2
 8009274:	f000 fc7e 	bl	8009b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b083      	sub	sp, #12
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80092ea:	bf00      	nop
 80092ec:	370c      	adds	r7, #12
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
	...

080092f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b01      	cmp	r3, #1
 800930a:	d001      	beq.n	8009310 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	e05e      	b.n	80093ce <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2202      	movs	r2, #2
 8009314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68da      	ldr	r2, [r3, #12]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f042 0201 	orr.w	r2, r2, #1
 8009326:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a2b      	ldr	r2, [pc, #172]	@ (80093dc <HAL_TIM_Base_Start_IT+0xe4>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d02c      	beq.n	800938c <HAL_TIM_Base_Start_IT+0x94>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800933a:	d027      	beq.n	800938c <HAL_TIM_Base_Start_IT+0x94>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a27      	ldr	r2, [pc, #156]	@ (80093e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d022      	beq.n	800938c <HAL_TIM_Base_Start_IT+0x94>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a26      	ldr	r2, [pc, #152]	@ (80093e4 <HAL_TIM_Base_Start_IT+0xec>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d01d      	beq.n	800938c <HAL_TIM_Base_Start_IT+0x94>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a24      	ldr	r2, [pc, #144]	@ (80093e8 <HAL_TIM_Base_Start_IT+0xf0>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d018      	beq.n	800938c <HAL_TIM_Base_Start_IT+0x94>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a23      	ldr	r2, [pc, #140]	@ (80093ec <HAL_TIM_Base_Start_IT+0xf4>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d013      	beq.n	800938c <HAL_TIM_Base_Start_IT+0x94>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a21      	ldr	r2, [pc, #132]	@ (80093f0 <HAL_TIM_Base_Start_IT+0xf8>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d00e      	beq.n	800938c <HAL_TIM_Base_Start_IT+0x94>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a20      	ldr	r2, [pc, #128]	@ (80093f4 <HAL_TIM_Base_Start_IT+0xfc>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d009      	beq.n	800938c <HAL_TIM_Base_Start_IT+0x94>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a1e      	ldr	r2, [pc, #120]	@ (80093f8 <HAL_TIM_Base_Start_IT+0x100>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d004      	beq.n	800938c <HAL_TIM_Base_Start_IT+0x94>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a1d      	ldr	r2, [pc, #116]	@ (80093fc <HAL_TIM_Base_Start_IT+0x104>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d115      	bne.n	80093b8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	689a      	ldr	r2, [r3, #8]
 8009392:	4b1b      	ldr	r3, [pc, #108]	@ (8009400 <HAL_TIM_Base_Start_IT+0x108>)
 8009394:	4013      	ands	r3, r2
 8009396:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2b06      	cmp	r3, #6
 800939c:	d015      	beq.n	80093ca <HAL_TIM_Base_Start_IT+0xd2>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093a4:	d011      	beq.n	80093ca <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f042 0201 	orr.w	r2, r2, #1
 80093b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093b6:	e008      	b.n	80093ca <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f042 0201 	orr.w	r2, r2, #1
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	e000      	b.n	80093cc <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3714      	adds	r7, #20
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	40010000 	.word	0x40010000
 80093e0:	40000400 	.word	0x40000400
 80093e4:	40000800 	.word	0x40000800
 80093e8:	40000c00 	.word	0x40000c00
 80093ec:	40010400 	.word	0x40010400
 80093f0:	40001800 	.word	0x40001800
 80093f4:	40014000 	.word	0x40014000
 80093f8:	4000e000 	.word	0x4000e000
 80093fc:	4000e400 	.word	0x4000e400
 8009400:	00010007 	.word	0x00010007

08009404 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d101      	bne.n	8009416 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e049      	b.n	80094aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d106      	bne.n	8009430 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7f7 ffac 	bl	8001388 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2202      	movs	r2, #2
 8009434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	3304      	adds	r3, #4
 8009440:	4619      	mov	r1, r3
 8009442:	4610      	mov	r0, r2
 8009444:	f000 fb96 	bl	8009b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
	...

080094b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d109      	bne.n	80094d8 <HAL_TIM_PWM_Start+0x24>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	bf14      	ite	ne
 80094d0:	2301      	movne	r3, #1
 80094d2:	2300      	moveq	r3, #0
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	e03c      	b.n	8009552 <HAL_TIM_PWM_Start+0x9e>
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	2b04      	cmp	r3, #4
 80094dc:	d109      	bne.n	80094f2 <HAL_TIM_PWM_Start+0x3e>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	bf14      	ite	ne
 80094ea:	2301      	movne	r3, #1
 80094ec:	2300      	moveq	r3, #0
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	e02f      	b.n	8009552 <HAL_TIM_PWM_Start+0x9e>
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	2b08      	cmp	r3, #8
 80094f6:	d109      	bne.n	800950c <HAL_TIM_PWM_Start+0x58>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	2b01      	cmp	r3, #1
 8009502:	bf14      	ite	ne
 8009504:	2301      	movne	r3, #1
 8009506:	2300      	moveq	r3, #0
 8009508:	b2db      	uxtb	r3, r3
 800950a:	e022      	b.n	8009552 <HAL_TIM_PWM_Start+0x9e>
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	2b0c      	cmp	r3, #12
 8009510:	d109      	bne.n	8009526 <HAL_TIM_PWM_Start+0x72>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b01      	cmp	r3, #1
 800951c:	bf14      	ite	ne
 800951e:	2301      	movne	r3, #1
 8009520:	2300      	moveq	r3, #0
 8009522:	b2db      	uxtb	r3, r3
 8009524:	e015      	b.n	8009552 <HAL_TIM_PWM_Start+0x9e>
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	2b10      	cmp	r3, #16
 800952a:	d109      	bne.n	8009540 <HAL_TIM_PWM_Start+0x8c>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2b01      	cmp	r3, #1
 8009536:	bf14      	ite	ne
 8009538:	2301      	movne	r3, #1
 800953a:	2300      	moveq	r3, #0
 800953c:	b2db      	uxtb	r3, r3
 800953e:	e008      	b.n	8009552 <HAL_TIM_PWM_Start+0x9e>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b01      	cmp	r3, #1
 800954a:	bf14      	ite	ne
 800954c:	2301      	movne	r3, #1
 800954e:	2300      	moveq	r3, #0
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b00      	cmp	r3, #0
 8009554:	d001      	beq.n	800955a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	e0ab      	b.n	80096b2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d104      	bne.n	800956a <HAL_TIM_PWM_Start+0xb6>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2202      	movs	r2, #2
 8009564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009568:	e023      	b.n	80095b2 <HAL_TIM_PWM_Start+0xfe>
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	2b04      	cmp	r3, #4
 800956e:	d104      	bne.n	800957a <HAL_TIM_PWM_Start+0xc6>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2202      	movs	r2, #2
 8009574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009578:	e01b      	b.n	80095b2 <HAL_TIM_PWM_Start+0xfe>
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	2b08      	cmp	r3, #8
 800957e:	d104      	bne.n	800958a <HAL_TIM_PWM_Start+0xd6>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2202      	movs	r2, #2
 8009584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009588:	e013      	b.n	80095b2 <HAL_TIM_PWM_Start+0xfe>
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	2b0c      	cmp	r3, #12
 800958e:	d104      	bne.n	800959a <HAL_TIM_PWM_Start+0xe6>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2202      	movs	r2, #2
 8009594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009598:	e00b      	b.n	80095b2 <HAL_TIM_PWM_Start+0xfe>
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	2b10      	cmp	r3, #16
 800959e:	d104      	bne.n	80095aa <HAL_TIM_PWM_Start+0xf6>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2202      	movs	r2, #2
 80095a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80095a8:	e003      	b.n	80095b2 <HAL_TIM_PWM_Start+0xfe>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2202      	movs	r2, #2
 80095ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2201      	movs	r2, #1
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 fe62 	bl	800a284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a3d      	ldr	r2, [pc, #244]	@ (80096bc <HAL_TIM_PWM_Start+0x208>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d013      	beq.n	80095f2 <HAL_TIM_PWM_Start+0x13e>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a3c      	ldr	r2, [pc, #240]	@ (80096c0 <HAL_TIM_PWM_Start+0x20c>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d00e      	beq.n	80095f2 <HAL_TIM_PWM_Start+0x13e>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a3a      	ldr	r2, [pc, #232]	@ (80096c4 <HAL_TIM_PWM_Start+0x210>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d009      	beq.n	80095f2 <HAL_TIM_PWM_Start+0x13e>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a39      	ldr	r2, [pc, #228]	@ (80096c8 <HAL_TIM_PWM_Start+0x214>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d004      	beq.n	80095f2 <HAL_TIM_PWM_Start+0x13e>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a37      	ldr	r2, [pc, #220]	@ (80096cc <HAL_TIM_PWM_Start+0x218>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d101      	bne.n	80095f6 <HAL_TIM_PWM_Start+0x142>
 80095f2:	2301      	movs	r3, #1
 80095f4:	e000      	b.n	80095f8 <HAL_TIM_PWM_Start+0x144>
 80095f6:	2300      	movs	r3, #0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d007      	beq.n	800960c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800960a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a2a      	ldr	r2, [pc, #168]	@ (80096bc <HAL_TIM_PWM_Start+0x208>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d02c      	beq.n	8009670 <HAL_TIM_PWM_Start+0x1bc>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800961e:	d027      	beq.n	8009670 <HAL_TIM_PWM_Start+0x1bc>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a2a      	ldr	r2, [pc, #168]	@ (80096d0 <HAL_TIM_PWM_Start+0x21c>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d022      	beq.n	8009670 <HAL_TIM_PWM_Start+0x1bc>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a29      	ldr	r2, [pc, #164]	@ (80096d4 <HAL_TIM_PWM_Start+0x220>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d01d      	beq.n	8009670 <HAL_TIM_PWM_Start+0x1bc>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a27      	ldr	r2, [pc, #156]	@ (80096d8 <HAL_TIM_PWM_Start+0x224>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d018      	beq.n	8009670 <HAL_TIM_PWM_Start+0x1bc>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a1f      	ldr	r2, [pc, #124]	@ (80096c0 <HAL_TIM_PWM_Start+0x20c>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d013      	beq.n	8009670 <HAL_TIM_PWM_Start+0x1bc>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a23      	ldr	r2, [pc, #140]	@ (80096dc <HAL_TIM_PWM_Start+0x228>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d00e      	beq.n	8009670 <HAL_TIM_PWM_Start+0x1bc>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a1b      	ldr	r2, [pc, #108]	@ (80096c4 <HAL_TIM_PWM_Start+0x210>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d009      	beq.n	8009670 <HAL_TIM_PWM_Start+0x1bc>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a1f      	ldr	r2, [pc, #124]	@ (80096e0 <HAL_TIM_PWM_Start+0x22c>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d004      	beq.n	8009670 <HAL_TIM_PWM_Start+0x1bc>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a1e      	ldr	r2, [pc, #120]	@ (80096e4 <HAL_TIM_PWM_Start+0x230>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d115      	bne.n	800969c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	689a      	ldr	r2, [r3, #8]
 8009676:	4b1c      	ldr	r3, [pc, #112]	@ (80096e8 <HAL_TIM_PWM_Start+0x234>)
 8009678:	4013      	ands	r3, r2
 800967a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2b06      	cmp	r3, #6
 8009680:	d015      	beq.n	80096ae <HAL_TIM_PWM_Start+0x1fa>
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009688:	d011      	beq.n	80096ae <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f042 0201 	orr.w	r2, r2, #1
 8009698:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800969a:	e008      	b.n	80096ae <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f042 0201 	orr.w	r2, r2, #1
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	e000      	b.n	80096b0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	40010000 	.word	0x40010000
 80096c0:	40010400 	.word	0x40010400
 80096c4:	40014000 	.word	0x40014000
 80096c8:	40014400 	.word	0x40014400
 80096cc:	40014800 	.word	0x40014800
 80096d0:	40000400 	.word	0x40000400
 80096d4:	40000800 	.word	0x40000800
 80096d8:	40000c00 	.word	0x40000c00
 80096dc:	40001800 	.word	0x40001800
 80096e0:	4000e000 	.word	0x4000e000
 80096e4:	4000e400 	.word	0x4000e400
 80096e8:	00010007 	.word	0x00010007

080096ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	691b      	ldr	r3, [r3, #16]
 8009702:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	f003 0302 	and.w	r3, r3, #2
 800970a:	2b00      	cmp	r3, #0
 800970c:	d020      	beq.n	8009750 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f003 0302 	and.w	r3, r3, #2
 8009714:	2b00      	cmp	r3, #0
 8009716:	d01b      	beq.n	8009750 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f06f 0202 	mvn.w	r2, #2
 8009720:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2201      	movs	r2, #1
 8009726:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	f003 0303 	and.w	r3, r3, #3
 8009732:	2b00      	cmp	r3, #0
 8009734:	d003      	beq.n	800973e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f9fe 	bl	8009b38 <HAL_TIM_IC_CaptureCallback>
 800973c:	e005      	b.n	800974a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f9f0 	bl	8009b24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 fa01 	bl	8009b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	f003 0304 	and.w	r3, r3, #4
 8009756:	2b00      	cmp	r3, #0
 8009758:	d020      	beq.n	800979c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f003 0304 	and.w	r3, r3, #4
 8009760:	2b00      	cmp	r3, #0
 8009762:	d01b      	beq.n	800979c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f06f 0204 	mvn.w	r2, #4
 800976c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2202      	movs	r2, #2
 8009772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	699b      	ldr	r3, [r3, #24]
 800977a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800977e:	2b00      	cmp	r3, #0
 8009780:	d003      	beq.n	800978a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 f9d8 	bl	8009b38 <HAL_TIM_IC_CaptureCallback>
 8009788:	e005      	b.n	8009796 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f9ca 	bl	8009b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 f9db 	bl	8009b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	f003 0308 	and.w	r3, r3, #8
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d020      	beq.n	80097e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f003 0308 	and.w	r3, r3, #8
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d01b      	beq.n	80097e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f06f 0208 	mvn.w	r2, #8
 80097b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2204      	movs	r2, #4
 80097be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	69db      	ldr	r3, [r3, #28]
 80097c6:	f003 0303 	and.w	r3, r3, #3
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d003      	beq.n	80097d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f9b2 	bl	8009b38 <HAL_TIM_IC_CaptureCallback>
 80097d4:	e005      	b.n	80097e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f9a4 	bl	8009b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 f9b5 	bl	8009b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	f003 0310 	and.w	r3, r3, #16
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d020      	beq.n	8009834 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f003 0310 	and.w	r3, r3, #16
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d01b      	beq.n	8009834 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f06f 0210 	mvn.w	r2, #16
 8009804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2208      	movs	r2, #8
 800980a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	69db      	ldr	r3, [r3, #28]
 8009812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009816:	2b00      	cmp	r3, #0
 8009818:	d003      	beq.n	8009822 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 f98c 	bl	8009b38 <HAL_TIM_IC_CaptureCallback>
 8009820:	e005      	b.n	800982e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f97e 	bl	8009b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 f98f 	bl	8009b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	f003 0301 	and.w	r3, r3, #1
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00c      	beq.n	8009858 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f003 0301 	and.w	r3, r3, #1
 8009844:	2b00      	cmp	r3, #0
 8009846:	d007      	beq.n	8009858 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f06f 0201 	mvn.w	r2, #1
 8009850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f7f7 fcac 	bl	80011b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800985e:	2b00      	cmp	r3, #0
 8009860:	d104      	bne.n	800986c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00c      	beq.n	8009886 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009872:	2b00      	cmp	r3, #0
 8009874:	d007      	beq.n	8009886 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800987e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 fdcb 	bl	800a41c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00c      	beq.n	80098aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009896:	2b00      	cmp	r3, #0
 8009898:	d007      	beq.n	80098aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80098a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 fdc3 	bl	800a430 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00c      	beq.n	80098ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d007      	beq.n	80098ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80098c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 f949 	bl	8009b60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	f003 0320 	and.w	r3, r3, #32
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00c      	beq.n	80098f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f003 0320 	and.w	r3, r3, #32
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d007      	beq.n	80098f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f06f 0220 	mvn.w	r2, #32
 80098ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 fd8b 	bl	800a408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80098f2:	bf00      	nop
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
	...

080098fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009908:	2300      	movs	r3, #0
 800990a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009912:	2b01      	cmp	r3, #1
 8009914:	d101      	bne.n	800991a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009916:	2302      	movs	r3, #2
 8009918:	e0ff      	b.n	8009b1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2201      	movs	r2, #1
 800991e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2b14      	cmp	r3, #20
 8009926:	f200 80f0 	bhi.w	8009b0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800992a:	a201      	add	r2, pc, #4	@ (adr r2, 8009930 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800992c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009930:	08009985 	.word	0x08009985
 8009934:	08009b0b 	.word	0x08009b0b
 8009938:	08009b0b 	.word	0x08009b0b
 800993c:	08009b0b 	.word	0x08009b0b
 8009940:	080099c5 	.word	0x080099c5
 8009944:	08009b0b 	.word	0x08009b0b
 8009948:	08009b0b 	.word	0x08009b0b
 800994c:	08009b0b 	.word	0x08009b0b
 8009950:	08009a07 	.word	0x08009a07
 8009954:	08009b0b 	.word	0x08009b0b
 8009958:	08009b0b 	.word	0x08009b0b
 800995c:	08009b0b 	.word	0x08009b0b
 8009960:	08009a47 	.word	0x08009a47
 8009964:	08009b0b 	.word	0x08009b0b
 8009968:	08009b0b 	.word	0x08009b0b
 800996c:	08009b0b 	.word	0x08009b0b
 8009970:	08009a89 	.word	0x08009a89
 8009974:	08009b0b 	.word	0x08009b0b
 8009978:	08009b0b 	.word	0x08009b0b
 800997c:	08009b0b 	.word	0x08009b0b
 8009980:	08009ac9 	.word	0x08009ac9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68b9      	ldr	r1, [r7, #8]
 800998a:	4618      	mov	r0, r3
 800998c:	f000 f9a4 	bl	8009cd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	699a      	ldr	r2, [r3, #24]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f042 0208 	orr.w	r2, r2, #8
 800999e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	699a      	ldr	r2, [r3, #24]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f022 0204 	bic.w	r2, r2, #4
 80099ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6999      	ldr	r1, [r3, #24]
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	691a      	ldr	r2, [r3, #16]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	619a      	str	r2, [r3, #24]
      break;
 80099c2:	e0a5      	b.n	8009b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68b9      	ldr	r1, [r7, #8]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 fa14 	bl	8009df8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	699a      	ldr	r2, [r3, #24]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	699a      	ldr	r2, [r3, #24]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80099ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6999      	ldr	r1, [r3, #24]
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	021a      	lsls	r2, r3, #8
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	430a      	orrs	r2, r1
 8009a02:	619a      	str	r2, [r3, #24]
      break;
 8009a04:	e084      	b.n	8009b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68b9      	ldr	r1, [r7, #8]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f000 fa7d 	bl	8009f0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	69da      	ldr	r2, [r3, #28]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f042 0208 	orr.w	r2, r2, #8
 8009a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	69da      	ldr	r2, [r3, #28]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f022 0204 	bic.w	r2, r2, #4
 8009a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	69d9      	ldr	r1, [r3, #28]
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	691a      	ldr	r2, [r3, #16]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	430a      	orrs	r2, r1
 8009a42:	61da      	str	r2, [r3, #28]
      break;
 8009a44:	e064      	b.n	8009b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68b9      	ldr	r1, [r7, #8]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f000 fae5 	bl	800a01c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	69da      	ldr	r2, [r3, #28]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	69da      	ldr	r2, [r3, #28]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	69d9      	ldr	r1, [r3, #28]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	021a      	lsls	r2, r3, #8
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	430a      	orrs	r2, r1
 8009a84:	61da      	str	r2, [r3, #28]
      break;
 8009a86:	e043      	b.n	8009b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68b9      	ldr	r1, [r7, #8]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 fb2e 	bl	800a0f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f042 0208 	orr.w	r2, r2, #8
 8009aa2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f022 0204 	bic.w	r2, r2, #4
 8009ab2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	691a      	ldr	r2, [r3, #16]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009ac6:	e023      	b.n	8009b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68b9      	ldr	r1, [r7, #8]
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f000 fb72 	bl	800a1b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ae2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009af2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	021a      	lsls	r2, r3, #8
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	430a      	orrs	r2, r1
 8009b06:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009b08:	e002      	b.n	8009b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8009b0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3718      	adds	r7, #24
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop

08009b24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b68:	bf00      	nop
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a4a      	ldr	r2, [pc, #296]	@ (8009cb0 <TIM_Base_SetConfig+0x13c>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d013      	beq.n	8009bb4 <TIM_Base_SetConfig+0x40>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b92:	d00f      	beq.n	8009bb4 <TIM_Base_SetConfig+0x40>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4a47      	ldr	r2, [pc, #284]	@ (8009cb4 <TIM_Base_SetConfig+0x140>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d00b      	beq.n	8009bb4 <TIM_Base_SetConfig+0x40>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a46      	ldr	r2, [pc, #280]	@ (8009cb8 <TIM_Base_SetConfig+0x144>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d007      	beq.n	8009bb4 <TIM_Base_SetConfig+0x40>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	4a45      	ldr	r2, [pc, #276]	@ (8009cbc <TIM_Base_SetConfig+0x148>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d003      	beq.n	8009bb4 <TIM_Base_SetConfig+0x40>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4a44      	ldr	r2, [pc, #272]	@ (8009cc0 <TIM_Base_SetConfig+0x14c>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d108      	bne.n	8009bc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4a39      	ldr	r2, [pc, #228]	@ (8009cb0 <TIM_Base_SetConfig+0x13c>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d027      	beq.n	8009c1e <TIM_Base_SetConfig+0xaa>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bd4:	d023      	beq.n	8009c1e <TIM_Base_SetConfig+0xaa>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4a36      	ldr	r2, [pc, #216]	@ (8009cb4 <TIM_Base_SetConfig+0x140>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d01f      	beq.n	8009c1e <TIM_Base_SetConfig+0xaa>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4a35      	ldr	r2, [pc, #212]	@ (8009cb8 <TIM_Base_SetConfig+0x144>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d01b      	beq.n	8009c1e <TIM_Base_SetConfig+0xaa>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4a34      	ldr	r2, [pc, #208]	@ (8009cbc <TIM_Base_SetConfig+0x148>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d017      	beq.n	8009c1e <TIM_Base_SetConfig+0xaa>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4a33      	ldr	r2, [pc, #204]	@ (8009cc0 <TIM_Base_SetConfig+0x14c>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d013      	beq.n	8009c1e <TIM_Base_SetConfig+0xaa>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4a32      	ldr	r2, [pc, #200]	@ (8009cc4 <TIM_Base_SetConfig+0x150>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d00f      	beq.n	8009c1e <TIM_Base_SetConfig+0xaa>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4a31      	ldr	r2, [pc, #196]	@ (8009cc8 <TIM_Base_SetConfig+0x154>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d00b      	beq.n	8009c1e <TIM_Base_SetConfig+0xaa>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a30      	ldr	r2, [pc, #192]	@ (8009ccc <TIM_Base_SetConfig+0x158>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d007      	beq.n	8009c1e <TIM_Base_SetConfig+0xaa>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a2f      	ldr	r2, [pc, #188]	@ (8009cd0 <TIM_Base_SetConfig+0x15c>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d003      	beq.n	8009c1e <TIM_Base_SetConfig+0xaa>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	4a2e      	ldr	r2, [pc, #184]	@ (8009cd4 <TIM_Base_SetConfig+0x160>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d108      	bne.n	8009c30 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	689a      	ldr	r2, [r3, #8]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a16      	ldr	r2, [pc, #88]	@ (8009cb0 <TIM_Base_SetConfig+0x13c>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d00f      	beq.n	8009c7c <TIM_Base_SetConfig+0x108>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4a18      	ldr	r2, [pc, #96]	@ (8009cc0 <TIM_Base_SetConfig+0x14c>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d00b      	beq.n	8009c7c <TIM_Base_SetConfig+0x108>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4a17      	ldr	r2, [pc, #92]	@ (8009cc4 <TIM_Base_SetConfig+0x150>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d007      	beq.n	8009c7c <TIM_Base_SetConfig+0x108>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a16      	ldr	r2, [pc, #88]	@ (8009cc8 <TIM_Base_SetConfig+0x154>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d003      	beq.n	8009c7c <TIM_Base_SetConfig+0x108>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a15      	ldr	r2, [pc, #84]	@ (8009ccc <TIM_Base_SetConfig+0x158>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d103      	bne.n	8009c84 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	691a      	ldr	r2, [r3, #16]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	f003 0301 	and.w	r3, r3, #1
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d105      	bne.n	8009ca2 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	f023 0201 	bic.w	r2, r3, #1
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	611a      	str	r2, [r3, #16]
  }
}
 8009ca2:	bf00      	nop
 8009ca4:	3714      	adds	r7, #20
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	40010000 	.word	0x40010000
 8009cb4:	40000400 	.word	0x40000400
 8009cb8:	40000800 	.word	0x40000800
 8009cbc:	40000c00 	.word	0x40000c00
 8009cc0:	40010400 	.word	0x40010400
 8009cc4:	40014000 	.word	0x40014000
 8009cc8:	40014400 	.word	0x40014400
 8009ccc:	40014800 	.word	0x40014800
 8009cd0:	4000e000 	.word	0x4000e000
 8009cd4:	4000e400 	.word	0x4000e400

08009cd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b087      	sub	sp, #28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a1b      	ldr	r3, [r3, #32]
 8009cec:	f023 0201 	bic.w	r2, r3, #1
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	4b37      	ldr	r3, [pc, #220]	@ (8009de0 <TIM_OC1_SetConfig+0x108>)
 8009d04:	4013      	ands	r3, r2
 8009d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f023 0303 	bic.w	r3, r3, #3
 8009d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	f023 0302 	bic.w	r3, r3, #2
 8009d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	697a      	ldr	r2, [r7, #20]
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a2d      	ldr	r2, [pc, #180]	@ (8009de4 <TIM_OC1_SetConfig+0x10c>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d00f      	beq.n	8009d54 <TIM_OC1_SetConfig+0x7c>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a2c      	ldr	r2, [pc, #176]	@ (8009de8 <TIM_OC1_SetConfig+0x110>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d00b      	beq.n	8009d54 <TIM_OC1_SetConfig+0x7c>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a2b      	ldr	r2, [pc, #172]	@ (8009dec <TIM_OC1_SetConfig+0x114>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d007      	beq.n	8009d54 <TIM_OC1_SetConfig+0x7c>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a2a      	ldr	r2, [pc, #168]	@ (8009df0 <TIM_OC1_SetConfig+0x118>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d003      	beq.n	8009d54 <TIM_OC1_SetConfig+0x7c>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a29      	ldr	r2, [pc, #164]	@ (8009df4 <TIM_OC1_SetConfig+0x11c>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d10c      	bne.n	8009d6e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	f023 0308 	bic.w	r3, r3, #8
 8009d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	697a      	ldr	r2, [r7, #20]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	f023 0304 	bic.w	r3, r3, #4
 8009d6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a1c      	ldr	r2, [pc, #112]	@ (8009de4 <TIM_OC1_SetConfig+0x10c>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d00f      	beq.n	8009d96 <TIM_OC1_SetConfig+0xbe>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a1b      	ldr	r2, [pc, #108]	@ (8009de8 <TIM_OC1_SetConfig+0x110>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d00b      	beq.n	8009d96 <TIM_OC1_SetConfig+0xbe>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a1a      	ldr	r2, [pc, #104]	@ (8009dec <TIM_OC1_SetConfig+0x114>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d007      	beq.n	8009d96 <TIM_OC1_SetConfig+0xbe>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a19      	ldr	r2, [pc, #100]	@ (8009df0 <TIM_OC1_SetConfig+0x118>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d003      	beq.n	8009d96 <TIM_OC1_SetConfig+0xbe>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a18      	ldr	r2, [pc, #96]	@ (8009df4 <TIM_OC1_SetConfig+0x11c>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d111      	bne.n	8009dba <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	693a      	ldr	r2, [r7, #16]
 8009dac:	4313      	orrs	r3, r2
 8009dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	699b      	ldr	r3, [r3, #24]
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	685a      	ldr	r2, [r3, #4]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	697a      	ldr	r2, [r7, #20]
 8009dd2:	621a      	str	r2, [r3, #32]
}
 8009dd4:	bf00      	nop
 8009dd6:	371c      	adds	r7, #28
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr
 8009de0:	fffeff8f 	.word	0xfffeff8f
 8009de4:	40010000 	.word	0x40010000
 8009de8:	40010400 	.word	0x40010400
 8009dec:	40014000 	.word	0x40014000
 8009df0:	40014400 	.word	0x40014400
 8009df4:	40014800 	.word	0x40014800

08009df8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b087      	sub	sp, #28
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a1b      	ldr	r3, [r3, #32]
 8009e06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a1b      	ldr	r3, [r3, #32]
 8009e0c:	f023 0210 	bic.w	r2, r3, #16
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	699b      	ldr	r3, [r3, #24]
 8009e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	4b34      	ldr	r3, [pc, #208]	@ (8009ef4 <TIM_OC2_SetConfig+0xfc>)
 8009e24:	4013      	ands	r3, r2
 8009e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	021b      	lsls	r3, r3, #8
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	f023 0320 	bic.w	r3, r3, #32
 8009e42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	011b      	lsls	r3, r3, #4
 8009e4a:	697a      	ldr	r2, [r7, #20]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4a29      	ldr	r2, [pc, #164]	@ (8009ef8 <TIM_OC2_SetConfig+0x100>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d003      	beq.n	8009e60 <TIM_OC2_SetConfig+0x68>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	4a28      	ldr	r2, [pc, #160]	@ (8009efc <TIM_OC2_SetConfig+0x104>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d10d      	bne.n	8009e7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	011b      	lsls	r3, r3, #4
 8009e6e:	697a      	ldr	r2, [r7, #20]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8009ef8 <TIM_OC2_SetConfig+0x100>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d00f      	beq.n	8009ea4 <TIM_OC2_SetConfig+0xac>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a1d      	ldr	r2, [pc, #116]	@ (8009efc <TIM_OC2_SetConfig+0x104>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d00b      	beq.n	8009ea4 <TIM_OC2_SetConfig+0xac>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8009f00 <TIM_OC2_SetConfig+0x108>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d007      	beq.n	8009ea4 <TIM_OC2_SetConfig+0xac>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4a1b      	ldr	r2, [pc, #108]	@ (8009f04 <TIM_OC2_SetConfig+0x10c>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d003      	beq.n	8009ea4 <TIM_OC2_SetConfig+0xac>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8009f08 <TIM_OC2_SetConfig+0x110>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d113      	bne.n	8009ecc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009eaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	695b      	ldr	r3, [r3, #20]
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	693a      	ldr	r2, [r7, #16]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	699b      	ldr	r3, [r3, #24]
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	693a      	ldr	r2, [r7, #16]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	693a      	ldr	r2, [r7, #16]
 8009ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	68fa      	ldr	r2, [r7, #12]
 8009ed6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	685a      	ldr	r2, [r3, #4]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	697a      	ldr	r2, [r7, #20]
 8009ee4:	621a      	str	r2, [r3, #32]
}
 8009ee6:	bf00      	nop
 8009ee8:	371c      	adds	r7, #28
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	feff8fff 	.word	0xfeff8fff
 8009ef8:	40010000 	.word	0x40010000
 8009efc:	40010400 	.word	0x40010400
 8009f00:	40014000 	.word	0x40014000
 8009f04:	40014400 	.word	0x40014400
 8009f08:	40014800 	.word	0x40014800

08009f0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b087      	sub	sp, #28
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a1b      	ldr	r3, [r3, #32]
 8009f1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a1b      	ldr	r3, [r3, #32]
 8009f20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	69db      	ldr	r3, [r3, #28]
 8009f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	4b33      	ldr	r3, [pc, #204]	@ (800a004 <TIM_OC3_SetConfig+0xf8>)
 8009f38:	4013      	ands	r3, r2
 8009f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f023 0303 	bic.w	r3, r3, #3
 8009f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	021b      	lsls	r3, r3, #8
 8009f5c:	697a      	ldr	r2, [r7, #20]
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a28      	ldr	r2, [pc, #160]	@ (800a008 <TIM_OC3_SetConfig+0xfc>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d003      	beq.n	8009f72 <TIM_OC3_SetConfig+0x66>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a27      	ldr	r2, [pc, #156]	@ (800a00c <TIM_OC3_SetConfig+0x100>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d10d      	bne.n	8009f8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009f78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	021b      	lsls	r3, r3, #8
 8009f80:	697a      	ldr	r2, [r7, #20]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4a1d      	ldr	r2, [pc, #116]	@ (800a008 <TIM_OC3_SetConfig+0xfc>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d00f      	beq.n	8009fb6 <TIM_OC3_SetConfig+0xaa>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	4a1c      	ldr	r2, [pc, #112]	@ (800a00c <TIM_OC3_SetConfig+0x100>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d00b      	beq.n	8009fb6 <TIM_OC3_SetConfig+0xaa>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4a1b      	ldr	r2, [pc, #108]	@ (800a010 <TIM_OC3_SetConfig+0x104>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d007      	beq.n	8009fb6 <TIM_OC3_SetConfig+0xaa>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	4a1a      	ldr	r2, [pc, #104]	@ (800a014 <TIM_OC3_SetConfig+0x108>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d003      	beq.n	8009fb6 <TIM_OC3_SetConfig+0xaa>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a19      	ldr	r2, [pc, #100]	@ (800a018 <TIM_OC3_SetConfig+0x10c>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d113      	bne.n	8009fde <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	695b      	ldr	r3, [r3, #20]
 8009fca:	011b      	lsls	r3, r3, #4
 8009fcc:	693a      	ldr	r2, [r7, #16]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	699b      	ldr	r3, [r3, #24]
 8009fd6:	011b      	lsls	r3, r3, #4
 8009fd8:	693a      	ldr	r2, [r7, #16]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	693a      	ldr	r2, [r7, #16]
 8009fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	685a      	ldr	r2, [r3, #4]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	697a      	ldr	r2, [r7, #20]
 8009ff6:	621a      	str	r2, [r3, #32]
}
 8009ff8:	bf00      	nop
 8009ffa:	371c      	adds	r7, #28
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr
 800a004:	fffeff8f 	.word	0xfffeff8f
 800a008:	40010000 	.word	0x40010000
 800a00c:	40010400 	.word	0x40010400
 800a010:	40014000 	.word	0x40014000
 800a014:	40014400 	.word	0x40014400
 800a018:	40014800 	.word	0x40014800

0800a01c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b087      	sub	sp, #28
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a1b      	ldr	r3, [r3, #32]
 800a02a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a1b      	ldr	r3, [r3, #32]
 800a030:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	69db      	ldr	r3, [r3, #28]
 800a042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	4b24      	ldr	r3, [pc, #144]	@ (800a0d8 <TIM_OC4_SetConfig+0xbc>)
 800a048:	4013      	ands	r3, r2
 800a04a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	021b      	lsls	r3, r3, #8
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	031b      	lsls	r3, r3, #12
 800a06e:	693a      	ldr	r2, [r7, #16]
 800a070:	4313      	orrs	r3, r2
 800a072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a19      	ldr	r2, [pc, #100]	@ (800a0dc <TIM_OC4_SetConfig+0xc0>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d00f      	beq.n	800a09c <TIM_OC4_SetConfig+0x80>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4a18      	ldr	r2, [pc, #96]	@ (800a0e0 <TIM_OC4_SetConfig+0xc4>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d00b      	beq.n	800a09c <TIM_OC4_SetConfig+0x80>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a17      	ldr	r2, [pc, #92]	@ (800a0e4 <TIM_OC4_SetConfig+0xc8>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d007      	beq.n	800a09c <TIM_OC4_SetConfig+0x80>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a16      	ldr	r2, [pc, #88]	@ (800a0e8 <TIM_OC4_SetConfig+0xcc>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d003      	beq.n	800a09c <TIM_OC4_SetConfig+0x80>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4a15      	ldr	r2, [pc, #84]	@ (800a0ec <TIM_OC4_SetConfig+0xd0>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d109      	bne.n	800a0b0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a0a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	695b      	ldr	r3, [r3, #20]
 800a0a8:	019b      	lsls	r3, r3, #6
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	697a      	ldr	r2, [r7, #20]
 800a0b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	685a      	ldr	r2, [r3, #4]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	693a      	ldr	r2, [r7, #16]
 800a0c8:	621a      	str	r2, [r3, #32]
}
 800a0ca:	bf00      	nop
 800a0cc:	371c      	adds	r7, #28
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr
 800a0d6:	bf00      	nop
 800a0d8:	feff8fff 	.word	0xfeff8fff
 800a0dc:	40010000 	.word	0x40010000
 800a0e0:	40010400 	.word	0x40010400
 800a0e4:	40014000 	.word	0x40014000
 800a0e8:	40014400 	.word	0x40014400
 800a0ec:	40014800 	.word	0x40014800

0800a0f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b087      	sub	sp, #28
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a1b      	ldr	r3, [r3, #32]
 800a0fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a1b      	ldr	r3, [r3, #32]
 800a104:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	4b21      	ldr	r3, [pc, #132]	@ (800a1a0 <TIM_OC5_SetConfig+0xb0>)
 800a11c:	4013      	ands	r3, r2
 800a11e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	68fa      	ldr	r2, [r7, #12]
 800a126:	4313      	orrs	r3, r2
 800a128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a130:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	041b      	lsls	r3, r3, #16
 800a138:	693a      	ldr	r2, [r7, #16]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a18      	ldr	r2, [pc, #96]	@ (800a1a4 <TIM_OC5_SetConfig+0xb4>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d00f      	beq.n	800a166 <TIM_OC5_SetConfig+0x76>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a17      	ldr	r2, [pc, #92]	@ (800a1a8 <TIM_OC5_SetConfig+0xb8>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d00b      	beq.n	800a166 <TIM_OC5_SetConfig+0x76>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a16      	ldr	r2, [pc, #88]	@ (800a1ac <TIM_OC5_SetConfig+0xbc>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d007      	beq.n	800a166 <TIM_OC5_SetConfig+0x76>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a15      	ldr	r2, [pc, #84]	@ (800a1b0 <TIM_OC5_SetConfig+0xc0>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d003      	beq.n	800a166 <TIM_OC5_SetConfig+0x76>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a14      	ldr	r2, [pc, #80]	@ (800a1b4 <TIM_OC5_SetConfig+0xc4>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d109      	bne.n	800a17a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a16c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	695b      	ldr	r3, [r3, #20]
 800a172:	021b      	lsls	r3, r3, #8
 800a174:	697a      	ldr	r2, [r7, #20]
 800a176:	4313      	orrs	r3, r2
 800a178:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	697a      	ldr	r2, [r7, #20]
 800a17e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	68fa      	ldr	r2, [r7, #12]
 800a184:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	685a      	ldr	r2, [r3, #4]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	693a      	ldr	r2, [r7, #16]
 800a192:	621a      	str	r2, [r3, #32]
}
 800a194:	bf00      	nop
 800a196:	371c      	adds	r7, #28
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	fffeff8f 	.word	0xfffeff8f
 800a1a4:	40010000 	.word	0x40010000
 800a1a8:	40010400 	.word	0x40010400
 800a1ac:	40014000 	.word	0x40014000
 800a1b0:	40014400 	.word	0x40014400
 800a1b4:	40014800 	.word	0x40014800

0800a1b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b087      	sub	sp, #28
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a1b      	ldr	r3, [r3, #32]
 800a1c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6a1b      	ldr	r3, [r3, #32]
 800a1cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	4b22      	ldr	r3, [pc, #136]	@ (800a26c <TIM_OC6_SetConfig+0xb4>)
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	021b      	lsls	r3, r3, #8
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a1fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	051b      	lsls	r3, r3, #20
 800a202:	693a      	ldr	r2, [r7, #16]
 800a204:	4313      	orrs	r3, r2
 800a206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a19      	ldr	r2, [pc, #100]	@ (800a270 <TIM_OC6_SetConfig+0xb8>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d00f      	beq.n	800a230 <TIM_OC6_SetConfig+0x78>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a18      	ldr	r2, [pc, #96]	@ (800a274 <TIM_OC6_SetConfig+0xbc>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d00b      	beq.n	800a230 <TIM_OC6_SetConfig+0x78>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a17      	ldr	r2, [pc, #92]	@ (800a278 <TIM_OC6_SetConfig+0xc0>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d007      	beq.n	800a230 <TIM_OC6_SetConfig+0x78>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a16      	ldr	r2, [pc, #88]	@ (800a27c <TIM_OC6_SetConfig+0xc4>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d003      	beq.n	800a230 <TIM_OC6_SetConfig+0x78>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a15      	ldr	r2, [pc, #84]	@ (800a280 <TIM_OC6_SetConfig+0xc8>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d109      	bne.n	800a244 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a236:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	695b      	ldr	r3, [r3, #20]
 800a23c:	029b      	lsls	r3, r3, #10
 800a23e:	697a      	ldr	r2, [r7, #20]
 800a240:	4313      	orrs	r3, r2
 800a242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	685a      	ldr	r2, [r3, #4]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	693a      	ldr	r2, [r7, #16]
 800a25c:	621a      	str	r2, [r3, #32]
}
 800a25e:	bf00      	nop
 800a260:	371c      	adds	r7, #28
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	feff8fff 	.word	0xfeff8fff
 800a270:	40010000 	.word	0x40010000
 800a274:	40010400 	.word	0x40010400
 800a278:	40014000 	.word	0x40014000
 800a27c:	40014400 	.word	0x40014400
 800a280:	40014800 	.word	0x40014800

0800a284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a284:	b480      	push	{r7}
 800a286:	b087      	sub	sp, #28
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	f003 031f 	and.w	r3, r3, #31
 800a296:	2201      	movs	r2, #1
 800a298:	fa02 f303 	lsl.w	r3, r2, r3
 800a29c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6a1a      	ldr	r2, [r3, #32]
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	43db      	mvns	r3, r3
 800a2a6:	401a      	ands	r2, r3
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6a1a      	ldr	r2, [r3, #32]
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	f003 031f 	and.w	r3, r3, #31
 800a2b6:	6879      	ldr	r1, [r7, #4]
 800a2b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a2bc:	431a      	orrs	r2, r3
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	621a      	str	r2, [r3, #32]
}
 800a2c2:	bf00      	nop
 800a2c4:	371c      	adds	r7, #28
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr
	...

0800a2d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d101      	bne.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	e077      	b.n	800a3d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a35      	ldr	r2, [pc, #212]	@ (800a3e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d004      	beq.n	800a31c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a34      	ldr	r2, [pc, #208]	@ (800a3e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d108      	bne.n	800a32e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a322:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a334:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	4313      	orrs	r3, r2
 800a33e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	68fa      	ldr	r2, [r7, #12]
 800a346:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a25      	ldr	r2, [pc, #148]	@ (800a3e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d02c      	beq.n	800a3ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a35a:	d027      	beq.n	800a3ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a22      	ldr	r2, [pc, #136]	@ (800a3ec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d022      	beq.n	800a3ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a21      	ldr	r2, [pc, #132]	@ (800a3f0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d01d      	beq.n	800a3ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a1f      	ldr	r2, [pc, #124]	@ (800a3f4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d018      	beq.n	800a3ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a1a      	ldr	r2, [pc, #104]	@ (800a3e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d013      	beq.n	800a3ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a1b      	ldr	r2, [pc, #108]	@ (800a3f8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d00e      	beq.n	800a3ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a1a      	ldr	r2, [pc, #104]	@ (800a3fc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d009      	beq.n	800a3ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a18      	ldr	r2, [pc, #96]	@ (800a400 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d004      	beq.n	800a3ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a17      	ldr	r2, [pc, #92]	@ (800a404 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d10c      	bne.n	800a3c6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	68ba      	ldr	r2, [r7, #8]
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68ba      	ldr	r2, [r7, #8]
 800a3c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3714      	adds	r7, #20
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr
 800a3e4:	40010000 	.word	0x40010000
 800a3e8:	40010400 	.word	0x40010400
 800a3ec:	40000400 	.word	0x40000400
 800a3f0:	40000800 	.word	0x40000800
 800a3f4:	40000c00 	.word	0x40000c00
 800a3f8:	40001800 	.word	0x40001800
 800a3fc:	40014000 	.word	0x40014000
 800a400:	4000e000 	.word	0x4000e000
 800a404:	4000e400 	.word	0x4000e400

0800a408 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a410:	bf00      	nop
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a424:	bf00      	nop
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a438:	bf00      	nop
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d101      	bne.n	800a456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	e042      	b.n	800a4dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d106      	bne.n	800a46e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7f6 ffe5 	bl	8001438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2224      	movs	r2, #36	@ 0x24
 800a472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f022 0201 	bic.w	r2, r2, #1
 800a484:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d002      	beq.n	800a494 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 ff22 	bl	800b2d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 f8b3 	bl	800a600 <UART_SetConfig>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d101      	bne.n	800a4a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e01b      	b.n	800a4dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	685a      	ldr	r2, [r3, #4]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a4b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	689a      	ldr	r2, [r3, #8]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a4c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f042 0201 	orr.w	r2, r2, #1
 800a4d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 ffa1 	bl	800b41c <UART_CheckIdleState>
 800a4da:	4603      	mov	r3, r0
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3708      	adds	r7, #8
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b08a      	sub	sp, #40	@ 0x28
 800a4e8:	af02      	add	r7, sp, #8
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	60b9      	str	r1, [r7, #8]
 800a4ee:	603b      	str	r3, [r7, #0]
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4fa:	2b20      	cmp	r3, #32
 800a4fc:	d17b      	bne.n	800a5f6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d002      	beq.n	800a50a <HAL_UART_Transmit+0x26>
 800a504:	88fb      	ldrh	r3, [r7, #6]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d101      	bne.n	800a50e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e074      	b.n	800a5f8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2200      	movs	r2, #0
 800a512:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2221      	movs	r2, #33	@ 0x21
 800a51a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a51e:	f7f7 fbf5 	bl	8001d0c <HAL_GetTick>
 800a522:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	88fa      	ldrh	r2, [r7, #6]
 800a528:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	88fa      	ldrh	r2, [r7, #6]
 800a530:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a53c:	d108      	bne.n	800a550 <HAL_UART_Transmit+0x6c>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	691b      	ldr	r3, [r3, #16]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d104      	bne.n	800a550 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a546:	2300      	movs	r3, #0
 800a548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	61bb      	str	r3, [r7, #24]
 800a54e:	e003      	b.n	800a558 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a554:	2300      	movs	r3, #0
 800a556:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a558:	e030      	b.n	800a5bc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	2200      	movs	r2, #0
 800a562:	2180      	movs	r1, #128	@ 0x80
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f001 f803 	bl	800b570 <UART_WaitOnFlagUntilTimeout>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d005      	beq.n	800a57c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2220      	movs	r2, #32
 800a574:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a578:	2303      	movs	r3, #3
 800a57a:	e03d      	b.n	800a5f8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10b      	bne.n	800a59a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	881b      	ldrh	r3, [r3, #0]
 800a586:	461a      	mov	r2, r3
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a590:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	3302      	adds	r3, #2
 800a596:	61bb      	str	r3, [r7, #24]
 800a598:	e007      	b.n	800a5aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	781a      	ldrb	r2, [r3, #0]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	3b01      	subs	r3, #1
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d1c8      	bne.n	800a55a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	9300      	str	r3, [sp, #0]
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	2140      	movs	r1, #64	@ 0x40
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f000 ffcc 	bl	800b570 <UART_WaitOnFlagUntilTimeout>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d005      	beq.n	800a5ea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2220      	movs	r2, #32
 800a5e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	e006      	b.n	800a5f8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2220      	movs	r2, #32
 800a5ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	e000      	b.n	800a5f8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a5f6:	2302      	movs	r3, #2
  }
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3720      	adds	r7, #32
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a604:	b092      	sub	sp, #72	@ 0x48
 800a606:	af00      	add	r7, sp, #0
 800a608:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	689a      	ldr	r2, [r3, #8]
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	691b      	ldr	r3, [r3, #16]
 800a618:	431a      	orrs	r2, r3
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	431a      	orrs	r2, r3
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	69db      	ldr	r3, [r3, #28]
 800a624:	4313      	orrs	r3, r2
 800a626:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	4bbe      	ldr	r3, [pc, #760]	@ (800a928 <UART_SetConfig+0x328>)
 800a630:	4013      	ands	r3, r2
 800a632:	697a      	ldr	r2, [r7, #20]
 800a634:	6812      	ldr	r2, [r2, #0]
 800a636:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a638:	430b      	orrs	r3, r1
 800a63a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	68da      	ldr	r2, [r3, #12]
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	430a      	orrs	r2, r1
 800a650:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	699b      	ldr	r3, [r3, #24]
 800a656:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4ab3      	ldr	r2, [pc, #716]	@ (800a92c <UART_SetConfig+0x32c>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d004      	beq.n	800a66c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	6a1b      	ldr	r3, [r3, #32]
 800a666:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a668:	4313      	orrs	r3, r2
 800a66a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	689a      	ldr	r2, [r3, #8]
 800a672:	4baf      	ldr	r3, [pc, #700]	@ (800a930 <UART_SetConfig+0x330>)
 800a674:	4013      	ands	r3, r2
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	6812      	ldr	r2, [r2, #0]
 800a67a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a67c:	430b      	orrs	r3, r1
 800a67e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a686:	f023 010f 	bic.w	r1, r3, #15
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	430a      	orrs	r2, r1
 800a694:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4aa6      	ldr	r2, [pc, #664]	@ (800a934 <UART_SetConfig+0x334>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d177      	bne.n	800a790 <UART_SetConfig+0x190>
 800a6a0:	4ba5      	ldr	r3, [pc, #660]	@ (800a938 <UART_SetConfig+0x338>)
 800a6a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a6a8:	2b28      	cmp	r3, #40	@ 0x28
 800a6aa:	d86d      	bhi.n	800a788 <UART_SetConfig+0x188>
 800a6ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a6b4 <UART_SetConfig+0xb4>)
 800a6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b2:	bf00      	nop
 800a6b4:	0800a759 	.word	0x0800a759
 800a6b8:	0800a789 	.word	0x0800a789
 800a6bc:	0800a789 	.word	0x0800a789
 800a6c0:	0800a789 	.word	0x0800a789
 800a6c4:	0800a789 	.word	0x0800a789
 800a6c8:	0800a789 	.word	0x0800a789
 800a6cc:	0800a789 	.word	0x0800a789
 800a6d0:	0800a789 	.word	0x0800a789
 800a6d4:	0800a761 	.word	0x0800a761
 800a6d8:	0800a789 	.word	0x0800a789
 800a6dc:	0800a789 	.word	0x0800a789
 800a6e0:	0800a789 	.word	0x0800a789
 800a6e4:	0800a789 	.word	0x0800a789
 800a6e8:	0800a789 	.word	0x0800a789
 800a6ec:	0800a789 	.word	0x0800a789
 800a6f0:	0800a789 	.word	0x0800a789
 800a6f4:	0800a769 	.word	0x0800a769
 800a6f8:	0800a789 	.word	0x0800a789
 800a6fc:	0800a789 	.word	0x0800a789
 800a700:	0800a789 	.word	0x0800a789
 800a704:	0800a789 	.word	0x0800a789
 800a708:	0800a789 	.word	0x0800a789
 800a70c:	0800a789 	.word	0x0800a789
 800a710:	0800a789 	.word	0x0800a789
 800a714:	0800a771 	.word	0x0800a771
 800a718:	0800a789 	.word	0x0800a789
 800a71c:	0800a789 	.word	0x0800a789
 800a720:	0800a789 	.word	0x0800a789
 800a724:	0800a789 	.word	0x0800a789
 800a728:	0800a789 	.word	0x0800a789
 800a72c:	0800a789 	.word	0x0800a789
 800a730:	0800a789 	.word	0x0800a789
 800a734:	0800a779 	.word	0x0800a779
 800a738:	0800a789 	.word	0x0800a789
 800a73c:	0800a789 	.word	0x0800a789
 800a740:	0800a789 	.word	0x0800a789
 800a744:	0800a789 	.word	0x0800a789
 800a748:	0800a789 	.word	0x0800a789
 800a74c:	0800a789 	.word	0x0800a789
 800a750:	0800a789 	.word	0x0800a789
 800a754:	0800a781 	.word	0x0800a781
 800a758:	2301      	movs	r3, #1
 800a75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a75e:	e326      	b.n	800adae <UART_SetConfig+0x7ae>
 800a760:	2304      	movs	r3, #4
 800a762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a766:	e322      	b.n	800adae <UART_SetConfig+0x7ae>
 800a768:	2308      	movs	r3, #8
 800a76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a76e:	e31e      	b.n	800adae <UART_SetConfig+0x7ae>
 800a770:	2310      	movs	r3, #16
 800a772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a776:	e31a      	b.n	800adae <UART_SetConfig+0x7ae>
 800a778:	2320      	movs	r3, #32
 800a77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a77e:	e316      	b.n	800adae <UART_SetConfig+0x7ae>
 800a780:	2340      	movs	r3, #64	@ 0x40
 800a782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a786:	e312      	b.n	800adae <UART_SetConfig+0x7ae>
 800a788:	2380      	movs	r3, #128	@ 0x80
 800a78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a78e:	e30e      	b.n	800adae <UART_SetConfig+0x7ae>
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a69      	ldr	r2, [pc, #420]	@ (800a93c <UART_SetConfig+0x33c>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d130      	bne.n	800a7fc <UART_SetConfig+0x1fc>
 800a79a:	4b67      	ldr	r3, [pc, #412]	@ (800a938 <UART_SetConfig+0x338>)
 800a79c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a79e:	f003 0307 	and.w	r3, r3, #7
 800a7a2:	2b05      	cmp	r3, #5
 800a7a4:	d826      	bhi.n	800a7f4 <UART_SetConfig+0x1f4>
 800a7a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a7ac <UART_SetConfig+0x1ac>)
 800a7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ac:	0800a7c5 	.word	0x0800a7c5
 800a7b0:	0800a7cd 	.word	0x0800a7cd
 800a7b4:	0800a7d5 	.word	0x0800a7d5
 800a7b8:	0800a7dd 	.word	0x0800a7dd
 800a7bc:	0800a7e5 	.word	0x0800a7e5
 800a7c0:	0800a7ed 	.word	0x0800a7ed
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ca:	e2f0      	b.n	800adae <UART_SetConfig+0x7ae>
 800a7cc:	2304      	movs	r3, #4
 800a7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7d2:	e2ec      	b.n	800adae <UART_SetConfig+0x7ae>
 800a7d4:	2308      	movs	r3, #8
 800a7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7da:	e2e8      	b.n	800adae <UART_SetConfig+0x7ae>
 800a7dc:	2310      	movs	r3, #16
 800a7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7e2:	e2e4      	b.n	800adae <UART_SetConfig+0x7ae>
 800a7e4:	2320      	movs	r3, #32
 800a7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ea:	e2e0      	b.n	800adae <UART_SetConfig+0x7ae>
 800a7ec:	2340      	movs	r3, #64	@ 0x40
 800a7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7f2:	e2dc      	b.n	800adae <UART_SetConfig+0x7ae>
 800a7f4:	2380      	movs	r3, #128	@ 0x80
 800a7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7fa:	e2d8      	b.n	800adae <UART_SetConfig+0x7ae>
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a4f      	ldr	r2, [pc, #316]	@ (800a940 <UART_SetConfig+0x340>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d130      	bne.n	800a868 <UART_SetConfig+0x268>
 800a806:	4b4c      	ldr	r3, [pc, #304]	@ (800a938 <UART_SetConfig+0x338>)
 800a808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a80a:	f003 0307 	and.w	r3, r3, #7
 800a80e:	2b05      	cmp	r3, #5
 800a810:	d826      	bhi.n	800a860 <UART_SetConfig+0x260>
 800a812:	a201      	add	r2, pc, #4	@ (adr r2, 800a818 <UART_SetConfig+0x218>)
 800a814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a818:	0800a831 	.word	0x0800a831
 800a81c:	0800a839 	.word	0x0800a839
 800a820:	0800a841 	.word	0x0800a841
 800a824:	0800a849 	.word	0x0800a849
 800a828:	0800a851 	.word	0x0800a851
 800a82c:	0800a859 	.word	0x0800a859
 800a830:	2300      	movs	r3, #0
 800a832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a836:	e2ba      	b.n	800adae <UART_SetConfig+0x7ae>
 800a838:	2304      	movs	r3, #4
 800a83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a83e:	e2b6      	b.n	800adae <UART_SetConfig+0x7ae>
 800a840:	2308      	movs	r3, #8
 800a842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a846:	e2b2      	b.n	800adae <UART_SetConfig+0x7ae>
 800a848:	2310      	movs	r3, #16
 800a84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a84e:	e2ae      	b.n	800adae <UART_SetConfig+0x7ae>
 800a850:	2320      	movs	r3, #32
 800a852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a856:	e2aa      	b.n	800adae <UART_SetConfig+0x7ae>
 800a858:	2340      	movs	r3, #64	@ 0x40
 800a85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a85e:	e2a6      	b.n	800adae <UART_SetConfig+0x7ae>
 800a860:	2380      	movs	r3, #128	@ 0x80
 800a862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a866:	e2a2      	b.n	800adae <UART_SetConfig+0x7ae>
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a35      	ldr	r2, [pc, #212]	@ (800a944 <UART_SetConfig+0x344>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d130      	bne.n	800a8d4 <UART_SetConfig+0x2d4>
 800a872:	4b31      	ldr	r3, [pc, #196]	@ (800a938 <UART_SetConfig+0x338>)
 800a874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a876:	f003 0307 	and.w	r3, r3, #7
 800a87a:	2b05      	cmp	r3, #5
 800a87c:	d826      	bhi.n	800a8cc <UART_SetConfig+0x2cc>
 800a87e:	a201      	add	r2, pc, #4	@ (adr r2, 800a884 <UART_SetConfig+0x284>)
 800a880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a884:	0800a89d 	.word	0x0800a89d
 800a888:	0800a8a5 	.word	0x0800a8a5
 800a88c:	0800a8ad 	.word	0x0800a8ad
 800a890:	0800a8b5 	.word	0x0800a8b5
 800a894:	0800a8bd 	.word	0x0800a8bd
 800a898:	0800a8c5 	.word	0x0800a8c5
 800a89c:	2300      	movs	r3, #0
 800a89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8a2:	e284      	b.n	800adae <UART_SetConfig+0x7ae>
 800a8a4:	2304      	movs	r3, #4
 800a8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8aa:	e280      	b.n	800adae <UART_SetConfig+0x7ae>
 800a8ac:	2308      	movs	r3, #8
 800a8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8b2:	e27c      	b.n	800adae <UART_SetConfig+0x7ae>
 800a8b4:	2310      	movs	r3, #16
 800a8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ba:	e278      	b.n	800adae <UART_SetConfig+0x7ae>
 800a8bc:	2320      	movs	r3, #32
 800a8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8c2:	e274      	b.n	800adae <UART_SetConfig+0x7ae>
 800a8c4:	2340      	movs	r3, #64	@ 0x40
 800a8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ca:	e270      	b.n	800adae <UART_SetConfig+0x7ae>
 800a8cc:	2380      	movs	r3, #128	@ 0x80
 800a8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8d2:	e26c      	b.n	800adae <UART_SetConfig+0x7ae>
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a1b      	ldr	r2, [pc, #108]	@ (800a948 <UART_SetConfig+0x348>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d142      	bne.n	800a964 <UART_SetConfig+0x364>
 800a8de:	4b16      	ldr	r3, [pc, #88]	@ (800a938 <UART_SetConfig+0x338>)
 800a8e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8e2:	f003 0307 	and.w	r3, r3, #7
 800a8e6:	2b05      	cmp	r3, #5
 800a8e8:	d838      	bhi.n	800a95c <UART_SetConfig+0x35c>
 800a8ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a8f0 <UART_SetConfig+0x2f0>)
 800a8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f0:	0800a909 	.word	0x0800a909
 800a8f4:	0800a911 	.word	0x0800a911
 800a8f8:	0800a919 	.word	0x0800a919
 800a8fc:	0800a921 	.word	0x0800a921
 800a900:	0800a94d 	.word	0x0800a94d
 800a904:	0800a955 	.word	0x0800a955
 800a908:	2300      	movs	r3, #0
 800a90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a90e:	e24e      	b.n	800adae <UART_SetConfig+0x7ae>
 800a910:	2304      	movs	r3, #4
 800a912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a916:	e24a      	b.n	800adae <UART_SetConfig+0x7ae>
 800a918:	2308      	movs	r3, #8
 800a91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a91e:	e246      	b.n	800adae <UART_SetConfig+0x7ae>
 800a920:	2310      	movs	r3, #16
 800a922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a926:	e242      	b.n	800adae <UART_SetConfig+0x7ae>
 800a928:	cfff69f3 	.word	0xcfff69f3
 800a92c:	58000c00 	.word	0x58000c00
 800a930:	11fff4ff 	.word	0x11fff4ff
 800a934:	40011000 	.word	0x40011000
 800a938:	58024400 	.word	0x58024400
 800a93c:	40004400 	.word	0x40004400
 800a940:	40004800 	.word	0x40004800
 800a944:	40004c00 	.word	0x40004c00
 800a948:	40005000 	.word	0x40005000
 800a94c:	2320      	movs	r3, #32
 800a94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a952:	e22c      	b.n	800adae <UART_SetConfig+0x7ae>
 800a954:	2340      	movs	r3, #64	@ 0x40
 800a956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a95a:	e228      	b.n	800adae <UART_SetConfig+0x7ae>
 800a95c:	2380      	movs	r3, #128	@ 0x80
 800a95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a962:	e224      	b.n	800adae <UART_SetConfig+0x7ae>
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4ab1      	ldr	r2, [pc, #708]	@ (800ac30 <UART_SetConfig+0x630>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d176      	bne.n	800aa5c <UART_SetConfig+0x45c>
 800a96e:	4bb1      	ldr	r3, [pc, #708]	@ (800ac34 <UART_SetConfig+0x634>)
 800a970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a972:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a976:	2b28      	cmp	r3, #40	@ 0x28
 800a978:	d86c      	bhi.n	800aa54 <UART_SetConfig+0x454>
 800a97a:	a201      	add	r2, pc, #4	@ (adr r2, 800a980 <UART_SetConfig+0x380>)
 800a97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a980:	0800aa25 	.word	0x0800aa25
 800a984:	0800aa55 	.word	0x0800aa55
 800a988:	0800aa55 	.word	0x0800aa55
 800a98c:	0800aa55 	.word	0x0800aa55
 800a990:	0800aa55 	.word	0x0800aa55
 800a994:	0800aa55 	.word	0x0800aa55
 800a998:	0800aa55 	.word	0x0800aa55
 800a99c:	0800aa55 	.word	0x0800aa55
 800a9a0:	0800aa2d 	.word	0x0800aa2d
 800a9a4:	0800aa55 	.word	0x0800aa55
 800a9a8:	0800aa55 	.word	0x0800aa55
 800a9ac:	0800aa55 	.word	0x0800aa55
 800a9b0:	0800aa55 	.word	0x0800aa55
 800a9b4:	0800aa55 	.word	0x0800aa55
 800a9b8:	0800aa55 	.word	0x0800aa55
 800a9bc:	0800aa55 	.word	0x0800aa55
 800a9c0:	0800aa35 	.word	0x0800aa35
 800a9c4:	0800aa55 	.word	0x0800aa55
 800a9c8:	0800aa55 	.word	0x0800aa55
 800a9cc:	0800aa55 	.word	0x0800aa55
 800a9d0:	0800aa55 	.word	0x0800aa55
 800a9d4:	0800aa55 	.word	0x0800aa55
 800a9d8:	0800aa55 	.word	0x0800aa55
 800a9dc:	0800aa55 	.word	0x0800aa55
 800a9e0:	0800aa3d 	.word	0x0800aa3d
 800a9e4:	0800aa55 	.word	0x0800aa55
 800a9e8:	0800aa55 	.word	0x0800aa55
 800a9ec:	0800aa55 	.word	0x0800aa55
 800a9f0:	0800aa55 	.word	0x0800aa55
 800a9f4:	0800aa55 	.word	0x0800aa55
 800a9f8:	0800aa55 	.word	0x0800aa55
 800a9fc:	0800aa55 	.word	0x0800aa55
 800aa00:	0800aa45 	.word	0x0800aa45
 800aa04:	0800aa55 	.word	0x0800aa55
 800aa08:	0800aa55 	.word	0x0800aa55
 800aa0c:	0800aa55 	.word	0x0800aa55
 800aa10:	0800aa55 	.word	0x0800aa55
 800aa14:	0800aa55 	.word	0x0800aa55
 800aa18:	0800aa55 	.word	0x0800aa55
 800aa1c:	0800aa55 	.word	0x0800aa55
 800aa20:	0800aa4d 	.word	0x0800aa4d
 800aa24:	2301      	movs	r3, #1
 800aa26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa2a:	e1c0      	b.n	800adae <UART_SetConfig+0x7ae>
 800aa2c:	2304      	movs	r3, #4
 800aa2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa32:	e1bc      	b.n	800adae <UART_SetConfig+0x7ae>
 800aa34:	2308      	movs	r3, #8
 800aa36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa3a:	e1b8      	b.n	800adae <UART_SetConfig+0x7ae>
 800aa3c:	2310      	movs	r3, #16
 800aa3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa42:	e1b4      	b.n	800adae <UART_SetConfig+0x7ae>
 800aa44:	2320      	movs	r3, #32
 800aa46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa4a:	e1b0      	b.n	800adae <UART_SetConfig+0x7ae>
 800aa4c:	2340      	movs	r3, #64	@ 0x40
 800aa4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa52:	e1ac      	b.n	800adae <UART_SetConfig+0x7ae>
 800aa54:	2380      	movs	r3, #128	@ 0x80
 800aa56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa5a:	e1a8      	b.n	800adae <UART_SetConfig+0x7ae>
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a75      	ldr	r2, [pc, #468]	@ (800ac38 <UART_SetConfig+0x638>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d130      	bne.n	800aac8 <UART_SetConfig+0x4c8>
 800aa66:	4b73      	ldr	r3, [pc, #460]	@ (800ac34 <UART_SetConfig+0x634>)
 800aa68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa6a:	f003 0307 	and.w	r3, r3, #7
 800aa6e:	2b05      	cmp	r3, #5
 800aa70:	d826      	bhi.n	800aac0 <UART_SetConfig+0x4c0>
 800aa72:	a201      	add	r2, pc, #4	@ (adr r2, 800aa78 <UART_SetConfig+0x478>)
 800aa74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa78:	0800aa91 	.word	0x0800aa91
 800aa7c:	0800aa99 	.word	0x0800aa99
 800aa80:	0800aaa1 	.word	0x0800aaa1
 800aa84:	0800aaa9 	.word	0x0800aaa9
 800aa88:	0800aab1 	.word	0x0800aab1
 800aa8c:	0800aab9 	.word	0x0800aab9
 800aa90:	2300      	movs	r3, #0
 800aa92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa96:	e18a      	b.n	800adae <UART_SetConfig+0x7ae>
 800aa98:	2304      	movs	r3, #4
 800aa9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa9e:	e186      	b.n	800adae <UART_SetConfig+0x7ae>
 800aaa0:	2308      	movs	r3, #8
 800aaa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaa6:	e182      	b.n	800adae <UART_SetConfig+0x7ae>
 800aaa8:	2310      	movs	r3, #16
 800aaaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaae:	e17e      	b.n	800adae <UART_SetConfig+0x7ae>
 800aab0:	2320      	movs	r3, #32
 800aab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aab6:	e17a      	b.n	800adae <UART_SetConfig+0x7ae>
 800aab8:	2340      	movs	r3, #64	@ 0x40
 800aaba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aabe:	e176      	b.n	800adae <UART_SetConfig+0x7ae>
 800aac0:	2380      	movs	r3, #128	@ 0x80
 800aac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aac6:	e172      	b.n	800adae <UART_SetConfig+0x7ae>
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a5b      	ldr	r2, [pc, #364]	@ (800ac3c <UART_SetConfig+0x63c>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d130      	bne.n	800ab34 <UART_SetConfig+0x534>
 800aad2:	4b58      	ldr	r3, [pc, #352]	@ (800ac34 <UART_SetConfig+0x634>)
 800aad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aad6:	f003 0307 	and.w	r3, r3, #7
 800aada:	2b05      	cmp	r3, #5
 800aadc:	d826      	bhi.n	800ab2c <UART_SetConfig+0x52c>
 800aade:	a201      	add	r2, pc, #4	@ (adr r2, 800aae4 <UART_SetConfig+0x4e4>)
 800aae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae4:	0800aafd 	.word	0x0800aafd
 800aae8:	0800ab05 	.word	0x0800ab05
 800aaec:	0800ab0d 	.word	0x0800ab0d
 800aaf0:	0800ab15 	.word	0x0800ab15
 800aaf4:	0800ab1d 	.word	0x0800ab1d
 800aaf8:	0800ab25 	.word	0x0800ab25
 800aafc:	2300      	movs	r3, #0
 800aafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab02:	e154      	b.n	800adae <UART_SetConfig+0x7ae>
 800ab04:	2304      	movs	r3, #4
 800ab06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab0a:	e150      	b.n	800adae <UART_SetConfig+0x7ae>
 800ab0c:	2308      	movs	r3, #8
 800ab0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab12:	e14c      	b.n	800adae <UART_SetConfig+0x7ae>
 800ab14:	2310      	movs	r3, #16
 800ab16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab1a:	e148      	b.n	800adae <UART_SetConfig+0x7ae>
 800ab1c:	2320      	movs	r3, #32
 800ab1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab22:	e144      	b.n	800adae <UART_SetConfig+0x7ae>
 800ab24:	2340      	movs	r3, #64	@ 0x40
 800ab26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab2a:	e140      	b.n	800adae <UART_SetConfig+0x7ae>
 800ab2c:	2380      	movs	r3, #128	@ 0x80
 800ab2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab32:	e13c      	b.n	800adae <UART_SetConfig+0x7ae>
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a41      	ldr	r2, [pc, #260]	@ (800ac40 <UART_SetConfig+0x640>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	f040 8082 	bne.w	800ac44 <UART_SetConfig+0x644>
 800ab40:	4b3c      	ldr	r3, [pc, #240]	@ (800ac34 <UART_SetConfig+0x634>)
 800ab42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab48:	2b28      	cmp	r3, #40	@ 0x28
 800ab4a:	d86d      	bhi.n	800ac28 <UART_SetConfig+0x628>
 800ab4c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab54 <UART_SetConfig+0x554>)
 800ab4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab52:	bf00      	nop
 800ab54:	0800abf9 	.word	0x0800abf9
 800ab58:	0800ac29 	.word	0x0800ac29
 800ab5c:	0800ac29 	.word	0x0800ac29
 800ab60:	0800ac29 	.word	0x0800ac29
 800ab64:	0800ac29 	.word	0x0800ac29
 800ab68:	0800ac29 	.word	0x0800ac29
 800ab6c:	0800ac29 	.word	0x0800ac29
 800ab70:	0800ac29 	.word	0x0800ac29
 800ab74:	0800ac01 	.word	0x0800ac01
 800ab78:	0800ac29 	.word	0x0800ac29
 800ab7c:	0800ac29 	.word	0x0800ac29
 800ab80:	0800ac29 	.word	0x0800ac29
 800ab84:	0800ac29 	.word	0x0800ac29
 800ab88:	0800ac29 	.word	0x0800ac29
 800ab8c:	0800ac29 	.word	0x0800ac29
 800ab90:	0800ac29 	.word	0x0800ac29
 800ab94:	0800ac09 	.word	0x0800ac09
 800ab98:	0800ac29 	.word	0x0800ac29
 800ab9c:	0800ac29 	.word	0x0800ac29
 800aba0:	0800ac29 	.word	0x0800ac29
 800aba4:	0800ac29 	.word	0x0800ac29
 800aba8:	0800ac29 	.word	0x0800ac29
 800abac:	0800ac29 	.word	0x0800ac29
 800abb0:	0800ac29 	.word	0x0800ac29
 800abb4:	0800ac11 	.word	0x0800ac11
 800abb8:	0800ac29 	.word	0x0800ac29
 800abbc:	0800ac29 	.word	0x0800ac29
 800abc0:	0800ac29 	.word	0x0800ac29
 800abc4:	0800ac29 	.word	0x0800ac29
 800abc8:	0800ac29 	.word	0x0800ac29
 800abcc:	0800ac29 	.word	0x0800ac29
 800abd0:	0800ac29 	.word	0x0800ac29
 800abd4:	0800ac19 	.word	0x0800ac19
 800abd8:	0800ac29 	.word	0x0800ac29
 800abdc:	0800ac29 	.word	0x0800ac29
 800abe0:	0800ac29 	.word	0x0800ac29
 800abe4:	0800ac29 	.word	0x0800ac29
 800abe8:	0800ac29 	.word	0x0800ac29
 800abec:	0800ac29 	.word	0x0800ac29
 800abf0:	0800ac29 	.word	0x0800ac29
 800abf4:	0800ac21 	.word	0x0800ac21
 800abf8:	2301      	movs	r3, #1
 800abfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abfe:	e0d6      	b.n	800adae <UART_SetConfig+0x7ae>
 800ac00:	2304      	movs	r3, #4
 800ac02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac06:	e0d2      	b.n	800adae <UART_SetConfig+0x7ae>
 800ac08:	2308      	movs	r3, #8
 800ac0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac0e:	e0ce      	b.n	800adae <UART_SetConfig+0x7ae>
 800ac10:	2310      	movs	r3, #16
 800ac12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac16:	e0ca      	b.n	800adae <UART_SetConfig+0x7ae>
 800ac18:	2320      	movs	r3, #32
 800ac1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac1e:	e0c6      	b.n	800adae <UART_SetConfig+0x7ae>
 800ac20:	2340      	movs	r3, #64	@ 0x40
 800ac22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac26:	e0c2      	b.n	800adae <UART_SetConfig+0x7ae>
 800ac28:	2380      	movs	r3, #128	@ 0x80
 800ac2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac2e:	e0be      	b.n	800adae <UART_SetConfig+0x7ae>
 800ac30:	40011400 	.word	0x40011400
 800ac34:	58024400 	.word	0x58024400
 800ac38:	40007800 	.word	0x40007800
 800ac3c:	40007c00 	.word	0x40007c00
 800ac40:	40011800 	.word	0x40011800
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4aad      	ldr	r2, [pc, #692]	@ (800af00 <UART_SetConfig+0x900>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d176      	bne.n	800ad3c <UART_SetConfig+0x73c>
 800ac4e:	4bad      	ldr	r3, [pc, #692]	@ (800af04 <UART_SetConfig+0x904>)
 800ac50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac56:	2b28      	cmp	r3, #40	@ 0x28
 800ac58:	d86c      	bhi.n	800ad34 <UART_SetConfig+0x734>
 800ac5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac60 <UART_SetConfig+0x660>)
 800ac5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac60:	0800ad05 	.word	0x0800ad05
 800ac64:	0800ad35 	.word	0x0800ad35
 800ac68:	0800ad35 	.word	0x0800ad35
 800ac6c:	0800ad35 	.word	0x0800ad35
 800ac70:	0800ad35 	.word	0x0800ad35
 800ac74:	0800ad35 	.word	0x0800ad35
 800ac78:	0800ad35 	.word	0x0800ad35
 800ac7c:	0800ad35 	.word	0x0800ad35
 800ac80:	0800ad0d 	.word	0x0800ad0d
 800ac84:	0800ad35 	.word	0x0800ad35
 800ac88:	0800ad35 	.word	0x0800ad35
 800ac8c:	0800ad35 	.word	0x0800ad35
 800ac90:	0800ad35 	.word	0x0800ad35
 800ac94:	0800ad35 	.word	0x0800ad35
 800ac98:	0800ad35 	.word	0x0800ad35
 800ac9c:	0800ad35 	.word	0x0800ad35
 800aca0:	0800ad15 	.word	0x0800ad15
 800aca4:	0800ad35 	.word	0x0800ad35
 800aca8:	0800ad35 	.word	0x0800ad35
 800acac:	0800ad35 	.word	0x0800ad35
 800acb0:	0800ad35 	.word	0x0800ad35
 800acb4:	0800ad35 	.word	0x0800ad35
 800acb8:	0800ad35 	.word	0x0800ad35
 800acbc:	0800ad35 	.word	0x0800ad35
 800acc0:	0800ad1d 	.word	0x0800ad1d
 800acc4:	0800ad35 	.word	0x0800ad35
 800acc8:	0800ad35 	.word	0x0800ad35
 800accc:	0800ad35 	.word	0x0800ad35
 800acd0:	0800ad35 	.word	0x0800ad35
 800acd4:	0800ad35 	.word	0x0800ad35
 800acd8:	0800ad35 	.word	0x0800ad35
 800acdc:	0800ad35 	.word	0x0800ad35
 800ace0:	0800ad25 	.word	0x0800ad25
 800ace4:	0800ad35 	.word	0x0800ad35
 800ace8:	0800ad35 	.word	0x0800ad35
 800acec:	0800ad35 	.word	0x0800ad35
 800acf0:	0800ad35 	.word	0x0800ad35
 800acf4:	0800ad35 	.word	0x0800ad35
 800acf8:	0800ad35 	.word	0x0800ad35
 800acfc:	0800ad35 	.word	0x0800ad35
 800ad00:	0800ad2d 	.word	0x0800ad2d
 800ad04:	2301      	movs	r3, #1
 800ad06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad0a:	e050      	b.n	800adae <UART_SetConfig+0x7ae>
 800ad0c:	2304      	movs	r3, #4
 800ad0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad12:	e04c      	b.n	800adae <UART_SetConfig+0x7ae>
 800ad14:	2308      	movs	r3, #8
 800ad16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad1a:	e048      	b.n	800adae <UART_SetConfig+0x7ae>
 800ad1c:	2310      	movs	r3, #16
 800ad1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad22:	e044      	b.n	800adae <UART_SetConfig+0x7ae>
 800ad24:	2320      	movs	r3, #32
 800ad26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad2a:	e040      	b.n	800adae <UART_SetConfig+0x7ae>
 800ad2c:	2340      	movs	r3, #64	@ 0x40
 800ad2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad32:	e03c      	b.n	800adae <UART_SetConfig+0x7ae>
 800ad34:	2380      	movs	r3, #128	@ 0x80
 800ad36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad3a:	e038      	b.n	800adae <UART_SetConfig+0x7ae>
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a71      	ldr	r2, [pc, #452]	@ (800af08 <UART_SetConfig+0x908>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d130      	bne.n	800ada8 <UART_SetConfig+0x7a8>
 800ad46:	4b6f      	ldr	r3, [pc, #444]	@ (800af04 <UART_SetConfig+0x904>)
 800ad48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad4a:	f003 0307 	and.w	r3, r3, #7
 800ad4e:	2b05      	cmp	r3, #5
 800ad50:	d826      	bhi.n	800ada0 <UART_SetConfig+0x7a0>
 800ad52:	a201      	add	r2, pc, #4	@ (adr r2, 800ad58 <UART_SetConfig+0x758>)
 800ad54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad58:	0800ad71 	.word	0x0800ad71
 800ad5c:	0800ad79 	.word	0x0800ad79
 800ad60:	0800ad81 	.word	0x0800ad81
 800ad64:	0800ad89 	.word	0x0800ad89
 800ad68:	0800ad91 	.word	0x0800ad91
 800ad6c:	0800ad99 	.word	0x0800ad99
 800ad70:	2302      	movs	r3, #2
 800ad72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad76:	e01a      	b.n	800adae <UART_SetConfig+0x7ae>
 800ad78:	2304      	movs	r3, #4
 800ad7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad7e:	e016      	b.n	800adae <UART_SetConfig+0x7ae>
 800ad80:	2308      	movs	r3, #8
 800ad82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad86:	e012      	b.n	800adae <UART_SetConfig+0x7ae>
 800ad88:	2310      	movs	r3, #16
 800ad8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad8e:	e00e      	b.n	800adae <UART_SetConfig+0x7ae>
 800ad90:	2320      	movs	r3, #32
 800ad92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad96:	e00a      	b.n	800adae <UART_SetConfig+0x7ae>
 800ad98:	2340      	movs	r3, #64	@ 0x40
 800ad9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad9e:	e006      	b.n	800adae <UART_SetConfig+0x7ae>
 800ada0:	2380      	movs	r3, #128	@ 0x80
 800ada2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ada6:	e002      	b.n	800adae <UART_SetConfig+0x7ae>
 800ada8:	2380      	movs	r3, #128	@ 0x80
 800adaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a55      	ldr	r2, [pc, #340]	@ (800af08 <UART_SetConfig+0x908>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	f040 80f8 	bne.w	800afaa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800adba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800adbe:	2b20      	cmp	r3, #32
 800adc0:	dc46      	bgt.n	800ae50 <UART_SetConfig+0x850>
 800adc2:	2b02      	cmp	r3, #2
 800adc4:	db75      	blt.n	800aeb2 <UART_SetConfig+0x8b2>
 800adc6:	3b02      	subs	r3, #2
 800adc8:	2b1e      	cmp	r3, #30
 800adca:	d872      	bhi.n	800aeb2 <UART_SetConfig+0x8b2>
 800adcc:	a201      	add	r2, pc, #4	@ (adr r2, 800add4 <UART_SetConfig+0x7d4>)
 800adce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add2:	bf00      	nop
 800add4:	0800ae57 	.word	0x0800ae57
 800add8:	0800aeb3 	.word	0x0800aeb3
 800addc:	0800ae5f 	.word	0x0800ae5f
 800ade0:	0800aeb3 	.word	0x0800aeb3
 800ade4:	0800aeb3 	.word	0x0800aeb3
 800ade8:	0800aeb3 	.word	0x0800aeb3
 800adec:	0800ae6f 	.word	0x0800ae6f
 800adf0:	0800aeb3 	.word	0x0800aeb3
 800adf4:	0800aeb3 	.word	0x0800aeb3
 800adf8:	0800aeb3 	.word	0x0800aeb3
 800adfc:	0800aeb3 	.word	0x0800aeb3
 800ae00:	0800aeb3 	.word	0x0800aeb3
 800ae04:	0800aeb3 	.word	0x0800aeb3
 800ae08:	0800aeb3 	.word	0x0800aeb3
 800ae0c:	0800ae7f 	.word	0x0800ae7f
 800ae10:	0800aeb3 	.word	0x0800aeb3
 800ae14:	0800aeb3 	.word	0x0800aeb3
 800ae18:	0800aeb3 	.word	0x0800aeb3
 800ae1c:	0800aeb3 	.word	0x0800aeb3
 800ae20:	0800aeb3 	.word	0x0800aeb3
 800ae24:	0800aeb3 	.word	0x0800aeb3
 800ae28:	0800aeb3 	.word	0x0800aeb3
 800ae2c:	0800aeb3 	.word	0x0800aeb3
 800ae30:	0800aeb3 	.word	0x0800aeb3
 800ae34:	0800aeb3 	.word	0x0800aeb3
 800ae38:	0800aeb3 	.word	0x0800aeb3
 800ae3c:	0800aeb3 	.word	0x0800aeb3
 800ae40:	0800aeb3 	.word	0x0800aeb3
 800ae44:	0800aeb3 	.word	0x0800aeb3
 800ae48:	0800aeb3 	.word	0x0800aeb3
 800ae4c:	0800aea5 	.word	0x0800aea5
 800ae50:	2b40      	cmp	r3, #64	@ 0x40
 800ae52:	d02a      	beq.n	800aeaa <UART_SetConfig+0x8aa>
 800ae54:	e02d      	b.n	800aeb2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ae56:	f7fd fc79 	bl	800874c <HAL_RCCEx_GetD3PCLK1Freq>
 800ae5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae5c:	e02f      	b.n	800aebe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7fd fc88 	bl	8008778 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae6c:	e027      	b.n	800aebe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae6e:	f107 0318 	add.w	r3, r7, #24
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fd fdd4 	bl	8008a20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae7c:	e01f      	b.n	800aebe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae7e:	4b21      	ldr	r3, [pc, #132]	@ (800af04 <UART_SetConfig+0x904>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f003 0320 	and.w	r3, r3, #32
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d009      	beq.n	800ae9e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae8a:	4b1e      	ldr	r3, [pc, #120]	@ (800af04 <UART_SetConfig+0x904>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	08db      	lsrs	r3, r3, #3
 800ae90:	f003 0303 	and.w	r3, r3, #3
 800ae94:	4a1d      	ldr	r2, [pc, #116]	@ (800af0c <UART_SetConfig+0x90c>)
 800ae96:	fa22 f303 	lsr.w	r3, r2, r3
 800ae9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae9c:	e00f      	b.n	800aebe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ae9e:	4b1b      	ldr	r3, [pc, #108]	@ (800af0c <UART_SetConfig+0x90c>)
 800aea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aea2:	e00c      	b.n	800aebe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aea4:	4b1a      	ldr	r3, [pc, #104]	@ (800af10 <UART_SetConfig+0x910>)
 800aea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aea8:	e009      	b.n	800aebe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aeaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aeae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeb0:	e005      	b.n	800aebe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aebc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	f000 81ee 	beq.w	800b2a2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeca:	4a12      	ldr	r2, [pc, #72]	@ (800af14 <UART_SetConfig+0x914>)
 800aecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aed0:	461a      	mov	r2, r3
 800aed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aed4:	fbb3 f3f2 	udiv	r3, r3, r2
 800aed8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	685a      	ldr	r2, [r3, #4]
 800aede:	4613      	mov	r3, r2
 800aee0:	005b      	lsls	r3, r3, #1
 800aee2:	4413      	add	r3, r2
 800aee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d305      	bcc.n	800aef6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aef0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d910      	bls.n	800af18 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800aef6:	2301      	movs	r3, #1
 800aef8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aefc:	e1d1      	b.n	800b2a2 <UART_SetConfig+0xca2>
 800aefe:	bf00      	nop
 800af00:	40011c00 	.word	0x40011c00
 800af04:	58024400 	.word	0x58024400
 800af08:	58000c00 	.word	0x58000c00
 800af0c:	03d09000 	.word	0x03d09000
 800af10:	003d0900 	.word	0x003d0900
 800af14:	080224bc 	.word	0x080224bc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af1a:	2200      	movs	r2, #0
 800af1c:	60bb      	str	r3, [r7, #8]
 800af1e:	60fa      	str	r2, [r7, #12]
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af24:	4ac0      	ldr	r2, [pc, #768]	@ (800b228 <UART_SetConfig+0xc28>)
 800af26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	2200      	movs	r2, #0
 800af2e:	603b      	str	r3, [r7, #0]
 800af30:	607a      	str	r2, [r7, #4]
 800af32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af3a:	f7f5 fa41 	bl	80003c0 <__aeabi_uldivmod>
 800af3e:	4602      	mov	r2, r0
 800af40:	460b      	mov	r3, r1
 800af42:	4610      	mov	r0, r2
 800af44:	4619      	mov	r1, r3
 800af46:	f04f 0200 	mov.w	r2, #0
 800af4a:	f04f 0300 	mov.w	r3, #0
 800af4e:	020b      	lsls	r3, r1, #8
 800af50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800af54:	0202      	lsls	r2, r0, #8
 800af56:	6979      	ldr	r1, [r7, #20]
 800af58:	6849      	ldr	r1, [r1, #4]
 800af5a:	0849      	lsrs	r1, r1, #1
 800af5c:	2000      	movs	r0, #0
 800af5e:	460c      	mov	r4, r1
 800af60:	4605      	mov	r5, r0
 800af62:	eb12 0804 	adds.w	r8, r2, r4
 800af66:	eb43 0905 	adc.w	r9, r3, r5
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	2200      	movs	r2, #0
 800af70:	469a      	mov	sl, r3
 800af72:	4693      	mov	fp, r2
 800af74:	4652      	mov	r2, sl
 800af76:	465b      	mov	r3, fp
 800af78:	4640      	mov	r0, r8
 800af7a:	4649      	mov	r1, r9
 800af7c:	f7f5 fa20 	bl	80003c0 <__aeabi_uldivmod>
 800af80:	4602      	mov	r2, r0
 800af82:	460b      	mov	r3, r1
 800af84:	4613      	mov	r3, r2
 800af86:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800af88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af8e:	d308      	bcc.n	800afa2 <UART_SetConfig+0x9a2>
 800af90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af96:	d204      	bcs.n	800afa2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af9e:	60da      	str	r2, [r3, #12]
 800afa0:	e17f      	b.n	800b2a2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800afa2:	2301      	movs	r3, #1
 800afa4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800afa8:	e17b      	b.n	800b2a2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	69db      	ldr	r3, [r3, #28]
 800afae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800afb2:	f040 80bd 	bne.w	800b130 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800afb6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800afba:	2b20      	cmp	r3, #32
 800afbc:	dc48      	bgt.n	800b050 <UART_SetConfig+0xa50>
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	db7b      	blt.n	800b0ba <UART_SetConfig+0xaba>
 800afc2:	2b20      	cmp	r3, #32
 800afc4:	d879      	bhi.n	800b0ba <UART_SetConfig+0xaba>
 800afc6:	a201      	add	r2, pc, #4	@ (adr r2, 800afcc <UART_SetConfig+0x9cc>)
 800afc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afcc:	0800b057 	.word	0x0800b057
 800afd0:	0800b05f 	.word	0x0800b05f
 800afd4:	0800b0bb 	.word	0x0800b0bb
 800afd8:	0800b0bb 	.word	0x0800b0bb
 800afdc:	0800b067 	.word	0x0800b067
 800afe0:	0800b0bb 	.word	0x0800b0bb
 800afe4:	0800b0bb 	.word	0x0800b0bb
 800afe8:	0800b0bb 	.word	0x0800b0bb
 800afec:	0800b077 	.word	0x0800b077
 800aff0:	0800b0bb 	.word	0x0800b0bb
 800aff4:	0800b0bb 	.word	0x0800b0bb
 800aff8:	0800b0bb 	.word	0x0800b0bb
 800affc:	0800b0bb 	.word	0x0800b0bb
 800b000:	0800b0bb 	.word	0x0800b0bb
 800b004:	0800b0bb 	.word	0x0800b0bb
 800b008:	0800b0bb 	.word	0x0800b0bb
 800b00c:	0800b087 	.word	0x0800b087
 800b010:	0800b0bb 	.word	0x0800b0bb
 800b014:	0800b0bb 	.word	0x0800b0bb
 800b018:	0800b0bb 	.word	0x0800b0bb
 800b01c:	0800b0bb 	.word	0x0800b0bb
 800b020:	0800b0bb 	.word	0x0800b0bb
 800b024:	0800b0bb 	.word	0x0800b0bb
 800b028:	0800b0bb 	.word	0x0800b0bb
 800b02c:	0800b0bb 	.word	0x0800b0bb
 800b030:	0800b0bb 	.word	0x0800b0bb
 800b034:	0800b0bb 	.word	0x0800b0bb
 800b038:	0800b0bb 	.word	0x0800b0bb
 800b03c:	0800b0bb 	.word	0x0800b0bb
 800b040:	0800b0bb 	.word	0x0800b0bb
 800b044:	0800b0bb 	.word	0x0800b0bb
 800b048:	0800b0bb 	.word	0x0800b0bb
 800b04c:	0800b0ad 	.word	0x0800b0ad
 800b050:	2b40      	cmp	r3, #64	@ 0x40
 800b052:	d02e      	beq.n	800b0b2 <UART_SetConfig+0xab2>
 800b054:	e031      	b.n	800b0ba <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b056:	f7fb fc99 	bl	800698c <HAL_RCC_GetPCLK1Freq>
 800b05a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b05c:	e033      	b.n	800b0c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b05e:	f7fb fcab 	bl	80069b8 <HAL_RCC_GetPCLK2Freq>
 800b062:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b064:	e02f      	b.n	800b0c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b066:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7fd fb84 	bl	8008778 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b074:	e027      	b.n	800b0c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b076:	f107 0318 	add.w	r3, r7, #24
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7fd fcd0 	bl	8008a20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b084:	e01f      	b.n	800b0c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b086:	4b69      	ldr	r3, [pc, #420]	@ (800b22c <UART_SetConfig+0xc2c>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f003 0320 	and.w	r3, r3, #32
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d009      	beq.n	800b0a6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b092:	4b66      	ldr	r3, [pc, #408]	@ (800b22c <UART_SetConfig+0xc2c>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	08db      	lsrs	r3, r3, #3
 800b098:	f003 0303 	and.w	r3, r3, #3
 800b09c:	4a64      	ldr	r2, [pc, #400]	@ (800b230 <UART_SetConfig+0xc30>)
 800b09e:	fa22 f303 	lsr.w	r3, r2, r3
 800b0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b0a4:	e00f      	b.n	800b0c6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b0a6:	4b62      	ldr	r3, [pc, #392]	@ (800b230 <UART_SetConfig+0xc30>)
 800b0a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0aa:	e00c      	b.n	800b0c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b0ac:	4b61      	ldr	r3, [pc, #388]	@ (800b234 <UART_SetConfig+0xc34>)
 800b0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0b0:	e009      	b.n	800b0c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0b8:	e005      	b.n	800b0c6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b0c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b0c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f000 80ea 	beq.w	800b2a2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0d2:	4a55      	ldr	r2, [pc, #340]	@ (800b228 <UART_SetConfig+0xc28>)
 800b0d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0d8:	461a      	mov	r2, r3
 800b0da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0e0:	005a      	lsls	r2, r3, #1
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	085b      	lsrs	r3, r3, #1
 800b0e8:	441a      	add	r2, r3
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f6:	2b0f      	cmp	r3, #15
 800b0f8:	d916      	bls.n	800b128 <UART_SetConfig+0xb28>
 800b0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b100:	d212      	bcs.n	800b128 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b104:	b29b      	uxth	r3, r3
 800b106:	f023 030f 	bic.w	r3, r3, #15
 800b10a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b10e:	085b      	lsrs	r3, r3, #1
 800b110:	b29b      	uxth	r3, r3
 800b112:	f003 0307 	and.w	r3, r3, #7
 800b116:	b29a      	uxth	r2, r3
 800b118:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b11a:	4313      	orrs	r3, r2
 800b11c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b124:	60da      	str	r2, [r3, #12]
 800b126:	e0bc      	b.n	800b2a2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b128:	2301      	movs	r3, #1
 800b12a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b12e:	e0b8      	b.n	800b2a2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b130:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b134:	2b20      	cmp	r3, #32
 800b136:	dc4b      	bgt.n	800b1d0 <UART_SetConfig+0xbd0>
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f2c0 8087 	blt.w	800b24c <UART_SetConfig+0xc4c>
 800b13e:	2b20      	cmp	r3, #32
 800b140:	f200 8084 	bhi.w	800b24c <UART_SetConfig+0xc4c>
 800b144:	a201      	add	r2, pc, #4	@ (adr r2, 800b14c <UART_SetConfig+0xb4c>)
 800b146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14a:	bf00      	nop
 800b14c:	0800b1d7 	.word	0x0800b1d7
 800b150:	0800b1df 	.word	0x0800b1df
 800b154:	0800b24d 	.word	0x0800b24d
 800b158:	0800b24d 	.word	0x0800b24d
 800b15c:	0800b1e7 	.word	0x0800b1e7
 800b160:	0800b24d 	.word	0x0800b24d
 800b164:	0800b24d 	.word	0x0800b24d
 800b168:	0800b24d 	.word	0x0800b24d
 800b16c:	0800b1f7 	.word	0x0800b1f7
 800b170:	0800b24d 	.word	0x0800b24d
 800b174:	0800b24d 	.word	0x0800b24d
 800b178:	0800b24d 	.word	0x0800b24d
 800b17c:	0800b24d 	.word	0x0800b24d
 800b180:	0800b24d 	.word	0x0800b24d
 800b184:	0800b24d 	.word	0x0800b24d
 800b188:	0800b24d 	.word	0x0800b24d
 800b18c:	0800b207 	.word	0x0800b207
 800b190:	0800b24d 	.word	0x0800b24d
 800b194:	0800b24d 	.word	0x0800b24d
 800b198:	0800b24d 	.word	0x0800b24d
 800b19c:	0800b24d 	.word	0x0800b24d
 800b1a0:	0800b24d 	.word	0x0800b24d
 800b1a4:	0800b24d 	.word	0x0800b24d
 800b1a8:	0800b24d 	.word	0x0800b24d
 800b1ac:	0800b24d 	.word	0x0800b24d
 800b1b0:	0800b24d 	.word	0x0800b24d
 800b1b4:	0800b24d 	.word	0x0800b24d
 800b1b8:	0800b24d 	.word	0x0800b24d
 800b1bc:	0800b24d 	.word	0x0800b24d
 800b1c0:	0800b24d 	.word	0x0800b24d
 800b1c4:	0800b24d 	.word	0x0800b24d
 800b1c8:	0800b24d 	.word	0x0800b24d
 800b1cc:	0800b23f 	.word	0x0800b23f
 800b1d0:	2b40      	cmp	r3, #64	@ 0x40
 800b1d2:	d037      	beq.n	800b244 <UART_SetConfig+0xc44>
 800b1d4:	e03a      	b.n	800b24c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1d6:	f7fb fbd9 	bl	800698c <HAL_RCC_GetPCLK1Freq>
 800b1da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b1dc:	e03c      	b.n	800b258 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b1de:	f7fb fbeb 	bl	80069b8 <HAL_RCC_GetPCLK2Freq>
 800b1e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b1e4:	e038      	b.n	800b258 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fd fac4 	bl	8008778 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1f4:	e030      	b.n	800b258 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1f6:	f107 0318 	add.w	r3, r7, #24
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fd fc10 	bl	8008a20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b204:	e028      	b.n	800b258 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b206:	4b09      	ldr	r3, [pc, #36]	@ (800b22c <UART_SetConfig+0xc2c>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f003 0320 	and.w	r3, r3, #32
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d012      	beq.n	800b238 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b212:	4b06      	ldr	r3, [pc, #24]	@ (800b22c <UART_SetConfig+0xc2c>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	08db      	lsrs	r3, r3, #3
 800b218:	f003 0303 	and.w	r3, r3, #3
 800b21c:	4a04      	ldr	r2, [pc, #16]	@ (800b230 <UART_SetConfig+0xc30>)
 800b21e:	fa22 f303 	lsr.w	r3, r2, r3
 800b222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b224:	e018      	b.n	800b258 <UART_SetConfig+0xc58>
 800b226:	bf00      	nop
 800b228:	080224bc 	.word	0x080224bc
 800b22c:	58024400 	.word	0x58024400
 800b230:	03d09000 	.word	0x03d09000
 800b234:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b238:	4b24      	ldr	r3, [pc, #144]	@ (800b2cc <UART_SetConfig+0xccc>)
 800b23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b23c:	e00c      	b.n	800b258 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b23e:	4b24      	ldr	r3, [pc, #144]	@ (800b2d0 <UART_SetConfig+0xcd0>)
 800b240:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b242:	e009      	b.n	800b258 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b244:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b24a:	e005      	b.n	800b258 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b24c:	2300      	movs	r3, #0
 800b24e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b250:	2301      	movs	r3, #1
 800b252:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b256:	bf00      	nop
    }

    if (pclk != 0U)
 800b258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d021      	beq.n	800b2a2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b262:	4a1c      	ldr	r2, [pc, #112]	@ (800b2d4 <UART_SetConfig+0xcd4>)
 800b264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b268:	461a      	mov	r2, r3
 800b26a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b26c:	fbb3 f2f2 	udiv	r2, r3, r2
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	085b      	lsrs	r3, r3, #1
 800b276:	441a      	add	r2, r3
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b280:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b284:	2b0f      	cmp	r3, #15
 800b286:	d909      	bls.n	800b29c <UART_SetConfig+0xc9c>
 800b288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b28a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b28e:	d205      	bcs.n	800b29c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b292:	b29a      	uxth	r2, r3
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	60da      	str	r2, [r3, #12]
 800b29a:	e002      	b.n	800b2a2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b2be:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3748      	adds	r7, #72	@ 0x48
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2cc:	03d09000 	.word	0x03d09000
 800b2d0:	003d0900 	.word	0x003d0900
 800b2d4:	080224bc 	.word	0x080224bc

0800b2d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2e4:	f003 0308 	and.w	r3, r3, #8
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d00a      	beq.n	800b302 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	430a      	orrs	r2, r1
 800b300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b306:	f003 0301 	and.w	r3, r3, #1
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d00a      	beq.n	800b324 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	430a      	orrs	r2, r1
 800b322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b328:	f003 0302 	and.w	r3, r3, #2
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d00a      	beq.n	800b346 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	430a      	orrs	r2, r1
 800b344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b34a:	f003 0304 	and.w	r3, r3, #4
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00a      	beq.n	800b368 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	430a      	orrs	r2, r1
 800b366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b36c:	f003 0310 	and.w	r3, r3, #16
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00a      	beq.n	800b38a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	430a      	orrs	r2, r1
 800b388:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b38e:	f003 0320 	and.w	r3, r3, #32
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00a      	beq.n	800b3ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	430a      	orrs	r2, r1
 800b3aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d01a      	beq.n	800b3ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	430a      	orrs	r2, r1
 800b3cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3d6:	d10a      	bne.n	800b3ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	430a      	orrs	r2, r1
 800b3ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00a      	beq.n	800b410 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	430a      	orrs	r2, r1
 800b40e:	605a      	str	r2, [r3, #4]
  }
}
 800b410:	bf00      	nop
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b098      	sub	sp, #96	@ 0x60
 800b420:	af02      	add	r7, sp, #8
 800b422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b42c:	f7f6 fc6e 	bl	8001d0c <HAL_GetTick>
 800b430:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f003 0308 	and.w	r3, r3, #8
 800b43c:	2b08      	cmp	r3, #8
 800b43e:	d12f      	bne.n	800b4a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b440:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b448:	2200      	movs	r2, #0
 800b44a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 f88e 	bl	800b570 <UART_WaitOnFlagUntilTimeout>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d022      	beq.n	800b4a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b462:	e853 3f00 	ldrex	r3, [r3]
 800b466:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b46a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b46e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	461a      	mov	r2, r3
 800b476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b478:	647b      	str	r3, [r7, #68]	@ 0x44
 800b47a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b47c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b47e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b480:	e841 2300 	strex	r3, r2, [r1]
 800b484:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1e6      	bne.n	800b45a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2220      	movs	r2, #32
 800b490:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b49c:	2303      	movs	r3, #3
 800b49e:	e063      	b.n	800b568 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f003 0304 	and.w	r3, r3, #4
 800b4aa:	2b04      	cmp	r3, #4
 800b4ac:	d149      	bne.n	800b542 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b4b2:	9300      	str	r3, [sp, #0]
 800b4b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 f857 	bl	800b570 <UART_WaitOnFlagUntilTimeout>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d03c      	beq.n	800b542 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d0:	e853 3f00 	ldrex	r3, [r3]
 800b4d4:	623b      	str	r3, [r7, #32]
   return(result);
 800b4d6:	6a3b      	ldr	r3, [r7, #32]
 800b4d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b4dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4ee:	e841 2300 	strex	r3, r2, [r1]
 800b4f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1e6      	bne.n	800b4c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	3308      	adds	r3, #8
 800b500:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	e853 3f00 	ldrex	r3, [r3]
 800b508:	60fb      	str	r3, [r7, #12]
   return(result);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f023 0301 	bic.w	r3, r3, #1
 800b510:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	3308      	adds	r3, #8
 800b518:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b51a:	61fa      	str	r2, [r7, #28]
 800b51c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51e:	69b9      	ldr	r1, [r7, #24]
 800b520:	69fa      	ldr	r2, [r7, #28]
 800b522:	e841 2300 	strex	r3, r2, [r1]
 800b526:	617b      	str	r3, [r7, #20]
   return(result);
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1e5      	bne.n	800b4fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2220      	movs	r2, #32
 800b532:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b53e:	2303      	movs	r3, #3
 800b540:	e012      	b.n	800b568 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2220      	movs	r2, #32
 800b546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2220      	movs	r2, #32
 800b54e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2200      	movs	r2, #0
 800b556:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3758      	adds	r7, #88	@ 0x58
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	603b      	str	r3, [r7, #0]
 800b57c:	4613      	mov	r3, r2
 800b57e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b580:	e04f      	b.n	800b622 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b582:	69bb      	ldr	r3, [r7, #24]
 800b584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b588:	d04b      	beq.n	800b622 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b58a:	f7f6 fbbf 	bl	8001d0c <HAL_GetTick>
 800b58e:	4602      	mov	r2, r0
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	1ad3      	subs	r3, r2, r3
 800b594:	69ba      	ldr	r2, [r7, #24]
 800b596:	429a      	cmp	r2, r3
 800b598:	d302      	bcc.n	800b5a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b59a:	69bb      	ldr	r3, [r7, #24]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d101      	bne.n	800b5a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	e04e      	b.n	800b642 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f003 0304 	and.w	r3, r3, #4
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d037      	beq.n	800b622 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	2b80      	cmp	r3, #128	@ 0x80
 800b5b6:	d034      	beq.n	800b622 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	2b40      	cmp	r3, #64	@ 0x40
 800b5bc:	d031      	beq.n	800b622 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	69db      	ldr	r3, [r3, #28]
 800b5c4:	f003 0308 	and.w	r3, r3, #8
 800b5c8:	2b08      	cmp	r3, #8
 800b5ca:	d110      	bne.n	800b5ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2208      	movs	r2, #8
 800b5d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f000 f839 	bl	800b64c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2208      	movs	r2, #8
 800b5de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e029      	b.n	800b642 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	69db      	ldr	r3, [r3, #28]
 800b5f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b5f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b5fc:	d111      	bne.n	800b622 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b606:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b608:	68f8      	ldr	r0, [r7, #12]
 800b60a:	f000 f81f 	bl	800b64c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2220      	movs	r2, #32
 800b612:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2200      	movs	r2, #0
 800b61a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b61e:	2303      	movs	r3, #3
 800b620:	e00f      	b.n	800b642 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	69da      	ldr	r2, [r3, #28]
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	4013      	ands	r3, r2
 800b62c:	68ba      	ldr	r2, [r7, #8]
 800b62e:	429a      	cmp	r2, r3
 800b630:	bf0c      	ite	eq
 800b632:	2301      	moveq	r3, #1
 800b634:	2300      	movne	r3, #0
 800b636:	b2db      	uxtb	r3, r3
 800b638:	461a      	mov	r2, r3
 800b63a:	79fb      	ldrb	r3, [r7, #7]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d0a0      	beq.n	800b582 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
	...

0800b64c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b095      	sub	sp, #84	@ 0x54
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b65a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b65c:	e853 3f00 	ldrex	r3, [r3]
 800b660:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b664:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b668:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	461a      	mov	r2, r3
 800b670:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b672:	643b      	str	r3, [r7, #64]	@ 0x40
 800b674:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b676:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b678:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b67a:	e841 2300 	strex	r3, r2, [r1]
 800b67e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b682:	2b00      	cmp	r3, #0
 800b684:	d1e6      	bne.n	800b654 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	3308      	adds	r3, #8
 800b68c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b68e:	6a3b      	ldr	r3, [r7, #32]
 800b690:	e853 3f00 	ldrex	r3, [r3]
 800b694:	61fb      	str	r3, [r7, #28]
   return(result);
 800b696:	69fa      	ldr	r2, [r7, #28]
 800b698:	4b1e      	ldr	r3, [pc, #120]	@ (800b714 <UART_EndRxTransfer+0xc8>)
 800b69a:	4013      	ands	r3, r2
 800b69c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	3308      	adds	r3, #8
 800b6a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b6a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b6a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b6ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6ae:	e841 2300 	strex	r3, r2, [r1]
 800b6b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d1e5      	bne.n	800b686 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6be:	2b01      	cmp	r3, #1
 800b6c0:	d118      	bne.n	800b6f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	e853 3f00 	ldrex	r3, [r3]
 800b6ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	f023 0310 	bic.w	r3, r3, #16
 800b6d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	461a      	mov	r2, r3
 800b6de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6e0:	61bb      	str	r3, [r7, #24]
 800b6e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e4:	6979      	ldr	r1, [r7, #20]
 800b6e6:	69ba      	ldr	r2, [r7, #24]
 800b6e8:	e841 2300 	strex	r3, r2, [r1]
 800b6ec:	613b      	str	r3, [r7, #16]
   return(result);
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d1e6      	bne.n	800b6c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2220      	movs	r2, #32
 800b6f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2200      	movs	r2, #0
 800b706:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b708:	bf00      	nop
 800b70a:	3754      	adds	r7, #84	@ 0x54
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr
 800b714:	effffffe 	.word	0xeffffffe

0800b718 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b726:	2b01      	cmp	r3, #1
 800b728:	d101      	bne.n	800b72e <HAL_UARTEx_DisableFifoMode+0x16>
 800b72a:	2302      	movs	r3, #2
 800b72c:	e027      	b.n	800b77e <HAL_UARTEx_DisableFifoMode+0x66>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2201      	movs	r2, #1
 800b732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2224      	movs	r2, #36	@ 0x24
 800b73a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f022 0201 	bic.w	r2, r2, #1
 800b754:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b75c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	68fa      	ldr	r2, [r7, #12]
 800b76a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2220      	movs	r2, #32
 800b770:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b77c:	2300      	movs	r3, #0
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3714      	adds	r7, #20
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr

0800b78a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b084      	sub	sp, #16
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
 800b792:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d101      	bne.n	800b7a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b79e:	2302      	movs	r3, #2
 800b7a0:	e02d      	b.n	800b7fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2224      	movs	r2, #36	@ 0x24
 800b7ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f022 0201 	bic.w	r2, r2, #1
 800b7c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	683a      	ldr	r2, [r7, #0]
 800b7da:	430a      	orrs	r2, r1
 800b7dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 f850 	bl	800b884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	68fa      	ldr	r2, [r7, #12]
 800b7ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2220      	movs	r2, #32
 800b7f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b7fc:	2300      	movs	r3, #0
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3710      	adds	r7, #16
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b084      	sub	sp, #16
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
 800b80e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b816:	2b01      	cmp	r3, #1
 800b818:	d101      	bne.n	800b81e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b81a:	2302      	movs	r3, #2
 800b81c:	e02d      	b.n	800b87a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2201      	movs	r2, #1
 800b822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2224      	movs	r2, #36	@ 0x24
 800b82a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f022 0201 	bic.w	r2, r2, #1
 800b844:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	683a      	ldr	r2, [r7, #0]
 800b856:	430a      	orrs	r2, r1
 800b858:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 f812 	bl	800b884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2220      	movs	r2, #32
 800b86c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b878:	2300      	movs	r3, #0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3710      	adds	r7, #16
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
	...

0800b884 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b884:	b480      	push	{r7}
 800b886:	b085      	sub	sp, #20
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b890:	2b00      	cmp	r3, #0
 800b892:	d108      	bne.n	800b8a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2201      	movs	r2, #1
 800b898:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b8a4:	e031      	b.n	800b90a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b8a6:	2310      	movs	r3, #16
 800b8a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b8aa:	2310      	movs	r3, #16
 800b8ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	0e5b      	lsrs	r3, r3, #25
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	f003 0307 	and.w	r3, r3, #7
 800b8bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	0f5b      	lsrs	r3, r3, #29
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	f003 0307 	and.w	r3, r3, #7
 800b8cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b8ce:	7bbb      	ldrb	r3, [r7, #14]
 800b8d0:	7b3a      	ldrb	r2, [r7, #12]
 800b8d2:	4911      	ldr	r1, [pc, #68]	@ (800b918 <UARTEx_SetNbDataToProcess+0x94>)
 800b8d4:	5c8a      	ldrb	r2, [r1, r2]
 800b8d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b8da:	7b3a      	ldrb	r2, [r7, #12]
 800b8dc:	490f      	ldr	r1, [pc, #60]	@ (800b91c <UARTEx_SetNbDataToProcess+0x98>)
 800b8de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b8e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8ec:	7bfb      	ldrb	r3, [r7, #15]
 800b8ee:	7b7a      	ldrb	r2, [r7, #13]
 800b8f0:	4909      	ldr	r1, [pc, #36]	@ (800b918 <UARTEx_SetNbDataToProcess+0x94>)
 800b8f2:	5c8a      	ldrb	r2, [r1, r2]
 800b8f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b8f8:	7b7a      	ldrb	r2, [r7, #13]
 800b8fa:	4908      	ldr	r1, [pc, #32]	@ (800b91c <UARTEx_SetNbDataToProcess+0x98>)
 800b8fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800b902:	b29a      	uxth	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b90a:	bf00      	nop
 800b90c:	3714      	adds	r7, #20
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	080224d4 	.word	0x080224d4
 800b91c:	080224dc 	.word	0x080224dc

0800b920 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b926:	2100      	movs	r1, #0
 800b928:	2000      	movs	r0, #0
 800b92a:	f004 fe4d 	bl	80105c8 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800b92e:	4b1c      	ldr	r3, [pc, #112]	@ (800b9a0 <MX_LWIP_Init+0x80>)
 800b930:	2200      	movs	r2, #0
 800b932:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800b934:	4b1b      	ldr	r3, [pc, #108]	@ (800b9a4 <MX_LWIP_Init+0x84>)
 800b936:	2200      	movs	r2, #0
 800b938:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800b93a:	4b1b      	ldr	r3, [pc, #108]	@ (800b9a8 <MX_LWIP_Init+0x88>)
 800b93c:	2200      	movs	r2, #0
 800b93e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b940:	4b1a      	ldr	r3, [pc, #104]	@ (800b9ac <MX_LWIP_Init+0x8c>)
 800b942:	9302      	str	r3, [sp, #8]
 800b944:	4b1a      	ldr	r3, [pc, #104]	@ (800b9b0 <MX_LWIP_Init+0x90>)
 800b946:	9301      	str	r3, [sp, #4]
 800b948:	2300      	movs	r3, #0
 800b94a:	9300      	str	r3, [sp, #0]
 800b94c:	4b16      	ldr	r3, [pc, #88]	@ (800b9a8 <MX_LWIP_Init+0x88>)
 800b94e:	4a15      	ldr	r2, [pc, #84]	@ (800b9a4 <MX_LWIP_Init+0x84>)
 800b950:	4913      	ldr	r1, [pc, #76]	@ (800b9a0 <MX_LWIP_Init+0x80>)
 800b952:	4818      	ldr	r0, [pc, #96]	@ (800b9b4 <MX_LWIP_Init+0x94>)
 800b954:	f005 fcba 	bl	80112cc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b958:	4816      	ldr	r0, [pc, #88]	@ (800b9b4 <MX_LWIP_Init+0x94>)
 800b95a:	f005 fe71 	bl	8011640 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800b95e:	4815      	ldr	r0, [pc, #84]	@ (800b9b4 <MX_LWIP_Init+0x94>)
 800b960:	f005 fe7e 	bl	8011660 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800b964:	4914      	ldr	r1, [pc, #80]	@ (800b9b8 <MX_LWIP_Init+0x98>)
 800b966:	4813      	ldr	r0, [pc, #76]	@ (800b9b4 <MX_LWIP_Init+0x94>)
 800b968:	f005 ff80 	bl	801186c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800b96c:	2224      	movs	r2, #36	@ 0x24
 800b96e:	2100      	movs	r1, #0
 800b970:	4812      	ldr	r0, [pc, #72]	@ (800b9bc <MX_LWIP_Init+0x9c>)
 800b972:	f011 fe7f 	bl	801d674 <memset>
  attributes.name = "EthLink";
 800b976:	4b11      	ldr	r3, [pc, #68]	@ (800b9bc <MX_LWIP_Init+0x9c>)
 800b978:	4a11      	ldr	r2, [pc, #68]	@ (800b9c0 <MX_LWIP_Init+0xa0>)
 800b97a:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800b97c:	4b0f      	ldr	r3, [pc, #60]	@ (800b9bc <MX_LWIP_Init+0x9c>)
 800b97e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b982:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800b984:	4b0d      	ldr	r3, [pc, #52]	@ (800b9bc <MX_LWIP_Init+0x9c>)
 800b986:	2210      	movs	r2, #16
 800b988:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800b98a:	4a0c      	ldr	r2, [pc, #48]	@ (800b9bc <MX_LWIP_Init+0x9c>)
 800b98c:	4909      	ldr	r1, [pc, #36]	@ (800b9b4 <MX_LWIP_Init+0x94>)
 800b98e:	480d      	ldr	r0, [pc, #52]	@ (800b9c4 <MX_LWIP_Init+0xa4>)
 800b990:	f000 fd9d 	bl	800c4ce <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800b994:	4807      	ldr	r0, [pc, #28]	@ (800b9b4 <MX_LWIP_Init+0x94>)
 800b996:	f00d f8cd 	bl	8018b34 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b99a:	bf00      	nop
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}
 800b9a0:	24004fd4 	.word	0x24004fd4
 800b9a4:	24004fd8 	.word	0x24004fd8
 800b9a8:	24004fdc 	.word	0x24004fdc
 800b9ac:	08010505 	.word	0x08010505
 800b9b0:	0800be41 	.word	0x0800be41
 800b9b4:	24004f9c 	.word	0x24004f9c
 800b9b8:	0800b9c9 	.word	0x0800b9c9
 800b9bc:	24004fe0 	.word	0x24004fe0
 800b9c0:	0801f57c 	.word	0x0801f57c
 800b9c4:	0800c125 	.word	0x0800c125

0800b9c8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b0aa      	sub	sp, #168	@ 0xa8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800b9f6:	f107 0310 	add.w	r3, r7, #16
 800b9fa:	2264      	movs	r2, #100	@ 0x64
 800b9fc:	2100      	movs	r1, #0
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f011 fe38 	bl	801d674 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800ba04:	4b89      	ldr	r3, [pc, #548]	@ (800bc2c <low_level_init+0x250>)
 800ba06:	4a8a      	ldr	r2, [pc, #552]	@ (800bc30 <low_level_init+0x254>)
 800ba08:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800ba0e:	2380      	movs	r3, #128	@ 0x80
 800ba10:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800ba12:	23e1      	movs	r3, #225	@ 0xe1
 800ba14:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800ba16:	2300      	movs	r3, #0
 800ba18:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800ba22:	4a82      	ldr	r2, [pc, #520]	@ (800bc2c <low_level_init+0x250>)
 800ba24:	f107 0308 	add.w	r3, r7, #8
 800ba28:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800ba2a:	4b80      	ldr	r3, [pc, #512]	@ (800bc2c <low_level_init+0x250>)
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800ba30:	4b7e      	ldr	r3, [pc, #504]	@ (800bc2c <low_level_init+0x250>)
 800ba32:	4a80      	ldr	r2, [pc, #512]	@ (800bc34 <low_level_init+0x258>)
 800ba34:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800ba36:	4b7d      	ldr	r3, [pc, #500]	@ (800bc2c <low_level_init+0x250>)
 800ba38:	4a7f      	ldr	r2, [pc, #508]	@ (800bc38 <low_level_init+0x25c>)
 800ba3a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800ba3c:	4b7b      	ldr	r3, [pc, #492]	@ (800bc2c <low_level_init+0x250>)
 800ba3e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800ba42:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ba44:	4879      	ldr	r0, [pc, #484]	@ (800bc2c <low_level_init+0x250>)
 800ba46:	f7f8 fa21 	bl	8003e8c <HAL_ETH_Init>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800ba50:	2238      	movs	r2, #56	@ 0x38
 800ba52:	2100      	movs	r1, #0
 800ba54:	4879      	ldr	r0, [pc, #484]	@ (800bc3c <low_level_init+0x260>)
 800ba56:	f011 fe0d 	bl	801d674 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800ba5a:	4b78      	ldr	r3, [pc, #480]	@ (800bc3c <low_level_init+0x260>)
 800ba5c:	2221      	movs	r2, #33	@ 0x21
 800ba5e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800ba60:	4b76      	ldr	r3, [pc, #472]	@ (800bc3c <low_level_init+0x260>)
 800ba62:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800ba66:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800ba68:	4b74      	ldr	r3, [pc, #464]	@ (800bc3c <low_level_init+0x260>)
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800ba6e:	4874      	ldr	r0, [pc, #464]	@ (800bc40 <low_level_init+0x264>)
 800ba70:	f005 fae6 	bl	8011040 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2206      	movs	r2, #6
 800ba78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ba7c:	4b6b      	ldr	r3, [pc, #428]	@ (800bc2c <low_level_init+0x250>)
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	781a      	ldrb	r2, [r3, #0]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800ba88:	4b68      	ldr	r3, [pc, #416]	@ (800bc2c <low_level_init+0x250>)
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	785a      	ldrb	r2, [r3, #1]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800ba94:	4b65      	ldr	r3, [pc, #404]	@ (800bc2c <low_level_init+0x250>)
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	789a      	ldrb	r2, [r3, #2]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800baa0:	4b62      	ldr	r3, [pc, #392]	@ (800bc2c <low_level_init+0x250>)
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	78da      	ldrb	r2, [r3, #3]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800baac:	4b5f      	ldr	r3, [pc, #380]	@ (800bc2c <low_level_init+0x250>)
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	791a      	ldrb	r2, [r3, #4]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bab8:	4b5c      	ldr	r3, [pc, #368]	@ (800bc2c <low_level_init+0x250>)
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	795a      	ldrb	r2, [r3, #5]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800baca:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bad2:	f043 030a 	orr.w	r3, r3, #10
 800bad6:	b2da      	uxtb	r2, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800bade:	2200      	movs	r2, #0
 800bae0:	2100      	movs	r1, #0
 800bae2:	2001      	movs	r0, #1
 800bae4:	f000 ff40 	bl	800c968 <osSemaphoreNew>
 800bae8:	4603      	mov	r3, r0
 800baea:	4a56      	ldr	r2, [pc, #344]	@ (800bc44 <low_level_init+0x268>)
 800baec:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800baee:	2200      	movs	r2, #0
 800baf0:	2100      	movs	r1, #0
 800baf2:	2001      	movs	r0, #1
 800baf4:	f000 ff38 	bl	800c968 <osSemaphoreNew>
 800baf8:	4603      	mov	r3, r0
 800bafa:	4a53      	ldr	r2, [pc, #332]	@ (800bc48 <low_level_init+0x26c>)
 800bafc:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800bafe:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800bb02:	2224      	movs	r2, #36	@ 0x24
 800bb04:	2100      	movs	r1, #0
 800bb06:	4618      	mov	r0, r3
 800bb08:	f011 fdb4 	bl	801d674 <memset>
  attributes.name = "EthIf";
 800bb0c:	4b4f      	ldr	r3, [pc, #316]	@ (800bc4c <low_level_init+0x270>)
 800bb0e:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800bb10:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 800bb14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800bb18:	2330      	movs	r3, #48	@ 0x30
 800bb1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800bb1e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800bb22:	461a      	mov	r2, r3
 800bb24:	6879      	ldr	r1, [r7, #4]
 800bb26:	484a      	ldr	r0, [pc, #296]	@ (800bc50 <low_level_init+0x274>)
 800bb28:	f000 fcd1 	bl	800c4ce <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800bb2c:	4949      	ldr	r1, [pc, #292]	@ (800bc54 <low_level_init+0x278>)
 800bb2e:	484a      	ldr	r0, [pc, #296]	@ (800bc58 <low_level_init+0x27c>)
 800bb30:	f7f5 ff95 	bl	8001a5e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800bb34:	4848      	ldr	r0, [pc, #288]	@ (800bc58 <low_level_init+0x27c>)
 800bb36:	f7f5 ffc4 	bl	8001ac2 <LAN8742_Init>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d006      	beq.n	800bb4e <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f005 fe63 	bl	801180c <netif_set_link_down>
    netif_set_down(netif);
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f005 fdf6 	bl	8011738 <netif_set_down>
 800bb4c:	e06b      	b.n	800bc26 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800bb4e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d165      	bne.n	800bc22 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800bb56:	4840      	ldr	r0, [pc, #256]	@ (800bc58 <low_level_init+0x27c>)
 800bb58:	f7f6 f800 	bl	8001b5c <LAN8742_GetLinkState>
 800bb5c:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800bb60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	dc06      	bgt.n	800bb76 <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f005 fe4f 	bl	801180c <netif_set_link_down>
      netif_set_down(netif);
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f005 fde2 	bl	8011738 <netif_set_down>
 800bb74:	e057      	b.n	800bc26 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800bb76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb7a:	3b02      	subs	r3, #2
 800bb7c:	2b03      	cmp	r3, #3
 800bb7e:	d82b      	bhi.n	800bbd8 <low_level_init+0x1fc>
 800bb80:	a201      	add	r2, pc, #4	@ (adr r2, 800bb88 <low_level_init+0x1ac>)
 800bb82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb86:	bf00      	nop
 800bb88:	0800bb99 	.word	0x0800bb99
 800bb8c:	0800bbab 	.word	0x0800bbab
 800bb90:	0800bbbb 	.word	0x0800bbbb
 800bb94:	0800bbcb 	.word	0x0800bbcb
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800bb98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bb9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800bba0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bba4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800bba8:	e01f      	b.n	800bbea <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800bbb0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bbb4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800bbb8:	e017      	b.n	800bbea <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800bbba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bbbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800bbc8:	e00f      	b.n	800bbea <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800bbd6:	e008      	b.n	800bbea <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800bbd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bbdc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800bbe0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bbe4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800bbe8:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800bbea:	f107 0310 	add.w	r3, r7, #16
 800bbee:	4619      	mov	r1, r3
 800bbf0:	480e      	ldr	r0, [pc, #56]	@ (800bc2c <low_level_init+0x250>)
 800bbf2:	f7f8 fdc7 	bl	8004784 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800bbf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bbfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800bbfc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800bc02:	f107 0310 	add.w	r3, r7, #16
 800bc06:	4619      	mov	r1, r3
 800bc08:	4808      	ldr	r0, [pc, #32]	@ (800bc2c <low_level_init+0x250>)
 800bc0a:	f7f8 ff8f 	bl	8004b2c <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800bc0e:	4807      	ldr	r0, [pc, #28]	@ (800bc2c <low_level_init+0x250>)
 800bc10:	f7f8 fa3a 	bl	8004088 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f005 fd23 	bl	8011660 <netif_set_up>
    netif_set_link_up(netif);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f005 fdbe 	bl	801179c <netif_set_link_up>
 800bc20:	e001      	b.n	800bc26 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800bc22:	f7f5 fad9 	bl	80011d8 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800bc26:	37a8      	adds	r7, #168	@ 0xa8
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	24005014 	.word	0x24005014
 800bc30:	40028000 	.word	0x40028000
 800bc34:	24004be4 	.word	0x24004be4
 800bc38:	24004b84 	.word	0x24004b84
 800bc3c:	240050c4 	.word	0x240050c4
 800bc40:	080224e4 	.word	0x080224e4
 800bc44:	2400500c 	.word	0x2400500c
 800bc48:	24005010 	.word	0x24005010
 800bc4c:	0801f584 	.word	0x0801f584
 800bc50:	0800bded 	.word	0x0800bded
 800bc54:	24000010 	.word	0x24000010
 800bc58:	240050fc 	.word	0x240050fc

0800bc5c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b092      	sub	sp, #72	@ 0x48
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800bc66:	2300      	movs	r3, #0
 800bc68:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800bc74:	f107 030c 	add.w	r3, r7, #12
 800bc78:	2230      	movs	r2, #48	@ 0x30
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f011 fcf9 	bl	801d674 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800bc82:	f107 030c 	add.w	r3, r7, #12
 800bc86:	2230      	movs	r2, #48	@ 0x30
 800bc88:	2100      	movs	r1, #0
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f011 fcf2 	bl	801d674 <memset>

  for(q = p; q != NULL; q = q->next)
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc94:	e045      	b.n	800bd22 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800bc96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc98:	2b03      	cmp	r3, #3
 800bc9a:	d902      	bls.n	800bca2 <low_level_output+0x46>
      return ERR_IF;
 800bc9c:	f06f 030b 	mvn.w	r3, #11
 800bca0:	e07f      	b.n	800bda2 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800bca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bca4:	6859      	ldr	r1, [r3, #4]
 800bca6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bca8:	4613      	mov	r3, r2
 800bcaa:	005b      	lsls	r3, r3, #1
 800bcac:	4413      	add	r3, r2
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	3348      	adds	r3, #72	@ 0x48
 800bcb2:	443b      	add	r3, r7
 800bcb4:	3b3c      	subs	r3, #60	@ 0x3c
 800bcb6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800bcb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcba:	895b      	ldrh	r3, [r3, #10]
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bcc0:	4613      	mov	r3, r2
 800bcc2:	005b      	lsls	r3, r3, #1
 800bcc4:	4413      	add	r3, r2
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	3348      	adds	r3, #72	@ 0x48
 800bcca:	443b      	add	r3, r7
 800bccc:	3b38      	subs	r3, #56	@ 0x38
 800bcce:	6019      	str	r1, [r3, #0]

    if(i>0)
 800bcd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d011      	beq.n	800bcfa <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800bcd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcd8:	1e5a      	subs	r2, r3, #1
 800bcda:	f107 000c 	add.w	r0, r7, #12
 800bcde:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bce0:	460b      	mov	r3, r1
 800bce2:	005b      	lsls	r3, r3, #1
 800bce4:	440b      	add	r3, r1
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	18c1      	adds	r1, r0, r3
 800bcea:	4613      	mov	r3, r2
 800bcec:	005b      	lsls	r3, r3, #1
 800bcee:	4413      	add	r3, r2
 800bcf0:	009b      	lsls	r3, r3, #2
 800bcf2:	3348      	adds	r3, #72	@ 0x48
 800bcf4:	443b      	add	r3, r7
 800bcf6:	3b34      	subs	r3, #52	@ 0x34
 800bcf8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800bcfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d109      	bne.n	800bd16 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800bd02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd04:	4613      	mov	r3, r2
 800bd06:	005b      	lsls	r3, r3, #1
 800bd08:	4413      	add	r3, r2
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	3348      	adds	r3, #72	@ 0x48
 800bd0e:	443b      	add	r3, r7
 800bd10:	3b34      	subs	r3, #52	@ 0x34
 800bd12:	2200      	movs	r2, #0
 800bd14:	601a      	str	r2, [r3, #0]
    }

    i++;
 800bd16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd18:	3301      	adds	r3, #1
 800bd1a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800bd1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d1b6      	bne.n	800bc96 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	891b      	ldrh	r3, [r3, #8]
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	4b1f      	ldr	r3, [pc, #124]	@ (800bdac <low_level_output+0x150>)
 800bd30:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800bd32:	4a1e      	ldr	r2, [pc, #120]	@ (800bdac <low_level_output+0x150>)
 800bd34:	f107 030c 	add.w	r3, r7, #12
 800bd38:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800bd3a:	4a1c      	ldr	r2, [pc, #112]	@ (800bdac <low_level_output+0x150>)
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800bd40:	6838      	ldr	r0, [r7, #0]
 800bd42:	f006 f9e7 	bl	8012114 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800bd46:	4919      	ldr	r1, [pc, #100]	@ (800bdac <low_level_output+0x150>)
 800bd48:	4819      	ldr	r0, [pc, #100]	@ (800bdb0 <low_level_output+0x154>)
 800bd4a:	f7f8 fa89 	bl	8004260 <HAL_ETH_Transmit_IT>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d103      	bne.n	800bd5c <low_level_output+0x100>
    {
      errval = ERR_OK;
 800bd54:	2300      	movs	r3, #0
 800bd56:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bd5a:	e01b      	b.n	800bd94 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800bd5c:	4814      	ldr	r0, [pc, #80]	@ (800bdb0 <low_level_output+0x154>)
 800bd5e:	f7f8 ff4f 	bl	8004c00 <HAL_ETH_GetError>
 800bd62:	4603      	mov	r3, r0
 800bd64:	f003 0302 	and.w	r3, r3, #2
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00d      	beq.n	800bd88 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800bd6c:	4b11      	ldr	r3, [pc, #68]	@ (800bdb4 <low_level_output+0x158>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800bd74:	4618      	mov	r0, r3
 800bd76:	f000 fe81 	bl	800ca7c <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800bd7a:	480d      	ldr	r0, [pc, #52]	@ (800bdb0 <low_level_output+0x154>)
 800bd7c:	f7f8 fbf7 	bl	800456e <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800bd80:	23fe      	movs	r3, #254	@ 0xfe
 800bd82:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bd86:	e005      	b.n	800bd94 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800bd88:	6838      	ldr	r0, [r7, #0]
 800bd8a:	f006 f91d 	bl	8011fc8 <pbuf_free>
        errval =  ERR_IF;
 800bd8e:	23f4      	movs	r3, #244	@ 0xf4
 800bd90:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800bd94:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bd98:	f113 0f02 	cmn.w	r3, #2
 800bd9c:	d0d3      	beq.n	800bd46 <low_level_output+0xea>

  return errval;
 800bd9e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3748      	adds	r7, #72	@ 0x48
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
 800bdaa:	bf00      	nop
 800bdac:	240050c4 	.word	0x240050c4
 800bdb0:	24005014 	.word	0x24005014
 800bdb4:	24005010 	.word	0x24005010

0800bdb8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800bdc4:	4b07      	ldr	r3, [pc, #28]	@ (800bde4 <low_level_input+0x2c>)
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d105      	bne.n	800bdd8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800bdcc:	f107 030c 	add.w	r3, r7, #12
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	4805      	ldr	r0, [pc, #20]	@ (800bde8 <low_level_input+0x30>)
 800bdd4:	f7f8 fa95 	bl	8004302 <HAL_ETH_ReadData>
  }

  return p;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3710      	adds	r7, #16
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	24005008 	.word	0x24005008
 800bde8:	24005014 	.word	0x24005014

0800bdec <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800bdfc:	4b0f      	ldr	r3, [pc, #60]	@ (800be3c <ethernetif_input+0x50>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f04f 31ff 	mov.w	r1, #4294967295
 800be04:	4618      	mov	r0, r3
 800be06:	f000 fe39 	bl	800ca7c <osSemaphoreAcquire>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d1f5      	bne.n	800bdfc <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800be10:	68b8      	ldr	r0, [r7, #8]
 800be12:	f7ff ffd1 	bl	800bdb8 <low_level_input>
 800be16:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d00a      	beq.n	800be34 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	691b      	ldr	r3, [r3, #16]
 800be22:	68b9      	ldr	r1, [r7, #8]
 800be24:	68f8      	ldr	r0, [r7, #12]
 800be26:	4798      	blx	r3
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d002      	beq.n	800be34 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800be2e:	68f8      	ldr	r0, [r7, #12]
 800be30:	f006 f8ca 	bl	8011fc8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d1ea      	bne.n	800be10 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800be3a:	e7df      	b.n	800bdfc <ethernetif_input+0x10>
 800be3c:	2400500c 	.word	0x2400500c

0800be40 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d106      	bne.n	800be5c <ethernetif_init+0x1c>
 800be4e:	4b0e      	ldr	r3, [pc, #56]	@ (800be88 <ethernetif_init+0x48>)
 800be50:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800be54:	490d      	ldr	r1, [pc, #52]	@ (800be8c <ethernetif_init+0x4c>)
 800be56:	480e      	ldr	r0, [pc, #56]	@ (800be90 <ethernetif_init+0x50>)
 800be58:	f011 fab4 	bl	801d3c4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2273      	movs	r2, #115	@ 0x73
 800be60:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2274      	movs	r2, #116	@ 0x74
 800be68:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4a09      	ldr	r2, [pc, #36]	@ (800be94 <ethernetif_init+0x54>)
 800be70:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	4a08      	ldr	r2, [pc, #32]	@ (800be98 <ethernetif_init+0x58>)
 800be76:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f7ff fdaf 	bl	800b9dc <low_level_init>

  return ERR_OK;
 800be7e:	2300      	movs	r3, #0
}
 800be80:	4618      	mov	r0, r3
 800be82:	3708      	adds	r7, #8
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	0801f58c 	.word	0x0801f58c
 800be8c:	0801f5a8 	.word	0x0801f5a8
 800be90:	0801f5b8 	.word	0x0801f5b8
 800be94:	0801a9f5 	.word	0x0801a9f5
 800be98:	0800bc5d 	.word	0x0800bc5d

0800be9c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800bea8:	68f9      	ldr	r1, [r7, #12]
 800beaa:	4809      	ldr	r0, [pc, #36]	@ (800bed0 <pbuf_free_custom+0x34>)
 800beac:	f005 f9b8 	bl	8011220 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800beb0:	4b08      	ldr	r3, [pc, #32]	@ (800bed4 <pbuf_free_custom+0x38>)
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d107      	bne.n	800bec8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800beb8:	4b06      	ldr	r3, [pc, #24]	@ (800bed4 <pbuf_free_custom+0x38>)
 800beba:	2200      	movs	r2, #0
 800bebc:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800bebe:	4b06      	ldr	r3, [pc, #24]	@ (800bed8 <pbuf_free_custom+0x3c>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	4618      	mov	r0, r3
 800bec4:	f000 fe2c 	bl	800cb20 <osSemaphoreRelease>
  }
}
 800bec8:	bf00      	nop
 800beca:	3710      	adds	r7, #16
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	080224e4 	.word	0x080224e4
 800bed4:	24005008 	.word	0x24005008
 800bed8:	2400500c 	.word	0x2400500c

0800bedc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800bee0:	f7f5 ff14 	bl	8001d0c <HAL_GetTick>
 800bee4:	4603      	mov	r3, r0
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	bd80      	pop	{r7, pc}
	...

0800beec <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b08e      	sub	sp, #56	@ 0x38
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bef4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bef8:	2200      	movs	r2, #0
 800befa:	601a      	str	r2, [r3, #0]
 800befc:	605a      	str	r2, [r3, #4]
 800befe:	609a      	str	r2, [r3, #8]
 800bf00:	60da      	str	r2, [r3, #12]
 800bf02:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4a59      	ldr	r2, [pc, #356]	@ (800c070 <HAL_ETH_MspInit+0x184>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	f040 80ab 	bne.w	800c066 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800bf10:	4b58      	ldr	r3, [pc, #352]	@ (800c074 <HAL_ETH_MspInit+0x188>)
 800bf12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bf16:	4a57      	ldr	r2, [pc, #348]	@ (800c074 <HAL_ETH_MspInit+0x188>)
 800bf18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf1c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800bf20:	4b54      	ldr	r3, [pc, #336]	@ (800c074 <HAL_ETH_MspInit+0x188>)
 800bf22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bf26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bf2a:	623b      	str	r3, [r7, #32]
 800bf2c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800bf2e:	4b51      	ldr	r3, [pc, #324]	@ (800c074 <HAL_ETH_MspInit+0x188>)
 800bf30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bf34:	4a4f      	ldr	r2, [pc, #316]	@ (800c074 <HAL_ETH_MspInit+0x188>)
 800bf36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf3a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800bf3e:	4b4d      	ldr	r3, [pc, #308]	@ (800c074 <HAL_ETH_MspInit+0x188>)
 800bf40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bf44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bf48:	61fb      	str	r3, [r7, #28]
 800bf4a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800bf4c:	4b49      	ldr	r3, [pc, #292]	@ (800c074 <HAL_ETH_MspInit+0x188>)
 800bf4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bf52:	4a48      	ldr	r2, [pc, #288]	@ (800c074 <HAL_ETH_MspInit+0x188>)
 800bf54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bf58:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800bf5c:	4b45      	ldr	r3, [pc, #276]	@ (800c074 <HAL_ETH_MspInit+0x188>)
 800bf5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bf62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf66:	61bb      	str	r3, [r7, #24]
 800bf68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bf6a:	4b42      	ldr	r3, [pc, #264]	@ (800c074 <HAL_ETH_MspInit+0x188>)
 800bf6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf70:	4a40      	ldr	r2, [pc, #256]	@ (800c074 <HAL_ETH_MspInit+0x188>)
 800bf72:	f043 0304 	orr.w	r3, r3, #4
 800bf76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bf7a:	4b3e      	ldr	r3, [pc, #248]	@ (800c074 <HAL_ETH_MspInit+0x188>)
 800bf7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf80:	f003 0304 	and.w	r3, r3, #4
 800bf84:	617b      	str	r3, [r7, #20]
 800bf86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf88:	4b3a      	ldr	r3, [pc, #232]	@ (800c074 <HAL_ETH_MspInit+0x188>)
 800bf8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf8e:	4a39      	ldr	r2, [pc, #228]	@ (800c074 <HAL_ETH_MspInit+0x188>)
 800bf90:	f043 0301 	orr.w	r3, r3, #1
 800bf94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bf98:	4b36      	ldr	r3, [pc, #216]	@ (800c074 <HAL_ETH_MspInit+0x188>)
 800bf9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf9e:	f003 0301 	and.w	r3, r3, #1
 800bfa2:	613b      	str	r3, [r7, #16]
 800bfa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bfa6:	4b33      	ldr	r3, [pc, #204]	@ (800c074 <HAL_ETH_MspInit+0x188>)
 800bfa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bfac:	4a31      	ldr	r2, [pc, #196]	@ (800c074 <HAL_ETH_MspInit+0x188>)
 800bfae:	f043 0302 	orr.w	r3, r3, #2
 800bfb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bfb6:	4b2f      	ldr	r3, [pc, #188]	@ (800c074 <HAL_ETH_MspInit+0x188>)
 800bfb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bfbc:	f003 0302 	and.w	r3, r3, #2
 800bfc0:	60fb      	str	r3, [r7, #12]
 800bfc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800bfc4:	4b2b      	ldr	r3, [pc, #172]	@ (800c074 <HAL_ETH_MspInit+0x188>)
 800bfc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bfca:	4a2a      	ldr	r2, [pc, #168]	@ (800c074 <HAL_ETH_MspInit+0x188>)
 800bfcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bfd4:	4b27      	ldr	r3, [pc, #156]	@ (800c074 <HAL_ETH_MspInit+0x188>)
 800bfd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bfda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfde:	60bb      	str	r3, [r7, #8]
 800bfe0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800bfe2:	2332      	movs	r3, #50	@ 0x32
 800bfe4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfe6:	2302      	movs	r3, #2
 800bfe8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfea:	2300      	movs	r3, #0
 800bfec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bfee:	2300      	movs	r3, #0
 800bff0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bff2:	230b      	movs	r3, #11
 800bff4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bff6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bffa:	4619      	mov	r1, r3
 800bffc:	481e      	ldr	r0, [pc, #120]	@ (800c078 <HAL_ETH_MspInit+0x18c>)
 800bffe:	f7f9 fb8f 	bl	8005720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800c002:	2386      	movs	r3, #134	@ 0x86
 800c004:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c006:	2302      	movs	r3, #2
 800c008:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c00a:	2300      	movs	r3, #0
 800c00c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c00e:	2300      	movs	r3, #0
 800c010:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c012:	230b      	movs	r3, #11
 800c014:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c016:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c01a:	4619      	mov	r1, r3
 800c01c:	4817      	ldr	r0, [pc, #92]	@ (800c07c <HAL_ETH_MspInit+0x190>)
 800c01e:	f7f9 fb7f 	bl	8005720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800c022:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c026:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c028:	2302      	movs	r3, #2
 800c02a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c02c:	2300      	movs	r3, #0
 800c02e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c030:	2300      	movs	r3, #0
 800c032:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c034:	230b      	movs	r3, #11
 800c036:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800c038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c03c:	4619      	mov	r1, r3
 800c03e:	4810      	ldr	r0, [pc, #64]	@ (800c080 <HAL_ETH_MspInit+0x194>)
 800c040:	f7f9 fb6e 	bl	8005720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800c044:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800c048:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c04a:	2302      	movs	r3, #2
 800c04c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c04e:	2300      	movs	r3, #0
 800c050:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c052:	2300      	movs	r3, #0
 800c054:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c056:	230b      	movs	r3, #11
 800c058:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c05a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c05e:	4619      	mov	r1, r3
 800c060:	4808      	ldr	r0, [pc, #32]	@ (800c084 <HAL_ETH_MspInit+0x198>)
 800c062:	f7f9 fb5d 	bl	8005720 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c066:	bf00      	nop
 800c068:	3738      	adds	r7, #56	@ 0x38
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	40028000 	.word	0x40028000
 800c074:	58024400 	.word	0x58024400
 800c078:	58020800 	.word	0x58020800
 800c07c:	58020000 	.word	0x58020000
 800c080:	58020400 	.word	0x58020400
 800c084:	58021800 	.word	0x58021800

0800c088 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c08c:	4802      	ldr	r0, [pc, #8]	@ (800c098 <ETH_PHY_IO_Init+0x10>)
 800c08e:	f7f8 fd67 	bl	8004b60 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c092:	2300      	movs	r3, #0
}
 800c094:	4618      	mov	r0, r3
 800c096:	bd80      	pop	{r7, pc}
 800c098:	24005014 	.word	0x24005014

0800c09c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c09c:	b480      	push	{r7}
 800c09e:	af00      	add	r7, sp, #0
  return 0;
 800c0a0:	2300      	movs	r3, #0
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	60f8      	str	r0, [r7, #12]
 800c0b4:	60b9      	str	r1, [r7, #8]
 800c0b6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	68ba      	ldr	r2, [r7, #8]
 800c0bc:	68f9      	ldr	r1, [r7, #12]
 800c0be:	4807      	ldr	r0, [pc, #28]	@ (800c0dc <ETH_PHY_IO_ReadReg+0x30>)
 800c0c0:	f7f8 fab8 	bl	8004634 <HAL_ETH_ReadPHYRegister>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d002      	beq.n	800c0d0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c0ca:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ce:	e000      	b.n	800c0d2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	24005014 	.word	0x24005014

0800c0e0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	68ba      	ldr	r2, [r7, #8]
 800c0f0:	68f9      	ldr	r1, [r7, #12]
 800c0f2:	4807      	ldr	r0, [pc, #28]	@ (800c110 <ETH_PHY_IO_WriteReg+0x30>)
 800c0f4:	f7f8 faf2 	bl	80046dc <HAL_ETH_WritePHYRegister>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d002      	beq.n	800c104 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c0fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c102:	e000      	b.n	800c106 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c104:	2300      	movs	r3, #0
}
 800c106:	4618      	mov	r0, r3
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	24005014 	.word	0x24005014

0800c114 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c118:	f7f5 fdf8 	bl	8001d0c <HAL_GetTick>
 800c11c:	4603      	mov	r3, r0
}
 800c11e:	4618      	mov	r0, r3
 800c120:	bd80      	pop	{r7, pc}
	...

0800c124 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b0a0      	sub	sp, #128	@ 0x80
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c12c:	f107 0308 	add.w	r3, r7, #8
 800c130:	2264      	movs	r2, #100	@ 0x64
 800c132:	2100      	movs	r1, #0
 800c134:	4618      	mov	r0, r3
 800c136:	f011 fa9d 	bl	801d674 <memset>
  int32_t PHYLinkState = 0;
 800c13a:	2300      	movs	r3, #0
 800c13c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c13e:	2300      	movs	r3, #0
 800c140:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c142:	2300      	movs	r3, #0
 800c144:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c146:	2300      	movs	r3, #0
 800c148:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c14e:	483a      	ldr	r0, [pc, #232]	@ (800c238 <ethernet_link_thread+0x114>)
 800c150:	f7f5 fd04 	bl	8001b5c <LAN8742_GetLinkState>
 800c154:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c156:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c158:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c15c:	089b      	lsrs	r3, r3, #2
 800c15e:	f003 0301 	and.w	r3, r3, #1
 800c162:	b2db      	uxtb	r3, r3
 800c164:	2b00      	cmp	r3, #0
 800c166:	d00c      	beq.n	800c182 <ethernet_link_thread+0x5e>
 800c168:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	dc09      	bgt.n	800c182 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800c16e:	4833      	ldr	r0, [pc, #204]	@ (800c23c <ethernet_link_thread+0x118>)
 800c170:	f7f7 fffe 	bl	8004170 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800c174:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c176:	f005 fadf 	bl	8011738 <netif_set_down>
    netif_set_link_down(netif);
 800c17a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c17c:	f005 fb46 	bl	801180c <netif_set_link_down>
 800c180:	e055      	b.n	800c22e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c182:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c184:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c188:	f003 0304 	and.w	r3, r3, #4
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d14e      	bne.n	800c22e <ethernet_link_thread+0x10a>
 800c190:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c192:	2b01      	cmp	r3, #1
 800c194:	dd4b      	ble.n	800c22e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800c196:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c198:	3b02      	subs	r3, #2
 800c19a:	2b03      	cmp	r3, #3
 800c19c:	d82a      	bhi.n	800c1f4 <ethernet_link_thread+0xd0>
 800c19e:	a201      	add	r2, pc, #4	@ (adr r2, 800c1a4 <ethernet_link_thread+0x80>)
 800c1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a4:	0800c1b5 	.word	0x0800c1b5
 800c1a8:	0800c1c7 	.word	0x0800c1c7
 800c1ac:	0800c1d7 	.word	0x0800c1d7
 800c1b0:	0800c1e7 	.word	0x0800c1e7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c1b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c1b8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c1ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c1be:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c1c4:	e017      	b.n	800c1f6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c1ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c1ce:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c1d4:	e00f      	b.n	800c1f6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c1d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c1da:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c1e4:	e007      	b.n	800c1f6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c1f2:	e000      	b.n	800c1f6 <ethernet_link_thread+0xd2>
    default:
      break;
 800c1f4:	bf00      	nop
    }

    if(linkchanged)
 800c1f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d018      	beq.n	800c22e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c1fc:	f107 0308 	add.w	r3, r7, #8
 800c200:	4619      	mov	r1, r3
 800c202:	480e      	ldr	r0, [pc, #56]	@ (800c23c <ethernet_link_thread+0x118>)
 800c204:	f7f8 fabe 	bl	8004784 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c208:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c20a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800c20c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c20e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c210:	f107 0308 	add.w	r3, r7, #8
 800c214:	4619      	mov	r1, r3
 800c216:	4809      	ldr	r0, [pc, #36]	@ (800c23c <ethernet_link_thread+0x118>)
 800c218:	f7f8 fc88 	bl	8004b2c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800c21c:	4807      	ldr	r0, [pc, #28]	@ (800c23c <ethernet_link_thread+0x118>)
 800c21e:	f7f7 ff33 	bl	8004088 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800c222:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c224:	f005 fa1c 	bl	8011660 <netif_set_up>
      netif_set_link_up(netif);
 800c228:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c22a:	f005 fab7 	bl	801179c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800c22e:	2064      	movs	r0, #100	@ 0x64
 800c230:	f000 f9df 	bl	800c5f2 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c234:	e78b      	b.n	800c14e <ethernet_link_thread+0x2a>
 800c236:	bf00      	nop
 800c238:	240050fc 	.word	0x240050fc
 800c23c:	24005014 	.word	0x24005014

0800c240 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b086      	sub	sp, #24
 800c244:	af02      	add	r7, sp, #8
 800c246:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c248:	4812      	ldr	r0, [pc, #72]	@ (800c294 <HAL_ETH_RxAllocateCallback+0x54>)
 800c24a:	f004 ff75 	bl	8011138 <memp_malloc_pool>
 800c24e:	60f8      	str	r0, [r7, #12]
  if (p)
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d014      	beq.n	800c280 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f103 0220 	add.w	r2, r3, #32
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	4a0d      	ldr	r2, [pc, #52]	@ (800c298 <HAL_ETH_RxAllocateCallback+0x58>)
 800c264:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c26e:	9201      	str	r2, [sp, #4]
 800c270:	9300      	str	r3, [sp, #0]
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2241      	movs	r2, #65	@ 0x41
 800c276:	2100      	movs	r1, #0
 800c278:	2000      	movs	r0, #0
 800c27a:	f005 fceb 	bl	8011c54 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800c27e:	e005      	b.n	800c28c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800c280:	4b06      	ldr	r3, [pc, #24]	@ (800c29c <HAL_ETH_RxAllocateCallback+0x5c>)
 800c282:	2201      	movs	r2, #1
 800c284:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	601a      	str	r2, [r3, #0]
}
 800c28c:	bf00      	nop
 800c28e:	3710      	adds	r7, #16
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}
 800c294:	080224e4 	.word	0x080224e4
 800c298:	0800be9d 	.word	0x0800be9d
 800c29c:	24005008 	.word	0x24005008

0800c2a0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b08d      	sub	sp, #52	@ 0x34
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	60b9      	str	r1, [r7, #8]
 800c2aa:	607a      	str	r2, [r7, #4]
 800c2ac:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	3b20      	subs	r3, #32
 800c2be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 800c2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800c2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800c2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ce:	887a      	ldrh	r2, [r7, #2]
 800c2d0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800c2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d103      	bne.n	800c2e2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800c2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2de:	601a      	str	r2, [r3, #0]
 800c2e0:	e003      	b.n	800c2ea <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800c2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2e8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800c2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2ee:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800c2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c2f6:	e009      	b.n	800c30c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800c2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2fa:	891a      	ldrh	r2, [r3, #8]
 800c2fc:	887b      	ldrh	r3, [r7, #2]
 800c2fe:	4413      	add	r3, r2
 800c300:	b29a      	uxth	r2, r3
 800c302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c304:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800c306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d1f2      	bne.n	800c2f8 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800c312:	887b      	ldrh	r3, [r7, #2]
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	623a      	str	r2, [r7, #32]
 800c318:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800c31a:	69fb      	ldr	r3, [r7, #28]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	dd1d      	ble.n	800c35c <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800c320:	6a3b      	ldr	r3, [r7, #32]
 800c322:	f003 021f 	and.w	r2, r3, #31
 800c326:	69fb      	ldr	r3, [r7, #28]
 800c328:	4413      	add	r3, r2
 800c32a:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800c32c:	6a3b      	ldr	r3, [r7, #32]
 800c32e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c330:	f3bf 8f4f 	dsb	sy
}
 800c334:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800c336:	4a0d      	ldr	r2, [pc, #52]	@ (800c36c <HAL_ETH_RxLinkCallback+0xcc>)
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	3320      	adds	r3, #32
 800c342:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800c344:	69bb      	ldr	r3, [r7, #24]
 800c346:	3b20      	subs	r3, #32
 800c348:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	dcf2      	bgt.n	800c336 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800c350:	f3bf 8f4f 	dsb	sy
}
 800c354:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c356:	f3bf 8f6f 	isb	sy
}
 800c35a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800c35c:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800c35e:	bf00      	nop
 800c360:	3734      	adds	r7, #52	@ 0x34
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	e000ed00 	.word	0xe000ed00

0800c370 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b082      	sub	sp, #8
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f005 fe25 	bl	8011fc8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800c37e:	bf00      	nop
 800c380:	3708      	adds	r7, #8
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
	...

0800c388 <__NVIC_SetPriority>:
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	4603      	mov	r3, r0
 800c390:	6039      	str	r1, [r7, #0]
 800c392:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c394:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	db0a      	blt.n	800c3b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	b2da      	uxtb	r2, r3
 800c3a0:	490c      	ldr	r1, [pc, #48]	@ (800c3d4 <__NVIC_SetPriority+0x4c>)
 800c3a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c3a6:	0112      	lsls	r2, r2, #4
 800c3a8:	b2d2      	uxtb	r2, r2
 800c3aa:	440b      	add	r3, r1
 800c3ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c3b0:	e00a      	b.n	800c3c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	b2da      	uxtb	r2, r3
 800c3b6:	4908      	ldr	r1, [pc, #32]	@ (800c3d8 <__NVIC_SetPriority+0x50>)
 800c3b8:	88fb      	ldrh	r3, [r7, #6]
 800c3ba:	f003 030f 	and.w	r3, r3, #15
 800c3be:	3b04      	subs	r3, #4
 800c3c0:	0112      	lsls	r2, r2, #4
 800c3c2:	b2d2      	uxtb	r2, r2
 800c3c4:	440b      	add	r3, r1
 800c3c6:	761a      	strb	r2, [r3, #24]
}
 800c3c8:	bf00      	nop
 800c3ca:	370c      	adds	r7, #12
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr
 800c3d4:	e000e100 	.word	0xe000e100
 800c3d8:	e000ed00 	.word	0xe000ed00

0800c3dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c3e0:	4b05      	ldr	r3, [pc, #20]	@ (800c3f8 <SysTick_Handler+0x1c>)
 800c3e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c3e4:	f002 fd58 	bl	800ee98 <xTaskGetSchedulerState>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2b01      	cmp	r3, #1
 800c3ec:	d001      	beq.n	800c3f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c3ee:	f003 fd13 	bl	800fe18 <xPortSysTickHandler>
  }
}
 800c3f2:	bf00      	nop
 800c3f4:	bd80      	pop	{r7, pc}
 800c3f6:	bf00      	nop
 800c3f8:	e000e010 	.word	0xe000e010

0800c3fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c400:	2100      	movs	r1, #0
 800c402:	f06f 0004 	mvn.w	r0, #4
 800c406:	f7ff ffbf 	bl	800c388 <__NVIC_SetPriority>
#endif
}
 800c40a:	bf00      	nop
 800c40c:	bd80      	pop	{r7, pc}
	...

0800c410 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c416:	f3ef 8305 	mrs	r3, IPSR
 800c41a:	603b      	str	r3, [r7, #0]
  return(result);
 800c41c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d003      	beq.n	800c42a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c422:	f06f 0305 	mvn.w	r3, #5
 800c426:	607b      	str	r3, [r7, #4]
 800c428:	e00c      	b.n	800c444 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c42a:	4b0a      	ldr	r3, [pc, #40]	@ (800c454 <osKernelInitialize+0x44>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d105      	bne.n	800c43e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c432:	4b08      	ldr	r3, [pc, #32]	@ (800c454 <osKernelInitialize+0x44>)
 800c434:	2201      	movs	r2, #1
 800c436:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c438:	2300      	movs	r3, #0
 800c43a:	607b      	str	r3, [r7, #4]
 800c43c:	e002      	b.n	800c444 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c43e:	f04f 33ff 	mov.w	r3, #4294967295
 800c442:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c444:	687b      	ldr	r3, [r7, #4]
}
 800c446:	4618      	mov	r0, r3
 800c448:	370c      	adds	r7, #12
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr
 800c452:	bf00      	nop
 800c454:	2400511c 	.word	0x2400511c

0800c458 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c45e:	f3ef 8305 	mrs	r3, IPSR
 800c462:	603b      	str	r3, [r7, #0]
  return(result);
 800c464:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c466:	2b00      	cmp	r3, #0
 800c468:	d003      	beq.n	800c472 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c46a:	f06f 0305 	mvn.w	r3, #5
 800c46e:	607b      	str	r3, [r7, #4]
 800c470:	e010      	b.n	800c494 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c472:	4b0b      	ldr	r3, [pc, #44]	@ (800c4a0 <osKernelStart+0x48>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2b01      	cmp	r3, #1
 800c478:	d109      	bne.n	800c48e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c47a:	f7ff ffbf 	bl	800c3fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c47e:	4b08      	ldr	r3, [pc, #32]	@ (800c4a0 <osKernelStart+0x48>)
 800c480:	2202      	movs	r2, #2
 800c482:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c484:	f002 f882 	bl	800e58c <vTaskStartScheduler>
      stat = osOK;
 800c488:	2300      	movs	r3, #0
 800c48a:	607b      	str	r3, [r7, #4]
 800c48c:	e002      	b.n	800c494 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c48e:	f04f 33ff 	mov.w	r3, #4294967295
 800c492:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c494:	687b      	ldr	r3, [r7, #4]
}
 800c496:	4618      	mov	r0, r3
 800c498:	3708      	adds	r7, #8
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	2400511c 	.word	0x2400511c

0800c4a4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4aa:	f3ef 8305 	mrs	r3, IPSR
 800c4ae:	603b      	str	r3, [r7, #0]
  return(result);
 800c4b0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d003      	beq.n	800c4be <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c4b6:	f002 f995 	bl	800e7e4 <xTaskGetTickCountFromISR>
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	e002      	b.n	800c4c4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c4be:	f002 f981 	bl	800e7c4 <xTaskGetTickCount>
 800c4c2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c4c4:	687b      	ldr	r3, [r7, #4]
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}

0800c4ce <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c4ce:	b580      	push	{r7, lr}
 800c4d0:	b08e      	sub	sp, #56	@ 0x38
 800c4d2:	af04      	add	r7, sp, #16
 800c4d4:	60f8      	str	r0, [r7, #12]
 800c4d6:	60b9      	str	r1, [r7, #8]
 800c4d8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4de:	f3ef 8305 	mrs	r3, IPSR
 800c4e2:	617b      	str	r3, [r7, #20]
  return(result);
 800c4e4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d17e      	bne.n	800c5e8 <osThreadNew+0x11a>
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d07b      	beq.n	800c5e8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c4f0:	2380      	movs	r3, #128	@ 0x80
 800c4f2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c4f4:	2318      	movs	r3, #24
 800c4f6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c4fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c500:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d045      	beq.n	800c594 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d002      	beq.n	800c516 <osThreadNew+0x48>
        name = attr->name;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	699b      	ldr	r3, [r3, #24]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d002      	beq.n	800c524 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	699b      	ldr	r3, [r3, #24]
 800c522:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c524:	69fb      	ldr	r3, [r7, #28]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d008      	beq.n	800c53c <osThreadNew+0x6e>
 800c52a:	69fb      	ldr	r3, [r7, #28]
 800c52c:	2b38      	cmp	r3, #56	@ 0x38
 800c52e:	d805      	bhi.n	800c53c <osThreadNew+0x6e>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	f003 0301 	and.w	r3, r3, #1
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d001      	beq.n	800c540 <osThreadNew+0x72>
        return (NULL);
 800c53c:	2300      	movs	r3, #0
 800c53e:	e054      	b.n	800c5ea <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	695b      	ldr	r3, [r3, #20]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d003      	beq.n	800c550 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	695b      	ldr	r3, [r3, #20]
 800c54c:	089b      	lsrs	r3, r3, #2
 800c54e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	689b      	ldr	r3, [r3, #8]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d00e      	beq.n	800c576 <osThreadNew+0xa8>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	2ba7      	cmp	r3, #167	@ 0xa7
 800c55e:	d90a      	bls.n	800c576 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c564:	2b00      	cmp	r3, #0
 800c566:	d006      	beq.n	800c576 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	695b      	ldr	r3, [r3, #20]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d002      	beq.n	800c576 <osThreadNew+0xa8>
        mem = 1;
 800c570:	2301      	movs	r3, #1
 800c572:	61bb      	str	r3, [r7, #24]
 800c574:	e010      	b.n	800c598 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	689b      	ldr	r3, [r3, #8]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d10c      	bne.n	800c598 <osThreadNew+0xca>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d108      	bne.n	800c598 <osThreadNew+0xca>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	691b      	ldr	r3, [r3, #16]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d104      	bne.n	800c598 <osThreadNew+0xca>
          mem = 0;
 800c58e:	2300      	movs	r3, #0
 800c590:	61bb      	str	r3, [r7, #24]
 800c592:	e001      	b.n	800c598 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c594:	2300      	movs	r3, #0
 800c596:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d110      	bne.n	800c5c0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c5a6:	9202      	str	r2, [sp, #8]
 800c5a8:	9301      	str	r3, [sp, #4]
 800c5aa:	69fb      	ldr	r3, [r7, #28]
 800c5ac:	9300      	str	r3, [sp, #0]
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	6a3a      	ldr	r2, [r7, #32]
 800c5b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c5b4:	68f8      	ldr	r0, [r7, #12]
 800c5b6:	f001 fdf5 	bl	800e1a4 <xTaskCreateStatic>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	613b      	str	r3, [r7, #16]
 800c5be:	e013      	b.n	800c5e8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d110      	bne.n	800c5e8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c5c6:	6a3b      	ldr	r3, [r7, #32]
 800c5c8:	b29a      	uxth	r2, r3
 800c5ca:	f107 0310 	add.w	r3, r7, #16
 800c5ce:	9301      	str	r3, [sp, #4]
 800c5d0:	69fb      	ldr	r3, [r7, #28]
 800c5d2:	9300      	str	r3, [sp, #0]
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f001 fe43 	bl	800e264 <xTaskCreate>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d001      	beq.n	800c5e8 <osThreadNew+0x11a>
            hTask = NULL;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c5e8:	693b      	ldr	r3, [r7, #16]
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3728      	adds	r7, #40	@ 0x28
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}

0800c5f2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c5f2:	b580      	push	{r7, lr}
 800c5f4:	b084      	sub	sp, #16
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5fa:	f3ef 8305 	mrs	r3, IPSR
 800c5fe:	60bb      	str	r3, [r7, #8]
  return(result);
 800c600:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c602:	2b00      	cmp	r3, #0
 800c604:	d003      	beq.n	800c60e <osDelay+0x1c>
    stat = osErrorISR;
 800c606:	f06f 0305 	mvn.w	r3, #5
 800c60a:	60fb      	str	r3, [r7, #12]
 800c60c:	e007      	b.n	800c61e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c60e:	2300      	movs	r3, #0
 800c610:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d002      	beq.n	800c61e <osDelay+0x2c>
      vTaskDelay(ticks);
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f001 ff81 	bl	800e520 <vTaskDelay>
    }
  }

  return (stat);
 800c61e:	68fb      	ldr	r3, [r7, #12]
}
 800c620:	4618      	mov	r0, r3
 800c622:	3710      	adds	r7, #16
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800c628:	b580      	push	{r7, lr}
 800c62a:	b084      	sub	sp, #16
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f003 fa0b 	bl	800fa4c <pvTimerGetTimerID>
 800c636:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d005      	beq.n	800c64a <TimerCallback+0x22>
    callb->func (callb->arg);
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	68fa      	ldr	r2, [r7, #12]
 800c644:	6852      	ldr	r2, [r2, #4]
 800c646:	4610      	mov	r0, r2
 800c648:	4798      	blx	r3
  }
}
 800c64a:	bf00      	nop
 800c64c:	3710      	adds	r7, #16
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
	...

0800c654 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800c654:	b580      	push	{r7, lr}
 800c656:	b08c      	sub	sp, #48	@ 0x30
 800c658:	af02      	add	r7, sp, #8
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	607a      	str	r2, [r7, #4]
 800c65e:	603b      	str	r3, [r7, #0]
 800c660:	460b      	mov	r3, r1
 800c662:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800c664:	2300      	movs	r3, #0
 800c666:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c668:	f3ef 8305 	mrs	r3, IPSR
 800c66c:	613b      	str	r3, [r7, #16]
  return(result);
 800c66e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800c670:	2b00      	cmp	r3, #0
 800c672:	d163      	bne.n	800c73c <osTimerNew+0xe8>
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d060      	beq.n	800c73c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800c67a:	2008      	movs	r0, #8
 800c67c:	f003 fc5e 	bl	800ff3c <pvPortMalloc>
 800c680:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d059      	beq.n	800c73c <osTimerNew+0xe8>
      callb->func = func;
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	68fa      	ldr	r2, [r7, #12]
 800c68c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800c694:	7afb      	ldrb	r3, [r7, #11]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d102      	bne.n	800c6a0 <osTimerNew+0x4c>
        reload = pdFALSE;
 800c69a:	2300      	movs	r3, #0
 800c69c:	61fb      	str	r3, [r7, #28]
 800c69e:	e001      	b.n	800c6a4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800c6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c6a8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d01c      	beq.n	800c6ee <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d002      	beq.n	800c6c2 <osTimerNew+0x6e>
          name = attr->name;
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d006      	beq.n	800c6d8 <osTimerNew+0x84>
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	2b2b      	cmp	r3, #43	@ 0x2b
 800c6d0:	d902      	bls.n	800c6d8 <osTimerNew+0x84>
          mem = 1;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	61bb      	str	r3, [r7, #24]
 800c6d6:	e00c      	b.n	800c6f2 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	689b      	ldr	r3, [r3, #8]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d108      	bne.n	800c6f2 <osTimerNew+0x9e>
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d104      	bne.n	800c6f2 <osTimerNew+0x9e>
            mem = 0;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	61bb      	str	r3, [r7, #24]
 800c6ec:	e001      	b.n	800c6f2 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d10c      	bne.n	800c712 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	689b      	ldr	r3, [r3, #8]
 800c6fc:	9301      	str	r3, [sp, #4]
 800c6fe:	4b12      	ldr	r3, [pc, #72]	@ (800c748 <osTimerNew+0xf4>)
 800c700:	9300      	str	r3, [sp, #0]
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	69fa      	ldr	r2, [r7, #28]
 800c706:	2101      	movs	r1, #1
 800c708:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c70a:	f002 fe12 	bl	800f332 <xTimerCreateStatic>
 800c70e:	6238      	str	r0, [r7, #32]
 800c710:	e00b      	b.n	800c72a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800c712:	69bb      	ldr	r3, [r7, #24]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d108      	bne.n	800c72a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800c718:	4b0b      	ldr	r3, [pc, #44]	@ (800c748 <osTimerNew+0xf4>)
 800c71a:	9300      	str	r3, [sp, #0]
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	69fa      	ldr	r2, [r7, #28]
 800c720:	2101      	movs	r1, #1
 800c722:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c724:	f002 fde4 	bl	800f2f0 <xTimerCreate>
 800c728:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800c72a:	6a3b      	ldr	r3, [r7, #32]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d105      	bne.n	800c73c <osTimerNew+0xe8>
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d002      	beq.n	800c73c <osTimerNew+0xe8>
        vPortFree (callb);
 800c736:	6978      	ldr	r0, [r7, #20]
 800c738:	f003 fcce 	bl	80100d8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800c73c:	6a3b      	ldr	r3, [r7, #32]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3728      	adds	r7, #40	@ 0x28
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	0800c629 	.word	0x0800c629

0800c74c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b088      	sub	sp, #32
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c754:	2300      	movs	r3, #0
 800c756:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c758:	f3ef 8305 	mrs	r3, IPSR
 800c75c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c75e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c760:	2b00      	cmp	r3, #0
 800c762:	d174      	bne.n	800c84e <osMutexNew+0x102>
    if (attr != NULL) {
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d003      	beq.n	800c772 <osMutexNew+0x26>
      type = attr->attr_bits;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	61bb      	str	r3, [r7, #24]
 800c770:	e001      	b.n	800c776 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c772:	2300      	movs	r3, #0
 800c774:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c776:	69bb      	ldr	r3, [r7, #24]
 800c778:	f003 0301 	and.w	r3, r3, #1
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d002      	beq.n	800c786 <osMutexNew+0x3a>
      rmtx = 1U;
 800c780:	2301      	movs	r3, #1
 800c782:	617b      	str	r3, [r7, #20]
 800c784:	e001      	b.n	800c78a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c786:	2300      	movs	r3, #0
 800c788:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c78a:	69bb      	ldr	r3, [r7, #24]
 800c78c:	f003 0308 	and.w	r3, r3, #8
 800c790:	2b00      	cmp	r3, #0
 800c792:	d15c      	bne.n	800c84e <osMutexNew+0x102>
      mem = -1;
 800c794:	f04f 33ff 	mov.w	r3, #4294967295
 800c798:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d015      	beq.n	800c7cc <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	689b      	ldr	r3, [r3, #8]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d006      	beq.n	800c7b6 <osMutexNew+0x6a>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	68db      	ldr	r3, [r3, #12]
 800c7ac:	2b4f      	cmp	r3, #79	@ 0x4f
 800c7ae:	d902      	bls.n	800c7b6 <osMutexNew+0x6a>
          mem = 1;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	613b      	str	r3, [r7, #16]
 800c7b4:	e00c      	b.n	800c7d0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d108      	bne.n	800c7d0 <osMutexNew+0x84>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	68db      	ldr	r3, [r3, #12]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d104      	bne.n	800c7d0 <osMutexNew+0x84>
            mem = 0;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	613b      	str	r3, [r7, #16]
 800c7ca:	e001      	b.n	800c7d0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d112      	bne.n	800c7fc <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d007      	beq.n	800c7ec <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	2004      	movs	r0, #4
 800c7e4:	f000 fd71 	bl	800d2ca <xQueueCreateMutexStatic>
 800c7e8:	61f8      	str	r0, [r7, #28]
 800c7ea:	e016      	b.n	800c81a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	689b      	ldr	r3, [r3, #8]
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	2001      	movs	r0, #1
 800c7f4:	f000 fd69 	bl	800d2ca <xQueueCreateMutexStatic>
 800c7f8:	61f8      	str	r0, [r7, #28]
 800c7fa:	e00e      	b.n	800c81a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10b      	bne.n	800c81a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d004      	beq.n	800c812 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c808:	2004      	movs	r0, #4
 800c80a:	f000 fd46 	bl	800d29a <xQueueCreateMutex>
 800c80e:	61f8      	str	r0, [r7, #28]
 800c810:	e003      	b.n	800c81a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c812:	2001      	movs	r0, #1
 800c814:	f000 fd41 	bl	800d29a <xQueueCreateMutex>
 800c818:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c81a:	69fb      	ldr	r3, [r7, #28]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d00c      	beq.n	800c83a <osMutexNew+0xee>
        if (attr != NULL) {
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d003      	beq.n	800c82e <osMutexNew+0xe2>
          name = attr->name;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	60fb      	str	r3, [r7, #12]
 800c82c:	e001      	b.n	800c832 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c82e:	2300      	movs	r3, #0
 800c830:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c832:	68f9      	ldr	r1, [r7, #12]
 800c834:	69f8      	ldr	r0, [r7, #28]
 800c836:	f001 fc2d 	bl	800e094 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c83a:	69fb      	ldr	r3, [r7, #28]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d006      	beq.n	800c84e <osMutexNew+0x102>
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d003      	beq.n	800c84e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c846:	69fb      	ldr	r3, [r7, #28]
 800c848:	f043 0301 	orr.w	r3, r3, #1
 800c84c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c84e:	69fb      	ldr	r3, [r7, #28]
}
 800c850:	4618      	mov	r0, r3
 800c852:	3720      	adds	r7, #32
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c858:	b580      	push	{r7, lr}
 800c85a:	b086      	sub	sp, #24
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f023 0301 	bic.w	r3, r3, #1
 800c868:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f003 0301 	and.w	r3, r3, #1
 800c870:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c872:	2300      	movs	r3, #0
 800c874:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c876:	f3ef 8305 	mrs	r3, IPSR
 800c87a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c87c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d003      	beq.n	800c88a <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c882:	f06f 0305 	mvn.w	r3, #5
 800c886:	617b      	str	r3, [r7, #20]
 800c888:	e02c      	b.n	800c8e4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d103      	bne.n	800c898 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c890:	f06f 0303 	mvn.w	r3, #3
 800c894:	617b      	str	r3, [r7, #20]
 800c896:	e025      	b.n	800c8e4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d011      	beq.n	800c8c2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c89e:	6839      	ldr	r1, [r7, #0]
 800c8a0:	6938      	ldr	r0, [r7, #16]
 800c8a2:	f000 fd62 	bl	800d36a <xQueueTakeMutexRecursive>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d01b      	beq.n	800c8e4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d003      	beq.n	800c8ba <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c8b2:	f06f 0301 	mvn.w	r3, #1
 800c8b6:	617b      	str	r3, [r7, #20]
 800c8b8:	e014      	b.n	800c8e4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c8ba:	f06f 0302 	mvn.w	r3, #2
 800c8be:	617b      	str	r3, [r7, #20]
 800c8c0:	e010      	b.n	800c8e4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c8c2:	6839      	ldr	r1, [r7, #0]
 800c8c4:	6938      	ldr	r0, [r7, #16]
 800c8c6:	f001 f907 	bl	800dad8 <xQueueSemaphoreTake>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d009      	beq.n	800c8e4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d003      	beq.n	800c8de <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c8d6:	f06f 0301 	mvn.w	r3, #1
 800c8da:	617b      	str	r3, [r7, #20]
 800c8dc:	e002      	b.n	800c8e4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c8de:	f06f 0302 	mvn.w	r3, #2
 800c8e2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c8e4:	697b      	ldr	r3, [r7, #20]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3718      	adds	r7, #24
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c8ee:	b580      	push	{r7, lr}
 800c8f0:	b086      	sub	sp, #24
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f023 0301 	bic.w	r3, r3, #1
 800c8fc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f003 0301 	and.w	r3, r3, #1
 800c904:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c906:	2300      	movs	r3, #0
 800c908:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c90a:	f3ef 8305 	mrs	r3, IPSR
 800c90e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c910:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c912:	2b00      	cmp	r3, #0
 800c914:	d003      	beq.n	800c91e <osMutexRelease+0x30>
    stat = osErrorISR;
 800c916:	f06f 0305 	mvn.w	r3, #5
 800c91a:	617b      	str	r3, [r7, #20]
 800c91c:	e01f      	b.n	800c95e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d103      	bne.n	800c92c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c924:	f06f 0303 	mvn.w	r3, #3
 800c928:	617b      	str	r3, [r7, #20]
 800c92a:	e018      	b.n	800c95e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d009      	beq.n	800c946 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c932:	6938      	ldr	r0, [r7, #16]
 800c934:	f000 fce4 	bl	800d300 <xQueueGiveMutexRecursive>
 800c938:	4603      	mov	r3, r0
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d00f      	beq.n	800c95e <osMutexRelease+0x70>
        stat = osErrorResource;
 800c93e:	f06f 0302 	mvn.w	r3, #2
 800c942:	617b      	str	r3, [r7, #20]
 800c944:	e00b      	b.n	800c95e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c946:	2300      	movs	r3, #0
 800c948:	2200      	movs	r2, #0
 800c94a:	2100      	movs	r1, #0
 800c94c:	6938      	ldr	r0, [r7, #16]
 800c94e:	f000 fdb1 	bl	800d4b4 <xQueueGenericSend>
 800c952:	4603      	mov	r3, r0
 800c954:	2b01      	cmp	r3, #1
 800c956:	d002      	beq.n	800c95e <osMutexRelease+0x70>
        stat = osErrorResource;
 800c958:	f06f 0302 	mvn.w	r3, #2
 800c95c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c95e:	697b      	ldr	r3, [r7, #20]
}
 800c960:	4618      	mov	r0, r3
 800c962:	3718      	adds	r7, #24
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c968:	b580      	push	{r7, lr}
 800c96a:	b08a      	sub	sp, #40	@ 0x28
 800c96c:	af02      	add	r7, sp, #8
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c974:	2300      	movs	r3, #0
 800c976:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c978:	f3ef 8305 	mrs	r3, IPSR
 800c97c:	613b      	str	r3, [r7, #16]
  return(result);
 800c97e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c980:	2b00      	cmp	r3, #0
 800c982:	d175      	bne.n	800ca70 <osSemaphoreNew+0x108>
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d072      	beq.n	800ca70 <osSemaphoreNew+0x108>
 800c98a:	68ba      	ldr	r2, [r7, #8]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d86e      	bhi.n	800ca70 <osSemaphoreNew+0x108>
    mem = -1;
 800c992:	f04f 33ff 	mov.w	r3, #4294967295
 800c996:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d015      	beq.n	800c9ca <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d006      	beq.n	800c9b4 <osSemaphoreNew+0x4c>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	2b4f      	cmp	r3, #79	@ 0x4f
 800c9ac:	d902      	bls.n	800c9b4 <osSemaphoreNew+0x4c>
        mem = 1;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	61bb      	str	r3, [r7, #24]
 800c9b2:	e00c      	b.n	800c9ce <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d108      	bne.n	800c9ce <osSemaphoreNew+0x66>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	68db      	ldr	r3, [r3, #12]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d104      	bne.n	800c9ce <osSemaphoreNew+0x66>
          mem = 0;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	61bb      	str	r3, [r7, #24]
 800c9c8:	e001      	b.n	800c9ce <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c9ce:	69bb      	ldr	r3, [r7, #24]
 800c9d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9d4:	d04c      	beq.n	800ca70 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d128      	bne.n	800ca2e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c9dc:	69bb      	ldr	r3, [r7, #24]
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d10a      	bne.n	800c9f8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	689b      	ldr	r3, [r3, #8]
 800c9e6:	2203      	movs	r2, #3
 800c9e8:	9200      	str	r2, [sp, #0]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	2100      	movs	r1, #0
 800c9ee:	2001      	movs	r0, #1
 800c9f0:	f000 fb5e 	bl	800d0b0 <xQueueGenericCreateStatic>
 800c9f4:	61f8      	str	r0, [r7, #28]
 800c9f6:	e005      	b.n	800ca04 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c9f8:	2203      	movs	r2, #3
 800c9fa:	2100      	movs	r1, #0
 800c9fc:	2001      	movs	r0, #1
 800c9fe:	f000 fbd4 	bl	800d1aa <xQueueGenericCreate>
 800ca02:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ca04:	69fb      	ldr	r3, [r7, #28]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d022      	beq.n	800ca50 <osSemaphoreNew+0xe8>
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d01f      	beq.n	800ca50 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ca10:	2300      	movs	r3, #0
 800ca12:	2200      	movs	r2, #0
 800ca14:	2100      	movs	r1, #0
 800ca16:	69f8      	ldr	r0, [r7, #28]
 800ca18:	f000 fd4c 	bl	800d4b4 <xQueueGenericSend>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d016      	beq.n	800ca50 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ca22:	69f8      	ldr	r0, [r7, #28]
 800ca24:	f001 f9ea 	bl	800ddfc <vQueueDelete>
            hSemaphore = NULL;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	61fb      	str	r3, [r7, #28]
 800ca2c:	e010      	b.n	800ca50 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	d108      	bne.n	800ca46 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	689b      	ldr	r3, [r3, #8]
 800ca38:	461a      	mov	r2, r3
 800ca3a:	68b9      	ldr	r1, [r7, #8]
 800ca3c:	68f8      	ldr	r0, [r7, #12]
 800ca3e:	f000 fccb 	bl	800d3d8 <xQueueCreateCountingSemaphoreStatic>
 800ca42:	61f8      	str	r0, [r7, #28]
 800ca44:	e004      	b.n	800ca50 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ca46:	68b9      	ldr	r1, [r7, #8]
 800ca48:	68f8      	ldr	r0, [r7, #12]
 800ca4a:	f000 fcfe 	bl	800d44a <xQueueCreateCountingSemaphore>
 800ca4e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d00c      	beq.n	800ca70 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d003      	beq.n	800ca64 <osSemaphoreNew+0xfc>
          name = attr->name;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	617b      	str	r3, [r7, #20]
 800ca62:	e001      	b.n	800ca68 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800ca64:	2300      	movs	r3, #0
 800ca66:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ca68:	6979      	ldr	r1, [r7, #20]
 800ca6a:	69f8      	ldr	r0, [r7, #28]
 800ca6c:	f001 fb12 	bl	800e094 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ca70:	69fb      	ldr	r3, [r7, #28]
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3720      	adds	r7, #32
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
	...

0800ca7c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b086      	sub	sp, #24
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d103      	bne.n	800ca9c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ca94:	f06f 0303 	mvn.w	r3, #3
 800ca98:	617b      	str	r3, [r7, #20]
 800ca9a:	e039      	b.n	800cb10 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca9c:	f3ef 8305 	mrs	r3, IPSR
 800caa0:	60fb      	str	r3, [r7, #12]
  return(result);
 800caa2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d022      	beq.n	800caee <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d003      	beq.n	800cab6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800caae:	f06f 0303 	mvn.w	r3, #3
 800cab2:	617b      	str	r3, [r7, #20]
 800cab4:	e02c      	b.n	800cb10 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800cab6:	2300      	movs	r3, #0
 800cab8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800caba:	f107 0308 	add.w	r3, r7, #8
 800cabe:	461a      	mov	r2, r3
 800cac0:	2100      	movs	r1, #0
 800cac2:	6938      	ldr	r0, [r7, #16]
 800cac4:	f001 f918 	bl	800dcf8 <xQueueReceiveFromISR>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d003      	beq.n	800cad6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800cace:	f06f 0302 	mvn.w	r3, #2
 800cad2:	617b      	str	r3, [r7, #20]
 800cad4:	e01c      	b.n	800cb10 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d019      	beq.n	800cb10 <osSemaphoreAcquire+0x94>
 800cadc:	4b0f      	ldr	r3, [pc, #60]	@ (800cb1c <osSemaphoreAcquire+0xa0>)
 800cade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cae2:	601a      	str	r2, [r3, #0]
 800cae4:	f3bf 8f4f 	dsb	sy
 800cae8:	f3bf 8f6f 	isb	sy
 800caec:	e010      	b.n	800cb10 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800caee:	6839      	ldr	r1, [r7, #0]
 800caf0:	6938      	ldr	r0, [r7, #16]
 800caf2:	f000 fff1 	bl	800dad8 <xQueueSemaphoreTake>
 800caf6:	4603      	mov	r3, r0
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d009      	beq.n	800cb10 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d003      	beq.n	800cb0a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800cb02:	f06f 0301 	mvn.w	r3, #1
 800cb06:	617b      	str	r3, [r7, #20]
 800cb08:	e002      	b.n	800cb10 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800cb0a:	f06f 0302 	mvn.w	r3, #2
 800cb0e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800cb10:	697b      	ldr	r3, [r7, #20]
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3718      	adds	r7, #24
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	e000ed04 	.word	0xe000ed04

0800cb20 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b086      	sub	sp, #24
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d103      	bne.n	800cb3e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800cb36:	f06f 0303 	mvn.w	r3, #3
 800cb3a:	617b      	str	r3, [r7, #20]
 800cb3c:	e02c      	b.n	800cb98 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb3e:	f3ef 8305 	mrs	r3, IPSR
 800cb42:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb44:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d01a      	beq.n	800cb80 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cb4e:	f107 0308 	add.w	r3, r7, #8
 800cb52:	4619      	mov	r1, r3
 800cb54:	6938      	ldr	r0, [r7, #16]
 800cb56:	f000 fe4d 	bl	800d7f4 <xQueueGiveFromISR>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	2b01      	cmp	r3, #1
 800cb5e:	d003      	beq.n	800cb68 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800cb60:	f06f 0302 	mvn.w	r3, #2
 800cb64:	617b      	str	r3, [r7, #20]
 800cb66:	e017      	b.n	800cb98 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d014      	beq.n	800cb98 <osSemaphoreRelease+0x78>
 800cb6e:	4b0d      	ldr	r3, [pc, #52]	@ (800cba4 <osSemaphoreRelease+0x84>)
 800cb70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb74:	601a      	str	r2, [r3, #0]
 800cb76:	f3bf 8f4f 	dsb	sy
 800cb7a:	f3bf 8f6f 	isb	sy
 800cb7e:	e00b      	b.n	800cb98 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cb80:	2300      	movs	r3, #0
 800cb82:	2200      	movs	r2, #0
 800cb84:	2100      	movs	r1, #0
 800cb86:	6938      	ldr	r0, [r7, #16]
 800cb88:	f000 fc94 	bl	800d4b4 <xQueueGenericSend>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	2b01      	cmp	r3, #1
 800cb90:	d002      	beq.n	800cb98 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800cb92:	f06f 0302 	mvn.w	r3, #2
 800cb96:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800cb98:	697b      	ldr	r3, [r7, #20]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3718      	adds	r7, #24
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	e000ed04 	.word	0xe000ed04

0800cba8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b08a      	sub	sp, #40	@ 0x28
 800cbac:	af02      	add	r7, sp, #8
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	60b9      	str	r1, [r7, #8]
 800cbb2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbb8:	f3ef 8305 	mrs	r3, IPSR
 800cbbc:	613b      	str	r3, [r7, #16]
  return(result);
 800cbbe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d15f      	bne.n	800cc84 <osMessageQueueNew+0xdc>
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d05c      	beq.n	800cc84 <osMessageQueueNew+0xdc>
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d059      	beq.n	800cc84 <osMessageQueueNew+0xdc>
    mem = -1;
 800cbd0:	f04f 33ff 	mov.w	r3, #4294967295
 800cbd4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d029      	beq.n	800cc30 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	689b      	ldr	r3, [r3, #8]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d012      	beq.n	800cc0a <osMessageQueueNew+0x62>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	2b4f      	cmp	r3, #79	@ 0x4f
 800cbea:	d90e      	bls.n	800cc0a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d00a      	beq.n	800cc0a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	695a      	ldr	r2, [r3, #20]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	68b9      	ldr	r1, [r7, #8]
 800cbfc:	fb01 f303 	mul.w	r3, r1, r3
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d302      	bcc.n	800cc0a <osMessageQueueNew+0x62>
        mem = 1;
 800cc04:	2301      	movs	r3, #1
 800cc06:	61bb      	str	r3, [r7, #24]
 800cc08:	e014      	b.n	800cc34 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d110      	bne.n	800cc34 <osMessageQueueNew+0x8c>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	68db      	ldr	r3, [r3, #12]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d10c      	bne.n	800cc34 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d108      	bne.n	800cc34 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	695b      	ldr	r3, [r3, #20]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d104      	bne.n	800cc34 <osMessageQueueNew+0x8c>
          mem = 0;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	61bb      	str	r3, [r7, #24]
 800cc2e:	e001      	b.n	800cc34 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800cc30:	2300      	movs	r3, #0
 800cc32:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cc34:	69bb      	ldr	r3, [r7, #24]
 800cc36:	2b01      	cmp	r3, #1
 800cc38:	d10b      	bne.n	800cc52 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	691a      	ldr	r2, [r3, #16]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	689b      	ldr	r3, [r3, #8]
 800cc42:	2100      	movs	r1, #0
 800cc44:	9100      	str	r1, [sp, #0]
 800cc46:	68b9      	ldr	r1, [r7, #8]
 800cc48:	68f8      	ldr	r0, [r7, #12]
 800cc4a:	f000 fa31 	bl	800d0b0 <xQueueGenericCreateStatic>
 800cc4e:	61f8      	str	r0, [r7, #28]
 800cc50:	e008      	b.n	800cc64 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800cc52:	69bb      	ldr	r3, [r7, #24]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d105      	bne.n	800cc64 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800cc58:	2200      	movs	r2, #0
 800cc5a:	68b9      	ldr	r1, [r7, #8]
 800cc5c:	68f8      	ldr	r0, [r7, #12]
 800cc5e:	f000 faa4 	bl	800d1aa <xQueueGenericCreate>
 800cc62:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d00c      	beq.n	800cc84 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d003      	beq.n	800cc78 <osMessageQueueNew+0xd0>
        name = attr->name;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	617b      	str	r3, [r7, #20]
 800cc76:	e001      	b.n	800cc7c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800cc7c:	6979      	ldr	r1, [r7, #20]
 800cc7e:	69f8      	ldr	r0, [r7, #28]
 800cc80:	f001 fa08 	bl	800e094 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800cc84:	69fb      	ldr	r3, [r7, #28]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3720      	adds	r7, #32
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
	...

0800cc90 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b088      	sub	sp, #32
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	60b9      	str	r1, [r7, #8]
 800cc9a:	603b      	str	r3, [r7, #0]
 800cc9c:	4613      	mov	r3, r2
 800cc9e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cca4:	2300      	movs	r3, #0
 800cca6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cca8:	f3ef 8305 	mrs	r3, IPSR
 800ccac:	617b      	str	r3, [r7, #20]
  return(result);
 800ccae:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d028      	beq.n	800cd06 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ccb4:	69bb      	ldr	r3, [r7, #24]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d005      	beq.n	800ccc6 <osMessageQueuePut+0x36>
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d002      	beq.n	800ccc6 <osMessageQueuePut+0x36>
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d003      	beq.n	800ccce <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ccc6:	f06f 0303 	mvn.w	r3, #3
 800ccca:	61fb      	str	r3, [r7, #28]
 800cccc:	e038      	b.n	800cd40 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ccd2:	f107 0210 	add.w	r2, r7, #16
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	68b9      	ldr	r1, [r7, #8]
 800ccda:	69b8      	ldr	r0, [r7, #24]
 800ccdc:	f000 fcec 	bl	800d6b8 <xQueueGenericSendFromISR>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d003      	beq.n	800ccee <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800cce6:	f06f 0302 	mvn.w	r3, #2
 800ccea:	61fb      	str	r3, [r7, #28]
 800ccec:	e028      	b.n	800cd40 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d025      	beq.n	800cd40 <osMessageQueuePut+0xb0>
 800ccf4:	4b15      	ldr	r3, [pc, #84]	@ (800cd4c <osMessageQueuePut+0xbc>)
 800ccf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccfa:	601a      	str	r2, [r3, #0]
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	f3bf 8f6f 	isb	sy
 800cd04:	e01c      	b.n	800cd40 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cd06:	69bb      	ldr	r3, [r7, #24]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d002      	beq.n	800cd12 <osMessageQueuePut+0x82>
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d103      	bne.n	800cd1a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800cd12:	f06f 0303 	mvn.w	r3, #3
 800cd16:	61fb      	str	r3, [r7, #28]
 800cd18:	e012      	b.n	800cd40 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	683a      	ldr	r2, [r7, #0]
 800cd1e:	68b9      	ldr	r1, [r7, #8]
 800cd20:	69b8      	ldr	r0, [r7, #24]
 800cd22:	f000 fbc7 	bl	800d4b4 <xQueueGenericSend>
 800cd26:	4603      	mov	r3, r0
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d009      	beq.n	800cd40 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d003      	beq.n	800cd3a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800cd32:	f06f 0301 	mvn.w	r3, #1
 800cd36:	61fb      	str	r3, [r7, #28]
 800cd38:	e002      	b.n	800cd40 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800cd3a:	f06f 0302 	mvn.w	r3, #2
 800cd3e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cd40:	69fb      	ldr	r3, [r7, #28]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3720      	adds	r7, #32
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	e000ed04 	.word	0xe000ed04

0800cd50 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b088      	sub	sp, #32
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	607a      	str	r2, [r7, #4]
 800cd5c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cd62:	2300      	movs	r3, #0
 800cd64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd66:	f3ef 8305 	mrs	r3, IPSR
 800cd6a:	617b      	str	r3, [r7, #20]
  return(result);
 800cd6c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d028      	beq.n	800cdc4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cd72:	69bb      	ldr	r3, [r7, #24]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d005      	beq.n	800cd84 <osMessageQueueGet+0x34>
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d002      	beq.n	800cd84 <osMessageQueueGet+0x34>
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d003      	beq.n	800cd8c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800cd84:	f06f 0303 	mvn.w	r3, #3
 800cd88:	61fb      	str	r3, [r7, #28]
 800cd8a:	e037      	b.n	800cdfc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cd90:	f107 0310 	add.w	r3, r7, #16
 800cd94:	461a      	mov	r2, r3
 800cd96:	68b9      	ldr	r1, [r7, #8]
 800cd98:	69b8      	ldr	r0, [r7, #24]
 800cd9a:	f000 ffad 	bl	800dcf8 <xQueueReceiveFromISR>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	d003      	beq.n	800cdac <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800cda4:	f06f 0302 	mvn.w	r3, #2
 800cda8:	61fb      	str	r3, [r7, #28]
 800cdaa:	e027      	b.n	800cdfc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d024      	beq.n	800cdfc <osMessageQueueGet+0xac>
 800cdb2:	4b15      	ldr	r3, [pc, #84]	@ (800ce08 <osMessageQueueGet+0xb8>)
 800cdb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cdb8:	601a      	str	r2, [r3, #0]
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	f3bf 8f6f 	isb	sy
 800cdc2:	e01b      	b.n	800cdfc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cdc4:	69bb      	ldr	r3, [r7, #24]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d002      	beq.n	800cdd0 <osMessageQueueGet+0x80>
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d103      	bne.n	800cdd8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cdd0:	f06f 0303 	mvn.w	r3, #3
 800cdd4:	61fb      	str	r3, [r7, #28]
 800cdd6:	e011      	b.n	800cdfc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cdd8:	683a      	ldr	r2, [r7, #0]
 800cdda:	68b9      	ldr	r1, [r7, #8]
 800cddc:	69b8      	ldr	r0, [r7, #24]
 800cdde:	f000 fd99 	bl	800d914 <xQueueReceive>
 800cde2:	4603      	mov	r3, r0
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d009      	beq.n	800cdfc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d003      	beq.n	800cdf6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cdee:	f06f 0301 	mvn.w	r3, #1
 800cdf2:	61fb      	str	r3, [r7, #28]
 800cdf4:	e002      	b.n	800cdfc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800cdf6:	f06f 0302 	mvn.w	r3, #2
 800cdfa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cdfc:	69fb      	ldr	r3, [r7, #28]
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3720      	adds	r7, #32
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
 800ce06:	bf00      	nop
 800ce08:	e000ed04 	.word	0xe000ed04

0800ce0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ce0c:	b480      	push	{r7}
 800ce0e:	b085      	sub	sp, #20
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	4a07      	ldr	r2, [pc, #28]	@ (800ce38 <vApplicationGetIdleTaskMemory+0x2c>)
 800ce1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	4a06      	ldr	r2, [pc, #24]	@ (800ce3c <vApplicationGetIdleTaskMemory+0x30>)
 800ce22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2280      	movs	r2, #128	@ 0x80
 800ce28:	601a      	str	r2, [r3, #0]
}
 800ce2a:	bf00      	nop
 800ce2c:	3714      	adds	r7, #20
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr
 800ce36:	bf00      	nop
 800ce38:	24005120 	.word	0x24005120
 800ce3c:	240051c8 	.word	0x240051c8

0800ce40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ce40:	b480      	push	{r7}
 800ce42:	b085      	sub	sp, #20
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	4a07      	ldr	r2, [pc, #28]	@ (800ce6c <vApplicationGetTimerTaskMemory+0x2c>)
 800ce50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	4a06      	ldr	r2, [pc, #24]	@ (800ce70 <vApplicationGetTimerTaskMemory+0x30>)
 800ce56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ce5e:	601a      	str	r2, [r3, #0]
}
 800ce60:	bf00      	nop
 800ce62:	3714      	adds	r7, #20
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr
 800ce6c:	240053c8 	.word	0x240053c8
 800ce70:	24005470 	.word	0x24005470

0800ce74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ce74:	b480      	push	{r7}
 800ce76:	b083      	sub	sp, #12
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f103 0208 	add.w	r2, r3, #8
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f04f 32ff 	mov.w	r2, #4294967295
 800ce8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f103 0208 	add.w	r2, r3, #8
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f103 0208 	add.w	r2, r3, #8
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2200      	movs	r2, #0
 800cea6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cea8:	bf00      	nop
 800ceaa:	370c      	adds	r7, #12
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr

0800ceb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2200      	movs	r2, #0
 800cec0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cec2:	bf00      	nop
 800cec4:	370c      	adds	r7, #12
 800cec6:	46bd      	mov	sp, r7
 800cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cecc:	4770      	bx	lr

0800cece <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cece:	b480      	push	{r7}
 800ced0:	b085      	sub	sp, #20
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
 800ced6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	68fa      	ldr	r2, [r7, #12]
 800cee2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	689a      	ldr	r2, [r3, #8]
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	689b      	ldr	r3, [r3, #8]
 800cef0:	683a      	ldr	r2, [r7, #0]
 800cef2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	683a      	ldr	r2, [r7, #0]
 800cef8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	1c5a      	adds	r2, r3, #1
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	601a      	str	r2, [r3, #0]
}
 800cf0a:	bf00      	nop
 800cf0c:	3714      	adds	r7, #20
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr

0800cf16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf16:	b480      	push	{r7}
 800cf18:	b085      	sub	sp, #20
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
 800cf1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf2c:	d103      	bne.n	800cf36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	691b      	ldr	r3, [r3, #16]
 800cf32:	60fb      	str	r3, [r7, #12]
 800cf34:	e00c      	b.n	800cf50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	3308      	adds	r3, #8
 800cf3a:	60fb      	str	r3, [r7, #12]
 800cf3c:	e002      	b.n	800cf44 <vListInsert+0x2e>
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	60fb      	str	r3, [r7, #12]
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	685b      	ldr	r3, [r3, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	68ba      	ldr	r2, [r7, #8]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d2f6      	bcs.n	800cf3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	685a      	ldr	r2, [r3, #4]
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	683a      	ldr	r2, [r7, #0]
 800cf5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	68fa      	ldr	r2, [r7, #12]
 800cf64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	683a      	ldr	r2, [r7, #0]
 800cf6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	1c5a      	adds	r2, r3, #1
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	601a      	str	r2, [r3, #0]
}
 800cf7c:	bf00      	nop
 800cf7e:	3714      	adds	r7, #20
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr

0800cf88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b085      	sub	sp, #20
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	691b      	ldr	r3, [r3, #16]
 800cf94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	6892      	ldr	r2, [r2, #8]
 800cf9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	687a      	ldr	r2, [r7, #4]
 800cfa6:	6852      	ldr	r2, [r2, #4]
 800cfa8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d103      	bne.n	800cfbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	689a      	ldr	r2, [r3, #8]
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	1e5a      	subs	r2, r3, #1
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3714      	adds	r7, #20
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d10b      	bne.n	800d008 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cff4:	f383 8811 	msr	BASEPRI, r3
 800cff8:	f3bf 8f6f 	isb	sy
 800cffc:	f3bf 8f4f 	dsb	sy
 800d000:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d002:	bf00      	nop
 800d004:	bf00      	nop
 800d006:	e7fd      	b.n	800d004 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d008:	f002 fe76 	bl	800fcf8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d014:	68f9      	ldr	r1, [r7, #12]
 800d016:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d018:	fb01 f303 	mul.w	r3, r1, r3
 800d01c:	441a      	add	r2, r3
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2200      	movs	r2, #0
 800d026:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681a      	ldr	r2, [r3, #0]
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d038:	3b01      	subs	r3, #1
 800d03a:	68f9      	ldr	r1, [r7, #12]
 800d03c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d03e:	fb01 f303 	mul.w	r3, r1, r3
 800d042:	441a      	add	r2, r3
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	22ff      	movs	r2, #255	@ 0xff
 800d04c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	22ff      	movs	r2, #255	@ 0xff
 800d054:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d114      	bne.n	800d088 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	691b      	ldr	r3, [r3, #16]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d01a      	beq.n	800d09c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	3310      	adds	r3, #16
 800d06a:	4618      	mov	r0, r3
 800d06c:	f001 fd3e 	bl	800eaec <xTaskRemoveFromEventList>
 800d070:	4603      	mov	r3, r0
 800d072:	2b00      	cmp	r3, #0
 800d074:	d012      	beq.n	800d09c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d076:	4b0d      	ldr	r3, [pc, #52]	@ (800d0ac <xQueueGenericReset+0xd0>)
 800d078:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d07c:	601a      	str	r2, [r3, #0]
 800d07e:	f3bf 8f4f 	dsb	sy
 800d082:	f3bf 8f6f 	isb	sy
 800d086:	e009      	b.n	800d09c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	3310      	adds	r3, #16
 800d08c:	4618      	mov	r0, r3
 800d08e:	f7ff fef1 	bl	800ce74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	3324      	adds	r3, #36	@ 0x24
 800d096:	4618      	mov	r0, r3
 800d098:	f7ff feec 	bl	800ce74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d09c:	f002 fe5e 	bl	800fd5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d0a0:	2301      	movs	r3, #1
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3710      	adds	r7, #16
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	bf00      	nop
 800d0ac:	e000ed04 	.word	0xe000ed04

0800d0b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b08e      	sub	sp, #56	@ 0x38
 800d0b4:	af02      	add	r7, sp, #8
 800d0b6:	60f8      	str	r0, [r7, #12]
 800d0b8:	60b9      	str	r1, [r7, #8]
 800d0ba:	607a      	str	r2, [r7, #4]
 800d0bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10b      	bne.n	800d0dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c8:	f383 8811 	msr	BASEPRI, r3
 800d0cc:	f3bf 8f6f 	isb	sy
 800d0d0:	f3bf 8f4f 	dsb	sy
 800d0d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d0d6:	bf00      	nop
 800d0d8:	bf00      	nop
 800d0da:	e7fd      	b.n	800d0d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d10b      	bne.n	800d0fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0e6:	f383 8811 	msr	BASEPRI, r3
 800d0ea:	f3bf 8f6f 	isb	sy
 800d0ee:	f3bf 8f4f 	dsb	sy
 800d0f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d0f4:	bf00      	nop
 800d0f6:	bf00      	nop
 800d0f8:	e7fd      	b.n	800d0f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d002      	beq.n	800d106 <xQueueGenericCreateStatic+0x56>
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d001      	beq.n	800d10a <xQueueGenericCreateStatic+0x5a>
 800d106:	2301      	movs	r3, #1
 800d108:	e000      	b.n	800d10c <xQueueGenericCreateStatic+0x5c>
 800d10a:	2300      	movs	r3, #0
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d10b      	bne.n	800d128 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d114:	f383 8811 	msr	BASEPRI, r3
 800d118:	f3bf 8f6f 	isb	sy
 800d11c:	f3bf 8f4f 	dsb	sy
 800d120:	623b      	str	r3, [r7, #32]
}
 800d122:	bf00      	nop
 800d124:	bf00      	nop
 800d126:	e7fd      	b.n	800d124 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d102      	bne.n	800d134 <xQueueGenericCreateStatic+0x84>
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d101      	bne.n	800d138 <xQueueGenericCreateStatic+0x88>
 800d134:	2301      	movs	r3, #1
 800d136:	e000      	b.n	800d13a <xQueueGenericCreateStatic+0x8a>
 800d138:	2300      	movs	r3, #0
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d10b      	bne.n	800d156 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d142:	f383 8811 	msr	BASEPRI, r3
 800d146:	f3bf 8f6f 	isb	sy
 800d14a:	f3bf 8f4f 	dsb	sy
 800d14e:	61fb      	str	r3, [r7, #28]
}
 800d150:	bf00      	nop
 800d152:	bf00      	nop
 800d154:	e7fd      	b.n	800d152 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d156:	2350      	movs	r3, #80	@ 0x50
 800d158:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	2b50      	cmp	r3, #80	@ 0x50
 800d15e:	d00b      	beq.n	800d178 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d164:	f383 8811 	msr	BASEPRI, r3
 800d168:	f3bf 8f6f 	isb	sy
 800d16c:	f3bf 8f4f 	dsb	sy
 800d170:	61bb      	str	r3, [r7, #24]
}
 800d172:	bf00      	nop
 800d174:	bf00      	nop
 800d176:	e7fd      	b.n	800d174 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d178:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d17e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d180:	2b00      	cmp	r3, #0
 800d182:	d00d      	beq.n	800d1a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d186:	2201      	movs	r2, #1
 800d188:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d18c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d192:	9300      	str	r3, [sp, #0]
 800d194:	4613      	mov	r3, r2
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	68b9      	ldr	r1, [r7, #8]
 800d19a:	68f8      	ldr	r0, [r7, #12]
 800d19c:	f000 f840 	bl	800d220 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3730      	adds	r7, #48	@ 0x30
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}

0800d1aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d1aa:	b580      	push	{r7, lr}
 800d1ac:	b08a      	sub	sp, #40	@ 0x28
 800d1ae:	af02      	add	r7, sp, #8
 800d1b0:	60f8      	str	r0, [r7, #12]
 800d1b2:	60b9      	str	r1, [r7, #8]
 800d1b4:	4613      	mov	r3, r2
 800d1b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d10b      	bne.n	800d1d6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800d1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1c2:	f383 8811 	msr	BASEPRI, r3
 800d1c6:	f3bf 8f6f 	isb	sy
 800d1ca:	f3bf 8f4f 	dsb	sy
 800d1ce:	613b      	str	r3, [r7, #16]
}
 800d1d0:	bf00      	nop
 800d1d2:	bf00      	nop
 800d1d4:	e7fd      	b.n	800d1d2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	68ba      	ldr	r2, [r7, #8]
 800d1da:	fb02 f303 	mul.w	r3, r2, r3
 800d1de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d1e0:	69fb      	ldr	r3, [r7, #28]
 800d1e2:	3350      	adds	r3, #80	@ 0x50
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f002 fea9 	bl	800ff3c <pvPortMalloc>
 800d1ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d011      	beq.n	800d216 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d1f2:	69bb      	ldr	r3, [r7, #24]
 800d1f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	3350      	adds	r3, #80	@ 0x50
 800d1fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d1fc:	69bb      	ldr	r3, [r7, #24]
 800d1fe:	2200      	movs	r2, #0
 800d200:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d204:	79fa      	ldrb	r2, [r7, #7]
 800d206:	69bb      	ldr	r3, [r7, #24]
 800d208:	9300      	str	r3, [sp, #0]
 800d20a:	4613      	mov	r3, r2
 800d20c:	697a      	ldr	r2, [r7, #20]
 800d20e:	68b9      	ldr	r1, [r7, #8]
 800d210:	68f8      	ldr	r0, [r7, #12]
 800d212:	f000 f805 	bl	800d220 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d216:	69bb      	ldr	r3, [r7, #24]
	}
 800d218:	4618      	mov	r0, r3
 800d21a:	3720      	adds	r7, #32
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b084      	sub	sp, #16
 800d224:	af00      	add	r7, sp, #0
 800d226:	60f8      	str	r0, [r7, #12]
 800d228:	60b9      	str	r1, [r7, #8]
 800d22a:	607a      	str	r2, [r7, #4]
 800d22c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d103      	bne.n	800d23c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d234:	69bb      	ldr	r3, [r7, #24]
 800d236:	69ba      	ldr	r2, [r7, #24]
 800d238:	601a      	str	r2, [r3, #0]
 800d23a:	e002      	b.n	800d242 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d23c:	69bb      	ldr	r3, [r7, #24]
 800d23e:	687a      	ldr	r2, [r7, #4]
 800d240:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d242:	69bb      	ldr	r3, [r7, #24]
 800d244:	68fa      	ldr	r2, [r7, #12]
 800d246:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d248:	69bb      	ldr	r3, [r7, #24]
 800d24a:	68ba      	ldr	r2, [r7, #8]
 800d24c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d24e:	2101      	movs	r1, #1
 800d250:	69b8      	ldr	r0, [r7, #24]
 800d252:	f7ff fec3 	bl	800cfdc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d256:	69bb      	ldr	r3, [r7, #24]
 800d258:	78fa      	ldrb	r2, [r7, #3]
 800d25a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d25e:	bf00      	nop
 800d260:	3710      	adds	r7, #16
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}

0800d266 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d266:	b580      	push	{r7, lr}
 800d268:	b082      	sub	sp, #8
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d00e      	beq.n	800d292 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2200      	movs	r2, #0
 800d278:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2200      	movs	r2, #0
 800d27e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2200      	movs	r2, #0
 800d284:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d286:	2300      	movs	r3, #0
 800d288:	2200      	movs	r2, #0
 800d28a:	2100      	movs	r1, #0
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 f911 	bl	800d4b4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d292:	bf00      	nop
 800d294:	3708      	adds	r7, #8
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}

0800d29a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d29a:	b580      	push	{r7, lr}
 800d29c:	b086      	sub	sp, #24
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	617b      	str	r3, [r7, #20]
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d2ac:	79fb      	ldrb	r3, [r7, #7]
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	6939      	ldr	r1, [r7, #16]
 800d2b2:	6978      	ldr	r0, [r7, #20]
 800d2b4:	f7ff ff79 	bl	800d1aa <xQueueGenericCreate>
 800d2b8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d2ba:	68f8      	ldr	r0, [r7, #12]
 800d2bc:	f7ff ffd3 	bl	800d266 <prvInitialiseMutex>

		return xNewQueue;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
	}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3718      	adds	r7, #24
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}

0800d2ca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b088      	sub	sp, #32
 800d2ce:	af02      	add	r7, sp, #8
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	6039      	str	r1, [r7, #0]
 800d2d4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	617b      	str	r3, [r7, #20]
 800d2da:	2300      	movs	r3, #0
 800d2dc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d2de:	79fb      	ldrb	r3, [r7, #7]
 800d2e0:	9300      	str	r3, [sp, #0]
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	6939      	ldr	r1, [r7, #16]
 800d2e8:	6978      	ldr	r0, [r7, #20]
 800d2ea:	f7ff fee1 	bl	800d0b0 <xQueueGenericCreateStatic>
 800d2ee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	f7ff ffb8 	bl	800d266 <prvInitialiseMutex>

		return xNewQueue;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
	}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3718      	adds	r7, #24
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d300:	b590      	push	{r4, r7, lr}
 800d302:	b087      	sub	sp, #28
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d10b      	bne.n	800d32a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800d312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d316:	f383 8811 	msr	BASEPRI, r3
 800d31a:	f3bf 8f6f 	isb	sy
 800d31e:	f3bf 8f4f 	dsb	sy
 800d322:	60fb      	str	r3, [r7, #12]
}
 800d324:	bf00      	nop
 800d326:	bf00      	nop
 800d328:	e7fd      	b.n	800d326 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	689c      	ldr	r4, [r3, #8]
 800d32e:	f001 fda3 	bl	800ee78 <xTaskGetCurrentTaskHandle>
 800d332:	4603      	mov	r3, r0
 800d334:	429c      	cmp	r4, r3
 800d336:	d111      	bne.n	800d35c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	68db      	ldr	r3, [r3, #12]
 800d33c:	1e5a      	subs	r2, r3, #1
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	68db      	ldr	r3, [r3, #12]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d105      	bne.n	800d356 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d34a:	2300      	movs	r3, #0
 800d34c:	2200      	movs	r2, #0
 800d34e:	2100      	movs	r1, #0
 800d350:	6938      	ldr	r0, [r7, #16]
 800d352:	f000 f8af 	bl	800d4b4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d356:	2301      	movs	r3, #1
 800d358:	617b      	str	r3, [r7, #20]
 800d35a:	e001      	b.n	800d360 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d35c:	2300      	movs	r3, #0
 800d35e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d360:	697b      	ldr	r3, [r7, #20]
	}
 800d362:	4618      	mov	r0, r3
 800d364:	371c      	adds	r7, #28
 800d366:	46bd      	mov	sp, r7
 800d368:	bd90      	pop	{r4, r7, pc}

0800d36a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d36a:	b590      	push	{r4, r7, lr}
 800d36c:	b087      	sub	sp, #28
 800d36e:	af00      	add	r7, sp, #0
 800d370:	6078      	str	r0, [r7, #4]
 800d372:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d10b      	bne.n	800d396 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800d37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d382:	f383 8811 	msr	BASEPRI, r3
 800d386:	f3bf 8f6f 	isb	sy
 800d38a:	f3bf 8f4f 	dsb	sy
 800d38e:	60fb      	str	r3, [r7, #12]
}
 800d390:	bf00      	nop
 800d392:	bf00      	nop
 800d394:	e7fd      	b.n	800d392 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	689c      	ldr	r4, [r3, #8]
 800d39a:	f001 fd6d 	bl	800ee78 <xTaskGetCurrentTaskHandle>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	429c      	cmp	r4, r3
 800d3a2:	d107      	bne.n	800d3b4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	68db      	ldr	r3, [r3, #12]
 800d3a8:	1c5a      	adds	r2, r3, #1
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	617b      	str	r3, [r7, #20]
 800d3b2:	e00c      	b.n	800d3ce <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d3b4:	6839      	ldr	r1, [r7, #0]
 800d3b6:	6938      	ldr	r0, [r7, #16]
 800d3b8:	f000 fb8e 	bl	800dad8 <xQueueSemaphoreTake>
 800d3bc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d004      	beq.n	800d3ce <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	68db      	ldr	r3, [r3, #12]
 800d3c8:	1c5a      	adds	r2, r3, #1
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d3ce:	697b      	ldr	r3, [r7, #20]
	}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	371c      	adds	r7, #28
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd90      	pop	{r4, r7, pc}

0800d3d8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b08a      	sub	sp, #40	@ 0x28
 800d3dc:	af02      	add	r7, sp, #8
 800d3de:	60f8      	str	r0, [r7, #12]
 800d3e0:	60b9      	str	r1, [r7, #8]
 800d3e2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d10b      	bne.n	800d402 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800d3ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3ee:	f383 8811 	msr	BASEPRI, r3
 800d3f2:	f3bf 8f6f 	isb	sy
 800d3f6:	f3bf 8f4f 	dsb	sy
 800d3fa:	61bb      	str	r3, [r7, #24]
}
 800d3fc:	bf00      	nop
 800d3fe:	bf00      	nop
 800d400:	e7fd      	b.n	800d3fe <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d402:	68ba      	ldr	r2, [r7, #8]
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	429a      	cmp	r2, r3
 800d408:	d90b      	bls.n	800d422 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800d40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d40e:	f383 8811 	msr	BASEPRI, r3
 800d412:	f3bf 8f6f 	isb	sy
 800d416:	f3bf 8f4f 	dsb	sy
 800d41a:	617b      	str	r3, [r7, #20]
}
 800d41c:	bf00      	nop
 800d41e:	bf00      	nop
 800d420:	e7fd      	b.n	800d41e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d422:	2302      	movs	r3, #2
 800d424:	9300      	str	r3, [sp, #0]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2200      	movs	r2, #0
 800d42a:	2100      	movs	r1, #0
 800d42c:	68f8      	ldr	r0, [r7, #12]
 800d42e:	f7ff fe3f 	bl	800d0b0 <xQueueGenericCreateStatic>
 800d432:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d002      	beq.n	800d440 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d43a:	69fb      	ldr	r3, [r7, #28]
 800d43c:	68ba      	ldr	r2, [r7, #8]
 800d43e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d440:	69fb      	ldr	r3, [r7, #28]
	}
 800d442:	4618      	mov	r0, r3
 800d444:	3720      	adds	r7, #32
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}

0800d44a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d44a:	b580      	push	{r7, lr}
 800d44c:	b086      	sub	sp, #24
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6078      	str	r0, [r7, #4]
 800d452:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d10b      	bne.n	800d472 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800d45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d45e:	f383 8811 	msr	BASEPRI, r3
 800d462:	f3bf 8f6f 	isb	sy
 800d466:	f3bf 8f4f 	dsb	sy
 800d46a:	613b      	str	r3, [r7, #16]
}
 800d46c:	bf00      	nop
 800d46e:	bf00      	nop
 800d470:	e7fd      	b.n	800d46e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d472:	683a      	ldr	r2, [r7, #0]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	429a      	cmp	r2, r3
 800d478:	d90b      	bls.n	800d492 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800d47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d47e:	f383 8811 	msr	BASEPRI, r3
 800d482:	f3bf 8f6f 	isb	sy
 800d486:	f3bf 8f4f 	dsb	sy
 800d48a:	60fb      	str	r3, [r7, #12]
}
 800d48c:	bf00      	nop
 800d48e:	bf00      	nop
 800d490:	e7fd      	b.n	800d48e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d492:	2202      	movs	r2, #2
 800d494:	2100      	movs	r1, #0
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f7ff fe87 	bl	800d1aa <xQueueGenericCreate>
 800d49c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d002      	beq.n	800d4aa <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	683a      	ldr	r2, [r7, #0]
 800d4a8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d4aa:	697b      	ldr	r3, [r7, #20]
	}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3718      	adds	r7, #24
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b08e      	sub	sp, #56	@ 0x38
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	607a      	str	r2, [r7, #4]
 800d4c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d10b      	bne.n	800d4e8 <xQueueGenericSend+0x34>
	__asm volatile
 800d4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4d4:	f383 8811 	msr	BASEPRI, r3
 800d4d8:	f3bf 8f6f 	isb	sy
 800d4dc:	f3bf 8f4f 	dsb	sy
 800d4e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d4e2:	bf00      	nop
 800d4e4:	bf00      	nop
 800d4e6:	e7fd      	b.n	800d4e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d103      	bne.n	800d4f6 <xQueueGenericSend+0x42>
 800d4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d101      	bne.n	800d4fa <xQueueGenericSend+0x46>
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	e000      	b.n	800d4fc <xQueueGenericSend+0x48>
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d10b      	bne.n	800d518 <xQueueGenericSend+0x64>
	__asm volatile
 800d500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d504:	f383 8811 	msr	BASEPRI, r3
 800d508:	f3bf 8f6f 	isb	sy
 800d50c:	f3bf 8f4f 	dsb	sy
 800d510:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d512:	bf00      	nop
 800d514:	bf00      	nop
 800d516:	e7fd      	b.n	800d514 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	2b02      	cmp	r3, #2
 800d51c:	d103      	bne.n	800d526 <xQueueGenericSend+0x72>
 800d51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d522:	2b01      	cmp	r3, #1
 800d524:	d101      	bne.n	800d52a <xQueueGenericSend+0x76>
 800d526:	2301      	movs	r3, #1
 800d528:	e000      	b.n	800d52c <xQueueGenericSend+0x78>
 800d52a:	2300      	movs	r3, #0
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d10b      	bne.n	800d548 <xQueueGenericSend+0x94>
	__asm volatile
 800d530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d534:	f383 8811 	msr	BASEPRI, r3
 800d538:	f3bf 8f6f 	isb	sy
 800d53c:	f3bf 8f4f 	dsb	sy
 800d540:	623b      	str	r3, [r7, #32]
}
 800d542:	bf00      	nop
 800d544:	bf00      	nop
 800d546:	e7fd      	b.n	800d544 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d548:	f001 fca6 	bl	800ee98 <xTaskGetSchedulerState>
 800d54c:	4603      	mov	r3, r0
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d102      	bne.n	800d558 <xQueueGenericSend+0xa4>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d101      	bne.n	800d55c <xQueueGenericSend+0xa8>
 800d558:	2301      	movs	r3, #1
 800d55a:	e000      	b.n	800d55e <xQueueGenericSend+0xaa>
 800d55c:	2300      	movs	r3, #0
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d10b      	bne.n	800d57a <xQueueGenericSend+0xc6>
	__asm volatile
 800d562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d566:	f383 8811 	msr	BASEPRI, r3
 800d56a:	f3bf 8f6f 	isb	sy
 800d56e:	f3bf 8f4f 	dsb	sy
 800d572:	61fb      	str	r3, [r7, #28]
}
 800d574:	bf00      	nop
 800d576:	bf00      	nop
 800d578:	e7fd      	b.n	800d576 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d57a:	f002 fbbd 	bl	800fcf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d580:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d586:	429a      	cmp	r2, r3
 800d588:	d302      	bcc.n	800d590 <xQueueGenericSend+0xdc>
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	2b02      	cmp	r3, #2
 800d58e:	d129      	bne.n	800d5e4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d590:	683a      	ldr	r2, [r7, #0]
 800d592:	68b9      	ldr	r1, [r7, #8]
 800d594:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d596:	f000 fc6d 	bl	800de74 <prvCopyDataToQueue>
 800d59a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d59e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d010      	beq.n	800d5c6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5a6:	3324      	adds	r3, #36	@ 0x24
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f001 fa9f 	bl	800eaec <xTaskRemoveFromEventList>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d013      	beq.n	800d5dc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d5b4:	4b3f      	ldr	r3, [pc, #252]	@ (800d6b4 <xQueueGenericSend+0x200>)
 800d5b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5ba:	601a      	str	r2, [r3, #0]
 800d5bc:	f3bf 8f4f 	dsb	sy
 800d5c0:	f3bf 8f6f 	isb	sy
 800d5c4:	e00a      	b.n	800d5dc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d007      	beq.n	800d5dc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d5cc:	4b39      	ldr	r3, [pc, #228]	@ (800d6b4 <xQueueGenericSend+0x200>)
 800d5ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5d2:	601a      	str	r2, [r3, #0]
 800d5d4:	f3bf 8f4f 	dsb	sy
 800d5d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d5dc:	f002 fbbe 	bl	800fd5c <vPortExitCritical>
				return pdPASS;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	e063      	b.n	800d6ac <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d103      	bne.n	800d5f2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d5ea:	f002 fbb7 	bl	800fd5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	e05c      	b.n	800d6ac <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d5f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d106      	bne.n	800d606 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d5f8:	f107 0314 	add.w	r3, r7, #20
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f001 fad9 	bl	800ebb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d602:	2301      	movs	r3, #1
 800d604:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d606:	f002 fba9 	bl	800fd5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d60a:	f001 f82f 	bl	800e66c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d60e:	f002 fb73 	bl	800fcf8 <vPortEnterCritical>
 800d612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d614:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d618:	b25b      	sxtb	r3, r3
 800d61a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d61e:	d103      	bne.n	800d628 <xQueueGenericSend+0x174>
 800d620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d622:	2200      	movs	r2, #0
 800d624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d62a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d62e:	b25b      	sxtb	r3, r3
 800d630:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d634:	d103      	bne.n	800d63e <xQueueGenericSend+0x18a>
 800d636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d638:	2200      	movs	r2, #0
 800d63a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d63e:	f002 fb8d 	bl	800fd5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d642:	1d3a      	adds	r2, r7, #4
 800d644:	f107 0314 	add.w	r3, r7, #20
 800d648:	4611      	mov	r1, r2
 800d64a:	4618      	mov	r0, r3
 800d64c:	f001 fac8 	bl	800ebe0 <xTaskCheckForTimeOut>
 800d650:	4603      	mov	r3, r0
 800d652:	2b00      	cmp	r3, #0
 800d654:	d124      	bne.n	800d6a0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d656:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d658:	f000 fd04 	bl	800e064 <prvIsQueueFull>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d018      	beq.n	800d694 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d664:	3310      	adds	r3, #16
 800d666:	687a      	ldr	r2, [r7, #4]
 800d668:	4611      	mov	r1, r2
 800d66a:	4618      	mov	r0, r3
 800d66c:	f001 f9ec 	bl	800ea48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d670:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d672:	f000 fc8f 	bl	800df94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d676:	f001 f807 	bl	800e688 <xTaskResumeAll>
 800d67a:	4603      	mov	r3, r0
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	f47f af7c 	bne.w	800d57a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d682:	4b0c      	ldr	r3, [pc, #48]	@ (800d6b4 <xQueueGenericSend+0x200>)
 800d684:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d688:	601a      	str	r2, [r3, #0]
 800d68a:	f3bf 8f4f 	dsb	sy
 800d68e:	f3bf 8f6f 	isb	sy
 800d692:	e772      	b.n	800d57a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d694:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d696:	f000 fc7d 	bl	800df94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d69a:	f000 fff5 	bl	800e688 <xTaskResumeAll>
 800d69e:	e76c      	b.n	800d57a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d6a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6a2:	f000 fc77 	bl	800df94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d6a6:	f000 ffef 	bl	800e688 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d6aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3738      	adds	r7, #56	@ 0x38
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	e000ed04 	.word	0xe000ed04

0800d6b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b090      	sub	sp, #64	@ 0x40
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	607a      	str	r2, [r7, #4]
 800d6c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d10b      	bne.n	800d6e8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d4:	f383 8811 	msr	BASEPRI, r3
 800d6d8:	f3bf 8f6f 	isb	sy
 800d6dc:	f3bf 8f4f 	dsb	sy
 800d6e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d6e2:	bf00      	nop
 800d6e4:	bf00      	nop
 800d6e6:	e7fd      	b.n	800d6e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d103      	bne.n	800d6f6 <xQueueGenericSendFromISR+0x3e>
 800d6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d101      	bne.n	800d6fa <xQueueGenericSendFromISR+0x42>
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	e000      	b.n	800d6fc <xQueueGenericSendFromISR+0x44>
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d10b      	bne.n	800d718 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d704:	f383 8811 	msr	BASEPRI, r3
 800d708:	f3bf 8f6f 	isb	sy
 800d70c:	f3bf 8f4f 	dsb	sy
 800d710:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d712:	bf00      	nop
 800d714:	bf00      	nop
 800d716:	e7fd      	b.n	800d714 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	2b02      	cmp	r3, #2
 800d71c:	d103      	bne.n	800d726 <xQueueGenericSendFromISR+0x6e>
 800d71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d722:	2b01      	cmp	r3, #1
 800d724:	d101      	bne.n	800d72a <xQueueGenericSendFromISR+0x72>
 800d726:	2301      	movs	r3, #1
 800d728:	e000      	b.n	800d72c <xQueueGenericSendFromISR+0x74>
 800d72a:	2300      	movs	r3, #0
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d10b      	bne.n	800d748 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d734:	f383 8811 	msr	BASEPRI, r3
 800d738:	f3bf 8f6f 	isb	sy
 800d73c:	f3bf 8f4f 	dsb	sy
 800d740:	623b      	str	r3, [r7, #32]
}
 800d742:	bf00      	nop
 800d744:	bf00      	nop
 800d746:	e7fd      	b.n	800d744 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d748:	f002 fbb6 	bl	800feb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d74c:	f3ef 8211 	mrs	r2, BASEPRI
 800d750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d754:	f383 8811 	msr	BASEPRI, r3
 800d758:	f3bf 8f6f 	isb	sy
 800d75c:	f3bf 8f4f 	dsb	sy
 800d760:	61fa      	str	r2, [r7, #28]
 800d762:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d764:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d766:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d76a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d76e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d770:	429a      	cmp	r2, r3
 800d772:	d302      	bcc.n	800d77a <xQueueGenericSendFromISR+0xc2>
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	2b02      	cmp	r3, #2
 800d778:	d12f      	bne.n	800d7da <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d77a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d77c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d780:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d788:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d78a:	683a      	ldr	r2, [r7, #0]
 800d78c:	68b9      	ldr	r1, [r7, #8]
 800d78e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d790:	f000 fb70 	bl	800de74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d794:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d79c:	d112      	bne.n	800d7c4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d79e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d016      	beq.n	800d7d4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7a8:	3324      	adds	r3, #36	@ 0x24
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f001 f99e 	bl	800eaec <xTaskRemoveFromEventList>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d00e      	beq.n	800d7d4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d00b      	beq.n	800d7d4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2201      	movs	r2, #1
 800d7c0:	601a      	str	r2, [r3, #0]
 800d7c2:	e007      	b.n	800d7d4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d7c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	b25a      	sxtb	r2, r3
 800d7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d7d8:	e001      	b.n	800d7de <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d7de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7e0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d7e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d7ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3740      	adds	r7, #64	@ 0x40
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}

0800d7f4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b08e      	sub	sp, #56	@ 0x38
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d804:	2b00      	cmp	r3, #0
 800d806:	d10b      	bne.n	800d820 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d80c:	f383 8811 	msr	BASEPRI, r3
 800d810:	f3bf 8f6f 	isb	sy
 800d814:	f3bf 8f4f 	dsb	sy
 800d818:	623b      	str	r3, [r7, #32]
}
 800d81a:	bf00      	nop
 800d81c:	bf00      	nop
 800d81e:	e7fd      	b.n	800d81c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d824:	2b00      	cmp	r3, #0
 800d826:	d00b      	beq.n	800d840 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800d828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d82c:	f383 8811 	msr	BASEPRI, r3
 800d830:	f3bf 8f6f 	isb	sy
 800d834:	f3bf 8f4f 	dsb	sy
 800d838:	61fb      	str	r3, [r7, #28]
}
 800d83a:	bf00      	nop
 800d83c:	bf00      	nop
 800d83e:	e7fd      	b.n	800d83c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d103      	bne.n	800d850 <xQueueGiveFromISR+0x5c>
 800d848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d84a:	689b      	ldr	r3, [r3, #8]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d101      	bne.n	800d854 <xQueueGiveFromISR+0x60>
 800d850:	2301      	movs	r3, #1
 800d852:	e000      	b.n	800d856 <xQueueGiveFromISR+0x62>
 800d854:	2300      	movs	r3, #0
 800d856:	2b00      	cmp	r3, #0
 800d858:	d10b      	bne.n	800d872 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800d85a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d85e:	f383 8811 	msr	BASEPRI, r3
 800d862:	f3bf 8f6f 	isb	sy
 800d866:	f3bf 8f4f 	dsb	sy
 800d86a:	61bb      	str	r3, [r7, #24]
}
 800d86c:	bf00      	nop
 800d86e:	bf00      	nop
 800d870:	e7fd      	b.n	800d86e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d872:	f002 fb21 	bl	800feb8 <vPortValidateInterruptPriority>
	__asm volatile
 800d876:	f3ef 8211 	mrs	r2, BASEPRI
 800d87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d87e:	f383 8811 	msr	BASEPRI, r3
 800d882:	f3bf 8f6f 	isb	sy
 800d886:	f3bf 8f4f 	dsb	sy
 800d88a:	617a      	str	r2, [r7, #20]
 800d88c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d88e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d890:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d896:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d89a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d89c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d22b      	bcs.n	800d8fa <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d8a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d8ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ae:	1c5a      	adds	r2, r3, #1
 800d8b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d8b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d8b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8bc:	d112      	bne.n	800d8e4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d016      	beq.n	800d8f4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c8:	3324      	adds	r3, #36	@ 0x24
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f001 f90e 	bl	800eaec <xTaskRemoveFromEventList>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d00e      	beq.n	800d8f4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d00b      	beq.n	800d8f4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	601a      	str	r2, [r3, #0]
 800d8e2:	e007      	b.n	800d8f4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d8e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	b25a      	sxtb	r2, r3
 800d8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8f8:	e001      	b.n	800d8fe <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d900:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f383 8811 	msr	BASEPRI, r3
}
 800d908:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d90a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3738      	adds	r7, #56	@ 0x38
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b08c      	sub	sp, #48	@ 0x30
 800d918:	af00      	add	r7, sp, #0
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	60b9      	str	r1, [r7, #8]
 800d91e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d920:	2300      	movs	r3, #0
 800d922:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d10b      	bne.n	800d946 <xQueueReceive+0x32>
	__asm volatile
 800d92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d932:	f383 8811 	msr	BASEPRI, r3
 800d936:	f3bf 8f6f 	isb	sy
 800d93a:	f3bf 8f4f 	dsb	sy
 800d93e:	623b      	str	r3, [r7, #32]
}
 800d940:	bf00      	nop
 800d942:	bf00      	nop
 800d944:	e7fd      	b.n	800d942 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d103      	bne.n	800d954 <xQueueReceive+0x40>
 800d94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d94e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d950:	2b00      	cmp	r3, #0
 800d952:	d101      	bne.n	800d958 <xQueueReceive+0x44>
 800d954:	2301      	movs	r3, #1
 800d956:	e000      	b.n	800d95a <xQueueReceive+0x46>
 800d958:	2300      	movs	r3, #0
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d10b      	bne.n	800d976 <xQueueReceive+0x62>
	__asm volatile
 800d95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d962:	f383 8811 	msr	BASEPRI, r3
 800d966:	f3bf 8f6f 	isb	sy
 800d96a:	f3bf 8f4f 	dsb	sy
 800d96e:	61fb      	str	r3, [r7, #28]
}
 800d970:	bf00      	nop
 800d972:	bf00      	nop
 800d974:	e7fd      	b.n	800d972 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d976:	f001 fa8f 	bl	800ee98 <xTaskGetSchedulerState>
 800d97a:	4603      	mov	r3, r0
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d102      	bne.n	800d986 <xQueueReceive+0x72>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d101      	bne.n	800d98a <xQueueReceive+0x76>
 800d986:	2301      	movs	r3, #1
 800d988:	e000      	b.n	800d98c <xQueueReceive+0x78>
 800d98a:	2300      	movs	r3, #0
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d10b      	bne.n	800d9a8 <xQueueReceive+0x94>
	__asm volatile
 800d990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d994:	f383 8811 	msr	BASEPRI, r3
 800d998:	f3bf 8f6f 	isb	sy
 800d99c:	f3bf 8f4f 	dsb	sy
 800d9a0:	61bb      	str	r3, [r7, #24]
}
 800d9a2:	bf00      	nop
 800d9a4:	bf00      	nop
 800d9a6:	e7fd      	b.n	800d9a4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d9a8:	f002 f9a6 	bl	800fcf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9b0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d01f      	beq.n	800d9f8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d9b8:	68b9      	ldr	r1, [r7, #8]
 800d9ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9bc:	f000 fac4 	bl	800df48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9c2:	1e5a      	subs	r2, r3, #1
 800d9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9c6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ca:	691b      	ldr	r3, [r3, #16]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d00f      	beq.n	800d9f0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9d2:	3310      	adds	r3, #16
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f001 f889 	bl	800eaec <xTaskRemoveFromEventList>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d007      	beq.n	800d9f0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d9e0:	4b3c      	ldr	r3, [pc, #240]	@ (800dad4 <xQueueReceive+0x1c0>)
 800d9e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9e6:	601a      	str	r2, [r3, #0]
 800d9e8:	f3bf 8f4f 	dsb	sy
 800d9ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d9f0:	f002 f9b4 	bl	800fd5c <vPortExitCritical>
				return pdPASS;
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	e069      	b.n	800dacc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d103      	bne.n	800da06 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d9fe:	f002 f9ad 	bl	800fd5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800da02:	2300      	movs	r3, #0
 800da04:	e062      	b.n	800dacc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d106      	bne.n	800da1a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da0c:	f107 0310 	add.w	r3, r7, #16
 800da10:	4618      	mov	r0, r3
 800da12:	f001 f8cf 	bl	800ebb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da16:	2301      	movs	r3, #1
 800da18:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da1a:	f002 f99f 	bl	800fd5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da1e:	f000 fe25 	bl	800e66c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da22:	f002 f969 	bl	800fcf8 <vPortEnterCritical>
 800da26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800da2c:	b25b      	sxtb	r3, r3
 800da2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da32:	d103      	bne.n	800da3c <xQueueReceive+0x128>
 800da34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da36:	2200      	movs	r2, #0
 800da38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da42:	b25b      	sxtb	r3, r3
 800da44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da48:	d103      	bne.n	800da52 <xQueueReceive+0x13e>
 800da4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da4c:	2200      	movs	r2, #0
 800da4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da52:	f002 f983 	bl	800fd5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da56:	1d3a      	adds	r2, r7, #4
 800da58:	f107 0310 	add.w	r3, r7, #16
 800da5c:	4611      	mov	r1, r2
 800da5e:	4618      	mov	r0, r3
 800da60:	f001 f8be 	bl	800ebe0 <xTaskCheckForTimeOut>
 800da64:	4603      	mov	r3, r0
 800da66:	2b00      	cmp	r3, #0
 800da68:	d123      	bne.n	800dab2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da6c:	f000 fae4 	bl	800e038 <prvIsQueueEmpty>
 800da70:	4603      	mov	r3, r0
 800da72:	2b00      	cmp	r3, #0
 800da74:	d017      	beq.n	800daa6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da78:	3324      	adds	r3, #36	@ 0x24
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	4611      	mov	r1, r2
 800da7e:	4618      	mov	r0, r3
 800da80:	f000 ffe2 	bl	800ea48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da86:	f000 fa85 	bl	800df94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da8a:	f000 fdfd 	bl	800e688 <xTaskResumeAll>
 800da8e:	4603      	mov	r3, r0
 800da90:	2b00      	cmp	r3, #0
 800da92:	d189      	bne.n	800d9a8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800da94:	4b0f      	ldr	r3, [pc, #60]	@ (800dad4 <xQueueReceive+0x1c0>)
 800da96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da9a:	601a      	str	r2, [r3, #0]
 800da9c:	f3bf 8f4f 	dsb	sy
 800daa0:	f3bf 8f6f 	isb	sy
 800daa4:	e780      	b.n	800d9a8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800daa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800daa8:	f000 fa74 	bl	800df94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800daac:	f000 fdec 	bl	800e688 <xTaskResumeAll>
 800dab0:	e77a      	b.n	800d9a8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dab2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dab4:	f000 fa6e 	bl	800df94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dab8:	f000 fde6 	bl	800e688 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dabc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dabe:	f000 fabb 	bl	800e038 <prvIsQueueEmpty>
 800dac2:	4603      	mov	r3, r0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	f43f af6f 	beq.w	800d9a8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800daca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3730      	adds	r7, #48	@ 0x30
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	e000ed04 	.word	0xe000ed04

0800dad8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b08e      	sub	sp, #56	@ 0x38
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dae2:	2300      	movs	r3, #0
 800dae4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800daea:	2300      	movs	r3, #0
 800daec:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800daee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d10b      	bne.n	800db0c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800daf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daf8:	f383 8811 	msr	BASEPRI, r3
 800dafc:	f3bf 8f6f 	isb	sy
 800db00:	f3bf 8f4f 	dsb	sy
 800db04:	623b      	str	r3, [r7, #32]
}
 800db06:	bf00      	nop
 800db08:	bf00      	nop
 800db0a:	e7fd      	b.n	800db08 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800db0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db10:	2b00      	cmp	r3, #0
 800db12:	d00b      	beq.n	800db2c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800db14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db18:	f383 8811 	msr	BASEPRI, r3
 800db1c:	f3bf 8f6f 	isb	sy
 800db20:	f3bf 8f4f 	dsb	sy
 800db24:	61fb      	str	r3, [r7, #28]
}
 800db26:	bf00      	nop
 800db28:	bf00      	nop
 800db2a:	e7fd      	b.n	800db28 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db2c:	f001 f9b4 	bl	800ee98 <xTaskGetSchedulerState>
 800db30:	4603      	mov	r3, r0
 800db32:	2b00      	cmp	r3, #0
 800db34:	d102      	bne.n	800db3c <xQueueSemaphoreTake+0x64>
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d101      	bne.n	800db40 <xQueueSemaphoreTake+0x68>
 800db3c:	2301      	movs	r3, #1
 800db3e:	e000      	b.n	800db42 <xQueueSemaphoreTake+0x6a>
 800db40:	2300      	movs	r3, #0
 800db42:	2b00      	cmp	r3, #0
 800db44:	d10b      	bne.n	800db5e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800db46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db4a:	f383 8811 	msr	BASEPRI, r3
 800db4e:	f3bf 8f6f 	isb	sy
 800db52:	f3bf 8f4f 	dsb	sy
 800db56:	61bb      	str	r3, [r7, #24]
}
 800db58:	bf00      	nop
 800db5a:	bf00      	nop
 800db5c:	e7fd      	b.n	800db5a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800db5e:	f002 f8cb 	bl	800fcf8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800db62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db66:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800db68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d024      	beq.n	800dbb8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800db6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db70:	1e5a      	subs	r2, r3, #1
 800db72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db74:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d104      	bne.n	800db88 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800db7e:	f001 fb05 	bl	800f18c <pvTaskIncrementMutexHeldCount>
 800db82:	4602      	mov	r2, r0
 800db84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db86:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db8a:	691b      	ldr	r3, [r3, #16]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d00f      	beq.n	800dbb0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db92:	3310      	adds	r3, #16
 800db94:	4618      	mov	r0, r3
 800db96:	f000 ffa9 	bl	800eaec <xTaskRemoveFromEventList>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d007      	beq.n	800dbb0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dba0:	4b54      	ldr	r3, [pc, #336]	@ (800dcf4 <xQueueSemaphoreTake+0x21c>)
 800dba2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dba6:	601a      	str	r2, [r3, #0]
 800dba8:	f3bf 8f4f 	dsb	sy
 800dbac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dbb0:	f002 f8d4 	bl	800fd5c <vPortExitCritical>
				return pdPASS;
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	e098      	b.n	800dcea <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d112      	bne.n	800dbe4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dbbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d00b      	beq.n	800dbdc <xQueueSemaphoreTake+0x104>
	__asm volatile
 800dbc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc8:	f383 8811 	msr	BASEPRI, r3
 800dbcc:	f3bf 8f6f 	isb	sy
 800dbd0:	f3bf 8f4f 	dsb	sy
 800dbd4:	617b      	str	r3, [r7, #20]
}
 800dbd6:	bf00      	nop
 800dbd8:	bf00      	nop
 800dbda:	e7fd      	b.n	800dbd8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dbdc:	f002 f8be 	bl	800fd5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	e082      	b.n	800dcea <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dbe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d106      	bne.n	800dbf8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dbea:	f107 030c 	add.w	r3, r7, #12
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f000 ffe0 	bl	800ebb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dbf8:	f002 f8b0 	bl	800fd5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dbfc:	f000 fd36 	bl	800e66c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc00:	f002 f87a 	bl	800fcf8 <vPortEnterCritical>
 800dc04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dc0a:	b25b      	sxtb	r3, r3
 800dc0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc10:	d103      	bne.n	800dc1a <xQueueSemaphoreTake+0x142>
 800dc12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc14:	2200      	movs	r2, #0
 800dc16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dc1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dc20:	b25b      	sxtb	r3, r3
 800dc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc26:	d103      	bne.n	800dc30 <xQueueSemaphoreTake+0x158>
 800dc28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dc30:	f002 f894 	bl	800fd5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc34:	463a      	mov	r2, r7
 800dc36:	f107 030c 	add.w	r3, r7, #12
 800dc3a:	4611      	mov	r1, r2
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f000 ffcf 	bl	800ebe0 <xTaskCheckForTimeOut>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d132      	bne.n	800dcae <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc4a:	f000 f9f5 	bl	800e038 <prvIsQueueEmpty>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d026      	beq.n	800dca2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d109      	bne.n	800dc70 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800dc5c:	f002 f84c 	bl	800fcf8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc62:	689b      	ldr	r3, [r3, #8]
 800dc64:	4618      	mov	r0, r3
 800dc66:	f001 f935 	bl	800eed4 <xTaskPriorityInherit>
 800dc6a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800dc6c:	f002 f876 	bl	800fd5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dc70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc72:	3324      	adds	r3, #36	@ 0x24
 800dc74:	683a      	ldr	r2, [r7, #0]
 800dc76:	4611      	mov	r1, r2
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f000 fee5 	bl	800ea48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc80:	f000 f988 	bl	800df94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dc84:	f000 fd00 	bl	800e688 <xTaskResumeAll>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	f47f af67 	bne.w	800db5e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800dc90:	4b18      	ldr	r3, [pc, #96]	@ (800dcf4 <xQueueSemaphoreTake+0x21c>)
 800dc92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc96:	601a      	str	r2, [r3, #0]
 800dc98:	f3bf 8f4f 	dsb	sy
 800dc9c:	f3bf 8f6f 	isb	sy
 800dca0:	e75d      	b.n	800db5e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dca2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dca4:	f000 f976 	bl	800df94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dca8:	f000 fcee 	bl	800e688 <xTaskResumeAll>
 800dcac:	e757      	b.n	800db5e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dcae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dcb0:	f000 f970 	bl	800df94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dcb4:	f000 fce8 	bl	800e688 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dcb8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dcba:	f000 f9bd 	bl	800e038 <prvIsQueueEmpty>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	f43f af4c 	beq.w	800db5e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dcc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d00d      	beq.n	800dce8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800dccc:	f002 f814 	bl	800fcf8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dcd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dcd2:	f000 f8b7 	bl	800de44 <prvGetDisinheritPriorityAfterTimeout>
 800dcd6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dcd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcda:	689b      	ldr	r3, [r3, #8]
 800dcdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dcde:	4618      	mov	r0, r3
 800dce0:	f001 f9d0 	bl	800f084 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dce4:	f002 f83a 	bl	800fd5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dce8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3738      	adds	r7, #56	@ 0x38
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	bf00      	nop
 800dcf4:	e000ed04 	.word	0xe000ed04

0800dcf8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b08e      	sub	sp, #56	@ 0x38
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800dd08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d10b      	bne.n	800dd26 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800dd0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd12:	f383 8811 	msr	BASEPRI, r3
 800dd16:	f3bf 8f6f 	isb	sy
 800dd1a:	f3bf 8f4f 	dsb	sy
 800dd1e:	623b      	str	r3, [r7, #32]
}
 800dd20:	bf00      	nop
 800dd22:	bf00      	nop
 800dd24:	e7fd      	b.n	800dd22 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d103      	bne.n	800dd34 <xQueueReceiveFromISR+0x3c>
 800dd2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d101      	bne.n	800dd38 <xQueueReceiveFromISR+0x40>
 800dd34:	2301      	movs	r3, #1
 800dd36:	e000      	b.n	800dd3a <xQueueReceiveFromISR+0x42>
 800dd38:	2300      	movs	r3, #0
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d10b      	bne.n	800dd56 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800dd3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd42:	f383 8811 	msr	BASEPRI, r3
 800dd46:	f3bf 8f6f 	isb	sy
 800dd4a:	f3bf 8f4f 	dsb	sy
 800dd4e:	61fb      	str	r3, [r7, #28]
}
 800dd50:	bf00      	nop
 800dd52:	bf00      	nop
 800dd54:	e7fd      	b.n	800dd52 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dd56:	f002 f8af 	bl	800feb8 <vPortValidateInterruptPriority>
	__asm volatile
 800dd5a:	f3ef 8211 	mrs	r2, BASEPRI
 800dd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd62:	f383 8811 	msr	BASEPRI, r3
 800dd66:	f3bf 8f6f 	isb	sy
 800dd6a:	f3bf 8f4f 	dsb	sy
 800dd6e:	61ba      	str	r2, [r7, #24]
 800dd70:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dd72:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd74:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd7a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d02f      	beq.n	800dde2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dd82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dd88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dd8c:	68b9      	ldr	r1, [r7, #8]
 800dd8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd90:	f000 f8da 	bl	800df48 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dd94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd96:	1e5a      	subs	r2, r3, #1
 800dd98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd9a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dd9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800dda0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dda4:	d112      	bne.n	800ddcc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda8:	691b      	ldr	r3, [r3, #16]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d016      	beq.n	800dddc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ddae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddb0:	3310      	adds	r3, #16
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f000 fe9a 	bl	800eaec <xTaskRemoveFromEventList>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d00e      	beq.n	800dddc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d00b      	beq.n	800dddc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	601a      	str	r2, [r3, #0]
 800ddca:	e007      	b.n	800dddc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ddcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	b2db      	uxtb	r3, r3
 800ddd4:	b25a      	sxtb	r2, r3
 800ddd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800dddc:	2301      	movs	r3, #1
 800ddde:	637b      	str	r3, [r7, #52]	@ 0x34
 800dde0:	e001      	b.n	800dde6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800dde2:	2300      	movs	r3, #0
 800dde4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dde6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dde8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	f383 8811 	msr	BASEPRI, r3
}
 800ddf0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ddf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3738      	adds	r7, #56	@ 0x38
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}

0800ddfc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d10b      	bne.n	800de26 <vQueueDelete+0x2a>
	__asm volatile
 800de0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de12:	f383 8811 	msr	BASEPRI, r3
 800de16:	f3bf 8f6f 	isb	sy
 800de1a:	f3bf 8f4f 	dsb	sy
 800de1e:	60bb      	str	r3, [r7, #8]
}
 800de20:	bf00      	nop
 800de22:	bf00      	nop
 800de24:	e7fd      	b.n	800de22 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800de26:	68f8      	ldr	r0, [r7, #12]
 800de28:	f000 f95e 	bl	800e0e8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800de32:	2b00      	cmp	r3, #0
 800de34:	d102      	bne.n	800de3c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800de36:	68f8      	ldr	r0, [r7, #12]
 800de38:	f002 f94e 	bl	80100d8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800de3c:	bf00      	nop
 800de3e:	3710      	adds	r7, #16
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800de44:	b480      	push	{r7}
 800de46:	b085      	sub	sp, #20
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de50:	2b00      	cmp	r3, #0
 800de52:	d006      	beq.n	800de62 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800de5e:	60fb      	str	r3, [r7, #12]
 800de60:	e001      	b.n	800de66 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800de62:	2300      	movs	r3, #0
 800de64:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800de66:	68fb      	ldr	r3, [r7, #12]
	}
 800de68:	4618      	mov	r0, r3
 800de6a:	3714      	adds	r7, #20
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr

0800de74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b086      	sub	sp, #24
 800de78:	af00      	add	r7, sp, #0
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800de80:	2300      	movs	r3, #0
 800de82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d10d      	bne.n	800deae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d14d      	bne.n	800df36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	689b      	ldr	r3, [r3, #8]
 800de9e:	4618      	mov	r0, r3
 800dea0:	f001 f880 	bl	800efa4 <xTaskPriorityDisinherit>
 800dea4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2200      	movs	r2, #0
 800deaa:	609a      	str	r2, [r3, #8]
 800deac:	e043      	b.n	800df36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d119      	bne.n	800dee8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	6858      	ldr	r0, [r3, #4]
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800debc:	461a      	mov	r2, r3
 800debe:	68b9      	ldr	r1, [r7, #8]
 800dec0:	f00f fca7 	bl	801d812 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	685a      	ldr	r2, [r3, #4]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800decc:	441a      	add	r2, r3
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	685a      	ldr	r2, [r3, #4]
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	689b      	ldr	r3, [r3, #8]
 800deda:	429a      	cmp	r2, r3
 800dedc:	d32b      	bcc.n	800df36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681a      	ldr	r2, [r3, #0]
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	605a      	str	r2, [r3, #4]
 800dee6:	e026      	b.n	800df36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	68d8      	ldr	r0, [r3, #12]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800def0:	461a      	mov	r2, r3
 800def2:	68b9      	ldr	r1, [r7, #8]
 800def4:	f00f fc8d 	bl	801d812 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	68da      	ldr	r2, [r3, #12]
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df00:	425b      	negs	r3, r3
 800df02:	441a      	add	r2, r3
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	68da      	ldr	r2, [r3, #12]
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	429a      	cmp	r2, r3
 800df12:	d207      	bcs.n	800df24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	689a      	ldr	r2, [r3, #8]
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df1c:	425b      	negs	r3, r3
 800df1e:	441a      	add	r2, r3
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2b02      	cmp	r3, #2
 800df28:	d105      	bne.n	800df36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d002      	beq.n	800df36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	3b01      	subs	r3, #1
 800df34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	1c5a      	adds	r2, r3, #1
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800df3e:	697b      	ldr	r3, [r7, #20]
}
 800df40:	4618      	mov	r0, r3
 800df42:	3718      	adds	r7, #24
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df56:	2b00      	cmp	r3, #0
 800df58:	d018      	beq.n	800df8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	68da      	ldr	r2, [r3, #12]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df62:	441a      	add	r2, r3
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	68da      	ldr	r2, [r3, #12]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	689b      	ldr	r3, [r3, #8]
 800df70:	429a      	cmp	r2, r3
 800df72:	d303      	bcc.n	800df7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681a      	ldr	r2, [r3, #0]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	68d9      	ldr	r1, [r3, #12]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df84:	461a      	mov	r2, r3
 800df86:	6838      	ldr	r0, [r7, #0]
 800df88:	f00f fc43 	bl	801d812 <memcpy>
	}
}
 800df8c:	bf00      	nop
 800df8e:	3708      	adds	r7, #8
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}

0800df94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b084      	sub	sp, #16
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800df9c:	f001 feac 	bl	800fcf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dfa6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dfa8:	e011      	b.n	800dfce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d012      	beq.n	800dfd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	3324      	adds	r3, #36	@ 0x24
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f000 fd98 	bl	800eaec <xTaskRemoveFromEventList>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d001      	beq.n	800dfc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dfc2:	f000 fe71 	bl	800eca8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dfc6:	7bfb      	ldrb	r3, [r7, #15]
 800dfc8:	3b01      	subs	r3, #1
 800dfca:	b2db      	uxtb	r3, r3
 800dfcc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dfce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	dce9      	bgt.n	800dfaa <prvUnlockQueue+0x16>
 800dfd6:	e000      	b.n	800dfda <prvUnlockQueue+0x46>
					break;
 800dfd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	22ff      	movs	r2, #255	@ 0xff
 800dfde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800dfe2:	f001 febb 	bl	800fd5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dfe6:	f001 fe87 	bl	800fcf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dff0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dff2:	e011      	b.n	800e018 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	691b      	ldr	r3, [r3, #16]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d012      	beq.n	800e022 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	3310      	adds	r3, #16
 800e000:	4618      	mov	r0, r3
 800e002:	f000 fd73 	bl	800eaec <xTaskRemoveFromEventList>
 800e006:	4603      	mov	r3, r0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d001      	beq.n	800e010 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e00c:	f000 fe4c 	bl	800eca8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e010:	7bbb      	ldrb	r3, [r7, #14]
 800e012:	3b01      	subs	r3, #1
 800e014:	b2db      	uxtb	r3, r3
 800e016:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	dce9      	bgt.n	800dff4 <prvUnlockQueue+0x60>
 800e020:	e000      	b.n	800e024 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e022:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	22ff      	movs	r2, #255	@ 0xff
 800e028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e02c:	f001 fe96 	bl	800fd5c <vPortExitCritical>
}
 800e030:	bf00      	nop
 800e032:	3710      	adds	r7, #16
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e040:	f001 fe5a 	bl	800fcf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d102      	bne.n	800e052 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e04c:	2301      	movs	r3, #1
 800e04e:	60fb      	str	r3, [r7, #12]
 800e050:	e001      	b.n	800e056 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e052:	2300      	movs	r3, #0
 800e054:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e056:	f001 fe81 	bl	800fd5c <vPortExitCritical>

	return xReturn;
 800e05a:	68fb      	ldr	r3, [r7, #12]
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3710      	adds	r7, #16
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b084      	sub	sp, #16
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e06c:	f001 fe44 	bl	800fcf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e078:	429a      	cmp	r2, r3
 800e07a:	d102      	bne.n	800e082 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e07c:	2301      	movs	r3, #1
 800e07e:	60fb      	str	r3, [r7, #12]
 800e080:	e001      	b.n	800e086 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e082:	2300      	movs	r3, #0
 800e084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e086:	f001 fe69 	bl	800fd5c <vPortExitCritical>

	return xReturn;
 800e08a:	68fb      	ldr	r3, [r7, #12]
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3710      	adds	r7, #16
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e094:	b480      	push	{r7}
 800e096:	b085      	sub	sp, #20
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e09e:	2300      	movs	r3, #0
 800e0a0:	60fb      	str	r3, [r7, #12]
 800e0a2:	e014      	b.n	800e0ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e0a4:	4a0f      	ldr	r2, [pc, #60]	@ (800e0e4 <vQueueAddToRegistry+0x50>)
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d10b      	bne.n	800e0c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e0b0:	490c      	ldr	r1, [pc, #48]	@ (800e0e4 <vQueueAddToRegistry+0x50>)
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	683a      	ldr	r2, [r7, #0]
 800e0b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e0ba:	4a0a      	ldr	r2, [pc, #40]	@ (800e0e4 <vQueueAddToRegistry+0x50>)
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	00db      	lsls	r3, r3, #3
 800e0c0:	4413      	add	r3, r2
 800e0c2:	687a      	ldr	r2, [r7, #4]
 800e0c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e0c6:	e006      	b.n	800e0d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	60fb      	str	r3, [r7, #12]
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2b07      	cmp	r3, #7
 800e0d2:	d9e7      	bls.n	800e0a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e0d4:	bf00      	nop
 800e0d6:	bf00      	nop
 800e0d8:	3714      	adds	r7, #20
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e0:	4770      	bx	lr
 800e0e2:	bf00      	nop
 800e0e4:	24005870 	.word	0x24005870

0800e0e8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b085      	sub	sp, #20
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	60fb      	str	r3, [r7, #12]
 800e0f4:	e016      	b.n	800e124 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e0f6:	4a10      	ldr	r2, [pc, #64]	@ (800e138 <vQueueUnregisterQueue+0x50>)
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	00db      	lsls	r3, r3, #3
 800e0fc:	4413      	add	r3, r2
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	687a      	ldr	r2, [r7, #4]
 800e102:	429a      	cmp	r2, r3
 800e104:	d10b      	bne.n	800e11e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e106:	4a0c      	ldr	r2, [pc, #48]	@ (800e138 <vQueueUnregisterQueue+0x50>)
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	2100      	movs	r1, #0
 800e10c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e110:	4a09      	ldr	r2, [pc, #36]	@ (800e138 <vQueueUnregisterQueue+0x50>)
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	00db      	lsls	r3, r3, #3
 800e116:	4413      	add	r3, r2
 800e118:	2200      	movs	r2, #0
 800e11a:	605a      	str	r2, [r3, #4]
				break;
 800e11c:	e006      	b.n	800e12c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	3301      	adds	r3, #1
 800e122:	60fb      	str	r3, [r7, #12]
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	2b07      	cmp	r3, #7
 800e128:	d9e5      	bls.n	800e0f6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e12a:	bf00      	nop
 800e12c:	bf00      	nop
 800e12e:	3714      	adds	r7, #20
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr
 800e138:	24005870 	.word	0x24005870

0800e13c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b086      	sub	sp, #24
 800e140:	af00      	add	r7, sp, #0
 800e142:	60f8      	str	r0, [r7, #12]
 800e144:	60b9      	str	r1, [r7, #8]
 800e146:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e14c:	f001 fdd4 	bl	800fcf8 <vPortEnterCritical>
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e156:	b25b      	sxtb	r3, r3
 800e158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e15c:	d103      	bne.n	800e166 <vQueueWaitForMessageRestricted+0x2a>
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	2200      	movs	r2, #0
 800e162:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e16c:	b25b      	sxtb	r3, r3
 800e16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e172:	d103      	bne.n	800e17c <vQueueWaitForMessageRestricted+0x40>
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	2200      	movs	r2, #0
 800e178:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e17c:	f001 fdee 	bl	800fd5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e184:	2b00      	cmp	r3, #0
 800e186:	d106      	bne.n	800e196 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	3324      	adds	r3, #36	@ 0x24
 800e18c:	687a      	ldr	r2, [r7, #4]
 800e18e:	68b9      	ldr	r1, [r7, #8]
 800e190:	4618      	mov	r0, r3
 800e192:	f000 fc7f 	bl	800ea94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e196:	6978      	ldr	r0, [r7, #20]
 800e198:	f7ff fefc 	bl	800df94 <prvUnlockQueue>
	}
 800e19c:	bf00      	nop
 800e19e:	3718      	adds	r7, #24
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b08e      	sub	sp, #56	@ 0x38
 800e1a8:	af04      	add	r7, sp, #16
 800e1aa:	60f8      	str	r0, [r7, #12]
 800e1ac:	60b9      	str	r1, [r7, #8]
 800e1ae:	607a      	str	r2, [r7, #4]
 800e1b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e1b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d10b      	bne.n	800e1d0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e1b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1bc:	f383 8811 	msr	BASEPRI, r3
 800e1c0:	f3bf 8f6f 	isb	sy
 800e1c4:	f3bf 8f4f 	dsb	sy
 800e1c8:	623b      	str	r3, [r7, #32]
}
 800e1ca:	bf00      	nop
 800e1cc:	bf00      	nop
 800e1ce:	e7fd      	b.n	800e1cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d10b      	bne.n	800e1ee <xTaskCreateStatic+0x4a>
	__asm volatile
 800e1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1da:	f383 8811 	msr	BASEPRI, r3
 800e1de:	f3bf 8f6f 	isb	sy
 800e1e2:	f3bf 8f4f 	dsb	sy
 800e1e6:	61fb      	str	r3, [r7, #28]
}
 800e1e8:	bf00      	nop
 800e1ea:	bf00      	nop
 800e1ec:	e7fd      	b.n	800e1ea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e1ee:	23a8      	movs	r3, #168	@ 0xa8
 800e1f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	2ba8      	cmp	r3, #168	@ 0xa8
 800e1f6:	d00b      	beq.n	800e210 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e1f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1fc:	f383 8811 	msr	BASEPRI, r3
 800e200:	f3bf 8f6f 	isb	sy
 800e204:	f3bf 8f4f 	dsb	sy
 800e208:	61bb      	str	r3, [r7, #24]
}
 800e20a:	bf00      	nop
 800e20c:	bf00      	nop
 800e20e:	e7fd      	b.n	800e20c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e210:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e214:	2b00      	cmp	r3, #0
 800e216:	d01e      	beq.n	800e256 <xTaskCreateStatic+0xb2>
 800e218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d01b      	beq.n	800e256 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e220:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e224:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e226:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e22a:	2202      	movs	r2, #2
 800e22c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e230:	2300      	movs	r3, #0
 800e232:	9303      	str	r3, [sp, #12]
 800e234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e236:	9302      	str	r3, [sp, #8]
 800e238:	f107 0314 	add.w	r3, r7, #20
 800e23c:	9301      	str	r3, [sp, #4]
 800e23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e240:	9300      	str	r3, [sp, #0]
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	687a      	ldr	r2, [r7, #4]
 800e246:	68b9      	ldr	r1, [r7, #8]
 800e248:	68f8      	ldr	r0, [r7, #12]
 800e24a:	f000 f851 	bl	800e2f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e24e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e250:	f000 f8f6 	bl	800e440 <prvAddNewTaskToReadyList>
 800e254:	e001      	b.n	800e25a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e256:	2300      	movs	r3, #0
 800e258:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e25a:	697b      	ldr	r3, [r7, #20]
	}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3728      	adds	r7, #40	@ 0x28
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}

0800e264 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e264:	b580      	push	{r7, lr}
 800e266:	b08c      	sub	sp, #48	@ 0x30
 800e268:	af04      	add	r7, sp, #16
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	60b9      	str	r1, [r7, #8]
 800e26e:	603b      	str	r3, [r7, #0]
 800e270:	4613      	mov	r3, r2
 800e272:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e274:	88fb      	ldrh	r3, [r7, #6]
 800e276:	009b      	lsls	r3, r3, #2
 800e278:	4618      	mov	r0, r3
 800e27a:	f001 fe5f 	bl	800ff3c <pvPortMalloc>
 800e27e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d00e      	beq.n	800e2a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e286:	20a8      	movs	r0, #168	@ 0xa8
 800e288:	f001 fe58 	bl	800ff3c <pvPortMalloc>
 800e28c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e28e:	69fb      	ldr	r3, [r7, #28]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d003      	beq.n	800e29c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e294:	69fb      	ldr	r3, [r7, #28]
 800e296:	697a      	ldr	r2, [r7, #20]
 800e298:	631a      	str	r2, [r3, #48]	@ 0x30
 800e29a:	e005      	b.n	800e2a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e29c:	6978      	ldr	r0, [r7, #20]
 800e29e:	f001 ff1b 	bl	80100d8 <vPortFree>
 800e2a2:	e001      	b.n	800e2a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e2a8:	69fb      	ldr	r3, [r7, #28]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d017      	beq.n	800e2de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e2b6:	88fa      	ldrh	r2, [r7, #6]
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	9303      	str	r3, [sp, #12]
 800e2bc:	69fb      	ldr	r3, [r7, #28]
 800e2be:	9302      	str	r3, [sp, #8]
 800e2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2c2:	9301      	str	r3, [sp, #4]
 800e2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2c6:	9300      	str	r3, [sp, #0]
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	68b9      	ldr	r1, [r7, #8]
 800e2cc:	68f8      	ldr	r0, [r7, #12]
 800e2ce:	f000 f80f 	bl	800e2f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e2d2:	69f8      	ldr	r0, [r7, #28]
 800e2d4:	f000 f8b4 	bl	800e440 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e2d8:	2301      	movs	r3, #1
 800e2da:	61bb      	str	r3, [r7, #24]
 800e2dc:	e002      	b.n	800e2e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e2de:	f04f 33ff 	mov.w	r3, #4294967295
 800e2e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e2e4:	69bb      	ldr	r3, [r7, #24]
	}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3720      	adds	r7, #32
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
	...

0800e2f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b088      	sub	sp, #32
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	60f8      	str	r0, [r7, #12]
 800e2f8:	60b9      	str	r1, [r7, #8]
 800e2fa:	607a      	str	r2, [r7, #4]
 800e2fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e300:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	009b      	lsls	r3, r3, #2
 800e306:	461a      	mov	r2, r3
 800e308:	21a5      	movs	r1, #165	@ 0xa5
 800e30a:	f00f f9b3 	bl	801d674 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e310:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e312:	6879      	ldr	r1, [r7, #4]
 800e314:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e318:	440b      	add	r3, r1
 800e31a:	009b      	lsls	r3, r3, #2
 800e31c:	4413      	add	r3, r2
 800e31e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e320:	69bb      	ldr	r3, [r7, #24]
 800e322:	f023 0307 	bic.w	r3, r3, #7
 800e326:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e328:	69bb      	ldr	r3, [r7, #24]
 800e32a:	f003 0307 	and.w	r3, r3, #7
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d00b      	beq.n	800e34a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e336:	f383 8811 	msr	BASEPRI, r3
 800e33a:	f3bf 8f6f 	isb	sy
 800e33e:	f3bf 8f4f 	dsb	sy
 800e342:	617b      	str	r3, [r7, #20]
}
 800e344:	bf00      	nop
 800e346:	bf00      	nop
 800e348:	e7fd      	b.n	800e346 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d01f      	beq.n	800e390 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e350:	2300      	movs	r3, #0
 800e352:	61fb      	str	r3, [r7, #28]
 800e354:	e012      	b.n	800e37c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e356:	68ba      	ldr	r2, [r7, #8]
 800e358:	69fb      	ldr	r3, [r7, #28]
 800e35a:	4413      	add	r3, r2
 800e35c:	7819      	ldrb	r1, [r3, #0]
 800e35e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e360:	69fb      	ldr	r3, [r7, #28]
 800e362:	4413      	add	r3, r2
 800e364:	3334      	adds	r3, #52	@ 0x34
 800e366:	460a      	mov	r2, r1
 800e368:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	69fb      	ldr	r3, [r7, #28]
 800e36e:	4413      	add	r3, r2
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d006      	beq.n	800e384 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e376:	69fb      	ldr	r3, [r7, #28]
 800e378:	3301      	adds	r3, #1
 800e37a:	61fb      	str	r3, [r7, #28]
 800e37c:	69fb      	ldr	r3, [r7, #28]
 800e37e:	2b0f      	cmp	r3, #15
 800e380:	d9e9      	bls.n	800e356 <prvInitialiseNewTask+0x66>
 800e382:	e000      	b.n	800e386 <prvInitialiseNewTask+0x96>
			{
				break;
 800e384:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e388:	2200      	movs	r2, #0
 800e38a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e38e:	e003      	b.n	800e398 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e392:	2200      	movs	r2, #0
 800e394:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e39a:	2b37      	cmp	r3, #55	@ 0x37
 800e39c:	d901      	bls.n	800e3a2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e39e:	2337      	movs	r3, #55	@ 0x37
 800e3a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e3a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e3ac:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e3b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3b6:	3304      	adds	r3, #4
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7fe fd7b 	bl	800ceb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3c0:	3318      	adds	r3, #24
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7fe fd76 	bl	800ceb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3d0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3dc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3f0:	3354      	adds	r3, #84	@ 0x54
 800e3f2:	224c      	movs	r2, #76	@ 0x4c
 800e3f4:	2100      	movs	r1, #0
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f00f f93c 	bl	801d674 <memset>
 800e3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3fe:	4a0d      	ldr	r2, [pc, #52]	@ (800e434 <prvInitialiseNewTask+0x144>)
 800e400:	659a      	str	r2, [r3, #88]	@ 0x58
 800e402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e404:	4a0c      	ldr	r2, [pc, #48]	@ (800e438 <prvInitialiseNewTask+0x148>)
 800e406:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e40a:	4a0c      	ldr	r2, [pc, #48]	@ (800e43c <prvInitialiseNewTask+0x14c>)
 800e40c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e40e:	683a      	ldr	r2, [r7, #0]
 800e410:	68f9      	ldr	r1, [r7, #12]
 800e412:	69b8      	ldr	r0, [r7, #24]
 800e414:	f001 fb3c 	bl	800fa90 <pxPortInitialiseStack>
 800e418:	4602      	mov	r2, r0
 800e41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e41c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e420:	2b00      	cmp	r3, #0
 800e422:	d002      	beq.n	800e42a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e426:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e428:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e42a:	bf00      	nop
 800e42c:	3720      	adds	r7, #32
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	2400cdc8 	.word	0x2400cdc8
 800e438:	2400ce30 	.word	0x2400ce30
 800e43c:	2400ce98 	.word	0x2400ce98

0800e440 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b082      	sub	sp, #8
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e448:	f001 fc56 	bl	800fcf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e44c:	4b2d      	ldr	r3, [pc, #180]	@ (800e504 <prvAddNewTaskToReadyList+0xc4>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	3301      	adds	r3, #1
 800e452:	4a2c      	ldr	r2, [pc, #176]	@ (800e504 <prvAddNewTaskToReadyList+0xc4>)
 800e454:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e456:	4b2c      	ldr	r3, [pc, #176]	@ (800e508 <prvAddNewTaskToReadyList+0xc8>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d109      	bne.n	800e472 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e45e:	4a2a      	ldr	r2, [pc, #168]	@ (800e508 <prvAddNewTaskToReadyList+0xc8>)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e464:	4b27      	ldr	r3, [pc, #156]	@ (800e504 <prvAddNewTaskToReadyList+0xc4>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2b01      	cmp	r3, #1
 800e46a:	d110      	bne.n	800e48e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e46c:	f000 fc40 	bl	800ecf0 <prvInitialiseTaskLists>
 800e470:	e00d      	b.n	800e48e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e472:	4b26      	ldr	r3, [pc, #152]	@ (800e50c <prvAddNewTaskToReadyList+0xcc>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d109      	bne.n	800e48e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e47a:	4b23      	ldr	r3, [pc, #140]	@ (800e508 <prvAddNewTaskToReadyList+0xc8>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e484:	429a      	cmp	r2, r3
 800e486:	d802      	bhi.n	800e48e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e488:	4a1f      	ldr	r2, [pc, #124]	@ (800e508 <prvAddNewTaskToReadyList+0xc8>)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e48e:	4b20      	ldr	r3, [pc, #128]	@ (800e510 <prvAddNewTaskToReadyList+0xd0>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	3301      	adds	r3, #1
 800e494:	4a1e      	ldr	r2, [pc, #120]	@ (800e510 <prvAddNewTaskToReadyList+0xd0>)
 800e496:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e498:	4b1d      	ldr	r3, [pc, #116]	@ (800e510 <prvAddNewTaskToReadyList+0xd0>)
 800e49a:	681a      	ldr	r2, [r3, #0]
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4a4:	4b1b      	ldr	r3, [pc, #108]	@ (800e514 <prvAddNewTaskToReadyList+0xd4>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d903      	bls.n	800e4b4 <prvAddNewTaskToReadyList+0x74>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4b0:	4a18      	ldr	r2, [pc, #96]	@ (800e514 <prvAddNewTaskToReadyList+0xd4>)
 800e4b2:	6013      	str	r3, [r2, #0]
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4b8:	4613      	mov	r3, r2
 800e4ba:	009b      	lsls	r3, r3, #2
 800e4bc:	4413      	add	r3, r2
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	4a15      	ldr	r2, [pc, #84]	@ (800e518 <prvAddNewTaskToReadyList+0xd8>)
 800e4c2:	441a      	add	r2, r3
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	3304      	adds	r3, #4
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	4610      	mov	r0, r2
 800e4cc:	f7fe fcff 	bl	800cece <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e4d0:	f001 fc44 	bl	800fd5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e4d4:	4b0d      	ldr	r3, [pc, #52]	@ (800e50c <prvAddNewTaskToReadyList+0xcc>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d00e      	beq.n	800e4fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e4dc:	4b0a      	ldr	r3, [pc, #40]	@ (800e508 <prvAddNewTaskToReadyList+0xc8>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d207      	bcs.n	800e4fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e4ea:	4b0c      	ldr	r3, [pc, #48]	@ (800e51c <prvAddNewTaskToReadyList+0xdc>)
 800e4ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4f0:	601a      	str	r2, [r3, #0]
 800e4f2:	f3bf 8f4f 	dsb	sy
 800e4f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e4fa:	bf00      	nop
 800e4fc:	3708      	adds	r7, #8
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
 800e502:	bf00      	nop
 800e504:	24005d84 	.word	0x24005d84
 800e508:	240058b0 	.word	0x240058b0
 800e50c:	24005d90 	.word	0x24005d90
 800e510:	24005da0 	.word	0x24005da0
 800e514:	24005d8c 	.word	0x24005d8c
 800e518:	240058b4 	.word	0x240058b4
 800e51c:	e000ed04 	.word	0xe000ed04

0800e520 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e520:	b580      	push	{r7, lr}
 800e522:	b084      	sub	sp, #16
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e528:	2300      	movs	r3, #0
 800e52a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d018      	beq.n	800e564 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e532:	4b14      	ldr	r3, [pc, #80]	@ (800e584 <vTaskDelay+0x64>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d00b      	beq.n	800e552 <vTaskDelay+0x32>
	__asm volatile
 800e53a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e53e:	f383 8811 	msr	BASEPRI, r3
 800e542:	f3bf 8f6f 	isb	sy
 800e546:	f3bf 8f4f 	dsb	sy
 800e54a:	60bb      	str	r3, [r7, #8]
}
 800e54c:	bf00      	nop
 800e54e:	bf00      	nop
 800e550:	e7fd      	b.n	800e54e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e552:	f000 f88b 	bl	800e66c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e556:	2100      	movs	r1, #0
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f000 fe2b 	bl	800f1b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e55e:	f000 f893 	bl	800e688 <xTaskResumeAll>
 800e562:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d107      	bne.n	800e57a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e56a:	4b07      	ldr	r3, [pc, #28]	@ (800e588 <vTaskDelay+0x68>)
 800e56c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e570:	601a      	str	r2, [r3, #0]
 800e572:	f3bf 8f4f 	dsb	sy
 800e576:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e57a:	bf00      	nop
 800e57c:	3710      	adds	r7, #16
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	24005dac 	.word	0x24005dac
 800e588:	e000ed04 	.word	0xe000ed04

0800e58c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b08a      	sub	sp, #40	@ 0x28
 800e590:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e592:	2300      	movs	r3, #0
 800e594:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e596:	2300      	movs	r3, #0
 800e598:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e59a:	463a      	mov	r2, r7
 800e59c:	1d39      	adds	r1, r7, #4
 800e59e:	f107 0308 	add.w	r3, r7, #8
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f7fe fc32 	bl	800ce0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e5a8:	6839      	ldr	r1, [r7, #0]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	68ba      	ldr	r2, [r7, #8]
 800e5ae:	9202      	str	r2, [sp, #8]
 800e5b0:	9301      	str	r3, [sp, #4]
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	9300      	str	r3, [sp, #0]
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	460a      	mov	r2, r1
 800e5ba:	4924      	ldr	r1, [pc, #144]	@ (800e64c <vTaskStartScheduler+0xc0>)
 800e5bc:	4824      	ldr	r0, [pc, #144]	@ (800e650 <vTaskStartScheduler+0xc4>)
 800e5be:	f7ff fdf1 	bl	800e1a4 <xTaskCreateStatic>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	4a23      	ldr	r2, [pc, #140]	@ (800e654 <vTaskStartScheduler+0xc8>)
 800e5c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e5c8:	4b22      	ldr	r3, [pc, #136]	@ (800e654 <vTaskStartScheduler+0xc8>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d002      	beq.n	800e5d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	617b      	str	r3, [r7, #20]
 800e5d4:	e001      	b.n	800e5da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	2b01      	cmp	r3, #1
 800e5de:	d102      	bne.n	800e5e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e5e0:	f000 fe3c 	bl	800f25c <xTimerCreateTimerTask>
 800e5e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d11b      	bne.n	800e624 <vTaskStartScheduler+0x98>
	__asm volatile
 800e5ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5f0:	f383 8811 	msr	BASEPRI, r3
 800e5f4:	f3bf 8f6f 	isb	sy
 800e5f8:	f3bf 8f4f 	dsb	sy
 800e5fc:	613b      	str	r3, [r7, #16]
}
 800e5fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e600:	4b15      	ldr	r3, [pc, #84]	@ (800e658 <vTaskStartScheduler+0xcc>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	3354      	adds	r3, #84	@ 0x54
 800e606:	4a15      	ldr	r2, [pc, #84]	@ (800e65c <vTaskStartScheduler+0xd0>)
 800e608:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e60a:	4b15      	ldr	r3, [pc, #84]	@ (800e660 <vTaskStartScheduler+0xd4>)
 800e60c:	f04f 32ff 	mov.w	r2, #4294967295
 800e610:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e612:	4b14      	ldr	r3, [pc, #80]	@ (800e664 <vTaskStartScheduler+0xd8>)
 800e614:	2201      	movs	r2, #1
 800e616:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e618:	4b13      	ldr	r3, [pc, #76]	@ (800e668 <vTaskStartScheduler+0xdc>)
 800e61a:	2200      	movs	r2, #0
 800e61c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e61e:	f001 fac7 	bl	800fbb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e622:	e00f      	b.n	800e644 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e62a:	d10b      	bne.n	800e644 <vTaskStartScheduler+0xb8>
	__asm volatile
 800e62c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e630:	f383 8811 	msr	BASEPRI, r3
 800e634:	f3bf 8f6f 	isb	sy
 800e638:	f3bf 8f4f 	dsb	sy
 800e63c:	60fb      	str	r3, [r7, #12]
}
 800e63e:	bf00      	nop
 800e640:	bf00      	nop
 800e642:	e7fd      	b.n	800e640 <vTaskStartScheduler+0xb4>
}
 800e644:	bf00      	nop
 800e646:	3718      	adds	r7, #24
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	0801f5e0 	.word	0x0801f5e0
 800e650:	0800ecc1 	.word	0x0800ecc1
 800e654:	24005da8 	.word	0x24005da8
 800e658:	240058b0 	.word	0x240058b0
 800e65c:	24000044 	.word	0x24000044
 800e660:	24005da4 	.word	0x24005da4
 800e664:	24005d90 	.word	0x24005d90
 800e668:	24005d88 	.word	0x24005d88

0800e66c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e66c:	b480      	push	{r7}
 800e66e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e670:	4b04      	ldr	r3, [pc, #16]	@ (800e684 <vTaskSuspendAll+0x18>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	3301      	adds	r3, #1
 800e676:	4a03      	ldr	r2, [pc, #12]	@ (800e684 <vTaskSuspendAll+0x18>)
 800e678:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e67a:	bf00      	nop
 800e67c:	46bd      	mov	sp, r7
 800e67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e682:	4770      	bx	lr
 800e684:	24005dac 	.word	0x24005dac

0800e688 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b084      	sub	sp, #16
 800e68c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e68e:	2300      	movs	r3, #0
 800e690:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e692:	2300      	movs	r3, #0
 800e694:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e696:	4b42      	ldr	r3, [pc, #264]	@ (800e7a0 <xTaskResumeAll+0x118>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d10b      	bne.n	800e6b6 <xTaskResumeAll+0x2e>
	__asm volatile
 800e69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6a2:	f383 8811 	msr	BASEPRI, r3
 800e6a6:	f3bf 8f6f 	isb	sy
 800e6aa:	f3bf 8f4f 	dsb	sy
 800e6ae:	603b      	str	r3, [r7, #0]
}
 800e6b0:	bf00      	nop
 800e6b2:	bf00      	nop
 800e6b4:	e7fd      	b.n	800e6b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e6b6:	f001 fb1f 	bl	800fcf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e6ba:	4b39      	ldr	r3, [pc, #228]	@ (800e7a0 <xTaskResumeAll+0x118>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	3b01      	subs	r3, #1
 800e6c0:	4a37      	ldr	r2, [pc, #220]	@ (800e7a0 <xTaskResumeAll+0x118>)
 800e6c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6c4:	4b36      	ldr	r3, [pc, #216]	@ (800e7a0 <xTaskResumeAll+0x118>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d162      	bne.n	800e792 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e6cc:	4b35      	ldr	r3, [pc, #212]	@ (800e7a4 <xTaskResumeAll+0x11c>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d05e      	beq.n	800e792 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e6d4:	e02f      	b.n	800e736 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6d6:	4b34      	ldr	r3, [pc, #208]	@ (800e7a8 <xTaskResumeAll+0x120>)
 800e6d8:	68db      	ldr	r3, [r3, #12]
 800e6da:	68db      	ldr	r3, [r3, #12]
 800e6dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	3318      	adds	r3, #24
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7fe fc50 	bl	800cf88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	3304      	adds	r3, #4
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f7fe fc4b 	bl	800cf88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6f6:	4b2d      	ldr	r3, [pc, #180]	@ (800e7ac <xTaskResumeAll+0x124>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d903      	bls.n	800e706 <xTaskResumeAll+0x7e>
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e702:	4a2a      	ldr	r2, [pc, #168]	@ (800e7ac <xTaskResumeAll+0x124>)
 800e704:	6013      	str	r3, [r2, #0]
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e70a:	4613      	mov	r3, r2
 800e70c:	009b      	lsls	r3, r3, #2
 800e70e:	4413      	add	r3, r2
 800e710:	009b      	lsls	r3, r3, #2
 800e712:	4a27      	ldr	r2, [pc, #156]	@ (800e7b0 <xTaskResumeAll+0x128>)
 800e714:	441a      	add	r2, r3
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	3304      	adds	r3, #4
 800e71a:	4619      	mov	r1, r3
 800e71c:	4610      	mov	r0, r2
 800e71e:	f7fe fbd6 	bl	800cece <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e726:	4b23      	ldr	r3, [pc, #140]	@ (800e7b4 <xTaskResumeAll+0x12c>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d302      	bcc.n	800e736 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e730:	4b21      	ldr	r3, [pc, #132]	@ (800e7b8 <xTaskResumeAll+0x130>)
 800e732:	2201      	movs	r2, #1
 800e734:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e736:	4b1c      	ldr	r3, [pc, #112]	@ (800e7a8 <xTaskResumeAll+0x120>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d1cb      	bne.n	800e6d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d001      	beq.n	800e748 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e744:	f000 fb78 	bl	800ee38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e748:	4b1c      	ldr	r3, [pc, #112]	@ (800e7bc <xTaskResumeAll+0x134>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d010      	beq.n	800e776 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e754:	f000 f858 	bl	800e808 <xTaskIncrementTick>
 800e758:	4603      	mov	r3, r0
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d002      	beq.n	800e764 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e75e:	4b16      	ldr	r3, [pc, #88]	@ (800e7b8 <xTaskResumeAll+0x130>)
 800e760:	2201      	movs	r2, #1
 800e762:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	3b01      	subs	r3, #1
 800e768:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d1f1      	bne.n	800e754 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e770:	4b12      	ldr	r3, [pc, #72]	@ (800e7bc <xTaskResumeAll+0x134>)
 800e772:	2200      	movs	r2, #0
 800e774:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e776:	4b10      	ldr	r3, [pc, #64]	@ (800e7b8 <xTaskResumeAll+0x130>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d009      	beq.n	800e792 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e77e:	2301      	movs	r3, #1
 800e780:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e782:	4b0f      	ldr	r3, [pc, #60]	@ (800e7c0 <xTaskResumeAll+0x138>)
 800e784:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e788:	601a      	str	r2, [r3, #0]
 800e78a:	f3bf 8f4f 	dsb	sy
 800e78e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e792:	f001 fae3 	bl	800fd5c <vPortExitCritical>

	return xAlreadyYielded;
 800e796:	68bb      	ldr	r3, [r7, #8]
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3710      	adds	r7, #16
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}
 800e7a0:	24005dac 	.word	0x24005dac
 800e7a4:	24005d84 	.word	0x24005d84
 800e7a8:	24005d44 	.word	0x24005d44
 800e7ac:	24005d8c 	.word	0x24005d8c
 800e7b0:	240058b4 	.word	0x240058b4
 800e7b4:	240058b0 	.word	0x240058b0
 800e7b8:	24005d98 	.word	0x24005d98
 800e7bc:	24005d94 	.word	0x24005d94
 800e7c0:	e000ed04 	.word	0xe000ed04

0800e7c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b083      	sub	sp, #12
 800e7c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e7ca:	4b05      	ldr	r3, [pc, #20]	@ (800e7e0 <xTaskGetTickCount+0x1c>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e7d0:	687b      	ldr	r3, [r7, #4]
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	370c      	adds	r7, #12
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7dc:	4770      	bx	lr
 800e7de:	bf00      	nop
 800e7e0:	24005d88 	.word	0x24005d88

0800e7e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b082      	sub	sp, #8
 800e7e8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7ea:	f001 fb65 	bl	800feb8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e7f2:	4b04      	ldr	r3, [pc, #16]	@ (800e804 <xTaskGetTickCountFromISR+0x20>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e7f8:	683b      	ldr	r3, [r7, #0]
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3708      	adds	r7, #8
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop
 800e804:	24005d88 	.word	0x24005d88

0800e808 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b086      	sub	sp, #24
 800e80c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e80e:	2300      	movs	r3, #0
 800e810:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e812:	4b4f      	ldr	r3, [pc, #316]	@ (800e950 <xTaskIncrementTick+0x148>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	2b00      	cmp	r3, #0
 800e818:	f040 8090 	bne.w	800e93c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e81c:	4b4d      	ldr	r3, [pc, #308]	@ (800e954 <xTaskIncrementTick+0x14c>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	3301      	adds	r3, #1
 800e822:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e824:	4a4b      	ldr	r2, [pc, #300]	@ (800e954 <xTaskIncrementTick+0x14c>)
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e82a:	693b      	ldr	r3, [r7, #16]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d121      	bne.n	800e874 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e830:	4b49      	ldr	r3, [pc, #292]	@ (800e958 <xTaskIncrementTick+0x150>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d00b      	beq.n	800e852 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e83a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e83e:	f383 8811 	msr	BASEPRI, r3
 800e842:	f3bf 8f6f 	isb	sy
 800e846:	f3bf 8f4f 	dsb	sy
 800e84a:	603b      	str	r3, [r7, #0]
}
 800e84c:	bf00      	nop
 800e84e:	bf00      	nop
 800e850:	e7fd      	b.n	800e84e <xTaskIncrementTick+0x46>
 800e852:	4b41      	ldr	r3, [pc, #260]	@ (800e958 <xTaskIncrementTick+0x150>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	60fb      	str	r3, [r7, #12]
 800e858:	4b40      	ldr	r3, [pc, #256]	@ (800e95c <xTaskIncrementTick+0x154>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4a3e      	ldr	r2, [pc, #248]	@ (800e958 <xTaskIncrementTick+0x150>)
 800e85e:	6013      	str	r3, [r2, #0]
 800e860:	4a3e      	ldr	r2, [pc, #248]	@ (800e95c <xTaskIncrementTick+0x154>)
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	6013      	str	r3, [r2, #0]
 800e866:	4b3e      	ldr	r3, [pc, #248]	@ (800e960 <xTaskIncrementTick+0x158>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	3301      	adds	r3, #1
 800e86c:	4a3c      	ldr	r2, [pc, #240]	@ (800e960 <xTaskIncrementTick+0x158>)
 800e86e:	6013      	str	r3, [r2, #0]
 800e870:	f000 fae2 	bl	800ee38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e874:	4b3b      	ldr	r3, [pc, #236]	@ (800e964 <xTaskIncrementTick+0x15c>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	693a      	ldr	r2, [r7, #16]
 800e87a:	429a      	cmp	r2, r3
 800e87c:	d349      	bcc.n	800e912 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e87e:	4b36      	ldr	r3, [pc, #216]	@ (800e958 <xTaskIncrementTick+0x150>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d104      	bne.n	800e892 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e888:	4b36      	ldr	r3, [pc, #216]	@ (800e964 <xTaskIncrementTick+0x15c>)
 800e88a:	f04f 32ff 	mov.w	r2, #4294967295
 800e88e:	601a      	str	r2, [r3, #0]
					break;
 800e890:	e03f      	b.n	800e912 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e892:	4b31      	ldr	r3, [pc, #196]	@ (800e958 <xTaskIncrementTick+0x150>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	68db      	ldr	r3, [r3, #12]
 800e898:	68db      	ldr	r3, [r3, #12]
 800e89a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e8a2:	693a      	ldr	r2, [r7, #16]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	429a      	cmp	r2, r3
 800e8a8:	d203      	bcs.n	800e8b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e8aa:	4a2e      	ldr	r2, [pc, #184]	@ (800e964 <xTaskIncrementTick+0x15c>)
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e8b0:	e02f      	b.n	800e912 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	3304      	adds	r3, #4
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7fe fb66 	bl	800cf88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d004      	beq.n	800e8ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	3318      	adds	r3, #24
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7fe fb5d 	bl	800cf88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8d2:	4b25      	ldr	r3, [pc, #148]	@ (800e968 <xTaskIncrementTick+0x160>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d903      	bls.n	800e8e2 <xTaskIncrementTick+0xda>
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8de:	4a22      	ldr	r2, [pc, #136]	@ (800e968 <xTaskIncrementTick+0x160>)
 800e8e0:	6013      	str	r3, [r2, #0]
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8e6:	4613      	mov	r3, r2
 800e8e8:	009b      	lsls	r3, r3, #2
 800e8ea:	4413      	add	r3, r2
 800e8ec:	009b      	lsls	r3, r3, #2
 800e8ee:	4a1f      	ldr	r2, [pc, #124]	@ (800e96c <xTaskIncrementTick+0x164>)
 800e8f0:	441a      	add	r2, r3
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	3304      	adds	r3, #4
 800e8f6:	4619      	mov	r1, r3
 800e8f8:	4610      	mov	r0, r2
 800e8fa:	f7fe fae8 	bl	800cece <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e902:	4b1b      	ldr	r3, [pc, #108]	@ (800e970 <xTaskIncrementTick+0x168>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e908:	429a      	cmp	r2, r3
 800e90a:	d3b8      	bcc.n	800e87e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e90c:	2301      	movs	r3, #1
 800e90e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e910:	e7b5      	b.n	800e87e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e912:	4b17      	ldr	r3, [pc, #92]	@ (800e970 <xTaskIncrementTick+0x168>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e918:	4914      	ldr	r1, [pc, #80]	@ (800e96c <xTaskIncrementTick+0x164>)
 800e91a:	4613      	mov	r3, r2
 800e91c:	009b      	lsls	r3, r3, #2
 800e91e:	4413      	add	r3, r2
 800e920:	009b      	lsls	r3, r3, #2
 800e922:	440b      	add	r3, r1
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	2b01      	cmp	r3, #1
 800e928:	d901      	bls.n	800e92e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e92a:	2301      	movs	r3, #1
 800e92c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e92e:	4b11      	ldr	r3, [pc, #68]	@ (800e974 <xTaskIncrementTick+0x16c>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d007      	beq.n	800e946 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e936:	2301      	movs	r3, #1
 800e938:	617b      	str	r3, [r7, #20]
 800e93a:	e004      	b.n	800e946 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e93c:	4b0e      	ldr	r3, [pc, #56]	@ (800e978 <xTaskIncrementTick+0x170>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	3301      	adds	r3, #1
 800e942:	4a0d      	ldr	r2, [pc, #52]	@ (800e978 <xTaskIncrementTick+0x170>)
 800e944:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e946:	697b      	ldr	r3, [r7, #20]
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3718      	adds	r7, #24
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}
 800e950:	24005dac 	.word	0x24005dac
 800e954:	24005d88 	.word	0x24005d88
 800e958:	24005d3c 	.word	0x24005d3c
 800e95c:	24005d40 	.word	0x24005d40
 800e960:	24005d9c 	.word	0x24005d9c
 800e964:	24005da4 	.word	0x24005da4
 800e968:	24005d8c 	.word	0x24005d8c
 800e96c:	240058b4 	.word	0x240058b4
 800e970:	240058b0 	.word	0x240058b0
 800e974:	24005d98 	.word	0x24005d98
 800e978:	24005d94 	.word	0x24005d94

0800e97c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e97c:	b480      	push	{r7}
 800e97e:	b085      	sub	sp, #20
 800e980:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e982:	4b2b      	ldr	r3, [pc, #172]	@ (800ea30 <vTaskSwitchContext+0xb4>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d003      	beq.n	800e992 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e98a:	4b2a      	ldr	r3, [pc, #168]	@ (800ea34 <vTaskSwitchContext+0xb8>)
 800e98c:	2201      	movs	r2, #1
 800e98e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e990:	e047      	b.n	800ea22 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e992:	4b28      	ldr	r3, [pc, #160]	@ (800ea34 <vTaskSwitchContext+0xb8>)
 800e994:	2200      	movs	r2, #0
 800e996:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e998:	4b27      	ldr	r3, [pc, #156]	@ (800ea38 <vTaskSwitchContext+0xbc>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	60fb      	str	r3, [r7, #12]
 800e99e:	e011      	b.n	800e9c4 <vTaskSwitchContext+0x48>
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d10b      	bne.n	800e9be <vTaskSwitchContext+0x42>
	__asm volatile
 800e9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9aa:	f383 8811 	msr	BASEPRI, r3
 800e9ae:	f3bf 8f6f 	isb	sy
 800e9b2:	f3bf 8f4f 	dsb	sy
 800e9b6:	607b      	str	r3, [r7, #4]
}
 800e9b8:	bf00      	nop
 800e9ba:	bf00      	nop
 800e9bc:	e7fd      	b.n	800e9ba <vTaskSwitchContext+0x3e>
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	3b01      	subs	r3, #1
 800e9c2:	60fb      	str	r3, [r7, #12]
 800e9c4:	491d      	ldr	r1, [pc, #116]	@ (800ea3c <vTaskSwitchContext+0xc0>)
 800e9c6:	68fa      	ldr	r2, [r7, #12]
 800e9c8:	4613      	mov	r3, r2
 800e9ca:	009b      	lsls	r3, r3, #2
 800e9cc:	4413      	add	r3, r2
 800e9ce:	009b      	lsls	r3, r3, #2
 800e9d0:	440b      	add	r3, r1
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d0e3      	beq.n	800e9a0 <vTaskSwitchContext+0x24>
 800e9d8:	68fa      	ldr	r2, [r7, #12]
 800e9da:	4613      	mov	r3, r2
 800e9dc:	009b      	lsls	r3, r3, #2
 800e9de:	4413      	add	r3, r2
 800e9e0:	009b      	lsls	r3, r3, #2
 800e9e2:	4a16      	ldr	r2, [pc, #88]	@ (800ea3c <vTaskSwitchContext+0xc0>)
 800e9e4:	4413      	add	r3, r2
 800e9e6:	60bb      	str	r3, [r7, #8]
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	685a      	ldr	r2, [r3, #4]
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	605a      	str	r2, [r3, #4]
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	685a      	ldr	r2, [r3, #4]
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	3308      	adds	r3, #8
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d104      	bne.n	800ea08 <vTaskSwitchContext+0x8c>
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	685a      	ldr	r2, [r3, #4]
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	605a      	str	r2, [r3, #4]
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	685b      	ldr	r3, [r3, #4]
 800ea0c:	68db      	ldr	r3, [r3, #12]
 800ea0e:	4a0c      	ldr	r2, [pc, #48]	@ (800ea40 <vTaskSwitchContext+0xc4>)
 800ea10:	6013      	str	r3, [r2, #0]
 800ea12:	4a09      	ldr	r2, [pc, #36]	@ (800ea38 <vTaskSwitchContext+0xbc>)
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ea18:	4b09      	ldr	r3, [pc, #36]	@ (800ea40 <vTaskSwitchContext+0xc4>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	3354      	adds	r3, #84	@ 0x54
 800ea1e:	4a09      	ldr	r2, [pc, #36]	@ (800ea44 <vTaskSwitchContext+0xc8>)
 800ea20:	6013      	str	r3, [r2, #0]
}
 800ea22:	bf00      	nop
 800ea24:	3714      	adds	r7, #20
 800ea26:	46bd      	mov	sp, r7
 800ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2c:	4770      	bx	lr
 800ea2e:	bf00      	nop
 800ea30:	24005dac 	.word	0x24005dac
 800ea34:	24005d98 	.word	0x24005d98
 800ea38:	24005d8c 	.word	0x24005d8c
 800ea3c:	240058b4 	.word	0x240058b4
 800ea40:	240058b0 	.word	0x240058b0
 800ea44:	24000044 	.word	0x24000044

0800ea48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b084      	sub	sp, #16
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d10b      	bne.n	800ea70 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ea58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea5c:	f383 8811 	msr	BASEPRI, r3
 800ea60:	f3bf 8f6f 	isb	sy
 800ea64:	f3bf 8f4f 	dsb	sy
 800ea68:	60fb      	str	r3, [r7, #12]
}
 800ea6a:	bf00      	nop
 800ea6c:	bf00      	nop
 800ea6e:	e7fd      	b.n	800ea6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ea70:	4b07      	ldr	r3, [pc, #28]	@ (800ea90 <vTaskPlaceOnEventList+0x48>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	3318      	adds	r3, #24
 800ea76:	4619      	mov	r1, r3
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f7fe fa4c 	bl	800cf16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ea7e:	2101      	movs	r1, #1
 800ea80:	6838      	ldr	r0, [r7, #0]
 800ea82:	f000 fb97 	bl	800f1b4 <prvAddCurrentTaskToDelayedList>
}
 800ea86:	bf00      	nop
 800ea88:	3710      	adds	r7, #16
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	240058b0 	.word	0x240058b0

0800ea94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b086      	sub	sp, #24
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	60f8      	str	r0, [r7, #12]
 800ea9c:	60b9      	str	r1, [r7, #8]
 800ea9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d10b      	bne.n	800eabe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800eaa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaaa:	f383 8811 	msr	BASEPRI, r3
 800eaae:	f3bf 8f6f 	isb	sy
 800eab2:	f3bf 8f4f 	dsb	sy
 800eab6:	617b      	str	r3, [r7, #20]
}
 800eab8:	bf00      	nop
 800eaba:	bf00      	nop
 800eabc:	e7fd      	b.n	800eaba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eabe:	4b0a      	ldr	r3, [pc, #40]	@ (800eae8 <vTaskPlaceOnEventListRestricted+0x54>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	3318      	adds	r3, #24
 800eac4:	4619      	mov	r1, r3
 800eac6:	68f8      	ldr	r0, [r7, #12]
 800eac8:	f7fe fa01 	bl	800cece <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d002      	beq.n	800ead8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ead2:	f04f 33ff 	mov.w	r3, #4294967295
 800ead6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ead8:	6879      	ldr	r1, [r7, #4]
 800eada:	68b8      	ldr	r0, [r7, #8]
 800eadc:	f000 fb6a 	bl	800f1b4 <prvAddCurrentTaskToDelayedList>
	}
 800eae0:	bf00      	nop
 800eae2:	3718      	adds	r7, #24
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}
 800eae8:	240058b0 	.word	0x240058b0

0800eaec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b086      	sub	sp, #24
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	68db      	ldr	r3, [r3, #12]
 800eaf8:	68db      	ldr	r3, [r3, #12]
 800eafa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d10b      	bne.n	800eb1a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800eb02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb06:	f383 8811 	msr	BASEPRI, r3
 800eb0a:	f3bf 8f6f 	isb	sy
 800eb0e:	f3bf 8f4f 	dsb	sy
 800eb12:	60fb      	str	r3, [r7, #12]
}
 800eb14:	bf00      	nop
 800eb16:	bf00      	nop
 800eb18:	e7fd      	b.n	800eb16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	3318      	adds	r3, #24
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7fe fa32 	bl	800cf88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb24:	4b1d      	ldr	r3, [pc, #116]	@ (800eb9c <xTaskRemoveFromEventList+0xb0>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d11d      	bne.n	800eb68 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	3304      	adds	r3, #4
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7fe fa29 	bl	800cf88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eb36:	693b      	ldr	r3, [r7, #16]
 800eb38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb3a:	4b19      	ldr	r3, [pc, #100]	@ (800eba0 <xTaskRemoveFromEventList+0xb4>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d903      	bls.n	800eb4a <xTaskRemoveFromEventList+0x5e>
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb46:	4a16      	ldr	r2, [pc, #88]	@ (800eba0 <xTaskRemoveFromEventList+0xb4>)
 800eb48:	6013      	str	r3, [r2, #0]
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb4e:	4613      	mov	r3, r2
 800eb50:	009b      	lsls	r3, r3, #2
 800eb52:	4413      	add	r3, r2
 800eb54:	009b      	lsls	r3, r3, #2
 800eb56:	4a13      	ldr	r2, [pc, #76]	@ (800eba4 <xTaskRemoveFromEventList+0xb8>)
 800eb58:	441a      	add	r2, r3
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	3304      	adds	r3, #4
 800eb5e:	4619      	mov	r1, r3
 800eb60:	4610      	mov	r0, r2
 800eb62:	f7fe f9b4 	bl	800cece <vListInsertEnd>
 800eb66:	e005      	b.n	800eb74 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	3318      	adds	r3, #24
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	480e      	ldr	r0, [pc, #56]	@ (800eba8 <xTaskRemoveFromEventList+0xbc>)
 800eb70:	f7fe f9ad 	bl	800cece <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb78:	4b0c      	ldr	r3, [pc, #48]	@ (800ebac <xTaskRemoveFromEventList+0xc0>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	d905      	bls.n	800eb8e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800eb82:	2301      	movs	r3, #1
 800eb84:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800eb86:	4b0a      	ldr	r3, [pc, #40]	@ (800ebb0 <xTaskRemoveFromEventList+0xc4>)
 800eb88:	2201      	movs	r2, #1
 800eb8a:	601a      	str	r2, [r3, #0]
 800eb8c:	e001      	b.n	800eb92 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800eb92:	697b      	ldr	r3, [r7, #20]
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	3718      	adds	r7, #24
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}
 800eb9c:	24005dac 	.word	0x24005dac
 800eba0:	24005d8c 	.word	0x24005d8c
 800eba4:	240058b4 	.word	0x240058b4
 800eba8:	24005d44 	.word	0x24005d44
 800ebac:	240058b0 	.word	0x240058b0
 800ebb0:	24005d98 	.word	0x24005d98

0800ebb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b083      	sub	sp, #12
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ebbc:	4b06      	ldr	r3, [pc, #24]	@ (800ebd8 <vTaskInternalSetTimeOutState+0x24>)
 800ebbe:	681a      	ldr	r2, [r3, #0]
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ebc4:	4b05      	ldr	r3, [pc, #20]	@ (800ebdc <vTaskInternalSetTimeOutState+0x28>)
 800ebc6:	681a      	ldr	r2, [r3, #0]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	605a      	str	r2, [r3, #4]
}
 800ebcc:	bf00      	nop
 800ebce:	370c      	adds	r7, #12
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd6:	4770      	bx	lr
 800ebd8:	24005d9c 	.word	0x24005d9c
 800ebdc:	24005d88 	.word	0x24005d88

0800ebe0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b088      	sub	sp, #32
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d10b      	bne.n	800ec08 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ebf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebf4:	f383 8811 	msr	BASEPRI, r3
 800ebf8:	f3bf 8f6f 	isb	sy
 800ebfc:	f3bf 8f4f 	dsb	sy
 800ec00:	613b      	str	r3, [r7, #16]
}
 800ec02:	bf00      	nop
 800ec04:	bf00      	nop
 800ec06:	e7fd      	b.n	800ec04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d10b      	bne.n	800ec26 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ec0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec12:	f383 8811 	msr	BASEPRI, r3
 800ec16:	f3bf 8f6f 	isb	sy
 800ec1a:	f3bf 8f4f 	dsb	sy
 800ec1e:	60fb      	str	r3, [r7, #12]
}
 800ec20:	bf00      	nop
 800ec22:	bf00      	nop
 800ec24:	e7fd      	b.n	800ec22 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ec26:	f001 f867 	bl	800fcf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ec2a:	4b1d      	ldr	r3, [pc, #116]	@ (800eca0 <xTaskCheckForTimeOut+0xc0>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	69ba      	ldr	r2, [r7, #24]
 800ec36:	1ad3      	subs	r3, r2, r3
 800ec38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec42:	d102      	bne.n	800ec4a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ec44:	2300      	movs	r3, #0
 800ec46:	61fb      	str	r3, [r7, #28]
 800ec48:	e023      	b.n	800ec92 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681a      	ldr	r2, [r3, #0]
 800ec4e:	4b15      	ldr	r3, [pc, #84]	@ (800eca4 <xTaskCheckForTimeOut+0xc4>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d007      	beq.n	800ec66 <xTaskCheckForTimeOut+0x86>
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	685b      	ldr	r3, [r3, #4]
 800ec5a:	69ba      	ldr	r2, [r7, #24]
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d302      	bcc.n	800ec66 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ec60:	2301      	movs	r3, #1
 800ec62:	61fb      	str	r3, [r7, #28]
 800ec64:	e015      	b.n	800ec92 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	697a      	ldr	r2, [r7, #20]
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d20b      	bcs.n	800ec88 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	681a      	ldr	r2, [r3, #0]
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	1ad2      	subs	r2, r2, r3
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f7ff ff99 	bl	800ebb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ec82:	2300      	movs	r3, #0
 800ec84:	61fb      	str	r3, [r7, #28]
 800ec86:	e004      	b.n	800ec92 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ec8e:	2301      	movs	r3, #1
 800ec90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ec92:	f001 f863 	bl	800fd5c <vPortExitCritical>

	return xReturn;
 800ec96:	69fb      	ldr	r3, [r7, #28]
}
 800ec98:	4618      	mov	r0, r3
 800ec9a:	3720      	adds	r7, #32
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}
 800eca0:	24005d88 	.word	0x24005d88
 800eca4:	24005d9c 	.word	0x24005d9c

0800eca8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eca8:	b480      	push	{r7}
 800ecaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ecac:	4b03      	ldr	r3, [pc, #12]	@ (800ecbc <vTaskMissedYield+0x14>)
 800ecae:	2201      	movs	r2, #1
 800ecb0:	601a      	str	r2, [r3, #0]
}
 800ecb2:	bf00      	nop
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr
 800ecbc:	24005d98 	.word	0x24005d98

0800ecc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b082      	sub	sp, #8
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ecc8:	f000 f852 	bl	800ed70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eccc:	4b06      	ldr	r3, [pc, #24]	@ (800ece8 <prvIdleTask+0x28>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	2b01      	cmp	r3, #1
 800ecd2:	d9f9      	bls.n	800ecc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ecd4:	4b05      	ldr	r3, [pc, #20]	@ (800ecec <prvIdleTask+0x2c>)
 800ecd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecda:	601a      	str	r2, [r3, #0]
 800ecdc:	f3bf 8f4f 	dsb	sy
 800ece0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ece4:	e7f0      	b.n	800ecc8 <prvIdleTask+0x8>
 800ece6:	bf00      	nop
 800ece8:	240058b4 	.word	0x240058b4
 800ecec:	e000ed04 	.word	0xe000ed04

0800ecf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	607b      	str	r3, [r7, #4]
 800ecfa:	e00c      	b.n	800ed16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ecfc:	687a      	ldr	r2, [r7, #4]
 800ecfe:	4613      	mov	r3, r2
 800ed00:	009b      	lsls	r3, r3, #2
 800ed02:	4413      	add	r3, r2
 800ed04:	009b      	lsls	r3, r3, #2
 800ed06:	4a12      	ldr	r2, [pc, #72]	@ (800ed50 <prvInitialiseTaskLists+0x60>)
 800ed08:	4413      	add	r3, r2
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7fe f8b2 	bl	800ce74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	3301      	adds	r3, #1
 800ed14:	607b      	str	r3, [r7, #4]
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2b37      	cmp	r3, #55	@ 0x37
 800ed1a:	d9ef      	bls.n	800ecfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ed1c:	480d      	ldr	r0, [pc, #52]	@ (800ed54 <prvInitialiseTaskLists+0x64>)
 800ed1e:	f7fe f8a9 	bl	800ce74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ed22:	480d      	ldr	r0, [pc, #52]	@ (800ed58 <prvInitialiseTaskLists+0x68>)
 800ed24:	f7fe f8a6 	bl	800ce74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ed28:	480c      	ldr	r0, [pc, #48]	@ (800ed5c <prvInitialiseTaskLists+0x6c>)
 800ed2a:	f7fe f8a3 	bl	800ce74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ed2e:	480c      	ldr	r0, [pc, #48]	@ (800ed60 <prvInitialiseTaskLists+0x70>)
 800ed30:	f7fe f8a0 	bl	800ce74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ed34:	480b      	ldr	r0, [pc, #44]	@ (800ed64 <prvInitialiseTaskLists+0x74>)
 800ed36:	f7fe f89d 	bl	800ce74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ed3a:	4b0b      	ldr	r3, [pc, #44]	@ (800ed68 <prvInitialiseTaskLists+0x78>)
 800ed3c:	4a05      	ldr	r2, [pc, #20]	@ (800ed54 <prvInitialiseTaskLists+0x64>)
 800ed3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ed40:	4b0a      	ldr	r3, [pc, #40]	@ (800ed6c <prvInitialiseTaskLists+0x7c>)
 800ed42:	4a05      	ldr	r2, [pc, #20]	@ (800ed58 <prvInitialiseTaskLists+0x68>)
 800ed44:	601a      	str	r2, [r3, #0]
}
 800ed46:	bf00      	nop
 800ed48:	3708      	adds	r7, #8
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
 800ed4e:	bf00      	nop
 800ed50:	240058b4 	.word	0x240058b4
 800ed54:	24005d14 	.word	0x24005d14
 800ed58:	24005d28 	.word	0x24005d28
 800ed5c:	24005d44 	.word	0x24005d44
 800ed60:	24005d58 	.word	0x24005d58
 800ed64:	24005d70 	.word	0x24005d70
 800ed68:	24005d3c 	.word	0x24005d3c
 800ed6c:	24005d40 	.word	0x24005d40

0800ed70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b082      	sub	sp, #8
 800ed74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed76:	e019      	b.n	800edac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ed78:	f000 ffbe 	bl	800fcf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed7c:	4b10      	ldr	r3, [pc, #64]	@ (800edc0 <prvCheckTasksWaitingTermination+0x50>)
 800ed7e:	68db      	ldr	r3, [r3, #12]
 800ed80:	68db      	ldr	r3, [r3, #12]
 800ed82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	3304      	adds	r3, #4
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f7fe f8fd 	bl	800cf88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ed8e:	4b0d      	ldr	r3, [pc, #52]	@ (800edc4 <prvCheckTasksWaitingTermination+0x54>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	3b01      	subs	r3, #1
 800ed94:	4a0b      	ldr	r2, [pc, #44]	@ (800edc4 <prvCheckTasksWaitingTermination+0x54>)
 800ed96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ed98:	4b0b      	ldr	r3, [pc, #44]	@ (800edc8 <prvCheckTasksWaitingTermination+0x58>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	3b01      	subs	r3, #1
 800ed9e:	4a0a      	ldr	r2, [pc, #40]	@ (800edc8 <prvCheckTasksWaitingTermination+0x58>)
 800eda0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eda2:	f000 ffdb 	bl	800fd5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f000 f810 	bl	800edcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800edac:	4b06      	ldr	r3, [pc, #24]	@ (800edc8 <prvCheckTasksWaitingTermination+0x58>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d1e1      	bne.n	800ed78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800edb4:	bf00      	nop
 800edb6:	bf00      	nop
 800edb8:	3708      	adds	r7, #8
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}
 800edbe:	bf00      	nop
 800edc0:	24005d58 	.word	0x24005d58
 800edc4:	24005d84 	.word	0x24005d84
 800edc8:	24005d6c 	.word	0x24005d6c

0800edcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b084      	sub	sp, #16
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	3354      	adds	r3, #84	@ 0x54
 800edd8:	4618      	mov	r0, r3
 800edda:	f00e fc67 	bl	801d6ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d108      	bne.n	800edfa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edec:	4618      	mov	r0, r3
 800edee:	f001 f973 	bl	80100d8 <vPortFree>
				vPortFree( pxTCB );
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f001 f970 	bl	80100d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800edf8:	e019      	b.n	800ee2e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	d103      	bne.n	800ee0c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f001 f967 	bl	80100d8 <vPortFree>
	}
 800ee0a:	e010      	b.n	800ee2e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ee12:	2b02      	cmp	r3, #2
 800ee14:	d00b      	beq.n	800ee2e <prvDeleteTCB+0x62>
	__asm volatile
 800ee16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee1a:	f383 8811 	msr	BASEPRI, r3
 800ee1e:	f3bf 8f6f 	isb	sy
 800ee22:	f3bf 8f4f 	dsb	sy
 800ee26:	60fb      	str	r3, [r7, #12]
}
 800ee28:	bf00      	nop
 800ee2a:	bf00      	nop
 800ee2c:	e7fd      	b.n	800ee2a <prvDeleteTCB+0x5e>
	}
 800ee2e:	bf00      	nop
 800ee30:	3710      	adds	r7, #16
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
	...

0800ee38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b083      	sub	sp, #12
 800ee3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee3e:	4b0c      	ldr	r3, [pc, #48]	@ (800ee70 <prvResetNextTaskUnblockTime+0x38>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d104      	bne.n	800ee52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ee48:	4b0a      	ldr	r3, [pc, #40]	@ (800ee74 <prvResetNextTaskUnblockTime+0x3c>)
 800ee4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ee4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ee50:	e008      	b.n	800ee64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee52:	4b07      	ldr	r3, [pc, #28]	@ (800ee70 <prvResetNextTaskUnblockTime+0x38>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	68db      	ldr	r3, [r3, #12]
 800ee58:	68db      	ldr	r3, [r3, #12]
 800ee5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	685b      	ldr	r3, [r3, #4]
 800ee60:	4a04      	ldr	r2, [pc, #16]	@ (800ee74 <prvResetNextTaskUnblockTime+0x3c>)
 800ee62:	6013      	str	r3, [r2, #0]
}
 800ee64:	bf00      	nop
 800ee66:	370c      	adds	r7, #12
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr
 800ee70:	24005d3c 	.word	0x24005d3c
 800ee74:	24005da4 	.word	0x24005da4

0800ee78 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ee78:	b480      	push	{r7}
 800ee7a:	b083      	sub	sp, #12
 800ee7c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ee7e:	4b05      	ldr	r3, [pc, #20]	@ (800ee94 <xTaskGetCurrentTaskHandle+0x1c>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ee84:	687b      	ldr	r3, [r7, #4]
	}
 800ee86:	4618      	mov	r0, r3
 800ee88:	370c      	adds	r7, #12
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee90:	4770      	bx	lr
 800ee92:	bf00      	nop
 800ee94:	240058b0 	.word	0x240058b0

0800ee98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ee98:	b480      	push	{r7}
 800ee9a:	b083      	sub	sp, #12
 800ee9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ee9e:	4b0b      	ldr	r3, [pc, #44]	@ (800eecc <xTaskGetSchedulerState+0x34>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d102      	bne.n	800eeac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eea6:	2301      	movs	r3, #1
 800eea8:	607b      	str	r3, [r7, #4]
 800eeaa:	e008      	b.n	800eebe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eeac:	4b08      	ldr	r3, [pc, #32]	@ (800eed0 <xTaskGetSchedulerState+0x38>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d102      	bne.n	800eeba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eeb4:	2302      	movs	r3, #2
 800eeb6:	607b      	str	r3, [r7, #4]
 800eeb8:	e001      	b.n	800eebe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eeba:	2300      	movs	r3, #0
 800eebc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eebe:	687b      	ldr	r3, [r7, #4]
	}
 800eec0:	4618      	mov	r0, r3
 800eec2:	370c      	adds	r7, #12
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr
 800eecc:	24005d90 	.word	0x24005d90
 800eed0:	24005dac 	.word	0x24005dac

0800eed4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b084      	sub	sp, #16
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eee0:	2300      	movs	r3, #0
 800eee2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d051      	beq.n	800ef8e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeee:	4b2a      	ldr	r3, [pc, #168]	@ (800ef98 <xTaskPriorityInherit+0xc4>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d241      	bcs.n	800ef7c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	699b      	ldr	r3, [r3, #24]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	db06      	blt.n	800ef0e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef00:	4b25      	ldr	r3, [pc, #148]	@ (800ef98 <xTaskPriorityInherit+0xc4>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef06:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	6959      	ldr	r1, [r3, #20]
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef16:	4613      	mov	r3, r2
 800ef18:	009b      	lsls	r3, r3, #2
 800ef1a:	4413      	add	r3, r2
 800ef1c:	009b      	lsls	r3, r3, #2
 800ef1e:	4a1f      	ldr	r2, [pc, #124]	@ (800ef9c <xTaskPriorityInherit+0xc8>)
 800ef20:	4413      	add	r3, r2
 800ef22:	4299      	cmp	r1, r3
 800ef24:	d122      	bne.n	800ef6c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	3304      	adds	r3, #4
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f7fe f82c 	bl	800cf88 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ef30:	4b19      	ldr	r3, [pc, #100]	@ (800ef98 <xTaskPriorityInherit+0xc4>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef3e:	4b18      	ldr	r3, [pc, #96]	@ (800efa0 <xTaskPriorityInherit+0xcc>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	429a      	cmp	r2, r3
 800ef44:	d903      	bls.n	800ef4e <xTaskPriorityInherit+0x7a>
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef4a:	4a15      	ldr	r2, [pc, #84]	@ (800efa0 <xTaskPriorityInherit+0xcc>)
 800ef4c:	6013      	str	r3, [r2, #0]
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef52:	4613      	mov	r3, r2
 800ef54:	009b      	lsls	r3, r3, #2
 800ef56:	4413      	add	r3, r2
 800ef58:	009b      	lsls	r3, r3, #2
 800ef5a:	4a10      	ldr	r2, [pc, #64]	@ (800ef9c <xTaskPriorityInherit+0xc8>)
 800ef5c:	441a      	add	r2, r3
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	3304      	adds	r3, #4
 800ef62:	4619      	mov	r1, r3
 800ef64:	4610      	mov	r0, r2
 800ef66:	f7fd ffb2 	bl	800cece <vListInsertEnd>
 800ef6a:	e004      	b.n	800ef76 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ef6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ef98 <xTaskPriorityInherit+0xc4>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ef76:	2301      	movs	r3, #1
 800ef78:	60fb      	str	r3, [r7, #12]
 800ef7a:	e008      	b.n	800ef8e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ef80:	4b05      	ldr	r3, [pc, #20]	@ (800ef98 <xTaskPriorityInherit+0xc4>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef86:	429a      	cmp	r2, r3
 800ef88:	d201      	bcs.n	800ef8e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
	}
 800ef90:	4618      	mov	r0, r3
 800ef92:	3710      	adds	r7, #16
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}
 800ef98:	240058b0 	.word	0x240058b0
 800ef9c:	240058b4 	.word	0x240058b4
 800efa0:	24005d8c 	.word	0x24005d8c

0800efa4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b086      	sub	sp, #24
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800efb0:	2300      	movs	r3, #0
 800efb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d058      	beq.n	800f06c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800efba:	4b2f      	ldr	r3, [pc, #188]	@ (800f078 <xTaskPriorityDisinherit+0xd4>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	693a      	ldr	r2, [r7, #16]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d00b      	beq.n	800efdc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800efc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efc8:	f383 8811 	msr	BASEPRI, r3
 800efcc:	f3bf 8f6f 	isb	sy
 800efd0:	f3bf 8f4f 	dsb	sy
 800efd4:	60fb      	str	r3, [r7, #12]
}
 800efd6:	bf00      	nop
 800efd8:	bf00      	nop
 800efda:	e7fd      	b.n	800efd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800efdc:	693b      	ldr	r3, [r7, #16]
 800efde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d10b      	bne.n	800effc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800efe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efe8:	f383 8811 	msr	BASEPRI, r3
 800efec:	f3bf 8f6f 	isb	sy
 800eff0:	f3bf 8f4f 	dsb	sy
 800eff4:	60bb      	str	r3, [r7, #8]
}
 800eff6:	bf00      	nop
 800eff8:	bf00      	nop
 800effa:	e7fd      	b.n	800eff8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f000:	1e5a      	subs	r2, r3, #1
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f00a:	693b      	ldr	r3, [r7, #16]
 800f00c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f00e:	429a      	cmp	r2, r3
 800f010:	d02c      	beq.n	800f06c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f012:	693b      	ldr	r3, [r7, #16]
 800f014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f016:	2b00      	cmp	r3, #0
 800f018:	d128      	bne.n	800f06c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f01a:	693b      	ldr	r3, [r7, #16]
 800f01c:	3304      	adds	r3, #4
 800f01e:	4618      	mov	r0, r3
 800f020:	f7fd ffb2 	bl	800cf88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f024:	693b      	ldr	r3, [r7, #16]
 800f026:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f028:	693b      	ldr	r3, [r7, #16]
 800f02a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f030:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f03c:	4b0f      	ldr	r3, [pc, #60]	@ (800f07c <xTaskPriorityDisinherit+0xd8>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	429a      	cmp	r2, r3
 800f042:	d903      	bls.n	800f04c <xTaskPriorityDisinherit+0xa8>
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f048:	4a0c      	ldr	r2, [pc, #48]	@ (800f07c <xTaskPriorityDisinherit+0xd8>)
 800f04a:	6013      	str	r3, [r2, #0]
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f050:	4613      	mov	r3, r2
 800f052:	009b      	lsls	r3, r3, #2
 800f054:	4413      	add	r3, r2
 800f056:	009b      	lsls	r3, r3, #2
 800f058:	4a09      	ldr	r2, [pc, #36]	@ (800f080 <xTaskPriorityDisinherit+0xdc>)
 800f05a:	441a      	add	r2, r3
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	3304      	adds	r3, #4
 800f060:	4619      	mov	r1, r3
 800f062:	4610      	mov	r0, r2
 800f064:	f7fd ff33 	bl	800cece <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f068:	2301      	movs	r3, #1
 800f06a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f06c:	697b      	ldr	r3, [r7, #20]
	}
 800f06e:	4618      	mov	r0, r3
 800f070:	3718      	adds	r7, #24
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}
 800f076:	bf00      	nop
 800f078:	240058b0 	.word	0x240058b0
 800f07c:	24005d8c 	.word	0x24005d8c
 800f080:	240058b4 	.word	0x240058b4

0800f084 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f084:	b580      	push	{r7, lr}
 800f086:	b088      	sub	sp, #32
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f092:	2301      	movs	r3, #1
 800f094:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d06c      	beq.n	800f176 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f09c:	69bb      	ldr	r3, [r7, #24]
 800f09e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d10b      	bne.n	800f0bc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800f0a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0a8:	f383 8811 	msr	BASEPRI, r3
 800f0ac:	f3bf 8f6f 	isb	sy
 800f0b0:	f3bf 8f4f 	dsb	sy
 800f0b4:	60fb      	str	r3, [r7, #12]
}
 800f0b6:	bf00      	nop
 800f0b8:	bf00      	nop
 800f0ba:	e7fd      	b.n	800f0b8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f0bc:	69bb      	ldr	r3, [r7, #24]
 800f0be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f0c0:	683a      	ldr	r2, [r7, #0]
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d902      	bls.n	800f0cc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	61fb      	str	r3, [r7, #28]
 800f0ca:	e002      	b.n	800f0d2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f0cc:	69bb      	ldr	r3, [r7, #24]
 800f0ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f0d0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f0d2:	69bb      	ldr	r3, [r7, #24]
 800f0d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0d6:	69fa      	ldr	r2, [r7, #28]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d04c      	beq.n	800f176 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f0dc:	69bb      	ldr	r3, [r7, #24]
 800f0de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f0e0:	697a      	ldr	r2, [r7, #20]
 800f0e2:	429a      	cmp	r2, r3
 800f0e4:	d147      	bne.n	800f176 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f0e6:	4b26      	ldr	r3, [pc, #152]	@ (800f180 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	69ba      	ldr	r2, [r7, #24]
 800f0ec:	429a      	cmp	r2, r3
 800f0ee:	d10b      	bne.n	800f108 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800f0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0f4:	f383 8811 	msr	BASEPRI, r3
 800f0f8:	f3bf 8f6f 	isb	sy
 800f0fc:	f3bf 8f4f 	dsb	sy
 800f100:	60bb      	str	r3, [r7, #8]
}
 800f102:	bf00      	nop
 800f104:	bf00      	nop
 800f106:	e7fd      	b.n	800f104 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f108:	69bb      	ldr	r3, [r7, #24]
 800f10a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f10c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f10e:	69bb      	ldr	r3, [r7, #24]
 800f110:	69fa      	ldr	r2, [r7, #28]
 800f112:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f114:	69bb      	ldr	r3, [r7, #24]
 800f116:	699b      	ldr	r3, [r3, #24]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	db04      	blt.n	800f126 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f11c:	69fb      	ldr	r3, [r7, #28]
 800f11e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f122:	69bb      	ldr	r3, [r7, #24]
 800f124:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f126:	69bb      	ldr	r3, [r7, #24]
 800f128:	6959      	ldr	r1, [r3, #20]
 800f12a:	693a      	ldr	r2, [r7, #16]
 800f12c:	4613      	mov	r3, r2
 800f12e:	009b      	lsls	r3, r3, #2
 800f130:	4413      	add	r3, r2
 800f132:	009b      	lsls	r3, r3, #2
 800f134:	4a13      	ldr	r2, [pc, #76]	@ (800f184 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f136:	4413      	add	r3, r2
 800f138:	4299      	cmp	r1, r3
 800f13a:	d11c      	bne.n	800f176 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f13c:	69bb      	ldr	r3, [r7, #24]
 800f13e:	3304      	adds	r3, #4
 800f140:	4618      	mov	r0, r3
 800f142:	f7fd ff21 	bl	800cf88 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f146:	69bb      	ldr	r3, [r7, #24]
 800f148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f14a:	4b0f      	ldr	r3, [pc, #60]	@ (800f188 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	429a      	cmp	r2, r3
 800f150:	d903      	bls.n	800f15a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800f152:	69bb      	ldr	r3, [r7, #24]
 800f154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f156:	4a0c      	ldr	r2, [pc, #48]	@ (800f188 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f158:	6013      	str	r3, [r2, #0]
 800f15a:	69bb      	ldr	r3, [r7, #24]
 800f15c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f15e:	4613      	mov	r3, r2
 800f160:	009b      	lsls	r3, r3, #2
 800f162:	4413      	add	r3, r2
 800f164:	009b      	lsls	r3, r3, #2
 800f166:	4a07      	ldr	r2, [pc, #28]	@ (800f184 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f168:	441a      	add	r2, r3
 800f16a:	69bb      	ldr	r3, [r7, #24]
 800f16c:	3304      	adds	r3, #4
 800f16e:	4619      	mov	r1, r3
 800f170:	4610      	mov	r0, r2
 800f172:	f7fd feac 	bl	800cece <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f176:	bf00      	nop
 800f178:	3720      	adds	r7, #32
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}
 800f17e:	bf00      	nop
 800f180:	240058b0 	.word	0x240058b0
 800f184:	240058b4 	.word	0x240058b4
 800f188:	24005d8c 	.word	0x24005d8c

0800f18c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f18c:	b480      	push	{r7}
 800f18e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f190:	4b07      	ldr	r3, [pc, #28]	@ (800f1b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d004      	beq.n	800f1a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f198:	4b05      	ldr	r3, [pc, #20]	@ (800f1b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f19e:	3201      	adds	r2, #1
 800f1a0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800f1a2:	4b03      	ldr	r3, [pc, #12]	@ (800f1b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
	}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ae:	4770      	bx	lr
 800f1b0:	240058b0 	.word	0x240058b0

0800f1b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b084      	sub	sp, #16
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f1be:	4b21      	ldr	r3, [pc, #132]	@ (800f244 <prvAddCurrentTaskToDelayedList+0x90>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f1c4:	4b20      	ldr	r3, [pc, #128]	@ (800f248 <prvAddCurrentTaskToDelayedList+0x94>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	3304      	adds	r3, #4
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7fd fedc 	bl	800cf88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1d6:	d10a      	bne.n	800f1ee <prvAddCurrentTaskToDelayedList+0x3a>
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d007      	beq.n	800f1ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1de:	4b1a      	ldr	r3, [pc, #104]	@ (800f248 <prvAddCurrentTaskToDelayedList+0x94>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	3304      	adds	r3, #4
 800f1e4:	4619      	mov	r1, r3
 800f1e6:	4819      	ldr	r0, [pc, #100]	@ (800f24c <prvAddCurrentTaskToDelayedList+0x98>)
 800f1e8:	f7fd fe71 	bl	800cece <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f1ec:	e026      	b.n	800f23c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f1ee:	68fa      	ldr	r2, [r7, #12]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	4413      	add	r3, r2
 800f1f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f1f6:	4b14      	ldr	r3, [pc, #80]	@ (800f248 <prvAddCurrentTaskToDelayedList+0x94>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	68ba      	ldr	r2, [r7, #8]
 800f1fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f1fe:	68ba      	ldr	r2, [r7, #8]
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	429a      	cmp	r2, r3
 800f204:	d209      	bcs.n	800f21a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f206:	4b12      	ldr	r3, [pc, #72]	@ (800f250 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	4b0f      	ldr	r3, [pc, #60]	@ (800f248 <prvAddCurrentTaskToDelayedList+0x94>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	3304      	adds	r3, #4
 800f210:	4619      	mov	r1, r3
 800f212:	4610      	mov	r0, r2
 800f214:	f7fd fe7f 	bl	800cf16 <vListInsert>
}
 800f218:	e010      	b.n	800f23c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f21a:	4b0e      	ldr	r3, [pc, #56]	@ (800f254 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f21c:	681a      	ldr	r2, [r3, #0]
 800f21e:	4b0a      	ldr	r3, [pc, #40]	@ (800f248 <prvAddCurrentTaskToDelayedList+0x94>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	3304      	adds	r3, #4
 800f224:	4619      	mov	r1, r3
 800f226:	4610      	mov	r0, r2
 800f228:	f7fd fe75 	bl	800cf16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f22c:	4b0a      	ldr	r3, [pc, #40]	@ (800f258 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	68ba      	ldr	r2, [r7, #8]
 800f232:	429a      	cmp	r2, r3
 800f234:	d202      	bcs.n	800f23c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f236:	4a08      	ldr	r2, [pc, #32]	@ (800f258 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	6013      	str	r3, [r2, #0]
}
 800f23c:	bf00      	nop
 800f23e:	3710      	adds	r7, #16
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}
 800f244:	24005d88 	.word	0x24005d88
 800f248:	240058b0 	.word	0x240058b0
 800f24c:	24005d70 	.word	0x24005d70
 800f250:	24005d40 	.word	0x24005d40
 800f254:	24005d3c 	.word	0x24005d3c
 800f258:	24005da4 	.word	0x24005da4

0800f25c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b08a      	sub	sp, #40	@ 0x28
 800f260:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f262:	2300      	movs	r3, #0
 800f264:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f266:	f000 fbb1 	bl	800f9cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f26a:	4b1d      	ldr	r3, [pc, #116]	@ (800f2e0 <xTimerCreateTimerTask+0x84>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d021      	beq.n	800f2b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f272:	2300      	movs	r3, #0
 800f274:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f276:	2300      	movs	r3, #0
 800f278:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f27a:	1d3a      	adds	r2, r7, #4
 800f27c:	f107 0108 	add.w	r1, r7, #8
 800f280:	f107 030c 	add.w	r3, r7, #12
 800f284:	4618      	mov	r0, r3
 800f286:	f7fd fddb 	bl	800ce40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f28a:	6879      	ldr	r1, [r7, #4]
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	68fa      	ldr	r2, [r7, #12]
 800f290:	9202      	str	r2, [sp, #8]
 800f292:	9301      	str	r3, [sp, #4]
 800f294:	2302      	movs	r3, #2
 800f296:	9300      	str	r3, [sp, #0]
 800f298:	2300      	movs	r3, #0
 800f29a:	460a      	mov	r2, r1
 800f29c:	4911      	ldr	r1, [pc, #68]	@ (800f2e4 <xTimerCreateTimerTask+0x88>)
 800f29e:	4812      	ldr	r0, [pc, #72]	@ (800f2e8 <xTimerCreateTimerTask+0x8c>)
 800f2a0:	f7fe ff80 	bl	800e1a4 <xTaskCreateStatic>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	4a11      	ldr	r2, [pc, #68]	@ (800f2ec <xTimerCreateTimerTask+0x90>)
 800f2a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f2aa:	4b10      	ldr	r3, [pc, #64]	@ (800f2ec <xTimerCreateTimerTask+0x90>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d001      	beq.n	800f2b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d10b      	bne.n	800f2d4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2c0:	f383 8811 	msr	BASEPRI, r3
 800f2c4:	f3bf 8f6f 	isb	sy
 800f2c8:	f3bf 8f4f 	dsb	sy
 800f2cc:	613b      	str	r3, [r7, #16]
}
 800f2ce:	bf00      	nop
 800f2d0:	bf00      	nop
 800f2d2:	e7fd      	b.n	800f2d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f2d4:	697b      	ldr	r3, [r7, #20]
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3718      	adds	r7, #24
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}
 800f2de:	bf00      	nop
 800f2e0:	24005de0 	.word	0x24005de0
 800f2e4:	0801f5e8 	.word	0x0801f5e8
 800f2e8:	0800f565 	.word	0x0800f565
 800f2ec:	24005de4 	.word	0x24005de4

0800f2f0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b088      	sub	sp, #32
 800f2f4:	af02      	add	r7, sp, #8
 800f2f6:	60f8      	str	r0, [r7, #12]
 800f2f8:	60b9      	str	r1, [r7, #8]
 800f2fa:	607a      	str	r2, [r7, #4]
 800f2fc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f2fe:	202c      	movs	r0, #44	@ 0x2c
 800f300:	f000 fe1c 	bl	800ff3c <pvPortMalloc>
 800f304:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d00d      	beq.n	800f328 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	2200      	movs	r2, #0
 800f310:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f314:	697b      	ldr	r3, [r7, #20]
 800f316:	9301      	str	r3, [sp, #4]
 800f318:	6a3b      	ldr	r3, [r7, #32]
 800f31a:	9300      	str	r3, [sp, #0]
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	687a      	ldr	r2, [r7, #4]
 800f320:	68b9      	ldr	r1, [r7, #8]
 800f322:	68f8      	ldr	r0, [r7, #12]
 800f324:	f000 f845 	bl	800f3b2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f328:	697b      	ldr	r3, [r7, #20]
	}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3718      	adds	r7, #24
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}

0800f332 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800f332:	b580      	push	{r7, lr}
 800f334:	b08a      	sub	sp, #40	@ 0x28
 800f336:	af02      	add	r7, sp, #8
 800f338:	60f8      	str	r0, [r7, #12]
 800f33a:	60b9      	str	r1, [r7, #8]
 800f33c:	607a      	str	r2, [r7, #4]
 800f33e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800f340:	232c      	movs	r3, #44	@ 0x2c
 800f342:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	2b2c      	cmp	r3, #44	@ 0x2c
 800f348:	d00b      	beq.n	800f362 <xTimerCreateStatic+0x30>
	__asm volatile
 800f34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f34e:	f383 8811 	msr	BASEPRI, r3
 800f352:	f3bf 8f6f 	isb	sy
 800f356:	f3bf 8f4f 	dsb	sy
 800f35a:	61bb      	str	r3, [r7, #24]
}
 800f35c:	bf00      	nop
 800f35e:	bf00      	nop
 800f360:	e7fd      	b.n	800f35e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f362:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800f364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f366:	2b00      	cmp	r3, #0
 800f368:	d10b      	bne.n	800f382 <xTimerCreateStatic+0x50>
	__asm volatile
 800f36a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f36e:	f383 8811 	msr	BASEPRI, r3
 800f372:	f3bf 8f6f 	isb	sy
 800f376:	f3bf 8f4f 	dsb	sy
 800f37a:	617b      	str	r3, [r7, #20]
}
 800f37c:	bf00      	nop
 800f37e:	bf00      	nop
 800f380:	e7fd      	b.n	800f37e <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800f382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f384:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800f386:	69fb      	ldr	r3, [r7, #28]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d00d      	beq.n	800f3a8 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800f38c:	69fb      	ldr	r3, [r7, #28]
 800f38e:	2202      	movs	r2, #2
 800f390:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f394:	69fb      	ldr	r3, [r7, #28]
 800f396:	9301      	str	r3, [sp, #4]
 800f398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f39a:	9300      	str	r3, [sp, #0]
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	687a      	ldr	r2, [r7, #4]
 800f3a0:	68b9      	ldr	r1, [r7, #8]
 800f3a2:	68f8      	ldr	r0, [r7, #12]
 800f3a4:	f000 f805 	bl	800f3b2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f3a8:	69fb      	ldr	r3, [r7, #28]
	}
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	3720      	adds	r7, #32
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}

0800f3b2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f3b2:	b580      	push	{r7, lr}
 800f3b4:	b086      	sub	sp, #24
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	60f8      	str	r0, [r7, #12]
 800f3ba:	60b9      	str	r1, [r7, #8]
 800f3bc:	607a      	str	r2, [r7, #4]
 800f3be:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d10b      	bne.n	800f3de <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800f3c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3ca:	f383 8811 	msr	BASEPRI, r3
 800f3ce:	f3bf 8f6f 	isb	sy
 800f3d2:	f3bf 8f4f 	dsb	sy
 800f3d6:	617b      	str	r3, [r7, #20]
}
 800f3d8:	bf00      	nop
 800f3da:	bf00      	nop
 800f3dc:	e7fd      	b.n	800f3da <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d01e      	beq.n	800f422 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f3e4:	f000 faf2 	bl	800f9cc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ea:	68fa      	ldr	r2, [r7, #12]
 800f3ec:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3f0:	68ba      	ldr	r2, [r7, #8]
 800f3f2:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800f3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3f6:	683a      	ldr	r2, [r7, #0]
 800f3f8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3fc:	6a3a      	ldr	r2, [r7, #32]
 800f3fe:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f402:	3304      	adds	r3, #4
 800f404:	4618      	mov	r0, r3
 800f406:	f7fd fd55 	bl	800ceb4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d008      	beq.n	800f422 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f412:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f416:	f043 0304 	orr.w	r3, r3, #4
 800f41a:	b2da      	uxtb	r2, r3
 800f41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f41e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f422:	bf00      	nop
 800f424:	3718      	adds	r7, #24
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}
	...

0800f42c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b08a      	sub	sp, #40	@ 0x28
 800f430:	af00      	add	r7, sp, #0
 800f432:	60f8      	str	r0, [r7, #12]
 800f434:	60b9      	str	r1, [r7, #8]
 800f436:	607a      	str	r2, [r7, #4]
 800f438:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f43a:	2300      	movs	r3, #0
 800f43c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d10b      	bne.n	800f45c <xTimerGenericCommand+0x30>
	__asm volatile
 800f444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f448:	f383 8811 	msr	BASEPRI, r3
 800f44c:	f3bf 8f6f 	isb	sy
 800f450:	f3bf 8f4f 	dsb	sy
 800f454:	623b      	str	r3, [r7, #32]
}
 800f456:	bf00      	nop
 800f458:	bf00      	nop
 800f45a:	e7fd      	b.n	800f458 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f45c:	4b19      	ldr	r3, [pc, #100]	@ (800f4c4 <xTimerGenericCommand+0x98>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d02a      	beq.n	800f4ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	2b05      	cmp	r3, #5
 800f474:	dc18      	bgt.n	800f4a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f476:	f7ff fd0f 	bl	800ee98 <xTaskGetSchedulerState>
 800f47a:	4603      	mov	r3, r0
 800f47c:	2b02      	cmp	r3, #2
 800f47e:	d109      	bne.n	800f494 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f480:	4b10      	ldr	r3, [pc, #64]	@ (800f4c4 <xTimerGenericCommand+0x98>)
 800f482:	6818      	ldr	r0, [r3, #0]
 800f484:	f107 0110 	add.w	r1, r7, #16
 800f488:	2300      	movs	r3, #0
 800f48a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f48c:	f7fe f812 	bl	800d4b4 <xQueueGenericSend>
 800f490:	6278      	str	r0, [r7, #36]	@ 0x24
 800f492:	e012      	b.n	800f4ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f494:	4b0b      	ldr	r3, [pc, #44]	@ (800f4c4 <xTimerGenericCommand+0x98>)
 800f496:	6818      	ldr	r0, [r3, #0]
 800f498:	f107 0110 	add.w	r1, r7, #16
 800f49c:	2300      	movs	r3, #0
 800f49e:	2200      	movs	r2, #0
 800f4a0:	f7fe f808 	bl	800d4b4 <xQueueGenericSend>
 800f4a4:	6278      	str	r0, [r7, #36]	@ 0x24
 800f4a6:	e008      	b.n	800f4ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f4a8:	4b06      	ldr	r3, [pc, #24]	@ (800f4c4 <xTimerGenericCommand+0x98>)
 800f4aa:	6818      	ldr	r0, [r3, #0]
 800f4ac:	f107 0110 	add.w	r1, r7, #16
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	683a      	ldr	r2, [r7, #0]
 800f4b4:	f7fe f900 	bl	800d6b8 <xQueueGenericSendFromISR>
 800f4b8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	3728      	adds	r7, #40	@ 0x28
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	24005de0 	.word	0x24005de0

0800f4c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b088      	sub	sp, #32
 800f4cc:	af02      	add	r7, sp, #8
 800f4ce:	6078      	str	r0, [r7, #4]
 800f4d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4d2:	4b23      	ldr	r3, [pc, #140]	@ (800f560 <prvProcessExpiredTimer+0x98>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	68db      	ldr	r3, [r3, #12]
 800f4d8:	68db      	ldr	r3, [r3, #12]
 800f4da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	3304      	adds	r3, #4
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7fd fd51 	bl	800cf88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f4ec:	f003 0304 	and.w	r3, r3, #4
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d023      	beq.n	800f53c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	699a      	ldr	r2, [r3, #24]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	18d1      	adds	r1, r2, r3
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	683a      	ldr	r2, [r7, #0]
 800f500:	6978      	ldr	r0, [r7, #20]
 800f502:	f000 f8d5 	bl	800f6b0 <prvInsertTimerInActiveList>
 800f506:	4603      	mov	r3, r0
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d020      	beq.n	800f54e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f50c:	2300      	movs	r3, #0
 800f50e:	9300      	str	r3, [sp, #0]
 800f510:	2300      	movs	r3, #0
 800f512:	687a      	ldr	r2, [r7, #4]
 800f514:	2100      	movs	r1, #0
 800f516:	6978      	ldr	r0, [r7, #20]
 800f518:	f7ff ff88 	bl	800f42c <xTimerGenericCommand>
 800f51c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f51e:	693b      	ldr	r3, [r7, #16]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d114      	bne.n	800f54e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f528:	f383 8811 	msr	BASEPRI, r3
 800f52c:	f3bf 8f6f 	isb	sy
 800f530:	f3bf 8f4f 	dsb	sy
 800f534:	60fb      	str	r3, [r7, #12]
}
 800f536:	bf00      	nop
 800f538:	bf00      	nop
 800f53a:	e7fd      	b.n	800f538 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f542:	f023 0301 	bic.w	r3, r3, #1
 800f546:	b2da      	uxtb	r2, r3
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	6a1b      	ldr	r3, [r3, #32]
 800f552:	6978      	ldr	r0, [r7, #20]
 800f554:	4798      	blx	r3
}
 800f556:	bf00      	nop
 800f558:	3718      	adds	r7, #24
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	24005dd8 	.word	0x24005dd8

0800f564 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b084      	sub	sp, #16
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f56c:	f107 0308 	add.w	r3, r7, #8
 800f570:	4618      	mov	r0, r3
 800f572:	f000 f859 	bl	800f628 <prvGetNextExpireTime>
 800f576:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	4619      	mov	r1, r3
 800f57c:	68f8      	ldr	r0, [r7, #12]
 800f57e:	f000 f805 	bl	800f58c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f582:	f000 f8d7 	bl	800f734 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f586:	bf00      	nop
 800f588:	e7f0      	b.n	800f56c <prvTimerTask+0x8>
	...

0800f58c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b084      	sub	sp, #16
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
 800f594:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f596:	f7ff f869 	bl	800e66c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f59a:	f107 0308 	add.w	r3, r7, #8
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f000 f866 	bl	800f670 <prvSampleTimeNow>
 800f5a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d130      	bne.n	800f60e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d10a      	bne.n	800f5c8 <prvProcessTimerOrBlockTask+0x3c>
 800f5b2:	687a      	ldr	r2, [r7, #4]
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d806      	bhi.n	800f5c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f5ba:	f7ff f865 	bl	800e688 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f5be:	68f9      	ldr	r1, [r7, #12]
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f7ff ff81 	bl	800f4c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f5c6:	e024      	b.n	800f612 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d008      	beq.n	800f5e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f5ce:	4b13      	ldr	r3, [pc, #76]	@ (800f61c <prvProcessTimerOrBlockTask+0x90>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d101      	bne.n	800f5dc <prvProcessTimerOrBlockTask+0x50>
 800f5d8:	2301      	movs	r3, #1
 800f5da:	e000      	b.n	800f5de <prvProcessTimerOrBlockTask+0x52>
 800f5dc:	2300      	movs	r3, #0
 800f5de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f5e0:	4b0f      	ldr	r3, [pc, #60]	@ (800f620 <prvProcessTimerOrBlockTask+0x94>)
 800f5e2:	6818      	ldr	r0, [r3, #0]
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	1ad3      	subs	r3, r2, r3
 800f5ea:	683a      	ldr	r2, [r7, #0]
 800f5ec:	4619      	mov	r1, r3
 800f5ee:	f7fe fda5 	bl	800e13c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f5f2:	f7ff f849 	bl	800e688 <xTaskResumeAll>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d10a      	bne.n	800f612 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f5fc:	4b09      	ldr	r3, [pc, #36]	@ (800f624 <prvProcessTimerOrBlockTask+0x98>)
 800f5fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f602:	601a      	str	r2, [r3, #0]
 800f604:	f3bf 8f4f 	dsb	sy
 800f608:	f3bf 8f6f 	isb	sy
}
 800f60c:	e001      	b.n	800f612 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f60e:	f7ff f83b 	bl	800e688 <xTaskResumeAll>
}
 800f612:	bf00      	nop
 800f614:	3710      	adds	r7, #16
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	24005ddc 	.word	0x24005ddc
 800f620:	24005de0 	.word	0x24005de0
 800f624:	e000ed04 	.word	0xe000ed04

0800f628 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f628:	b480      	push	{r7}
 800f62a:	b085      	sub	sp, #20
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f630:	4b0e      	ldr	r3, [pc, #56]	@ (800f66c <prvGetNextExpireTime+0x44>)
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d101      	bne.n	800f63e <prvGetNextExpireTime+0x16>
 800f63a:	2201      	movs	r2, #1
 800f63c:	e000      	b.n	800f640 <prvGetNextExpireTime+0x18>
 800f63e:	2200      	movs	r2, #0
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d105      	bne.n	800f658 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f64c:	4b07      	ldr	r3, [pc, #28]	@ (800f66c <prvGetNextExpireTime+0x44>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	68db      	ldr	r3, [r3, #12]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	60fb      	str	r3, [r7, #12]
 800f656:	e001      	b.n	800f65c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f658:	2300      	movs	r3, #0
 800f65a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f65c:	68fb      	ldr	r3, [r7, #12]
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3714      	adds	r7, #20
 800f662:	46bd      	mov	sp, r7
 800f664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f668:	4770      	bx	lr
 800f66a:	bf00      	nop
 800f66c:	24005dd8 	.word	0x24005dd8

0800f670 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b084      	sub	sp, #16
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f678:	f7ff f8a4 	bl	800e7c4 <xTaskGetTickCount>
 800f67c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f67e:	4b0b      	ldr	r3, [pc, #44]	@ (800f6ac <prvSampleTimeNow+0x3c>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	68fa      	ldr	r2, [r7, #12]
 800f684:	429a      	cmp	r2, r3
 800f686:	d205      	bcs.n	800f694 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f688:	f000 f93a 	bl	800f900 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2201      	movs	r2, #1
 800f690:	601a      	str	r2, [r3, #0]
 800f692:	e002      	b.n	800f69a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2200      	movs	r2, #0
 800f698:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f69a:	4a04      	ldr	r2, [pc, #16]	@ (800f6ac <prvSampleTimeNow+0x3c>)
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	3710      	adds	r7, #16
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}
 800f6aa:	bf00      	nop
 800f6ac:	24005de8 	.word	0x24005de8

0800f6b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b086      	sub	sp, #24
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	60f8      	str	r0, [r7, #12]
 800f6b8:	60b9      	str	r1, [r7, #8]
 800f6ba:	607a      	str	r2, [r7, #4]
 800f6bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	68ba      	ldr	r2, [r7, #8]
 800f6c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	68fa      	ldr	r2, [r7, #12]
 800f6cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f6ce:	68ba      	ldr	r2, [r7, #8]
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d812      	bhi.n	800f6fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6d6:	687a      	ldr	r2, [r7, #4]
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	1ad2      	subs	r2, r2, r3
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	699b      	ldr	r3, [r3, #24]
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	d302      	bcc.n	800f6ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	617b      	str	r3, [r7, #20]
 800f6e8:	e01b      	b.n	800f722 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f6ea:	4b10      	ldr	r3, [pc, #64]	@ (800f72c <prvInsertTimerInActiveList+0x7c>)
 800f6ec:	681a      	ldr	r2, [r3, #0]
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	3304      	adds	r3, #4
 800f6f2:	4619      	mov	r1, r3
 800f6f4:	4610      	mov	r0, r2
 800f6f6:	f7fd fc0e 	bl	800cf16 <vListInsert>
 800f6fa:	e012      	b.n	800f722 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f6fc:	687a      	ldr	r2, [r7, #4]
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	429a      	cmp	r2, r3
 800f702:	d206      	bcs.n	800f712 <prvInsertTimerInActiveList+0x62>
 800f704:	68ba      	ldr	r2, [r7, #8]
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	429a      	cmp	r2, r3
 800f70a:	d302      	bcc.n	800f712 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f70c:	2301      	movs	r3, #1
 800f70e:	617b      	str	r3, [r7, #20]
 800f710:	e007      	b.n	800f722 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f712:	4b07      	ldr	r3, [pc, #28]	@ (800f730 <prvInsertTimerInActiveList+0x80>)
 800f714:	681a      	ldr	r2, [r3, #0]
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	3304      	adds	r3, #4
 800f71a:	4619      	mov	r1, r3
 800f71c:	4610      	mov	r0, r2
 800f71e:	f7fd fbfa 	bl	800cf16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f722:	697b      	ldr	r3, [r7, #20]
}
 800f724:	4618      	mov	r0, r3
 800f726:	3718      	adds	r7, #24
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}
 800f72c:	24005ddc 	.word	0x24005ddc
 800f730:	24005dd8 	.word	0x24005dd8

0800f734 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b08e      	sub	sp, #56	@ 0x38
 800f738:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f73a:	e0ce      	b.n	800f8da <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	da19      	bge.n	800f776 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f742:	1d3b      	adds	r3, r7, #4
 800f744:	3304      	adds	r3, #4
 800f746:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d10b      	bne.n	800f766 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f752:	f383 8811 	msr	BASEPRI, r3
 800f756:	f3bf 8f6f 	isb	sy
 800f75a:	f3bf 8f4f 	dsb	sy
 800f75e:	61fb      	str	r3, [r7, #28]
}
 800f760:	bf00      	nop
 800f762:	bf00      	nop
 800f764:	e7fd      	b.n	800f762 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f76c:	6850      	ldr	r0, [r2, #4]
 800f76e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f770:	6892      	ldr	r2, [r2, #8]
 800f772:	4611      	mov	r1, r2
 800f774:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	f2c0 80ae 	blt.w	800f8da <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f784:	695b      	ldr	r3, [r3, #20]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d004      	beq.n	800f794 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f78a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f78c:	3304      	adds	r3, #4
 800f78e:	4618      	mov	r0, r3
 800f790:	f7fd fbfa 	bl	800cf88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f794:	463b      	mov	r3, r7
 800f796:	4618      	mov	r0, r3
 800f798:	f7ff ff6a 	bl	800f670 <prvSampleTimeNow>
 800f79c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2b09      	cmp	r3, #9
 800f7a2:	f200 8097 	bhi.w	800f8d4 <prvProcessReceivedCommands+0x1a0>
 800f7a6:	a201      	add	r2, pc, #4	@ (adr r2, 800f7ac <prvProcessReceivedCommands+0x78>)
 800f7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7ac:	0800f7d5 	.word	0x0800f7d5
 800f7b0:	0800f7d5 	.word	0x0800f7d5
 800f7b4:	0800f7d5 	.word	0x0800f7d5
 800f7b8:	0800f84b 	.word	0x0800f84b
 800f7bc:	0800f85f 	.word	0x0800f85f
 800f7c0:	0800f8ab 	.word	0x0800f8ab
 800f7c4:	0800f7d5 	.word	0x0800f7d5
 800f7c8:	0800f7d5 	.word	0x0800f7d5
 800f7cc:	0800f84b 	.word	0x0800f84b
 800f7d0:	0800f85f 	.word	0x0800f85f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f7da:	f043 0301 	orr.w	r3, r3, #1
 800f7de:	b2da      	uxtb	r2, r3
 800f7e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f7e6:	68ba      	ldr	r2, [r7, #8]
 800f7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7ea:	699b      	ldr	r3, [r3, #24]
 800f7ec:	18d1      	adds	r1, r2, r3
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f7f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f7f4:	f7ff ff5c 	bl	800f6b0 <prvInsertTimerInActiveList>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d06c      	beq.n	800f8d8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f800:	6a1b      	ldr	r3, [r3, #32]
 800f802:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f804:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f808:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f80c:	f003 0304 	and.w	r3, r3, #4
 800f810:	2b00      	cmp	r3, #0
 800f812:	d061      	beq.n	800f8d8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f814:	68ba      	ldr	r2, [r7, #8]
 800f816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f818:	699b      	ldr	r3, [r3, #24]
 800f81a:	441a      	add	r2, r3
 800f81c:	2300      	movs	r3, #0
 800f81e:	9300      	str	r3, [sp, #0]
 800f820:	2300      	movs	r3, #0
 800f822:	2100      	movs	r1, #0
 800f824:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f826:	f7ff fe01 	bl	800f42c <xTimerGenericCommand>
 800f82a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f82c:	6a3b      	ldr	r3, [r7, #32]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d152      	bne.n	800f8d8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f836:	f383 8811 	msr	BASEPRI, r3
 800f83a:	f3bf 8f6f 	isb	sy
 800f83e:	f3bf 8f4f 	dsb	sy
 800f842:	61bb      	str	r3, [r7, #24]
}
 800f844:	bf00      	nop
 800f846:	bf00      	nop
 800f848:	e7fd      	b.n	800f846 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f84a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f84c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f850:	f023 0301 	bic.w	r3, r3, #1
 800f854:	b2da      	uxtb	r2, r3
 800f856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f858:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f85c:	e03d      	b.n	800f8da <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f85e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f860:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f864:	f043 0301 	orr.w	r3, r3, #1
 800f868:	b2da      	uxtb	r2, r3
 800f86a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f86c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f870:	68ba      	ldr	r2, [r7, #8]
 800f872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f874:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f878:	699b      	ldr	r3, [r3, #24]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d10b      	bne.n	800f896 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f882:	f383 8811 	msr	BASEPRI, r3
 800f886:	f3bf 8f6f 	isb	sy
 800f88a:	f3bf 8f4f 	dsb	sy
 800f88e:	617b      	str	r3, [r7, #20]
}
 800f890:	bf00      	nop
 800f892:	bf00      	nop
 800f894:	e7fd      	b.n	800f892 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f898:	699a      	ldr	r2, [r3, #24]
 800f89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f89c:	18d1      	adds	r1, r2, r3
 800f89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8a4:	f7ff ff04 	bl	800f6b0 <prvInsertTimerInActiveList>
					break;
 800f8a8:	e017      	b.n	800f8da <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8b0:	f003 0302 	and.w	r3, r3, #2
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d103      	bne.n	800f8c0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f8b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8ba:	f000 fc0d 	bl	80100d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f8be:	e00c      	b.n	800f8da <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8c6:	f023 0301 	bic.w	r3, r3, #1
 800f8ca:	b2da      	uxtb	r2, r3
 800f8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f8d2:	e002      	b.n	800f8da <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f8d4:	bf00      	nop
 800f8d6:	e000      	b.n	800f8da <prvProcessReceivedCommands+0x1a6>
					break;
 800f8d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f8da:	4b08      	ldr	r3, [pc, #32]	@ (800f8fc <prvProcessReceivedCommands+0x1c8>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	1d39      	adds	r1, r7, #4
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7fe f816 	bl	800d914 <xQueueReceive>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	f47f af26 	bne.w	800f73c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f8f0:	bf00      	nop
 800f8f2:	bf00      	nop
 800f8f4:	3730      	adds	r7, #48	@ 0x30
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}
 800f8fa:	bf00      	nop
 800f8fc:	24005de0 	.word	0x24005de0

0800f900 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b088      	sub	sp, #32
 800f904:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f906:	e049      	b.n	800f99c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f908:	4b2e      	ldr	r3, [pc, #184]	@ (800f9c4 <prvSwitchTimerLists+0xc4>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	68db      	ldr	r3, [r3, #12]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f912:	4b2c      	ldr	r3, [pc, #176]	@ (800f9c4 <prvSwitchTimerLists+0xc4>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	68db      	ldr	r3, [r3, #12]
 800f918:	68db      	ldr	r3, [r3, #12]
 800f91a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	3304      	adds	r3, #4
 800f920:	4618      	mov	r0, r3
 800f922:	f7fd fb31 	bl	800cf88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	6a1b      	ldr	r3, [r3, #32]
 800f92a:	68f8      	ldr	r0, [r7, #12]
 800f92c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f934:	f003 0304 	and.w	r3, r3, #4
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d02f      	beq.n	800f99c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	699b      	ldr	r3, [r3, #24]
 800f940:	693a      	ldr	r2, [r7, #16]
 800f942:	4413      	add	r3, r2
 800f944:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f946:	68ba      	ldr	r2, [r7, #8]
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	429a      	cmp	r2, r3
 800f94c:	d90e      	bls.n	800f96c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	68ba      	ldr	r2, [r7, #8]
 800f952:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	68fa      	ldr	r2, [r7, #12]
 800f958:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f95a:	4b1a      	ldr	r3, [pc, #104]	@ (800f9c4 <prvSwitchTimerLists+0xc4>)
 800f95c:	681a      	ldr	r2, [r3, #0]
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	3304      	adds	r3, #4
 800f962:	4619      	mov	r1, r3
 800f964:	4610      	mov	r0, r2
 800f966:	f7fd fad6 	bl	800cf16 <vListInsert>
 800f96a:	e017      	b.n	800f99c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f96c:	2300      	movs	r3, #0
 800f96e:	9300      	str	r3, [sp, #0]
 800f970:	2300      	movs	r3, #0
 800f972:	693a      	ldr	r2, [r7, #16]
 800f974:	2100      	movs	r1, #0
 800f976:	68f8      	ldr	r0, [r7, #12]
 800f978:	f7ff fd58 	bl	800f42c <xTimerGenericCommand>
 800f97c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d10b      	bne.n	800f99c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f988:	f383 8811 	msr	BASEPRI, r3
 800f98c:	f3bf 8f6f 	isb	sy
 800f990:	f3bf 8f4f 	dsb	sy
 800f994:	603b      	str	r3, [r7, #0]
}
 800f996:	bf00      	nop
 800f998:	bf00      	nop
 800f99a:	e7fd      	b.n	800f998 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f99c:	4b09      	ldr	r3, [pc, #36]	@ (800f9c4 <prvSwitchTimerLists+0xc4>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d1b0      	bne.n	800f908 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f9a6:	4b07      	ldr	r3, [pc, #28]	@ (800f9c4 <prvSwitchTimerLists+0xc4>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f9ac:	4b06      	ldr	r3, [pc, #24]	@ (800f9c8 <prvSwitchTimerLists+0xc8>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	4a04      	ldr	r2, [pc, #16]	@ (800f9c4 <prvSwitchTimerLists+0xc4>)
 800f9b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f9b4:	4a04      	ldr	r2, [pc, #16]	@ (800f9c8 <prvSwitchTimerLists+0xc8>)
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	6013      	str	r3, [r2, #0]
}
 800f9ba:	bf00      	nop
 800f9bc:	3718      	adds	r7, #24
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}
 800f9c2:	bf00      	nop
 800f9c4:	24005dd8 	.word	0x24005dd8
 800f9c8:	24005ddc 	.word	0x24005ddc

0800f9cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b082      	sub	sp, #8
 800f9d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f9d2:	f000 f991 	bl	800fcf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f9d6:	4b15      	ldr	r3, [pc, #84]	@ (800fa2c <prvCheckForValidListAndQueue+0x60>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d120      	bne.n	800fa20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f9de:	4814      	ldr	r0, [pc, #80]	@ (800fa30 <prvCheckForValidListAndQueue+0x64>)
 800f9e0:	f7fd fa48 	bl	800ce74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f9e4:	4813      	ldr	r0, [pc, #76]	@ (800fa34 <prvCheckForValidListAndQueue+0x68>)
 800f9e6:	f7fd fa45 	bl	800ce74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f9ea:	4b13      	ldr	r3, [pc, #76]	@ (800fa38 <prvCheckForValidListAndQueue+0x6c>)
 800f9ec:	4a10      	ldr	r2, [pc, #64]	@ (800fa30 <prvCheckForValidListAndQueue+0x64>)
 800f9ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f9f0:	4b12      	ldr	r3, [pc, #72]	@ (800fa3c <prvCheckForValidListAndQueue+0x70>)
 800f9f2:	4a10      	ldr	r2, [pc, #64]	@ (800fa34 <prvCheckForValidListAndQueue+0x68>)
 800f9f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	9300      	str	r3, [sp, #0]
 800f9fa:	4b11      	ldr	r3, [pc, #68]	@ (800fa40 <prvCheckForValidListAndQueue+0x74>)
 800f9fc:	4a11      	ldr	r2, [pc, #68]	@ (800fa44 <prvCheckForValidListAndQueue+0x78>)
 800f9fe:	2110      	movs	r1, #16
 800fa00:	200a      	movs	r0, #10
 800fa02:	f7fd fb55 	bl	800d0b0 <xQueueGenericCreateStatic>
 800fa06:	4603      	mov	r3, r0
 800fa08:	4a08      	ldr	r2, [pc, #32]	@ (800fa2c <prvCheckForValidListAndQueue+0x60>)
 800fa0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fa0c:	4b07      	ldr	r3, [pc, #28]	@ (800fa2c <prvCheckForValidListAndQueue+0x60>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d005      	beq.n	800fa20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fa14:	4b05      	ldr	r3, [pc, #20]	@ (800fa2c <prvCheckForValidListAndQueue+0x60>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	490b      	ldr	r1, [pc, #44]	@ (800fa48 <prvCheckForValidListAndQueue+0x7c>)
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7fe fb3a 	bl	800e094 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa20:	f000 f99c 	bl	800fd5c <vPortExitCritical>
}
 800fa24:	bf00      	nop
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}
 800fa2a:	bf00      	nop
 800fa2c:	24005de0 	.word	0x24005de0
 800fa30:	24005db0 	.word	0x24005db0
 800fa34:	24005dc4 	.word	0x24005dc4
 800fa38:	24005dd8 	.word	0x24005dd8
 800fa3c:	24005ddc 	.word	0x24005ddc
 800fa40:	24005e8c 	.word	0x24005e8c
 800fa44:	24005dec 	.word	0x24005dec
 800fa48:	0801f5f0 	.word	0x0801f5f0

0800fa4c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b086      	sub	sp, #24
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d10b      	bne.n	800fa76 <pvTimerGetTimerID+0x2a>
	__asm volatile
 800fa5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa62:	f383 8811 	msr	BASEPRI, r3
 800fa66:	f3bf 8f6f 	isb	sy
 800fa6a:	f3bf 8f4f 	dsb	sy
 800fa6e:	60fb      	str	r3, [r7, #12]
}
 800fa70:	bf00      	nop
 800fa72:	bf00      	nop
 800fa74:	e7fd      	b.n	800fa72 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800fa76:	f000 f93f 	bl	800fcf8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	69db      	ldr	r3, [r3, #28]
 800fa7e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800fa80:	f000 f96c 	bl	800fd5c <vPortExitCritical>

	return pvReturn;
 800fa84:	693b      	ldr	r3, [r7, #16]
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3718      	adds	r7, #24
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
	...

0800fa90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fa90:	b480      	push	{r7}
 800fa92:	b085      	sub	sp, #20
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	60f8      	str	r0, [r7, #12]
 800fa98:	60b9      	str	r1, [r7, #8]
 800fa9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	3b04      	subs	r3, #4
 800faa0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800faa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	3b04      	subs	r3, #4
 800faae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	f023 0201 	bic.w	r2, r3, #1
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	3b04      	subs	r3, #4
 800fabe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fac0:	4a0c      	ldr	r2, [pc, #48]	@ (800faf4 <pxPortInitialiseStack+0x64>)
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	3b14      	subs	r3, #20
 800faca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800facc:	687a      	ldr	r2, [r7, #4]
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	3b04      	subs	r3, #4
 800fad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	f06f 0202 	mvn.w	r2, #2
 800fade:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	3b20      	subs	r3, #32
 800fae4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fae6:	68fb      	ldr	r3, [r7, #12]
}
 800fae8:	4618      	mov	r0, r3
 800faea:	3714      	adds	r7, #20
 800faec:	46bd      	mov	sp, r7
 800faee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf2:	4770      	bx	lr
 800faf4:	0800faf9 	.word	0x0800faf9

0800faf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800faf8:	b480      	push	{r7}
 800fafa:	b085      	sub	sp, #20
 800fafc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fafe:	2300      	movs	r3, #0
 800fb00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fb02:	4b13      	ldr	r3, [pc, #76]	@ (800fb50 <prvTaskExitError+0x58>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb0a:	d00b      	beq.n	800fb24 <prvTaskExitError+0x2c>
	__asm volatile
 800fb0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb10:	f383 8811 	msr	BASEPRI, r3
 800fb14:	f3bf 8f6f 	isb	sy
 800fb18:	f3bf 8f4f 	dsb	sy
 800fb1c:	60fb      	str	r3, [r7, #12]
}
 800fb1e:	bf00      	nop
 800fb20:	bf00      	nop
 800fb22:	e7fd      	b.n	800fb20 <prvTaskExitError+0x28>
	__asm volatile
 800fb24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb28:	f383 8811 	msr	BASEPRI, r3
 800fb2c:	f3bf 8f6f 	isb	sy
 800fb30:	f3bf 8f4f 	dsb	sy
 800fb34:	60bb      	str	r3, [r7, #8]
}
 800fb36:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fb38:	bf00      	nop
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d0fc      	beq.n	800fb3a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fb40:	bf00      	nop
 800fb42:	bf00      	nop
 800fb44:	3714      	adds	r7, #20
 800fb46:	46bd      	mov	sp, r7
 800fb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4c:	4770      	bx	lr
 800fb4e:	bf00      	nop
 800fb50:	24000024 	.word	0x24000024
	...

0800fb60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fb60:	4b07      	ldr	r3, [pc, #28]	@ (800fb80 <pxCurrentTCBConst2>)
 800fb62:	6819      	ldr	r1, [r3, #0]
 800fb64:	6808      	ldr	r0, [r1, #0]
 800fb66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb6a:	f380 8809 	msr	PSP, r0
 800fb6e:	f3bf 8f6f 	isb	sy
 800fb72:	f04f 0000 	mov.w	r0, #0
 800fb76:	f380 8811 	msr	BASEPRI, r0
 800fb7a:	4770      	bx	lr
 800fb7c:	f3af 8000 	nop.w

0800fb80 <pxCurrentTCBConst2>:
 800fb80:	240058b0 	.word	0x240058b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fb84:	bf00      	nop
 800fb86:	bf00      	nop

0800fb88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fb88:	4808      	ldr	r0, [pc, #32]	@ (800fbac <prvPortStartFirstTask+0x24>)
 800fb8a:	6800      	ldr	r0, [r0, #0]
 800fb8c:	6800      	ldr	r0, [r0, #0]
 800fb8e:	f380 8808 	msr	MSP, r0
 800fb92:	f04f 0000 	mov.w	r0, #0
 800fb96:	f380 8814 	msr	CONTROL, r0
 800fb9a:	b662      	cpsie	i
 800fb9c:	b661      	cpsie	f
 800fb9e:	f3bf 8f4f 	dsb	sy
 800fba2:	f3bf 8f6f 	isb	sy
 800fba6:	df00      	svc	0
 800fba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fbaa:	bf00      	nop
 800fbac:	e000ed08 	.word	0xe000ed08

0800fbb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b086      	sub	sp, #24
 800fbb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fbb6:	4b47      	ldr	r3, [pc, #284]	@ (800fcd4 <xPortStartScheduler+0x124>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	4a47      	ldr	r2, [pc, #284]	@ (800fcd8 <xPortStartScheduler+0x128>)
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	d10b      	bne.n	800fbd8 <xPortStartScheduler+0x28>
	__asm volatile
 800fbc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbc4:	f383 8811 	msr	BASEPRI, r3
 800fbc8:	f3bf 8f6f 	isb	sy
 800fbcc:	f3bf 8f4f 	dsb	sy
 800fbd0:	613b      	str	r3, [r7, #16]
}
 800fbd2:	bf00      	nop
 800fbd4:	bf00      	nop
 800fbd6:	e7fd      	b.n	800fbd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fbd8:	4b3e      	ldr	r3, [pc, #248]	@ (800fcd4 <xPortStartScheduler+0x124>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	4a3f      	ldr	r2, [pc, #252]	@ (800fcdc <xPortStartScheduler+0x12c>)
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d10b      	bne.n	800fbfa <xPortStartScheduler+0x4a>
	__asm volatile
 800fbe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbe6:	f383 8811 	msr	BASEPRI, r3
 800fbea:	f3bf 8f6f 	isb	sy
 800fbee:	f3bf 8f4f 	dsb	sy
 800fbf2:	60fb      	str	r3, [r7, #12]
}
 800fbf4:	bf00      	nop
 800fbf6:	bf00      	nop
 800fbf8:	e7fd      	b.n	800fbf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fbfa:	4b39      	ldr	r3, [pc, #228]	@ (800fce0 <xPortStartScheduler+0x130>)
 800fbfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	781b      	ldrb	r3, [r3, #0]
 800fc02:	b2db      	uxtb	r3, r3
 800fc04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	22ff      	movs	r2, #255	@ 0xff
 800fc0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	781b      	ldrb	r3, [r3, #0]
 800fc10:	b2db      	uxtb	r3, r3
 800fc12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fc14:	78fb      	ldrb	r3, [r7, #3]
 800fc16:	b2db      	uxtb	r3, r3
 800fc18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fc1c:	b2da      	uxtb	r2, r3
 800fc1e:	4b31      	ldr	r3, [pc, #196]	@ (800fce4 <xPortStartScheduler+0x134>)
 800fc20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fc22:	4b31      	ldr	r3, [pc, #196]	@ (800fce8 <xPortStartScheduler+0x138>)
 800fc24:	2207      	movs	r2, #7
 800fc26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc28:	e009      	b.n	800fc3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fc2a:	4b2f      	ldr	r3, [pc, #188]	@ (800fce8 <xPortStartScheduler+0x138>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	3b01      	subs	r3, #1
 800fc30:	4a2d      	ldr	r2, [pc, #180]	@ (800fce8 <xPortStartScheduler+0x138>)
 800fc32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fc34:	78fb      	ldrb	r3, [r7, #3]
 800fc36:	b2db      	uxtb	r3, r3
 800fc38:	005b      	lsls	r3, r3, #1
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc3e:	78fb      	ldrb	r3, [r7, #3]
 800fc40:	b2db      	uxtb	r3, r3
 800fc42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc46:	2b80      	cmp	r3, #128	@ 0x80
 800fc48:	d0ef      	beq.n	800fc2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fc4a:	4b27      	ldr	r3, [pc, #156]	@ (800fce8 <xPortStartScheduler+0x138>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	f1c3 0307 	rsb	r3, r3, #7
 800fc52:	2b04      	cmp	r3, #4
 800fc54:	d00b      	beq.n	800fc6e <xPortStartScheduler+0xbe>
	__asm volatile
 800fc56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc5a:	f383 8811 	msr	BASEPRI, r3
 800fc5e:	f3bf 8f6f 	isb	sy
 800fc62:	f3bf 8f4f 	dsb	sy
 800fc66:	60bb      	str	r3, [r7, #8]
}
 800fc68:	bf00      	nop
 800fc6a:	bf00      	nop
 800fc6c:	e7fd      	b.n	800fc6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fc6e:	4b1e      	ldr	r3, [pc, #120]	@ (800fce8 <xPortStartScheduler+0x138>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	021b      	lsls	r3, r3, #8
 800fc74:	4a1c      	ldr	r2, [pc, #112]	@ (800fce8 <xPortStartScheduler+0x138>)
 800fc76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fc78:	4b1b      	ldr	r3, [pc, #108]	@ (800fce8 <xPortStartScheduler+0x138>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fc80:	4a19      	ldr	r2, [pc, #100]	@ (800fce8 <xPortStartScheduler+0x138>)
 800fc82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	b2da      	uxtb	r2, r3
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fc8c:	4b17      	ldr	r3, [pc, #92]	@ (800fcec <xPortStartScheduler+0x13c>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	4a16      	ldr	r2, [pc, #88]	@ (800fcec <xPortStartScheduler+0x13c>)
 800fc92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fc96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fc98:	4b14      	ldr	r3, [pc, #80]	@ (800fcec <xPortStartScheduler+0x13c>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	4a13      	ldr	r2, [pc, #76]	@ (800fcec <xPortStartScheduler+0x13c>)
 800fc9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fca2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fca4:	f000 f8da 	bl	800fe5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fca8:	4b11      	ldr	r3, [pc, #68]	@ (800fcf0 <xPortStartScheduler+0x140>)
 800fcaa:	2200      	movs	r2, #0
 800fcac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fcae:	f000 f8f9 	bl	800fea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fcb2:	4b10      	ldr	r3, [pc, #64]	@ (800fcf4 <xPortStartScheduler+0x144>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	4a0f      	ldr	r2, [pc, #60]	@ (800fcf4 <xPortStartScheduler+0x144>)
 800fcb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fcbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fcbe:	f7ff ff63 	bl	800fb88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fcc2:	f7fe fe5b 	bl	800e97c <vTaskSwitchContext>
	prvTaskExitError();
 800fcc6:	f7ff ff17 	bl	800faf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fcca:	2300      	movs	r3, #0
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	3718      	adds	r7, #24
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}
 800fcd4:	e000ed00 	.word	0xe000ed00
 800fcd8:	410fc271 	.word	0x410fc271
 800fcdc:	410fc270 	.word	0x410fc270
 800fce0:	e000e400 	.word	0xe000e400
 800fce4:	24005edc 	.word	0x24005edc
 800fce8:	24005ee0 	.word	0x24005ee0
 800fcec:	e000ed20 	.word	0xe000ed20
 800fcf0:	24000024 	.word	0x24000024
 800fcf4:	e000ef34 	.word	0xe000ef34

0800fcf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b083      	sub	sp, #12
 800fcfc:	af00      	add	r7, sp, #0
	__asm volatile
 800fcfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd02:	f383 8811 	msr	BASEPRI, r3
 800fd06:	f3bf 8f6f 	isb	sy
 800fd0a:	f3bf 8f4f 	dsb	sy
 800fd0e:	607b      	str	r3, [r7, #4]
}
 800fd10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fd12:	4b10      	ldr	r3, [pc, #64]	@ (800fd54 <vPortEnterCritical+0x5c>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	3301      	adds	r3, #1
 800fd18:	4a0e      	ldr	r2, [pc, #56]	@ (800fd54 <vPortEnterCritical+0x5c>)
 800fd1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fd1c:	4b0d      	ldr	r3, [pc, #52]	@ (800fd54 <vPortEnterCritical+0x5c>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d110      	bne.n	800fd46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fd24:	4b0c      	ldr	r3, [pc, #48]	@ (800fd58 <vPortEnterCritical+0x60>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	b2db      	uxtb	r3, r3
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d00b      	beq.n	800fd46 <vPortEnterCritical+0x4e>
	__asm volatile
 800fd2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd32:	f383 8811 	msr	BASEPRI, r3
 800fd36:	f3bf 8f6f 	isb	sy
 800fd3a:	f3bf 8f4f 	dsb	sy
 800fd3e:	603b      	str	r3, [r7, #0]
}
 800fd40:	bf00      	nop
 800fd42:	bf00      	nop
 800fd44:	e7fd      	b.n	800fd42 <vPortEnterCritical+0x4a>
	}
}
 800fd46:	bf00      	nop
 800fd48:	370c      	adds	r7, #12
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd50:	4770      	bx	lr
 800fd52:	bf00      	nop
 800fd54:	24000024 	.word	0x24000024
 800fd58:	e000ed04 	.word	0xe000ed04

0800fd5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b083      	sub	sp, #12
 800fd60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fd62:	4b12      	ldr	r3, [pc, #72]	@ (800fdac <vPortExitCritical+0x50>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d10b      	bne.n	800fd82 <vPortExitCritical+0x26>
	__asm volatile
 800fd6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd6e:	f383 8811 	msr	BASEPRI, r3
 800fd72:	f3bf 8f6f 	isb	sy
 800fd76:	f3bf 8f4f 	dsb	sy
 800fd7a:	607b      	str	r3, [r7, #4]
}
 800fd7c:	bf00      	nop
 800fd7e:	bf00      	nop
 800fd80:	e7fd      	b.n	800fd7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fd82:	4b0a      	ldr	r3, [pc, #40]	@ (800fdac <vPortExitCritical+0x50>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	3b01      	subs	r3, #1
 800fd88:	4a08      	ldr	r2, [pc, #32]	@ (800fdac <vPortExitCritical+0x50>)
 800fd8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fd8c:	4b07      	ldr	r3, [pc, #28]	@ (800fdac <vPortExitCritical+0x50>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d105      	bne.n	800fda0 <vPortExitCritical+0x44>
 800fd94:	2300      	movs	r3, #0
 800fd96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	f383 8811 	msr	BASEPRI, r3
}
 800fd9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fda0:	bf00      	nop
 800fda2:	370c      	adds	r7, #12
 800fda4:	46bd      	mov	sp, r7
 800fda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdaa:	4770      	bx	lr
 800fdac:	24000024 	.word	0x24000024

0800fdb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fdb0:	f3ef 8009 	mrs	r0, PSP
 800fdb4:	f3bf 8f6f 	isb	sy
 800fdb8:	4b15      	ldr	r3, [pc, #84]	@ (800fe10 <pxCurrentTCBConst>)
 800fdba:	681a      	ldr	r2, [r3, #0]
 800fdbc:	f01e 0f10 	tst.w	lr, #16
 800fdc0:	bf08      	it	eq
 800fdc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fdc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdca:	6010      	str	r0, [r2, #0]
 800fdcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fdd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fdd4:	f380 8811 	msr	BASEPRI, r0
 800fdd8:	f3bf 8f4f 	dsb	sy
 800fddc:	f3bf 8f6f 	isb	sy
 800fde0:	f7fe fdcc 	bl	800e97c <vTaskSwitchContext>
 800fde4:	f04f 0000 	mov.w	r0, #0
 800fde8:	f380 8811 	msr	BASEPRI, r0
 800fdec:	bc09      	pop	{r0, r3}
 800fdee:	6819      	ldr	r1, [r3, #0]
 800fdf0:	6808      	ldr	r0, [r1, #0]
 800fdf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdf6:	f01e 0f10 	tst.w	lr, #16
 800fdfa:	bf08      	it	eq
 800fdfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fe00:	f380 8809 	msr	PSP, r0
 800fe04:	f3bf 8f6f 	isb	sy
 800fe08:	4770      	bx	lr
 800fe0a:	bf00      	nop
 800fe0c:	f3af 8000 	nop.w

0800fe10 <pxCurrentTCBConst>:
 800fe10:	240058b0 	.word	0x240058b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fe14:	bf00      	nop
 800fe16:	bf00      	nop

0800fe18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b082      	sub	sp, #8
 800fe1c:	af00      	add	r7, sp, #0
	__asm volatile
 800fe1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe22:	f383 8811 	msr	BASEPRI, r3
 800fe26:	f3bf 8f6f 	isb	sy
 800fe2a:	f3bf 8f4f 	dsb	sy
 800fe2e:	607b      	str	r3, [r7, #4]
}
 800fe30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fe32:	f7fe fce9 	bl	800e808 <xTaskIncrementTick>
 800fe36:	4603      	mov	r3, r0
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d003      	beq.n	800fe44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fe3c:	4b06      	ldr	r3, [pc, #24]	@ (800fe58 <xPortSysTickHandler+0x40>)
 800fe3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe42:	601a      	str	r2, [r3, #0]
 800fe44:	2300      	movs	r3, #0
 800fe46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	f383 8811 	msr	BASEPRI, r3
}
 800fe4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fe50:	bf00      	nop
 800fe52:	3708      	adds	r7, #8
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	e000ed04 	.word	0xe000ed04

0800fe5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fe60:	4b0b      	ldr	r3, [pc, #44]	@ (800fe90 <vPortSetupTimerInterrupt+0x34>)
 800fe62:	2200      	movs	r2, #0
 800fe64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fe66:	4b0b      	ldr	r3, [pc, #44]	@ (800fe94 <vPortSetupTimerInterrupt+0x38>)
 800fe68:	2200      	movs	r2, #0
 800fe6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fe6c:	4b0a      	ldr	r3, [pc, #40]	@ (800fe98 <vPortSetupTimerInterrupt+0x3c>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	4a0a      	ldr	r2, [pc, #40]	@ (800fe9c <vPortSetupTimerInterrupt+0x40>)
 800fe72:	fba2 2303 	umull	r2, r3, r2, r3
 800fe76:	099b      	lsrs	r3, r3, #6
 800fe78:	4a09      	ldr	r2, [pc, #36]	@ (800fea0 <vPortSetupTimerInterrupt+0x44>)
 800fe7a:	3b01      	subs	r3, #1
 800fe7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fe7e:	4b04      	ldr	r3, [pc, #16]	@ (800fe90 <vPortSetupTimerInterrupt+0x34>)
 800fe80:	2207      	movs	r2, #7
 800fe82:	601a      	str	r2, [r3, #0]
}
 800fe84:	bf00      	nop
 800fe86:	46bd      	mov	sp, r7
 800fe88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8c:	4770      	bx	lr
 800fe8e:	bf00      	nop
 800fe90:	e000e010 	.word	0xe000e010
 800fe94:	e000e018 	.word	0xe000e018
 800fe98:	24000000 	.word	0x24000000
 800fe9c:	10624dd3 	.word	0x10624dd3
 800fea0:	e000e014 	.word	0xe000e014

0800fea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fea4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800feb4 <vPortEnableVFP+0x10>
 800fea8:	6801      	ldr	r1, [r0, #0]
 800feaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800feae:	6001      	str	r1, [r0, #0]
 800feb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800feb2:	bf00      	nop
 800feb4:	e000ed88 	.word	0xe000ed88

0800feb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800feb8:	b480      	push	{r7}
 800feba:	b085      	sub	sp, #20
 800febc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800febe:	f3ef 8305 	mrs	r3, IPSR
 800fec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	2b0f      	cmp	r3, #15
 800fec8:	d915      	bls.n	800fef6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800feca:	4a18      	ldr	r2, [pc, #96]	@ (800ff2c <vPortValidateInterruptPriority+0x74>)
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	4413      	add	r3, r2
 800fed0:	781b      	ldrb	r3, [r3, #0]
 800fed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fed4:	4b16      	ldr	r3, [pc, #88]	@ (800ff30 <vPortValidateInterruptPriority+0x78>)
 800fed6:	781b      	ldrb	r3, [r3, #0]
 800fed8:	7afa      	ldrb	r2, [r7, #11]
 800feda:	429a      	cmp	r2, r3
 800fedc:	d20b      	bcs.n	800fef6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fee2:	f383 8811 	msr	BASEPRI, r3
 800fee6:	f3bf 8f6f 	isb	sy
 800feea:	f3bf 8f4f 	dsb	sy
 800feee:	607b      	str	r3, [r7, #4]
}
 800fef0:	bf00      	nop
 800fef2:	bf00      	nop
 800fef4:	e7fd      	b.n	800fef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fef6:	4b0f      	ldr	r3, [pc, #60]	@ (800ff34 <vPortValidateInterruptPriority+0x7c>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fefe:	4b0e      	ldr	r3, [pc, #56]	@ (800ff38 <vPortValidateInterruptPriority+0x80>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d90b      	bls.n	800ff1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ff06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff0a:	f383 8811 	msr	BASEPRI, r3
 800ff0e:	f3bf 8f6f 	isb	sy
 800ff12:	f3bf 8f4f 	dsb	sy
 800ff16:	603b      	str	r3, [r7, #0]
}
 800ff18:	bf00      	nop
 800ff1a:	bf00      	nop
 800ff1c:	e7fd      	b.n	800ff1a <vPortValidateInterruptPriority+0x62>
	}
 800ff1e:	bf00      	nop
 800ff20:	3714      	adds	r7, #20
 800ff22:	46bd      	mov	sp, r7
 800ff24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff28:	4770      	bx	lr
 800ff2a:	bf00      	nop
 800ff2c:	e000e3f0 	.word	0xe000e3f0
 800ff30:	24005edc 	.word	0x24005edc
 800ff34:	e000ed0c 	.word	0xe000ed0c
 800ff38:	24005ee0 	.word	0x24005ee0

0800ff3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b08a      	sub	sp, #40	@ 0x28
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ff44:	2300      	movs	r3, #0
 800ff46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ff48:	f7fe fb90 	bl	800e66c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ff4c:	4b5c      	ldr	r3, [pc, #368]	@ (80100c0 <pvPortMalloc+0x184>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d101      	bne.n	800ff58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ff54:	f000 f924 	bl	80101a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ff58:	4b5a      	ldr	r3, [pc, #360]	@ (80100c4 <pvPortMalloc+0x188>)
 800ff5a:	681a      	ldr	r2, [r3, #0]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	4013      	ands	r3, r2
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	f040 8095 	bne.w	8010090 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d01e      	beq.n	800ffaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ff6c:	2208      	movs	r2, #8
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	4413      	add	r3, r2
 800ff72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f003 0307 	and.w	r3, r3, #7
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d015      	beq.n	800ffaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f023 0307 	bic.w	r3, r3, #7
 800ff84:	3308      	adds	r3, #8
 800ff86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f003 0307 	and.w	r3, r3, #7
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d00b      	beq.n	800ffaa <pvPortMalloc+0x6e>
	__asm volatile
 800ff92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff96:	f383 8811 	msr	BASEPRI, r3
 800ff9a:	f3bf 8f6f 	isb	sy
 800ff9e:	f3bf 8f4f 	dsb	sy
 800ffa2:	617b      	str	r3, [r7, #20]
}
 800ffa4:	bf00      	nop
 800ffa6:	bf00      	nop
 800ffa8:	e7fd      	b.n	800ffa6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d06f      	beq.n	8010090 <pvPortMalloc+0x154>
 800ffb0:	4b45      	ldr	r3, [pc, #276]	@ (80100c8 <pvPortMalloc+0x18c>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	687a      	ldr	r2, [r7, #4]
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d86a      	bhi.n	8010090 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ffba:	4b44      	ldr	r3, [pc, #272]	@ (80100cc <pvPortMalloc+0x190>)
 800ffbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ffbe:	4b43      	ldr	r3, [pc, #268]	@ (80100cc <pvPortMalloc+0x190>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ffc4:	e004      	b.n	800ffd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ffc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ffca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ffd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffd2:	685b      	ldr	r3, [r3, #4]
 800ffd4:	687a      	ldr	r2, [r7, #4]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d903      	bls.n	800ffe2 <pvPortMalloc+0xa6>
 800ffda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d1f1      	bne.n	800ffc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ffe2:	4b37      	ldr	r3, [pc, #220]	@ (80100c0 <pvPortMalloc+0x184>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	d051      	beq.n	8010090 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ffec:	6a3b      	ldr	r3, [r7, #32]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	2208      	movs	r2, #8
 800fff2:	4413      	add	r3, r2
 800fff4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fff8:	681a      	ldr	r2, [r3, #0]
 800fffa:	6a3b      	ldr	r3, [r7, #32]
 800fffc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010000:	685a      	ldr	r2, [r3, #4]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	1ad2      	subs	r2, r2, r3
 8010006:	2308      	movs	r3, #8
 8010008:	005b      	lsls	r3, r3, #1
 801000a:	429a      	cmp	r2, r3
 801000c:	d920      	bls.n	8010050 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801000e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	4413      	add	r3, r2
 8010014:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010016:	69bb      	ldr	r3, [r7, #24]
 8010018:	f003 0307 	and.w	r3, r3, #7
 801001c:	2b00      	cmp	r3, #0
 801001e:	d00b      	beq.n	8010038 <pvPortMalloc+0xfc>
	__asm volatile
 8010020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010024:	f383 8811 	msr	BASEPRI, r3
 8010028:	f3bf 8f6f 	isb	sy
 801002c:	f3bf 8f4f 	dsb	sy
 8010030:	613b      	str	r3, [r7, #16]
}
 8010032:	bf00      	nop
 8010034:	bf00      	nop
 8010036:	e7fd      	b.n	8010034 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801003a:	685a      	ldr	r2, [r3, #4]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	1ad2      	subs	r2, r2, r3
 8010040:	69bb      	ldr	r3, [r7, #24]
 8010042:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010046:	687a      	ldr	r2, [r7, #4]
 8010048:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801004a:	69b8      	ldr	r0, [r7, #24]
 801004c:	f000 f90a 	bl	8010264 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010050:	4b1d      	ldr	r3, [pc, #116]	@ (80100c8 <pvPortMalloc+0x18c>)
 8010052:	681a      	ldr	r2, [r3, #0]
 8010054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010056:	685b      	ldr	r3, [r3, #4]
 8010058:	1ad3      	subs	r3, r2, r3
 801005a:	4a1b      	ldr	r2, [pc, #108]	@ (80100c8 <pvPortMalloc+0x18c>)
 801005c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801005e:	4b1a      	ldr	r3, [pc, #104]	@ (80100c8 <pvPortMalloc+0x18c>)
 8010060:	681a      	ldr	r2, [r3, #0]
 8010062:	4b1b      	ldr	r3, [pc, #108]	@ (80100d0 <pvPortMalloc+0x194>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	429a      	cmp	r2, r3
 8010068:	d203      	bcs.n	8010072 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801006a:	4b17      	ldr	r3, [pc, #92]	@ (80100c8 <pvPortMalloc+0x18c>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	4a18      	ldr	r2, [pc, #96]	@ (80100d0 <pvPortMalloc+0x194>)
 8010070:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010074:	685a      	ldr	r2, [r3, #4]
 8010076:	4b13      	ldr	r3, [pc, #76]	@ (80100c4 <pvPortMalloc+0x188>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	431a      	orrs	r2, r3
 801007c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801007e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010082:	2200      	movs	r2, #0
 8010084:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010086:	4b13      	ldr	r3, [pc, #76]	@ (80100d4 <pvPortMalloc+0x198>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	3301      	adds	r3, #1
 801008c:	4a11      	ldr	r2, [pc, #68]	@ (80100d4 <pvPortMalloc+0x198>)
 801008e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010090:	f7fe fafa 	bl	800e688 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010094:	69fb      	ldr	r3, [r7, #28]
 8010096:	f003 0307 	and.w	r3, r3, #7
 801009a:	2b00      	cmp	r3, #0
 801009c:	d00b      	beq.n	80100b6 <pvPortMalloc+0x17a>
	__asm volatile
 801009e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100a2:	f383 8811 	msr	BASEPRI, r3
 80100a6:	f3bf 8f6f 	isb	sy
 80100aa:	f3bf 8f4f 	dsb	sy
 80100ae:	60fb      	str	r3, [r7, #12]
}
 80100b0:	bf00      	nop
 80100b2:	bf00      	nop
 80100b4:	e7fd      	b.n	80100b2 <pvPortMalloc+0x176>
	return pvReturn;
 80100b6:	69fb      	ldr	r3, [r7, #28]
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3728      	adds	r7, #40	@ 0x28
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}
 80100c0:	24009aec 	.word	0x24009aec
 80100c4:	24009b00 	.word	0x24009b00
 80100c8:	24009af0 	.word	0x24009af0
 80100cc:	24009ae4 	.word	0x24009ae4
 80100d0:	24009af4 	.word	0x24009af4
 80100d4:	24009af8 	.word	0x24009af8

080100d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b086      	sub	sp, #24
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d04f      	beq.n	801018a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80100ea:	2308      	movs	r3, #8
 80100ec:	425b      	negs	r3, r3
 80100ee:	697a      	ldr	r2, [r7, #20]
 80100f0:	4413      	add	r3, r2
 80100f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	685a      	ldr	r2, [r3, #4]
 80100fc:	4b25      	ldr	r3, [pc, #148]	@ (8010194 <vPortFree+0xbc>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	4013      	ands	r3, r2
 8010102:	2b00      	cmp	r3, #0
 8010104:	d10b      	bne.n	801011e <vPortFree+0x46>
	__asm volatile
 8010106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801010a:	f383 8811 	msr	BASEPRI, r3
 801010e:	f3bf 8f6f 	isb	sy
 8010112:	f3bf 8f4f 	dsb	sy
 8010116:	60fb      	str	r3, [r7, #12]
}
 8010118:	bf00      	nop
 801011a:	bf00      	nop
 801011c:	e7fd      	b.n	801011a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801011e:	693b      	ldr	r3, [r7, #16]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d00b      	beq.n	801013e <vPortFree+0x66>
	__asm volatile
 8010126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801012a:	f383 8811 	msr	BASEPRI, r3
 801012e:	f3bf 8f6f 	isb	sy
 8010132:	f3bf 8f4f 	dsb	sy
 8010136:	60bb      	str	r3, [r7, #8]
}
 8010138:	bf00      	nop
 801013a:	bf00      	nop
 801013c:	e7fd      	b.n	801013a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801013e:	693b      	ldr	r3, [r7, #16]
 8010140:	685a      	ldr	r2, [r3, #4]
 8010142:	4b14      	ldr	r3, [pc, #80]	@ (8010194 <vPortFree+0xbc>)
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	4013      	ands	r3, r2
 8010148:	2b00      	cmp	r3, #0
 801014a:	d01e      	beq.n	801018a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801014c:	693b      	ldr	r3, [r7, #16]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d11a      	bne.n	801018a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	685a      	ldr	r2, [r3, #4]
 8010158:	4b0e      	ldr	r3, [pc, #56]	@ (8010194 <vPortFree+0xbc>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	43db      	mvns	r3, r3
 801015e:	401a      	ands	r2, r3
 8010160:	693b      	ldr	r3, [r7, #16]
 8010162:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010164:	f7fe fa82 	bl	800e66c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	685a      	ldr	r2, [r3, #4]
 801016c:	4b0a      	ldr	r3, [pc, #40]	@ (8010198 <vPortFree+0xc0>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	4413      	add	r3, r2
 8010172:	4a09      	ldr	r2, [pc, #36]	@ (8010198 <vPortFree+0xc0>)
 8010174:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010176:	6938      	ldr	r0, [r7, #16]
 8010178:	f000 f874 	bl	8010264 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801017c:	4b07      	ldr	r3, [pc, #28]	@ (801019c <vPortFree+0xc4>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	3301      	adds	r3, #1
 8010182:	4a06      	ldr	r2, [pc, #24]	@ (801019c <vPortFree+0xc4>)
 8010184:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010186:	f7fe fa7f 	bl	800e688 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801018a:	bf00      	nop
 801018c:	3718      	adds	r7, #24
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}
 8010192:	bf00      	nop
 8010194:	24009b00 	.word	0x24009b00
 8010198:	24009af0 	.word	0x24009af0
 801019c:	24009afc 	.word	0x24009afc

080101a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80101a0:	b480      	push	{r7}
 80101a2:	b085      	sub	sp, #20
 80101a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80101a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80101aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80101ac:	4b27      	ldr	r3, [pc, #156]	@ (801024c <prvHeapInit+0xac>)
 80101ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	f003 0307 	and.w	r3, r3, #7
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d00c      	beq.n	80101d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	3307      	adds	r3, #7
 80101be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	f023 0307 	bic.w	r3, r3, #7
 80101c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80101c8:	68ba      	ldr	r2, [r7, #8]
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	1ad3      	subs	r3, r2, r3
 80101ce:	4a1f      	ldr	r2, [pc, #124]	@ (801024c <prvHeapInit+0xac>)
 80101d0:	4413      	add	r3, r2
 80101d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80101d8:	4a1d      	ldr	r2, [pc, #116]	@ (8010250 <prvHeapInit+0xb0>)
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80101de:	4b1c      	ldr	r3, [pc, #112]	@ (8010250 <prvHeapInit+0xb0>)
 80101e0:	2200      	movs	r2, #0
 80101e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	68ba      	ldr	r2, [r7, #8]
 80101e8:	4413      	add	r3, r2
 80101ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80101ec:	2208      	movs	r2, #8
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	1a9b      	subs	r3, r3, r2
 80101f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	f023 0307 	bic.w	r3, r3, #7
 80101fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	4a15      	ldr	r2, [pc, #84]	@ (8010254 <prvHeapInit+0xb4>)
 8010200:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010202:	4b14      	ldr	r3, [pc, #80]	@ (8010254 <prvHeapInit+0xb4>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	2200      	movs	r2, #0
 8010208:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801020a:	4b12      	ldr	r3, [pc, #72]	@ (8010254 <prvHeapInit+0xb4>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	2200      	movs	r2, #0
 8010210:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	68fa      	ldr	r2, [r7, #12]
 801021a:	1ad2      	subs	r2, r2, r3
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010220:	4b0c      	ldr	r3, [pc, #48]	@ (8010254 <prvHeapInit+0xb4>)
 8010222:	681a      	ldr	r2, [r3, #0]
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	685b      	ldr	r3, [r3, #4]
 801022c:	4a0a      	ldr	r2, [pc, #40]	@ (8010258 <prvHeapInit+0xb8>)
 801022e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	685b      	ldr	r3, [r3, #4]
 8010234:	4a09      	ldr	r2, [pc, #36]	@ (801025c <prvHeapInit+0xbc>)
 8010236:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010238:	4b09      	ldr	r3, [pc, #36]	@ (8010260 <prvHeapInit+0xc0>)
 801023a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801023e:	601a      	str	r2, [r3, #0]
}
 8010240:	bf00      	nop
 8010242:	3714      	adds	r7, #20
 8010244:	46bd      	mov	sp, r7
 8010246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024a:	4770      	bx	lr
 801024c:	24005ee4 	.word	0x24005ee4
 8010250:	24009ae4 	.word	0x24009ae4
 8010254:	24009aec 	.word	0x24009aec
 8010258:	24009af4 	.word	0x24009af4
 801025c:	24009af0 	.word	0x24009af0
 8010260:	24009b00 	.word	0x24009b00

08010264 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010264:	b480      	push	{r7}
 8010266:	b085      	sub	sp, #20
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801026c:	4b28      	ldr	r3, [pc, #160]	@ (8010310 <prvInsertBlockIntoFreeList+0xac>)
 801026e:	60fb      	str	r3, [r7, #12]
 8010270:	e002      	b.n	8010278 <prvInsertBlockIntoFreeList+0x14>
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	60fb      	str	r3, [r7, #12]
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	687a      	ldr	r2, [r7, #4]
 801027e:	429a      	cmp	r2, r3
 8010280:	d8f7      	bhi.n	8010272 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	685b      	ldr	r3, [r3, #4]
 801028a:	68ba      	ldr	r2, [r7, #8]
 801028c:	4413      	add	r3, r2
 801028e:	687a      	ldr	r2, [r7, #4]
 8010290:	429a      	cmp	r2, r3
 8010292:	d108      	bne.n	80102a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	685a      	ldr	r2, [r3, #4]
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	685b      	ldr	r3, [r3, #4]
 801029c:	441a      	add	r2, r3
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	685b      	ldr	r3, [r3, #4]
 80102ae:	68ba      	ldr	r2, [r7, #8]
 80102b0:	441a      	add	r2, r3
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	429a      	cmp	r2, r3
 80102b8:	d118      	bne.n	80102ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	681a      	ldr	r2, [r3, #0]
 80102be:	4b15      	ldr	r3, [pc, #84]	@ (8010314 <prvInsertBlockIntoFreeList+0xb0>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	429a      	cmp	r2, r3
 80102c4:	d00d      	beq.n	80102e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	685a      	ldr	r2, [r3, #4]
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	685b      	ldr	r3, [r3, #4]
 80102d0:	441a      	add	r2, r3
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	681a      	ldr	r2, [r3, #0]
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	601a      	str	r2, [r3, #0]
 80102e0:	e008      	b.n	80102f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80102e2:	4b0c      	ldr	r3, [pc, #48]	@ (8010314 <prvInsertBlockIntoFreeList+0xb0>)
 80102e4:	681a      	ldr	r2, [r3, #0]
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	601a      	str	r2, [r3, #0]
 80102ea:	e003      	b.n	80102f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80102f4:	68fa      	ldr	r2, [r7, #12]
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	429a      	cmp	r2, r3
 80102fa:	d002      	beq.n	8010302 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	687a      	ldr	r2, [r7, #4]
 8010300:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010302:	bf00      	nop
 8010304:	3714      	adds	r7, #20
 8010306:	46bd      	mov	sp, r7
 8010308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030c:	4770      	bx	lr
 801030e:	bf00      	nop
 8010310:	24009ae4 	.word	0x24009ae4
 8010314:	24009aec 	.word	0x24009aec

08010318 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b084      	sub	sp, #16
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8010322:	f007 fb95 	bl	8017a50 <sys_timeouts_sleeptime>
 8010326:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801032e:	d10b      	bne.n	8010348 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8010330:	4813      	ldr	r0, [pc, #76]	@ (8010380 <tcpip_timeouts_mbox_fetch+0x68>)
 8010332:	f00c fac4 	bl	801c8be <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8010336:	2200      	movs	r2, #0
 8010338:	6839      	ldr	r1, [r7, #0]
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f00c fa4c 	bl	801c7d8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8010340:	480f      	ldr	r0, [pc, #60]	@ (8010380 <tcpip_timeouts_mbox_fetch+0x68>)
 8010342:	f00c faad 	bl	801c8a0 <sys_mutex_lock>
    return;
 8010346:	e018      	b.n	801037a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d102      	bne.n	8010354 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801034e:	f007 fb45 	bl	80179dc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010352:	e7e6      	b.n	8010322 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8010354:	480a      	ldr	r0, [pc, #40]	@ (8010380 <tcpip_timeouts_mbox_fetch+0x68>)
 8010356:	f00c fab2 	bl	801c8be <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801035a:	68fa      	ldr	r2, [r7, #12]
 801035c:	6839      	ldr	r1, [r7, #0]
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f00c fa3a 	bl	801c7d8 <sys_arch_mbox_fetch>
 8010364:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8010366:	4806      	ldr	r0, [pc, #24]	@ (8010380 <tcpip_timeouts_mbox_fetch+0x68>)
 8010368:	f00c fa9a 	bl	801c8a0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010372:	d102      	bne.n	801037a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8010374:	f007 fb32 	bl	80179dc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010378:	e7d3      	b.n	8010322 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801037a:	3710      	adds	r7, #16
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}
 8010380:	24009b10 	.word	0x24009b10

08010384 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b084      	sub	sp, #16
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801038c:	4810      	ldr	r0, [pc, #64]	@ (80103d0 <tcpip_thread+0x4c>)
 801038e:	f00c fa87 	bl	801c8a0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8010392:	4b10      	ldr	r3, [pc, #64]	@ (80103d4 <tcpip_thread+0x50>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d005      	beq.n	80103a6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801039a:	4b0e      	ldr	r3, [pc, #56]	@ (80103d4 <tcpip_thread+0x50>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	4a0e      	ldr	r2, [pc, #56]	@ (80103d8 <tcpip_thread+0x54>)
 80103a0:	6812      	ldr	r2, [r2, #0]
 80103a2:	4610      	mov	r0, r2
 80103a4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80103a6:	f107 030c 	add.w	r3, r7, #12
 80103aa:	4619      	mov	r1, r3
 80103ac:	480b      	ldr	r0, [pc, #44]	@ (80103dc <tcpip_thread+0x58>)
 80103ae:	f7ff ffb3 	bl	8010318 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d106      	bne.n	80103c6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80103b8:	4b09      	ldr	r3, [pc, #36]	@ (80103e0 <tcpip_thread+0x5c>)
 80103ba:	2291      	movs	r2, #145	@ 0x91
 80103bc:	4909      	ldr	r1, [pc, #36]	@ (80103e4 <tcpip_thread+0x60>)
 80103be:	480a      	ldr	r0, [pc, #40]	@ (80103e8 <tcpip_thread+0x64>)
 80103c0:	f00d f800 	bl	801d3c4 <iprintf>
      continue;
 80103c4:	e003      	b.n	80103ce <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	4618      	mov	r0, r3
 80103ca:	f000 f80f 	bl	80103ec <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80103ce:	e7ea      	b.n	80103a6 <tcpip_thread+0x22>
 80103d0:	24009b10 	.word	0x24009b10
 80103d4:	24009b04 	.word	0x24009b04
 80103d8:	24009b08 	.word	0x24009b08
 80103dc:	24009b0c 	.word	0x24009b0c
 80103e0:	0801f5f8 	.word	0x0801f5f8
 80103e4:	0801f628 	.word	0x0801f628
 80103e8:	0801f648 	.word	0x0801f648

080103ec <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b082      	sub	sp, #8
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	781b      	ldrb	r3, [r3, #0]
 80103f8:	2b02      	cmp	r3, #2
 80103fa:	d026      	beq.n	801044a <tcpip_thread_handle_msg+0x5e>
 80103fc:	2b02      	cmp	r3, #2
 80103fe:	dc2b      	bgt.n	8010458 <tcpip_thread_handle_msg+0x6c>
 8010400:	2b00      	cmp	r3, #0
 8010402:	d002      	beq.n	801040a <tcpip_thread_handle_msg+0x1e>
 8010404:	2b01      	cmp	r3, #1
 8010406:	d015      	beq.n	8010434 <tcpip_thread_handle_msg+0x48>
 8010408:	e026      	b.n	8010458 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	68db      	ldr	r3, [r3, #12]
 801040e:	687a      	ldr	r2, [r7, #4]
 8010410:	6850      	ldr	r0, [r2, #4]
 8010412:	687a      	ldr	r2, [r7, #4]
 8010414:	6892      	ldr	r2, [r2, #8]
 8010416:	4611      	mov	r1, r2
 8010418:	4798      	blx	r3
 801041a:	4603      	mov	r3, r0
 801041c:	2b00      	cmp	r3, #0
 801041e:	d004      	beq.n	801042a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	685b      	ldr	r3, [r3, #4]
 8010424:	4618      	mov	r0, r3
 8010426:	f001 fdcf 	bl	8011fc8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801042a:	6879      	ldr	r1, [r7, #4]
 801042c:	2009      	movs	r0, #9
 801042e:	f000 ff1b 	bl	8011268 <memp_free>
      break;
 8010432:	e018      	b.n	8010466 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	687a      	ldr	r2, [r7, #4]
 801043a:	6892      	ldr	r2, [r2, #8]
 801043c:	4610      	mov	r0, r2
 801043e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8010440:	6879      	ldr	r1, [r7, #4]
 8010442:	2008      	movs	r0, #8
 8010444:	f000 ff10 	bl	8011268 <memp_free>
      break;
 8010448:	e00d      	b.n	8010466 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	685b      	ldr	r3, [r3, #4]
 801044e:	687a      	ldr	r2, [r7, #4]
 8010450:	6892      	ldr	r2, [r2, #8]
 8010452:	4610      	mov	r0, r2
 8010454:	4798      	blx	r3
      break;
 8010456:	e006      	b.n	8010466 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010458:	4b05      	ldr	r3, [pc, #20]	@ (8010470 <tcpip_thread_handle_msg+0x84>)
 801045a:	22cf      	movs	r2, #207	@ 0xcf
 801045c:	4905      	ldr	r1, [pc, #20]	@ (8010474 <tcpip_thread_handle_msg+0x88>)
 801045e:	4806      	ldr	r0, [pc, #24]	@ (8010478 <tcpip_thread_handle_msg+0x8c>)
 8010460:	f00c ffb0 	bl	801d3c4 <iprintf>
      break;
 8010464:	bf00      	nop
  }
}
 8010466:	bf00      	nop
 8010468:	3708      	adds	r7, #8
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
 801046e:	bf00      	nop
 8010470:	0801f5f8 	.word	0x0801f5f8
 8010474:	0801f628 	.word	0x0801f628
 8010478:	0801f648 	.word	0x0801f648

0801047c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b086      	sub	sp, #24
 8010480:	af00      	add	r7, sp, #0
 8010482:	60f8      	str	r0, [r7, #12]
 8010484:	60b9      	str	r1, [r7, #8]
 8010486:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010488:	481a      	ldr	r0, [pc, #104]	@ (80104f4 <tcpip_inpkt+0x78>)
 801048a:	f00c f9d6 	bl	801c83a <sys_mbox_valid>
 801048e:	4603      	mov	r3, r0
 8010490:	2b00      	cmp	r3, #0
 8010492:	d105      	bne.n	80104a0 <tcpip_inpkt+0x24>
 8010494:	4b18      	ldr	r3, [pc, #96]	@ (80104f8 <tcpip_inpkt+0x7c>)
 8010496:	22fc      	movs	r2, #252	@ 0xfc
 8010498:	4918      	ldr	r1, [pc, #96]	@ (80104fc <tcpip_inpkt+0x80>)
 801049a:	4819      	ldr	r0, [pc, #100]	@ (8010500 <tcpip_inpkt+0x84>)
 801049c:	f00c ff92 	bl	801d3c4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80104a0:	2009      	movs	r0, #9
 80104a2:	f000 fe6b 	bl	801117c <memp_malloc>
 80104a6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d102      	bne.n	80104b4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80104ae:	f04f 33ff 	mov.w	r3, #4294967295
 80104b2:	e01a      	b.n	80104ea <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80104b4:	697b      	ldr	r3, [r7, #20]
 80104b6:	2200      	movs	r2, #0
 80104b8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80104ba:	697b      	ldr	r3, [r7, #20]
 80104bc:	68fa      	ldr	r2, [r7, #12]
 80104be:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80104c0:	697b      	ldr	r3, [r7, #20]
 80104c2:	68ba      	ldr	r2, [r7, #8]
 80104c4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80104c6:	697b      	ldr	r3, [r7, #20]
 80104c8:	687a      	ldr	r2, [r7, #4]
 80104ca:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80104cc:	6979      	ldr	r1, [r7, #20]
 80104ce:	4809      	ldr	r0, [pc, #36]	@ (80104f4 <tcpip_inpkt+0x78>)
 80104d0:	f00c f968 	bl	801c7a4 <sys_mbox_trypost>
 80104d4:	4603      	mov	r3, r0
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d006      	beq.n	80104e8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80104da:	6979      	ldr	r1, [r7, #20]
 80104dc:	2009      	movs	r0, #9
 80104de:	f000 fec3 	bl	8011268 <memp_free>
    return ERR_MEM;
 80104e2:	f04f 33ff 	mov.w	r3, #4294967295
 80104e6:	e000      	b.n	80104ea <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80104e8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3718      	adds	r7, #24
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
 80104f2:	bf00      	nop
 80104f4:	24009b0c 	.word	0x24009b0c
 80104f8:	0801f5f8 	.word	0x0801f5f8
 80104fc:	0801f670 	.word	0x0801f670
 8010500:	0801f648 	.word	0x0801f648

08010504 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b082      	sub	sp, #8
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
 801050c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010514:	f003 0318 	and.w	r3, r3, #24
 8010518:	2b00      	cmp	r3, #0
 801051a:	d006      	beq.n	801052a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801051c:	4a08      	ldr	r2, [pc, #32]	@ (8010540 <tcpip_input+0x3c>)
 801051e:	6839      	ldr	r1, [r7, #0]
 8010520:	6878      	ldr	r0, [r7, #4]
 8010522:	f7ff ffab 	bl	801047c <tcpip_inpkt>
 8010526:	4603      	mov	r3, r0
 8010528:	e005      	b.n	8010536 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801052a:	4a06      	ldr	r2, [pc, #24]	@ (8010544 <tcpip_input+0x40>)
 801052c:	6839      	ldr	r1, [r7, #0]
 801052e:	6878      	ldr	r0, [r7, #4]
 8010530:	f7ff ffa4 	bl	801047c <tcpip_inpkt>
 8010534:	4603      	mov	r3, r0
}
 8010536:	4618      	mov	r0, r3
 8010538:	3708      	adds	r7, #8
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}
 801053e:	bf00      	nop
 8010540:	0801c5c5 	.word	0x0801c5c5
 8010544:	0801b491 	.word	0x0801b491

08010548 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b084      	sub	sp, #16
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010552:	4819      	ldr	r0, [pc, #100]	@ (80105b8 <tcpip_try_callback+0x70>)
 8010554:	f00c f971 	bl	801c83a <sys_mbox_valid>
 8010558:	4603      	mov	r3, r0
 801055a:	2b00      	cmp	r3, #0
 801055c:	d106      	bne.n	801056c <tcpip_try_callback+0x24>
 801055e:	4b17      	ldr	r3, [pc, #92]	@ (80105bc <tcpip_try_callback+0x74>)
 8010560:	f240 125d 	movw	r2, #349	@ 0x15d
 8010564:	4916      	ldr	r1, [pc, #88]	@ (80105c0 <tcpip_try_callback+0x78>)
 8010566:	4817      	ldr	r0, [pc, #92]	@ (80105c4 <tcpip_try_callback+0x7c>)
 8010568:	f00c ff2c 	bl	801d3c4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801056c:	2008      	movs	r0, #8
 801056e:	f000 fe05 	bl	801117c <memp_malloc>
 8010572:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d102      	bne.n	8010580 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801057a:	f04f 33ff 	mov.w	r3, #4294967295
 801057e:	e017      	b.n	80105b0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	2201      	movs	r2, #1
 8010584:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	687a      	ldr	r2, [r7, #4]
 801058a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	683a      	ldr	r2, [r7, #0]
 8010590:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010592:	68f9      	ldr	r1, [r7, #12]
 8010594:	4808      	ldr	r0, [pc, #32]	@ (80105b8 <tcpip_try_callback+0x70>)
 8010596:	f00c f905 	bl	801c7a4 <sys_mbox_trypost>
 801059a:	4603      	mov	r3, r0
 801059c:	2b00      	cmp	r3, #0
 801059e:	d006      	beq.n	80105ae <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80105a0:	68f9      	ldr	r1, [r7, #12]
 80105a2:	2008      	movs	r0, #8
 80105a4:	f000 fe60 	bl	8011268 <memp_free>
    return ERR_MEM;
 80105a8:	f04f 33ff 	mov.w	r3, #4294967295
 80105ac:	e000      	b.n	80105b0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80105ae:	2300      	movs	r3, #0
}
 80105b0:	4618      	mov	r0, r3
 80105b2:	3710      	adds	r7, #16
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd80      	pop	{r7, pc}
 80105b8:	24009b0c 	.word	0x24009b0c
 80105bc:	0801f5f8 	.word	0x0801f5f8
 80105c0:	0801f670 	.word	0x0801f670
 80105c4:	0801f648 	.word	0x0801f648

080105c8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b084      	sub	sp, #16
 80105cc:	af02      	add	r7, sp, #8
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	6039      	str	r1, [r7, #0]
  lwip_init();
 80105d2:	f000 f92d 	bl	8010830 <lwip_init>

  tcpip_init_done = initfunc;
 80105d6:	4a17      	ldr	r2, [pc, #92]	@ (8010634 <tcpip_init+0x6c>)
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80105dc:	4a16      	ldr	r2, [pc, #88]	@ (8010638 <tcpip_init+0x70>)
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80105e2:	2106      	movs	r1, #6
 80105e4:	4815      	ldr	r0, [pc, #84]	@ (801063c <tcpip_init+0x74>)
 80105e6:	f00c f8c3 	bl	801c770 <sys_mbox_new>
 80105ea:	4603      	mov	r3, r0
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d006      	beq.n	80105fe <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80105f0:	4b13      	ldr	r3, [pc, #76]	@ (8010640 <tcpip_init+0x78>)
 80105f2:	f240 2261 	movw	r2, #609	@ 0x261
 80105f6:	4913      	ldr	r1, [pc, #76]	@ (8010644 <tcpip_init+0x7c>)
 80105f8:	4813      	ldr	r0, [pc, #76]	@ (8010648 <tcpip_init+0x80>)
 80105fa:	f00c fee3 	bl	801d3c4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80105fe:	4813      	ldr	r0, [pc, #76]	@ (801064c <tcpip_init+0x84>)
 8010600:	f00c f938 	bl	801c874 <sys_mutex_new>
 8010604:	4603      	mov	r3, r0
 8010606:	2b00      	cmp	r3, #0
 8010608:	d006      	beq.n	8010618 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801060a:	4b0d      	ldr	r3, [pc, #52]	@ (8010640 <tcpip_init+0x78>)
 801060c:	f240 2265 	movw	r2, #613	@ 0x265
 8010610:	490f      	ldr	r1, [pc, #60]	@ (8010650 <tcpip_init+0x88>)
 8010612:	480d      	ldr	r0, [pc, #52]	@ (8010648 <tcpip_init+0x80>)
 8010614:	f00c fed6 	bl	801d3c4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8010618:	2318      	movs	r3, #24
 801061a:	9300      	str	r3, [sp, #0]
 801061c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010620:	2200      	movs	r2, #0
 8010622:	490c      	ldr	r1, [pc, #48]	@ (8010654 <tcpip_init+0x8c>)
 8010624:	480c      	ldr	r0, [pc, #48]	@ (8010658 <tcpip_init+0x90>)
 8010626:	f00c f957 	bl	801c8d8 <sys_thread_new>
}
 801062a:	bf00      	nop
 801062c:	3708      	adds	r7, #8
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
 8010632:	bf00      	nop
 8010634:	24009b04 	.word	0x24009b04
 8010638:	24009b08 	.word	0x24009b08
 801063c:	24009b0c 	.word	0x24009b0c
 8010640:	0801f5f8 	.word	0x0801f5f8
 8010644:	0801f680 	.word	0x0801f680
 8010648:	0801f648 	.word	0x0801f648
 801064c:	24009b10 	.word	0x24009b10
 8010650:	0801f6a4 	.word	0x0801f6a4
 8010654:	08010385 	.word	0x08010385
 8010658:	0801f6c8 	.word	0x0801f6c8

0801065c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801065c:	b480      	push	{r7}
 801065e:	b083      	sub	sp, #12
 8010660:	af00      	add	r7, sp, #0
 8010662:	4603      	mov	r3, r0
 8010664:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8010666:	88fb      	ldrh	r3, [r7, #6]
 8010668:	021b      	lsls	r3, r3, #8
 801066a:	b21a      	sxth	r2, r3
 801066c:	88fb      	ldrh	r3, [r7, #6]
 801066e:	0a1b      	lsrs	r3, r3, #8
 8010670:	b29b      	uxth	r3, r3
 8010672:	b21b      	sxth	r3, r3
 8010674:	4313      	orrs	r3, r2
 8010676:	b21b      	sxth	r3, r3
 8010678:	b29b      	uxth	r3, r3
}
 801067a:	4618      	mov	r0, r3
 801067c:	370c      	adds	r7, #12
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr

08010686 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8010686:	b480      	push	{r7}
 8010688:	b083      	sub	sp, #12
 801068a:	af00      	add	r7, sp, #0
 801068c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	061a      	lsls	r2, r3, #24
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	021b      	lsls	r3, r3, #8
 8010696:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801069a:	431a      	orrs	r2, r3
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	0a1b      	lsrs	r3, r3, #8
 80106a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80106a4:	431a      	orrs	r2, r3
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	0e1b      	lsrs	r3, r3, #24
 80106aa:	4313      	orrs	r3, r2
}
 80106ac:	4618      	mov	r0, r3
 80106ae:	370c      	adds	r7, #12
 80106b0:	46bd      	mov	sp, r7
 80106b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b6:	4770      	bx	lr

080106b8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80106b8:	b480      	push	{r7}
 80106ba:	b089      	sub	sp, #36	@ 0x24
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
 80106c0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80106c6:	2300      	movs	r3, #0
 80106c8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80106ca:	2300      	movs	r3, #0
 80106cc:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80106ce:	69fb      	ldr	r3, [r7, #28]
 80106d0:	f003 0301 	and.w	r3, r3, #1
 80106d4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80106d6:	693b      	ldr	r3, [r7, #16]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d00d      	beq.n	80106f8 <lwip_standard_chksum+0x40>
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	dd0a      	ble.n	80106f8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80106e2:	69fa      	ldr	r2, [r7, #28]
 80106e4:	1c53      	adds	r3, r2, #1
 80106e6:	61fb      	str	r3, [r7, #28]
 80106e8:	f107 030e 	add.w	r3, r7, #14
 80106ec:	3301      	adds	r3, #1
 80106ee:	7812      	ldrb	r2, [r2, #0]
 80106f0:	701a      	strb	r2, [r3, #0]
    len--;
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	3b01      	subs	r3, #1
 80106f6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80106f8:	69fb      	ldr	r3, [r7, #28]
 80106fa:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80106fc:	e00a      	b.n	8010714 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80106fe:	69bb      	ldr	r3, [r7, #24]
 8010700:	1c9a      	adds	r2, r3, #2
 8010702:	61ba      	str	r2, [r7, #24]
 8010704:	881b      	ldrh	r3, [r3, #0]
 8010706:	461a      	mov	r2, r3
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	4413      	add	r3, r2
 801070c:	617b      	str	r3, [r7, #20]
    len -= 2;
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	3b02      	subs	r3, #2
 8010712:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	2b01      	cmp	r3, #1
 8010718:	dcf1      	bgt.n	80106fe <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	2b00      	cmp	r3, #0
 801071e:	dd04      	ble.n	801072a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8010720:	f107 030e 	add.w	r3, r7, #14
 8010724:	69ba      	ldr	r2, [r7, #24]
 8010726:	7812      	ldrb	r2, [r2, #0]
 8010728:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 801072a:	89fb      	ldrh	r3, [r7, #14]
 801072c:	461a      	mov	r2, r3
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	4413      	add	r3, r2
 8010732:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	0c1a      	lsrs	r2, r3, #16
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	b29b      	uxth	r3, r3
 801073c:	4413      	add	r3, r2
 801073e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	0c1a      	lsrs	r2, r3, #16
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	b29b      	uxth	r3, r3
 8010748:	4413      	add	r3, r2
 801074a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d007      	beq.n	8010762 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	021b      	lsls	r3, r3, #8
 8010756:	b29a      	uxth	r2, r3
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	0a1b      	lsrs	r3, r3, #8
 801075c:	b2db      	uxtb	r3, r3
 801075e:	4313      	orrs	r3, r2
 8010760:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8010762:	697b      	ldr	r3, [r7, #20]
 8010764:	b29b      	uxth	r3, r3
}
 8010766:	4618      	mov	r0, r3
 8010768:	3724      	adds	r7, #36	@ 0x24
 801076a:	46bd      	mov	sp, r7
 801076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010770:	4770      	bx	lr

08010772 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8010772:	b580      	push	{r7, lr}
 8010774:	b082      	sub	sp, #8
 8010776:	af00      	add	r7, sp, #0
 8010778:	6078      	str	r0, [r7, #4]
 801077a:	460b      	mov	r3, r1
 801077c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 801077e:	887b      	ldrh	r3, [r7, #2]
 8010780:	4619      	mov	r1, r3
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	f7ff ff98 	bl	80106b8 <lwip_standard_chksum>
 8010788:	4603      	mov	r3, r0
 801078a:	43db      	mvns	r3, r3
 801078c:	b29b      	uxth	r3, r3
}
 801078e:	4618      	mov	r0, r3
 8010790:	3708      	adds	r7, #8
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}

08010796 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8010796:	b580      	push	{r7, lr}
 8010798:	b086      	sub	sp, #24
 801079a:	af00      	add	r7, sp, #0
 801079c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 801079e:	2300      	movs	r3, #0
 80107a0:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80107a2:	2300      	movs	r3, #0
 80107a4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	613b      	str	r3, [r7, #16]
 80107aa:	e02b      	b.n	8010804 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80107ac:	693b      	ldr	r3, [r7, #16]
 80107ae:	685a      	ldr	r2, [r3, #4]
 80107b0:	693b      	ldr	r3, [r7, #16]
 80107b2:	895b      	ldrh	r3, [r3, #10]
 80107b4:	4619      	mov	r1, r3
 80107b6:	4610      	mov	r0, r2
 80107b8:	f7ff ff7e 	bl	80106b8 <lwip_standard_chksum>
 80107bc:	4603      	mov	r3, r0
 80107be:	461a      	mov	r2, r3
 80107c0:	697b      	ldr	r3, [r7, #20]
 80107c2:	4413      	add	r3, r2
 80107c4:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	0c1a      	lsrs	r2, r3, #16
 80107ca:	697b      	ldr	r3, [r7, #20]
 80107cc:	b29b      	uxth	r3, r3
 80107ce:	4413      	add	r3, r2
 80107d0:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80107d2:	693b      	ldr	r3, [r7, #16]
 80107d4:	895b      	ldrh	r3, [r3, #10]
 80107d6:	f003 0301 	and.w	r3, r3, #1
 80107da:	b29b      	uxth	r3, r3
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d00e      	beq.n	80107fe <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	bf0c      	ite	eq
 80107e6:	2301      	moveq	r3, #1
 80107e8:	2300      	movne	r3, #0
 80107ea:	b2db      	uxtb	r3, r3
 80107ec:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80107ee:	697b      	ldr	r3, [r7, #20]
 80107f0:	021b      	lsls	r3, r3, #8
 80107f2:	b29a      	uxth	r2, r3
 80107f4:	697b      	ldr	r3, [r7, #20]
 80107f6:	0a1b      	lsrs	r3, r3, #8
 80107f8:	b2db      	uxtb	r3, r3
 80107fa:	4313      	orrs	r3, r2
 80107fc:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80107fe:	693b      	ldr	r3, [r7, #16]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	613b      	str	r3, [r7, #16]
 8010804:	693b      	ldr	r3, [r7, #16]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d1d0      	bne.n	80107ac <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d007      	beq.n	8010820 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8010810:	697b      	ldr	r3, [r7, #20]
 8010812:	021b      	lsls	r3, r3, #8
 8010814:	b29a      	uxth	r2, r3
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	0a1b      	lsrs	r3, r3, #8
 801081a:	b2db      	uxtb	r3, r3
 801081c:	4313      	orrs	r3, r2
 801081e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8010820:	697b      	ldr	r3, [r7, #20]
 8010822:	b29b      	uxth	r3, r3
 8010824:	43db      	mvns	r3, r3
 8010826:	b29b      	uxth	r3, r3
}
 8010828:	4618      	mov	r0, r3
 801082a:	3718      	adds	r7, #24
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}

08010830 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b082      	sub	sp, #8
 8010834:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010836:	2300      	movs	r3, #0
 8010838:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801083a:	f00c f80f 	bl	801c85c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801083e:	f000 f8d5 	bl	80109ec <mem_init>
  memp_init();
 8010842:	f000 fc2d 	bl	80110a0 <memp_init>
  pbuf_init();
  netif_init();
 8010846:	f000 fd39 	bl	80112bc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801084a:	f007 f939 	bl	8017ac0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801084e:	f001 fe65 	bl	801251c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010852:	f007 f87b 	bl	801794c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010856:	bf00      	nop
 8010858:	3708      	adds	r7, #8
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}
	...

08010860 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010860:	b480      	push	{r7}
 8010862:	b083      	sub	sp, #12
 8010864:	af00      	add	r7, sp, #0
 8010866:	4603      	mov	r3, r0
 8010868:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801086a:	4b05      	ldr	r3, [pc, #20]	@ (8010880 <ptr_to_mem+0x20>)
 801086c:	681a      	ldr	r2, [r3, #0]
 801086e:	88fb      	ldrh	r3, [r7, #6]
 8010870:	4413      	add	r3, r2
}
 8010872:	4618      	mov	r0, r3
 8010874:	370c      	adds	r7, #12
 8010876:	46bd      	mov	sp, r7
 8010878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087c:	4770      	bx	lr
 801087e:	bf00      	nop
 8010880:	24009b2c 	.word	0x24009b2c

08010884 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010884:	b480      	push	{r7}
 8010886:	b083      	sub	sp, #12
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801088c:	4b05      	ldr	r3, [pc, #20]	@ (80108a4 <mem_to_ptr+0x20>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	687a      	ldr	r2, [r7, #4]
 8010892:	1ad3      	subs	r3, r2, r3
 8010894:	b29b      	uxth	r3, r3
}
 8010896:	4618      	mov	r0, r3
 8010898:	370c      	adds	r7, #12
 801089a:	46bd      	mov	sp, r7
 801089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a0:	4770      	bx	lr
 80108a2:	bf00      	nop
 80108a4:	24009b2c 	.word	0x24009b2c

080108a8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80108a8:	b590      	push	{r4, r7, lr}
 80108aa:	b085      	sub	sp, #20
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80108b0:	4b45      	ldr	r3, [pc, #276]	@ (80109c8 <plug_holes+0x120>)
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	687a      	ldr	r2, [r7, #4]
 80108b6:	429a      	cmp	r2, r3
 80108b8:	d206      	bcs.n	80108c8 <plug_holes+0x20>
 80108ba:	4b44      	ldr	r3, [pc, #272]	@ (80109cc <plug_holes+0x124>)
 80108bc:	f240 12df 	movw	r2, #479	@ 0x1df
 80108c0:	4943      	ldr	r1, [pc, #268]	@ (80109d0 <plug_holes+0x128>)
 80108c2:	4844      	ldr	r0, [pc, #272]	@ (80109d4 <plug_holes+0x12c>)
 80108c4:	f00c fd7e 	bl	801d3c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80108c8:	4b43      	ldr	r3, [pc, #268]	@ (80109d8 <plug_holes+0x130>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	687a      	ldr	r2, [r7, #4]
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d306      	bcc.n	80108e0 <plug_holes+0x38>
 80108d2:	4b3e      	ldr	r3, [pc, #248]	@ (80109cc <plug_holes+0x124>)
 80108d4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80108d8:	4940      	ldr	r1, [pc, #256]	@ (80109dc <plug_holes+0x134>)
 80108da:	483e      	ldr	r0, [pc, #248]	@ (80109d4 <plug_holes+0x12c>)
 80108dc:	f00c fd72 	bl	801d3c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	791b      	ldrb	r3, [r3, #4]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d006      	beq.n	80108f6 <plug_holes+0x4e>
 80108e8:	4b38      	ldr	r3, [pc, #224]	@ (80109cc <plug_holes+0x124>)
 80108ea:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80108ee:	493c      	ldr	r1, [pc, #240]	@ (80109e0 <plug_holes+0x138>)
 80108f0:	4838      	ldr	r0, [pc, #224]	@ (80109d4 <plug_holes+0x12c>)
 80108f2:	f00c fd67 	bl	801d3c4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	881b      	ldrh	r3, [r3, #0]
 80108fa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80108fe:	d906      	bls.n	801090e <plug_holes+0x66>
 8010900:	4b32      	ldr	r3, [pc, #200]	@ (80109cc <plug_holes+0x124>)
 8010902:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8010906:	4937      	ldr	r1, [pc, #220]	@ (80109e4 <plug_holes+0x13c>)
 8010908:	4832      	ldr	r0, [pc, #200]	@ (80109d4 <plug_holes+0x12c>)
 801090a:	f00c fd5b 	bl	801d3c4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	881b      	ldrh	r3, [r3, #0]
 8010912:	4618      	mov	r0, r3
 8010914:	f7ff ffa4 	bl	8010860 <ptr_to_mem>
 8010918:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801091a:	687a      	ldr	r2, [r7, #4]
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	429a      	cmp	r2, r3
 8010920:	d024      	beq.n	801096c <plug_holes+0xc4>
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	791b      	ldrb	r3, [r3, #4]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d120      	bne.n	801096c <plug_holes+0xc4>
 801092a:	4b2b      	ldr	r3, [pc, #172]	@ (80109d8 <plug_holes+0x130>)
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	68fa      	ldr	r2, [r7, #12]
 8010930:	429a      	cmp	r2, r3
 8010932:	d01b      	beq.n	801096c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010934:	4b2c      	ldr	r3, [pc, #176]	@ (80109e8 <plug_holes+0x140>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	68fa      	ldr	r2, [r7, #12]
 801093a:	429a      	cmp	r2, r3
 801093c:	d102      	bne.n	8010944 <plug_holes+0x9c>
      lfree = mem;
 801093e:	4a2a      	ldr	r2, [pc, #168]	@ (80109e8 <plug_holes+0x140>)
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	881a      	ldrh	r2, [r3, #0]
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	881b      	ldrh	r3, [r3, #0]
 8010950:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010954:	d00a      	beq.n	801096c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	881b      	ldrh	r3, [r3, #0]
 801095a:	4618      	mov	r0, r3
 801095c:	f7ff ff80 	bl	8010860 <ptr_to_mem>
 8010960:	4604      	mov	r4, r0
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f7ff ff8e 	bl	8010884 <mem_to_ptr>
 8010968:	4603      	mov	r3, r0
 801096a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	885b      	ldrh	r3, [r3, #2]
 8010970:	4618      	mov	r0, r3
 8010972:	f7ff ff75 	bl	8010860 <ptr_to_mem>
 8010976:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010978:	68ba      	ldr	r2, [r7, #8]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	429a      	cmp	r2, r3
 801097e:	d01f      	beq.n	80109c0 <plug_holes+0x118>
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	791b      	ldrb	r3, [r3, #4]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d11b      	bne.n	80109c0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010988:	4b17      	ldr	r3, [pc, #92]	@ (80109e8 <plug_holes+0x140>)
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	687a      	ldr	r2, [r7, #4]
 801098e:	429a      	cmp	r2, r3
 8010990:	d102      	bne.n	8010998 <plug_holes+0xf0>
      lfree = pmem;
 8010992:	4a15      	ldr	r2, [pc, #84]	@ (80109e8 <plug_holes+0x140>)
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	881a      	ldrh	r2, [r3, #0]
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	881b      	ldrh	r3, [r3, #0]
 80109a4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80109a8:	d00a      	beq.n	80109c0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	881b      	ldrh	r3, [r3, #0]
 80109ae:	4618      	mov	r0, r3
 80109b0:	f7ff ff56 	bl	8010860 <ptr_to_mem>
 80109b4:	4604      	mov	r4, r0
 80109b6:	68b8      	ldr	r0, [r7, #8]
 80109b8:	f7ff ff64 	bl	8010884 <mem_to_ptr>
 80109bc:	4603      	mov	r3, r0
 80109be:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80109c0:	bf00      	nop
 80109c2:	3714      	adds	r7, #20
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd90      	pop	{r4, r7, pc}
 80109c8:	24009b2c 	.word	0x24009b2c
 80109cc:	0801f6d8 	.word	0x0801f6d8
 80109d0:	0801f708 	.word	0x0801f708
 80109d4:	0801f720 	.word	0x0801f720
 80109d8:	24009b30 	.word	0x24009b30
 80109dc:	0801f748 	.word	0x0801f748
 80109e0:	0801f764 	.word	0x0801f764
 80109e4:	0801f780 	.word	0x0801f780
 80109e8:	24009b38 	.word	0x24009b38

080109ec <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80109f2:	4b1d      	ldr	r3, [pc, #116]	@ (8010a68 <mem_init+0x7c>)
 80109f4:	4a1d      	ldr	r2, [pc, #116]	@ (8010a6c <mem_init+0x80>)
 80109f6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80109f8:	4b1b      	ldr	r3, [pc, #108]	@ (8010a68 <mem_init+0x7c>)
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8010a04:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2200      	movs	r2, #0
 8010a0a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2200      	movs	r2, #0
 8010a10:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010a12:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8010a16:	f7ff ff23 	bl	8010860 <ptr_to_mem>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	4a14      	ldr	r2, [pc, #80]	@ (8010a70 <mem_init+0x84>)
 8010a1e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010a20:	4b13      	ldr	r3, [pc, #76]	@ (8010a70 <mem_init+0x84>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	2201      	movs	r2, #1
 8010a26:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010a28:	4b11      	ldr	r3, [pc, #68]	@ (8010a70 <mem_init+0x84>)
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8010a30:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010a32:	4b0f      	ldr	r3, [pc, #60]	@ (8010a70 <mem_init+0x84>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8010a3a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8010a68 <mem_init+0x7c>)
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	4a0c      	ldr	r2, [pc, #48]	@ (8010a74 <mem_init+0x88>)
 8010a42:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010a44:	480c      	ldr	r0, [pc, #48]	@ (8010a78 <mem_init+0x8c>)
 8010a46:	f00b ff15 	bl	801c874 <sys_mutex_new>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d006      	beq.n	8010a5e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8010a50:	4b0a      	ldr	r3, [pc, #40]	@ (8010a7c <mem_init+0x90>)
 8010a52:	f240 221f 	movw	r2, #543	@ 0x21f
 8010a56:	490a      	ldr	r1, [pc, #40]	@ (8010a80 <mem_init+0x94>)
 8010a58:	480a      	ldr	r0, [pc, #40]	@ (8010a84 <mem_init+0x98>)
 8010a5a:	f00c fcb3 	bl	801d3c4 <iprintf>
  }
}
 8010a5e:	bf00      	nop
 8010a60:	3708      	adds	r7, #8
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}
 8010a66:	bf00      	nop
 8010a68:	24009b2c 	.word	0x24009b2c
 8010a6c:	30004000 	.word	0x30004000
 8010a70:	24009b30 	.word	0x24009b30
 8010a74:	24009b38 	.word	0x24009b38
 8010a78:	24009b34 	.word	0x24009b34
 8010a7c:	0801f6d8 	.word	0x0801f6d8
 8010a80:	0801f7ac 	.word	0x0801f7ac
 8010a84:	0801f720 	.word	0x0801f720

08010a88 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b086      	sub	sp, #24
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010a90:	6878      	ldr	r0, [r7, #4]
 8010a92:	f7ff fef7 	bl	8010884 <mem_to_ptr>
 8010a96:	4603      	mov	r3, r0
 8010a98:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	881b      	ldrh	r3, [r3, #0]
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f7ff fede 	bl	8010860 <ptr_to_mem>
 8010aa4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	885b      	ldrh	r3, [r3, #2]
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f7ff fed8 	bl	8010860 <ptr_to_mem>
 8010ab0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	881b      	ldrh	r3, [r3, #0]
 8010ab6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010aba:	d818      	bhi.n	8010aee <mem_link_valid+0x66>
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	885b      	ldrh	r3, [r3, #2]
 8010ac0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010ac4:	d813      	bhi.n	8010aee <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010aca:	8afa      	ldrh	r2, [r7, #22]
 8010acc:	429a      	cmp	r2, r3
 8010ace:	d004      	beq.n	8010ada <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	881b      	ldrh	r3, [r3, #0]
 8010ad4:	8afa      	ldrh	r2, [r7, #22]
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	d109      	bne.n	8010aee <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010ada:	4b08      	ldr	r3, [pc, #32]	@ (8010afc <mem_link_valid+0x74>)
 8010adc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010ade:	693a      	ldr	r2, [r7, #16]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d006      	beq.n	8010af2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010ae4:	693b      	ldr	r3, [r7, #16]
 8010ae6:	885b      	ldrh	r3, [r3, #2]
 8010ae8:	8afa      	ldrh	r2, [r7, #22]
 8010aea:	429a      	cmp	r2, r3
 8010aec:	d001      	beq.n	8010af2 <mem_link_valid+0x6a>
    return 0;
 8010aee:	2300      	movs	r3, #0
 8010af0:	e000      	b.n	8010af4 <mem_link_valid+0x6c>
  }
  return 1;
 8010af2:	2301      	movs	r3, #1
}
 8010af4:	4618      	mov	r0, r3
 8010af6:	3718      	adds	r7, #24
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}
 8010afc:	24009b30 	.word	0x24009b30

08010b00 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b088      	sub	sp, #32
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d070      	beq.n	8010bf0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f003 0303 	and.w	r3, r3, #3
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d00d      	beq.n	8010b34 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8010b18:	4b37      	ldr	r3, [pc, #220]	@ (8010bf8 <mem_free+0xf8>)
 8010b1a:	f240 2273 	movw	r2, #627	@ 0x273
 8010b1e:	4937      	ldr	r1, [pc, #220]	@ (8010bfc <mem_free+0xfc>)
 8010b20:	4837      	ldr	r0, [pc, #220]	@ (8010c00 <mem_free+0x100>)
 8010b22:	f00c fc4f 	bl	801d3c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010b26:	f00b fef7 	bl	801c918 <sys_arch_protect>
 8010b2a:	60f8      	str	r0, [r7, #12]
 8010b2c:	68f8      	ldr	r0, [r7, #12]
 8010b2e:	f00b ff01 	bl	801c934 <sys_arch_unprotect>
    return;
 8010b32:	e05e      	b.n	8010bf2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	3b08      	subs	r3, #8
 8010b38:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8010b3a:	4b32      	ldr	r3, [pc, #200]	@ (8010c04 <mem_free+0x104>)
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	69fa      	ldr	r2, [r7, #28]
 8010b40:	429a      	cmp	r2, r3
 8010b42:	d306      	bcc.n	8010b52 <mem_free+0x52>
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f103 020c 	add.w	r2, r3, #12
 8010b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8010c08 <mem_free+0x108>)
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	429a      	cmp	r2, r3
 8010b50:	d90d      	bls.n	8010b6e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8010b52:	4b29      	ldr	r3, [pc, #164]	@ (8010bf8 <mem_free+0xf8>)
 8010b54:	f240 227f 	movw	r2, #639	@ 0x27f
 8010b58:	492c      	ldr	r1, [pc, #176]	@ (8010c0c <mem_free+0x10c>)
 8010b5a:	4829      	ldr	r0, [pc, #164]	@ (8010c00 <mem_free+0x100>)
 8010b5c:	f00c fc32 	bl	801d3c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010b60:	f00b feda 	bl	801c918 <sys_arch_protect>
 8010b64:	6138      	str	r0, [r7, #16]
 8010b66:	6938      	ldr	r0, [r7, #16]
 8010b68:	f00b fee4 	bl	801c934 <sys_arch_unprotect>
    return;
 8010b6c:	e041      	b.n	8010bf2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010b6e:	4828      	ldr	r0, [pc, #160]	@ (8010c10 <mem_free+0x110>)
 8010b70:	f00b fe96 	bl	801c8a0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8010b74:	69fb      	ldr	r3, [r7, #28]
 8010b76:	791b      	ldrb	r3, [r3, #4]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d110      	bne.n	8010b9e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8010b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8010bf8 <mem_free+0xf8>)
 8010b7e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8010b82:	4924      	ldr	r1, [pc, #144]	@ (8010c14 <mem_free+0x114>)
 8010b84:	481e      	ldr	r0, [pc, #120]	@ (8010c00 <mem_free+0x100>)
 8010b86:	f00c fc1d 	bl	801d3c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010b8a:	4821      	ldr	r0, [pc, #132]	@ (8010c10 <mem_free+0x110>)
 8010b8c:	f00b fe97 	bl	801c8be <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010b90:	f00b fec2 	bl	801c918 <sys_arch_protect>
 8010b94:	6178      	str	r0, [r7, #20]
 8010b96:	6978      	ldr	r0, [r7, #20]
 8010b98:	f00b fecc 	bl	801c934 <sys_arch_unprotect>
    return;
 8010b9c:	e029      	b.n	8010bf2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8010b9e:	69f8      	ldr	r0, [r7, #28]
 8010ba0:	f7ff ff72 	bl	8010a88 <mem_link_valid>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d110      	bne.n	8010bcc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8010baa:	4b13      	ldr	r3, [pc, #76]	@ (8010bf8 <mem_free+0xf8>)
 8010bac:	f240 2295 	movw	r2, #661	@ 0x295
 8010bb0:	4919      	ldr	r1, [pc, #100]	@ (8010c18 <mem_free+0x118>)
 8010bb2:	4813      	ldr	r0, [pc, #76]	@ (8010c00 <mem_free+0x100>)
 8010bb4:	f00c fc06 	bl	801d3c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010bb8:	4815      	ldr	r0, [pc, #84]	@ (8010c10 <mem_free+0x110>)
 8010bba:	f00b fe80 	bl	801c8be <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010bbe:	f00b feab 	bl	801c918 <sys_arch_protect>
 8010bc2:	61b8      	str	r0, [r7, #24]
 8010bc4:	69b8      	ldr	r0, [r7, #24]
 8010bc6:	f00b feb5 	bl	801c934 <sys_arch_unprotect>
    return;
 8010bca:	e012      	b.n	8010bf2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8010bcc:	69fb      	ldr	r3, [r7, #28]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8010bd2:	4b12      	ldr	r3, [pc, #72]	@ (8010c1c <mem_free+0x11c>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	69fa      	ldr	r2, [r7, #28]
 8010bd8:	429a      	cmp	r2, r3
 8010bda:	d202      	bcs.n	8010be2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8010bdc:	4a0f      	ldr	r2, [pc, #60]	@ (8010c1c <mem_free+0x11c>)
 8010bde:	69fb      	ldr	r3, [r7, #28]
 8010be0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010be2:	69f8      	ldr	r0, [r7, #28]
 8010be4:	f7ff fe60 	bl	80108a8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010be8:	4809      	ldr	r0, [pc, #36]	@ (8010c10 <mem_free+0x110>)
 8010bea:	f00b fe68 	bl	801c8be <sys_mutex_unlock>
 8010bee:	e000      	b.n	8010bf2 <mem_free+0xf2>
    return;
 8010bf0:	bf00      	nop
}
 8010bf2:	3720      	adds	r7, #32
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}
 8010bf8:	0801f6d8 	.word	0x0801f6d8
 8010bfc:	0801f7c8 	.word	0x0801f7c8
 8010c00:	0801f720 	.word	0x0801f720
 8010c04:	24009b2c 	.word	0x24009b2c
 8010c08:	24009b30 	.word	0x24009b30
 8010c0c:	0801f7ec 	.word	0x0801f7ec
 8010c10:	24009b34 	.word	0x24009b34
 8010c14:	0801f808 	.word	0x0801f808
 8010c18:	0801f830 	.word	0x0801f830
 8010c1c:	24009b38 	.word	0x24009b38

08010c20 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b088      	sub	sp, #32
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	460b      	mov	r3, r1
 8010c2a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8010c2c:	887b      	ldrh	r3, [r7, #2]
 8010c2e:	3303      	adds	r3, #3
 8010c30:	b29b      	uxth	r3, r3
 8010c32:	f023 0303 	bic.w	r3, r3, #3
 8010c36:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8010c38:	8bfb      	ldrh	r3, [r7, #30]
 8010c3a:	2b0b      	cmp	r3, #11
 8010c3c:	d801      	bhi.n	8010c42 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8010c3e:	230c      	movs	r3, #12
 8010c40:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8010c42:	8bfb      	ldrh	r3, [r7, #30]
 8010c44:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010c48:	d803      	bhi.n	8010c52 <mem_trim+0x32>
 8010c4a:	8bfa      	ldrh	r2, [r7, #30]
 8010c4c:	887b      	ldrh	r3, [r7, #2]
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	d201      	bcs.n	8010c56 <mem_trim+0x36>
    return NULL;
 8010c52:	2300      	movs	r3, #0
 8010c54:	e0d8      	b.n	8010e08 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8010c56:	4b6e      	ldr	r3, [pc, #440]	@ (8010e10 <mem_trim+0x1f0>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	429a      	cmp	r2, r3
 8010c5e:	d304      	bcc.n	8010c6a <mem_trim+0x4a>
 8010c60:	4b6c      	ldr	r3, [pc, #432]	@ (8010e14 <mem_trim+0x1f4>)
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	687a      	ldr	r2, [r7, #4]
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d306      	bcc.n	8010c78 <mem_trim+0x58>
 8010c6a:	4b6b      	ldr	r3, [pc, #428]	@ (8010e18 <mem_trim+0x1f8>)
 8010c6c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8010c70:	496a      	ldr	r1, [pc, #424]	@ (8010e1c <mem_trim+0x1fc>)
 8010c72:	486b      	ldr	r0, [pc, #428]	@ (8010e20 <mem_trim+0x200>)
 8010c74:	f00c fba6 	bl	801d3c4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010c78:	4b65      	ldr	r3, [pc, #404]	@ (8010e10 <mem_trim+0x1f0>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	687a      	ldr	r2, [r7, #4]
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d304      	bcc.n	8010c8c <mem_trim+0x6c>
 8010c82:	4b64      	ldr	r3, [pc, #400]	@ (8010e14 <mem_trim+0x1f4>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	687a      	ldr	r2, [r7, #4]
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d307      	bcc.n	8010c9c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010c8c:	f00b fe44 	bl	801c918 <sys_arch_protect>
 8010c90:	60b8      	str	r0, [r7, #8]
 8010c92:	68b8      	ldr	r0, [r7, #8]
 8010c94:	f00b fe4e 	bl	801c934 <sys_arch_unprotect>
    return rmem;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	e0b5      	b.n	8010e08 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	3b08      	subs	r3, #8
 8010ca0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8010ca2:	69b8      	ldr	r0, [r7, #24]
 8010ca4:	f7ff fdee 	bl	8010884 <mem_to_ptr>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8010cac:	69bb      	ldr	r3, [r7, #24]
 8010cae:	881a      	ldrh	r2, [r3, #0]
 8010cb0:	8afb      	ldrh	r3, [r7, #22]
 8010cb2:	1ad3      	subs	r3, r2, r3
 8010cb4:	b29b      	uxth	r3, r3
 8010cb6:	3b08      	subs	r3, #8
 8010cb8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8010cba:	8bfa      	ldrh	r2, [r7, #30]
 8010cbc:	8abb      	ldrh	r3, [r7, #20]
 8010cbe:	429a      	cmp	r2, r3
 8010cc0:	d906      	bls.n	8010cd0 <mem_trim+0xb0>
 8010cc2:	4b55      	ldr	r3, [pc, #340]	@ (8010e18 <mem_trim+0x1f8>)
 8010cc4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8010cc8:	4956      	ldr	r1, [pc, #344]	@ (8010e24 <mem_trim+0x204>)
 8010cca:	4855      	ldr	r0, [pc, #340]	@ (8010e20 <mem_trim+0x200>)
 8010ccc:	f00c fb7a 	bl	801d3c4 <iprintf>
  if (newsize > size) {
 8010cd0:	8bfa      	ldrh	r2, [r7, #30]
 8010cd2:	8abb      	ldrh	r3, [r7, #20]
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d901      	bls.n	8010cdc <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8010cd8:	2300      	movs	r3, #0
 8010cda:	e095      	b.n	8010e08 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8010cdc:	8bfa      	ldrh	r2, [r7, #30]
 8010cde:	8abb      	ldrh	r3, [r7, #20]
 8010ce0:	429a      	cmp	r2, r3
 8010ce2:	d101      	bne.n	8010ce8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	e08f      	b.n	8010e08 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010ce8:	484f      	ldr	r0, [pc, #316]	@ (8010e28 <mem_trim+0x208>)
 8010cea:	f00b fdd9 	bl	801c8a0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8010cee:	69bb      	ldr	r3, [r7, #24]
 8010cf0:	881b      	ldrh	r3, [r3, #0]
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7ff fdb4 	bl	8010860 <ptr_to_mem>
 8010cf8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8010cfa:	693b      	ldr	r3, [r7, #16]
 8010cfc:	791b      	ldrb	r3, [r3, #4]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d13f      	bne.n	8010d82 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010d02:	69bb      	ldr	r3, [r7, #24]
 8010d04:	881b      	ldrh	r3, [r3, #0]
 8010d06:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010d0a:	d106      	bne.n	8010d1a <mem_trim+0xfa>
 8010d0c:	4b42      	ldr	r3, [pc, #264]	@ (8010e18 <mem_trim+0x1f8>)
 8010d0e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8010d12:	4946      	ldr	r1, [pc, #280]	@ (8010e2c <mem_trim+0x20c>)
 8010d14:	4842      	ldr	r0, [pc, #264]	@ (8010e20 <mem_trim+0x200>)
 8010d16:	f00c fb55 	bl	801d3c4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	881b      	ldrh	r3, [r3, #0]
 8010d1e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010d20:	8afa      	ldrh	r2, [r7, #22]
 8010d22:	8bfb      	ldrh	r3, [r7, #30]
 8010d24:	4413      	add	r3, r2
 8010d26:	b29b      	uxth	r3, r3
 8010d28:	3308      	adds	r3, #8
 8010d2a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8010d2c:	4b40      	ldr	r3, [pc, #256]	@ (8010e30 <mem_trim+0x210>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	693a      	ldr	r2, [r7, #16]
 8010d32:	429a      	cmp	r2, r3
 8010d34:	d106      	bne.n	8010d44 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8010d36:	89fb      	ldrh	r3, [r7, #14]
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f7ff fd91 	bl	8010860 <ptr_to_mem>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	4a3b      	ldr	r2, [pc, #236]	@ (8010e30 <mem_trim+0x210>)
 8010d42:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010d44:	89fb      	ldrh	r3, [r7, #14]
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7ff fd8a 	bl	8010860 <ptr_to_mem>
 8010d4c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	2200      	movs	r2, #0
 8010d52:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010d54:	693b      	ldr	r3, [r7, #16]
 8010d56:	89ba      	ldrh	r2, [r7, #12]
 8010d58:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8010d5a:	693b      	ldr	r3, [r7, #16]
 8010d5c:	8afa      	ldrh	r2, [r7, #22]
 8010d5e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8010d60:	69bb      	ldr	r3, [r7, #24]
 8010d62:	89fa      	ldrh	r2, [r7, #14]
 8010d64:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010d66:	693b      	ldr	r3, [r7, #16]
 8010d68:	881b      	ldrh	r3, [r3, #0]
 8010d6a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010d6e:	d047      	beq.n	8010e00 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010d70:	693b      	ldr	r3, [r7, #16]
 8010d72:	881b      	ldrh	r3, [r3, #0]
 8010d74:	4618      	mov	r0, r3
 8010d76:	f7ff fd73 	bl	8010860 <ptr_to_mem>
 8010d7a:	4602      	mov	r2, r0
 8010d7c:	89fb      	ldrh	r3, [r7, #14]
 8010d7e:	8053      	strh	r3, [r2, #2]
 8010d80:	e03e      	b.n	8010e00 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8010d82:	8bfb      	ldrh	r3, [r7, #30]
 8010d84:	f103 0214 	add.w	r2, r3, #20
 8010d88:	8abb      	ldrh	r3, [r7, #20]
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	d838      	bhi.n	8010e00 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010d8e:	8afa      	ldrh	r2, [r7, #22]
 8010d90:	8bfb      	ldrh	r3, [r7, #30]
 8010d92:	4413      	add	r3, r2
 8010d94:	b29b      	uxth	r3, r3
 8010d96:	3308      	adds	r3, #8
 8010d98:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010d9a:	69bb      	ldr	r3, [r7, #24]
 8010d9c:	881b      	ldrh	r3, [r3, #0]
 8010d9e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010da2:	d106      	bne.n	8010db2 <mem_trim+0x192>
 8010da4:	4b1c      	ldr	r3, [pc, #112]	@ (8010e18 <mem_trim+0x1f8>)
 8010da6:	f240 3216 	movw	r2, #790	@ 0x316
 8010daa:	4920      	ldr	r1, [pc, #128]	@ (8010e2c <mem_trim+0x20c>)
 8010dac:	481c      	ldr	r0, [pc, #112]	@ (8010e20 <mem_trim+0x200>)
 8010dae:	f00c fb09 	bl	801d3c4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8010db2:	89fb      	ldrh	r3, [r7, #14]
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7ff fd53 	bl	8010860 <ptr_to_mem>
 8010dba:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8010dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8010e30 <mem_trim+0x210>)
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	693a      	ldr	r2, [r7, #16]
 8010dc2:	429a      	cmp	r2, r3
 8010dc4:	d202      	bcs.n	8010dcc <mem_trim+0x1ac>
      lfree = mem2;
 8010dc6:	4a1a      	ldr	r2, [pc, #104]	@ (8010e30 <mem_trim+0x210>)
 8010dc8:	693b      	ldr	r3, [r7, #16]
 8010dca:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010dcc:	693b      	ldr	r3, [r7, #16]
 8010dce:	2200      	movs	r2, #0
 8010dd0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8010dd2:	69bb      	ldr	r3, [r7, #24]
 8010dd4:	881a      	ldrh	r2, [r3, #0]
 8010dd6:	693b      	ldr	r3, [r7, #16]
 8010dd8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8010dda:	693b      	ldr	r3, [r7, #16]
 8010ddc:	8afa      	ldrh	r2, [r7, #22]
 8010dde:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010de0:	69bb      	ldr	r3, [r7, #24]
 8010de2:	89fa      	ldrh	r2, [r7, #14]
 8010de4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010de6:	693b      	ldr	r3, [r7, #16]
 8010de8:	881b      	ldrh	r3, [r3, #0]
 8010dea:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010dee:	d007      	beq.n	8010e00 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010df0:	693b      	ldr	r3, [r7, #16]
 8010df2:	881b      	ldrh	r3, [r3, #0]
 8010df4:	4618      	mov	r0, r3
 8010df6:	f7ff fd33 	bl	8010860 <ptr_to_mem>
 8010dfa:	4602      	mov	r2, r0
 8010dfc:	89fb      	ldrh	r3, [r7, #14]
 8010dfe:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010e00:	4809      	ldr	r0, [pc, #36]	@ (8010e28 <mem_trim+0x208>)
 8010e02:	f00b fd5c 	bl	801c8be <sys_mutex_unlock>
  return rmem;
 8010e06:	687b      	ldr	r3, [r7, #4]
}
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3720      	adds	r7, #32
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}
 8010e10:	24009b2c 	.word	0x24009b2c
 8010e14:	24009b30 	.word	0x24009b30
 8010e18:	0801f6d8 	.word	0x0801f6d8
 8010e1c:	0801f864 	.word	0x0801f864
 8010e20:	0801f720 	.word	0x0801f720
 8010e24:	0801f87c 	.word	0x0801f87c
 8010e28:	24009b34 	.word	0x24009b34
 8010e2c:	0801f89c 	.word	0x0801f89c
 8010e30:	24009b38 	.word	0x24009b38

08010e34 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b088      	sub	sp, #32
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8010e3e:	88fb      	ldrh	r3, [r7, #6]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d101      	bne.n	8010e48 <mem_malloc+0x14>
    return NULL;
 8010e44:	2300      	movs	r3, #0
 8010e46:	e0e2      	b.n	801100e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010e48:	88fb      	ldrh	r3, [r7, #6]
 8010e4a:	3303      	adds	r3, #3
 8010e4c:	b29b      	uxth	r3, r3
 8010e4e:	f023 0303 	bic.w	r3, r3, #3
 8010e52:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010e54:	8bbb      	ldrh	r3, [r7, #28]
 8010e56:	2b0b      	cmp	r3, #11
 8010e58:	d801      	bhi.n	8010e5e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010e5a:	230c      	movs	r3, #12
 8010e5c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8010e5e:	8bbb      	ldrh	r3, [r7, #28]
 8010e60:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010e64:	d803      	bhi.n	8010e6e <mem_malloc+0x3a>
 8010e66:	8bba      	ldrh	r2, [r7, #28]
 8010e68:	88fb      	ldrh	r3, [r7, #6]
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d201      	bcs.n	8010e72 <mem_malloc+0x3e>
    return NULL;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	e0cd      	b.n	801100e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8010e72:	4869      	ldr	r0, [pc, #420]	@ (8011018 <mem_malloc+0x1e4>)
 8010e74:	f00b fd14 	bl	801c8a0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010e78:	4b68      	ldr	r3, [pc, #416]	@ (801101c <mem_malloc+0x1e8>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f7ff fd01 	bl	8010884 <mem_to_ptr>
 8010e82:	4603      	mov	r3, r0
 8010e84:	83fb      	strh	r3, [r7, #30]
 8010e86:	e0b7      	b.n	8010ff8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010e88:	8bfb      	ldrh	r3, [r7, #30]
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f7ff fce8 	bl	8010860 <ptr_to_mem>
 8010e90:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	791b      	ldrb	r3, [r3, #4]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	f040 80a7 	bne.w	8010fea <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010e9c:	697b      	ldr	r3, [r7, #20]
 8010e9e:	881b      	ldrh	r3, [r3, #0]
 8010ea0:	461a      	mov	r2, r3
 8010ea2:	8bfb      	ldrh	r3, [r7, #30]
 8010ea4:	1ad3      	subs	r3, r2, r3
 8010ea6:	f1a3 0208 	sub.w	r2, r3, #8
 8010eaa:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010eac:	429a      	cmp	r2, r3
 8010eae:	f0c0 809c 	bcc.w	8010fea <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010eb2:	697b      	ldr	r3, [r7, #20]
 8010eb4:	881b      	ldrh	r3, [r3, #0]
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	8bfb      	ldrh	r3, [r7, #30]
 8010eba:	1ad3      	subs	r3, r2, r3
 8010ebc:	f1a3 0208 	sub.w	r2, r3, #8
 8010ec0:	8bbb      	ldrh	r3, [r7, #28]
 8010ec2:	3314      	adds	r3, #20
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	d333      	bcc.n	8010f30 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010ec8:	8bfa      	ldrh	r2, [r7, #30]
 8010eca:	8bbb      	ldrh	r3, [r7, #28]
 8010ecc:	4413      	add	r3, r2
 8010ece:	b29b      	uxth	r3, r3
 8010ed0:	3308      	adds	r3, #8
 8010ed2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010ed4:	8a7b      	ldrh	r3, [r7, #18]
 8010ed6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010eda:	d106      	bne.n	8010eea <mem_malloc+0xb6>
 8010edc:	4b50      	ldr	r3, [pc, #320]	@ (8011020 <mem_malloc+0x1ec>)
 8010ede:	f240 3287 	movw	r2, #903	@ 0x387
 8010ee2:	4950      	ldr	r1, [pc, #320]	@ (8011024 <mem_malloc+0x1f0>)
 8010ee4:	4850      	ldr	r0, [pc, #320]	@ (8011028 <mem_malloc+0x1f4>)
 8010ee6:	f00c fa6d 	bl	801d3c4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010eea:	8a7b      	ldrh	r3, [r7, #18]
 8010eec:	4618      	mov	r0, r3
 8010eee:	f7ff fcb7 	bl	8010860 <ptr_to_mem>
 8010ef2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	881a      	ldrh	r2, [r3, #0]
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	8bfa      	ldrh	r2, [r7, #30]
 8010f06:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	8a7a      	ldrh	r2, [r7, #18]
 8010f0c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8010f0e:	697b      	ldr	r3, [r7, #20]
 8010f10:	2201      	movs	r2, #1
 8010f12:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	881b      	ldrh	r3, [r3, #0]
 8010f18:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010f1c:	d00b      	beq.n	8010f36 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	881b      	ldrh	r3, [r3, #0]
 8010f22:	4618      	mov	r0, r3
 8010f24:	f7ff fc9c 	bl	8010860 <ptr_to_mem>
 8010f28:	4602      	mov	r2, r0
 8010f2a:	8a7b      	ldrh	r3, [r7, #18]
 8010f2c:	8053      	strh	r3, [r2, #2]
 8010f2e:	e002      	b.n	8010f36 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	2201      	movs	r2, #1
 8010f34:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010f36:	4b39      	ldr	r3, [pc, #228]	@ (801101c <mem_malloc+0x1e8>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	697a      	ldr	r2, [r7, #20]
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	d127      	bne.n	8010f90 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8010f40:	4b36      	ldr	r3, [pc, #216]	@ (801101c <mem_malloc+0x1e8>)
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010f46:	e005      	b.n	8010f54 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010f48:	69bb      	ldr	r3, [r7, #24]
 8010f4a:	881b      	ldrh	r3, [r3, #0]
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7ff fc87 	bl	8010860 <ptr_to_mem>
 8010f52:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010f54:	69bb      	ldr	r3, [r7, #24]
 8010f56:	791b      	ldrb	r3, [r3, #4]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d004      	beq.n	8010f66 <mem_malloc+0x132>
 8010f5c:	4b33      	ldr	r3, [pc, #204]	@ (801102c <mem_malloc+0x1f8>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	69ba      	ldr	r2, [r7, #24]
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d1f0      	bne.n	8010f48 <mem_malloc+0x114>
          }
          lfree = cur;
 8010f66:	4a2d      	ldr	r2, [pc, #180]	@ (801101c <mem_malloc+0x1e8>)
 8010f68:	69bb      	ldr	r3, [r7, #24]
 8010f6a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010f6c:	4b2b      	ldr	r3, [pc, #172]	@ (801101c <mem_malloc+0x1e8>)
 8010f6e:	681a      	ldr	r2, [r3, #0]
 8010f70:	4b2e      	ldr	r3, [pc, #184]	@ (801102c <mem_malloc+0x1f8>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d00b      	beq.n	8010f90 <mem_malloc+0x15c>
 8010f78:	4b28      	ldr	r3, [pc, #160]	@ (801101c <mem_malloc+0x1e8>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	791b      	ldrb	r3, [r3, #4]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d006      	beq.n	8010f90 <mem_malloc+0x15c>
 8010f82:	4b27      	ldr	r3, [pc, #156]	@ (8011020 <mem_malloc+0x1ec>)
 8010f84:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8010f88:	4929      	ldr	r1, [pc, #164]	@ (8011030 <mem_malloc+0x1fc>)
 8010f8a:	4827      	ldr	r0, [pc, #156]	@ (8011028 <mem_malloc+0x1f4>)
 8010f8c:	f00c fa1a 	bl	801d3c4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8010f90:	4821      	ldr	r0, [pc, #132]	@ (8011018 <mem_malloc+0x1e4>)
 8010f92:	f00b fc94 	bl	801c8be <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8010f96:	8bba      	ldrh	r2, [r7, #28]
 8010f98:	697b      	ldr	r3, [r7, #20]
 8010f9a:	4413      	add	r3, r2
 8010f9c:	3308      	adds	r3, #8
 8010f9e:	4a23      	ldr	r2, [pc, #140]	@ (801102c <mem_malloc+0x1f8>)
 8010fa0:	6812      	ldr	r2, [r2, #0]
 8010fa2:	4293      	cmp	r3, r2
 8010fa4:	d906      	bls.n	8010fb4 <mem_malloc+0x180>
 8010fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8011020 <mem_malloc+0x1ec>)
 8010fa8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8010fac:	4921      	ldr	r1, [pc, #132]	@ (8011034 <mem_malloc+0x200>)
 8010fae:	481e      	ldr	r0, [pc, #120]	@ (8011028 <mem_malloc+0x1f4>)
 8010fb0:	f00c fa08 	bl	801d3c4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	f003 0303 	and.w	r3, r3, #3
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d006      	beq.n	8010fcc <mem_malloc+0x198>
 8010fbe:	4b18      	ldr	r3, [pc, #96]	@ (8011020 <mem_malloc+0x1ec>)
 8010fc0:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8010fc4:	491c      	ldr	r1, [pc, #112]	@ (8011038 <mem_malloc+0x204>)
 8010fc6:	4818      	ldr	r0, [pc, #96]	@ (8011028 <mem_malloc+0x1f4>)
 8010fc8:	f00c f9fc 	bl	801d3c4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010fcc:	697b      	ldr	r3, [r7, #20]
 8010fce:	f003 0303 	and.w	r3, r3, #3
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d006      	beq.n	8010fe4 <mem_malloc+0x1b0>
 8010fd6:	4b12      	ldr	r3, [pc, #72]	@ (8011020 <mem_malloc+0x1ec>)
 8010fd8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8010fdc:	4917      	ldr	r1, [pc, #92]	@ (801103c <mem_malloc+0x208>)
 8010fde:	4812      	ldr	r0, [pc, #72]	@ (8011028 <mem_malloc+0x1f4>)
 8010fe0:	f00c f9f0 	bl	801d3c4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010fe4:	697b      	ldr	r3, [r7, #20]
 8010fe6:	3308      	adds	r3, #8
 8010fe8:	e011      	b.n	801100e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8010fea:	8bfb      	ldrh	r3, [r7, #30]
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7ff fc37 	bl	8010860 <ptr_to_mem>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	881b      	ldrh	r3, [r3, #0]
 8010ff6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010ff8:	8bfa      	ldrh	r2, [r7, #30]
 8010ffa:	8bbb      	ldrh	r3, [r7, #28]
 8010ffc:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8011000:	429a      	cmp	r2, r3
 8011002:	f4ff af41 	bcc.w	8010e88 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8011006:	4804      	ldr	r0, [pc, #16]	@ (8011018 <mem_malloc+0x1e4>)
 8011008:	f00b fc59 	bl	801c8be <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801100c:	2300      	movs	r3, #0
}
 801100e:	4618      	mov	r0, r3
 8011010:	3720      	adds	r7, #32
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}
 8011016:	bf00      	nop
 8011018:	24009b34 	.word	0x24009b34
 801101c:	24009b38 	.word	0x24009b38
 8011020:	0801f6d8 	.word	0x0801f6d8
 8011024:	0801f89c 	.word	0x0801f89c
 8011028:	0801f720 	.word	0x0801f720
 801102c:	24009b30 	.word	0x24009b30
 8011030:	0801f8b0 	.word	0x0801f8b0
 8011034:	0801f8cc 	.word	0x0801f8cc
 8011038:	0801f8fc 	.word	0x0801f8fc
 801103c:	0801f92c 	.word	0x0801f92c

08011040 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011040:	b480      	push	{r7}
 8011042:	b085      	sub	sp, #20
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	689b      	ldr	r3, [r3, #8]
 801104c:	2200      	movs	r2, #0
 801104e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	685b      	ldr	r3, [r3, #4]
 8011054:	3303      	adds	r3, #3
 8011056:	f023 0303 	bic.w	r3, r3, #3
 801105a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801105c:	2300      	movs	r3, #0
 801105e:	60fb      	str	r3, [r7, #12]
 8011060:	e011      	b.n	8011086 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	689b      	ldr	r3, [r3, #8]
 8011066:	681a      	ldr	r2, [r3, #0]
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	689b      	ldr	r3, [r3, #8]
 8011070:	68ba      	ldr	r2, [r7, #8]
 8011072:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	881b      	ldrh	r3, [r3, #0]
 8011078:	461a      	mov	r2, r3
 801107a:	68bb      	ldr	r3, [r7, #8]
 801107c:	4413      	add	r3, r2
 801107e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	3301      	adds	r3, #1
 8011084:	60fb      	str	r3, [r7, #12]
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	885b      	ldrh	r3, [r3, #2]
 801108a:	461a      	mov	r2, r3
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	4293      	cmp	r3, r2
 8011090:	dbe7      	blt.n	8011062 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8011092:	bf00      	nop
 8011094:	bf00      	nop
 8011096:	3714      	adds	r7, #20
 8011098:	46bd      	mov	sp, r7
 801109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109e:	4770      	bx	lr

080110a0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b082      	sub	sp, #8
 80110a4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80110a6:	2300      	movs	r3, #0
 80110a8:	80fb      	strh	r3, [r7, #6]
 80110aa:	e009      	b.n	80110c0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80110ac:	88fb      	ldrh	r3, [r7, #6]
 80110ae:	4a08      	ldr	r2, [pc, #32]	@ (80110d0 <memp_init+0x30>)
 80110b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110b4:	4618      	mov	r0, r3
 80110b6:	f7ff ffc3 	bl	8011040 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80110ba:	88fb      	ldrh	r3, [r7, #6]
 80110bc:	3301      	adds	r3, #1
 80110be:	80fb      	strh	r3, [r7, #6]
 80110c0:	88fb      	ldrh	r3, [r7, #6]
 80110c2:	2b0c      	cmp	r3, #12
 80110c4:	d9f2      	bls.n	80110ac <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80110c6:	bf00      	nop
 80110c8:	bf00      	nop
 80110ca:	3708      	adds	r7, #8
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bd80      	pop	{r7, pc}
 80110d0:	0802258c 	.word	0x0802258c

080110d4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b084      	sub	sp, #16
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80110dc:	f00b fc1c 	bl	801c918 <sys_arch_protect>
 80110e0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	689b      	ldr	r3, [r3, #8]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80110ea:	68bb      	ldr	r3, [r7, #8]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d015      	beq.n	801111c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	689b      	ldr	r3, [r3, #8]
 80110f4:	68ba      	ldr	r2, [r7, #8]
 80110f6:	6812      	ldr	r2, [r2, #0]
 80110f8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80110fa:	68bb      	ldr	r3, [r7, #8]
 80110fc:	f003 0303 	and.w	r3, r3, #3
 8011100:	2b00      	cmp	r3, #0
 8011102:	d006      	beq.n	8011112 <do_memp_malloc_pool+0x3e>
 8011104:	4b09      	ldr	r3, [pc, #36]	@ (801112c <do_memp_malloc_pool+0x58>)
 8011106:	f44f 728c 	mov.w	r2, #280	@ 0x118
 801110a:	4909      	ldr	r1, [pc, #36]	@ (8011130 <do_memp_malloc_pool+0x5c>)
 801110c:	4809      	ldr	r0, [pc, #36]	@ (8011134 <do_memp_malloc_pool+0x60>)
 801110e:	f00c f959 	bl	801d3c4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011112:	68f8      	ldr	r0, [r7, #12]
 8011114:	f00b fc0e 	bl	801c934 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	e003      	b.n	8011124 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801111c:	68f8      	ldr	r0, [r7, #12]
 801111e:	f00b fc09 	bl	801c934 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011122:	2300      	movs	r3, #0
}
 8011124:	4618      	mov	r0, r3
 8011126:	3710      	adds	r7, #16
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}
 801112c:	0801f950 	.word	0x0801f950
 8011130:	0801f980 	.word	0x0801f980
 8011134:	0801f9a4 	.word	0x0801f9a4

08011138 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b082      	sub	sp, #8
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d106      	bne.n	8011154 <memp_malloc_pool+0x1c>
 8011146:	4b0a      	ldr	r3, [pc, #40]	@ (8011170 <memp_malloc_pool+0x38>)
 8011148:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 801114c:	4909      	ldr	r1, [pc, #36]	@ (8011174 <memp_malloc_pool+0x3c>)
 801114e:	480a      	ldr	r0, [pc, #40]	@ (8011178 <memp_malloc_pool+0x40>)
 8011150:	f00c f938 	bl	801d3c4 <iprintf>
  if (desc == NULL) {
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d101      	bne.n	801115e <memp_malloc_pool+0x26>
    return NULL;
 801115a:	2300      	movs	r3, #0
 801115c:	e003      	b.n	8011166 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801115e:	6878      	ldr	r0, [r7, #4]
 8011160:	f7ff ffb8 	bl	80110d4 <do_memp_malloc_pool>
 8011164:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8011166:	4618      	mov	r0, r3
 8011168:	3708      	adds	r7, #8
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}
 801116e:	bf00      	nop
 8011170:	0801f950 	.word	0x0801f950
 8011174:	0801f9cc 	.word	0x0801f9cc
 8011178:	0801f9a4 	.word	0x0801f9a4

0801117c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b084      	sub	sp, #16
 8011180:	af00      	add	r7, sp, #0
 8011182:	4603      	mov	r3, r0
 8011184:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8011186:	79fb      	ldrb	r3, [r7, #7]
 8011188:	2b0c      	cmp	r3, #12
 801118a:	d908      	bls.n	801119e <memp_malloc+0x22>
 801118c:	4b0a      	ldr	r3, [pc, #40]	@ (80111b8 <memp_malloc+0x3c>)
 801118e:	f240 1257 	movw	r2, #343	@ 0x157
 8011192:	490a      	ldr	r1, [pc, #40]	@ (80111bc <memp_malloc+0x40>)
 8011194:	480a      	ldr	r0, [pc, #40]	@ (80111c0 <memp_malloc+0x44>)
 8011196:	f00c f915 	bl	801d3c4 <iprintf>
 801119a:	2300      	movs	r3, #0
 801119c:	e008      	b.n	80111b0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801119e:	79fb      	ldrb	r3, [r7, #7]
 80111a0:	4a08      	ldr	r2, [pc, #32]	@ (80111c4 <memp_malloc+0x48>)
 80111a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7ff ff94 	bl	80110d4 <do_memp_malloc_pool>
 80111ac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80111ae:	68fb      	ldr	r3, [r7, #12]
}
 80111b0:	4618      	mov	r0, r3
 80111b2:	3710      	adds	r7, #16
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}
 80111b8:	0801f950 	.word	0x0801f950
 80111bc:	0801f9e0 	.word	0x0801f9e0
 80111c0:	0801f9a4 	.word	0x0801f9a4
 80111c4:	0802258c 	.word	0x0802258c

080111c8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b084      	sub	sp, #16
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
 80111d0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	f003 0303 	and.w	r3, r3, #3
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d006      	beq.n	80111ea <do_memp_free_pool+0x22>
 80111dc:	4b0d      	ldr	r3, [pc, #52]	@ (8011214 <do_memp_free_pool+0x4c>)
 80111de:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80111e2:	490d      	ldr	r1, [pc, #52]	@ (8011218 <do_memp_free_pool+0x50>)
 80111e4:	480d      	ldr	r0, [pc, #52]	@ (801121c <do_memp_free_pool+0x54>)
 80111e6:	f00c f8ed 	bl	801d3c4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80111ee:	f00b fb93 	bl	801c918 <sys_arch_protect>
 80111f2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	689b      	ldr	r3, [r3, #8]
 80111f8:	681a      	ldr	r2, [r3, #0]
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	689b      	ldr	r3, [r3, #8]
 8011202:	68fa      	ldr	r2, [r7, #12]
 8011204:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8011206:	68b8      	ldr	r0, [r7, #8]
 8011208:	f00b fb94 	bl	801c934 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801120c:	bf00      	nop
 801120e:	3710      	adds	r7, #16
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}
 8011214:	0801f950 	.word	0x0801f950
 8011218:	0801fa00 	.word	0x0801fa00
 801121c:	0801f9a4 	.word	0x0801f9a4

08011220 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b082      	sub	sp, #8
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
 8011228:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d106      	bne.n	801123e <memp_free_pool+0x1e>
 8011230:	4b0a      	ldr	r3, [pc, #40]	@ (801125c <memp_free_pool+0x3c>)
 8011232:	f240 1295 	movw	r2, #405	@ 0x195
 8011236:	490a      	ldr	r1, [pc, #40]	@ (8011260 <memp_free_pool+0x40>)
 8011238:	480a      	ldr	r0, [pc, #40]	@ (8011264 <memp_free_pool+0x44>)
 801123a:	f00c f8c3 	bl	801d3c4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d007      	beq.n	8011254 <memp_free_pool+0x34>
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d004      	beq.n	8011254 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801124a:	6839      	ldr	r1, [r7, #0]
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	f7ff ffbb 	bl	80111c8 <do_memp_free_pool>
 8011252:	e000      	b.n	8011256 <memp_free_pool+0x36>
    return;
 8011254:	bf00      	nop
}
 8011256:	3708      	adds	r7, #8
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}
 801125c:	0801f950 	.word	0x0801f950
 8011260:	0801f9cc 	.word	0x0801f9cc
 8011264:	0801f9a4 	.word	0x0801f9a4

08011268 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b082      	sub	sp, #8
 801126c:	af00      	add	r7, sp, #0
 801126e:	4603      	mov	r3, r0
 8011270:	6039      	str	r1, [r7, #0]
 8011272:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8011274:	79fb      	ldrb	r3, [r7, #7]
 8011276:	2b0c      	cmp	r3, #12
 8011278:	d907      	bls.n	801128a <memp_free+0x22>
 801127a:	4b0c      	ldr	r3, [pc, #48]	@ (80112ac <memp_free+0x44>)
 801127c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8011280:	490b      	ldr	r1, [pc, #44]	@ (80112b0 <memp_free+0x48>)
 8011282:	480c      	ldr	r0, [pc, #48]	@ (80112b4 <memp_free+0x4c>)
 8011284:	f00c f89e 	bl	801d3c4 <iprintf>
 8011288:	e00c      	b.n	80112a4 <memp_free+0x3c>

  if (mem == NULL) {
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d008      	beq.n	80112a2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8011290:	79fb      	ldrb	r3, [r7, #7]
 8011292:	4a09      	ldr	r2, [pc, #36]	@ (80112b8 <memp_free+0x50>)
 8011294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011298:	6839      	ldr	r1, [r7, #0]
 801129a:	4618      	mov	r0, r3
 801129c:	f7ff ff94 	bl	80111c8 <do_memp_free_pool>
 80112a0:	e000      	b.n	80112a4 <memp_free+0x3c>
    return;
 80112a2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80112a4:	3708      	adds	r7, #8
 80112a6:	46bd      	mov	sp, r7
 80112a8:	bd80      	pop	{r7, pc}
 80112aa:	bf00      	nop
 80112ac:	0801f950 	.word	0x0801f950
 80112b0:	0801fa20 	.word	0x0801fa20
 80112b4:	0801f9a4 	.word	0x0801f9a4
 80112b8:	0802258c 	.word	0x0802258c

080112bc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80112bc:	b480      	push	{r7}
 80112be:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80112c0:	bf00      	nop
 80112c2:	46bd      	mov	sp, r7
 80112c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c8:	4770      	bx	lr
	...

080112cc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b086      	sub	sp, #24
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	60f8      	str	r0, [r7, #12]
 80112d4:	60b9      	str	r1, [r7, #8]
 80112d6:	607a      	str	r2, [r7, #4]
 80112d8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d108      	bne.n	80112f2 <netif_add+0x26>
 80112e0:	4b5b      	ldr	r3, [pc, #364]	@ (8011450 <netif_add+0x184>)
 80112e2:	f240 1227 	movw	r2, #295	@ 0x127
 80112e6:	495b      	ldr	r1, [pc, #364]	@ (8011454 <netif_add+0x188>)
 80112e8:	485b      	ldr	r0, [pc, #364]	@ (8011458 <netif_add+0x18c>)
 80112ea:	f00c f86b 	bl	801d3c4 <iprintf>
 80112ee:	2300      	movs	r3, #0
 80112f0:	e0a9      	b.n	8011446 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80112f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d108      	bne.n	801130a <netif_add+0x3e>
 80112f8:	4b55      	ldr	r3, [pc, #340]	@ (8011450 <netif_add+0x184>)
 80112fa:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80112fe:	4957      	ldr	r1, [pc, #348]	@ (801145c <netif_add+0x190>)
 8011300:	4855      	ldr	r0, [pc, #340]	@ (8011458 <netif_add+0x18c>)
 8011302:	f00c f85f 	bl	801d3c4 <iprintf>
 8011306:	2300      	movs	r3, #0
 8011308:	e09d      	b.n	8011446 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d101      	bne.n	8011314 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8011310:	4b53      	ldr	r3, [pc, #332]	@ (8011460 <netif_add+0x194>)
 8011312:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d101      	bne.n	801131e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801131a:	4b51      	ldr	r3, [pc, #324]	@ (8011460 <netif_add+0x194>)
 801131c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d101      	bne.n	8011328 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8011324:	4b4e      	ldr	r3, [pc, #312]	@ (8011460 <netif_add+0x194>)
 8011326:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	2200      	movs	r2, #0
 801132c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	2200      	movs	r2, #0
 8011332:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	2200      	movs	r2, #0
 8011338:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	4a49      	ldr	r2, [pc, #292]	@ (8011464 <netif_add+0x198>)
 801133e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	2200      	movs	r2, #0
 8011344:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	2200      	movs	r2, #0
 801134a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	3324      	adds	r3, #36	@ 0x24
 8011352:	2204      	movs	r2, #4
 8011354:	2100      	movs	r1, #0
 8011356:	4618      	mov	r0, r3
 8011358:	f00c f98c 	bl	801d674 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	2200      	movs	r2, #0
 8011360:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	6a3a      	ldr	r2, [r7, #32]
 8011366:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8011368:	4b3f      	ldr	r3, [pc, #252]	@ (8011468 <netif_add+0x19c>)
 801136a:	781a      	ldrb	r2, [r3, #0]
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011376:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	687a      	ldr	r2, [r7, #4]
 801137c:	68b9      	ldr	r1, [r7, #8]
 801137e:	68f8      	ldr	r0, [r7, #12]
 8011380:	f000 f914 	bl	80115ac <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8011384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011386:	68f8      	ldr	r0, [r7, #12]
 8011388:	4798      	blx	r3
 801138a:	4603      	mov	r3, r0
 801138c:	2b00      	cmp	r3, #0
 801138e:	d001      	beq.n	8011394 <netif_add+0xc8>
    return NULL;
 8011390:	2300      	movs	r3, #0
 8011392:	e058      	b.n	8011446 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801139a:	2bff      	cmp	r3, #255	@ 0xff
 801139c:	d103      	bne.n	80113a6 <netif_add+0xda>
        netif->num = 0;
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	2200      	movs	r2, #0
 80113a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 80113a6:	2300      	movs	r3, #0
 80113a8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80113aa:	4b30      	ldr	r3, [pc, #192]	@ (801146c <netif_add+0x1a0>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	617b      	str	r3, [r7, #20]
 80113b0:	e02b      	b.n	801140a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80113b2:	697a      	ldr	r2, [r7, #20]
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d106      	bne.n	80113c8 <netif_add+0xfc>
 80113ba:	4b25      	ldr	r3, [pc, #148]	@ (8011450 <netif_add+0x184>)
 80113bc:	f240 128b 	movw	r2, #395	@ 0x18b
 80113c0:	492b      	ldr	r1, [pc, #172]	@ (8011470 <netif_add+0x1a4>)
 80113c2:	4825      	ldr	r0, [pc, #148]	@ (8011458 <netif_add+0x18c>)
 80113c4:	f00b fffe 	bl	801d3c4 <iprintf>
        num_netifs++;
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	3301      	adds	r3, #1
 80113cc:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80113ce:	693b      	ldr	r3, [r7, #16]
 80113d0:	2bff      	cmp	r3, #255	@ 0xff
 80113d2:	dd06      	ble.n	80113e2 <netif_add+0x116>
 80113d4:	4b1e      	ldr	r3, [pc, #120]	@ (8011450 <netif_add+0x184>)
 80113d6:	f240 128d 	movw	r2, #397	@ 0x18d
 80113da:	4926      	ldr	r1, [pc, #152]	@ (8011474 <netif_add+0x1a8>)
 80113dc:	481e      	ldr	r0, [pc, #120]	@ (8011458 <netif_add+0x18c>)
 80113de:	f00b fff1 	bl	801d3c4 <iprintf>
        if (netif2->num == netif->num) {
 80113e2:	697b      	ldr	r3, [r7, #20]
 80113e4:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80113ee:	429a      	cmp	r2, r3
 80113f0:	d108      	bne.n	8011404 <netif_add+0x138>
          netif->num++;
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80113f8:	3301      	adds	r3, #1
 80113fa:	b2da      	uxtb	r2, r3
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 8011402:	e005      	b.n	8011410 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011404:	697b      	ldr	r3, [r7, #20]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	617b      	str	r3, [r7, #20]
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d1d0      	bne.n	80113b2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d1be      	bne.n	8011394 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801141c:	2bfe      	cmp	r3, #254	@ 0xfe
 801141e:	d103      	bne.n	8011428 <netif_add+0x15c>
    netif_num = 0;
 8011420:	4b11      	ldr	r3, [pc, #68]	@ (8011468 <netif_add+0x19c>)
 8011422:	2200      	movs	r2, #0
 8011424:	701a      	strb	r2, [r3, #0]
 8011426:	e006      	b.n	8011436 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801142e:	3301      	adds	r3, #1
 8011430:	b2da      	uxtb	r2, r3
 8011432:	4b0d      	ldr	r3, [pc, #52]	@ (8011468 <netif_add+0x19c>)
 8011434:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8011436:	4b0d      	ldr	r3, [pc, #52]	@ (801146c <netif_add+0x1a0>)
 8011438:	681a      	ldr	r2, [r3, #0]
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801143e:	4a0b      	ldr	r2, [pc, #44]	@ (801146c <netif_add+0x1a0>)
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8011444:	68fb      	ldr	r3, [r7, #12]
}
 8011446:	4618      	mov	r0, r3
 8011448:	3718      	adds	r7, #24
 801144a:	46bd      	mov	sp, r7
 801144c:	bd80      	pop	{r7, pc}
 801144e:	bf00      	nop
 8011450:	0801fa3c 	.word	0x0801fa3c
 8011454:	0801fad0 	.word	0x0801fad0
 8011458:	0801fa8c 	.word	0x0801fa8c
 801145c:	0801faec 	.word	0x0801faec
 8011460:	08022610 	.word	0x08022610
 8011464:	0801188f 	.word	0x0801188f
 8011468:	2400cc30 	.word	0x2400cc30
 801146c:	2400cc28 	.word	0x2400cc28
 8011470:	0801fb10 	.word	0x0801fb10
 8011474:	0801fb24 	.word	0x0801fb24

08011478 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b082      	sub	sp, #8
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
 8011480:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8011482:	6839      	ldr	r1, [r7, #0]
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f002 fb93 	bl	8013bb0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801148a:	6839      	ldr	r1, [r7, #0]
 801148c:	6878      	ldr	r0, [r7, #4]
 801148e:	f006 ffa3 	bl	80183d8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8011492:	bf00      	nop
 8011494:	3708      	adds	r7, #8
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}
	...

0801149c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b086      	sub	sp, #24
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	60f8      	str	r0, [r7, #12]
 80114a4:	60b9      	str	r1, [r7, #8]
 80114a6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d106      	bne.n	80114bc <netif_do_set_ipaddr+0x20>
 80114ae:	4b1d      	ldr	r3, [pc, #116]	@ (8011524 <netif_do_set_ipaddr+0x88>)
 80114b0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80114b4:	491c      	ldr	r1, [pc, #112]	@ (8011528 <netif_do_set_ipaddr+0x8c>)
 80114b6:	481d      	ldr	r0, [pc, #116]	@ (801152c <netif_do_set_ipaddr+0x90>)
 80114b8:	f00b ff84 	bl	801d3c4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d106      	bne.n	80114d0 <netif_do_set_ipaddr+0x34>
 80114c2:	4b18      	ldr	r3, [pc, #96]	@ (8011524 <netif_do_set_ipaddr+0x88>)
 80114c4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80114c8:	4917      	ldr	r1, [pc, #92]	@ (8011528 <netif_do_set_ipaddr+0x8c>)
 80114ca:	4818      	ldr	r0, [pc, #96]	@ (801152c <netif_do_set_ipaddr+0x90>)
 80114cc:	f00b ff7a 	bl	801d3c4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	681a      	ldr	r2, [r3, #0]
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	3304      	adds	r3, #4
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	429a      	cmp	r2, r3
 80114dc:	d01c      	beq.n	8011518 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	3304      	adds	r3, #4
 80114e8:	681a      	ldr	r2, [r3, #0]
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80114ee:	f107 0314 	add.w	r3, r7, #20
 80114f2:	4619      	mov	r1, r3
 80114f4:	6878      	ldr	r0, [r7, #4]
 80114f6:	f7ff ffbf 	bl	8011478 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d002      	beq.n	8011506 <netif_do_set_ipaddr+0x6a>
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	e000      	b.n	8011508 <netif_do_set_ipaddr+0x6c>
 8011506:	2300      	movs	r3, #0
 8011508:	68fa      	ldr	r2, [r7, #12]
 801150a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801150c:	2101      	movs	r1, #1
 801150e:	68f8      	ldr	r0, [r7, #12]
 8011510:	f000 f8d2 	bl	80116b8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8011514:	2301      	movs	r3, #1
 8011516:	e000      	b.n	801151a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8011518:	2300      	movs	r3, #0
}
 801151a:	4618      	mov	r0, r3
 801151c:	3718      	adds	r7, #24
 801151e:	46bd      	mov	sp, r7
 8011520:	bd80      	pop	{r7, pc}
 8011522:	bf00      	nop
 8011524:	0801fa3c 	.word	0x0801fa3c
 8011528:	0801fb54 	.word	0x0801fb54
 801152c:	0801fa8c 	.word	0x0801fa8c

08011530 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011530:	b480      	push	{r7}
 8011532:	b085      	sub	sp, #20
 8011534:	af00      	add	r7, sp, #0
 8011536:	60f8      	str	r0, [r7, #12]
 8011538:	60b9      	str	r1, [r7, #8]
 801153a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	681a      	ldr	r2, [r3, #0]
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	3308      	adds	r3, #8
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	429a      	cmp	r2, r3
 8011548:	d00a      	beq.n	8011560 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d002      	beq.n	8011556 <netif_do_set_netmask+0x26>
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	e000      	b.n	8011558 <netif_do_set_netmask+0x28>
 8011556:	2300      	movs	r3, #0
 8011558:	68fa      	ldr	r2, [r7, #12]
 801155a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801155c:	2301      	movs	r3, #1
 801155e:	e000      	b.n	8011562 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8011560:	2300      	movs	r3, #0
}
 8011562:	4618      	mov	r0, r3
 8011564:	3714      	adds	r7, #20
 8011566:	46bd      	mov	sp, r7
 8011568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156c:	4770      	bx	lr

0801156e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801156e:	b480      	push	{r7}
 8011570:	b085      	sub	sp, #20
 8011572:	af00      	add	r7, sp, #0
 8011574:	60f8      	str	r0, [r7, #12]
 8011576:	60b9      	str	r1, [r7, #8]
 8011578:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801157a:	68bb      	ldr	r3, [r7, #8]
 801157c:	681a      	ldr	r2, [r3, #0]
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	330c      	adds	r3, #12
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	429a      	cmp	r2, r3
 8011586:	d00a      	beq.n	801159e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d002      	beq.n	8011594 <netif_do_set_gw+0x26>
 801158e:	68bb      	ldr	r3, [r7, #8]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	e000      	b.n	8011596 <netif_do_set_gw+0x28>
 8011594:	2300      	movs	r3, #0
 8011596:	68fa      	ldr	r2, [r7, #12]
 8011598:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801159a:	2301      	movs	r3, #1
 801159c:	e000      	b.n	80115a0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801159e:	2300      	movs	r3, #0
}
 80115a0:	4618      	mov	r0, r3
 80115a2:	3714      	adds	r7, #20
 80115a4:	46bd      	mov	sp, r7
 80115a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115aa:	4770      	bx	lr

080115ac <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b088      	sub	sp, #32
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	60f8      	str	r0, [r7, #12]
 80115b4:	60b9      	str	r1, [r7, #8]
 80115b6:	607a      	str	r2, [r7, #4]
 80115b8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80115ba:	2300      	movs	r3, #0
 80115bc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80115be:	2300      	movs	r3, #0
 80115c0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80115c2:	68bb      	ldr	r3, [r7, #8]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d101      	bne.n	80115cc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80115c8:	4b1c      	ldr	r3, [pc, #112]	@ (801163c <netif_set_addr+0x90>)
 80115ca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d101      	bne.n	80115d6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80115d2:	4b1a      	ldr	r3, [pc, #104]	@ (801163c <netif_set_addr+0x90>)
 80115d4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d101      	bne.n	80115e0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80115dc:	4b17      	ldr	r3, [pc, #92]	@ (801163c <netif_set_addr+0x90>)
 80115de:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80115e0:	68bb      	ldr	r3, [r7, #8]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d003      	beq.n	80115ee <netif_set_addr+0x42>
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d101      	bne.n	80115f2 <netif_set_addr+0x46>
 80115ee:	2301      	movs	r3, #1
 80115f0:	e000      	b.n	80115f4 <netif_set_addr+0x48>
 80115f2:	2300      	movs	r3, #0
 80115f4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80115f6:	697b      	ldr	r3, [r7, #20]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d006      	beq.n	801160a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80115fc:	f107 0310 	add.w	r3, r7, #16
 8011600:	461a      	mov	r2, r3
 8011602:	68b9      	ldr	r1, [r7, #8]
 8011604:	68f8      	ldr	r0, [r7, #12]
 8011606:	f7ff ff49 	bl	801149c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801160a:	69fa      	ldr	r2, [r7, #28]
 801160c:	6879      	ldr	r1, [r7, #4]
 801160e:	68f8      	ldr	r0, [r7, #12]
 8011610:	f7ff ff8e 	bl	8011530 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8011614:	69ba      	ldr	r2, [r7, #24]
 8011616:	6839      	ldr	r1, [r7, #0]
 8011618:	68f8      	ldr	r0, [r7, #12]
 801161a:	f7ff ffa8 	bl	801156e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801161e:	697b      	ldr	r3, [r7, #20]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d106      	bne.n	8011632 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011624:	f107 0310 	add.w	r3, r7, #16
 8011628:	461a      	mov	r2, r3
 801162a:	68b9      	ldr	r1, [r7, #8]
 801162c:	68f8      	ldr	r0, [r7, #12]
 801162e:	f7ff ff35 	bl	801149c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8011632:	bf00      	nop
 8011634:	3720      	adds	r7, #32
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}
 801163a:	bf00      	nop
 801163c:	08022610 	.word	0x08022610

08011640 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011640:	b480      	push	{r7}
 8011642:	b083      	sub	sp, #12
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8011648:	4a04      	ldr	r2, [pc, #16]	@ (801165c <netif_set_default+0x1c>)
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801164e:	bf00      	nop
 8011650:	370c      	adds	r7, #12
 8011652:	46bd      	mov	sp, r7
 8011654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011658:	4770      	bx	lr
 801165a:	bf00      	nop
 801165c:	2400cc2c 	.word	0x2400cc2c

08011660 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b082      	sub	sp, #8
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d107      	bne.n	801167e <netif_set_up+0x1e>
 801166e:	4b0f      	ldr	r3, [pc, #60]	@ (80116ac <netif_set_up+0x4c>)
 8011670:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8011674:	490e      	ldr	r1, [pc, #56]	@ (80116b0 <netif_set_up+0x50>)
 8011676:	480f      	ldr	r0, [pc, #60]	@ (80116b4 <netif_set_up+0x54>)
 8011678:	f00b fea4 	bl	801d3c4 <iprintf>
 801167c:	e013      	b.n	80116a6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011684:	f003 0301 	and.w	r3, r3, #1
 8011688:	2b00      	cmp	r3, #0
 801168a:	d10c      	bne.n	80116a6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011692:	f043 0301 	orr.w	r3, r3, #1
 8011696:	b2da      	uxtb	r2, r3
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801169e:	2103      	movs	r1, #3
 80116a0:	6878      	ldr	r0, [r7, #4]
 80116a2:	f000 f809 	bl	80116b8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80116a6:	3708      	adds	r7, #8
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}
 80116ac:	0801fa3c 	.word	0x0801fa3c
 80116b0:	0801fbc4 	.word	0x0801fbc4
 80116b4:	0801fa8c 	.word	0x0801fa8c

080116b8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b082      	sub	sp, #8
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
 80116c0:	460b      	mov	r3, r1
 80116c2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d106      	bne.n	80116d8 <netif_issue_reports+0x20>
 80116ca:	4b18      	ldr	r3, [pc, #96]	@ (801172c <netif_issue_reports+0x74>)
 80116cc:	f240 326d 	movw	r2, #877	@ 0x36d
 80116d0:	4917      	ldr	r1, [pc, #92]	@ (8011730 <netif_issue_reports+0x78>)
 80116d2:	4818      	ldr	r0, [pc, #96]	@ (8011734 <netif_issue_reports+0x7c>)
 80116d4:	f00b fe76 	bl	801d3c4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80116de:	f003 0304 	and.w	r3, r3, #4
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d01e      	beq.n	8011724 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80116ec:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d017      	beq.n	8011724 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80116f4:	78fb      	ldrb	r3, [r7, #3]
 80116f6:	f003 0301 	and.w	r3, r3, #1
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d013      	beq.n	8011726 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	3304      	adds	r3, #4
 8011702:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011704:	2b00      	cmp	r3, #0
 8011706:	d00e      	beq.n	8011726 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801170e:	f003 0308 	and.w	r3, r3, #8
 8011712:	2b00      	cmp	r3, #0
 8011714:	d007      	beq.n	8011726 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	3304      	adds	r3, #4
 801171a:	4619      	mov	r1, r3
 801171c:	6878      	ldr	r0, [r7, #4]
 801171e:	f009 fc57 	bl	801afd0 <etharp_request>
 8011722:	e000      	b.n	8011726 <netif_issue_reports+0x6e>
    return;
 8011724:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8011726:	3708      	adds	r7, #8
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}
 801172c:	0801fa3c 	.word	0x0801fa3c
 8011730:	0801fbe0 	.word	0x0801fbe0
 8011734:	0801fa8c 	.word	0x0801fa8c

08011738 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b082      	sub	sp, #8
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d107      	bne.n	8011756 <netif_set_down+0x1e>
 8011746:	4b12      	ldr	r3, [pc, #72]	@ (8011790 <netif_set_down+0x58>)
 8011748:	f240 329b 	movw	r2, #923	@ 0x39b
 801174c:	4911      	ldr	r1, [pc, #68]	@ (8011794 <netif_set_down+0x5c>)
 801174e:	4812      	ldr	r0, [pc, #72]	@ (8011798 <netif_set_down+0x60>)
 8011750:	f00b fe38 	bl	801d3c4 <iprintf>
 8011754:	e019      	b.n	801178a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801175c:	f003 0301 	and.w	r3, r3, #1
 8011760:	2b00      	cmp	r3, #0
 8011762:	d012      	beq.n	801178a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801176a:	f023 0301 	bic.w	r3, r3, #1
 801176e:	b2da      	uxtb	r2, r3
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801177c:	f003 0308 	and.w	r3, r3, #8
 8011780:	2b00      	cmp	r3, #0
 8011782:	d002      	beq.n	801178a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011784:	6878      	ldr	r0, [r7, #4]
 8011786:	f008 ffdd 	bl	801a744 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801178a:	3708      	adds	r7, #8
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}
 8011790:	0801fa3c 	.word	0x0801fa3c
 8011794:	0801fc04 	.word	0x0801fc04
 8011798:	0801fa8c 	.word	0x0801fa8c

0801179c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b082      	sub	sp, #8
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d107      	bne.n	80117ba <netif_set_link_up+0x1e>
 80117aa:	4b15      	ldr	r3, [pc, #84]	@ (8011800 <netif_set_link_up+0x64>)
 80117ac:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80117b0:	4914      	ldr	r1, [pc, #80]	@ (8011804 <netif_set_link_up+0x68>)
 80117b2:	4815      	ldr	r0, [pc, #84]	@ (8011808 <netif_set_link_up+0x6c>)
 80117b4:	f00b fe06 	bl	801d3c4 <iprintf>
 80117b8:	e01e      	b.n	80117f8 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80117c0:	f003 0304 	and.w	r3, r3, #4
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d117      	bne.n	80117f8 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80117ce:	f043 0304 	orr.w	r3, r3, #4
 80117d2:	b2da      	uxtb	r2, r3
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f007 fa28 	bl	8018c30 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80117e0:	2103      	movs	r1, #3
 80117e2:	6878      	ldr	r0, [r7, #4]
 80117e4:	f7ff ff68 	bl	80116b8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	69db      	ldr	r3, [r3, #28]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d003      	beq.n	80117f8 <netif_set_link_up+0x5c>
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	69db      	ldr	r3, [r3, #28]
 80117f4:	6878      	ldr	r0, [r7, #4]
 80117f6:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80117f8:	3708      	adds	r7, #8
 80117fa:	46bd      	mov	sp, r7
 80117fc:	bd80      	pop	{r7, pc}
 80117fe:	bf00      	nop
 8011800:	0801fa3c 	.word	0x0801fa3c
 8011804:	0801fc24 	.word	0x0801fc24
 8011808:	0801fa8c 	.word	0x0801fa8c

0801180c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b082      	sub	sp, #8
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d107      	bne.n	801182a <netif_set_link_down+0x1e>
 801181a:	4b11      	ldr	r3, [pc, #68]	@ (8011860 <netif_set_link_down+0x54>)
 801181c:	f240 4206 	movw	r2, #1030	@ 0x406
 8011820:	4910      	ldr	r1, [pc, #64]	@ (8011864 <netif_set_link_down+0x58>)
 8011822:	4811      	ldr	r0, [pc, #68]	@ (8011868 <netif_set_link_down+0x5c>)
 8011824:	f00b fdce 	bl	801d3c4 <iprintf>
 8011828:	e017      	b.n	801185a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011830:	f003 0304 	and.w	r3, r3, #4
 8011834:	2b00      	cmp	r3, #0
 8011836:	d010      	beq.n	801185a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801183e:	f023 0304 	bic.w	r3, r3, #4
 8011842:	b2da      	uxtb	r2, r3
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	69db      	ldr	r3, [r3, #28]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d003      	beq.n	801185a <netif_set_link_down+0x4e>
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	69db      	ldr	r3, [r3, #28]
 8011856:	6878      	ldr	r0, [r7, #4]
 8011858:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801185a:	3708      	adds	r7, #8
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}
 8011860:	0801fa3c 	.word	0x0801fa3c
 8011864:	0801fc48 	.word	0x0801fc48
 8011868:	0801fa8c 	.word	0x0801fa8c

0801186c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801186c:	b480      	push	{r7}
 801186e:	b083      	sub	sp, #12
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
 8011874:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d002      	beq.n	8011882 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	683a      	ldr	r2, [r7, #0]
 8011880:	61da      	str	r2, [r3, #28]
  }
}
 8011882:	bf00      	nop
 8011884:	370c      	adds	r7, #12
 8011886:	46bd      	mov	sp, r7
 8011888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188c:	4770      	bx	lr

0801188e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801188e:	b480      	push	{r7}
 8011890:	b085      	sub	sp, #20
 8011892:	af00      	add	r7, sp, #0
 8011894:	60f8      	str	r0, [r7, #12]
 8011896:	60b9      	str	r1, [r7, #8]
 8011898:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801189a:	f06f 030b 	mvn.w	r3, #11
}
 801189e:	4618      	mov	r0, r3
 80118a0:	3714      	adds	r7, #20
 80118a2:	46bd      	mov	sp, r7
 80118a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a8:	4770      	bx	lr
	...

080118ac <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80118ac:	b480      	push	{r7}
 80118ae:	b085      	sub	sp, #20
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	4603      	mov	r3, r0
 80118b4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80118b6:	79fb      	ldrb	r3, [r7, #7]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d013      	beq.n	80118e4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80118bc:	4b0d      	ldr	r3, [pc, #52]	@ (80118f4 <netif_get_by_index+0x48>)
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	60fb      	str	r3, [r7, #12]
 80118c2:	e00c      	b.n	80118de <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80118ca:	3301      	adds	r3, #1
 80118cc:	b2db      	uxtb	r3, r3
 80118ce:	79fa      	ldrb	r2, [r7, #7]
 80118d0:	429a      	cmp	r2, r3
 80118d2:	d101      	bne.n	80118d8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	e006      	b.n	80118e6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	60fb      	str	r3, [r7, #12]
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d1ef      	bne.n	80118c4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80118e4:	2300      	movs	r3, #0
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	3714      	adds	r7, #20
 80118ea:	46bd      	mov	sp, r7
 80118ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f0:	4770      	bx	lr
 80118f2:	bf00      	nop
 80118f4:	2400cc28 	.word	0x2400cc28

080118f8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b082      	sub	sp, #8
 80118fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80118fe:	f00b f80b 	bl	801c918 <sys_arch_protect>
 8011902:	6038      	str	r0, [r7, #0]
 8011904:	4b0d      	ldr	r3, [pc, #52]	@ (801193c <pbuf_free_ooseq+0x44>)
 8011906:	2200      	movs	r2, #0
 8011908:	701a      	strb	r2, [r3, #0]
 801190a:	6838      	ldr	r0, [r7, #0]
 801190c:	f00b f812 	bl	801c934 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011910:	4b0b      	ldr	r3, [pc, #44]	@ (8011940 <pbuf_free_ooseq+0x48>)
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	607b      	str	r3, [r7, #4]
 8011916:	e00a      	b.n	801192e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801191c:	2b00      	cmp	r3, #0
 801191e:	d003      	beq.n	8011928 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	f002 f983 	bl	8013c2c <tcp_free_ooseq>
      return;
 8011926:	e005      	b.n	8011934 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	68db      	ldr	r3, [r3, #12]
 801192c:	607b      	str	r3, [r7, #4]
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d1f1      	bne.n	8011918 <pbuf_free_ooseq+0x20>
    }
  }
}
 8011934:	3708      	adds	r7, #8
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}
 801193a:	bf00      	nop
 801193c:	2400cc31 	.word	0x2400cc31
 8011940:	2400cc40 	.word	0x2400cc40

08011944 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b082      	sub	sp, #8
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801194c:	f7ff ffd4 	bl	80118f8 <pbuf_free_ooseq>
}
 8011950:	bf00      	nop
 8011952:	3708      	adds	r7, #8
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}

08011958 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b082      	sub	sp, #8
 801195c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801195e:	f00a ffdb 	bl	801c918 <sys_arch_protect>
 8011962:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8011964:	4b0f      	ldr	r3, [pc, #60]	@ (80119a4 <pbuf_pool_is_empty+0x4c>)
 8011966:	781b      	ldrb	r3, [r3, #0]
 8011968:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801196a:	4b0e      	ldr	r3, [pc, #56]	@ (80119a4 <pbuf_pool_is_empty+0x4c>)
 801196c:	2201      	movs	r2, #1
 801196e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8011970:	6878      	ldr	r0, [r7, #4]
 8011972:	f00a ffdf 	bl	801c934 <sys_arch_unprotect>

  if (!queued) {
 8011976:	78fb      	ldrb	r3, [r7, #3]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d10f      	bne.n	801199c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801197c:	2100      	movs	r1, #0
 801197e:	480a      	ldr	r0, [pc, #40]	@ (80119a8 <pbuf_pool_is_empty+0x50>)
 8011980:	f7fe fde2 	bl	8010548 <tcpip_try_callback>
 8011984:	4603      	mov	r3, r0
 8011986:	2b00      	cmp	r3, #0
 8011988:	d008      	beq.n	801199c <pbuf_pool_is_empty+0x44>
 801198a:	f00a ffc5 	bl	801c918 <sys_arch_protect>
 801198e:	6078      	str	r0, [r7, #4]
 8011990:	4b04      	ldr	r3, [pc, #16]	@ (80119a4 <pbuf_pool_is_empty+0x4c>)
 8011992:	2200      	movs	r2, #0
 8011994:	701a      	strb	r2, [r3, #0]
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	f00a ffcc 	bl	801c934 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801199c:	bf00      	nop
 801199e:	3708      	adds	r7, #8
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd80      	pop	{r7, pc}
 80119a4:	2400cc31 	.word	0x2400cc31
 80119a8:	08011945 	.word	0x08011945

080119ac <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80119ac:	b480      	push	{r7}
 80119ae:	b085      	sub	sp, #20
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	60f8      	str	r0, [r7, #12]
 80119b4:	60b9      	str	r1, [r7, #8]
 80119b6:	4611      	mov	r1, r2
 80119b8:	461a      	mov	r2, r3
 80119ba:	460b      	mov	r3, r1
 80119bc:	80fb      	strh	r3, [r7, #6]
 80119be:	4613      	mov	r3, r2
 80119c0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	2200      	movs	r2, #0
 80119c6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	68ba      	ldr	r2, [r7, #8]
 80119cc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	88fa      	ldrh	r2, [r7, #6]
 80119d2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	88ba      	ldrh	r2, [r7, #4]
 80119d8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80119da:	8b3b      	ldrh	r3, [r7, #24]
 80119dc:	b2da      	uxtb	r2, r3
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	7f3a      	ldrb	r2, [r7, #28]
 80119e6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	2201      	movs	r2, #1
 80119ec:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	2200      	movs	r2, #0
 80119f2:	73da      	strb	r2, [r3, #15]
}
 80119f4:	bf00      	nop
 80119f6:	3714      	adds	r7, #20
 80119f8:	46bd      	mov	sp, r7
 80119fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fe:	4770      	bx	lr

08011a00 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b08c      	sub	sp, #48	@ 0x30
 8011a04:	af02      	add	r7, sp, #8
 8011a06:	4603      	mov	r3, r0
 8011a08:	71fb      	strb	r3, [r7, #7]
 8011a0a:	460b      	mov	r3, r1
 8011a0c:	80bb      	strh	r3, [r7, #4]
 8011a0e:	4613      	mov	r3, r2
 8011a10:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011a12:	79fb      	ldrb	r3, [r7, #7]
 8011a14:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8011a16:	887b      	ldrh	r3, [r7, #2]
 8011a18:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8011a1c:	d07f      	beq.n	8011b1e <pbuf_alloc+0x11e>
 8011a1e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8011a22:	f300 80c8 	bgt.w	8011bb6 <pbuf_alloc+0x1b6>
 8011a26:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8011a2a:	d010      	beq.n	8011a4e <pbuf_alloc+0x4e>
 8011a2c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8011a30:	f300 80c1 	bgt.w	8011bb6 <pbuf_alloc+0x1b6>
 8011a34:	2b01      	cmp	r3, #1
 8011a36:	d002      	beq.n	8011a3e <pbuf_alloc+0x3e>
 8011a38:	2b41      	cmp	r3, #65	@ 0x41
 8011a3a:	f040 80bc 	bne.w	8011bb6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8011a3e:	887a      	ldrh	r2, [r7, #2]
 8011a40:	88bb      	ldrh	r3, [r7, #4]
 8011a42:	4619      	mov	r1, r3
 8011a44:	2000      	movs	r0, #0
 8011a46:	f000 f8d1 	bl	8011bec <pbuf_alloc_reference>
 8011a4a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8011a4c:	e0bd      	b.n	8011bca <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8011a4e:	2300      	movs	r3, #0
 8011a50:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8011a52:	2300      	movs	r3, #0
 8011a54:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8011a56:	88bb      	ldrh	r3, [r7, #4]
 8011a58:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8011a5a:	200c      	movs	r0, #12
 8011a5c:	f7ff fb8e 	bl	801117c <memp_malloc>
 8011a60:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8011a62:	693b      	ldr	r3, [r7, #16]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d109      	bne.n	8011a7c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8011a68:	f7ff ff76 	bl	8011958 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8011a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d002      	beq.n	8011a78 <pbuf_alloc+0x78>
            pbuf_free(p);
 8011a72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011a74:	f000 faa8 	bl	8011fc8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011a78:	2300      	movs	r3, #0
 8011a7a:	e0a7      	b.n	8011bcc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8011a7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011a7e:	3303      	adds	r3, #3
 8011a80:	b29b      	uxth	r3, r3
 8011a82:	f023 0303 	bic.w	r3, r3, #3
 8011a86:	b29b      	uxth	r3, r3
 8011a88:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8011a8c:	b29b      	uxth	r3, r3
 8011a8e:	8b7a      	ldrh	r2, [r7, #26]
 8011a90:	4293      	cmp	r3, r2
 8011a92:	bf28      	it	cs
 8011a94:	4613      	movcs	r3, r2
 8011a96:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011a98:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011a9a:	3310      	adds	r3, #16
 8011a9c:	693a      	ldr	r2, [r7, #16]
 8011a9e:	4413      	add	r3, r2
 8011aa0:	3303      	adds	r3, #3
 8011aa2:	f023 0303 	bic.w	r3, r3, #3
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	89f9      	ldrh	r1, [r7, #14]
 8011aaa:	8b7a      	ldrh	r2, [r7, #26]
 8011aac:	2300      	movs	r3, #0
 8011aae:	9301      	str	r3, [sp, #4]
 8011ab0:	887b      	ldrh	r3, [r7, #2]
 8011ab2:	9300      	str	r3, [sp, #0]
 8011ab4:	460b      	mov	r3, r1
 8011ab6:	4601      	mov	r1, r0
 8011ab8:	6938      	ldr	r0, [r7, #16]
 8011aba:	f7ff ff77 	bl	80119ac <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011abe:	693b      	ldr	r3, [r7, #16]
 8011ac0:	685b      	ldr	r3, [r3, #4]
 8011ac2:	f003 0303 	and.w	r3, r3, #3
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d006      	beq.n	8011ad8 <pbuf_alloc+0xd8>
 8011aca:	4b42      	ldr	r3, [pc, #264]	@ (8011bd4 <pbuf_alloc+0x1d4>)
 8011acc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011ad0:	4941      	ldr	r1, [pc, #260]	@ (8011bd8 <pbuf_alloc+0x1d8>)
 8011ad2:	4842      	ldr	r0, [pc, #264]	@ (8011bdc <pbuf_alloc+0x1dc>)
 8011ad4:	f00b fc76 	bl	801d3c4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011ad8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011ada:	3303      	adds	r3, #3
 8011adc:	f023 0303 	bic.w	r3, r3, #3
 8011ae0:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8011ae4:	d106      	bne.n	8011af4 <pbuf_alloc+0xf4>
 8011ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8011bd4 <pbuf_alloc+0x1d4>)
 8011ae8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8011aec:	493c      	ldr	r1, [pc, #240]	@ (8011be0 <pbuf_alloc+0x1e0>)
 8011aee:	483b      	ldr	r0, [pc, #236]	@ (8011bdc <pbuf_alloc+0x1dc>)
 8011af0:	f00b fc68 	bl	801d3c4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d102      	bne.n	8011b00 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8011afa:	693b      	ldr	r3, [r7, #16]
 8011afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8011afe:	e002      	b.n	8011b06 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011b00:	69fb      	ldr	r3, [r7, #28]
 8011b02:	693a      	ldr	r2, [r7, #16]
 8011b04:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8011b0a:	8b7a      	ldrh	r2, [r7, #26]
 8011b0c:	89fb      	ldrh	r3, [r7, #14]
 8011b0e:	1ad3      	subs	r3, r2, r3
 8011b10:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8011b12:	2300      	movs	r3, #0
 8011b14:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8011b16:	8b7b      	ldrh	r3, [r7, #26]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d19e      	bne.n	8011a5a <pbuf_alloc+0x5a>
      break;
 8011b1c:	e055      	b.n	8011bca <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8011b1e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011b20:	3303      	adds	r3, #3
 8011b22:	b29b      	uxth	r3, r3
 8011b24:	f023 0303 	bic.w	r3, r3, #3
 8011b28:	b29a      	uxth	r2, r3
 8011b2a:	88bb      	ldrh	r3, [r7, #4]
 8011b2c:	3303      	adds	r3, #3
 8011b2e:	b29b      	uxth	r3, r3
 8011b30:	f023 0303 	bic.w	r3, r3, #3
 8011b34:	b29b      	uxth	r3, r3
 8011b36:	4413      	add	r3, r2
 8011b38:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8011b3a:	8b3b      	ldrh	r3, [r7, #24]
 8011b3c:	3310      	adds	r3, #16
 8011b3e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011b40:	8b3a      	ldrh	r2, [r7, #24]
 8011b42:	88bb      	ldrh	r3, [r7, #4]
 8011b44:	3303      	adds	r3, #3
 8011b46:	f023 0303 	bic.w	r3, r3, #3
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	d306      	bcc.n	8011b5c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8011b4e:	8afa      	ldrh	r2, [r7, #22]
 8011b50:	88bb      	ldrh	r3, [r7, #4]
 8011b52:	3303      	adds	r3, #3
 8011b54:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	d201      	bcs.n	8011b60 <pbuf_alloc+0x160>
        return NULL;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	e035      	b.n	8011bcc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011b60:	8afb      	ldrh	r3, [r7, #22]
 8011b62:	4618      	mov	r0, r3
 8011b64:	f7ff f966 	bl	8010e34 <mem_malloc>
 8011b68:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8011b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d101      	bne.n	8011b74 <pbuf_alloc+0x174>
        return NULL;
 8011b70:	2300      	movs	r3, #0
 8011b72:	e02b      	b.n	8011bcc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011b74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011b76:	3310      	adds	r3, #16
 8011b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b7a:	4413      	add	r3, r2
 8011b7c:	3303      	adds	r3, #3
 8011b7e:	f023 0303 	bic.w	r3, r3, #3
 8011b82:	4618      	mov	r0, r3
 8011b84:	88b9      	ldrh	r1, [r7, #4]
 8011b86:	88ba      	ldrh	r2, [r7, #4]
 8011b88:	2300      	movs	r3, #0
 8011b8a:	9301      	str	r3, [sp, #4]
 8011b8c:	887b      	ldrh	r3, [r7, #2]
 8011b8e:	9300      	str	r3, [sp, #0]
 8011b90:	460b      	mov	r3, r1
 8011b92:	4601      	mov	r1, r0
 8011b94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011b96:	f7ff ff09 	bl	80119ac <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8011b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b9c:	685b      	ldr	r3, [r3, #4]
 8011b9e:	f003 0303 	and.w	r3, r3, #3
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d010      	beq.n	8011bc8 <pbuf_alloc+0x1c8>
 8011ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8011bd4 <pbuf_alloc+0x1d4>)
 8011ba8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8011bac:	490d      	ldr	r1, [pc, #52]	@ (8011be4 <pbuf_alloc+0x1e4>)
 8011bae:	480b      	ldr	r0, [pc, #44]	@ (8011bdc <pbuf_alloc+0x1dc>)
 8011bb0:	f00b fc08 	bl	801d3c4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011bb4:	e008      	b.n	8011bc8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8011bb6:	4b07      	ldr	r3, [pc, #28]	@ (8011bd4 <pbuf_alloc+0x1d4>)
 8011bb8:	f240 1227 	movw	r2, #295	@ 0x127
 8011bbc:	490a      	ldr	r1, [pc, #40]	@ (8011be8 <pbuf_alloc+0x1e8>)
 8011bbe:	4807      	ldr	r0, [pc, #28]	@ (8011bdc <pbuf_alloc+0x1dc>)
 8011bc0:	f00b fc00 	bl	801d3c4 <iprintf>
      return NULL;
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	e001      	b.n	8011bcc <pbuf_alloc+0x1cc>
      break;
 8011bc8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8011bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	3728      	adds	r7, #40	@ 0x28
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}
 8011bd4:	0801fc6c 	.word	0x0801fc6c
 8011bd8:	0801fc9c 	.word	0x0801fc9c
 8011bdc:	0801fccc 	.word	0x0801fccc
 8011be0:	0801fcf4 	.word	0x0801fcf4
 8011be4:	0801fd28 	.word	0x0801fd28
 8011be8:	0801fd54 	.word	0x0801fd54

08011bec <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b086      	sub	sp, #24
 8011bf0:	af02      	add	r7, sp, #8
 8011bf2:	6078      	str	r0, [r7, #4]
 8011bf4:	460b      	mov	r3, r1
 8011bf6:	807b      	strh	r3, [r7, #2]
 8011bf8:	4613      	mov	r3, r2
 8011bfa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011bfc:	883b      	ldrh	r3, [r7, #0]
 8011bfe:	2b41      	cmp	r3, #65	@ 0x41
 8011c00:	d009      	beq.n	8011c16 <pbuf_alloc_reference+0x2a>
 8011c02:	883b      	ldrh	r3, [r7, #0]
 8011c04:	2b01      	cmp	r3, #1
 8011c06:	d006      	beq.n	8011c16 <pbuf_alloc_reference+0x2a>
 8011c08:	4b0f      	ldr	r3, [pc, #60]	@ (8011c48 <pbuf_alloc_reference+0x5c>)
 8011c0a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8011c0e:	490f      	ldr	r1, [pc, #60]	@ (8011c4c <pbuf_alloc_reference+0x60>)
 8011c10:	480f      	ldr	r0, [pc, #60]	@ (8011c50 <pbuf_alloc_reference+0x64>)
 8011c12:	f00b fbd7 	bl	801d3c4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8011c16:	200b      	movs	r0, #11
 8011c18:	f7ff fab0 	bl	801117c <memp_malloc>
 8011c1c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d101      	bne.n	8011c28 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8011c24:	2300      	movs	r3, #0
 8011c26:	e00b      	b.n	8011c40 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011c28:	8879      	ldrh	r1, [r7, #2]
 8011c2a:	887a      	ldrh	r2, [r7, #2]
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	9301      	str	r3, [sp, #4]
 8011c30:	883b      	ldrh	r3, [r7, #0]
 8011c32:	9300      	str	r3, [sp, #0]
 8011c34:	460b      	mov	r3, r1
 8011c36:	6879      	ldr	r1, [r7, #4]
 8011c38:	68f8      	ldr	r0, [r7, #12]
 8011c3a:	f7ff feb7 	bl	80119ac <pbuf_init_alloced_pbuf>
  return p;
 8011c3e:	68fb      	ldr	r3, [r7, #12]
}
 8011c40:	4618      	mov	r0, r3
 8011c42:	3710      	adds	r7, #16
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd80      	pop	{r7, pc}
 8011c48:	0801fc6c 	.word	0x0801fc6c
 8011c4c:	0801fd70 	.word	0x0801fd70
 8011c50:	0801fccc 	.word	0x0801fccc

08011c54 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b088      	sub	sp, #32
 8011c58:	af02      	add	r7, sp, #8
 8011c5a:	607b      	str	r3, [r7, #4]
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	73fb      	strb	r3, [r7, #15]
 8011c60:	460b      	mov	r3, r1
 8011c62:	81bb      	strh	r3, [r7, #12]
 8011c64:	4613      	mov	r3, r2
 8011c66:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011c68:	7bfb      	ldrb	r3, [r7, #15]
 8011c6a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011c6c:	8a7b      	ldrh	r3, [r7, #18]
 8011c6e:	3303      	adds	r3, #3
 8011c70:	f023 0203 	bic.w	r2, r3, #3
 8011c74:	89bb      	ldrh	r3, [r7, #12]
 8011c76:	441a      	add	r2, r3
 8011c78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	d901      	bls.n	8011c82 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8011c7e:	2300      	movs	r3, #0
 8011c80:	e018      	b.n	8011cb4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8011c82:	6a3b      	ldr	r3, [r7, #32]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d007      	beq.n	8011c98 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011c88:	8a7b      	ldrh	r3, [r7, #18]
 8011c8a:	3303      	adds	r3, #3
 8011c8c:	f023 0303 	bic.w	r3, r3, #3
 8011c90:	6a3a      	ldr	r2, [r7, #32]
 8011c92:	4413      	add	r3, r2
 8011c94:	617b      	str	r3, [r7, #20]
 8011c96:	e001      	b.n	8011c9c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011c98:	2300      	movs	r3, #0
 8011c9a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8011c9c:	6878      	ldr	r0, [r7, #4]
 8011c9e:	89b9      	ldrh	r1, [r7, #12]
 8011ca0:	89ba      	ldrh	r2, [r7, #12]
 8011ca2:	2302      	movs	r3, #2
 8011ca4:	9301      	str	r3, [sp, #4]
 8011ca6:	897b      	ldrh	r3, [r7, #10]
 8011ca8:	9300      	str	r3, [sp, #0]
 8011caa:	460b      	mov	r3, r1
 8011cac:	6979      	ldr	r1, [r7, #20]
 8011cae:	f7ff fe7d 	bl	80119ac <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8011cb2:	687b      	ldr	r3, [r7, #4]
}
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	3718      	adds	r7, #24
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	bd80      	pop	{r7, pc}

08011cbc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b084      	sub	sp, #16
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
 8011cc4:	460b      	mov	r3, r1
 8011cc6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d106      	bne.n	8011cdc <pbuf_realloc+0x20>
 8011cce:	4b3a      	ldr	r3, [pc, #232]	@ (8011db8 <pbuf_realloc+0xfc>)
 8011cd0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8011cd4:	4939      	ldr	r1, [pc, #228]	@ (8011dbc <pbuf_realloc+0x100>)
 8011cd6:	483a      	ldr	r0, [pc, #232]	@ (8011dc0 <pbuf_realloc+0x104>)
 8011cd8:	f00b fb74 	bl	801d3c4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	891b      	ldrh	r3, [r3, #8]
 8011ce0:	887a      	ldrh	r2, [r7, #2]
 8011ce2:	429a      	cmp	r2, r3
 8011ce4:	d263      	bcs.n	8011dae <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	891a      	ldrh	r2, [r3, #8]
 8011cea:	887b      	ldrh	r3, [r7, #2]
 8011cec:	1ad3      	subs	r3, r2, r3
 8011cee:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8011cf0:	887b      	ldrh	r3, [r7, #2]
 8011cf2:	817b      	strh	r3, [r7, #10]
  q = p;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011cf8:	e018      	b.n	8011d2c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	895b      	ldrh	r3, [r3, #10]
 8011cfe:	897a      	ldrh	r2, [r7, #10]
 8011d00:	1ad3      	subs	r3, r2, r3
 8011d02:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	891a      	ldrh	r2, [r3, #8]
 8011d08:	893b      	ldrh	r3, [r7, #8]
 8011d0a:	1ad3      	subs	r3, r2, r3
 8011d0c:	b29a      	uxth	r2, r3
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d106      	bne.n	8011d2c <pbuf_realloc+0x70>
 8011d1e:	4b26      	ldr	r3, [pc, #152]	@ (8011db8 <pbuf_realloc+0xfc>)
 8011d20:	f240 12af 	movw	r2, #431	@ 0x1af
 8011d24:	4927      	ldr	r1, [pc, #156]	@ (8011dc4 <pbuf_realloc+0x108>)
 8011d26:	4826      	ldr	r0, [pc, #152]	@ (8011dc0 <pbuf_realloc+0x104>)
 8011d28:	f00b fb4c 	bl	801d3c4 <iprintf>
  while (rem_len > q->len) {
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	895b      	ldrh	r3, [r3, #10]
 8011d30:	897a      	ldrh	r2, [r7, #10]
 8011d32:	429a      	cmp	r2, r3
 8011d34:	d8e1      	bhi.n	8011cfa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	7b1b      	ldrb	r3, [r3, #12]
 8011d3a:	f003 030f 	and.w	r3, r3, #15
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d121      	bne.n	8011d86 <pbuf_realloc+0xca>
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	895b      	ldrh	r3, [r3, #10]
 8011d46:	897a      	ldrh	r2, [r7, #10]
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	d01c      	beq.n	8011d86 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	7b5b      	ldrb	r3, [r3, #13]
 8011d50:	f003 0302 	and.w	r3, r3, #2
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d116      	bne.n	8011d86 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	685a      	ldr	r2, [r3, #4]
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	1ad3      	subs	r3, r2, r3
 8011d60:	b29a      	uxth	r2, r3
 8011d62:	897b      	ldrh	r3, [r7, #10]
 8011d64:	4413      	add	r3, r2
 8011d66:	b29b      	uxth	r3, r3
 8011d68:	4619      	mov	r1, r3
 8011d6a:	68f8      	ldr	r0, [r7, #12]
 8011d6c:	f7fe ff58 	bl	8010c20 <mem_trim>
 8011d70:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d106      	bne.n	8011d86 <pbuf_realloc+0xca>
 8011d78:	4b0f      	ldr	r3, [pc, #60]	@ (8011db8 <pbuf_realloc+0xfc>)
 8011d7a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8011d7e:	4912      	ldr	r1, [pc, #72]	@ (8011dc8 <pbuf_realloc+0x10c>)
 8011d80:	480f      	ldr	r0, [pc, #60]	@ (8011dc0 <pbuf_realloc+0x104>)
 8011d82:	f00b fb1f 	bl	801d3c4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	897a      	ldrh	r2, [r7, #10]
 8011d8a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	895a      	ldrh	r2, [r3, #10]
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d004      	beq.n	8011da6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	4618      	mov	r0, r3
 8011da2:	f000 f911 	bl	8011fc8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	2200      	movs	r2, #0
 8011daa:	601a      	str	r2, [r3, #0]
 8011dac:	e000      	b.n	8011db0 <pbuf_realloc+0xf4>
    return;
 8011dae:	bf00      	nop

}
 8011db0:	3710      	adds	r7, #16
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd80      	pop	{r7, pc}
 8011db6:	bf00      	nop
 8011db8:	0801fc6c 	.word	0x0801fc6c
 8011dbc:	0801fd84 	.word	0x0801fd84
 8011dc0:	0801fccc 	.word	0x0801fccc
 8011dc4:	0801fd9c 	.word	0x0801fd9c
 8011dc8:	0801fdb4 	.word	0x0801fdb4

08011dcc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b086      	sub	sp, #24
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	60f8      	str	r0, [r7, #12]
 8011dd4:	60b9      	str	r1, [r7, #8]
 8011dd6:	4613      	mov	r3, r2
 8011dd8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d106      	bne.n	8011dee <pbuf_add_header_impl+0x22>
 8011de0:	4b2b      	ldr	r3, [pc, #172]	@ (8011e90 <pbuf_add_header_impl+0xc4>)
 8011de2:	f240 12df 	movw	r2, #479	@ 0x1df
 8011de6:	492b      	ldr	r1, [pc, #172]	@ (8011e94 <pbuf_add_header_impl+0xc8>)
 8011de8:	482b      	ldr	r0, [pc, #172]	@ (8011e98 <pbuf_add_header_impl+0xcc>)
 8011dea:	f00b faeb 	bl	801d3c4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d003      	beq.n	8011dfc <pbuf_add_header_impl+0x30>
 8011df4:	68bb      	ldr	r3, [r7, #8]
 8011df6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011dfa:	d301      	bcc.n	8011e00 <pbuf_add_header_impl+0x34>
    return 1;
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	e043      	b.n	8011e88 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d101      	bne.n	8011e0a <pbuf_add_header_impl+0x3e>
    return 0;
 8011e06:	2300      	movs	r3, #0
 8011e08:	e03e      	b.n	8011e88 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8011e0a:	68bb      	ldr	r3, [r7, #8]
 8011e0c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	891a      	ldrh	r2, [r3, #8]
 8011e12:	8a7b      	ldrh	r3, [r7, #18]
 8011e14:	4413      	add	r3, r2
 8011e16:	b29b      	uxth	r3, r3
 8011e18:	8a7a      	ldrh	r2, [r7, #18]
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	d901      	bls.n	8011e22 <pbuf_add_header_impl+0x56>
    return 1;
 8011e1e:	2301      	movs	r3, #1
 8011e20:	e032      	b.n	8011e88 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	7b1b      	ldrb	r3, [r3, #12]
 8011e26:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011e28:	8a3b      	ldrh	r3, [r7, #16]
 8011e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d00c      	beq.n	8011e4c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	685a      	ldr	r2, [r3, #4]
 8011e36:	68bb      	ldr	r3, [r7, #8]
 8011e38:	425b      	negs	r3, r3
 8011e3a:	4413      	add	r3, r2
 8011e3c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	3310      	adds	r3, #16
 8011e42:	697a      	ldr	r2, [r7, #20]
 8011e44:	429a      	cmp	r2, r3
 8011e46:	d20d      	bcs.n	8011e64 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011e48:	2301      	movs	r3, #1
 8011e4a:	e01d      	b.n	8011e88 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011e4c:	79fb      	ldrb	r3, [r7, #7]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d006      	beq.n	8011e60 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	685a      	ldr	r2, [r3, #4]
 8011e56:	68bb      	ldr	r3, [r7, #8]
 8011e58:	425b      	negs	r3, r3
 8011e5a:	4413      	add	r3, r2
 8011e5c:	617b      	str	r3, [r7, #20]
 8011e5e:	e001      	b.n	8011e64 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011e60:	2301      	movs	r3, #1
 8011e62:	e011      	b.n	8011e88 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	697a      	ldr	r2, [r7, #20]
 8011e68:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	895a      	ldrh	r2, [r3, #10]
 8011e6e:	8a7b      	ldrh	r3, [r7, #18]
 8011e70:	4413      	add	r3, r2
 8011e72:	b29a      	uxth	r2, r3
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	891a      	ldrh	r2, [r3, #8]
 8011e7c:	8a7b      	ldrh	r3, [r7, #18]
 8011e7e:	4413      	add	r3, r2
 8011e80:	b29a      	uxth	r2, r3
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	811a      	strh	r2, [r3, #8]


  return 0;
 8011e86:	2300      	movs	r3, #0
}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	3718      	adds	r7, #24
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	bd80      	pop	{r7, pc}
 8011e90:	0801fc6c 	.word	0x0801fc6c
 8011e94:	0801fdd0 	.word	0x0801fdd0
 8011e98:	0801fccc 	.word	0x0801fccc

08011e9c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b082      	sub	sp, #8
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
 8011ea4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	6839      	ldr	r1, [r7, #0]
 8011eaa:	6878      	ldr	r0, [r7, #4]
 8011eac:	f7ff ff8e 	bl	8011dcc <pbuf_add_header_impl>
 8011eb0:	4603      	mov	r3, r0
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3708      	adds	r7, #8
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}
	...

08011ebc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b084      	sub	sp, #16
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
 8011ec4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d106      	bne.n	8011eda <pbuf_remove_header+0x1e>
 8011ecc:	4b20      	ldr	r3, [pc, #128]	@ (8011f50 <pbuf_remove_header+0x94>)
 8011ece:	f240 224b 	movw	r2, #587	@ 0x24b
 8011ed2:	4920      	ldr	r1, [pc, #128]	@ (8011f54 <pbuf_remove_header+0x98>)
 8011ed4:	4820      	ldr	r0, [pc, #128]	@ (8011f58 <pbuf_remove_header+0x9c>)
 8011ed6:	f00b fa75 	bl	801d3c4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d003      	beq.n	8011ee8 <pbuf_remove_header+0x2c>
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011ee6:	d301      	bcc.n	8011eec <pbuf_remove_header+0x30>
    return 1;
 8011ee8:	2301      	movs	r3, #1
 8011eea:	e02c      	b.n	8011f46 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d101      	bne.n	8011ef6 <pbuf_remove_header+0x3a>
    return 0;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	e027      	b.n	8011f46 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011ef6:	683b      	ldr	r3, [r7, #0]
 8011ef8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	895b      	ldrh	r3, [r3, #10]
 8011efe:	89fa      	ldrh	r2, [r7, #14]
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d908      	bls.n	8011f16 <pbuf_remove_header+0x5a>
 8011f04:	4b12      	ldr	r3, [pc, #72]	@ (8011f50 <pbuf_remove_header+0x94>)
 8011f06:	f240 2255 	movw	r2, #597	@ 0x255
 8011f0a:	4914      	ldr	r1, [pc, #80]	@ (8011f5c <pbuf_remove_header+0xa0>)
 8011f0c:	4812      	ldr	r0, [pc, #72]	@ (8011f58 <pbuf_remove_header+0x9c>)
 8011f0e:	f00b fa59 	bl	801d3c4 <iprintf>
 8011f12:	2301      	movs	r3, #1
 8011f14:	e017      	b.n	8011f46 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	685b      	ldr	r3, [r3, #4]
 8011f1a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	685a      	ldr	r2, [r3, #4]
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	441a      	add	r2, r3
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	895a      	ldrh	r2, [r3, #10]
 8011f2c:	89fb      	ldrh	r3, [r7, #14]
 8011f2e:	1ad3      	subs	r3, r2, r3
 8011f30:	b29a      	uxth	r2, r3
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	891a      	ldrh	r2, [r3, #8]
 8011f3a:	89fb      	ldrh	r3, [r7, #14]
 8011f3c:	1ad3      	subs	r3, r2, r3
 8011f3e:	b29a      	uxth	r2, r3
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011f44:	2300      	movs	r3, #0
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3710      	adds	r7, #16
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}
 8011f4e:	bf00      	nop
 8011f50:	0801fc6c 	.word	0x0801fc6c
 8011f54:	0801fdd0 	.word	0x0801fdd0
 8011f58:	0801fccc 	.word	0x0801fccc
 8011f5c:	0801fddc 	.word	0x0801fddc

08011f60 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b082      	sub	sp, #8
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
 8011f68:	460b      	mov	r3, r1
 8011f6a:	807b      	strh	r3, [r7, #2]
 8011f6c:	4613      	mov	r3, r2
 8011f6e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011f70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	da08      	bge.n	8011f8a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011f78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011f7c:	425b      	negs	r3, r3
 8011f7e:	4619      	mov	r1, r3
 8011f80:	6878      	ldr	r0, [r7, #4]
 8011f82:	f7ff ff9b 	bl	8011ebc <pbuf_remove_header>
 8011f86:	4603      	mov	r3, r0
 8011f88:	e007      	b.n	8011f9a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8011f8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011f8e:	787a      	ldrb	r2, [r7, #1]
 8011f90:	4619      	mov	r1, r3
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f7ff ff1a 	bl	8011dcc <pbuf_add_header_impl>
 8011f98:	4603      	mov	r3, r0
  }
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	3708      	adds	r7, #8
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}

08011fa2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8011fa2:	b580      	push	{r7, lr}
 8011fa4:	b082      	sub	sp, #8
 8011fa6:	af00      	add	r7, sp, #0
 8011fa8:	6078      	str	r0, [r7, #4]
 8011faa:	460b      	mov	r3, r1
 8011fac:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011fae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011fb2:	2201      	movs	r2, #1
 8011fb4:	4619      	mov	r1, r3
 8011fb6:	6878      	ldr	r0, [r7, #4]
 8011fb8:	f7ff ffd2 	bl	8011f60 <pbuf_header_impl>
 8011fbc:	4603      	mov	r3, r0
}
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	3708      	adds	r7, #8
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	bd80      	pop	{r7, pc}
	...

08011fc8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b088      	sub	sp, #32
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d10b      	bne.n	8011fee <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d106      	bne.n	8011fea <pbuf_free+0x22>
 8011fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80120cc <pbuf_free+0x104>)
 8011fde:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8011fe2:	493b      	ldr	r1, [pc, #236]	@ (80120d0 <pbuf_free+0x108>)
 8011fe4:	483b      	ldr	r0, [pc, #236]	@ (80120d4 <pbuf_free+0x10c>)
 8011fe6:	f00b f9ed 	bl	801d3c4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8011fea:	2300      	movs	r3, #0
 8011fec:	e069      	b.n	80120c2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011ff2:	e062      	b.n	80120ba <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8011ff4:	f00a fc90 	bl	801c918 <sys_arch_protect>
 8011ff8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	7b9b      	ldrb	r3, [r3, #14]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d106      	bne.n	8012010 <pbuf_free+0x48>
 8012002:	4b32      	ldr	r3, [pc, #200]	@ (80120cc <pbuf_free+0x104>)
 8012004:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8012008:	4933      	ldr	r1, [pc, #204]	@ (80120d8 <pbuf_free+0x110>)
 801200a:	4832      	ldr	r0, [pc, #200]	@ (80120d4 <pbuf_free+0x10c>)
 801200c:	f00b f9da 	bl	801d3c4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	7b9b      	ldrb	r3, [r3, #14]
 8012014:	3b01      	subs	r3, #1
 8012016:	b2da      	uxtb	r2, r3
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	739a      	strb	r2, [r3, #14]
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	7b9b      	ldrb	r3, [r3, #14]
 8012020:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8012022:	69b8      	ldr	r0, [r7, #24]
 8012024:	f00a fc86 	bl	801c934 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012028:	7dfb      	ldrb	r3, [r7, #23]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d143      	bne.n	80120b6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	7b1b      	ldrb	r3, [r3, #12]
 8012038:	f003 030f 	and.w	r3, r3, #15
 801203c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	7b5b      	ldrb	r3, [r3, #13]
 8012042:	f003 0302 	and.w	r3, r3, #2
 8012046:	2b00      	cmp	r3, #0
 8012048:	d011      	beq.n	801206e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	691b      	ldr	r3, [r3, #16]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d106      	bne.n	8012064 <pbuf_free+0x9c>
 8012056:	4b1d      	ldr	r3, [pc, #116]	@ (80120cc <pbuf_free+0x104>)
 8012058:	f240 22ff 	movw	r2, #767	@ 0x2ff
 801205c:	491f      	ldr	r1, [pc, #124]	@ (80120dc <pbuf_free+0x114>)
 801205e:	481d      	ldr	r0, [pc, #116]	@ (80120d4 <pbuf_free+0x10c>)
 8012060:	f00b f9b0 	bl	801d3c4 <iprintf>
        pc->custom_free_function(p);
 8012064:	68bb      	ldr	r3, [r7, #8]
 8012066:	691b      	ldr	r3, [r3, #16]
 8012068:	6878      	ldr	r0, [r7, #4]
 801206a:	4798      	blx	r3
 801206c:	e01d      	b.n	80120aa <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801206e:	7bfb      	ldrb	r3, [r7, #15]
 8012070:	2b02      	cmp	r3, #2
 8012072:	d104      	bne.n	801207e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8012074:	6879      	ldr	r1, [r7, #4]
 8012076:	200c      	movs	r0, #12
 8012078:	f7ff f8f6 	bl	8011268 <memp_free>
 801207c:	e015      	b.n	80120aa <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801207e:	7bfb      	ldrb	r3, [r7, #15]
 8012080:	2b01      	cmp	r3, #1
 8012082:	d104      	bne.n	801208e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8012084:	6879      	ldr	r1, [r7, #4]
 8012086:	200b      	movs	r0, #11
 8012088:	f7ff f8ee 	bl	8011268 <memp_free>
 801208c:	e00d      	b.n	80120aa <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801208e:	7bfb      	ldrb	r3, [r7, #15]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d103      	bne.n	801209c <pbuf_free+0xd4>
          mem_free(p);
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f7fe fd33 	bl	8010b00 <mem_free>
 801209a:	e006      	b.n	80120aa <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801209c:	4b0b      	ldr	r3, [pc, #44]	@ (80120cc <pbuf_free+0x104>)
 801209e:	f240 320f 	movw	r2, #783	@ 0x30f
 80120a2:	490f      	ldr	r1, [pc, #60]	@ (80120e0 <pbuf_free+0x118>)
 80120a4:	480b      	ldr	r0, [pc, #44]	@ (80120d4 <pbuf_free+0x10c>)
 80120a6:	f00b f98d 	bl	801d3c4 <iprintf>
        }
      }
      count++;
 80120aa:	7ffb      	ldrb	r3, [r7, #31]
 80120ac:	3301      	adds	r3, #1
 80120ae:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80120b0:	693b      	ldr	r3, [r7, #16]
 80120b2:	607b      	str	r3, [r7, #4]
 80120b4:	e001      	b.n	80120ba <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80120b6:	2300      	movs	r3, #0
 80120b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d199      	bne.n	8011ff4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80120c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80120c2:	4618      	mov	r0, r3
 80120c4:	3720      	adds	r7, #32
 80120c6:	46bd      	mov	sp, r7
 80120c8:	bd80      	pop	{r7, pc}
 80120ca:	bf00      	nop
 80120cc:	0801fc6c 	.word	0x0801fc6c
 80120d0:	0801fdd0 	.word	0x0801fdd0
 80120d4:	0801fccc 	.word	0x0801fccc
 80120d8:	0801fdfc 	.word	0x0801fdfc
 80120dc:	0801fe14 	.word	0x0801fe14
 80120e0:	0801fe38 	.word	0x0801fe38

080120e4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80120e4:	b480      	push	{r7}
 80120e6:	b085      	sub	sp, #20
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80120ec:	2300      	movs	r3, #0
 80120ee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80120f0:	e005      	b.n	80120fe <pbuf_clen+0x1a>
    ++len;
 80120f2:	89fb      	ldrh	r3, [r7, #14]
 80120f4:	3301      	adds	r3, #1
 80120f6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d1f6      	bne.n	80120f2 <pbuf_clen+0xe>
  }
  return len;
 8012104:	89fb      	ldrh	r3, [r7, #14]
}
 8012106:	4618      	mov	r0, r3
 8012108:	3714      	adds	r7, #20
 801210a:	46bd      	mov	sp, r7
 801210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012110:	4770      	bx	lr
	...

08012114 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b084      	sub	sp, #16
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d016      	beq.n	8012150 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8012122:	f00a fbf9 	bl	801c918 <sys_arch_protect>
 8012126:	60f8      	str	r0, [r7, #12]
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	7b9b      	ldrb	r3, [r3, #14]
 801212c:	3301      	adds	r3, #1
 801212e:	b2da      	uxtb	r2, r3
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	739a      	strb	r2, [r3, #14]
 8012134:	68f8      	ldr	r0, [r7, #12]
 8012136:	f00a fbfd 	bl	801c934 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	7b9b      	ldrb	r3, [r3, #14]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d106      	bne.n	8012150 <pbuf_ref+0x3c>
 8012142:	4b05      	ldr	r3, [pc, #20]	@ (8012158 <pbuf_ref+0x44>)
 8012144:	f240 3242 	movw	r2, #834	@ 0x342
 8012148:	4904      	ldr	r1, [pc, #16]	@ (801215c <pbuf_ref+0x48>)
 801214a:	4805      	ldr	r0, [pc, #20]	@ (8012160 <pbuf_ref+0x4c>)
 801214c:	f00b f93a 	bl	801d3c4 <iprintf>
  }
}
 8012150:	bf00      	nop
 8012152:	3710      	adds	r7, #16
 8012154:	46bd      	mov	sp, r7
 8012156:	bd80      	pop	{r7, pc}
 8012158:	0801fc6c 	.word	0x0801fc6c
 801215c:	0801fe4c 	.word	0x0801fe4c
 8012160:	0801fccc 	.word	0x0801fccc

08012164 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8012164:	b580      	push	{r7, lr}
 8012166:	b084      	sub	sp, #16
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
 801216c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d002      	beq.n	801217a <pbuf_cat+0x16>
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d107      	bne.n	801218a <pbuf_cat+0x26>
 801217a:	4b20      	ldr	r3, [pc, #128]	@ (80121fc <pbuf_cat+0x98>)
 801217c:	f240 3259 	movw	r2, #857	@ 0x359
 8012180:	491f      	ldr	r1, [pc, #124]	@ (8012200 <pbuf_cat+0x9c>)
 8012182:	4820      	ldr	r0, [pc, #128]	@ (8012204 <pbuf_cat+0xa0>)
 8012184:	f00b f91e 	bl	801d3c4 <iprintf>
 8012188:	e034      	b.n	80121f4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	60fb      	str	r3, [r7, #12]
 801218e:	e00a      	b.n	80121a6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	891a      	ldrh	r2, [r3, #8]
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	891b      	ldrh	r3, [r3, #8]
 8012198:	4413      	add	r3, r2
 801219a:	b29a      	uxth	r2, r3
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	60fb      	str	r3, [r7, #12]
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d1f0      	bne.n	8012190 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	891a      	ldrh	r2, [r3, #8]
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	895b      	ldrh	r3, [r3, #10]
 80121b6:	429a      	cmp	r2, r3
 80121b8:	d006      	beq.n	80121c8 <pbuf_cat+0x64>
 80121ba:	4b10      	ldr	r3, [pc, #64]	@ (80121fc <pbuf_cat+0x98>)
 80121bc:	f240 3262 	movw	r2, #866	@ 0x362
 80121c0:	4911      	ldr	r1, [pc, #68]	@ (8012208 <pbuf_cat+0xa4>)
 80121c2:	4810      	ldr	r0, [pc, #64]	@ (8012204 <pbuf_cat+0xa0>)
 80121c4:	f00b f8fe 	bl	801d3c4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d006      	beq.n	80121de <pbuf_cat+0x7a>
 80121d0:	4b0a      	ldr	r3, [pc, #40]	@ (80121fc <pbuf_cat+0x98>)
 80121d2:	f240 3263 	movw	r2, #867	@ 0x363
 80121d6:	490d      	ldr	r1, [pc, #52]	@ (801220c <pbuf_cat+0xa8>)
 80121d8:	480a      	ldr	r0, [pc, #40]	@ (8012204 <pbuf_cat+0xa0>)
 80121da:	f00b f8f3 	bl	801d3c4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	891a      	ldrh	r2, [r3, #8]
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	891b      	ldrh	r3, [r3, #8]
 80121e6:	4413      	add	r3, r2
 80121e8:	b29a      	uxth	r2, r3
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	683a      	ldr	r2, [r7, #0]
 80121f2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80121f4:	3710      	adds	r7, #16
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bd80      	pop	{r7, pc}
 80121fa:	bf00      	nop
 80121fc:	0801fc6c 	.word	0x0801fc6c
 8012200:	0801fe60 	.word	0x0801fe60
 8012204:	0801fccc 	.word	0x0801fccc
 8012208:	0801fe98 	.word	0x0801fe98
 801220c:	0801fec8 	.word	0x0801fec8

08012210 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b082      	sub	sp, #8
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
 8012218:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801221a:	6839      	ldr	r1, [r7, #0]
 801221c:	6878      	ldr	r0, [r7, #4]
 801221e:	f7ff ffa1 	bl	8012164 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8012222:	6838      	ldr	r0, [r7, #0]
 8012224:	f7ff ff76 	bl	8012114 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8012228:	bf00      	nop
 801222a:	3708      	adds	r7, #8
 801222c:	46bd      	mov	sp, r7
 801222e:	bd80      	pop	{r7, pc}

08012230 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b086      	sub	sp, #24
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
 8012238:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801223a:	2300      	movs	r3, #0
 801223c:	617b      	str	r3, [r7, #20]
 801223e:	2300      	movs	r3, #0
 8012240:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d008      	beq.n	801225a <pbuf_copy+0x2a>
 8012248:	683b      	ldr	r3, [r7, #0]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d005      	beq.n	801225a <pbuf_copy+0x2a>
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	891a      	ldrh	r2, [r3, #8]
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	891b      	ldrh	r3, [r3, #8]
 8012256:	429a      	cmp	r2, r3
 8012258:	d209      	bcs.n	801226e <pbuf_copy+0x3e>
 801225a:	4b57      	ldr	r3, [pc, #348]	@ (80123b8 <pbuf_copy+0x188>)
 801225c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8012260:	4956      	ldr	r1, [pc, #344]	@ (80123bc <pbuf_copy+0x18c>)
 8012262:	4857      	ldr	r0, [pc, #348]	@ (80123c0 <pbuf_copy+0x190>)
 8012264:	f00b f8ae 	bl	801d3c4 <iprintf>
 8012268:	f06f 030f 	mvn.w	r3, #15
 801226c:	e09f      	b.n	80123ae <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	895b      	ldrh	r3, [r3, #10]
 8012272:	461a      	mov	r2, r3
 8012274:	697b      	ldr	r3, [r7, #20]
 8012276:	1ad2      	subs	r2, r2, r3
 8012278:	683b      	ldr	r3, [r7, #0]
 801227a:	895b      	ldrh	r3, [r3, #10]
 801227c:	4619      	mov	r1, r3
 801227e:	693b      	ldr	r3, [r7, #16]
 8012280:	1acb      	subs	r3, r1, r3
 8012282:	429a      	cmp	r2, r3
 8012284:	d306      	bcc.n	8012294 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	895b      	ldrh	r3, [r3, #10]
 801228a:	461a      	mov	r2, r3
 801228c:	693b      	ldr	r3, [r7, #16]
 801228e:	1ad3      	subs	r3, r2, r3
 8012290:	60fb      	str	r3, [r7, #12]
 8012292:	e005      	b.n	80122a0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	895b      	ldrh	r3, [r3, #10]
 8012298:	461a      	mov	r2, r3
 801229a:	697b      	ldr	r3, [r7, #20]
 801229c:	1ad3      	subs	r3, r2, r3
 801229e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	685a      	ldr	r2, [r3, #4]
 80122a4:	697b      	ldr	r3, [r7, #20]
 80122a6:	18d0      	adds	r0, r2, r3
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	685a      	ldr	r2, [r3, #4]
 80122ac:	693b      	ldr	r3, [r7, #16]
 80122ae:	4413      	add	r3, r2
 80122b0:	68fa      	ldr	r2, [r7, #12]
 80122b2:	4619      	mov	r1, r3
 80122b4:	f00b faad 	bl	801d812 <memcpy>
    offset_to += len;
 80122b8:	697a      	ldr	r2, [r7, #20]
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	4413      	add	r3, r2
 80122be:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80122c0:	693a      	ldr	r2, [r7, #16]
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	4413      	add	r3, r2
 80122c6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	895b      	ldrh	r3, [r3, #10]
 80122cc:	461a      	mov	r2, r3
 80122ce:	697b      	ldr	r3, [r7, #20]
 80122d0:	4293      	cmp	r3, r2
 80122d2:	d906      	bls.n	80122e2 <pbuf_copy+0xb2>
 80122d4:	4b38      	ldr	r3, [pc, #224]	@ (80123b8 <pbuf_copy+0x188>)
 80122d6:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80122da:	493a      	ldr	r1, [pc, #232]	@ (80123c4 <pbuf_copy+0x194>)
 80122dc:	4838      	ldr	r0, [pc, #224]	@ (80123c0 <pbuf_copy+0x190>)
 80122de:	f00b f871 	bl	801d3c4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	895b      	ldrh	r3, [r3, #10]
 80122e6:	461a      	mov	r2, r3
 80122e8:	693b      	ldr	r3, [r7, #16]
 80122ea:	4293      	cmp	r3, r2
 80122ec:	d906      	bls.n	80122fc <pbuf_copy+0xcc>
 80122ee:	4b32      	ldr	r3, [pc, #200]	@ (80123b8 <pbuf_copy+0x188>)
 80122f0:	f240 32da 	movw	r2, #986	@ 0x3da
 80122f4:	4934      	ldr	r1, [pc, #208]	@ (80123c8 <pbuf_copy+0x198>)
 80122f6:	4832      	ldr	r0, [pc, #200]	@ (80123c0 <pbuf_copy+0x190>)
 80122f8:	f00b f864 	bl	801d3c4 <iprintf>
    if (offset_from >= p_from->len) {
 80122fc:	683b      	ldr	r3, [r7, #0]
 80122fe:	895b      	ldrh	r3, [r3, #10]
 8012300:	461a      	mov	r2, r3
 8012302:	693b      	ldr	r3, [r7, #16]
 8012304:	4293      	cmp	r3, r2
 8012306:	d304      	bcc.n	8012312 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8012308:	2300      	movs	r3, #0
 801230a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	895b      	ldrh	r3, [r3, #10]
 8012316:	461a      	mov	r2, r3
 8012318:	697b      	ldr	r3, [r7, #20]
 801231a:	4293      	cmp	r3, r2
 801231c:	d114      	bne.n	8012348 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801231e:	2300      	movs	r3, #0
 8012320:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d10c      	bne.n	8012348 <pbuf_copy+0x118>
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d009      	beq.n	8012348 <pbuf_copy+0x118>
 8012334:	4b20      	ldr	r3, [pc, #128]	@ (80123b8 <pbuf_copy+0x188>)
 8012336:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801233a:	4924      	ldr	r1, [pc, #144]	@ (80123cc <pbuf_copy+0x19c>)
 801233c:	4820      	ldr	r0, [pc, #128]	@ (80123c0 <pbuf_copy+0x190>)
 801233e:	f00b f841 	bl	801d3c4 <iprintf>
 8012342:	f06f 030f 	mvn.w	r3, #15
 8012346:	e032      	b.n	80123ae <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8012348:	683b      	ldr	r3, [r7, #0]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d013      	beq.n	8012376 <pbuf_copy+0x146>
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	895a      	ldrh	r2, [r3, #10]
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	891b      	ldrh	r3, [r3, #8]
 8012356:	429a      	cmp	r2, r3
 8012358:	d10d      	bne.n	8012376 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d009      	beq.n	8012376 <pbuf_copy+0x146>
 8012362:	4b15      	ldr	r3, [pc, #84]	@ (80123b8 <pbuf_copy+0x188>)
 8012364:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8012368:	4919      	ldr	r1, [pc, #100]	@ (80123d0 <pbuf_copy+0x1a0>)
 801236a:	4815      	ldr	r0, [pc, #84]	@ (80123c0 <pbuf_copy+0x190>)
 801236c:	f00b f82a 	bl	801d3c4 <iprintf>
 8012370:	f06f 0305 	mvn.w	r3, #5
 8012374:	e01b      	b.n	80123ae <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d013      	beq.n	80123a4 <pbuf_copy+0x174>
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	895a      	ldrh	r2, [r3, #10]
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	891b      	ldrh	r3, [r3, #8]
 8012384:	429a      	cmp	r2, r3
 8012386:	d10d      	bne.n	80123a4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d009      	beq.n	80123a4 <pbuf_copy+0x174>
 8012390:	4b09      	ldr	r3, [pc, #36]	@ (80123b8 <pbuf_copy+0x188>)
 8012392:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8012396:	490e      	ldr	r1, [pc, #56]	@ (80123d0 <pbuf_copy+0x1a0>)
 8012398:	4809      	ldr	r0, [pc, #36]	@ (80123c0 <pbuf_copy+0x190>)
 801239a:	f00b f813 	bl	801d3c4 <iprintf>
 801239e:	f06f 0305 	mvn.w	r3, #5
 80123a2:	e004      	b.n	80123ae <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80123a4:	683b      	ldr	r3, [r7, #0]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	f47f af61 	bne.w	801226e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80123ac:	2300      	movs	r3, #0
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	3718      	adds	r7, #24
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}
 80123b6:	bf00      	nop
 80123b8:	0801fc6c 	.word	0x0801fc6c
 80123bc:	0801ff14 	.word	0x0801ff14
 80123c0:	0801fccc 	.word	0x0801fccc
 80123c4:	0801ff44 	.word	0x0801ff44
 80123c8:	0801ff5c 	.word	0x0801ff5c
 80123cc:	0801ff78 	.word	0x0801ff78
 80123d0:	0801ff88 	.word	0x0801ff88

080123d4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b088      	sub	sp, #32
 80123d8:	af00      	add	r7, sp, #0
 80123da:	60f8      	str	r0, [r7, #12]
 80123dc:	60b9      	str	r1, [r7, #8]
 80123de:	4611      	mov	r1, r2
 80123e0:	461a      	mov	r2, r3
 80123e2:	460b      	mov	r3, r1
 80123e4:	80fb      	strh	r3, [r7, #6]
 80123e6:	4613      	mov	r3, r2
 80123e8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80123ea:	2300      	movs	r3, #0
 80123ec:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80123ee:	2300      	movs	r3, #0
 80123f0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d108      	bne.n	801240a <pbuf_copy_partial+0x36>
 80123f8:	4b2b      	ldr	r3, [pc, #172]	@ (80124a8 <pbuf_copy_partial+0xd4>)
 80123fa:	f240 420a 	movw	r2, #1034	@ 0x40a
 80123fe:	492b      	ldr	r1, [pc, #172]	@ (80124ac <pbuf_copy_partial+0xd8>)
 8012400:	482b      	ldr	r0, [pc, #172]	@ (80124b0 <pbuf_copy_partial+0xdc>)
 8012402:	f00a ffdf 	bl	801d3c4 <iprintf>
 8012406:	2300      	movs	r3, #0
 8012408:	e04a      	b.n	80124a0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801240a:	68bb      	ldr	r3, [r7, #8]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d108      	bne.n	8012422 <pbuf_copy_partial+0x4e>
 8012410:	4b25      	ldr	r3, [pc, #148]	@ (80124a8 <pbuf_copy_partial+0xd4>)
 8012412:	f240 420b 	movw	r2, #1035	@ 0x40b
 8012416:	4927      	ldr	r1, [pc, #156]	@ (80124b4 <pbuf_copy_partial+0xe0>)
 8012418:	4825      	ldr	r0, [pc, #148]	@ (80124b0 <pbuf_copy_partial+0xdc>)
 801241a:	f00a ffd3 	bl	801d3c4 <iprintf>
 801241e:	2300      	movs	r3, #0
 8012420:	e03e      	b.n	80124a0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	61fb      	str	r3, [r7, #28]
 8012426:	e034      	b.n	8012492 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8012428:	88bb      	ldrh	r3, [r7, #4]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d00a      	beq.n	8012444 <pbuf_copy_partial+0x70>
 801242e:	69fb      	ldr	r3, [r7, #28]
 8012430:	895b      	ldrh	r3, [r3, #10]
 8012432:	88ba      	ldrh	r2, [r7, #4]
 8012434:	429a      	cmp	r2, r3
 8012436:	d305      	bcc.n	8012444 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8012438:	69fb      	ldr	r3, [r7, #28]
 801243a:	895b      	ldrh	r3, [r3, #10]
 801243c:	88ba      	ldrh	r2, [r7, #4]
 801243e:	1ad3      	subs	r3, r2, r3
 8012440:	80bb      	strh	r3, [r7, #4]
 8012442:	e023      	b.n	801248c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8012444:	69fb      	ldr	r3, [r7, #28]
 8012446:	895a      	ldrh	r2, [r3, #10]
 8012448:	88bb      	ldrh	r3, [r7, #4]
 801244a:	1ad3      	subs	r3, r2, r3
 801244c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801244e:	8b3a      	ldrh	r2, [r7, #24]
 8012450:	88fb      	ldrh	r3, [r7, #6]
 8012452:	429a      	cmp	r2, r3
 8012454:	d901      	bls.n	801245a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8012456:	88fb      	ldrh	r3, [r7, #6]
 8012458:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801245a:	8b7b      	ldrh	r3, [r7, #26]
 801245c:	68ba      	ldr	r2, [r7, #8]
 801245e:	18d0      	adds	r0, r2, r3
 8012460:	69fb      	ldr	r3, [r7, #28]
 8012462:	685a      	ldr	r2, [r3, #4]
 8012464:	88bb      	ldrh	r3, [r7, #4]
 8012466:	4413      	add	r3, r2
 8012468:	8b3a      	ldrh	r2, [r7, #24]
 801246a:	4619      	mov	r1, r3
 801246c:	f00b f9d1 	bl	801d812 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8012470:	8afa      	ldrh	r2, [r7, #22]
 8012472:	8b3b      	ldrh	r3, [r7, #24]
 8012474:	4413      	add	r3, r2
 8012476:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8012478:	8b7a      	ldrh	r2, [r7, #26]
 801247a:	8b3b      	ldrh	r3, [r7, #24]
 801247c:	4413      	add	r3, r2
 801247e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8012480:	88fa      	ldrh	r2, [r7, #6]
 8012482:	8b3b      	ldrh	r3, [r7, #24]
 8012484:	1ad3      	subs	r3, r2, r3
 8012486:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8012488:	2300      	movs	r3, #0
 801248a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801248c:	69fb      	ldr	r3, [r7, #28]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	61fb      	str	r3, [r7, #28]
 8012492:	88fb      	ldrh	r3, [r7, #6]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d002      	beq.n	801249e <pbuf_copy_partial+0xca>
 8012498:	69fb      	ldr	r3, [r7, #28]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d1c4      	bne.n	8012428 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801249e:	8afb      	ldrh	r3, [r7, #22]
}
 80124a0:	4618      	mov	r0, r3
 80124a2:	3720      	adds	r7, #32
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bd80      	pop	{r7, pc}
 80124a8:	0801fc6c 	.word	0x0801fc6c
 80124ac:	0801ffb4 	.word	0x0801ffb4
 80124b0:	0801fccc 	.word	0x0801fccc
 80124b4:	0801ffd4 	.word	0x0801ffd4

080124b8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b084      	sub	sp, #16
 80124bc:	af00      	add	r7, sp, #0
 80124be:	4603      	mov	r3, r0
 80124c0:	603a      	str	r2, [r7, #0]
 80124c2:	71fb      	strb	r3, [r7, #7]
 80124c4:	460b      	mov	r3, r1
 80124c6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	8919      	ldrh	r1, [r3, #8]
 80124cc:	88ba      	ldrh	r2, [r7, #4]
 80124ce:	79fb      	ldrb	r3, [r7, #7]
 80124d0:	4618      	mov	r0, r3
 80124d2:	f7ff fa95 	bl	8011a00 <pbuf_alloc>
 80124d6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d101      	bne.n	80124e2 <pbuf_clone+0x2a>
    return NULL;
 80124de:	2300      	movs	r3, #0
 80124e0:	e011      	b.n	8012506 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80124e2:	6839      	ldr	r1, [r7, #0]
 80124e4:	68f8      	ldr	r0, [r7, #12]
 80124e6:	f7ff fea3 	bl	8012230 <pbuf_copy>
 80124ea:	4603      	mov	r3, r0
 80124ec:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80124ee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d006      	beq.n	8012504 <pbuf_clone+0x4c>
 80124f6:	4b06      	ldr	r3, [pc, #24]	@ (8012510 <pbuf_clone+0x58>)
 80124f8:	f240 5224 	movw	r2, #1316	@ 0x524
 80124fc:	4905      	ldr	r1, [pc, #20]	@ (8012514 <pbuf_clone+0x5c>)
 80124fe:	4806      	ldr	r0, [pc, #24]	@ (8012518 <pbuf_clone+0x60>)
 8012500:	f00a ff60 	bl	801d3c4 <iprintf>
  return q;
 8012504:	68fb      	ldr	r3, [r7, #12]
}
 8012506:	4618      	mov	r0, r3
 8012508:	3710      	adds	r7, #16
 801250a:	46bd      	mov	sp, r7
 801250c:	bd80      	pop	{r7, pc}
 801250e:	bf00      	nop
 8012510:	0801fc6c 	.word	0x0801fc6c
 8012514:	080200e0 	.word	0x080200e0
 8012518:	0801fccc 	.word	0x0801fccc

0801251c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012520:	f00a fa18 	bl	801c954 <rand>
 8012524:	4603      	mov	r3, r0
 8012526:	b29b      	uxth	r3, r3
 8012528:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801252c:	b29b      	uxth	r3, r3
 801252e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8012532:	b29a      	uxth	r2, r3
 8012534:	4b01      	ldr	r3, [pc, #4]	@ (801253c <tcp_init+0x20>)
 8012536:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012538:	bf00      	nop
 801253a:	bd80      	pop	{r7, pc}
 801253c:	24000028 	.word	0x24000028

08012540 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b082      	sub	sp, #8
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	7d1b      	ldrb	r3, [r3, #20]
 801254c:	2b01      	cmp	r3, #1
 801254e:	d105      	bne.n	801255c <tcp_free+0x1c>
 8012550:	4b06      	ldr	r3, [pc, #24]	@ (801256c <tcp_free+0x2c>)
 8012552:	22d4      	movs	r2, #212	@ 0xd4
 8012554:	4906      	ldr	r1, [pc, #24]	@ (8012570 <tcp_free+0x30>)
 8012556:	4807      	ldr	r0, [pc, #28]	@ (8012574 <tcp_free+0x34>)
 8012558:	f00a ff34 	bl	801d3c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801255c:	6879      	ldr	r1, [r7, #4]
 801255e:	2001      	movs	r0, #1
 8012560:	f7fe fe82 	bl	8011268 <memp_free>
}
 8012564:	bf00      	nop
 8012566:	3708      	adds	r7, #8
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}
 801256c:	0802016c 	.word	0x0802016c
 8012570:	0802019c 	.word	0x0802019c
 8012574:	080201b0 	.word	0x080201b0

08012578 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b082      	sub	sp, #8
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	7d1b      	ldrb	r3, [r3, #20]
 8012584:	2b01      	cmp	r3, #1
 8012586:	d105      	bne.n	8012594 <tcp_free_listen+0x1c>
 8012588:	4b06      	ldr	r3, [pc, #24]	@ (80125a4 <tcp_free_listen+0x2c>)
 801258a:	22df      	movs	r2, #223	@ 0xdf
 801258c:	4906      	ldr	r1, [pc, #24]	@ (80125a8 <tcp_free_listen+0x30>)
 801258e:	4807      	ldr	r0, [pc, #28]	@ (80125ac <tcp_free_listen+0x34>)
 8012590:	f00a ff18 	bl	801d3c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8012594:	6879      	ldr	r1, [r7, #4]
 8012596:	2002      	movs	r0, #2
 8012598:	f7fe fe66 	bl	8011268 <memp_free>
}
 801259c:	bf00      	nop
 801259e:	3708      	adds	r7, #8
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bd80      	pop	{r7, pc}
 80125a4:	0802016c 	.word	0x0802016c
 80125a8:	080201d8 	.word	0x080201d8
 80125ac:	080201b0 	.word	0x080201b0

080125b0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80125b4:	f000 fea4 	bl	8013300 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80125b8:	4b07      	ldr	r3, [pc, #28]	@ (80125d8 <tcp_tmr+0x28>)
 80125ba:	781b      	ldrb	r3, [r3, #0]
 80125bc:	3301      	adds	r3, #1
 80125be:	b2da      	uxtb	r2, r3
 80125c0:	4b05      	ldr	r3, [pc, #20]	@ (80125d8 <tcp_tmr+0x28>)
 80125c2:	701a      	strb	r2, [r3, #0]
 80125c4:	4b04      	ldr	r3, [pc, #16]	@ (80125d8 <tcp_tmr+0x28>)
 80125c6:	781b      	ldrb	r3, [r3, #0]
 80125c8:	f003 0301 	and.w	r3, r3, #1
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d001      	beq.n	80125d4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80125d0:	f000 fb54 	bl	8012c7c <tcp_slowtmr>
  }
}
 80125d4:	bf00      	nop
 80125d6:	bd80      	pop	{r7, pc}
 80125d8:	2400cc49 	.word	0x2400cc49

080125dc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b084      	sub	sp, #16
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
 80125e4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80125e6:	683b      	ldr	r3, [r7, #0]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d105      	bne.n	80125f8 <tcp_remove_listener+0x1c>
 80125ec:	4b0d      	ldr	r3, [pc, #52]	@ (8012624 <tcp_remove_listener+0x48>)
 80125ee:	22ff      	movs	r2, #255	@ 0xff
 80125f0:	490d      	ldr	r1, [pc, #52]	@ (8012628 <tcp_remove_listener+0x4c>)
 80125f2:	480e      	ldr	r0, [pc, #56]	@ (801262c <tcp_remove_listener+0x50>)
 80125f4:	f00a fee6 	bl	801d3c4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	60fb      	str	r3, [r7, #12]
 80125fc:	e00a      	b.n	8012614 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012602:	683a      	ldr	r2, [r7, #0]
 8012604:	429a      	cmp	r2, r3
 8012606:	d102      	bne.n	801260e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	2200      	movs	r2, #0
 801260c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	68db      	ldr	r3, [r3, #12]
 8012612:	60fb      	str	r3, [r7, #12]
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d1f1      	bne.n	80125fe <tcp_remove_listener+0x22>
    }
  }
}
 801261a:	bf00      	nop
 801261c:	bf00      	nop
 801261e:	3710      	adds	r7, #16
 8012620:	46bd      	mov	sp, r7
 8012622:	bd80      	pop	{r7, pc}
 8012624:	0802016c 	.word	0x0802016c
 8012628:	080201f4 	.word	0x080201f4
 801262c:	080201b0 	.word	0x080201b0

08012630 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b084      	sub	sp, #16
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d106      	bne.n	801264c <tcp_listen_closed+0x1c>
 801263e:	4b14      	ldr	r3, [pc, #80]	@ (8012690 <tcp_listen_closed+0x60>)
 8012640:	f240 1211 	movw	r2, #273	@ 0x111
 8012644:	4913      	ldr	r1, [pc, #76]	@ (8012694 <tcp_listen_closed+0x64>)
 8012646:	4814      	ldr	r0, [pc, #80]	@ (8012698 <tcp_listen_closed+0x68>)
 8012648:	f00a febc 	bl	801d3c4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	7d1b      	ldrb	r3, [r3, #20]
 8012650:	2b01      	cmp	r3, #1
 8012652:	d006      	beq.n	8012662 <tcp_listen_closed+0x32>
 8012654:	4b0e      	ldr	r3, [pc, #56]	@ (8012690 <tcp_listen_closed+0x60>)
 8012656:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801265a:	4910      	ldr	r1, [pc, #64]	@ (801269c <tcp_listen_closed+0x6c>)
 801265c:	480e      	ldr	r0, [pc, #56]	@ (8012698 <tcp_listen_closed+0x68>)
 801265e:	f00a feb1 	bl	801d3c4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012662:	2301      	movs	r3, #1
 8012664:	60fb      	str	r3, [r7, #12]
 8012666:	e00b      	b.n	8012680 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8012668:	4a0d      	ldr	r2, [pc, #52]	@ (80126a0 <tcp_listen_closed+0x70>)
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	6879      	ldr	r1, [r7, #4]
 8012674:	4618      	mov	r0, r3
 8012676:	f7ff ffb1 	bl	80125dc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	3301      	adds	r3, #1
 801267e:	60fb      	str	r3, [r7, #12]
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	2b03      	cmp	r3, #3
 8012684:	d9f0      	bls.n	8012668 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8012686:	bf00      	nop
 8012688:	bf00      	nop
 801268a:	3710      	adds	r7, #16
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}
 8012690:	0802016c 	.word	0x0802016c
 8012694:	0802021c 	.word	0x0802021c
 8012698:	080201b0 	.word	0x080201b0
 801269c:	08020228 	.word	0x08020228
 80126a0:	080225d8 	.word	0x080225d8

080126a4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80126a4:	b5b0      	push	{r4, r5, r7, lr}
 80126a6:	b088      	sub	sp, #32
 80126a8:	af04      	add	r7, sp, #16
 80126aa:	6078      	str	r0, [r7, #4]
 80126ac:	460b      	mov	r3, r1
 80126ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d106      	bne.n	80126c4 <tcp_close_shutdown+0x20>
 80126b6:	4b63      	ldr	r3, [pc, #396]	@ (8012844 <tcp_close_shutdown+0x1a0>)
 80126b8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80126bc:	4962      	ldr	r1, [pc, #392]	@ (8012848 <tcp_close_shutdown+0x1a4>)
 80126be:	4863      	ldr	r0, [pc, #396]	@ (801284c <tcp_close_shutdown+0x1a8>)
 80126c0:	f00a fe80 	bl	801d3c4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80126c4:	78fb      	ldrb	r3, [r7, #3]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d066      	beq.n	8012798 <tcp_close_shutdown+0xf4>
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	7d1b      	ldrb	r3, [r3, #20]
 80126ce:	2b04      	cmp	r3, #4
 80126d0:	d003      	beq.n	80126da <tcp_close_shutdown+0x36>
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	7d1b      	ldrb	r3, [r3, #20]
 80126d6:	2b07      	cmp	r3, #7
 80126d8:	d15e      	bne.n	8012798 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d104      	bne.n	80126ec <tcp_close_shutdown+0x48>
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80126e6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80126ea:	d055      	beq.n	8012798 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	8b5b      	ldrh	r3, [r3, #26]
 80126f0:	f003 0310 	and.w	r3, r3, #16
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d106      	bne.n	8012706 <tcp_close_shutdown+0x62>
 80126f8:	4b52      	ldr	r3, [pc, #328]	@ (8012844 <tcp_close_shutdown+0x1a0>)
 80126fa:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80126fe:	4954      	ldr	r1, [pc, #336]	@ (8012850 <tcp_close_shutdown+0x1ac>)
 8012700:	4852      	ldr	r0, [pc, #328]	@ (801284c <tcp_close_shutdown+0x1a8>)
 8012702:	f00a fe5f 	bl	801d3c4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801270e:	687d      	ldr	r5, [r7, #4]
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	3304      	adds	r3, #4
 8012714:	687a      	ldr	r2, [r7, #4]
 8012716:	8ad2      	ldrh	r2, [r2, #22]
 8012718:	6879      	ldr	r1, [r7, #4]
 801271a:	8b09      	ldrh	r1, [r1, #24]
 801271c:	9102      	str	r1, [sp, #8]
 801271e:	9201      	str	r2, [sp, #4]
 8012720:	9300      	str	r3, [sp, #0]
 8012722:	462b      	mov	r3, r5
 8012724:	4622      	mov	r2, r4
 8012726:	4601      	mov	r1, r0
 8012728:	6878      	ldr	r0, [r7, #4]
 801272a:	f004 fe8d 	bl	8017448 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801272e:	6878      	ldr	r0, [r7, #4]
 8012730:	f001 f8c8 	bl	80138c4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012734:	4b47      	ldr	r3, [pc, #284]	@ (8012854 <tcp_close_shutdown+0x1b0>)
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	687a      	ldr	r2, [r7, #4]
 801273a:	429a      	cmp	r2, r3
 801273c:	d105      	bne.n	801274a <tcp_close_shutdown+0xa6>
 801273e:	4b45      	ldr	r3, [pc, #276]	@ (8012854 <tcp_close_shutdown+0x1b0>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	68db      	ldr	r3, [r3, #12]
 8012744:	4a43      	ldr	r2, [pc, #268]	@ (8012854 <tcp_close_shutdown+0x1b0>)
 8012746:	6013      	str	r3, [r2, #0]
 8012748:	e013      	b.n	8012772 <tcp_close_shutdown+0xce>
 801274a:	4b42      	ldr	r3, [pc, #264]	@ (8012854 <tcp_close_shutdown+0x1b0>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	60fb      	str	r3, [r7, #12]
 8012750:	e00c      	b.n	801276c <tcp_close_shutdown+0xc8>
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	68db      	ldr	r3, [r3, #12]
 8012756:	687a      	ldr	r2, [r7, #4]
 8012758:	429a      	cmp	r2, r3
 801275a:	d104      	bne.n	8012766 <tcp_close_shutdown+0xc2>
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	68da      	ldr	r2, [r3, #12]
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	60da      	str	r2, [r3, #12]
 8012764:	e005      	b.n	8012772 <tcp_close_shutdown+0xce>
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	68db      	ldr	r3, [r3, #12]
 801276a:	60fb      	str	r3, [r7, #12]
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d1ef      	bne.n	8012752 <tcp_close_shutdown+0xae>
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	2200      	movs	r2, #0
 8012776:	60da      	str	r2, [r3, #12]
 8012778:	4b37      	ldr	r3, [pc, #220]	@ (8012858 <tcp_close_shutdown+0x1b4>)
 801277a:	2201      	movs	r2, #1
 801277c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801277e:	4b37      	ldr	r3, [pc, #220]	@ (801285c <tcp_close_shutdown+0x1b8>)
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	687a      	ldr	r2, [r7, #4]
 8012784:	429a      	cmp	r2, r3
 8012786:	d102      	bne.n	801278e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8012788:	f003 fd5c 	bl	8016244 <tcp_trigger_input_pcb_close>
 801278c:	e002      	b.n	8012794 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801278e:	6878      	ldr	r0, [r7, #4]
 8012790:	f7ff fed6 	bl	8012540 <tcp_free>
      }
      return ERR_OK;
 8012794:	2300      	movs	r3, #0
 8012796:	e050      	b.n	801283a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	7d1b      	ldrb	r3, [r3, #20]
 801279c:	2b02      	cmp	r3, #2
 801279e:	d03b      	beq.n	8012818 <tcp_close_shutdown+0x174>
 80127a0:	2b02      	cmp	r3, #2
 80127a2:	dc44      	bgt.n	801282e <tcp_close_shutdown+0x18a>
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d002      	beq.n	80127ae <tcp_close_shutdown+0x10a>
 80127a8:	2b01      	cmp	r3, #1
 80127aa:	d02a      	beq.n	8012802 <tcp_close_shutdown+0x15e>
 80127ac:	e03f      	b.n	801282e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	8adb      	ldrh	r3, [r3, #22]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d021      	beq.n	80127fa <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80127b6:	4b2a      	ldr	r3, [pc, #168]	@ (8012860 <tcp_close_shutdown+0x1bc>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	687a      	ldr	r2, [r7, #4]
 80127bc:	429a      	cmp	r2, r3
 80127be:	d105      	bne.n	80127cc <tcp_close_shutdown+0x128>
 80127c0:	4b27      	ldr	r3, [pc, #156]	@ (8012860 <tcp_close_shutdown+0x1bc>)
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	68db      	ldr	r3, [r3, #12]
 80127c6:	4a26      	ldr	r2, [pc, #152]	@ (8012860 <tcp_close_shutdown+0x1bc>)
 80127c8:	6013      	str	r3, [r2, #0]
 80127ca:	e013      	b.n	80127f4 <tcp_close_shutdown+0x150>
 80127cc:	4b24      	ldr	r3, [pc, #144]	@ (8012860 <tcp_close_shutdown+0x1bc>)
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	60bb      	str	r3, [r7, #8]
 80127d2:	e00c      	b.n	80127ee <tcp_close_shutdown+0x14a>
 80127d4:	68bb      	ldr	r3, [r7, #8]
 80127d6:	68db      	ldr	r3, [r3, #12]
 80127d8:	687a      	ldr	r2, [r7, #4]
 80127da:	429a      	cmp	r2, r3
 80127dc:	d104      	bne.n	80127e8 <tcp_close_shutdown+0x144>
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	68da      	ldr	r2, [r3, #12]
 80127e2:	68bb      	ldr	r3, [r7, #8]
 80127e4:	60da      	str	r2, [r3, #12]
 80127e6:	e005      	b.n	80127f4 <tcp_close_shutdown+0x150>
 80127e8:	68bb      	ldr	r3, [r7, #8]
 80127ea:	68db      	ldr	r3, [r3, #12]
 80127ec:	60bb      	str	r3, [r7, #8]
 80127ee:	68bb      	ldr	r3, [r7, #8]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d1ef      	bne.n	80127d4 <tcp_close_shutdown+0x130>
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	2200      	movs	r2, #0
 80127f8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f7ff fea0 	bl	8012540 <tcp_free>
      break;
 8012800:	e01a      	b.n	8012838 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012802:	6878      	ldr	r0, [r7, #4]
 8012804:	f7ff ff14 	bl	8012630 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012808:	6879      	ldr	r1, [r7, #4]
 801280a:	4816      	ldr	r0, [pc, #88]	@ (8012864 <tcp_close_shutdown+0x1c0>)
 801280c:	f001 f8aa 	bl	8013964 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012810:	6878      	ldr	r0, [r7, #4]
 8012812:	f7ff feb1 	bl	8012578 <tcp_free_listen>
      break;
 8012816:	e00f      	b.n	8012838 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012818:	6879      	ldr	r1, [r7, #4]
 801281a:	480e      	ldr	r0, [pc, #56]	@ (8012854 <tcp_close_shutdown+0x1b0>)
 801281c:	f001 f8a2 	bl	8013964 <tcp_pcb_remove>
 8012820:	4b0d      	ldr	r3, [pc, #52]	@ (8012858 <tcp_close_shutdown+0x1b4>)
 8012822:	2201      	movs	r2, #1
 8012824:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	f7ff fe8a 	bl	8012540 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801282c:	e004      	b.n	8012838 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801282e:	6878      	ldr	r0, [r7, #4]
 8012830:	f000 f81a 	bl	8012868 <tcp_close_shutdown_fin>
 8012834:	4603      	mov	r3, r0
 8012836:	e000      	b.n	801283a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8012838:	2300      	movs	r3, #0
}
 801283a:	4618      	mov	r0, r3
 801283c:	3710      	adds	r7, #16
 801283e:	46bd      	mov	sp, r7
 8012840:	bdb0      	pop	{r4, r5, r7, pc}
 8012842:	bf00      	nop
 8012844:	0802016c 	.word	0x0802016c
 8012848:	08020240 	.word	0x08020240
 801284c:	080201b0 	.word	0x080201b0
 8012850:	08020260 	.word	0x08020260
 8012854:	2400cc40 	.word	0x2400cc40
 8012858:	2400cc48 	.word	0x2400cc48
 801285c:	2400cc80 	.word	0x2400cc80
 8012860:	2400cc38 	.word	0x2400cc38
 8012864:	2400cc3c 	.word	0x2400cc3c

08012868 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b084      	sub	sp, #16
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d106      	bne.n	8012884 <tcp_close_shutdown_fin+0x1c>
 8012876:	4b2e      	ldr	r3, [pc, #184]	@ (8012930 <tcp_close_shutdown_fin+0xc8>)
 8012878:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801287c:	492d      	ldr	r1, [pc, #180]	@ (8012934 <tcp_close_shutdown_fin+0xcc>)
 801287e:	482e      	ldr	r0, [pc, #184]	@ (8012938 <tcp_close_shutdown_fin+0xd0>)
 8012880:	f00a fda0 	bl	801d3c4 <iprintf>

  switch (pcb->state) {
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	7d1b      	ldrb	r3, [r3, #20]
 8012888:	2b07      	cmp	r3, #7
 801288a:	d020      	beq.n	80128ce <tcp_close_shutdown_fin+0x66>
 801288c:	2b07      	cmp	r3, #7
 801288e:	dc2b      	bgt.n	80128e8 <tcp_close_shutdown_fin+0x80>
 8012890:	2b03      	cmp	r3, #3
 8012892:	d002      	beq.n	801289a <tcp_close_shutdown_fin+0x32>
 8012894:	2b04      	cmp	r3, #4
 8012896:	d00d      	beq.n	80128b4 <tcp_close_shutdown_fin+0x4c>
 8012898:	e026      	b.n	80128e8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801289a:	6878      	ldr	r0, [r7, #4]
 801289c:	f003 fee2 	bl	8016664 <tcp_send_fin>
 80128a0:	4603      	mov	r3, r0
 80128a2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80128a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d11f      	bne.n	80128ec <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	2205      	movs	r2, #5
 80128b0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80128b2:	e01b      	b.n	80128ec <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f003 fed5 	bl	8016664 <tcp_send_fin>
 80128ba:	4603      	mov	r3, r0
 80128bc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80128be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d114      	bne.n	80128f0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	2205      	movs	r2, #5
 80128ca:	751a      	strb	r2, [r3, #20]
      }
      break;
 80128cc:	e010      	b.n	80128f0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80128ce:	6878      	ldr	r0, [r7, #4]
 80128d0:	f003 fec8 	bl	8016664 <tcp_send_fin>
 80128d4:	4603      	mov	r3, r0
 80128d6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80128d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d109      	bne.n	80128f4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	2209      	movs	r2, #9
 80128e4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80128e6:	e005      	b.n	80128f4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80128e8:	2300      	movs	r3, #0
 80128ea:	e01c      	b.n	8012926 <tcp_close_shutdown_fin+0xbe>
      break;
 80128ec:	bf00      	nop
 80128ee:	e002      	b.n	80128f6 <tcp_close_shutdown_fin+0x8e>
      break;
 80128f0:	bf00      	nop
 80128f2:	e000      	b.n	80128f6 <tcp_close_shutdown_fin+0x8e>
      break;
 80128f4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80128f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d103      	bne.n	8012906 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80128fe:	6878      	ldr	r0, [r7, #4]
 8012900:	f003 ffee 	bl	80168e0 <tcp_output>
 8012904:	e00d      	b.n	8012922 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8012906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801290a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801290e:	d108      	bne.n	8012922 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	8b5b      	ldrh	r3, [r3, #26]
 8012914:	f043 0308 	orr.w	r3, r3, #8
 8012918:	b29a      	uxth	r2, r3
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801291e:	2300      	movs	r3, #0
 8012920:	e001      	b.n	8012926 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8012922:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012926:	4618      	mov	r0, r3
 8012928:	3710      	adds	r7, #16
 801292a:	46bd      	mov	sp, r7
 801292c:	bd80      	pop	{r7, pc}
 801292e:	bf00      	nop
 8012930:	0802016c 	.word	0x0802016c
 8012934:	0802021c 	.word	0x0802021c
 8012938:	080201b0 	.word	0x080201b0

0801293c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b082      	sub	sp, #8
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d109      	bne.n	801295e <tcp_close+0x22>
 801294a:	4b0f      	ldr	r3, [pc, #60]	@ (8012988 <tcp_close+0x4c>)
 801294c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8012950:	490e      	ldr	r1, [pc, #56]	@ (801298c <tcp_close+0x50>)
 8012952:	480f      	ldr	r0, [pc, #60]	@ (8012990 <tcp_close+0x54>)
 8012954:	f00a fd36 	bl	801d3c4 <iprintf>
 8012958:	f06f 030f 	mvn.w	r3, #15
 801295c:	e00f      	b.n	801297e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	7d1b      	ldrb	r3, [r3, #20]
 8012962:	2b01      	cmp	r3, #1
 8012964:	d006      	beq.n	8012974 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	8b5b      	ldrh	r3, [r3, #26]
 801296a:	f043 0310 	orr.w	r3, r3, #16
 801296e:	b29a      	uxth	r2, r3
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012974:	2101      	movs	r1, #1
 8012976:	6878      	ldr	r0, [r7, #4]
 8012978:	f7ff fe94 	bl	80126a4 <tcp_close_shutdown>
 801297c:	4603      	mov	r3, r0
}
 801297e:	4618      	mov	r0, r3
 8012980:	3708      	adds	r7, #8
 8012982:	46bd      	mov	sp, r7
 8012984:	bd80      	pop	{r7, pc}
 8012986:	bf00      	nop
 8012988:	0802016c 	.word	0x0802016c
 801298c:	0802027c 	.word	0x0802027c
 8012990:	080201b0 	.word	0x080201b0

08012994 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b08e      	sub	sp, #56	@ 0x38
 8012998:	af04      	add	r7, sp, #16
 801299a:	6078      	str	r0, [r7, #4]
 801299c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d107      	bne.n	80129b4 <tcp_abandon+0x20>
 80129a4:	4b52      	ldr	r3, [pc, #328]	@ (8012af0 <tcp_abandon+0x15c>)
 80129a6:	f240 223d 	movw	r2, #573	@ 0x23d
 80129aa:	4952      	ldr	r1, [pc, #328]	@ (8012af4 <tcp_abandon+0x160>)
 80129ac:	4852      	ldr	r0, [pc, #328]	@ (8012af8 <tcp_abandon+0x164>)
 80129ae:	f00a fd09 	bl	801d3c4 <iprintf>
 80129b2:	e099      	b.n	8012ae8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	7d1b      	ldrb	r3, [r3, #20]
 80129b8:	2b01      	cmp	r3, #1
 80129ba:	d106      	bne.n	80129ca <tcp_abandon+0x36>
 80129bc:	4b4c      	ldr	r3, [pc, #304]	@ (8012af0 <tcp_abandon+0x15c>)
 80129be:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80129c2:	494e      	ldr	r1, [pc, #312]	@ (8012afc <tcp_abandon+0x168>)
 80129c4:	484c      	ldr	r0, [pc, #304]	@ (8012af8 <tcp_abandon+0x164>)
 80129c6:	f00a fcfd 	bl	801d3c4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	7d1b      	ldrb	r3, [r3, #20]
 80129ce:	2b0a      	cmp	r3, #10
 80129d0:	d107      	bne.n	80129e2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80129d2:	6879      	ldr	r1, [r7, #4]
 80129d4:	484a      	ldr	r0, [pc, #296]	@ (8012b00 <tcp_abandon+0x16c>)
 80129d6:	f000 ffc5 	bl	8013964 <tcp_pcb_remove>
    tcp_free(pcb);
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f7ff fdb0 	bl	8012540 <tcp_free>
 80129e0:	e082      	b.n	8012ae8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80129e2:	2300      	movs	r3, #0
 80129e4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80129e6:	2300      	movs	r3, #0
 80129e8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80129ee:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129f4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80129fc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	691b      	ldr	r3, [r3, #16]
 8012a02:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	7d1b      	ldrb	r3, [r3, #20]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d126      	bne.n	8012a5a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	8adb      	ldrh	r3, [r3, #22]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d02e      	beq.n	8012a72 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012a14:	4b3b      	ldr	r3, [pc, #236]	@ (8012b04 <tcp_abandon+0x170>)
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	687a      	ldr	r2, [r7, #4]
 8012a1a:	429a      	cmp	r2, r3
 8012a1c:	d105      	bne.n	8012a2a <tcp_abandon+0x96>
 8012a1e:	4b39      	ldr	r3, [pc, #228]	@ (8012b04 <tcp_abandon+0x170>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	68db      	ldr	r3, [r3, #12]
 8012a24:	4a37      	ldr	r2, [pc, #220]	@ (8012b04 <tcp_abandon+0x170>)
 8012a26:	6013      	str	r3, [r2, #0]
 8012a28:	e013      	b.n	8012a52 <tcp_abandon+0xbe>
 8012a2a:	4b36      	ldr	r3, [pc, #216]	@ (8012b04 <tcp_abandon+0x170>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	61fb      	str	r3, [r7, #28]
 8012a30:	e00c      	b.n	8012a4c <tcp_abandon+0xb8>
 8012a32:	69fb      	ldr	r3, [r7, #28]
 8012a34:	68db      	ldr	r3, [r3, #12]
 8012a36:	687a      	ldr	r2, [r7, #4]
 8012a38:	429a      	cmp	r2, r3
 8012a3a:	d104      	bne.n	8012a46 <tcp_abandon+0xb2>
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	68da      	ldr	r2, [r3, #12]
 8012a40:	69fb      	ldr	r3, [r7, #28]
 8012a42:	60da      	str	r2, [r3, #12]
 8012a44:	e005      	b.n	8012a52 <tcp_abandon+0xbe>
 8012a46:	69fb      	ldr	r3, [r7, #28]
 8012a48:	68db      	ldr	r3, [r3, #12]
 8012a4a:	61fb      	str	r3, [r7, #28]
 8012a4c:	69fb      	ldr	r3, [r7, #28]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d1ef      	bne.n	8012a32 <tcp_abandon+0x9e>
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	2200      	movs	r2, #0
 8012a56:	60da      	str	r2, [r3, #12]
 8012a58:	e00b      	b.n	8012a72 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	8adb      	ldrh	r3, [r3, #22]
 8012a62:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012a64:	6879      	ldr	r1, [r7, #4]
 8012a66:	4828      	ldr	r0, [pc, #160]	@ (8012b08 <tcp_abandon+0x174>)
 8012a68:	f000 ff7c 	bl	8013964 <tcp_pcb_remove>
 8012a6c:	4b27      	ldr	r3, [pc, #156]	@ (8012b0c <tcp_abandon+0x178>)
 8012a6e:	2201      	movs	r2, #1
 8012a70:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d004      	beq.n	8012a84 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f000 fd1e 	bl	80134c0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d004      	beq.n	8012a96 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a90:	4618      	mov	r0, r3
 8012a92:	f000 fd15 	bl	80134c0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d004      	beq.n	8012aa8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f000 fd0c 	bl	80134c0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d00e      	beq.n	8012acc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8012aae:	6879      	ldr	r1, [r7, #4]
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	3304      	adds	r3, #4
 8012ab4:	687a      	ldr	r2, [r7, #4]
 8012ab6:	8b12      	ldrh	r2, [r2, #24]
 8012ab8:	9202      	str	r2, [sp, #8]
 8012aba:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012abc:	9201      	str	r2, [sp, #4]
 8012abe:	9300      	str	r3, [sp, #0]
 8012ac0:	460b      	mov	r3, r1
 8012ac2:	697a      	ldr	r2, [r7, #20]
 8012ac4:	69b9      	ldr	r1, [r7, #24]
 8012ac6:	6878      	ldr	r0, [r7, #4]
 8012ac8:	f004 fcbe 	bl	8017448 <tcp_rst>
    }
    last_state = pcb->state;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	7d1b      	ldrb	r3, [r3, #20]
 8012ad0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8012ad2:	6878      	ldr	r0, [r7, #4]
 8012ad4:	f7ff fd34 	bl	8012540 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012ad8:	693b      	ldr	r3, [r7, #16]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d004      	beq.n	8012ae8 <tcp_abandon+0x154>
 8012ade:	693b      	ldr	r3, [r7, #16]
 8012ae0:	f06f 010c 	mvn.w	r1, #12
 8012ae4:	68f8      	ldr	r0, [r7, #12]
 8012ae6:	4798      	blx	r3
  }
}
 8012ae8:	3728      	adds	r7, #40	@ 0x28
 8012aea:	46bd      	mov	sp, r7
 8012aec:	bd80      	pop	{r7, pc}
 8012aee:	bf00      	nop
 8012af0:	0802016c 	.word	0x0802016c
 8012af4:	080202b0 	.word	0x080202b0
 8012af8:	080201b0 	.word	0x080201b0
 8012afc:	080202cc 	.word	0x080202cc
 8012b00:	2400cc44 	.word	0x2400cc44
 8012b04:	2400cc38 	.word	0x2400cc38
 8012b08:	2400cc40 	.word	0x2400cc40
 8012b0c:	2400cc48 	.word	0x2400cc48

08012b10 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b082      	sub	sp, #8
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012b18:	2101      	movs	r1, #1
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	f7ff ff3a 	bl	8012994 <tcp_abandon>
}
 8012b20:	bf00      	nop
 8012b22:	3708      	adds	r7, #8
 8012b24:	46bd      	mov	sp, r7
 8012b26:	bd80      	pop	{r7, pc}

08012b28 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b084      	sub	sp, #16
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d106      	bne.n	8012b44 <tcp_update_rcv_ann_wnd+0x1c>
 8012b36:	4b25      	ldr	r3, [pc, #148]	@ (8012bcc <tcp_update_rcv_ann_wnd+0xa4>)
 8012b38:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8012b3c:	4924      	ldr	r1, [pc, #144]	@ (8012bd0 <tcp_update_rcv_ann_wnd+0xa8>)
 8012b3e:	4825      	ldr	r0, [pc, #148]	@ (8012bd4 <tcp_update_rcv_ann_wnd+0xac>)
 8012b40:	f00a fc40 	bl	801d3c4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b48:	687a      	ldr	r2, [r7, #4]
 8012b4a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012b4c:	4413      	add	r3, r2
 8012b4e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b54:	687a      	ldr	r2, [r7, #4]
 8012b56:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8012b58:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8012b5c:	bf28      	it	cs
 8012b5e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8012b62:	b292      	uxth	r2, r2
 8012b64:	4413      	add	r3, r2
 8012b66:	68fa      	ldr	r2, [r7, #12]
 8012b68:	1ad3      	subs	r3, r2, r3
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	db08      	blt.n	8012b80 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b7a:	68fa      	ldr	r2, [r7, #12]
 8012b7c:	1ad3      	subs	r3, r2, r3
 8012b7e:	e020      	b.n	8012bc2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b88:	1ad3      	subs	r3, r2, r3
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	dd03      	ble.n	8012b96 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2200      	movs	r2, #0
 8012b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012b94:	e014      	b.n	8012bc0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b9e:	1ad3      	subs	r3, r2, r3
 8012ba0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8012ba2:	68bb      	ldr	r3, [r7, #8]
 8012ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012ba8:	d306      	bcc.n	8012bb8 <tcp_update_rcv_ann_wnd+0x90>
 8012baa:	4b08      	ldr	r3, [pc, #32]	@ (8012bcc <tcp_update_rcv_ann_wnd+0xa4>)
 8012bac:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8012bb0:	4909      	ldr	r1, [pc, #36]	@ (8012bd8 <tcp_update_rcv_ann_wnd+0xb0>)
 8012bb2:	4808      	ldr	r0, [pc, #32]	@ (8012bd4 <tcp_update_rcv_ann_wnd+0xac>)
 8012bb4:	f00a fc06 	bl	801d3c4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	b29a      	uxth	r2, r3
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8012bc0:	2300      	movs	r3, #0
  }
}
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	3710      	adds	r7, #16
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	bd80      	pop	{r7, pc}
 8012bca:	bf00      	nop
 8012bcc:	0802016c 	.word	0x0802016c
 8012bd0:	080203c8 	.word	0x080203c8
 8012bd4:	080201b0 	.word	0x080201b0
 8012bd8:	080203ec 	.word	0x080203ec

08012bdc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b084      	sub	sp, #16
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
 8012be4:	460b      	mov	r3, r1
 8012be6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d107      	bne.n	8012bfe <tcp_recved+0x22>
 8012bee:	4b1f      	ldr	r3, [pc, #124]	@ (8012c6c <tcp_recved+0x90>)
 8012bf0:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8012bf4:	491e      	ldr	r1, [pc, #120]	@ (8012c70 <tcp_recved+0x94>)
 8012bf6:	481f      	ldr	r0, [pc, #124]	@ (8012c74 <tcp_recved+0x98>)
 8012bf8:	f00a fbe4 	bl	801d3c4 <iprintf>
 8012bfc:	e032      	b.n	8012c64 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	7d1b      	ldrb	r3, [r3, #20]
 8012c02:	2b01      	cmp	r3, #1
 8012c04:	d106      	bne.n	8012c14 <tcp_recved+0x38>
 8012c06:	4b19      	ldr	r3, [pc, #100]	@ (8012c6c <tcp_recved+0x90>)
 8012c08:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8012c0c:	491a      	ldr	r1, [pc, #104]	@ (8012c78 <tcp_recved+0x9c>)
 8012c0e:	4819      	ldr	r0, [pc, #100]	@ (8012c74 <tcp_recved+0x98>)
 8012c10:	f00a fbd8 	bl	801d3c4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012c18:	887b      	ldrh	r3, [r7, #2]
 8012c1a:	4413      	add	r3, r2
 8012c1c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012c1e:	89fb      	ldrh	r3, [r7, #14]
 8012c20:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8012c24:	d804      	bhi.n	8012c30 <tcp_recved+0x54>
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c2a:	89fa      	ldrh	r2, [r7, #14]
 8012c2c:	429a      	cmp	r2, r3
 8012c2e:	d204      	bcs.n	8012c3a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8012c36:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012c38:	e002      	b.n	8012c40 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	89fa      	ldrh	r2, [r7, #14]
 8012c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012c40:	6878      	ldr	r0, [r7, #4]
 8012c42:	f7ff ff71 	bl	8012b28 <tcp_update_rcv_ann_wnd>
 8012c46:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012c48:	68bb      	ldr	r3, [r7, #8]
 8012c4a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8012c4e:	d309      	bcc.n	8012c64 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	8b5b      	ldrh	r3, [r3, #26]
 8012c54:	f043 0302 	orr.w	r3, r3, #2
 8012c58:	b29a      	uxth	r2, r3
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012c5e:	6878      	ldr	r0, [r7, #4]
 8012c60:	f003 fe3e 	bl	80168e0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012c64:	3710      	adds	r7, #16
 8012c66:	46bd      	mov	sp, r7
 8012c68:	bd80      	pop	{r7, pc}
 8012c6a:	bf00      	nop
 8012c6c:	0802016c 	.word	0x0802016c
 8012c70:	08020408 	.word	0x08020408
 8012c74:	080201b0 	.word	0x080201b0
 8012c78:	08020420 	.word	0x08020420

08012c7c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012c7c:	b5b0      	push	{r4, r5, r7, lr}
 8012c7e:	b090      	sub	sp, #64	@ 0x40
 8012c80:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8012c82:	2300      	movs	r3, #0
 8012c84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8012c88:	4b95      	ldr	r3, [pc, #596]	@ (8012ee0 <tcp_slowtmr+0x264>)
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	3301      	adds	r3, #1
 8012c8e:	4a94      	ldr	r2, [pc, #592]	@ (8012ee0 <tcp_slowtmr+0x264>)
 8012c90:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8012c92:	4b94      	ldr	r3, [pc, #592]	@ (8012ee4 <tcp_slowtmr+0x268>)
 8012c94:	781b      	ldrb	r3, [r3, #0]
 8012c96:	3301      	adds	r3, #1
 8012c98:	b2da      	uxtb	r2, r3
 8012c9a:	4b92      	ldr	r3, [pc, #584]	@ (8012ee4 <tcp_slowtmr+0x268>)
 8012c9c:	701a      	strb	r2, [r3, #0]
 8012c9e:	e000      	b.n	8012ca2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8012ca0:	bf00      	nop
  prev = NULL;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8012ca6:	4b90      	ldr	r3, [pc, #576]	@ (8012ee8 <tcp_slowtmr+0x26c>)
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012cac:	e29d      	b.n	80131ea <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cb0:	7d1b      	ldrb	r3, [r3, #20]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d106      	bne.n	8012cc4 <tcp_slowtmr+0x48>
 8012cb6:	4b8d      	ldr	r3, [pc, #564]	@ (8012eec <tcp_slowtmr+0x270>)
 8012cb8:	f240 42be 	movw	r2, #1214	@ 0x4be
 8012cbc:	498c      	ldr	r1, [pc, #560]	@ (8012ef0 <tcp_slowtmr+0x274>)
 8012cbe:	488d      	ldr	r0, [pc, #564]	@ (8012ef4 <tcp_slowtmr+0x278>)
 8012cc0:	f00a fb80 	bl	801d3c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cc6:	7d1b      	ldrb	r3, [r3, #20]
 8012cc8:	2b01      	cmp	r3, #1
 8012cca:	d106      	bne.n	8012cda <tcp_slowtmr+0x5e>
 8012ccc:	4b87      	ldr	r3, [pc, #540]	@ (8012eec <tcp_slowtmr+0x270>)
 8012cce:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8012cd2:	4989      	ldr	r1, [pc, #548]	@ (8012ef8 <tcp_slowtmr+0x27c>)
 8012cd4:	4887      	ldr	r0, [pc, #540]	@ (8012ef4 <tcp_slowtmr+0x278>)
 8012cd6:	f00a fb75 	bl	801d3c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cdc:	7d1b      	ldrb	r3, [r3, #20]
 8012cde:	2b0a      	cmp	r3, #10
 8012ce0:	d106      	bne.n	8012cf0 <tcp_slowtmr+0x74>
 8012ce2:	4b82      	ldr	r3, [pc, #520]	@ (8012eec <tcp_slowtmr+0x270>)
 8012ce4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8012ce8:	4984      	ldr	r1, [pc, #528]	@ (8012efc <tcp_slowtmr+0x280>)
 8012cea:	4882      	ldr	r0, [pc, #520]	@ (8012ef4 <tcp_slowtmr+0x278>)
 8012cec:	f00a fb6a 	bl	801d3c4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cf2:	7f9a      	ldrb	r2, [r3, #30]
 8012cf4:	4b7b      	ldr	r3, [pc, #492]	@ (8012ee4 <tcp_slowtmr+0x268>)
 8012cf6:	781b      	ldrb	r3, [r3, #0]
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	d105      	bne.n	8012d08 <tcp_slowtmr+0x8c>
      prev = pcb;
 8012cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d02:	68db      	ldr	r3, [r3, #12]
 8012d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8012d06:	e270      	b.n	80131ea <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8012d08:	4b76      	ldr	r3, [pc, #472]	@ (8012ee4 <tcp_slowtmr+0x268>)
 8012d0a:	781a      	ldrb	r2, [r3, #0]
 8012d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d0e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8012d10:	2300      	movs	r3, #0
 8012d12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8012d16:	2300      	movs	r3, #0
 8012d18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d1e:	7d1b      	ldrb	r3, [r3, #20]
 8012d20:	2b02      	cmp	r3, #2
 8012d22:	d10a      	bne.n	8012d3a <tcp_slowtmr+0xbe>
 8012d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012d2a:	2b05      	cmp	r3, #5
 8012d2c:	d905      	bls.n	8012d3a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8012d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d32:	3301      	adds	r3, #1
 8012d34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012d38:	e11e      	b.n	8012f78 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8012d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012d40:	2b0b      	cmp	r3, #11
 8012d42:	d905      	bls.n	8012d50 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8012d44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d48:	3301      	adds	r3, #1
 8012d4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012d4e:	e113      	b.n	8012f78 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8012d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d52:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d075      	beq.n	8012e46 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8012d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d006      	beq.n	8012d70 <tcp_slowtmr+0xf4>
 8012d62:	4b62      	ldr	r3, [pc, #392]	@ (8012eec <tcp_slowtmr+0x270>)
 8012d64:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8012d68:	4965      	ldr	r1, [pc, #404]	@ (8012f00 <tcp_slowtmr+0x284>)
 8012d6a:	4862      	ldr	r0, [pc, #392]	@ (8012ef4 <tcp_slowtmr+0x278>)
 8012d6c:	f00a fb2a 	bl	801d3c4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d106      	bne.n	8012d86 <tcp_slowtmr+0x10a>
 8012d78:	4b5c      	ldr	r3, [pc, #368]	@ (8012eec <tcp_slowtmr+0x270>)
 8012d7a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8012d7e:	4961      	ldr	r1, [pc, #388]	@ (8012f04 <tcp_slowtmr+0x288>)
 8012d80:	485c      	ldr	r0, [pc, #368]	@ (8012ef4 <tcp_slowtmr+0x278>)
 8012d82:	f00a fb1f 	bl	801d3c4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8012d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d88:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8012d8c:	2b0b      	cmp	r3, #11
 8012d8e:	d905      	bls.n	8012d9c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8012d90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d94:	3301      	adds	r3, #1
 8012d96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012d9a:	e0ed      	b.n	8012f78 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8012d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d9e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012da2:	3b01      	subs	r3, #1
 8012da4:	4a58      	ldr	r2, [pc, #352]	@ (8012f08 <tcp_slowtmr+0x28c>)
 8012da6:	5cd3      	ldrb	r3, [r2, r3]
 8012da8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8012daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dac:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012db0:	7c7a      	ldrb	r2, [r7, #17]
 8012db2:	429a      	cmp	r2, r3
 8012db4:	d907      	bls.n	8012dc6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8012db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012db8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012dbc:	3301      	adds	r3, #1
 8012dbe:	b2da      	uxtb	r2, r3
 8012dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dc2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8012dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dc8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012dcc:	7c7a      	ldrb	r2, [r7, #17]
 8012dce:	429a      	cmp	r2, r3
 8012dd0:	f200 80d2 	bhi.w	8012f78 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8012dd4:	2301      	movs	r3, #1
 8012dd6:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8012dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d108      	bne.n	8012df4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8012de2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012de4:	f004 fc24 	bl	8017630 <tcp_zero_window_probe>
 8012de8:	4603      	mov	r3, r0
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d014      	beq.n	8012e18 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8012dee:	2300      	movs	r3, #0
 8012df0:	623b      	str	r3, [r7, #32]
 8012df2:	e011      	b.n	8012e18 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8012df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012df6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012dfa:	4619      	mov	r1, r3
 8012dfc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012dfe:	f003 fae9 	bl	80163d4 <tcp_split_unsent_seg>
 8012e02:	4603      	mov	r3, r0
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d107      	bne.n	8012e18 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8012e08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012e0a:	f003 fd69 	bl	80168e0 <tcp_output>
 8012e0e:	4603      	mov	r3, r0
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d101      	bne.n	8012e18 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8012e14:	2300      	movs	r3, #0
 8012e16:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8012e18:	6a3b      	ldr	r3, [r7, #32]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	f000 80ac 	beq.w	8012f78 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8012e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e22:	2200      	movs	r2, #0
 8012e24:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8012e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e2a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012e2e:	2b06      	cmp	r3, #6
 8012e30:	f200 80a2 	bhi.w	8012f78 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8012e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e36:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012e3a:	3301      	adds	r3, #1
 8012e3c:	b2da      	uxtb	r2, r3
 8012e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e40:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8012e44:	e098      	b.n	8012f78 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8012e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e48:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	db0f      	blt.n	8012e70 <tcp_slowtmr+0x1f4>
 8012e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e52:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012e56:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8012e5a:	4293      	cmp	r3, r2
 8012e5c:	d008      	beq.n	8012e70 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8012e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e60:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012e64:	b29b      	uxth	r3, r3
 8012e66:	3301      	adds	r3, #1
 8012e68:	b29b      	uxth	r3, r3
 8012e6a:	b21a      	sxth	r2, r3
 8012e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e6e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8012e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e72:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8012e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e78:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8012e7c:	429a      	cmp	r2, r3
 8012e7e:	db7b      	blt.n	8012f78 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8012e80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012e82:	f004 f821 	bl	8016ec8 <tcp_rexmit_rto_prepare>
 8012e86:	4603      	mov	r3, r0
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d007      	beq.n	8012e9c <tcp_slowtmr+0x220>
 8012e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d171      	bne.n	8012f78 <tcp_slowtmr+0x2fc>
 8012e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d06d      	beq.n	8012f78 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8012e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e9e:	7d1b      	ldrb	r3, [r3, #20]
 8012ea0:	2b02      	cmp	r3, #2
 8012ea2:	d03a      	beq.n	8012f1a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8012ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ea6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012eaa:	2b0c      	cmp	r3, #12
 8012eac:	bf28      	it	cs
 8012eae:	230c      	movcs	r3, #12
 8012eb0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012eb4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012eb8:	10db      	asrs	r3, r3, #3
 8012eba:	b21b      	sxth	r3, r3
 8012ebc:	461a      	mov	r2, r3
 8012ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ec0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012ec4:	4413      	add	r3, r2
 8012ec6:	7efa      	ldrb	r2, [r7, #27]
 8012ec8:	4910      	ldr	r1, [pc, #64]	@ (8012f0c <tcp_slowtmr+0x290>)
 8012eca:	5c8a      	ldrb	r2, [r1, r2]
 8012ecc:	4093      	lsls	r3, r2
 8012ece:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012ed0:	697b      	ldr	r3, [r7, #20]
 8012ed2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8012ed6:	4293      	cmp	r3, r2
 8012ed8:	dc1a      	bgt.n	8012f10 <tcp_slowtmr+0x294>
 8012eda:	697b      	ldr	r3, [r7, #20]
 8012edc:	b21a      	sxth	r2, r3
 8012ede:	e019      	b.n	8012f14 <tcp_slowtmr+0x298>
 8012ee0:	2400cc34 	.word	0x2400cc34
 8012ee4:	2400cc4a 	.word	0x2400cc4a
 8012ee8:	2400cc40 	.word	0x2400cc40
 8012eec:	0802016c 	.word	0x0802016c
 8012ef0:	080204b0 	.word	0x080204b0
 8012ef4:	080201b0 	.word	0x080201b0
 8012ef8:	080204dc 	.word	0x080204dc
 8012efc:	08020508 	.word	0x08020508
 8012f00:	08020538 	.word	0x08020538
 8012f04:	0802056c 	.word	0x0802056c
 8012f08:	080225d0 	.word	0x080225d0
 8012f0c:	080225c0 	.word	0x080225c0
 8012f10:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8012f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f16:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8012f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012f2c:	4293      	cmp	r3, r2
 8012f2e:	bf28      	it	cs
 8012f30:	4613      	movcs	r3, r2
 8012f32:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8012f34:	8a7b      	ldrh	r3, [r7, #18]
 8012f36:	085b      	lsrs	r3, r3, #1
 8012f38:	b29a      	uxth	r2, r3
 8012f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f3c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f42:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012f4a:	005b      	lsls	r3, r3, #1
 8012f4c:	b29b      	uxth	r3, r3
 8012f4e:	429a      	cmp	r2, r3
 8012f50:	d206      	bcs.n	8012f60 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8012f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012f56:	005b      	lsls	r3, r3, #1
 8012f58:	b29a      	uxth	r2, r3
 8012f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f5c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8012f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f62:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8012f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f66:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8012f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8012f72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012f74:	f004 f818 	bl	8016fa8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8012f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f7a:	7d1b      	ldrb	r3, [r3, #20]
 8012f7c:	2b06      	cmp	r3, #6
 8012f7e:	d111      	bne.n	8012fa4 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8012f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f82:	8b5b      	ldrh	r3, [r3, #26]
 8012f84:	f003 0310 	and.w	r3, r3, #16
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d00b      	beq.n	8012fa4 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012f8c:	4b9c      	ldr	r3, [pc, #624]	@ (8013200 <tcp_slowtmr+0x584>)
 8012f8e:	681a      	ldr	r2, [r3, #0]
 8012f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f92:	6a1b      	ldr	r3, [r3, #32]
 8012f94:	1ad3      	subs	r3, r2, r3
 8012f96:	2b28      	cmp	r3, #40	@ 0x28
 8012f98:	d904      	bls.n	8012fa4 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8012f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012f9e:	3301      	adds	r3, #1
 8012fa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fa6:	7a5b      	ldrb	r3, [r3, #9]
 8012fa8:	f003 0308 	and.w	r3, r3, #8
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d04a      	beq.n	8013046 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8012fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fb2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012fb4:	2b04      	cmp	r3, #4
 8012fb6:	d003      	beq.n	8012fc0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8012fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fba:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012fbc:	2b07      	cmp	r3, #7
 8012fbe:	d142      	bne.n	8013046 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012fc0:	4b8f      	ldr	r3, [pc, #572]	@ (8013200 <tcp_slowtmr+0x584>)
 8012fc2:	681a      	ldr	r2, [r3, #0]
 8012fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fc6:	6a1b      	ldr	r3, [r3, #32]
 8012fc8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8012fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fcc:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8012fd0:	4b8c      	ldr	r3, [pc, #560]	@ (8013204 <tcp_slowtmr+0x588>)
 8012fd2:	440b      	add	r3, r1
 8012fd4:	498c      	ldr	r1, [pc, #560]	@ (8013208 <tcp_slowtmr+0x58c>)
 8012fd6:	fba1 1303 	umull	r1, r3, r1, r3
 8012fda:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012fdc:	429a      	cmp	r2, r3
 8012fde:	d90a      	bls.n	8012ff6 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8012fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012fe4:	3301      	adds	r3, #1
 8012fe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8012fea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012fee:	3301      	adds	r3, #1
 8012ff0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012ff4:	e027      	b.n	8013046 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012ff6:	4b82      	ldr	r3, [pc, #520]	@ (8013200 <tcp_slowtmr+0x584>)
 8012ff8:	681a      	ldr	r2, [r3, #0]
 8012ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ffc:	6a1b      	ldr	r3, [r3, #32]
 8012ffe:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8013000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013002:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8013006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013008:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801300c:	4618      	mov	r0, r3
 801300e:	4b7f      	ldr	r3, [pc, #508]	@ (801320c <tcp_slowtmr+0x590>)
 8013010:	fb00 f303 	mul.w	r3, r0, r3
 8013014:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8013016:	497c      	ldr	r1, [pc, #496]	@ (8013208 <tcp_slowtmr+0x58c>)
 8013018:	fba1 1303 	umull	r1, r3, r1, r3
 801301c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801301e:	429a      	cmp	r2, r3
 8013020:	d911      	bls.n	8013046 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8013022:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013024:	f004 fac4 	bl	80175b0 <tcp_keepalive>
 8013028:	4603      	mov	r3, r0
 801302a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801302e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8013032:	2b00      	cmp	r3, #0
 8013034:	d107      	bne.n	8013046 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8013036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013038:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801303c:	3301      	adds	r3, #1
 801303e:	b2da      	uxtb	r2, r3
 8013040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013042:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8013046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801304a:	2b00      	cmp	r3, #0
 801304c:	d011      	beq.n	8013072 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801304e:	4b6c      	ldr	r3, [pc, #432]	@ (8013200 <tcp_slowtmr+0x584>)
 8013050:	681a      	ldr	r2, [r3, #0]
 8013052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013054:	6a1b      	ldr	r3, [r3, #32]
 8013056:	1ad2      	subs	r2, r2, r3
 8013058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801305a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801305e:	4619      	mov	r1, r3
 8013060:	460b      	mov	r3, r1
 8013062:	005b      	lsls	r3, r3, #1
 8013064:	440b      	add	r3, r1
 8013066:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8013068:	429a      	cmp	r2, r3
 801306a:	d302      	bcc.n	8013072 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 801306c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801306e:	f000 fddd 	bl	8013c2c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8013072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013074:	7d1b      	ldrb	r3, [r3, #20]
 8013076:	2b03      	cmp	r3, #3
 8013078:	d10b      	bne.n	8013092 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801307a:	4b61      	ldr	r3, [pc, #388]	@ (8013200 <tcp_slowtmr+0x584>)
 801307c:	681a      	ldr	r2, [r3, #0]
 801307e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013080:	6a1b      	ldr	r3, [r3, #32]
 8013082:	1ad3      	subs	r3, r2, r3
 8013084:	2b28      	cmp	r3, #40	@ 0x28
 8013086:	d904      	bls.n	8013092 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8013088:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801308c:	3301      	adds	r3, #1
 801308e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8013092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013094:	7d1b      	ldrb	r3, [r3, #20]
 8013096:	2b09      	cmp	r3, #9
 8013098:	d10b      	bne.n	80130b2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801309a:	4b59      	ldr	r3, [pc, #356]	@ (8013200 <tcp_slowtmr+0x584>)
 801309c:	681a      	ldr	r2, [r3, #0]
 801309e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130a0:	6a1b      	ldr	r3, [r3, #32]
 80130a2:	1ad3      	subs	r3, r2, r3
 80130a4:	2bf0      	cmp	r3, #240	@ 0xf0
 80130a6:	d904      	bls.n	80130b2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80130a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80130ac:	3301      	adds	r3, #1
 80130ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80130b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d060      	beq.n	801317c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80130ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80130c0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80130c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80130c4:	f000 fbfe 	bl	80138c4 <tcp_pcb_purge>
      if (prev != NULL) {
 80130c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d010      	beq.n	80130f0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80130ce:	4b50      	ldr	r3, [pc, #320]	@ (8013210 <tcp_slowtmr+0x594>)
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80130d4:	429a      	cmp	r2, r3
 80130d6:	d106      	bne.n	80130e6 <tcp_slowtmr+0x46a>
 80130d8:	4b4e      	ldr	r3, [pc, #312]	@ (8013214 <tcp_slowtmr+0x598>)
 80130da:	f240 526d 	movw	r2, #1389	@ 0x56d
 80130de:	494e      	ldr	r1, [pc, #312]	@ (8013218 <tcp_slowtmr+0x59c>)
 80130e0:	484e      	ldr	r0, [pc, #312]	@ (801321c <tcp_slowtmr+0x5a0>)
 80130e2:	f00a f96f 	bl	801d3c4 <iprintf>
        prev->next = pcb->next;
 80130e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130e8:	68da      	ldr	r2, [r3, #12]
 80130ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130ec:	60da      	str	r2, [r3, #12]
 80130ee:	e00f      	b.n	8013110 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80130f0:	4b47      	ldr	r3, [pc, #284]	@ (8013210 <tcp_slowtmr+0x594>)
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80130f6:	429a      	cmp	r2, r3
 80130f8:	d006      	beq.n	8013108 <tcp_slowtmr+0x48c>
 80130fa:	4b46      	ldr	r3, [pc, #280]	@ (8013214 <tcp_slowtmr+0x598>)
 80130fc:	f240 5271 	movw	r2, #1393	@ 0x571
 8013100:	4947      	ldr	r1, [pc, #284]	@ (8013220 <tcp_slowtmr+0x5a4>)
 8013102:	4846      	ldr	r0, [pc, #280]	@ (801321c <tcp_slowtmr+0x5a0>)
 8013104:	f00a f95e 	bl	801d3c4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8013108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801310a:	68db      	ldr	r3, [r3, #12]
 801310c:	4a40      	ldr	r2, [pc, #256]	@ (8013210 <tcp_slowtmr+0x594>)
 801310e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8013110:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013114:	2b00      	cmp	r3, #0
 8013116:	d013      	beq.n	8013140 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801311a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801311c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801311e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013120:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8013122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013124:	3304      	adds	r3, #4
 8013126:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013128:	8ad2      	ldrh	r2, [r2, #22]
 801312a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801312c:	8b09      	ldrh	r1, [r1, #24]
 801312e:	9102      	str	r1, [sp, #8]
 8013130:	9201      	str	r2, [sp, #4]
 8013132:	9300      	str	r3, [sp, #0]
 8013134:	462b      	mov	r3, r5
 8013136:	4622      	mov	r2, r4
 8013138:	4601      	mov	r1, r0
 801313a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801313c:	f004 f984 	bl	8017448 <tcp_rst>
      err_arg = pcb->callback_arg;
 8013140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013142:	691b      	ldr	r3, [r3, #16]
 8013144:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8013146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013148:	7d1b      	ldrb	r3, [r3, #20]
 801314a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801314c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801314e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8013150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013152:	68db      	ldr	r3, [r3, #12]
 8013154:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8013156:	6838      	ldr	r0, [r7, #0]
 8013158:	f7ff f9f2 	bl	8012540 <tcp_free>
      tcp_active_pcbs_changed = 0;
 801315c:	4b31      	ldr	r3, [pc, #196]	@ (8013224 <tcp_slowtmr+0x5a8>)
 801315e:	2200      	movs	r2, #0
 8013160:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d004      	beq.n	8013172 <tcp_slowtmr+0x4f6>
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	f06f 010c 	mvn.w	r1, #12
 801316e:	68b8      	ldr	r0, [r7, #8]
 8013170:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8013172:	4b2c      	ldr	r3, [pc, #176]	@ (8013224 <tcp_slowtmr+0x5a8>)
 8013174:	781b      	ldrb	r3, [r3, #0]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d037      	beq.n	80131ea <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801317a:	e592      	b.n	8012ca2 <tcp_slowtmr+0x26>
      prev = pcb;
 801317c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801317e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013182:	68db      	ldr	r3, [r3, #12]
 8013184:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8013186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013188:	7f1b      	ldrb	r3, [r3, #28]
 801318a:	3301      	adds	r3, #1
 801318c:	b2da      	uxtb	r2, r3
 801318e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013190:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8013192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013194:	7f1a      	ldrb	r2, [r3, #28]
 8013196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013198:	7f5b      	ldrb	r3, [r3, #29]
 801319a:	429a      	cmp	r2, r3
 801319c:	d325      	bcc.n	80131ea <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801319e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131a0:	2200      	movs	r2, #0
 80131a2:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80131a4:	4b1f      	ldr	r3, [pc, #124]	@ (8013224 <tcp_slowtmr+0x5a8>)
 80131a6:	2200      	movs	r2, #0
 80131a8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80131aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d00b      	beq.n	80131cc <tcp_slowtmr+0x550>
 80131b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80131ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80131bc:	6912      	ldr	r2, [r2, #16]
 80131be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80131c0:	4610      	mov	r0, r2
 80131c2:	4798      	blx	r3
 80131c4:	4603      	mov	r3, r0
 80131c6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80131ca:	e002      	b.n	80131d2 <tcp_slowtmr+0x556>
 80131cc:	2300      	movs	r3, #0
 80131ce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80131d2:	4b14      	ldr	r3, [pc, #80]	@ (8013224 <tcp_slowtmr+0x5a8>)
 80131d4:	781b      	ldrb	r3, [r3, #0]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	f47f ad62 	bne.w	8012ca0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80131dc:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d102      	bne.n	80131ea <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80131e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80131e6:	f003 fb7b 	bl	80168e0 <tcp_output>
  while (pcb != NULL) {
 80131ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	f47f ad5e 	bne.w	8012cae <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80131f2:	2300      	movs	r3, #0
 80131f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80131f6:	4b0c      	ldr	r3, [pc, #48]	@ (8013228 <tcp_slowtmr+0x5ac>)
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80131fc:	e069      	b.n	80132d2 <tcp_slowtmr+0x656>
 80131fe:	bf00      	nop
 8013200:	2400cc34 	.word	0x2400cc34
 8013204:	000a4cb8 	.word	0x000a4cb8
 8013208:	10624dd3 	.word	0x10624dd3
 801320c:	000124f8 	.word	0x000124f8
 8013210:	2400cc40 	.word	0x2400cc40
 8013214:	0802016c 	.word	0x0802016c
 8013218:	080205a4 	.word	0x080205a4
 801321c:	080201b0 	.word	0x080201b0
 8013220:	080205d0 	.word	0x080205d0
 8013224:	2400cc48 	.word	0x2400cc48
 8013228:	2400cc44 	.word	0x2400cc44
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801322c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801322e:	7d1b      	ldrb	r3, [r3, #20]
 8013230:	2b0a      	cmp	r3, #10
 8013232:	d006      	beq.n	8013242 <tcp_slowtmr+0x5c6>
 8013234:	4b2b      	ldr	r3, [pc, #172]	@ (80132e4 <tcp_slowtmr+0x668>)
 8013236:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801323a:	492b      	ldr	r1, [pc, #172]	@ (80132e8 <tcp_slowtmr+0x66c>)
 801323c:	482b      	ldr	r0, [pc, #172]	@ (80132ec <tcp_slowtmr+0x670>)
 801323e:	f00a f8c1 	bl	801d3c4 <iprintf>
    pcb_remove = 0;
 8013242:	2300      	movs	r3, #0
 8013244:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013248:	4b29      	ldr	r3, [pc, #164]	@ (80132f0 <tcp_slowtmr+0x674>)
 801324a:	681a      	ldr	r2, [r3, #0]
 801324c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801324e:	6a1b      	ldr	r3, [r3, #32]
 8013250:	1ad3      	subs	r3, r2, r3
 8013252:	2bf0      	cmp	r3, #240	@ 0xf0
 8013254:	d904      	bls.n	8013260 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8013256:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801325a:	3301      	adds	r3, #1
 801325c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013260:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013264:	2b00      	cmp	r3, #0
 8013266:	d02f      	beq.n	80132c8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8013268:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801326a:	f000 fb2b 	bl	80138c4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801326e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013270:	2b00      	cmp	r3, #0
 8013272:	d010      	beq.n	8013296 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8013274:	4b1f      	ldr	r3, [pc, #124]	@ (80132f4 <tcp_slowtmr+0x678>)
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801327a:	429a      	cmp	r2, r3
 801327c:	d106      	bne.n	801328c <tcp_slowtmr+0x610>
 801327e:	4b19      	ldr	r3, [pc, #100]	@ (80132e4 <tcp_slowtmr+0x668>)
 8013280:	f240 52af 	movw	r2, #1455	@ 0x5af
 8013284:	491c      	ldr	r1, [pc, #112]	@ (80132f8 <tcp_slowtmr+0x67c>)
 8013286:	4819      	ldr	r0, [pc, #100]	@ (80132ec <tcp_slowtmr+0x670>)
 8013288:	f00a f89c 	bl	801d3c4 <iprintf>
        prev->next = pcb->next;
 801328c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801328e:	68da      	ldr	r2, [r3, #12]
 8013290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013292:	60da      	str	r2, [r3, #12]
 8013294:	e00f      	b.n	80132b6 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8013296:	4b17      	ldr	r3, [pc, #92]	@ (80132f4 <tcp_slowtmr+0x678>)
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801329c:	429a      	cmp	r2, r3
 801329e:	d006      	beq.n	80132ae <tcp_slowtmr+0x632>
 80132a0:	4b10      	ldr	r3, [pc, #64]	@ (80132e4 <tcp_slowtmr+0x668>)
 80132a2:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80132a6:	4915      	ldr	r1, [pc, #84]	@ (80132fc <tcp_slowtmr+0x680>)
 80132a8:	4810      	ldr	r0, [pc, #64]	@ (80132ec <tcp_slowtmr+0x670>)
 80132aa:	f00a f88b 	bl	801d3c4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80132ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132b0:	68db      	ldr	r3, [r3, #12]
 80132b2:	4a10      	ldr	r2, [pc, #64]	@ (80132f4 <tcp_slowtmr+0x678>)
 80132b4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80132b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132b8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80132ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132bc:	68db      	ldr	r3, [r3, #12]
 80132be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80132c0:	69f8      	ldr	r0, [r7, #28]
 80132c2:	f7ff f93d 	bl	8012540 <tcp_free>
 80132c6:	e004      	b.n	80132d2 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80132c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80132cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132ce:	68db      	ldr	r3, [r3, #12]
 80132d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80132d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d1a9      	bne.n	801322c <tcp_slowtmr+0x5b0>
    }
  }
}
 80132d8:	bf00      	nop
 80132da:	bf00      	nop
 80132dc:	3730      	adds	r7, #48	@ 0x30
 80132de:	46bd      	mov	sp, r7
 80132e0:	bdb0      	pop	{r4, r5, r7, pc}
 80132e2:	bf00      	nop
 80132e4:	0802016c 	.word	0x0802016c
 80132e8:	080205fc 	.word	0x080205fc
 80132ec:	080201b0 	.word	0x080201b0
 80132f0:	2400cc34 	.word	0x2400cc34
 80132f4:	2400cc44 	.word	0x2400cc44
 80132f8:	0802062c 	.word	0x0802062c
 80132fc:	08020654 	.word	0x08020654

08013300 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b082      	sub	sp, #8
 8013304:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8013306:	4b2d      	ldr	r3, [pc, #180]	@ (80133bc <tcp_fasttmr+0xbc>)
 8013308:	781b      	ldrb	r3, [r3, #0]
 801330a:	3301      	adds	r3, #1
 801330c:	b2da      	uxtb	r2, r3
 801330e:	4b2b      	ldr	r3, [pc, #172]	@ (80133bc <tcp_fasttmr+0xbc>)
 8013310:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8013312:	4b2b      	ldr	r3, [pc, #172]	@ (80133c0 <tcp_fasttmr+0xc0>)
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013318:	e048      	b.n	80133ac <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	7f9a      	ldrb	r2, [r3, #30]
 801331e:	4b27      	ldr	r3, [pc, #156]	@ (80133bc <tcp_fasttmr+0xbc>)
 8013320:	781b      	ldrb	r3, [r3, #0]
 8013322:	429a      	cmp	r2, r3
 8013324:	d03f      	beq.n	80133a6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8013326:	4b25      	ldr	r3, [pc, #148]	@ (80133bc <tcp_fasttmr+0xbc>)
 8013328:	781a      	ldrb	r2, [r3, #0]
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	8b5b      	ldrh	r3, [r3, #26]
 8013332:	f003 0301 	and.w	r3, r3, #1
 8013336:	2b00      	cmp	r3, #0
 8013338:	d010      	beq.n	801335c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	8b5b      	ldrh	r3, [r3, #26]
 801333e:	f043 0302 	orr.w	r3, r3, #2
 8013342:	b29a      	uxth	r2, r3
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8013348:	6878      	ldr	r0, [r7, #4]
 801334a:	f003 fac9 	bl	80168e0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	8b5b      	ldrh	r3, [r3, #26]
 8013352:	f023 0303 	bic.w	r3, r3, #3
 8013356:	b29a      	uxth	r2, r3
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	8b5b      	ldrh	r3, [r3, #26]
 8013360:	f003 0308 	and.w	r3, r3, #8
 8013364:	2b00      	cmp	r3, #0
 8013366:	d009      	beq.n	801337c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	8b5b      	ldrh	r3, [r3, #26]
 801336c:	f023 0308 	bic.w	r3, r3, #8
 8013370:	b29a      	uxth	r2, r3
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8013376:	6878      	ldr	r0, [r7, #4]
 8013378:	f7ff fa76 	bl	8012868 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	68db      	ldr	r3, [r3, #12]
 8013380:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013386:	2b00      	cmp	r3, #0
 8013388:	d00a      	beq.n	80133a0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801338a:	4b0e      	ldr	r3, [pc, #56]	@ (80133c4 <tcp_fasttmr+0xc4>)
 801338c:	2200      	movs	r2, #0
 801338e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8013390:	6878      	ldr	r0, [r7, #4]
 8013392:	f000 f819 	bl	80133c8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8013396:	4b0b      	ldr	r3, [pc, #44]	@ (80133c4 <tcp_fasttmr+0xc4>)
 8013398:	781b      	ldrb	r3, [r3, #0]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d000      	beq.n	80133a0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801339e:	e7b8      	b.n	8013312 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80133a0:	683b      	ldr	r3, [r7, #0]
 80133a2:	607b      	str	r3, [r7, #4]
 80133a4:	e002      	b.n	80133ac <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	68db      	ldr	r3, [r3, #12]
 80133aa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d1b3      	bne.n	801331a <tcp_fasttmr+0x1a>
    }
  }
}
 80133b2:	bf00      	nop
 80133b4:	bf00      	nop
 80133b6:	3708      	adds	r7, #8
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd80      	pop	{r7, pc}
 80133bc:	2400cc4a 	.word	0x2400cc4a
 80133c0:	2400cc40 	.word	0x2400cc40
 80133c4:	2400cc48 	.word	0x2400cc48

080133c8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80133c8:	b590      	push	{r4, r7, lr}
 80133ca:	b085      	sub	sp, #20
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d109      	bne.n	80133ea <tcp_process_refused_data+0x22>
 80133d6:	4b37      	ldr	r3, [pc, #220]	@ (80134b4 <tcp_process_refused_data+0xec>)
 80133d8:	f240 6209 	movw	r2, #1545	@ 0x609
 80133dc:	4936      	ldr	r1, [pc, #216]	@ (80134b8 <tcp_process_refused_data+0xf0>)
 80133de:	4837      	ldr	r0, [pc, #220]	@ (80134bc <tcp_process_refused_data+0xf4>)
 80133e0:	f009 fff0 	bl	801d3c4 <iprintf>
 80133e4:	f06f 030f 	mvn.w	r3, #15
 80133e8:	e060      	b.n	80134ac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80133ee:	7b5b      	ldrb	r3, [r3, #13]
 80133f0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80133f6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	2200      	movs	r2, #0
 80133fc:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013404:	2b00      	cmp	r3, #0
 8013406:	d00b      	beq.n	8013420 <tcp_process_refused_data+0x58>
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	6918      	ldr	r0, [r3, #16]
 8013412:	2300      	movs	r3, #0
 8013414:	68ba      	ldr	r2, [r7, #8]
 8013416:	6879      	ldr	r1, [r7, #4]
 8013418:	47a0      	blx	r4
 801341a:	4603      	mov	r3, r0
 801341c:	73fb      	strb	r3, [r7, #15]
 801341e:	e007      	b.n	8013430 <tcp_process_refused_data+0x68>
 8013420:	2300      	movs	r3, #0
 8013422:	68ba      	ldr	r2, [r7, #8]
 8013424:	6879      	ldr	r1, [r7, #4]
 8013426:	2000      	movs	r0, #0
 8013428:	f000 f8a4 	bl	8013574 <tcp_recv_null>
 801342c:	4603      	mov	r3, r0
 801342e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d12a      	bne.n	801348e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8013438:	7bbb      	ldrb	r3, [r7, #14]
 801343a:	f003 0320 	and.w	r3, r3, #32
 801343e:	2b00      	cmp	r3, #0
 8013440:	d033      	beq.n	80134aa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013446:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801344a:	d005      	beq.n	8013458 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013450:	3301      	adds	r3, #1
 8013452:	b29a      	uxth	r2, r3
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801345e:	2b00      	cmp	r3, #0
 8013460:	d00b      	beq.n	801347a <tcp_process_refused_data+0xb2>
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	6918      	ldr	r0, [r3, #16]
 801346c:	2300      	movs	r3, #0
 801346e:	2200      	movs	r2, #0
 8013470:	6879      	ldr	r1, [r7, #4]
 8013472:	47a0      	blx	r4
 8013474:	4603      	mov	r3, r0
 8013476:	73fb      	strb	r3, [r7, #15]
 8013478:	e001      	b.n	801347e <tcp_process_refused_data+0xb6>
 801347a:	2300      	movs	r3, #0
 801347c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801347e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013482:	f113 0f0d 	cmn.w	r3, #13
 8013486:	d110      	bne.n	80134aa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8013488:	f06f 030c 	mvn.w	r3, #12
 801348c:	e00e      	b.n	80134ac <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801348e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013492:	f113 0f0d 	cmn.w	r3, #13
 8013496:	d102      	bne.n	801349e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8013498:	f06f 030c 	mvn.w	r3, #12
 801349c:	e006      	b.n	80134ac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	68ba      	ldr	r2, [r7, #8]
 80134a2:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80134a4:	f06f 0304 	mvn.w	r3, #4
 80134a8:	e000      	b.n	80134ac <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80134aa:	2300      	movs	r3, #0
}
 80134ac:	4618      	mov	r0, r3
 80134ae:	3714      	adds	r7, #20
 80134b0:	46bd      	mov	sp, r7
 80134b2:	bd90      	pop	{r4, r7, pc}
 80134b4:	0802016c 	.word	0x0802016c
 80134b8:	0802067c 	.word	0x0802067c
 80134bc:	080201b0 	.word	0x080201b0

080134c0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b084      	sub	sp, #16
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80134c8:	e007      	b.n	80134da <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80134d0:	6878      	ldr	r0, [r7, #4]
 80134d2:	f000 f80a 	bl	80134ea <tcp_seg_free>
    seg = next;
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d1f4      	bne.n	80134ca <tcp_segs_free+0xa>
  }
}
 80134e0:	bf00      	nop
 80134e2:	bf00      	nop
 80134e4:	3710      	adds	r7, #16
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}

080134ea <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80134ea:	b580      	push	{r7, lr}
 80134ec:	b082      	sub	sp, #8
 80134ee:	af00      	add	r7, sp, #0
 80134f0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d00c      	beq.n	8013512 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	685b      	ldr	r3, [r3, #4]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d004      	beq.n	801350a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	685b      	ldr	r3, [r3, #4]
 8013504:	4618      	mov	r0, r3
 8013506:	f7fe fd5f 	bl	8011fc8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801350a:	6879      	ldr	r1, [r7, #4]
 801350c:	2003      	movs	r0, #3
 801350e:	f7fd feab 	bl	8011268 <memp_free>
  }
}
 8013512:	bf00      	nop
 8013514:	3708      	adds	r7, #8
 8013516:	46bd      	mov	sp, r7
 8013518:	bd80      	pop	{r7, pc}
	...

0801351c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801351c:	b580      	push	{r7, lr}
 801351e:	b084      	sub	sp, #16
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d106      	bne.n	8013538 <tcp_seg_copy+0x1c>
 801352a:	4b0f      	ldr	r3, [pc, #60]	@ (8013568 <tcp_seg_copy+0x4c>)
 801352c:	f240 6282 	movw	r2, #1666	@ 0x682
 8013530:	490e      	ldr	r1, [pc, #56]	@ (801356c <tcp_seg_copy+0x50>)
 8013532:	480f      	ldr	r0, [pc, #60]	@ (8013570 <tcp_seg_copy+0x54>)
 8013534:	f009 ff46 	bl	801d3c4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013538:	2003      	movs	r0, #3
 801353a:	f7fd fe1f 	bl	801117c <memp_malloc>
 801353e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d101      	bne.n	801354a <tcp_seg_copy+0x2e>
    return NULL;
 8013546:	2300      	movs	r3, #0
 8013548:	e00a      	b.n	8013560 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801354a:	2210      	movs	r2, #16
 801354c:	6879      	ldr	r1, [r7, #4]
 801354e:	68f8      	ldr	r0, [r7, #12]
 8013550:	f00a f95f 	bl	801d812 <memcpy>
  pbuf_ref(cseg->p);
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	685b      	ldr	r3, [r3, #4]
 8013558:	4618      	mov	r0, r3
 801355a:	f7fe fddb 	bl	8012114 <pbuf_ref>
  return cseg;
 801355e:	68fb      	ldr	r3, [r7, #12]
}
 8013560:	4618      	mov	r0, r3
 8013562:	3710      	adds	r7, #16
 8013564:	46bd      	mov	sp, r7
 8013566:	bd80      	pop	{r7, pc}
 8013568:	0802016c 	.word	0x0802016c
 801356c:	080206c0 	.word	0x080206c0
 8013570:	080201b0 	.word	0x080201b0

08013574 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8013574:	b580      	push	{r7, lr}
 8013576:	b084      	sub	sp, #16
 8013578:	af00      	add	r7, sp, #0
 801357a:	60f8      	str	r0, [r7, #12]
 801357c:	60b9      	str	r1, [r7, #8]
 801357e:	607a      	str	r2, [r7, #4]
 8013580:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8013582:	68bb      	ldr	r3, [r7, #8]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d109      	bne.n	801359c <tcp_recv_null+0x28>
 8013588:	4b12      	ldr	r3, [pc, #72]	@ (80135d4 <tcp_recv_null+0x60>)
 801358a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801358e:	4912      	ldr	r1, [pc, #72]	@ (80135d8 <tcp_recv_null+0x64>)
 8013590:	4812      	ldr	r0, [pc, #72]	@ (80135dc <tcp_recv_null+0x68>)
 8013592:	f009 ff17 	bl	801d3c4 <iprintf>
 8013596:	f06f 030f 	mvn.w	r3, #15
 801359a:	e016      	b.n	80135ca <tcp_recv_null+0x56>

  if (p != NULL) {
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d009      	beq.n	80135b6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	891b      	ldrh	r3, [r3, #8]
 80135a6:	4619      	mov	r1, r3
 80135a8:	68b8      	ldr	r0, [r7, #8]
 80135aa:	f7ff fb17 	bl	8012bdc <tcp_recved>
    pbuf_free(p);
 80135ae:	6878      	ldr	r0, [r7, #4]
 80135b0:	f7fe fd0a 	bl	8011fc8 <pbuf_free>
 80135b4:	e008      	b.n	80135c8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80135b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d104      	bne.n	80135c8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80135be:	68b8      	ldr	r0, [r7, #8]
 80135c0:	f7ff f9bc 	bl	801293c <tcp_close>
 80135c4:	4603      	mov	r3, r0
 80135c6:	e000      	b.n	80135ca <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80135c8:	2300      	movs	r3, #0
}
 80135ca:	4618      	mov	r0, r3
 80135cc:	3710      	adds	r7, #16
 80135ce:	46bd      	mov	sp, r7
 80135d0:	bd80      	pop	{r7, pc}
 80135d2:	bf00      	nop
 80135d4:	0802016c 	.word	0x0802016c
 80135d8:	080206dc 	.word	0x080206dc
 80135dc:	080201b0 	.word	0x080201b0

080135e0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b086      	sub	sp, #24
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	4603      	mov	r3, r0
 80135e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80135ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	db01      	blt.n	80135f6 <tcp_kill_prio+0x16>
 80135f2:	79fb      	ldrb	r3, [r7, #7]
 80135f4:	e000      	b.n	80135f8 <tcp_kill_prio+0x18>
 80135f6:	237f      	movs	r3, #127	@ 0x7f
 80135f8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80135fa:	7afb      	ldrb	r3, [r7, #11]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d034      	beq.n	801366a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013600:	7afb      	ldrb	r3, [r7, #11]
 8013602:	3b01      	subs	r3, #1
 8013604:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013606:	2300      	movs	r3, #0
 8013608:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801360a:	2300      	movs	r3, #0
 801360c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801360e:	4b19      	ldr	r3, [pc, #100]	@ (8013674 <tcp_kill_prio+0x94>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	617b      	str	r3, [r7, #20]
 8013614:	e01f      	b.n	8013656 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8013616:	697b      	ldr	r3, [r7, #20]
 8013618:	7d5b      	ldrb	r3, [r3, #21]
 801361a:	7afa      	ldrb	r2, [r7, #11]
 801361c:	429a      	cmp	r2, r3
 801361e:	d80c      	bhi.n	801363a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013620:	697b      	ldr	r3, [r7, #20]
 8013622:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013624:	7afa      	ldrb	r2, [r7, #11]
 8013626:	429a      	cmp	r2, r3
 8013628:	d112      	bne.n	8013650 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801362a:	4b13      	ldr	r3, [pc, #76]	@ (8013678 <tcp_kill_prio+0x98>)
 801362c:	681a      	ldr	r2, [r3, #0]
 801362e:	697b      	ldr	r3, [r7, #20]
 8013630:	6a1b      	ldr	r3, [r3, #32]
 8013632:	1ad3      	subs	r3, r2, r3
 8013634:	68fa      	ldr	r2, [r7, #12]
 8013636:	429a      	cmp	r2, r3
 8013638:	d80a      	bhi.n	8013650 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801363a:	4b0f      	ldr	r3, [pc, #60]	@ (8013678 <tcp_kill_prio+0x98>)
 801363c:	681a      	ldr	r2, [r3, #0]
 801363e:	697b      	ldr	r3, [r7, #20]
 8013640:	6a1b      	ldr	r3, [r3, #32]
 8013642:	1ad3      	subs	r3, r2, r3
 8013644:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8013646:	697b      	ldr	r3, [r7, #20]
 8013648:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801364a:	697b      	ldr	r3, [r7, #20]
 801364c:	7d5b      	ldrb	r3, [r3, #21]
 801364e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013650:	697b      	ldr	r3, [r7, #20]
 8013652:	68db      	ldr	r3, [r3, #12]
 8013654:	617b      	str	r3, [r7, #20]
 8013656:	697b      	ldr	r3, [r7, #20]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d1dc      	bne.n	8013616 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801365c:	693b      	ldr	r3, [r7, #16]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d004      	beq.n	801366c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013662:	6938      	ldr	r0, [r7, #16]
 8013664:	f7ff fa54 	bl	8012b10 <tcp_abort>
 8013668:	e000      	b.n	801366c <tcp_kill_prio+0x8c>
    return;
 801366a:	bf00      	nop
  }
}
 801366c:	3718      	adds	r7, #24
 801366e:	46bd      	mov	sp, r7
 8013670:	bd80      	pop	{r7, pc}
 8013672:	bf00      	nop
 8013674:	2400cc40 	.word	0x2400cc40
 8013678:	2400cc34 	.word	0x2400cc34

0801367c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b086      	sub	sp, #24
 8013680:	af00      	add	r7, sp, #0
 8013682:	4603      	mov	r3, r0
 8013684:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8013686:	79fb      	ldrb	r3, [r7, #7]
 8013688:	2b08      	cmp	r3, #8
 801368a:	d009      	beq.n	80136a0 <tcp_kill_state+0x24>
 801368c:	79fb      	ldrb	r3, [r7, #7]
 801368e:	2b09      	cmp	r3, #9
 8013690:	d006      	beq.n	80136a0 <tcp_kill_state+0x24>
 8013692:	4b1a      	ldr	r3, [pc, #104]	@ (80136fc <tcp_kill_state+0x80>)
 8013694:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8013698:	4919      	ldr	r1, [pc, #100]	@ (8013700 <tcp_kill_state+0x84>)
 801369a:	481a      	ldr	r0, [pc, #104]	@ (8013704 <tcp_kill_state+0x88>)
 801369c:	f009 fe92 	bl	801d3c4 <iprintf>

  inactivity = 0;
 80136a0:	2300      	movs	r3, #0
 80136a2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80136a4:	2300      	movs	r3, #0
 80136a6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80136a8:	4b17      	ldr	r3, [pc, #92]	@ (8013708 <tcp_kill_state+0x8c>)
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	617b      	str	r3, [r7, #20]
 80136ae:	e017      	b.n	80136e0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80136b0:	697b      	ldr	r3, [r7, #20]
 80136b2:	7d1b      	ldrb	r3, [r3, #20]
 80136b4:	79fa      	ldrb	r2, [r7, #7]
 80136b6:	429a      	cmp	r2, r3
 80136b8:	d10f      	bne.n	80136da <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80136ba:	4b14      	ldr	r3, [pc, #80]	@ (801370c <tcp_kill_state+0x90>)
 80136bc:	681a      	ldr	r2, [r3, #0]
 80136be:	697b      	ldr	r3, [r7, #20]
 80136c0:	6a1b      	ldr	r3, [r3, #32]
 80136c2:	1ad3      	subs	r3, r2, r3
 80136c4:	68fa      	ldr	r2, [r7, #12]
 80136c6:	429a      	cmp	r2, r3
 80136c8:	d807      	bhi.n	80136da <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80136ca:	4b10      	ldr	r3, [pc, #64]	@ (801370c <tcp_kill_state+0x90>)
 80136cc:	681a      	ldr	r2, [r3, #0]
 80136ce:	697b      	ldr	r3, [r7, #20]
 80136d0:	6a1b      	ldr	r3, [r3, #32]
 80136d2:	1ad3      	subs	r3, r2, r3
 80136d4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80136d6:	697b      	ldr	r3, [r7, #20]
 80136d8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80136da:	697b      	ldr	r3, [r7, #20]
 80136dc:	68db      	ldr	r3, [r3, #12]
 80136de:	617b      	str	r3, [r7, #20]
 80136e0:	697b      	ldr	r3, [r7, #20]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d1e4      	bne.n	80136b0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80136e6:	693b      	ldr	r3, [r7, #16]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d003      	beq.n	80136f4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80136ec:	2100      	movs	r1, #0
 80136ee:	6938      	ldr	r0, [r7, #16]
 80136f0:	f7ff f950 	bl	8012994 <tcp_abandon>
  }
}
 80136f4:	bf00      	nop
 80136f6:	3718      	adds	r7, #24
 80136f8:	46bd      	mov	sp, r7
 80136fa:	bd80      	pop	{r7, pc}
 80136fc:	0802016c 	.word	0x0802016c
 8013700:	080206f8 	.word	0x080206f8
 8013704:	080201b0 	.word	0x080201b0
 8013708:	2400cc40 	.word	0x2400cc40
 801370c:	2400cc34 	.word	0x2400cc34

08013710 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b084      	sub	sp, #16
 8013714:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8013716:	2300      	movs	r3, #0
 8013718:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801371a:	2300      	movs	r3, #0
 801371c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801371e:	4b12      	ldr	r3, [pc, #72]	@ (8013768 <tcp_kill_timewait+0x58>)
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	60fb      	str	r3, [r7, #12]
 8013724:	e012      	b.n	801374c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013726:	4b11      	ldr	r3, [pc, #68]	@ (801376c <tcp_kill_timewait+0x5c>)
 8013728:	681a      	ldr	r2, [r3, #0]
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	6a1b      	ldr	r3, [r3, #32]
 801372e:	1ad3      	subs	r3, r2, r3
 8013730:	687a      	ldr	r2, [r7, #4]
 8013732:	429a      	cmp	r2, r3
 8013734:	d807      	bhi.n	8013746 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8013736:	4b0d      	ldr	r3, [pc, #52]	@ (801376c <tcp_kill_timewait+0x5c>)
 8013738:	681a      	ldr	r2, [r3, #0]
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	6a1b      	ldr	r3, [r3, #32]
 801373e:	1ad3      	subs	r3, r2, r3
 8013740:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	68db      	ldr	r3, [r3, #12]
 801374a:	60fb      	str	r3, [r7, #12]
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	2b00      	cmp	r3, #0
 8013750:	d1e9      	bne.n	8013726 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8013752:	68bb      	ldr	r3, [r7, #8]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d002      	beq.n	801375e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013758:	68b8      	ldr	r0, [r7, #8]
 801375a:	f7ff f9d9 	bl	8012b10 <tcp_abort>
  }
}
 801375e:	bf00      	nop
 8013760:	3710      	adds	r7, #16
 8013762:	46bd      	mov	sp, r7
 8013764:	bd80      	pop	{r7, pc}
 8013766:	bf00      	nop
 8013768:	2400cc44 	.word	0x2400cc44
 801376c:	2400cc34 	.word	0x2400cc34

08013770 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b082      	sub	sp, #8
 8013774:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8013776:	4b10      	ldr	r3, [pc, #64]	@ (80137b8 <tcp_handle_closepend+0x48>)
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801377c:	e014      	b.n	80137a8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	68db      	ldr	r3, [r3, #12]
 8013782:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	8b5b      	ldrh	r3, [r3, #26]
 8013788:	f003 0308 	and.w	r3, r3, #8
 801378c:	2b00      	cmp	r3, #0
 801378e:	d009      	beq.n	80137a4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	8b5b      	ldrh	r3, [r3, #26]
 8013794:	f023 0308 	bic.w	r3, r3, #8
 8013798:	b29a      	uxth	r2, r3
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801379e:	6878      	ldr	r0, [r7, #4]
 80137a0:	f7ff f862 	bl	8012868 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80137a4:	683b      	ldr	r3, [r7, #0]
 80137a6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d1e7      	bne.n	801377e <tcp_handle_closepend+0xe>
  }
}
 80137ae:	bf00      	nop
 80137b0:	bf00      	nop
 80137b2:	3708      	adds	r7, #8
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}
 80137b8:	2400cc40 	.word	0x2400cc40

080137bc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b084      	sub	sp, #16
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	4603      	mov	r3, r0
 80137c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80137c6:	2001      	movs	r0, #1
 80137c8:	f7fd fcd8 	bl	801117c <memp_malloc>
 80137cc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d126      	bne.n	8013822 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80137d4:	f7ff ffcc 	bl	8013770 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80137d8:	f7ff ff9a 	bl	8013710 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80137dc:	2001      	movs	r0, #1
 80137de:	f7fd fccd 	bl	801117c <memp_malloc>
 80137e2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d11b      	bne.n	8013822 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80137ea:	2009      	movs	r0, #9
 80137ec:	f7ff ff46 	bl	801367c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80137f0:	2001      	movs	r0, #1
 80137f2:	f7fd fcc3 	bl	801117c <memp_malloc>
 80137f6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d111      	bne.n	8013822 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80137fe:	2008      	movs	r0, #8
 8013800:	f7ff ff3c 	bl	801367c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013804:	2001      	movs	r0, #1
 8013806:	f7fd fcb9 	bl	801117c <memp_malloc>
 801380a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d107      	bne.n	8013822 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013812:	79fb      	ldrb	r3, [r7, #7]
 8013814:	4618      	mov	r0, r3
 8013816:	f7ff fee3 	bl	80135e0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801381a:	2001      	movs	r0, #1
 801381c:	f7fd fcae 	bl	801117c <memp_malloc>
 8013820:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d03f      	beq.n	80138a8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013828:	229c      	movs	r2, #156	@ 0x9c
 801382a:	2100      	movs	r1, #0
 801382c:	68f8      	ldr	r0, [r7, #12]
 801382e:	f009 ff21 	bl	801d674 <memset>
    pcb->prio = prio;
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	79fa      	ldrb	r2, [r7, #7]
 8013836:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801383e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8013848:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	22ff      	movs	r2, #255	@ 0xff
 8013856:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801385e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	2206      	movs	r2, #6
 8013864:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	2206      	movs	r2, #6
 801386c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013874:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	2201      	movs	r2, #1
 801387a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 801387e:	4b0d      	ldr	r3, [pc, #52]	@ (80138b4 <tcp_alloc+0xf8>)
 8013880:	681a      	ldr	r2, [r3, #0]
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8013886:	4b0c      	ldr	r3, [pc, #48]	@ (80138b8 <tcp_alloc+0xfc>)
 8013888:	781a      	ldrb	r2, [r3, #0]
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8013894:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	4a08      	ldr	r2, [pc, #32]	@ (80138bc <tcp_alloc+0x100>)
 801389c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	4a07      	ldr	r2, [pc, #28]	@ (80138c0 <tcp_alloc+0x104>)
 80138a4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80138a8:	68fb      	ldr	r3, [r7, #12]
}
 80138aa:	4618      	mov	r0, r3
 80138ac:	3710      	adds	r7, #16
 80138ae:	46bd      	mov	sp, r7
 80138b0:	bd80      	pop	{r7, pc}
 80138b2:	bf00      	nop
 80138b4:	2400cc34 	.word	0x2400cc34
 80138b8:	2400cc4a 	.word	0x2400cc4a
 80138bc:	08013575 	.word	0x08013575
 80138c0:	006ddd00 	.word	0x006ddd00

080138c4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b082      	sub	sp, #8
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d107      	bne.n	80138e2 <tcp_pcb_purge+0x1e>
 80138d2:	4b21      	ldr	r3, [pc, #132]	@ (8013958 <tcp_pcb_purge+0x94>)
 80138d4:	f640 0251 	movw	r2, #2129	@ 0x851
 80138d8:	4920      	ldr	r1, [pc, #128]	@ (801395c <tcp_pcb_purge+0x98>)
 80138da:	4821      	ldr	r0, [pc, #132]	@ (8013960 <tcp_pcb_purge+0x9c>)
 80138dc:	f009 fd72 	bl	801d3c4 <iprintf>
 80138e0:	e037      	b.n	8013952 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	7d1b      	ldrb	r3, [r3, #20]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d033      	beq.n	8013952 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80138ee:	2b0a      	cmp	r3, #10
 80138f0:	d02f      	beq.n	8013952 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80138f6:	2b01      	cmp	r3, #1
 80138f8:	d02b      	beq.n	8013952 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d007      	beq.n	8013912 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013906:	4618      	mov	r0, r3
 8013908:	f7fe fb5e 	bl	8011fc8 <pbuf_free>
      pcb->refused_data = NULL;
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	2200      	movs	r2, #0
 8013910:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013916:	2b00      	cmp	r3, #0
 8013918:	d002      	beq.n	8013920 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801391a:	6878      	ldr	r0, [r7, #4]
 801391c:	f000 f986 	bl	8013c2c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013926:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801392c:	4618      	mov	r0, r3
 801392e:	f7ff fdc7 	bl	80134c0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013936:	4618      	mov	r0, r3
 8013938:	f7ff fdc2 	bl	80134c0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	2200      	movs	r2, #0
 8013940:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	2200      	movs	r2, #0
 801394e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013952:	3708      	adds	r7, #8
 8013954:	46bd      	mov	sp, r7
 8013956:	bd80      	pop	{r7, pc}
 8013958:	0802016c 	.word	0x0802016c
 801395c:	080207b8 	.word	0x080207b8
 8013960:	080201b0 	.word	0x080201b0

08013964 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b084      	sub	sp, #16
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]
 801396c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801396e:	683b      	ldr	r3, [r7, #0]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d106      	bne.n	8013982 <tcp_pcb_remove+0x1e>
 8013974:	4b3e      	ldr	r3, [pc, #248]	@ (8013a70 <tcp_pcb_remove+0x10c>)
 8013976:	f640 0283 	movw	r2, #2179	@ 0x883
 801397a:	493e      	ldr	r1, [pc, #248]	@ (8013a74 <tcp_pcb_remove+0x110>)
 801397c:	483e      	ldr	r0, [pc, #248]	@ (8013a78 <tcp_pcb_remove+0x114>)
 801397e:	f009 fd21 	bl	801d3c4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d106      	bne.n	8013996 <tcp_pcb_remove+0x32>
 8013988:	4b39      	ldr	r3, [pc, #228]	@ (8013a70 <tcp_pcb_remove+0x10c>)
 801398a:	f640 0284 	movw	r2, #2180	@ 0x884
 801398e:	493b      	ldr	r1, [pc, #236]	@ (8013a7c <tcp_pcb_remove+0x118>)
 8013990:	4839      	ldr	r0, [pc, #228]	@ (8013a78 <tcp_pcb_remove+0x114>)
 8013992:	f009 fd17 	bl	801d3c4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	683a      	ldr	r2, [r7, #0]
 801399c:	429a      	cmp	r2, r3
 801399e:	d105      	bne.n	80139ac <tcp_pcb_remove+0x48>
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	68da      	ldr	r2, [r3, #12]
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	601a      	str	r2, [r3, #0]
 80139aa:	e013      	b.n	80139d4 <tcp_pcb_remove+0x70>
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	60fb      	str	r3, [r7, #12]
 80139b2:	e00c      	b.n	80139ce <tcp_pcb_remove+0x6a>
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	68db      	ldr	r3, [r3, #12]
 80139b8:	683a      	ldr	r2, [r7, #0]
 80139ba:	429a      	cmp	r2, r3
 80139bc:	d104      	bne.n	80139c8 <tcp_pcb_remove+0x64>
 80139be:	683b      	ldr	r3, [r7, #0]
 80139c0:	68da      	ldr	r2, [r3, #12]
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	60da      	str	r2, [r3, #12]
 80139c6:	e005      	b.n	80139d4 <tcp_pcb_remove+0x70>
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	68db      	ldr	r3, [r3, #12]
 80139cc:	60fb      	str	r3, [r7, #12]
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d1ef      	bne.n	80139b4 <tcp_pcb_remove+0x50>
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	2200      	movs	r2, #0
 80139d8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80139da:	6838      	ldr	r0, [r7, #0]
 80139dc:	f7ff ff72 	bl	80138c4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80139e0:	683b      	ldr	r3, [r7, #0]
 80139e2:	7d1b      	ldrb	r3, [r3, #20]
 80139e4:	2b0a      	cmp	r3, #10
 80139e6:	d013      	beq.n	8013a10 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80139e8:	683b      	ldr	r3, [r7, #0]
 80139ea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80139ec:	2b01      	cmp	r3, #1
 80139ee:	d00f      	beq.n	8013a10 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80139f0:	683b      	ldr	r3, [r7, #0]
 80139f2:	8b5b      	ldrh	r3, [r3, #26]
 80139f4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d009      	beq.n	8013a10 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	8b5b      	ldrh	r3, [r3, #26]
 8013a00:	f043 0302 	orr.w	r3, r3, #2
 8013a04:	b29a      	uxth	r2, r3
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013a0a:	6838      	ldr	r0, [r7, #0]
 8013a0c:	f002 ff68 	bl	80168e0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013a10:	683b      	ldr	r3, [r7, #0]
 8013a12:	7d1b      	ldrb	r3, [r3, #20]
 8013a14:	2b01      	cmp	r3, #1
 8013a16:	d020      	beq.n	8013a5a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013a18:	683b      	ldr	r3, [r7, #0]
 8013a1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d006      	beq.n	8013a2e <tcp_pcb_remove+0xca>
 8013a20:	4b13      	ldr	r3, [pc, #76]	@ (8013a70 <tcp_pcb_remove+0x10c>)
 8013a22:	f640 0293 	movw	r2, #2195	@ 0x893
 8013a26:	4916      	ldr	r1, [pc, #88]	@ (8013a80 <tcp_pcb_remove+0x11c>)
 8013a28:	4813      	ldr	r0, [pc, #76]	@ (8013a78 <tcp_pcb_remove+0x114>)
 8013a2a:	f009 fccb 	bl	801d3c4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013a2e:	683b      	ldr	r3, [r7, #0]
 8013a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d006      	beq.n	8013a44 <tcp_pcb_remove+0xe0>
 8013a36:	4b0e      	ldr	r3, [pc, #56]	@ (8013a70 <tcp_pcb_remove+0x10c>)
 8013a38:	f640 0294 	movw	r2, #2196	@ 0x894
 8013a3c:	4911      	ldr	r1, [pc, #68]	@ (8013a84 <tcp_pcb_remove+0x120>)
 8013a3e:	480e      	ldr	r0, [pc, #56]	@ (8013a78 <tcp_pcb_remove+0x114>)
 8013a40:	f009 fcc0 	bl	801d3c4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013a44:	683b      	ldr	r3, [r7, #0]
 8013a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d006      	beq.n	8013a5a <tcp_pcb_remove+0xf6>
 8013a4c:	4b08      	ldr	r3, [pc, #32]	@ (8013a70 <tcp_pcb_remove+0x10c>)
 8013a4e:	f640 0296 	movw	r2, #2198	@ 0x896
 8013a52:	490d      	ldr	r1, [pc, #52]	@ (8013a88 <tcp_pcb_remove+0x124>)
 8013a54:	4808      	ldr	r0, [pc, #32]	@ (8013a78 <tcp_pcb_remove+0x114>)
 8013a56:	f009 fcb5 	bl	801d3c4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013a5a:	683b      	ldr	r3, [r7, #0]
 8013a5c:	2200      	movs	r2, #0
 8013a5e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013a60:	683b      	ldr	r3, [r7, #0]
 8013a62:	2200      	movs	r2, #0
 8013a64:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8013a66:	bf00      	nop
 8013a68:	3710      	adds	r7, #16
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	bd80      	pop	{r7, pc}
 8013a6e:	bf00      	nop
 8013a70:	0802016c 	.word	0x0802016c
 8013a74:	080207d4 	.word	0x080207d4
 8013a78:	080201b0 	.word	0x080201b0
 8013a7c:	080207f0 	.word	0x080207f0
 8013a80:	08020810 	.word	0x08020810
 8013a84:	08020828 	.word	0x08020828
 8013a88:	08020844 	.word	0x08020844

08013a8c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b082      	sub	sp, #8
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d106      	bne.n	8013aa8 <tcp_next_iss+0x1c>
 8013a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8013ac4 <tcp_next_iss+0x38>)
 8013a9c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8013aa0:	4909      	ldr	r1, [pc, #36]	@ (8013ac8 <tcp_next_iss+0x3c>)
 8013aa2:	480a      	ldr	r0, [pc, #40]	@ (8013acc <tcp_next_iss+0x40>)
 8013aa4:	f009 fc8e 	bl	801d3c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013aa8:	4b09      	ldr	r3, [pc, #36]	@ (8013ad0 <tcp_next_iss+0x44>)
 8013aaa:	681a      	ldr	r2, [r3, #0]
 8013aac:	4b09      	ldr	r3, [pc, #36]	@ (8013ad4 <tcp_next_iss+0x48>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	4413      	add	r3, r2
 8013ab2:	4a07      	ldr	r2, [pc, #28]	@ (8013ad0 <tcp_next_iss+0x44>)
 8013ab4:	6013      	str	r3, [r2, #0]
  return iss;
 8013ab6:	4b06      	ldr	r3, [pc, #24]	@ (8013ad0 <tcp_next_iss+0x44>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013aba:	4618      	mov	r0, r3
 8013abc:	3708      	adds	r7, #8
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	bd80      	pop	{r7, pc}
 8013ac2:	bf00      	nop
 8013ac4:	0802016c 	.word	0x0802016c
 8013ac8:	0802085c 	.word	0x0802085c
 8013acc:	080201b0 	.word	0x080201b0
 8013ad0:	2400002c 	.word	0x2400002c
 8013ad4:	2400cc34 	.word	0x2400cc34

08013ad8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b086      	sub	sp, #24
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	4603      	mov	r3, r0
 8013ae0:	60b9      	str	r1, [r7, #8]
 8013ae2:	607a      	str	r2, [r7, #4]
 8013ae4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d106      	bne.n	8013afa <tcp_eff_send_mss_netif+0x22>
 8013aec:	4b14      	ldr	r3, [pc, #80]	@ (8013b40 <tcp_eff_send_mss_netif+0x68>)
 8013aee:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8013af2:	4914      	ldr	r1, [pc, #80]	@ (8013b44 <tcp_eff_send_mss_netif+0x6c>)
 8013af4:	4814      	ldr	r0, [pc, #80]	@ (8013b48 <tcp_eff_send_mss_netif+0x70>)
 8013af6:	f009 fc65 	bl	801d3c4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013afa:	68bb      	ldr	r3, [r7, #8]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d101      	bne.n	8013b04 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013b00:	89fb      	ldrh	r3, [r7, #14]
 8013b02:	e019      	b.n	8013b38 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013b08:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013b0a:	8afb      	ldrh	r3, [r7, #22]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d012      	beq.n	8013b36 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013b10:	2328      	movs	r3, #40	@ 0x28
 8013b12:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013b14:	8afa      	ldrh	r2, [r7, #22]
 8013b16:	8abb      	ldrh	r3, [r7, #20]
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	d904      	bls.n	8013b26 <tcp_eff_send_mss_netif+0x4e>
 8013b1c:	8afa      	ldrh	r2, [r7, #22]
 8013b1e:	8abb      	ldrh	r3, [r7, #20]
 8013b20:	1ad3      	subs	r3, r2, r3
 8013b22:	b29b      	uxth	r3, r3
 8013b24:	e000      	b.n	8013b28 <tcp_eff_send_mss_netif+0x50>
 8013b26:	2300      	movs	r3, #0
 8013b28:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8013b2a:	8a7a      	ldrh	r2, [r7, #18]
 8013b2c:	89fb      	ldrh	r3, [r7, #14]
 8013b2e:	4293      	cmp	r3, r2
 8013b30:	bf28      	it	cs
 8013b32:	4613      	movcs	r3, r2
 8013b34:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8013b36:	89fb      	ldrh	r3, [r7, #14]
}
 8013b38:	4618      	mov	r0, r3
 8013b3a:	3718      	adds	r7, #24
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	bd80      	pop	{r7, pc}
 8013b40:	0802016c 	.word	0x0802016c
 8013b44:	08020878 	.word	0x08020878
 8013b48:	080201b0 	.word	0x080201b0

08013b4c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b084      	sub	sp, #16
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
 8013b54:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8013b56:	683b      	ldr	r3, [r7, #0]
 8013b58:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d119      	bne.n	8013b94 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013b60:	4b10      	ldr	r3, [pc, #64]	@ (8013ba4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8013b62:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8013b66:	4910      	ldr	r1, [pc, #64]	@ (8013ba8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013b68:	4810      	ldr	r0, [pc, #64]	@ (8013bac <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8013b6a:	f009 fc2b 	bl	801d3c4 <iprintf>

  while (pcb != NULL) {
 8013b6e:	e011      	b.n	8013b94 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	681a      	ldr	r2, [r3, #0]
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	429a      	cmp	r2, r3
 8013b7a:	d108      	bne.n	8013b8e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	68db      	ldr	r3, [r3, #12]
 8013b80:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8013b82:	68f8      	ldr	r0, [r7, #12]
 8013b84:	f7fe ffc4 	bl	8012b10 <tcp_abort>
      pcb = next;
 8013b88:	68bb      	ldr	r3, [r7, #8]
 8013b8a:	60fb      	str	r3, [r7, #12]
 8013b8c:	e002      	b.n	8013b94 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	68db      	ldr	r3, [r3, #12]
 8013b92:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d1ea      	bne.n	8013b70 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8013b9a:	bf00      	nop
 8013b9c:	bf00      	nop
 8013b9e:	3710      	adds	r7, #16
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}
 8013ba4:	0802016c 	.word	0x0802016c
 8013ba8:	080208a0 	.word	0x080208a0
 8013bac:	080201b0 	.word	0x080201b0

08013bb0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b084      	sub	sp, #16
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
 8013bb8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d02a      	beq.n	8013c16 <tcp_netif_ip_addr_changed+0x66>
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d026      	beq.n	8013c16 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013bc8:	4b15      	ldr	r3, [pc, #84]	@ (8013c20 <tcp_netif_ip_addr_changed+0x70>)
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	4619      	mov	r1, r3
 8013bce:	6878      	ldr	r0, [r7, #4]
 8013bd0:	f7ff ffbc 	bl	8013b4c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8013bd4:	4b13      	ldr	r3, [pc, #76]	@ (8013c24 <tcp_netif_ip_addr_changed+0x74>)
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	4619      	mov	r1, r3
 8013bda:	6878      	ldr	r0, [r7, #4]
 8013bdc:	f7ff ffb6 	bl	8013b4c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013be0:	683b      	ldr	r3, [r7, #0]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d017      	beq.n	8013c16 <tcp_netif_ip_addr_changed+0x66>
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d013      	beq.n	8013c16 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013bee:	4b0e      	ldr	r3, [pc, #56]	@ (8013c28 <tcp_netif_ip_addr_changed+0x78>)
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	60fb      	str	r3, [r7, #12]
 8013bf4:	e00c      	b.n	8013c10 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	681a      	ldr	r2, [r3, #0]
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	429a      	cmp	r2, r3
 8013c00:	d103      	bne.n	8013c0a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8013c02:	683b      	ldr	r3, [r7, #0]
 8013c04:	681a      	ldr	r2, [r3, #0]
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	68db      	ldr	r3, [r3, #12]
 8013c0e:	60fb      	str	r3, [r7, #12]
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d1ef      	bne.n	8013bf6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8013c16:	bf00      	nop
 8013c18:	3710      	adds	r7, #16
 8013c1a:	46bd      	mov	sp, r7
 8013c1c:	bd80      	pop	{r7, pc}
 8013c1e:	bf00      	nop
 8013c20:	2400cc40 	.word	0x2400cc40
 8013c24:	2400cc38 	.word	0x2400cc38
 8013c28:	2400cc3c 	.word	0x2400cc3c

08013c2c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b082      	sub	sp, #8
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d007      	beq.n	8013c4c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013c40:	4618      	mov	r0, r3
 8013c42:	f7ff fc3d 	bl	80134c0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	2200      	movs	r2, #0
 8013c4a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8013c4c:	bf00      	nop
 8013c4e:	3708      	adds	r7, #8
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bd80      	pop	{r7, pc}

08013c54 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8013c54:	b590      	push	{r4, r7, lr}
 8013c56:	b08d      	sub	sp, #52	@ 0x34
 8013c58:	af04      	add	r7, sp, #16
 8013c5a:	6078      	str	r0, [r7, #4]
 8013c5c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d105      	bne.n	8013c70 <tcp_input+0x1c>
 8013c64:	4b9b      	ldr	r3, [pc, #620]	@ (8013ed4 <tcp_input+0x280>)
 8013c66:	2283      	movs	r2, #131	@ 0x83
 8013c68:	499b      	ldr	r1, [pc, #620]	@ (8013ed8 <tcp_input+0x284>)
 8013c6a:	489c      	ldr	r0, [pc, #624]	@ (8013edc <tcp_input+0x288>)
 8013c6c:	f009 fbaa 	bl	801d3c4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	685b      	ldr	r3, [r3, #4]
 8013c74:	4a9a      	ldr	r2, [pc, #616]	@ (8013ee0 <tcp_input+0x28c>)
 8013c76:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	895b      	ldrh	r3, [r3, #10]
 8013c7c:	2b13      	cmp	r3, #19
 8013c7e:	f240 83d1 	bls.w	8014424 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013c82:	4b98      	ldr	r3, [pc, #608]	@ (8013ee4 <tcp_input+0x290>)
 8013c84:	695b      	ldr	r3, [r3, #20]
 8013c86:	4a97      	ldr	r2, [pc, #604]	@ (8013ee4 <tcp_input+0x290>)
 8013c88:	6812      	ldr	r2, [r2, #0]
 8013c8a:	4611      	mov	r1, r2
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	f007 fe19 	bl	801b8c4 <ip4_addr_isbroadcast_u32>
 8013c92:	4603      	mov	r3, r0
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	f040 83c7 	bne.w	8014428 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8013c9a:	4b92      	ldr	r3, [pc, #584]	@ (8013ee4 <tcp_input+0x290>)
 8013c9c:	695b      	ldr	r3, [r3, #20]
 8013c9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013ca2:	2be0      	cmp	r3, #224	@ 0xe0
 8013ca4:	f000 83c0 	beq.w	8014428 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013ca8:	4b8d      	ldr	r3, [pc, #564]	@ (8013ee0 <tcp_input+0x28c>)
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	899b      	ldrh	r3, [r3, #12]
 8013cae:	b29b      	uxth	r3, r3
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	f7fc fcd3 	bl	801065c <lwip_htons>
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	0b1b      	lsrs	r3, r3, #12
 8013cba:	b29b      	uxth	r3, r3
 8013cbc:	b2db      	uxtb	r3, r3
 8013cbe:	009b      	lsls	r3, r3, #2
 8013cc0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8013cc2:	7cbb      	ldrb	r3, [r7, #18]
 8013cc4:	2b13      	cmp	r3, #19
 8013cc6:	f240 83b1 	bls.w	801442c <tcp_input+0x7d8>
 8013cca:	7cbb      	ldrb	r3, [r7, #18]
 8013ccc:	b29a      	uxth	r2, r3
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	891b      	ldrh	r3, [r3, #8]
 8013cd2:	429a      	cmp	r2, r3
 8013cd4:	f200 83aa 	bhi.w	801442c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013cd8:	7cbb      	ldrb	r3, [r7, #18]
 8013cda:	b29b      	uxth	r3, r3
 8013cdc:	3b14      	subs	r3, #20
 8013cde:	b29a      	uxth	r2, r3
 8013ce0:	4b81      	ldr	r3, [pc, #516]	@ (8013ee8 <tcp_input+0x294>)
 8013ce2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8013ce4:	4b81      	ldr	r3, [pc, #516]	@ (8013eec <tcp_input+0x298>)
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	895a      	ldrh	r2, [r3, #10]
 8013cee:	7cbb      	ldrb	r3, [r7, #18]
 8013cf0:	b29b      	uxth	r3, r3
 8013cf2:	429a      	cmp	r2, r3
 8013cf4:	d309      	bcc.n	8013d0a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8013cf6:	4b7c      	ldr	r3, [pc, #496]	@ (8013ee8 <tcp_input+0x294>)
 8013cf8:	881a      	ldrh	r2, [r3, #0]
 8013cfa:	4b7d      	ldr	r3, [pc, #500]	@ (8013ef0 <tcp_input+0x29c>)
 8013cfc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013cfe:	7cbb      	ldrb	r3, [r7, #18]
 8013d00:	4619      	mov	r1, r3
 8013d02:	6878      	ldr	r0, [r7, #4]
 8013d04:	f7fe f8da 	bl	8011ebc <pbuf_remove_header>
 8013d08:	e04e      	b.n	8013da8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d105      	bne.n	8013d1e <tcp_input+0xca>
 8013d12:	4b70      	ldr	r3, [pc, #448]	@ (8013ed4 <tcp_input+0x280>)
 8013d14:	22c2      	movs	r2, #194	@ 0xc2
 8013d16:	4977      	ldr	r1, [pc, #476]	@ (8013ef4 <tcp_input+0x2a0>)
 8013d18:	4870      	ldr	r0, [pc, #448]	@ (8013edc <tcp_input+0x288>)
 8013d1a:	f009 fb53 	bl	801d3c4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013d1e:	2114      	movs	r1, #20
 8013d20:	6878      	ldr	r0, [r7, #4]
 8013d22:	f7fe f8cb 	bl	8011ebc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	895a      	ldrh	r2, [r3, #10]
 8013d2a:	4b71      	ldr	r3, [pc, #452]	@ (8013ef0 <tcp_input+0x29c>)
 8013d2c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8013d2e:	4b6e      	ldr	r3, [pc, #440]	@ (8013ee8 <tcp_input+0x294>)
 8013d30:	881a      	ldrh	r2, [r3, #0]
 8013d32:	4b6f      	ldr	r3, [pc, #444]	@ (8013ef0 <tcp_input+0x29c>)
 8013d34:	881b      	ldrh	r3, [r3, #0]
 8013d36:	1ad3      	subs	r3, r2, r3
 8013d38:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8013d3a:	4b6d      	ldr	r3, [pc, #436]	@ (8013ef0 <tcp_input+0x29c>)
 8013d3c:	881b      	ldrh	r3, [r3, #0]
 8013d3e:	4619      	mov	r1, r3
 8013d40:	6878      	ldr	r0, [r7, #4]
 8013d42:	f7fe f8bb 	bl	8011ebc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	895b      	ldrh	r3, [r3, #10]
 8013d4c:	8a3a      	ldrh	r2, [r7, #16]
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	f200 836e 	bhi.w	8014430 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	685b      	ldr	r3, [r3, #4]
 8013d5a:	4a64      	ldr	r2, [pc, #400]	@ (8013eec <tcp_input+0x298>)
 8013d5c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	8a3a      	ldrh	r2, [r7, #16]
 8013d64:	4611      	mov	r1, r2
 8013d66:	4618      	mov	r0, r3
 8013d68:	f7fe f8a8 	bl	8011ebc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	891a      	ldrh	r2, [r3, #8]
 8013d70:	8a3b      	ldrh	r3, [r7, #16]
 8013d72:	1ad3      	subs	r3, r2, r3
 8013d74:	b29a      	uxth	r2, r3
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	895b      	ldrh	r3, [r3, #10]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d005      	beq.n	8013d8e <tcp_input+0x13a>
 8013d82:	4b54      	ldr	r3, [pc, #336]	@ (8013ed4 <tcp_input+0x280>)
 8013d84:	22df      	movs	r2, #223	@ 0xdf
 8013d86:	495c      	ldr	r1, [pc, #368]	@ (8013ef8 <tcp_input+0x2a4>)
 8013d88:	4854      	ldr	r0, [pc, #336]	@ (8013edc <tcp_input+0x288>)
 8013d8a:	f009 fb1b 	bl	801d3c4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	891a      	ldrh	r2, [r3, #8]
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	891b      	ldrh	r3, [r3, #8]
 8013d98:	429a      	cmp	r2, r3
 8013d9a:	d005      	beq.n	8013da8 <tcp_input+0x154>
 8013d9c:	4b4d      	ldr	r3, [pc, #308]	@ (8013ed4 <tcp_input+0x280>)
 8013d9e:	22e0      	movs	r2, #224	@ 0xe0
 8013da0:	4956      	ldr	r1, [pc, #344]	@ (8013efc <tcp_input+0x2a8>)
 8013da2:	484e      	ldr	r0, [pc, #312]	@ (8013edc <tcp_input+0x288>)
 8013da4:	f009 fb0e 	bl	801d3c4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013da8:	4b4d      	ldr	r3, [pc, #308]	@ (8013ee0 <tcp_input+0x28c>)
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	881b      	ldrh	r3, [r3, #0]
 8013dae:	b29b      	uxth	r3, r3
 8013db0:	4a4b      	ldr	r2, [pc, #300]	@ (8013ee0 <tcp_input+0x28c>)
 8013db2:	6814      	ldr	r4, [r2, #0]
 8013db4:	4618      	mov	r0, r3
 8013db6:	f7fc fc51 	bl	801065c <lwip_htons>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013dbe:	4b48      	ldr	r3, [pc, #288]	@ (8013ee0 <tcp_input+0x28c>)
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	885b      	ldrh	r3, [r3, #2]
 8013dc4:	b29b      	uxth	r3, r3
 8013dc6:	4a46      	ldr	r2, [pc, #280]	@ (8013ee0 <tcp_input+0x28c>)
 8013dc8:	6814      	ldr	r4, [r2, #0]
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f7fc fc46 	bl	801065c <lwip_htons>
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8013dd4:	4b42      	ldr	r3, [pc, #264]	@ (8013ee0 <tcp_input+0x28c>)
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	685b      	ldr	r3, [r3, #4]
 8013dda:	4a41      	ldr	r2, [pc, #260]	@ (8013ee0 <tcp_input+0x28c>)
 8013ddc:	6814      	ldr	r4, [r2, #0]
 8013dde:	4618      	mov	r0, r3
 8013de0:	f7fc fc51 	bl	8010686 <lwip_htonl>
 8013de4:	4603      	mov	r3, r0
 8013de6:	6063      	str	r3, [r4, #4]
 8013de8:	6863      	ldr	r3, [r4, #4]
 8013dea:	4a45      	ldr	r2, [pc, #276]	@ (8013f00 <tcp_input+0x2ac>)
 8013dec:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8013dee:	4b3c      	ldr	r3, [pc, #240]	@ (8013ee0 <tcp_input+0x28c>)
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	689b      	ldr	r3, [r3, #8]
 8013df4:	4a3a      	ldr	r2, [pc, #232]	@ (8013ee0 <tcp_input+0x28c>)
 8013df6:	6814      	ldr	r4, [r2, #0]
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f7fc fc44 	bl	8010686 <lwip_htonl>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	60a3      	str	r3, [r4, #8]
 8013e02:	68a3      	ldr	r3, [r4, #8]
 8013e04:	4a3f      	ldr	r2, [pc, #252]	@ (8013f04 <tcp_input+0x2b0>)
 8013e06:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8013e08:	4b35      	ldr	r3, [pc, #212]	@ (8013ee0 <tcp_input+0x28c>)
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	89db      	ldrh	r3, [r3, #14]
 8013e0e:	b29b      	uxth	r3, r3
 8013e10:	4a33      	ldr	r2, [pc, #204]	@ (8013ee0 <tcp_input+0x28c>)
 8013e12:	6814      	ldr	r4, [r2, #0]
 8013e14:	4618      	mov	r0, r3
 8013e16:	f7fc fc21 	bl	801065c <lwip_htons>
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013e1e:	4b30      	ldr	r3, [pc, #192]	@ (8013ee0 <tcp_input+0x28c>)
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	899b      	ldrh	r3, [r3, #12]
 8013e24:	b29b      	uxth	r3, r3
 8013e26:	4618      	mov	r0, r3
 8013e28:	f7fc fc18 	bl	801065c <lwip_htons>
 8013e2c:	4603      	mov	r3, r0
 8013e2e:	b2db      	uxtb	r3, r3
 8013e30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013e34:	b2da      	uxtb	r2, r3
 8013e36:	4b34      	ldr	r3, [pc, #208]	@ (8013f08 <tcp_input+0x2b4>)
 8013e38:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	891a      	ldrh	r2, [r3, #8]
 8013e3e:	4b33      	ldr	r3, [pc, #204]	@ (8013f0c <tcp_input+0x2b8>)
 8013e40:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8013e42:	4b31      	ldr	r3, [pc, #196]	@ (8013f08 <tcp_input+0x2b4>)
 8013e44:	781b      	ldrb	r3, [r3, #0]
 8013e46:	f003 0303 	and.w	r3, r3, #3
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d00c      	beq.n	8013e68 <tcp_input+0x214>
    tcplen++;
 8013e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8013f0c <tcp_input+0x2b8>)
 8013e50:	881b      	ldrh	r3, [r3, #0]
 8013e52:	3301      	adds	r3, #1
 8013e54:	b29a      	uxth	r2, r3
 8013e56:	4b2d      	ldr	r3, [pc, #180]	@ (8013f0c <tcp_input+0x2b8>)
 8013e58:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	891a      	ldrh	r2, [r3, #8]
 8013e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8013f0c <tcp_input+0x2b8>)
 8013e60:	881b      	ldrh	r3, [r3, #0]
 8013e62:	429a      	cmp	r2, r3
 8013e64:	f200 82e6 	bhi.w	8014434 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013e68:	2300      	movs	r3, #0
 8013e6a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e6c:	4b28      	ldr	r3, [pc, #160]	@ (8013f10 <tcp_input+0x2bc>)
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	61fb      	str	r3, [r7, #28]
 8013e72:	e09d      	b.n	8013fb0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8013e74:	69fb      	ldr	r3, [r7, #28]
 8013e76:	7d1b      	ldrb	r3, [r3, #20]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d105      	bne.n	8013e88 <tcp_input+0x234>
 8013e7c:	4b15      	ldr	r3, [pc, #84]	@ (8013ed4 <tcp_input+0x280>)
 8013e7e:	22fb      	movs	r2, #251	@ 0xfb
 8013e80:	4924      	ldr	r1, [pc, #144]	@ (8013f14 <tcp_input+0x2c0>)
 8013e82:	4816      	ldr	r0, [pc, #88]	@ (8013edc <tcp_input+0x288>)
 8013e84:	f009 fa9e 	bl	801d3c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013e88:	69fb      	ldr	r3, [r7, #28]
 8013e8a:	7d1b      	ldrb	r3, [r3, #20]
 8013e8c:	2b0a      	cmp	r3, #10
 8013e8e:	d105      	bne.n	8013e9c <tcp_input+0x248>
 8013e90:	4b10      	ldr	r3, [pc, #64]	@ (8013ed4 <tcp_input+0x280>)
 8013e92:	22fc      	movs	r2, #252	@ 0xfc
 8013e94:	4920      	ldr	r1, [pc, #128]	@ (8013f18 <tcp_input+0x2c4>)
 8013e96:	4811      	ldr	r0, [pc, #68]	@ (8013edc <tcp_input+0x288>)
 8013e98:	f009 fa94 	bl	801d3c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013e9c:	69fb      	ldr	r3, [r7, #28]
 8013e9e:	7d1b      	ldrb	r3, [r3, #20]
 8013ea0:	2b01      	cmp	r3, #1
 8013ea2:	d105      	bne.n	8013eb0 <tcp_input+0x25c>
 8013ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8013ed4 <tcp_input+0x280>)
 8013ea6:	22fd      	movs	r2, #253	@ 0xfd
 8013ea8:	491c      	ldr	r1, [pc, #112]	@ (8013f1c <tcp_input+0x2c8>)
 8013eaa:	480c      	ldr	r0, [pc, #48]	@ (8013edc <tcp_input+0x288>)
 8013eac:	f009 fa8a 	bl	801d3c4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013eb0:	69fb      	ldr	r3, [r7, #28]
 8013eb2:	7a1b      	ldrb	r3, [r3, #8]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d033      	beq.n	8013f20 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013eb8:	69fb      	ldr	r3, [r7, #28]
 8013eba:	7a1a      	ldrb	r2, [r3, #8]
 8013ebc:	4b09      	ldr	r3, [pc, #36]	@ (8013ee4 <tcp_input+0x290>)
 8013ebe:	685b      	ldr	r3, [r3, #4]
 8013ec0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013ec4:	3301      	adds	r3, #1
 8013ec6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013ec8:	429a      	cmp	r2, r3
 8013eca:	d029      	beq.n	8013f20 <tcp_input+0x2cc>
      prev = pcb;
 8013ecc:	69fb      	ldr	r3, [r7, #28]
 8013ece:	61bb      	str	r3, [r7, #24]
      continue;
 8013ed0:	e06b      	b.n	8013faa <tcp_input+0x356>
 8013ed2:	bf00      	nop
 8013ed4:	080208d4 	.word	0x080208d4
 8013ed8:	08020908 	.word	0x08020908
 8013edc:	08020920 	.word	0x08020920
 8013ee0:	2400cc5c 	.word	0x2400cc5c
 8013ee4:	24009b14 	.word	0x24009b14
 8013ee8:	2400cc60 	.word	0x2400cc60
 8013eec:	2400cc64 	.word	0x2400cc64
 8013ef0:	2400cc62 	.word	0x2400cc62
 8013ef4:	08020948 	.word	0x08020948
 8013ef8:	08020958 	.word	0x08020958
 8013efc:	08020964 	.word	0x08020964
 8013f00:	2400cc6c 	.word	0x2400cc6c
 8013f04:	2400cc70 	.word	0x2400cc70
 8013f08:	2400cc78 	.word	0x2400cc78
 8013f0c:	2400cc76 	.word	0x2400cc76
 8013f10:	2400cc40 	.word	0x2400cc40
 8013f14:	08020984 	.word	0x08020984
 8013f18:	080209ac 	.word	0x080209ac
 8013f1c:	080209d8 	.word	0x080209d8
    }

    if (pcb->remote_port == tcphdr->src &&
 8013f20:	69fb      	ldr	r3, [r7, #28]
 8013f22:	8b1a      	ldrh	r2, [r3, #24]
 8013f24:	4b72      	ldr	r3, [pc, #456]	@ (80140f0 <tcp_input+0x49c>)
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	881b      	ldrh	r3, [r3, #0]
 8013f2a:	b29b      	uxth	r3, r3
 8013f2c:	429a      	cmp	r2, r3
 8013f2e:	d13a      	bne.n	8013fa6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013f30:	69fb      	ldr	r3, [r7, #28]
 8013f32:	8ada      	ldrh	r2, [r3, #22]
 8013f34:	4b6e      	ldr	r3, [pc, #440]	@ (80140f0 <tcp_input+0x49c>)
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	885b      	ldrh	r3, [r3, #2]
 8013f3a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013f3c:	429a      	cmp	r2, r3
 8013f3e:	d132      	bne.n	8013fa6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013f40:	69fb      	ldr	r3, [r7, #28]
 8013f42:	685a      	ldr	r2, [r3, #4]
 8013f44:	4b6b      	ldr	r3, [pc, #428]	@ (80140f4 <tcp_input+0x4a0>)
 8013f46:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8013f48:	429a      	cmp	r2, r3
 8013f4a:	d12c      	bne.n	8013fa6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013f4c:	69fb      	ldr	r3, [r7, #28]
 8013f4e:	681a      	ldr	r2, [r3, #0]
 8013f50:	4b68      	ldr	r3, [pc, #416]	@ (80140f4 <tcp_input+0x4a0>)
 8013f52:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013f54:	429a      	cmp	r2, r3
 8013f56:	d126      	bne.n	8013fa6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013f58:	69fb      	ldr	r3, [r7, #28]
 8013f5a:	68db      	ldr	r3, [r3, #12]
 8013f5c:	69fa      	ldr	r2, [r7, #28]
 8013f5e:	429a      	cmp	r2, r3
 8013f60:	d106      	bne.n	8013f70 <tcp_input+0x31c>
 8013f62:	4b65      	ldr	r3, [pc, #404]	@ (80140f8 <tcp_input+0x4a4>)
 8013f64:	f240 120d 	movw	r2, #269	@ 0x10d
 8013f68:	4964      	ldr	r1, [pc, #400]	@ (80140fc <tcp_input+0x4a8>)
 8013f6a:	4865      	ldr	r0, [pc, #404]	@ (8014100 <tcp_input+0x4ac>)
 8013f6c:	f009 fa2a 	bl	801d3c4 <iprintf>
      if (prev != NULL) {
 8013f70:	69bb      	ldr	r3, [r7, #24]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d00a      	beq.n	8013f8c <tcp_input+0x338>
        prev->next = pcb->next;
 8013f76:	69fb      	ldr	r3, [r7, #28]
 8013f78:	68da      	ldr	r2, [r3, #12]
 8013f7a:	69bb      	ldr	r3, [r7, #24]
 8013f7c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013f7e:	4b61      	ldr	r3, [pc, #388]	@ (8014104 <tcp_input+0x4b0>)
 8013f80:	681a      	ldr	r2, [r3, #0]
 8013f82:	69fb      	ldr	r3, [r7, #28]
 8013f84:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8013f86:	4a5f      	ldr	r2, [pc, #380]	@ (8014104 <tcp_input+0x4b0>)
 8013f88:	69fb      	ldr	r3, [r7, #28]
 8013f8a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013f8c:	69fb      	ldr	r3, [r7, #28]
 8013f8e:	68db      	ldr	r3, [r3, #12]
 8013f90:	69fa      	ldr	r2, [r7, #28]
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d111      	bne.n	8013fba <tcp_input+0x366>
 8013f96:	4b58      	ldr	r3, [pc, #352]	@ (80140f8 <tcp_input+0x4a4>)
 8013f98:	f240 1215 	movw	r2, #277	@ 0x115
 8013f9c:	495a      	ldr	r1, [pc, #360]	@ (8014108 <tcp_input+0x4b4>)
 8013f9e:	4858      	ldr	r0, [pc, #352]	@ (8014100 <tcp_input+0x4ac>)
 8013fa0:	f009 fa10 	bl	801d3c4 <iprintf>
      break;
 8013fa4:	e009      	b.n	8013fba <tcp_input+0x366>
    }
    prev = pcb;
 8013fa6:	69fb      	ldr	r3, [r7, #28]
 8013fa8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013faa:	69fb      	ldr	r3, [r7, #28]
 8013fac:	68db      	ldr	r3, [r3, #12]
 8013fae:	61fb      	str	r3, [r7, #28]
 8013fb0:	69fb      	ldr	r3, [r7, #28]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	f47f af5e 	bne.w	8013e74 <tcp_input+0x220>
 8013fb8:	e000      	b.n	8013fbc <tcp_input+0x368>
      break;
 8013fba:	bf00      	nop
  }

  if (pcb == NULL) {
 8013fbc:	69fb      	ldr	r3, [r7, #28]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	f040 80aa 	bne.w	8014118 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013fc4:	4b51      	ldr	r3, [pc, #324]	@ (801410c <tcp_input+0x4b8>)
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	61fb      	str	r3, [r7, #28]
 8013fca:	e03f      	b.n	801404c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013fcc:	69fb      	ldr	r3, [r7, #28]
 8013fce:	7d1b      	ldrb	r3, [r3, #20]
 8013fd0:	2b0a      	cmp	r3, #10
 8013fd2:	d006      	beq.n	8013fe2 <tcp_input+0x38e>
 8013fd4:	4b48      	ldr	r3, [pc, #288]	@ (80140f8 <tcp_input+0x4a4>)
 8013fd6:	f240 121f 	movw	r2, #287	@ 0x11f
 8013fda:	494d      	ldr	r1, [pc, #308]	@ (8014110 <tcp_input+0x4bc>)
 8013fdc:	4848      	ldr	r0, [pc, #288]	@ (8014100 <tcp_input+0x4ac>)
 8013fde:	f009 f9f1 	bl	801d3c4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013fe2:	69fb      	ldr	r3, [r7, #28]
 8013fe4:	7a1b      	ldrb	r3, [r3, #8]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d009      	beq.n	8013ffe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013fea:	69fb      	ldr	r3, [r7, #28]
 8013fec:	7a1a      	ldrb	r2, [r3, #8]
 8013fee:	4b41      	ldr	r3, [pc, #260]	@ (80140f4 <tcp_input+0x4a0>)
 8013ff0:	685b      	ldr	r3, [r3, #4]
 8013ff2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013ff6:	3301      	adds	r3, #1
 8013ff8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013ffa:	429a      	cmp	r2, r3
 8013ffc:	d122      	bne.n	8014044 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013ffe:	69fb      	ldr	r3, [r7, #28]
 8014000:	8b1a      	ldrh	r2, [r3, #24]
 8014002:	4b3b      	ldr	r3, [pc, #236]	@ (80140f0 <tcp_input+0x49c>)
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	881b      	ldrh	r3, [r3, #0]
 8014008:	b29b      	uxth	r3, r3
 801400a:	429a      	cmp	r2, r3
 801400c:	d11b      	bne.n	8014046 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801400e:	69fb      	ldr	r3, [r7, #28]
 8014010:	8ada      	ldrh	r2, [r3, #22]
 8014012:	4b37      	ldr	r3, [pc, #220]	@ (80140f0 <tcp_input+0x49c>)
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	885b      	ldrh	r3, [r3, #2]
 8014018:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801401a:	429a      	cmp	r2, r3
 801401c:	d113      	bne.n	8014046 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801401e:	69fb      	ldr	r3, [r7, #28]
 8014020:	685a      	ldr	r2, [r3, #4]
 8014022:	4b34      	ldr	r3, [pc, #208]	@ (80140f4 <tcp_input+0x4a0>)
 8014024:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8014026:	429a      	cmp	r2, r3
 8014028:	d10d      	bne.n	8014046 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801402a:	69fb      	ldr	r3, [r7, #28]
 801402c:	681a      	ldr	r2, [r3, #0]
 801402e:	4b31      	ldr	r3, [pc, #196]	@ (80140f4 <tcp_input+0x4a0>)
 8014030:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014032:	429a      	cmp	r2, r3
 8014034:	d107      	bne.n	8014046 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8014036:	69f8      	ldr	r0, [r7, #28]
 8014038:	f000 fb56 	bl	80146e8 <tcp_timewait_input>
        }
        pbuf_free(p);
 801403c:	6878      	ldr	r0, [r7, #4]
 801403e:	f7fd ffc3 	bl	8011fc8 <pbuf_free>
        return;
 8014042:	e1fd      	b.n	8014440 <tcp_input+0x7ec>
        continue;
 8014044:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014046:	69fb      	ldr	r3, [r7, #28]
 8014048:	68db      	ldr	r3, [r3, #12]
 801404a:	61fb      	str	r3, [r7, #28]
 801404c:	69fb      	ldr	r3, [r7, #28]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d1bc      	bne.n	8013fcc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8014052:	2300      	movs	r3, #0
 8014054:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014056:	4b2f      	ldr	r3, [pc, #188]	@ (8014114 <tcp_input+0x4c0>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	617b      	str	r3, [r7, #20]
 801405c:	e02a      	b.n	80140b4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801405e:	697b      	ldr	r3, [r7, #20]
 8014060:	7a1b      	ldrb	r3, [r3, #8]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d00c      	beq.n	8014080 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	7a1a      	ldrb	r2, [r3, #8]
 801406a:	4b22      	ldr	r3, [pc, #136]	@ (80140f4 <tcp_input+0x4a0>)
 801406c:	685b      	ldr	r3, [r3, #4]
 801406e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014072:	3301      	adds	r3, #1
 8014074:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014076:	429a      	cmp	r2, r3
 8014078:	d002      	beq.n	8014080 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801407a:	697b      	ldr	r3, [r7, #20]
 801407c:	61bb      	str	r3, [r7, #24]
        continue;
 801407e:	e016      	b.n	80140ae <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8014080:	697b      	ldr	r3, [r7, #20]
 8014082:	8ada      	ldrh	r2, [r3, #22]
 8014084:	4b1a      	ldr	r3, [pc, #104]	@ (80140f0 <tcp_input+0x49c>)
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	885b      	ldrh	r3, [r3, #2]
 801408a:	b29b      	uxth	r3, r3
 801408c:	429a      	cmp	r2, r3
 801408e:	d10c      	bne.n	80140aa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8014090:	697b      	ldr	r3, [r7, #20]
 8014092:	681a      	ldr	r2, [r3, #0]
 8014094:	4b17      	ldr	r3, [pc, #92]	@ (80140f4 <tcp_input+0x4a0>)
 8014096:	695b      	ldr	r3, [r3, #20]
 8014098:	429a      	cmp	r2, r3
 801409a:	d00f      	beq.n	80140bc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801409c:	697b      	ldr	r3, [r7, #20]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d00d      	beq.n	80140be <tcp_input+0x46a>
 80140a2:	697b      	ldr	r3, [r7, #20]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d009      	beq.n	80140be <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80140aa:	697b      	ldr	r3, [r7, #20]
 80140ac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80140ae:	697b      	ldr	r3, [r7, #20]
 80140b0:	68db      	ldr	r3, [r3, #12]
 80140b2:	617b      	str	r3, [r7, #20]
 80140b4:	697b      	ldr	r3, [r7, #20]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d1d1      	bne.n	801405e <tcp_input+0x40a>
 80140ba:	e000      	b.n	80140be <tcp_input+0x46a>
            break;
 80140bc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d029      	beq.n	8014118 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80140c4:	69bb      	ldr	r3, [r7, #24]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d00a      	beq.n	80140e0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80140ca:	697b      	ldr	r3, [r7, #20]
 80140cc:	68da      	ldr	r2, [r3, #12]
 80140ce:	69bb      	ldr	r3, [r7, #24]
 80140d0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80140d2:	4b10      	ldr	r3, [pc, #64]	@ (8014114 <tcp_input+0x4c0>)
 80140d4:	681a      	ldr	r2, [r3, #0]
 80140d6:	697b      	ldr	r3, [r7, #20]
 80140d8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80140da:	4a0e      	ldr	r2, [pc, #56]	@ (8014114 <tcp_input+0x4c0>)
 80140dc:	697b      	ldr	r3, [r7, #20]
 80140de:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80140e0:	6978      	ldr	r0, [r7, #20]
 80140e2:	f000 fa03 	bl	80144ec <tcp_listen_input>
      }
      pbuf_free(p);
 80140e6:	6878      	ldr	r0, [r7, #4]
 80140e8:	f7fd ff6e 	bl	8011fc8 <pbuf_free>
      return;
 80140ec:	e1a8      	b.n	8014440 <tcp_input+0x7ec>
 80140ee:	bf00      	nop
 80140f0:	2400cc5c 	.word	0x2400cc5c
 80140f4:	24009b14 	.word	0x24009b14
 80140f8:	080208d4 	.word	0x080208d4
 80140fc:	08020a00 	.word	0x08020a00
 8014100:	08020920 	.word	0x08020920
 8014104:	2400cc40 	.word	0x2400cc40
 8014108:	08020a2c 	.word	0x08020a2c
 801410c:	2400cc44 	.word	0x2400cc44
 8014110:	08020a58 	.word	0x08020a58
 8014114:	2400cc3c 	.word	0x2400cc3c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8014118:	69fb      	ldr	r3, [r7, #28]
 801411a:	2b00      	cmp	r3, #0
 801411c:	f000 8158 	beq.w	80143d0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8014120:	4b95      	ldr	r3, [pc, #596]	@ (8014378 <tcp_input+0x724>)
 8014122:	2200      	movs	r2, #0
 8014124:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	891a      	ldrh	r2, [r3, #8]
 801412a:	4b93      	ldr	r3, [pc, #588]	@ (8014378 <tcp_input+0x724>)
 801412c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801412e:	4a92      	ldr	r2, [pc, #584]	@ (8014378 <tcp_input+0x724>)
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8014134:	4b91      	ldr	r3, [pc, #580]	@ (801437c <tcp_input+0x728>)
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	4a8f      	ldr	r2, [pc, #572]	@ (8014378 <tcp_input+0x724>)
 801413a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801413c:	4b90      	ldr	r3, [pc, #576]	@ (8014380 <tcp_input+0x72c>)
 801413e:	2200      	movs	r2, #0
 8014140:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8014142:	4b90      	ldr	r3, [pc, #576]	@ (8014384 <tcp_input+0x730>)
 8014144:	2200      	movs	r2, #0
 8014146:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8014148:	4b8f      	ldr	r3, [pc, #572]	@ (8014388 <tcp_input+0x734>)
 801414a:	2200      	movs	r2, #0
 801414c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801414e:	4b8f      	ldr	r3, [pc, #572]	@ (801438c <tcp_input+0x738>)
 8014150:	781b      	ldrb	r3, [r3, #0]
 8014152:	f003 0308 	and.w	r3, r3, #8
 8014156:	2b00      	cmp	r3, #0
 8014158:	d006      	beq.n	8014168 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	7b5b      	ldrb	r3, [r3, #13]
 801415e:	f043 0301 	orr.w	r3, r3, #1
 8014162:	b2da      	uxtb	r2, r3
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8014168:	69fb      	ldr	r3, [r7, #28]
 801416a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801416c:	2b00      	cmp	r3, #0
 801416e:	d017      	beq.n	80141a0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014170:	69f8      	ldr	r0, [r7, #28]
 8014172:	f7ff f929 	bl	80133c8 <tcp_process_refused_data>
 8014176:	4603      	mov	r3, r0
 8014178:	f113 0f0d 	cmn.w	r3, #13
 801417c:	d007      	beq.n	801418e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801417e:	69fb      	ldr	r3, [r7, #28]
 8014180:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014182:	2b00      	cmp	r3, #0
 8014184:	d00c      	beq.n	80141a0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014186:	4b82      	ldr	r3, [pc, #520]	@ (8014390 <tcp_input+0x73c>)
 8014188:	881b      	ldrh	r3, [r3, #0]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d008      	beq.n	80141a0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801418e:	69fb      	ldr	r3, [r7, #28]
 8014190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014192:	2b00      	cmp	r3, #0
 8014194:	f040 80e3 	bne.w	801435e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8014198:	69f8      	ldr	r0, [r7, #28]
 801419a:	f003 f9a7 	bl	80174ec <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801419e:	e0de      	b.n	801435e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80141a0:	4a7c      	ldr	r2, [pc, #496]	@ (8014394 <tcp_input+0x740>)
 80141a2:	69fb      	ldr	r3, [r7, #28]
 80141a4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80141a6:	69f8      	ldr	r0, [r7, #28]
 80141a8:	f000 fb18 	bl	80147dc <tcp_process>
 80141ac:	4603      	mov	r3, r0
 80141ae:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80141b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80141b4:	f113 0f0d 	cmn.w	r3, #13
 80141b8:	f000 80d3 	beq.w	8014362 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80141bc:	4b71      	ldr	r3, [pc, #452]	@ (8014384 <tcp_input+0x730>)
 80141be:	781b      	ldrb	r3, [r3, #0]
 80141c0:	f003 0308 	and.w	r3, r3, #8
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d015      	beq.n	80141f4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80141c8:	69fb      	ldr	r3, [r7, #28]
 80141ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d008      	beq.n	80141e4 <tcp_input+0x590>
 80141d2:	69fb      	ldr	r3, [r7, #28]
 80141d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80141d8:	69fa      	ldr	r2, [r7, #28]
 80141da:	6912      	ldr	r2, [r2, #16]
 80141dc:	f06f 010d 	mvn.w	r1, #13
 80141e0:	4610      	mov	r0, r2
 80141e2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80141e4:	69f9      	ldr	r1, [r7, #28]
 80141e6:	486c      	ldr	r0, [pc, #432]	@ (8014398 <tcp_input+0x744>)
 80141e8:	f7ff fbbc 	bl	8013964 <tcp_pcb_remove>
        tcp_free(pcb);
 80141ec:	69f8      	ldr	r0, [r7, #28]
 80141ee:	f7fe f9a7 	bl	8012540 <tcp_free>
 80141f2:	e0da      	b.n	80143aa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80141f4:	2300      	movs	r3, #0
 80141f6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80141f8:	4b63      	ldr	r3, [pc, #396]	@ (8014388 <tcp_input+0x734>)
 80141fa:	881b      	ldrh	r3, [r3, #0]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d01d      	beq.n	801423c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8014200:	4b61      	ldr	r3, [pc, #388]	@ (8014388 <tcp_input+0x734>)
 8014202:	881b      	ldrh	r3, [r3, #0]
 8014204:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8014206:	69fb      	ldr	r3, [r7, #28]
 8014208:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801420c:	2b00      	cmp	r3, #0
 801420e:	d00a      	beq.n	8014226 <tcp_input+0x5d2>
 8014210:	69fb      	ldr	r3, [r7, #28]
 8014212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014216:	69fa      	ldr	r2, [r7, #28]
 8014218:	6910      	ldr	r0, [r2, #16]
 801421a:	89fa      	ldrh	r2, [r7, #14]
 801421c:	69f9      	ldr	r1, [r7, #28]
 801421e:	4798      	blx	r3
 8014220:	4603      	mov	r3, r0
 8014222:	74fb      	strb	r3, [r7, #19]
 8014224:	e001      	b.n	801422a <tcp_input+0x5d6>
 8014226:	2300      	movs	r3, #0
 8014228:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801422a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801422e:	f113 0f0d 	cmn.w	r3, #13
 8014232:	f000 8098 	beq.w	8014366 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8014236:	4b54      	ldr	r3, [pc, #336]	@ (8014388 <tcp_input+0x734>)
 8014238:	2200      	movs	r2, #0
 801423a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801423c:	69f8      	ldr	r0, [r7, #28]
 801423e:	f000 f915 	bl	801446c <tcp_input_delayed_close>
 8014242:	4603      	mov	r3, r0
 8014244:	2b00      	cmp	r3, #0
 8014246:	f040 8090 	bne.w	801436a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801424a:	4b4d      	ldr	r3, [pc, #308]	@ (8014380 <tcp_input+0x72c>)
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d041      	beq.n	80142d6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8014252:	69fb      	ldr	r3, [r7, #28]
 8014254:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014256:	2b00      	cmp	r3, #0
 8014258:	d006      	beq.n	8014268 <tcp_input+0x614>
 801425a:	4b50      	ldr	r3, [pc, #320]	@ (801439c <tcp_input+0x748>)
 801425c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8014260:	494f      	ldr	r1, [pc, #316]	@ (80143a0 <tcp_input+0x74c>)
 8014262:	4850      	ldr	r0, [pc, #320]	@ (80143a4 <tcp_input+0x750>)
 8014264:	f009 f8ae 	bl	801d3c4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8014268:	69fb      	ldr	r3, [r7, #28]
 801426a:	8b5b      	ldrh	r3, [r3, #26]
 801426c:	f003 0310 	and.w	r3, r3, #16
 8014270:	2b00      	cmp	r3, #0
 8014272:	d008      	beq.n	8014286 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8014274:	4b42      	ldr	r3, [pc, #264]	@ (8014380 <tcp_input+0x72c>)
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	4618      	mov	r0, r3
 801427a:	f7fd fea5 	bl	8011fc8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801427e:	69f8      	ldr	r0, [r7, #28]
 8014280:	f7fe fc46 	bl	8012b10 <tcp_abort>
            goto aborted;
 8014284:	e091      	b.n	80143aa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8014286:	69fb      	ldr	r3, [r7, #28]
 8014288:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801428c:	2b00      	cmp	r3, #0
 801428e:	d00c      	beq.n	80142aa <tcp_input+0x656>
 8014290:	69fb      	ldr	r3, [r7, #28]
 8014292:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014296:	69fb      	ldr	r3, [r7, #28]
 8014298:	6918      	ldr	r0, [r3, #16]
 801429a:	4b39      	ldr	r3, [pc, #228]	@ (8014380 <tcp_input+0x72c>)
 801429c:	681a      	ldr	r2, [r3, #0]
 801429e:	2300      	movs	r3, #0
 80142a0:	69f9      	ldr	r1, [r7, #28]
 80142a2:	47a0      	blx	r4
 80142a4:	4603      	mov	r3, r0
 80142a6:	74fb      	strb	r3, [r7, #19]
 80142a8:	e008      	b.n	80142bc <tcp_input+0x668>
 80142aa:	4b35      	ldr	r3, [pc, #212]	@ (8014380 <tcp_input+0x72c>)
 80142ac:	681a      	ldr	r2, [r3, #0]
 80142ae:	2300      	movs	r3, #0
 80142b0:	69f9      	ldr	r1, [r7, #28]
 80142b2:	2000      	movs	r0, #0
 80142b4:	f7ff f95e 	bl	8013574 <tcp_recv_null>
 80142b8:	4603      	mov	r3, r0
 80142ba:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80142bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80142c0:	f113 0f0d 	cmn.w	r3, #13
 80142c4:	d053      	beq.n	801436e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80142c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d003      	beq.n	80142d6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80142ce:	4b2c      	ldr	r3, [pc, #176]	@ (8014380 <tcp_input+0x72c>)
 80142d0:	681a      	ldr	r2, [r3, #0]
 80142d2:	69fb      	ldr	r3, [r7, #28]
 80142d4:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80142d6:	4b2b      	ldr	r3, [pc, #172]	@ (8014384 <tcp_input+0x730>)
 80142d8:	781b      	ldrb	r3, [r3, #0]
 80142da:	f003 0320 	and.w	r3, r3, #32
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d030      	beq.n	8014344 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80142e2:	69fb      	ldr	r3, [r7, #28]
 80142e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d009      	beq.n	80142fe <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80142ea:	69fb      	ldr	r3, [r7, #28]
 80142ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80142ee:	7b5a      	ldrb	r2, [r3, #13]
 80142f0:	69fb      	ldr	r3, [r7, #28]
 80142f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80142f4:	f042 0220 	orr.w	r2, r2, #32
 80142f8:	b2d2      	uxtb	r2, r2
 80142fa:	735a      	strb	r2, [r3, #13]
 80142fc:	e022      	b.n	8014344 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80142fe:	69fb      	ldr	r3, [r7, #28]
 8014300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014302:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014306:	d005      	beq.n	8014314 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8014308:	69fb      	ldr	r3, [r7, #28]
 801430a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801430c:	3301      	adds	r3, #1
 801430e:	b29a      	uxth	r2, r3
 8014310:	69fb      	ldr	r3, [r7, #28]
 8014312:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8014314:	69fb      	ldr	r3, [r7, #28]
 8014316:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801431a:	2b00      	cmp	r3, #0
 801431c:	d00b      	beq.n	8014336 <tcp_input+0x6e2>
 801431e:	69fb      	ldr	r3, [r7, #28]
 8014320:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014324:	69fb      	ldr	r3, [r7, #28]
 8014326:	6918      	ldr	r0, [r3, #16]
 8014328:	2300      	movs	r3, #0
 801432a:	2200      	movs	r2, #0
 801432c:	69f9      	ldr	r1, [r7, #28]
 801432e:	47a0      	blx	r4
 8014330:	4603      	mov	r3, r0
 8014332:	74fb      	strb	r3, [r7, #19]
 8014334:	e001      	b.n	801433a <tcp_input+0x6e6>
 8014336:	2300      	movs	r3, #0
 8014338:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801433a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801433e:	f113 0f0d 	cmn.w	r3, #13
 8014342:	d016      	beq.n	8014372 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8014344:	4b13      	ldr	r3, [pc, #76]	@ (8014394 <tcp_input+0x740>)
 8014346:	2200      	movs	r2, #0
 8014348:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801434a:	69f8      	ldr	r0, [r7, #28]
 801434c:	f000 f88e 	bl	801446c <tcp_input_delayed_close>
 8014350:	4603      	mov	r3, r0
 8014352:	2b00      	cmp	r3, #0
 8014354:	d128      	bne.n	80143a8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8014356:	69f8      	ldr	r0, [r7, #28]
 8014358:	f002 fac2 	bl	80168e0 <tcp_output>
 801435c:	e025      	b.n	80143aa <tcp_input+0x756>
        goto aborted;
 801435e:	bf00      	nop
 8014360:	e023      	b.n	80143aa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8014362:	bf00      	nop
 8014364:	e021      	b.n	80143aa <tcp_input+0x756>
              goto aborted;
 8014366:	bf00      	nop
 8014368:	e01f      	b.n	80143aa <tcp_input+0x756>
          goto aborted;
 801436a:	bf00      	nop
 801436c:	e01d      	b.n	80143aa <tcp_input+0x756>
            goto aborted;
 801436e:	bf00      	nop
 8014370:	e01b      	b.n	80143aa <tcp_input+0x756>
              goto aborted;
 8014372:	bf00      	nop
 8014374:	e019      	b.n	80143aa <tcp_input+0x756>
 8014376:	bf00      	nop
 8014378:	2400cc4c 	.word	0x2400cc4c
 801437c:	2400cc5c 	.word	0x2400cc5c
 8014380:	2400cc7c 	.word	0x2400cc7c
 8014384:	2400cc79 	.word	0x2400cc79
 8014388:	2400cc74 	.word	0x2400cc74
 801438c:	2400cc78 	.word	0x2400cc78
 8014390:	2400cc76 	.word	0x2400cc76
 8014394:	2400cc80 	.word	0x2400cc80
 8014398:	2400cc40 	.word	0x2400cc40
 801439c:	080208d4 	.word	0x080208d4
 80143a0:	08020a88 	.word	0x08020a88
 80143a4:	08020920 	.word	0x08020920
          goto aborted;
 80143a8:	bf00      	nop
    tcp_input_pcb = NULL;
 80143aa:	4b27      	ldr	r3, [pc, #156]	@ (8014448 <tcp_input+0x7f4>)
 80143ac:	2200      	movs	r2, #0
 80143ae:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80143b0:	4b26      	ldr	r3, [pc, #152]	@ (801444c <tcp_input+0x7f8>)
 80143b2:	2200      	movs	r2, #0
 80143b4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80143b6:	4b26      	ldr	r3, [pc, #152]	@ (8014450 <tcp_input+0x7fc>)
 80143b8:	685b      	ldr	r3, [r3, #4]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d03f      	beq.n	801443e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80143be:	4b24      	ldr	r3, [pc, #144]	@ (8014450 <tcp_input+0x7fc>)
 80143c0:	685b      	ldr	r3, [r3, #4]
 80143c2:	4618      	mov	r0, r3
 80143c4:	f7fd fe00 	bl	8011fc8 <pbuf_free>
      inseg.p = NULL;
 80143c8:	4b21      	ldr	r3, [pc, #132]	@ (8014450 <tcp_input+0x7fc>)
 80143ca:	2200      	movs	r2, #0
 80143cc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80143ce:	e036      	b.n	801443e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80143d0:	4b20      	ldr	r3, [pc, #128]	@ (8014454 <tcp_input+0x800>)
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	899b      	ldrh	r3, [r3, #12]
 80143d6:	b29b      	uxth	r3, r3
 80143d8:	4618      	mov	r0, r3
 80143da:	f7fc f93f 	bl	801065c <lwip_htons>
 80143de:	4603      	mov	r3, r0
 80143e0:	b2db      	uxtb	r3, r3
 80143e2:	f003 0304 	and.w	r3, r3, #4
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d118      	bne.n	801441c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80143ea:	4b1b      	ldr	r3, [pc, #108]	@ (8014458 <tcp_input+0x804>)
 80143ec:	6819      	ldr	r1, [r3, #0]
 80143ee:	4b1b      	ldr	r3, [pc, #108]	@ (801445c <tcp_input+0x808>)
 80143f0:	881b      	ldrh	r3, [r3, #0]
 80143f2:	461a      	mov	r2, r3
 80143f4:	4b1a      	ldr	r3, [pc, #104]	@ (8014460 <tcp_input+0x80c>)
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80143fa:	4b16      	ldr	r3, [pc, #88]	@ (8014454 <tcp_input+0x800>)
 80143fc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80143fe:	885b      	ldrh	r3, [r3, #2]
 8014400:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014402:	4a14      	ldr	r2, [pc, #80]	@ (8014454 <tcp_input+0x800>)
 8014404:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014406:	8812      	ldrh	r2, [r2, #0]
 8014408:	b292      	uxth	r2, r2
 801440a:	9202      	str	r2, [sp, #8]
 801440c:	9301      	str	r3, [sp, #4]
 801440e:	4b15      	ldr	r3, [pc, #84]	@ (8014464 <tcp_input+0x810>)
 8014410:	9300      	str	r3, [sp, #0]
 8014412:	4b15      	ldr	r3, [pc, #84]	@ (8014468 <tcp_input+0x814>)
 8014414:	4602      	mov	r2, r0
 8014416:	2000      	movs	r0, #0
 8014418:	f003 f816 	bl	8017448 <tcp_rst>
    pbuf_free(p);
 801441c:	6878      	ldr	r0, [r7, #4]
 801441e:	f7fd fdd3 	bl	8011fc8 <pbuf_free>
  return;
 8014422:	e00c      	b.n	801443e <tcp_input+0x7ea>
    goto dropped;
 8014424:	bf00      	nop
 8014426:	e006      	b.n	8014436 <tcp_input+0x7e2>
    goto dropped;
 8014428:	bf00      	nop
 801442a:	e004      	b.n	8014436 <tcp_input+0x7e2>
    goto dropped;
 801442c:	bf00      	nop
 801442e:	e002      	b.n	8014436 <tcp_input+0x7e2>
      goto dropped;
 8014430:	bf00      	nop
 8014432:	e000      	b.n	8014436 <tcp_input+0x7e2>
      goto dropped;
 8014434:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8014436:	6878      	ldr	r0, [r7, #4]
 8014438:	f7fd fdc6 	bl	8011fc8 <pbuf_free>
 801443c:	e000      	b.n	8014440 <tcp_input+0x7ec>
  return;
 801443e:	bf00      	nop
}
 8014440:	3724      	adds	r7, #36	@ 0x24
 8014442:	46bd      	mov	sp, r7
 8014444:	bd90      	pop	{r4, r7, pc}
 8014446:	bf00      	nop
 8014448:	2400cc80 	.word	0x2400cc80
 801444c:	2400cc7c 	.word	0x2400cc7c
 8014450:	2400cc4c 	.word	0x2400cc4c
 8014454:	2400cc5c 	.word	0x2400cc5c
 8014458:	2400cc70 	.word	0x2400cc70
 801445c:	2400cc76 	.word	0x2400cc76
 8014460:	2400cc6c 	.word	0x2400cc6c
 8014464:	24009b24 	.word	0x24009b24
 8014468:	24009b28 	.word	0x24009b28

0801446c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b082      	sub	sp, #8
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d106      	bne.n	8014488 <tcp_input_delayed_close+0x1c>
 801447a:	4b17      	ldr	r3, [pc, #92]	@ (80144d8 <tcp_input_delayed_close+0x6c>)
 801447c:	f240 225a 	movw	r2, #602	@ 0x25a
 8014480:	4916      	ldr	r1, [pc, #88]	@ (80144dc <tcp_input_delayed_close+0x70>)
 8014482:	4817      	ldr	r0, [pc, #92]	@ (80144e0 <tcp_input_delayed_close+0x74>)
 8014484:	f008 ff9e 	bl	801d3c4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8014488:	4b16      	ldr	r3, [pc, #88]	@ (80144e4 <tcp_input_delayed_close+0x78>)
 801448a:	781b      	ldrb	r3, [r3, #0]
 801448c:	f003 0310 	and.w	r3, r3, #16
 8014490:	2b00      	cmp	r3, #0
 8014492:	d01c      	beq.n	80144ce <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	8b5b      	ldrh	r3, [r3, #26]
 8014498:	f003 0310 	and.w	r3, r3, #16
 801449c:	2b00      	cmp	r3, #0
 801449e:	d10d      	bne.n	80144bc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d008      	beq.n	80144bc <tcp_input_delayed_close+0x50>
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80144b0:	687a      	ldr	r2, [r7, #4]
 80144b2:	6912      	ldr	r2, [r2, #16]
 80144b4:	f06f 010e 	mvn.w	r1, #14
 80144b8:	4610      	mov	r0, r2
 80144ba:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80144bc:	6879      	ldr	r1, [r7, #4]
 80144be:	480a      	ldr	r0, [pc, #40]	@ (80144e8 <tcp_input_delayed_close+0x7c>)
 80144c0:	f7ff fa50 	bl	8013964 <tcp_pcb_remove>
    tcp_free(pcb);
 80144c4:	6878      	ldr	r0, [r7, #4]
 80144c6:	f7fe f83b 	bl	8012540 <tcp_free>
    return 1;
 80144ca:	2301      	movs	r3, #1
 80144cc:	e000      	b.n	80144d0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80144ce:	2300      	movs	r3, #0
}
 80144d0:	4618      	mov	r0, r3
 80144d2:	3708      	adds	r7, #8
 80144d4:	46bd      	mov	sp, r7
 80144d6:	bd80      	pop	{r7, pc}
 80144d8:	080208d4 	.word	0x080208d4
 80144dc:	08020aa4 	.word	0x08020aa4
 80144e0:	08020920 	.word	0x08020920
 80144e4:	2400cc79 	.word	0x2400cc79
 80144e8:	2400cc40 	.word	0x2400cc40

080144ec <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80144ec:	b590      	push	{r4, r7, lr}
 80144ee:	b08b      	sub	sp, #44	@ 0x2c
 80144f0:	af04      	add	r7, sp, #16
 80144f2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80144f4:	4b6f      	ldr	r3, [pc, #444]	@ (80146b4 <tcp_listen_input+0x1c8>)
 80144f6:	781b      	ldrb	r3, [r3, #0]
 80144f8:	f003 0304 	and.w	r3, r3, #4
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	f040 80d2 	bne.w	80146a6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d106      	bne.n	8014516 <tcp_listen_input+0x2a>
 8014508:	4b6b      	ldr	r3, [pc, #428]	@ (80146b8 <tcp_listen_input+0x1cc>)
 801450a:	f240 2281 	movw	r2, #641	@ 0x281
 801450e:	496b      	ldr	r1, [pc, #428]	@ (80146bc <tcp_listen_input+0x1d0>)
 8014510:	486b      	ldr	r0, [pc, #428]	@ (80146c0 <tcp_listen_input+0x1d4>)
 8014512:	f008 ff57 	bl	801d3c4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8014516:	4b67      	ldr	r3, [pc, #412]	@ (80146b4 <tcp_listen_input+0x1c8>)
 8014518:	781b      	ldrb	r3, [r3, #0]
 801451a:	f003 0310 	and.w	r3, r3, #16
 801451e:	2b00      	cmp	r3, #0
 8014520:	d019      	beq.n	8014556 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014522:	4b68      	ldr	r3, [pc, #416]	@ (80146c4 <tcp_listen_input+0x1d8>)
 8014524:	6819      	ldr	r1, [r3, #0]
 8014526:	4b68      	ldr	r3, [pc, #416]	@ (80146c8 <tcp_listen_input+0x1dc>)
 8014528:	881b      	ldrh	r3, [r3, #0]
 801452a:	461a      	mov	r2, r3
 801452c:	4b67      	ldr	r3, [pc, #412]	@ (80146cc <tcp_listen_input+0x1e0>)
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014532:	4b67      	ldr	r3, [pc, #412]	@ (80146d0 <tcp_listen_input+0x1e4>)
 8014534:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014536:	885b      	ldrh	r3, [r3, #2]
 8014538:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801453a:	4a65      	ldr	r2, [pc, #404]	@ (80146d0 <tcp_listen_input+0x1e4>)
 801453c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801453e:	8812      	ldrh	r2, [r2, #0]
 8014540:	b292      	uxth	r2, r2
 8014542:	9202      	str	r2, [sp, #8]
 8014544:	9301      	str	r3, [sp, #4]
 8014546:	4b63      	ldr	r3, [pc, #396]	@ (80146d4 <tcp_listen_input+0x1e8>)
 8014548:	9300      	str	r3, [sp, #0]
 801454a:	4b63      	ldr	r3, [pc, #396]	@ (80146d8 <tcp_listen_input+0x1ec>)
 801454c:	4602      	mov	r2, r0
 801454e:	6878      	ldr	r0, [r7, #4]
 8014550:	f002 ff7a 	bl	8017448 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014554:	e0a9      	b.n	80146aa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8014556:	4b57      	ldr	r3, [pc, #348]	@ (80146b4 <tcp_listen_input+0x1c8>)
 8014558:	781b      	ldrb	r3, [r3, #0]
 801455a:	f003 0302 	and.w	r3, r3, #2
 801455e:	2b00      	cmp	r3, #0
 8014560:	f000 80a3 	beq.w	80146aa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	7d5b      	ldrb	r3, [r3, #21]
 8014568:	4618      	mov	r0, r3
 801456a:	f7ff f927 	bl	80137bc <tcp_alloc>
 801456e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014570:	697b      	ldr	r3, [r7, #20]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d111      	bne.n	801459a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	699b      	ldr	r3, [r3, #24]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d00a      	beq.n	8014594 <tcp_listen_input+0xa8>
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	699b      	ldr	r3, [r3, #24]
 8014582:	687a      	ldr	r2, [r7, #4]
 8014584:	6910      	ldr	r0, [r2, #16]
 8014586:	f04f 32ff 	mov.w	r2, #4294967295
 801458a:	2100      	movs	r1, #0
 801458c:	4798      	blx	r3
 801458e:	4603      	mov	r3, r0
 8014590:	73bb      	strb	r3, [r7, #14]
      return;
 8014592:	e08b      	b.n	80146ac <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014594:	23f0      	movs	r3, #240	@ 0xf0
 8014596:	73bb      	strb	r3, [r7, #14]
      return;
 8014598:	e088      	b.n	80146ac <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801459a:	4b50      	ldr	r3, [pc, #320]	@ (80146dc <tcp_listen_input+0x1f0>)
 801459c:	695a      	ldr	r2, [r3, #20]
 801459e:	697b      	ldr	r3, [r7, #20]
 80145a0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80145a2:	4b4e      	ldr	r3, [pc, #312]	@ (80146dc <tcp_listen_input+0x1f0>)
 80145a4:	691a      	ldr	r2, [r3, #16]
 80145a6:	697b      	ldr	r3, [r7, #20]
 80145a8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	8ada      	ldrh	r2, [r3, #22]
 80145ae:	697b      	ldr	r3, [r7, #20]
 80145b0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80145b2:	4b47      	ldr	r3, [pc, #284]	@ (80146d0 <tcp_listen_input+0x1e4>)
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	881b      	ldrh	r3, [r3, #0]
 80145b8:	b29a      	uxth	r2, r3
 80145ba:	697b      	ldr	r3, [r7, #20]
 80145bc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80145be:	697b      	ldr	r3, [r7, #20]
 80145c0:	2203      	movs	r2, #3
 80145c2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80145c4:	4b41      	ldr	r3, [pc, #260]	@ (80146cc <tcp_listen_input+0x1e0>)
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	1c5a      	adds	r2, r3, #1
 80145ca:	697b      	ldr	r3, [r7, #20]
 80145cc:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80145ce:	697b      	ldr	r3, [r7, #20]
 80145d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80145d2:	697b      	ldr	r3, [r7, #20]
 80145d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80145d6:	6978      	ldr	r0, [r7, #20]
 80145d8:	f7ff fa58 	bl	8013a8c <tcp_next_iss>
 80145dc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80145de:	697b      	ldr	r3, [r7, #20]
 80145e0:	693a      	ldr	r2, [r7, #16]
 80145e2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80145e4:	697b      	ldr	r3, [r7, #20]
 80145e6:	693a      	ldr	r2, [r7, #16]
 80145e8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80145ea:	697b      	ldr	r3, [r7, #20]
 80145ec:	693a      	ldr	r2, [r7, #16]
 80145ee:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80145f0:	697b      	ldr	r3, [r7, #20]
 80145f2:	693a      	ldr	r2, [r7, #16]
 80145f4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80145f6:	4b35      	ldr	r3, [pc, #212]	@ (80146cc <tcp_listen_input+0x1e0>)
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	1e5a      	subs	r2, r3, #1
 80145fc:	697b      	ldr	r3, [r7, #20]
 80145fe:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	691a      	ldr	r2, [r3, #16]
 8014604:	697b      	ldr	r3, [r7, #20]
 8014606:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014608:	697b      	ldr	r3, [r7, #20]
 801460a:	687a      	ldr	r2, [r7, #4]
 801460c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	7a5b      	ldrb	r3, [r3, #9]
 8014612:	f003 030c 	and.w	r3, r3, #12
 8014616:	b2da      	uxtb	r2, r3
 8014618:	697b      	ldr	r3, [r7, #20]
 801461a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	7a1a      	ldrb	r2, [r3, #8]
 8014620:	697b      	ldr	r3, [r7, #20]
 8014622:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014624:	4b2e      	ldr	r3, [pc, #184]	@ (80146e0 <tcp_listen_input+0x1f4>)
 8014626:	681a      	ldr	r2, [r3, #0]
 8014628:	697b      	ldr	r3, [r7, #20]
 801462a:	60da      	str	r2, [r3, #12]
 801462c:	4a2c      	ldr	r2, [pc, #176]	@ (80146e0 <tcp_listen_input+0x1f4>)
 801462e:	697b      	ldr	r3, [r7, #20]
 8014630:	6013      	str	r3, [r2, #0]
 8014632:	f003 f8cb 	bl	80177cc <tcp_timer_needed>
 8014636:	4b2b      	ldr	r3, [pc, #172]	@ (80146e4 <tcp_listen_input+0x1f8>)
 8014638:	2201      	movs	r2, #1
 801463a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801463c:	6978      	ldr	r0, [r7, #20]
 801463e:	f001 fd8b 	bl	8016158 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014642:	4b23      	ldr	r3, [pc, #140]	@ (80146d0 <tcp_listen_input+0x1e4>)
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	89db      	ldrh	r3, [r3, #14]
 8014648:	b29a      	uxth	r2, r3
 801464a:	697b      	ldr	r3, [r7, #20]
 801464c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014650:	697b      	ldr	r3, [r7, #20]
 8014652:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014656:	697b      	ldr	r3, [r7, #20]
 8014658:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801465c:	697b      	ldr	r3, [r7, #20]
 801465e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8014660:	697b      	ldr	r3, [r7, #20]
 8014662:	3304      	adds	r3, #4
 8014664:	4618      	mov	r0, r3
 8014666:	f006 fe79 	bl	801b35c <ip4_route>
 801466a:	4601      	mov	r1, r0
 801466c:	697b      	ldr	r3, [r7, #20]
 801466e:	3304      	adds	r3, #4
 8014670:	461a      	mov	r2, r3
 8014672:	4620      	mov	r0, r4
 8014674:	f7ff fa30 	bl	8013ad8 <tcp_eff_send_mss_netif>
 8014678:	4603      	mov	r3, r0
 801467a:	461a      	mov	r2, r3
 801467c:	697b      	ldr	r3, [r7, #20]
 801467e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014680:	2112      	movs	r1, #18
 8014682:	6978      	ldr	r0, [r7, #20]
 8014684:	f002 f83e 	bl	8016704 <tcp_enqueue_flags>
 8014688:	4603      	mov	r3, r0
 801468a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801468c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d004      	beq.n	801469e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014694:	2100      	movs	r1, #0
 8014696:	6978      	ldr	r0, [r7, #20]
 8014698:	f7fe f97c 	bl	8012994 <tcp_abandon>
      return;
 801469c:	e006      	b.n	80146ac <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801469e:	6978      	ldr	r0, [r7, #20]
 80146a0:	f002 f91e 	bl	80168e0 <tcp_output>
  return;
 80146a4:	e001      	b.n	80146aa <tcp_listen_input+0x1be>
    return;
 80146a6:	bf00      	nop
 80146a8:	e000      	b.n	80146ac <tcp_listen_input+0x1c0>
  return;
 80146aa:	bf00      	nop
}
 80146ac:	371c      	adds	r7, #28
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd90      	pop	{r4, r7, pc}
 80146b2:	bf00      	nop
 80146b4:	2400cc78 	.word	0x2400cc78
 80146b8:	080208d4 	.word	0x080208d4
 80146bc:	08020acc 	.word	0x08020acc
 80146c0:	08020920 	.word	0x08020920
 80146c4:	2400cc70 	.word	0x2400cc70
 80146c8:	2400cc76 	.word	0x2400cc76
 80146cc:	2400cc6c 	.word	0x2400cc6c
 80146d0:	2400cc5c 	.word	0x2400cc5c
 80146d4:	24009b24 	.word	0x24009b24
 80146d8:	24009b28 	.word	0x24009b28
 80146dc:	24009b14 	.word	0x24009b14
 80146e0:	2400cc40 	.word	0x2400cc40
 80146e4:	2400cc48 	.word	0x2400cc48

080146e8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b086      	sub	sp, #24
 80146ec:	af04      	add	r7, sp, #16
 80146ee:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80146f0:	4b2f      	ldr	r3, [pc, #188]	@ (80147b0 <tcp_timewait_input+0xc8>)
 80146f2:	781b      	ldrb	r3, [r3, #0]
 80146f4:	f003 0304 	and.w	r3, r3, #4
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d153      	bne.n	80147a4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d106      	bne.n	8014710 <tcp_timewait_input+0x28>
 8014702:	4b2c      	ldr	r3, [pc, #176]	@ (80147b4 <tcp_timewait_input+0xcc>)
 8014704:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014708:	492b      	ldr	r1, [pc, #172]	@ (80147b8 <tcp_timewait_input+0xd0>)
 801470a:	482c      	ldr	r0, [pc, #176]	@ (80147bc <tcp_timewait_input+0xd4>)
 801470c:	f008 fe5a 	bl	801d3c4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014710:	4b27      	ldr	r3, [pc, #156]	@ (80147b0 <tcp_timewait_input+0xc8>)
 8014712:	781b      	ldrb	r3, [r3, #0]
 8014714:	f003 0302 	and.w	r3, r3, #2
 8014718:	2b00      	cmp	r3, #0
 801471a:	d02a      	beq.n	8014772 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801471c:	4b28      	ldr	r3, [pc, #160]	@ (80147c0 <tcp_timewait_input+0xd8>)
 801471e:	681a      	ldr	r2, [r3, #0]
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014724:	1ad3      	subs	r3, r2, r3
 8014726:	2b00      	cmp	r3, #0
 8014728:	db2d      	blt.n	8014786 <tcp_timewait_input+0x9e>
 801472a:	4b25      	ldr	r3, [pc, #148]	@ (80147c0 <tcp_timewait_input+0xd8>)
 801472c:	681a      	ldr	r2, [r3, #0]
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014732:	6879      	ldr	r1, [r7, #4]
 8014734:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014736:	440b      	add	r3, r1
 8014738:	1ad3      	subs	r3, r2, r3
 801473a:	2b00      	cmp	r3, #0
 801473c:	dc23      	bgt.n	8014786 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801473e:	4b21      	ldr	r3, [pc, #132]	@ (80147c4 <tcp_timewait_input+0xdc>)
 8014740:	6819      	ldr	r1, [r3, #0]
 8014742:	4b21      	ldr	r3, [pc, #132]	@ (80147c8 <tcp_timewait_input+0xe0>)
 8014744:	881b      	ldrh	r3, [r3, #0]
 8014746:	461a      	mov	r2, r3
 8014748:	4b1d      	ldr	r3, [pc, #116]	@ (80147c0 <tcp_timewait_input+0xd8>)
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801474e:	4b1f      	ldr	r3, [pc, #124]	@ (80147cc <tcp_timewait_input+0xe4>)
 8014750:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014752:	885b      	ldrh	r3, [r3, #2]
 8014754:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014756:	4a1d      	ldr	r2, [pc, #116]	@ (80147cc <tcp_timewait_input+0xe4>)
 8014758:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801475a:	8812      	ldrh	r2, [r2, #0]
 801475c:	b292      	uxth	r2, r2
 801475e:	9202      	str	r2, [sp, #8]
 8014760:	9301      	str	r3, [sp, #4]
 8014762:	4b1b      	ldr	r3, [pc, #108]	@ (80147d0 <tcp_timewait_input+0xe8>)
 8014764:	9300      	str	r3, [sp, #0]
 8014766:	4b1b      	ldr	r3, [pc, #108]	@ (80147d4 <tcp_timewait_input+0xec>)
 8014768:	4602      	mov	r2, r0
 801476a:	6878      	ldr	r0, [r7, #4]
 801476c:	f002 fe6c 	bl	8017448 <tcp_rst>
      return;
 8014770:	e01b      	b.n	80147aa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014772:	4b0f      	ldr	r3, [pc, #60]	@ (80147b0 <tcp_timewait_input+0xc8>)
 8014774:	781b      	ldrb	r3, [r3, #0]
 8014776:	f003 0301 	and.w	r3, r3, #1
 801477a:	2b00      	cmp	r3, #0
 801477c:	d003      	beq.n	8014786 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801477e:	4b16      	ldr	r3, [pc, #88]	@ (80147d8 <tcp_timewait_input+0xf0>)
 8014780:	681a      	ldr	r2, [r3, #0]
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014786:	4b10      	ldr	r3, [pc, #64]	@ (80147c8 <tcp_timewait_input+0xe0>)
 8014788:	881b      	ldrh	r3, [r3, #0]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d00c      	beq.n	80147a8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	8b5b      	ldrh	r3, [r3, #26]
 8014792:	f043 0302 	orr.w	r3, r3, #2
 8014796:	b29a      	uxth	r2, r3
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801479c:	6878      	ldr	r0, [r7, #4]
 801479e:	f002 f89f 	bl	80168e0 <tcp_output>
  }
  return;
 80147a2:	e001      	b.n	80147a8 <tcp_timewait_input+0xc0>
    return;
 80147a4:	bf00      	nop
 80147a6:	e000      	b.n	80147aa <tcp_timewait_input+0xc2>
  return;
 80147a8:	bf00      	nop
}
 80147aa:	3708      	adds	r7, #8
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd80      	pop	{r7, pc}
 80147b0:	2400cc78 	.word	0x2400cc78
 80147b4:	080208d4 	.word	0x080208d4
 80147b8:	08020aec 	.word	0x08020aec
 80147bc:	08020920 	.word	0x08020920
 80147c0:	2400cc6c 	.word	0x2400cc6c
 80147c4:	2400cc70 	.word	0x2400cc70
 80147c8:	2400cc76 	.word	0x2400cc76
 80147cc:	2400cc5c 	.word	0x2400cc5c
 80147d0:	24009b24 	.word	0x24009b24
 80147d4:	24009b28 	.word	0x24009b28
 80147d8:	2400cc34 	.word	0x2400cc34

080147dc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80147dc:	b590      	push	{r4, r7, lr}
 80147de:	b08d      	sub	sp, #52	@ 0x34
 80147e0:	af04      	add	r7, sp, #16
 80147e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80147e4:	2300      	movs	r3, #0
 80147e6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80147e8:	2300      	movs	r3, #0
 80147ea:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d106      	bne.n	8014800 <tcp_process+0x24>
 80147f2:	4b9d      	ldr	r3, [pc, #628]	@ (8014a68 <tcp_process+0x28c>)
 80147f4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80147f8:	499c      	ldr	r1, [pc, #624]	@ (8014a6c <tcp_process+0x290>)
 80147fa:	489d      	ldr	r0, [pc, #628]	@ (8014a70 <tcp_process+0x294>)
 80147fc:	f008 fde2 	bl	801d3c4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014800:	4b9c      	ldr	r3, [pc, #624]	@ (8014a74 <tcp_process+0x298>)
 8014802:	781b      	ldrb	r3, [r3, #0]
 8014804:	f003 0304 	and.w	r3, r3, #4
 8014808:	2b00      	cmp	r3, #0
 801480a:	d04e      	beq.n	80148aa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	7d1b      	ldrb	r3, [r3, #20]
 8014810:	2b02      	cmp	r3, #2
 8014812:	d108      	bne.n	8014826 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014818:	4b97      	ldr	r3, [pc, #604]	@ (8014a78 <tcp_process+0x29c>)
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	429a      	cmp	r2, r3
 801481e:	d123      	bne.n	8014868 <tcp_process+0x8c>
        acceptable = 1;
 8014820:	2301      	movs	r3, #1
 8014822:	76fb      	strb	r3, [r7, #27]
 8014824:	e020      	b.n	8014868 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801482a:	4b94      	ldr	r3, [pc, #592]	@ (8014a7c <tcp_process+0x2a0>)
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	429a      	cmp	r2, r3
 8014830:	d102      	bne.n	8014838 <tcp_process+0x5c>
        acceptable = 1;
 8014832:	2301      	movs	r3, #1
 8014834:	76fb      	strb	r3, [r7, #27]
 8014836:	e017      	b.n	8014868 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014838:	4b90      	ldr	r3, [pc, #576]	@ (8014a7c <tcp_process+0x2a0>)
 801483a:	681a      	ldr	r2, [r3, #0]
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014840:	1ad3      	subs	r3, r2, r3
 8014842:	2b00      	cmp	r3, #0
 8014844:	db10      	blt.n	8014868 <tcp_process+0x8c>
 8014846:	4b8d      	ldr	r3, [pc, #564]	@ (8014a7c <tcp_process+0x2a0>)
 8014848:	681a      	ldr	r2, [r3, #0]
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801484e:	6879      	ldr	r1, [r7, #4]
 8014850:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014852:	440b      	add	r3, r1
 8014854:	1ad3      	subs	r3, r2, r3
 8014856:	2b00      	cmp	r3, #0
 8014858:	dc06      	bgt.n	8014868 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	8b5b      	ldrh	r3, [r3, #26]
 801485e:	f043 0302 	orr.w	r3, r3, #2
 8014862:	b29a      	uxth	r2, r3
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014868:	7efb      	ldrb	r3, [r7, #27]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d01b      	beq.n	80148a6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	7d1b      	ldrb	r3, [r3, #20]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d106      	bne.n	8014884 <tcp_process+0xa8>
 8014876:	4b7c      	ldr	r3, [pc, #496]	@ (8014a68 <tcp_process+0x28c>)
 8014878:	f44f 724e 	mov.w	r2, #824	@ 0x338
 801487c:	4980      	ldr	r1, [pc, #512]	@ (8014a80 <tcp_process+0x2a4>)
 801487e:	487c      	ldr	r0, [pc, #496]	@ (8014a70 <tcp_process+0x294>)
 8014880:	f008 fda0 	bl	801d3c4 <iprintf>
      recv_flags |= TF_RESET;
 8014884:	4b7f      	ldr	r3, [pc, #508]	@ (8014a84 <tcp_process+0x2a8>)
 8014886:	781b      	ldrb	r3, [r3, #0]
 8014888:	f043 0308 	orr.w	r3, r3, #8
 801488c:	b2da      	uxtb	r2, r3
 801488e:	4b7d      	ldr	r3, [pc, #500]	@ (8014a84 <tcp_process+0x2a8>)
 8014890:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	8b5b      	ldrh	r3, [r3, #26]
 8014896:	f023 0301 	bic.w	r3, r3, #1
 801489a:	b29a      	uxth	r2, r3
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80148a0:	f06f 030d 	mvn.w	r3, #13
 80148a4:	e37a      	b.n	8014f9c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80148a6:	2300      	movs	r3, #0
 80148a8:	e378      	b.n	8014f9c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80148aa:	4b72      	ldr	r3, [pc, #456]	@ (8014a74 <tcp_process+0x298>)
 80148ac:	781b      	ldrb	r3, [r3, #0]
 80148ae:	f003 0302 	and.w	r3, r3, #2
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d010      	beq.n	80148d8 <tcp_process+0xfc>
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	7d1b      	ldrb	r3, [r3, #20]
 80148ba:	2b02      	cmp	r3, #2
 80148bc:	d00c      	beq.n	80148d8 <tcp_process+0xfc>
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	7d1b      	ldrb	r3, [r3, #20]
 80148c2:	2b03      	cmp	r3, #3
 80148c4:	d008      	beq.n	80148d8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	8b5b      	ldrh	r3, [r3, #26]
 80148ca:	f043 0302 	orr.w	r3, r3, #2
 80148ce:	b29a      	uxth	r2, r3
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80148d4:	2300      	movs	r3, #0
 80148d6:	e361      	b.n	8014f9c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	8b5b      	ldrh	r3, [r3, #26]
 80148dc:	f003 0310 	and.w	r3, r3, #16
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d103      	bne.n	80148ec <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80148e4:	4b68      	ldr	r3, [pc, #416]	@ (8014a88 <tcp_process+0x2ac>)
 80148e6:	681a      	ldr	r2, [r3, #0]
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	2200      	movs	r2, #0
 80148f0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	2200      	movs	r2, #0
 80148f8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80148fc:	6878      	ldr	r0, [r7, #4]
 80148fe:	f001 fc2b 	bl	8016158 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	7d1b      	ldrb	r3, [r3, #20]
 8014906:	3b02      	subs	r3, #2
 8014908:	2b07      	cmp	r3, #7
 801490a:	f200 8337 	bhi.w	8014f7c <tcp_process+0x7a0>
 801490e:	a201      	add	r2, pc, #4	@ (adr r2, 8014914 <tcp_process+0x138>)
 8014910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014914:	08014935 	.word	0x08014935
 8014918:	08014b65 	.word	0x08014b65
 801491c:	08014cdd 	.word	0x08014cdd
 8014920:	08014d07 	.word	0x08014d07
 8014924:	08014e2b 	.word	0x08014e2b
 8014928:	08014cdd 	.word	0x08014cdd
 801492c:	08014eb7 	.word	0x08014eb7
 8014930:	08014f47 	.word	0x08014f47
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014934:	4b4f      	ldr	r3, [pc, #316]	@ (8014a74 <tcp_process+0x298>)
 8014936:	781b      	ldrb	r3, [r3, #0]
 8014938:	f003 0310 	and.w	r3, r3, #16
 801493c:	2b00      	cmp	r3, #0
 801493e:	f000 80e4 	beq.w	8014b0a <tcp_process+0x32e>
 8014942:	4b4c      	ldr	r3, [pc, #304]	@ (8014a74 <tcp_process+0x298>)
 8014944:	781b      	ldrb	r3, [r3, #0]
 8014946:	f003 0302 	and.w	r3, r3, #2
 801494a:	2b00      	cmp	r3, #0
 801494c:	f000 80dd 	beq.w	8014b0a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014954:	1c5a      	adds	r2, r3, #1
 8014956:	4b48      	ldr	r3, [pc, #288]	@ (8014a78 <tcp_process+0x29c>)
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	429a      	cmp	r2, r3
 801495c:	f040 80d5 	bne.w	8014b0a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014960:	4b46      	ldr	r3, [pc, #280]	@ (8014a7c <tcp_process+0x2a0>)
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	1c5a      	adds	r2, r3, #1
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8014972:	4b41      	ldr	r3, [pc, #260]	@ (8014a78 <tcp_process+0x29c>)
 8014974:	681a      	ldr	r2, [r3, #0]
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801497a:	4b44      	ldr	r3, [pc, #272]	@ (8014a8c <tcp_process+0x2b0>)
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	89db      	ldrh	r3, [r3, #14]
 8014980:	b29a      	uxth	r2, r3
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014994:	4b39      	ldr	r3, [pc, #228]	@ (8014a7c <tcp_process+0x2a0>)
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	1e5a      	subs	r2, r3, #1
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	2204      	movs	r2, #4
 80149a2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	3304      	adds	r3, #4
 80149ac:	4618      	mov	r0, r3
 80149ae:	f006 fcd5 	bl	801b35c <ip4_route>
 80149b2:	4601      	mov	r1, r0
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	3304      	adds	r3, #4
 80149b8:	461a      	mov	r2, r3
 80149ba:	4620      	mov	r0, r4
 80149bc:	f7ff f88c 	bl	8013ad8 <tcp_eff_send_mss_netif>
 80149c0:	4603      	mov	r3, r0
 80149c2:	461a      	mov	r2, r3
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80149cc:	009a      	lsls	r2, r3, #2
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80149d2:	005b      	lsls	r3, r3, #1
 80149d4:	f241 111c 	movw	r1, #4380	@ 0x111c
 80149d8:	428b      	cmp	r3, r1
 80149da:	bf38      	it	cc
 80149dc:	460b      	movcc	r3, r1
 80149de:	429a      	cmp	r2, r3
 80149e0:	d204      	bcs.n	80149ec <tcp_process+0x210>
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80149e6:	009b      	lsls	r3, r3, #2
 80149e8:	b29b      	uxth	r3, r3
 80149ea:	e00d      	b.n	8014a08 <tcp_process+0x22c>
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80149f0:	005b      	lsls	r3, r3, #1
 80149f2:	f241 121c 	movw	r2, #4380	@ 0x111c
 80149f6:	4293      	cmp	r3, r2
 80149f8:	d904      	bls.n	8014a04 <tcp_process+0x228>
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80149fe:	005b      	lsls	r3, r3, #1
 8014a00:	b29b      	uxth	r3, r3
 8014a02:	e001      	b.n	8014a08 <tcp_process+0x22c>
 8014a04:	f241 131c 	movw	r3, #4380	@ 0x111c
 8014a08:	687a      	ldr	r2, [r7, #4]
 8014a0a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d106      	bne.n	8014a26 <tcp_process+0x24a>
 8014a18:	4b13      	ldr	r3, [pc, #76]	@ (8014a68 <tcp_process+0x28c>)
 8014a1a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8014a1e:	491c      	ldr	r1, [pc, #112]	@ (8014a90 <tcp_process+0x2b4>)
 8014a20:	4813      	ldr	r0, [pc, #76]	@ (8014a70 <tcp_process+0x294>)
 8014a22:	f008 fccf 	bl	801d3c4 <iprintf>
        --pcb->snd_queuelen;
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014a2c:	3b01      	subs	r3, #1
 8014a2e:	b29a      	uxth	r2, r3
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014a3a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014a3c:	69fb      	ldr	r3, [r7, #28]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d12a      	bne.n	8014a98 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014a46:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014a48:	69fb      	ldr	r3, [r7, #28]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d106      	bne.n	8014a5c <tcp_process+0x280>
 8014a4e:	4b06      	ldr	r3, [pc, #24]	@ (8014a68 <tcp_process+0x28c>)
 8014a50:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8014a54:	490f      	ldr	r1, [pc, #60]	@ (8014a94 <tcp_process+0x2b8>)
 8014a56:	4806      	ldr	r0, [pc, #24]	@ (8014a70 <tcp_process+0x294>)
 8014a58:	f008 fcb4 	bl	801d3c4 <iprintf>
          pcb->unsent = rseg->next;
 8014a5c:	69fb      	ldr	r3, [r7, #28]
 8014a5e:	681a      	ldr	r2, [r3, #0]
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014a64:	e01c      	b.n	8014aa0 <tcp_process+0x2c4>
 8014a66:	bf00      	nop
 8014a68:	080208d4 	.word	0x080208d4
 8014a6c:	08020b0c 	.word	0x08020b0c
 8014a70:	08020920 	.word	0x08020920
 8014a74:	2400cc78 	.word	0x2400cc78
 8014a78:	2400cc70 	.word	0x2400cc70
 8014a7c:	2400cc6c 	.word	0x2400cc6c
 8014a80:	08020b28 	.word	0x08020b28
 8014a84:	2400cc79 	.word	0x2400cc79
 8014a88:	2400cc34 	.word	0x2400cc34
 8014a8c:	2400cc5c 	.word	0x2400cc5c
 8014a90:	08020b48 	.word	0x08020b48
 8014a94:	08020b60 	.word	0x08020b60
        } else {
          pcb->unacked = rseg->next;
 8014a98:	69fb      	ldr	r3, [r7, #28]
 8014a9a:	681a      	ldr	r2, [r3, #0]
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8014aa0:	69f8      	ldr	r0, [r7, #28]
 8014aa2:	f7fe fd22 	bl	80134ea <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d104      	bne.n	8014ab8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014ab4:	861a      	strh	r2, [r3, #48]	@ 0x30
 8014ab6:	e006      	b.n	8014ac6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	2200      	movs	r2, #0
 8014abc:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	2200      	movs	r2, #0
 8014ac2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d00a      	beq.n	8014ae6 <tcp_process+0x30a>
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014ad6:	687a      	ldr	r2, [r7, #4]
 8014ad8:	6910      	ldr	r0, [r2, #16]
 8014ada:	2200      	movs	r2, #0
 8014adc:	6879      	ldr	r1, [r7, #4]
 8014ade:	4798      	blx	r3
 8014ae0:	4603      	mov	r3, r0
 8014ae2:	76bb      	strb	r3, [r7, #26]
 8014ae4:	e001      	b.n	8014aea <tcp_process+0x30e>
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8014aea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014aee:	f113 0f0d 	cmn.w	r3, #13
 8014af2:	d102      	bne.n	8014afa <tcp_process+0x31e>
          return ERR_ABRT;
 8014af4:	f06f 030c 	mvn.w	r3, #12
 8014af8:	e250      	b.n	8014f9c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	8b5b      	ldrh	r3, [r3, #26]
 8014afe:	f043 0302 	orr.w	r3, r3, #2
 8014b02:	b29a      	uxth	r2, r3
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8014b08:	e23a      	b.n	8014f80 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8014b0a:	4b98      	ldr	r3, [pc, #608]	@ (8014d6c <tcp_process+0x590>)
 8014b0c:	781b      	ldrb	r3, [r3, #0]
 8014b0e:	f003 0310 	and.w	r3, r3, #16
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	f000 8234 	beq.w	8014f80 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014b18:	4b95      	ldr	r3, [pc, #596]	@ (8014d70 <tcp_process+0x594>)
 8014b1a:	6819      	ldr	r1, [r3, #0]
 8014b1c:	4b95      	ldr	r3, [pc, #596]	@ (8014d74 <tcp_process+0x598>)
 8014b1e:	881b      	ldrh	r3, [r3, #0]
 8014b20:	461a      	mov	r2, r3
 8014b22:	4b95      	ldr	r3, [pc, #596]	@ (8014d78 <tcp_process+0x59c>)
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014b28:	4b94      	ldr	r3, [pc, #592]	@ (8014d7c <tcp_process+0x5a0>)
 8014b2a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014b2c:	885b      	ldrh	r3, [r3, #2]
 8014b2e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014b30:	4a92      	ldr	r2, [pc, #584]	@ (8014d7c <tcp_process+0x5a0>)
 8014b32:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014b34:	8812      	ldrh	r2, [r2, #0]
 8014b36:	b292      	uxth	r2, r2
 8014b38:	9202      	str	r2, [sp, #8]
 8014b3a:	9301      	str	r3, [sp, #4]
 8014b3c:	4b90      	ldr	r3, [pc, #576]	@ (8014d80 <tcp_process+0x5a4>)
 8014b3e:	9300      	str	r3, [sp, #0]
 8014b40:	4b90      	ldr	r3, [pc, #576]	@ (8014d84 <tcp_process+0x5a8>)
 8014b42:	4602      	mov	r2, r0
 8014b44:	6878      	ldr	r0, [r7, #4]
 8014b46:	f002 fc7f 	bl	8017448 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014b50:	2b05      	cmp	r3, #5
 8014b52:	f200 8215 	bhi.w	8014f80 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	2200      	movs	r2, #0
 8014b5a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8014b5c:	6878      	ldr	r0, [r7, #4]
 8014b5e:	f002 fa4b 	bl	8016ff8 <tcp_rexmit_rto>
      break;
 8014b62:	e20d      	b.n	8014f80 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014b64:	4b81      	ldr	r3, [pc, #516]	@ (8014d6c <tcp_process+0x590>)
 8014b66:	781b      	ldrb	r3, [r3, #0]
 8014b68:	f003 0310 	and.w	r3, r3, #16
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	f000 80a1 	beq.w	8014cb4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014b72:	4b7f      	ldr	r3, [pc, #508]	@ (8014d70 <tcp_process+0x594>)
 8014b74:	681a      	ldr	r2, [r3, #0]
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014b7a:	1ad3      	subs	r3, r2, r3
 8014b7c:	3b01      	subs	r3, #1
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	db7e      	blt.n	8014c80 <tcp_process+0x4a4>
 8014b82:	4b7b      	ldr	r3, [pc, #492]	@ (8014d70 <tcp_process+0x594>)
 8014b84:	681a      	ldr	r2, [r3, #0]
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014b8a:	1ad3      	subs	r3, r2, r3
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	dc77      	bgt.n	8014c80 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	2204      	movs	r2, #4
 8014b94:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d102      	bne.n	8014ba4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014b9e:	23fa      	movs	r3, #250	@ 0xfa
 8014ba0:	76bb      	strb	r3, [r7, #26]
 8014ba2:	e01d      	b.n	8014be0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014ba8:	699b      	ldr	r3, [r3, #24]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d106      	bne.n	8014bbc <tcp_process+0x3e0>
 8014bae:	4b76      	ldr	r3, [pc, #472]	@ (8014d88 <tcp_process+0x5ac>)
 8014bb0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8014bb4:	4975      	ldr	r1, [pc, #468]	@ (8014d8c <tcp_process+0x5b0>)
 8014bb6:	4876      	ldr	r0, [pc, #472]	@ (8014d90 <tcp_process+0x5b4>)
 8014bb8:	f008 fc04 	bl	801d3c4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014bc0:	699b      	ldr	r3, [r3, #24]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d00a      	beq.n	8014bdc <tcp_process+0x400>
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014bca:	699b      	ldr	r3, [r3, #24]
 8014bcc:	687a      	ldr	r2, [r7, #4]
 8014bce:	6910      	ldr	r0, [r2, #16]
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	6879      	ldr	r1, [r7, #4]
 8014bd4:	4798      	blx	r3
 8014bd6:	4603      	mov	r3, r0
 8014bd8:	76bb      	strb	r3, [r7, #26]
 8014bda:	e001      	b.n	8014be0 <tcp_process+0x404>
 8014bdc:	23f0      	movs	r3, #240	@ 0xf0
 8014bde:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014be0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d00a      	beq.n	8014bfe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8014be8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014bec:	f113 0f0d 	cmn.w	r3, #13
 8014bf0:	d002      	beq.n	8014bf8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8014bf2:	6878      	ldr	r0, [r7, #4]
 8014bf4:	f7fd ff8c 	bl	8012b10 <tcp_abort>
            }
            return ERR_ABRT;
 8014bf8:	f06f 030c 	mvn.w	r3, #12
 8014bfc:	e1ce      	b.n	8014f9c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014bfe:	6878      	ldr	r0, [r7, #4]
 8014c00:	f000 fae0 	bl	80151c4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014c04:	4b63      	ldr	r3, [pc, #396]	@ (8014d94 <tcp_process+0x5b8>)
 8014c06:	881b      	ldrh	r3, [r3, #0]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d005      	beq.n	8014c18 <tcp_process+0x43c>
            recv_acked--;
 8014c0c:	4b61      	ldr	r3, [pc, #388]	@ (8014d94 <tcp_process+0x5b8>)
 8014c0e:	881b      	ldrh	r3, [r3, #0]
 8014c10:	3b01      	subs	r3, #1
 8014c12:	b29a      	uxth	r2, r3
 8014c14:	4b5f      	ldr	r3, [pc, #380]	@ (8014d94 <tcp_process+0x5b8>)
 8014c16:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014c1c:	009a      	lsls	r2, r3, #2
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014c22:	005b      	lsls	r3, r3, #1
 8014c24:	f241 111c 	movw	r1, #4380	@ 0x111c
 8014c28:	428b      	cmp	r3, r1
 8014c2a:	bf38      	it	cc
 8014c2c:	460b      	movcc	r3, r1
 8014c2e:	429a      	cmp	r2, r3
 8014c30:	d204      	bcs.n	8014c3c <tcp_process+0x460>
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014c36:	009b      	lsls	r3, r3, #2
 8014c38:	b29b      	uxth	r3, r3
 8014c3a:	e00d      	b.n	8014c58 <tcp_process+0x47c>
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014c40:	005b      	lsls	r3, r3, #1
 8014c42:	f241 121c 	movw	r2, #4380	@ 0x111c
 8014c46:	4293      	cmp	r3, r2
 8014c48:	d904      	bls.n	8014c54 <tcp_process+0x478>
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014c4e:	005b      	lsls	r3, r3, #1
 8014c50:	b29b      	uxth	r3, r3
 8014c52:	e001      	b.n	8014c58 <tcp_process+0x47c>
 8014c54:	f241 131c 	movw	r3, #4380	@ 0x111c
 8014c58:	687a      	ldr	r2, [r7, #4]
 8014c5a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8014c5e:	4b4e      	ldr	r3, [pc, #312]	@ (8014d98 <tcp_process+0x5bc>)
 8014c60:	781b      	ldrb	r3, [r3, #0]
 8014c62:	f003 0320 	and.w	r3, r3, #32
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d037      	beq.n	8014cda <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	8b5b      	ldrh	r3, [r3, #26]
 8014c6e:	f043 0302 	orr.w	r3, r3, #2
 8014c72:	b29a      	uxth	r2, r3
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	2207      	movs	r2, #7
 8014c7c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8014c7e:	e02c      	b.n	8014cda <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014c80:	4b3b      	ldr	r3, [pc, #236]	@ (8014d70 <tcp_process+0x594>)
 8014c82:	6819      	ldr	r1, [r3, #0]
 8014c84:	4b3b      	ldr	r3, [pc, #236]	@ (8014d74 <tcp_process+0x598>)
 8014c86:	881b      	ldrh	r3, [r3, #0]
 8014c88:	461a      	mov	r2, r3
 8014c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8014d78 <tcp_process+0x59c>)
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014c90:	4b3a      	ldr	r3, [pc, #232]	@ (8014d7c <tcp_process+0x5a0>)
 8014c92:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014c94:	885b      	ldrh	r3, [r3, #2]
 8014c96:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014c98:	4a38      	ldr	r2, [pc, #224]	@ (8014d7c <tcp_process+0x5a0>)
 8014c9a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014c9c:	8812      	ldrh	r2, [r2, #0]
 8014c9e:	b292      	uxth	r2, r2
 8014ca0:	9202      	str	r2, [sp, #8]
 8014ca2:	9301      	str	r3, [sp, #4]
 8014ca4:	4b36      	ldr	r3, [pc, #216]	@ (8014d80 <tcp_process+0x5a4>)
 8014ca6:	9300      	str	r3, [sp, #0]
 8014ca8:	4b36      	ldr	r3, [pc, #216]	@ (8014d84 <tcp_process+0x5a8>)
 8014caa:	4602      	mov	r2, r0
 8014cac:	6878      	ldr	r0, [r7, #4]
 8014cae:	f002 fbcb 	bl	8017448 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8014cb2:	e167      	b.n	8014f84 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014cb4:	4b2d      	ldr	r3, [pc, #180]	@ (8014d6c <tcp_process+0x590>)
 8014cb6:	781b      	ldrb	r3, [r3, #0]
 8014cb8:	f003 0302 	and.w	r3, r3, #2
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	f000 8161 	beq.w	8014f84 <tcp_process+0x7a8>
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014cc6:	1e5a      	subs	r2, r3, #1
 8014cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8014d78 <tcp_process+0x59c>)
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	429a      	cmp	r2, r3
 8014cce:	f040 8159 	bne.w	8014f84 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8014cd2:	6878      	ldr	r0, [r7, #4]
 8014cd4:	f002 f9b2 	bl	801703c <tcp_rexmit>
      break;
 8014cd8:	e154      	b.n	8014f84 <tcp_process+0x7a8>
 8014cda:	e153      	b.n	8014f84 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014cdc:	6878      	ldr	r0, [r7, #4]
 8014cde:	f000 fa71 	bl	80151c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8014ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8014d98 <tcp_process+0x5bc>)
 8014ce4:	781b      	ldrb	r3, [r3, #0]
 8014ce6:	f003 0320 	and.w	r3, r3, #32
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	f000 814c 	beq.w	8014f88 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	8b5b      	ldrh	r3, [r3, #26]
 8014cf4:	f043 0302 	orr.w	r3, r3, #2
 8014cf8:	b29a      	uxth	r2, r3
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	2207      	movs	r2, #7
 8014d02:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014d04:	e140      	b.n	8014f88 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8014d06:	6878      	ldr	r0, [r7, #4]
 8014d08:	f000 fa5c 	bl	80151c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014d0c:	4b22      	ldr	r3, [pc, #136]	@ (8014d98 <tcp_process+0x5bc>)
 8014d0e:	781b      	ldrb	r3, [r3, #0]
 8014d10:	f003 0320 	and.w	r3, r3, #32
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d071      	beq.n	8014dfc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014d18:	4b14      	ldr	r3, [pc, #80]	@ (8014d6c <tcp_process+0x590>)
 8014d1a:	781b      	ldrb	r3, [r3, #0]
 8014d1c:	f003 0310 	and.w	r3, r3, #16
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d060      	beq.n	8014de6 <tcp_process+0x60a>
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014d28:	4b11      	ldr	r3, [pc, #68]	@ (8014d70 <tcp_process+0x594>)
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	429a      	cmp	r2, r3
 8014d2e:	d15a      	bne.n	8014de6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d156      	bne.n	8014de6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	8b5b      	ldrh	r3, [r3, #26]
 8014d3c:	f043 0302 	orr.w	r3, r3, #2
 8014d40:	b29a      	uxth	r2, r3
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8014d46:	6878      	ldr	r0, [r7, #4]
 8014d48:	f7fe fdbc 	bl	80138c4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014d4c:	4b13      	ldr	r3, [pc, #76]	@ (8014d9c <tcp_process+0x5c0>)
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	687a      	ldr	r2, [r7, #4]
 8014d52:	429a      	cmp	r2, r3
 8014d54:	d105      	bne.n	8014d62 <tcp_process+0x586>
 8014d56:	4b11      	ldr	r3, [pc, #68]	@ (8014d9c <tcp_process+0x5c0>)
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	68db      	ldr	r3, [r3, #12]
 8014d5c:	4a0f      	ldr	r2, [pc, #60]	@ (8014d9c <tcp_process+0x5c0>)
 8014d5e:	6013      	str	r3, [r2, #0]
 8014d60:	e02e      	b.n	8014dc0 <tcp_process+0x5e4>
 8014d62:	4b0e      	ldr	r3, [pc, #56]	@ (8014d9c <tcp_process+0x5c0>)
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	617b      	str	r3, [r7, #20]
 8014d68:	e027      	b.n	8014dba <tcp_process+0x5de>
 8014d6a:	bf00      	nop
 8014d6c:	2400cc78 	.word	0x2400cc78
 8014d70:	2400cc70 	.word	0x2400cc70
 8014d74:	2400cc76 	.word	0x2400cc76
 8014d78:	2400cc6c 	.word	0x2400cc6c
 8014d7c:	2400cc5c 	.word	0x2400cc5c
 8014d80:	24009b24 	.word	0x24009b24
 8014d84:	24009b28 	.word	0x24009b28
 8014d88:	080208d4 	.word	0x080208d4
 8014d8c:	08020b74 	.word	0x08020b74
 8014d90:	08020920 	.word	0x08020920
 8014d94:	2400cc74 	.word	0x2400cc74
 8014d98:	2400cc79 	.word	0x2400cc79
 8014d9c:	2400cc40 	.word	0x2400cc40
 8014da0:	697b      	ldr	r3, [r7, #20]
 8014da2:	68db      	ldr	r3, [r3, #12]
 8014da4:	687a      	ldr	r2, [r7, #4]
 8014da6:	429a      	cmp	r2, r3
 8014da8:	d104      	bne.n	8014db4 <tcp_process+0x5d8>
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	68da      	ldr	r2, [r3, #12]
 8014dae:	697b      	ldr	r3, [r7, #20]
 8014db0:	60da      	str	r2, [r3, #12]
 8014db2:	e005      	b.n	8014dc0 <tcp_process+0x5e4>
 8014db4:	697b      	ldr	r3, [r7, #20]
 8014db6:	68db      	ldr	r3, [r3, #12]
 8014db8:	617b      	str	r3, [r7, #20]
 8014dba:	697b      	ldr	r3, [r7, #20]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d1ef      	bne.n	8014da0 <tcp_process+0x5c4>
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	60da      	str	r2, [r3, #12]
 8014dc6:	4b77      	ldr	r3, [pc, #476]	@ (8014fa4 <tcp_process+0x7c8>)
 8014dc8:	2201      	movs	r2, #1
 8014dca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	220a      	movs	r2, #10
 8014dd0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8014dd2:	4b75      	ldr	r3, [pc, #468]	@ (8014fa8 <tcp_process+0x7cc>)
 8014dd4:	681a      	ldr	r2, [r3, #0]
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	60da      	str	r2, [r3, #12]
 8014dda:	4a73      	ldr	r2, [pc, #460]	@ (8014fa8 <tcp_process+0x7cc>)
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	6013      	str	r3, [r2, #0]
 8014de0:	f002 fcf4 	bl	80177cc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8014de4:	e0d2      	b.n	8014f8c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	8b5b      	ldrh	r3, [r3, #26]
 8014dea:	f043 0302 	orr.w	r3, r3, #2
 8014dee:	b29a      	uxth	r2, r3
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	2208      	movs	r2, #8
 8014df8:	751a      	strb	r2, [r3, #20]
      break;
 8014dfa:	e0c7      	b.n	8014f8c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014dfc:	4b6b      	ldr	r3, [pc, #428]	@ (8014fac <tcp_process+0x7d0>)
 8014dfe:	781b      	ldrb	r3, [r3, #0]
 8014e00:	f003 0310 	and.w	r3, r3, #16
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	f000 80c1 	beq.w	8014f8c <tcp_process+0x7b0>
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014e0e:	4b68      	ldr	r3, [pc, #416]	@ (8014fb0 <tcp_process+0x7d4>)
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	429a      	cmp	r2, r3
 8014e14:	f040 80ba 	bne.w	8014f8c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	f040 80b5 	bne.w	8014f8c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	2206      	movs	r2, #6
 8014e26:	751a      	strb	r2, [r3, #20]
      break;
 8014e28:	e0b0      	b.n	8014f8c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8014e2a:	6878      	ldr	r0, [r7, #4]
 8014e2c:	f000 f9ca 	bl	80151c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014e30:	4b60      	ldr	r3, [pc, #384]	@ (8014fb4 <tcp_process+0x7d8>)
 8014e32:	781b      	ldrb	r3, [r3, #0]
 8014e34:	f003 0320 	and.w	r3, r3, #32
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	f000 80a9 	beq.w	8014f90 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	8b5b      	ldrh	r3, [r3, #26]
 8014e42:	f043 0302 	orr.w	r3, r3, #2
 8014e46:	b29a      	uxth	r2, r3
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014e4c:	6878      	ldr	r0, [r7, #4]
 8014e4e:	f7fe fd39 	bl	80138c4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014e52:	4b59      	ldr	r3, [pc, #356]	@ (8014fb8 <tcp_process+0x7dc>)
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	687a      	ldr	r2, [r7, #4]
 8014e58:	429a      	cmp	r2, r3
 8014e5a:	d105      	bne.n	8014e68 <tcp_process+0x68c>
 8014e5c:	4b56      	ldr	r3, [pc, #344]	@ (8014fb8 <tcp_process+0x7dc>)
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	68db      	ldr	r3, [r3, #12]
 8014e62:	4a55      	ldr	r2, [pc, #340]	@ (8014fb8 <tcp_process+0x7dc>)
 8014e64:	6013      	str	r3, [r2, #0]
 8014e66:	e013      	b.n	8014e90 <tcp_process+0x6b4>
 8014e68:	4b53      	ldr	r3, [pc, #332]	@ (8014fb8 <tcp_process+0x7dc>)
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	613b      	str	r3, [r7, #16]
 8014e6e:	e00c      	b.n	8014e8a <tcp_process+0x6ae>
 8014e70:	693b      	ldr	r3, [r7, #16]
 8014e72:	68db      	ldr	r3, [r3, #12]
 8014e74:	687a      	ldr	r2, [r7, #4]
 8014e76:	429a      	cmp	r2, r3
 8014e78:	d104      	bne.n	8014e84 <tcp_process+0x6a8>
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	68da      	ldr	r2, [r3, #12]
 8014e7e:	693b      	ldr	r3, [r7, #16]
 8014e80:	60da      	str	r2, [r3, #12]
 8014e82:	e005      	b.n	8014e90 <tcp_process+0x6b4>
 8014e84:	693b      	ldr	r3, [r7, #16]
 8014e86:	68db      	ldr	r3, [r3, #12]
 8014e88:	613b      	str	r3, [r7, #16]
 8014e8a:	693b      	ldr	r3, [r7, #16]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d1ef      	bne.n	8014e70 <tcp_process+0x694>
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	2200      	movs	r2, #0
 8014e94:	60da      	str	r2, [r3, #12]
 8014e96:	4b43      	ldr	r3, [pc, #268]	@ (8014fa4 <tcp_process+0x7c8>)
 8014e98:	2201      	movs	r2, #1
 8014e9a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	220a      	movs	r2, #10
 8014ea0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014ea2:	4b41      	ldr	r3, [pc, #260]	@ (8014fa8 <tcp_process+0x7cc>)
 8014ea4:	681a      	ldr	r2, [r3, #0]
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	60da      	str	r2, [r3, #12]
 8014eaa:	4a3f      	ldr	r2, [pc, #252]	@ (8014fa8 <tcp_process+0x7cc>)
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	6013      	str	r3, [r2, #0]
 8014eb0:	f002 fc8c 	bl	80177cc <tcp_timer_needed>
      }
      break;
 8014eb4:	e06c      	b.n	8014f90 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8014eb6:	6878      	ldr	r0, [r7, #4]
 8014eb8:	f000 f984 	bl	80151c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8014fac <tcp_process+0x7d0>)
 8014ebe:	781b      	ldrb	r3, [r3, #0]
 8014ec0:	f003 0310 	and.w	r3, r3, #16
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d065      	beq.n	8014f94 <tcp_process+0x7b8>
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014ecc:	4b38      	ldr	r3, [pc, #224]	@ (8014fb0 <tcp_process+0x7d4>)
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	429a      	cmp	r2, r3
 8014ed2:	d15f      	bne.n	8014f94 <tcp_process+0x7b8>
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d15b      	bne.n	8014f94 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014edc:	6878      	ldr	r0, [r7, #4]
 8014ede:	f7fe fcf1 	bl	80138c4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014ee2:	4b35      	ldr	r3, [pc, #212]	@ (8014fb8 <tcp_process+0x7dc>)
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	687a      	ldr	r2, [r7, #4]
 8014ee8:	429a      	cmp	r2, r3
 8014eea:	d105      	bne.n	8014ef8 <tcp_process+0x71c>
 8014eec:	4b32      	ldr	r3, [pc, #200]	@ (8014fb8 <tcp_process+0x7dc>)
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	68db      	ldr	r3, [r3, #12]
 8014ef2:	4a31      	ldr	r2, [pc, #196]	@ (8014fb8 <tcp_process+0x7dc>)
 8014ef4:	6013      	str	r3, [r2, #0]
 8014ef6:	e013      	b.n	8014f20 <tcp_process+0x744>
 8014ef8:	4b2f      	ldr	r3, [pc, #188]	@ (8014fb8 <tcp_process+0x7dc>)
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	60fb      	str	r3, [r7, #12]
 8014efe:	e00c      	b.n	8014f1a <tcp_process+0x73e>
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	68db      	ldr	r3, [r3, #12]
 8014f04:	687a      	ldr	r2, [r7, #4]
 8014f06:	429a      	cmp	r2, r3
 8014f08:	d104      	bne.n	8014f14 <tcp_process+0x738>
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	68da      	ldr	r2, [r3, #12]
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	60da      	str	r2, [r3, #12]
 8014f12:	e005      	b.n	8014f20 <tcp_process+0x744>
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	68db      	ldr	r3, [r3, #12]
 8014f18:	60fb      	str	r3, [r7, #12]
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d1ef      	bne.n	8014f00 <tcp_process+0x724>
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	2200      	movs	r2, #0
 8014f24:	60da      	str	r2, [r3, #12]
 8014f26:	4b1f      	ldr	r3, [pc, #124]	@ (8014fa4 <tcp_process+0x7c8>)
 8014f28:	2201      	movs	r2, #1
 8014f2a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	220a      	movs	r2, #10
 8014f30:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014f32:	4b1d      	ldr	r3, [pc, #116]	@ (8014fa8 <tcp_process+0x7cc>)
 8014f34:	681a      	ldr	r2, [r3, #0]
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	60da      	str	r2, [r3, #12]
 8014f3a:	4a1b      	ldr	r2, [pc, #108]	@ (8014fa8 <tcp_process+0x7cc>)
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	6013      	str	r3, [r2, #0]
 8014f40:	f002 fc44 	bl	80177cc <tcp_timer_needed>
      }
      break;
 8014f44:	e026      	b.n	8014f94 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8014f46:	6878      	ldr	r0, [r7, #4]
 8014f48:	f000 f93c 	bl	80151c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014f4c:	4b17      	ldr	r3, [pc, #92]	@ (8014fac <tcp_process+0x7d0>)
 8014f4e:	781b      	ldrb	r3, [r3, #0]
 8014f50:	f003 0310 	and.w	r3, r3, #16
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d01f      	beq.n	8014f98 <tcp_process+0x7bc>
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014f5c:	4b14      	ldr	r3, [pc, #80]	@ (8014fb0 <tcp_process+0x7d4>)
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	429a      	cmp	r2, r3
 8014f62:	d119      	bne.n	8014f98 <tcp_process+0x7bc>
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d115      	bne.n	8014f98 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014f6c:	4b11      	ldr	r3, [pc, #68]	@ (8014fb4 <tcp_process+0x7d8>)
 8014f6e:	781b      	ldrb	r3, [r3, #0]
 8014f70:	f043 0310 	orr.w	r3, r3, #16
 8014f74:	b2da      	uxtb	r2, r3
 8014f76:	4b0f      	ldr	r3, [pc, #60]	@ (8014fb4 <tcp_process+0x7d8>)
 8014f78:	701a      	strb	r2, [r3, #0]
      }
      break;
 8014f7a:	e00d      	b.n	8014f98 <tcp_process+0x7bc>
    default:
      break;
 8014f7c:	bf00      	nop
 8014f7e:	e00c      	b.n	8014f9a <tcp_process+0x7be>
      break;
 8014f80:	bf00      	nop
 8014f82:	e00a      	b.n	8014f9a <tcp_process+0x7be>
      break;
 8014f84:	bf00      	nop
 8014f86:	e008      	b.n	8014f9a <tcp_process+0x7be>
      break;
 8014f88:	bf00      	nop
 8014f8a:	e006      	b.n	8014f9a <tcp_process+0x7be>
      break;
 8014f8c:	bf00      	nop
 8014f8e:	e004      	b.n	8014f9a <tcp_process+0x7be>
      break;
 8014f90:	bf00      	nop
 8014f92:	e002      	b.n	8014f9a <tcp_process+0x7be>
      break;
 8014f94:	bf00      	nop
 8014f96:	e000      	b.n	8014f9a <tcp_process+0x7be>
      break;
 8014f98:	bf00      	nop
  }
  return ERR_OK;
 8014f9a:	2300      	movs	r3, #0
}
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	3724      	adds	r7, #36	@ 0x24
 8014fa0:	46bd      	mov	sp, r7
 8014fa2:	bd90      	pop	{r4, r7, pc}
 8014fa4:	2400cc48 	.word	0x2400cc48
 8014fa8:	2400cc44 	.word	0x2400cc44
 8014fac:	2400cc78 	.word	0x2400cc78
 8014fb0:	2400cc70 	.word	0x2400cc70
 8014fb4:	2400cc79 	.word	0x2400cc79
 8014fb8:	2400cc40 	.word	0x2400cc40

08014fbc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014fbc:	b590      	push	{r4, r7, lr}
 8014fbe:	b085      	sub	sp, #20
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]
 8014fc4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d106      	bne.n	8014fda <tcp_oos_insert_segment+0x1e>
 8014fcc:	4b3b      	ldr	r3, [pc, #236]	@ (80150bc <tcp_oos_insert_segment+0x100>)
 8014fce:	f240 421f 	movw	r2, #1055	@ 0x41f
 8014fd2:	493b      	ldr	r1, [pc, #236]	@ (80150c0 <tcp_oos_insert_segment+0x104>)
 8014fd4:	483b      	ldr	r0, [pc, #236]	@ (80150c4 <tcp_oos_insert_segment+0x108>)
 8014fd6:	f008 f9f5 	bl	801d3c4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	68db      	ldr	r3, [r3, #12]
 8014fde:	899b      	ldrh	r3, [r3, #12]
 8014fe0:	b29b      	uxth	r3, r3
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f7fb fb3a 	bl	801065c <lwip_htons>
 8014fe8:	4603      	mov	r3, r0
 8014fea:	b2db      	uxtb	r3, r3
 8014fec:	f003 0301 	and.w	r3, r3, #1
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d028      	beq.n	8015046 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014ff4:	6838      	ldr	r0, [r7, #0]
 8014ff6:	f7fe fa63 	bl	80134c0 <tcp_segs_free>
    next = NULL;
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	603b      	str	r3, [r7, #0]
 8014ffe:	e056      	b.n	80150ae <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015000:	683b      	ldr	r3, [r7, #0]
 8015002:	68db      	ldr	r3, [r3, #12]
 8015004:	899b      	ldrh	r3, [r3, #12]
 8015006:	b29b      	uxth	r3, r3
 8015008:	4618      	mov	r0, r3
 801500a:	f7fb fb27 	bl	801065c <lwip_htons>
 801500e:	4603      	mov	r3, r0
 8015010:	b2db      	uxtb	r3, r3
 8015012:	f003 0301 	and.w	r3, r3, #1
 8015016:	2b00      	cmp	r3, #0
 8015018:	d00d      	beq.n	8015036 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	68db      	ldr	r3, [r3, #12]
 801501e:	899b      	ldrh	r3, [r3, #12]
 8015020:	b29c      	uxth	r4, r3
 8015022:	2001      	movs	r0, #1
 8015024:	f7fb fb1a 	bl	801065c <lwip_htons>
 8015028:	4603      	mov	r3, r0
 801502a:	461a      	mov	r2, r3
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	68db      	ldr	r3, [r3, #12]
 8015030:	4322      	orrs	r2, r4
 8015032:	b292      	uxth	r2, r2
 8015034:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8015036:	683b      	ldr	r3, [r7, #0]
 8015038:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801503a:	683b      	ldr	r3, [r7, #0]
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8015040:	68f8      	ldr	r0, [r7, #12]
 8015042:	f7fe fa52 	bl	80134ea <tcp_seg_free>
    while (next &&
 8015046:	683b      	ldr	r3, [r7, #0]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d00e      	beq.n	801506a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	891b      	ldrh	r3, [r3, #8]
 8015050:	461a      	mov	r2, r3
 8015052:	4b1d      	ldr	r3, [pc, #116]	@ (80150c8 <tcp_oos_insert_segment+0x10c>)
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	441a      	add	r2, r3
 8015058:	683b      	ldr	r3, [r7, #0]
 801505a:	68db      	ldr	r3, [r3, #12]
 801505c:	685b      	ldr	r3, [r3, #4]
 801505e:	6839      	ldr	r1, [r7, #0]
 8015060:	8909      	ldrh	r1, [r1, #8]
 8015062:	440b      	add	r3, r1
 8015064:	1ad3      	subs	r3, r2, r3
    while (next &&
 8015066:	2b00      	cmp	r3, #0
 8015068:	daca      	bge.n	8015000 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801506a:	683b      	ldr	r3, [r7, #0]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d01e      	beq.n	80150ae <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	891b      	ldrh	r3, [r3, #8]
 8015074:	461a      	mov	r2, r3
 8015076:	4b14      	ldr	r3, [pc, #80]	@ (80150c8 <tcp_oos_insert_segment+0x10c>)
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	441a      	add	r2, r3
 801507c:	683b      	ldr	r3, [r7, #0]
 801507e:	68db      	ldr	r3, [r3, #12]
 8015080:	685b      	ldr	r3, [r3, #4]
 8015082:	1ad3      	subs	r3, r2, r3
    if (next &&
 8015084:	2b00      	cmp	r3, #0
 8015086:	dd12      	ble.n	80150ae <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8015088:	683b      	ldr	r3, [r7, #0]
 801508a:	68db      	ldr	r3, [r3, #12]
 801508c:	685b      	ldr	r3, [r3, #4]
 801508e:	b29a      	uxth	r2, r3
 8015090:	4b0d      	ldr	r3, [pc, #52]	@ (80150c8 <tcp_oos_insert_segment+0x10c>)
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	b29b      	uxth	r3, r3
 8015096:	1ad3      	subs	r3, r2, r3
 8015098:	b29a      	uxth	r2, r3
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	685a      	ldr	r2, [r3, #4]
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	891b      	ldrh	r3, [r3, #8]
 80150a6:	4619      	mov	r1, r3
 80150a8:	4610      	mov	r0, r2
 80150aa:	f7fc fe07 	bl	8011cbc <pbuf_realloc>
    }
  }
  cseg->next = next;
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	683a      	ldr	r2, [r7, #0]
 80150b2:	601a      	str	r2, [r3, #0]
}
 80150b4:	bf00      	nop
 80150b6:	3714      	adds	r7, #20
 80150b8:	46bd      	mov	sp, r7
 80150ba:	bd90      	pop	{r4, r7, pc}
 80150bc:	080208d4 	.word	0x080208d4
 80150c0:	08020b94 	.word	0x08020b94
 80150c4:	08020920 	.word	0x08020920
 80150c8:	2400cc6c 	.word	0x2400cc6c

080150cc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80150cc:	b5b0      	push	{r4, r5, r7, lr}
 80150ce:	b086      	sub	sp, #24
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	60f8      	str	r0, [r7, #12]
 80150d4:	60b9      	str	r1, [r7, #8]
 80150d6:	607a      	str	r2, [r7, #4]
 80150d8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80150da:	e03e      	b.n	801515a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80150dc:	68bb      	ldr	r3, [r7, #8]
 80150de:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80150e0:	68bb      	ldr	r3, [r7, #8]
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80150e6:	697b      	ldr	r3, [r7, #20]
 80150e8:	685b      	ldr	r3, [r3, #4]
 80150ea:	4618      	mov	r0, r3
 80150ec:	f7fc fffa 	bl	80120e4 <pbuf_clen>
 80150f0:	4603      	mov	r3, r0
 80150f2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80150fa:	8a7a      	ldrh	r2, [r7, #18]
 80150fc:	429a      	cmp	r2, r3
 80150fe:	d906      	bls.n	801510e <tcp_free_acked_segments+0x42>
 8015100:	4b2a      	ldr	r3, [pc, #168]	@ (80151ac <tcp_free_acked_segments+0xe0>)
 8015102:	f240 4257 	movw	r2, #1111	@ 0x457
 8015106:	492a      	ldr	r1, [pc, #168]	@ (80151b0 <tcp_free_acked_segments+0xe4>)
 8015108:	482a      	ldr	r0, [pc, #168]	@ (80151b4 <tcp_free_acked_segments+0xe8>)
 801510a:	f008 f95b 	bl	801d3c4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8015114:	8a7b      	ldrh	r3, [r7, #18]
 8015116:	1ad3      	subs	r3, r2, r3
 8015118:	b29a      	uxth	r2, r3
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8015120:	697b      	ldr	r3, [r7, #20]
 8015122:	891a      	ldrh	r2, [r3, #8]
 8015124:	4b24      	ldr	r3, [pc, #144]	@ (80151b8 <tcp_free_acked_segments+0xec>)
 8015126:	881b      	ldrh	r3, [r3, #0]
 8015128:	4413      	add	r3, r2
 801512a:	b29a      	uxth	r2, r3
 801512c:	4b22      	ldr	r3, [pc, #136]	@ (80151b8 <tcp_free_acked_segments+0xec>)
 801512e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8015130:	6978      	ldr	r0, [r7, #20]
 8015132:	f7fe f9da 	bl	80134ea <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801513c:	2b00      	cmp	r3, #0
 801513e:	d00c      	beq.n	801515a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8015140:	68bb      	ldr	r3, [r7, #8]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d109      	bne.n	801515a <tcp_free_acked_segments+0x8e>
 8015146:	683b      	ldr	r3, [r7, #0]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d106      	bne.n	801515a <tcp_free_acked_segments+0x8e>
 801514c:	4b17      	ldr	r3, [pc, #92]	@ (80151ac <tcp_free_acked_segments+0xe0>)
 801514e:	f240 4261 	movw	r2, #1121	@ 0x461
 8015152:	491a      	ldr	r1, [pc, #104]	@ (80151bc <tcp_free_acked_segments+0xf0>)
 8015154:	4817      	ldr	r0, [pc, #92]	@ (80151b4 <tcp_free_acked_segments+0xe8>)
 8015156:	f008 f935 	bl	801d3c4 <iprintf>
  while (seg_list != NULL &&
 801515a:	68bb      	ldr	r3, [r7, #8]
 801515c:	2b00      	cmp	r3, #0
 801515e:	d020      	beq.n	80151a2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8015160:	68bb      	ldr	r3, [r7, #8]
 8015162:	68db      	ldr	r3, [r3, #12]
 8015164:	685b      	ldr	r3, [r3, #4]
 8015166:	4618      	mov	r0, r3
 8015168:	f7fb fa8d 	bl	8010686 <lwip_htonl>
 801516c:	4604      	mov	r4, r0
 801516e:	68bb      	ldr	r3, [r7, #8]
 8015170:	891b      	ldrh	r3, [r3, #8]
 8015172:	461d      	mov	r5, r3
 8015174:	68bb      	ldr	r3, [r7, #8]
 8015176:	68db      	ldr	r3, [r3, #12]
 8015178:	899b      	ldrh	r3, [r3, #12]
 801517a:	b29b      	uxth	r3, r3
 801517c:	4618      	mov	r0, r3
 801517e:	f7fb fa6d 	bl	801065c <lwip_htons>
 8015182:	4603      	mov	r3, r0
 8015184:	b2db      	uxtb	r3, r3
 8015186:	f003 0303 	and.w	r3, r3, #3
 801518a:	2b00      	cmp	r3, #0
 801518c:	d001      	beq.n	8015192 <tcp_free_acked_segments+0xc6>
 801518e:	2301      	movs	r3, #1
 8015190:	e000      	b.n	8015194 <tcp_free_acked_segments+0xc8>
 8015192:	2300      	movs	r3, #0
 8015194:	442b      	add	r3, r5
 8015196:	18e2      	adds	r2, r4, r3
 8015198:	4b09      	ldr	r3, [pc, #36]	@ (80151c0 <tcp_free_acked_segments+0xf4>)
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801519e:	2b00      	cmp	r3, #0
 80151a0:	dd9c      	ble.n	80150dc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80151a2:	68bb      	ldr	r3, [r7, #8]
}
 80151a4:	4618      	mov	r0, r3
 80151a6:	3718      	adds	r7, #24
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bdb0      	pop	{r4, r5, r7, pc}
 80151ac:	080208d4 	.word	0x080208d4
 80151b0:	08020bbc 	.word	0x08020bbc
 80151b4:	08020920 	.word	0x08020920
 80151b8:	2400cc74 	.word	0x2400cc74
 80151bc:	08020be4 	.word	0x08020be4
 80151c0:	2400cc70 	.word	0x2400cc70

080151c4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80151c4:	b5b0      	push	{r4, r5, r7, lr}
 80151c6:	b094      	sub	sp, #80	@ 0x50
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80151cc:	2300      	movs	r3, #0
 80151ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d106      	bne.n	80151e4 <tcp_receive+0x20>
 80151d6:	4b91      	ldr	r3, [pc, #580]	@ (801541c <tcp_receive+0x258>)
 80151d8:	f240 427b 	movw	r2, #1147	@ 0x47b
 80151dc:	4990      	ldr	r1, [pc, #576]	@ (8015420 <tcp_receive+0x25c>)
 80151de:	4891      	ldr	r0, [pc, #580]	@ (8015424 <tcp_receive+0x260>)
 80151e0:	f008 f8f0 	bl	801d3c4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	7d1b      	ldrb	r3, [r3, #20]
 80151e8:	2b03      	cmp	r3, #3
 80151ea:	d806      	bhi.n	80151fa <tcp_receive+0x36>
 80151ec:	4b8b      	ldr	r3, [pc, #556]	@ (801541c <tcp_receive+0x258>)
 80151ee:	f240 427c 	movw	r2, #1148	@ 0x47c
 80151f2:	498d      	ldr	r1, [pc, #564]	@ (8015428 <tcp_receive+0x264>)
 80151f4:	488b      	ldr	r0, [pc, #556]	@ (8015424 <tcp_receive+0x260>)
 80151f6:	f008 f8e5 	bl	801d3c4 <iprintf>

  if (flags & TCP_ACK) {
 80151fa:	4b8c      	ldr	r3, [pc, #560]	@ (801542c <tcp_receive+0x268>)
 80151fc:	781b      	ldrb	r3, [r3, #0]
 80151fe:	f003 0310 	and.w	r3, r3, #16
 8015202:	2b00      	cmp	r3, #0
 8015204:	f000 8264 	beq.w	80156d0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801520e:	461a      	mov	r2, r3
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015214:	4413      	add	r3, r2
 8015216:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801521c:	4b84      	ldr	r3, [pc, #528]	@ (8015430 <tcp_receive+0x26c>)
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	1ad3      	subs	r3, r2, r3
 8015222:	2b00      	cmp	r3, #0
 8015224:	db1b      	blt.n	801525e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801522a:	4b81      	ldr	r3, [pc, #516]	@ (8015430 <tcp_receive+0x26c>)
 801522c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801522e:	429a      	cmp	r2, r3
 8015230:	d106      	bne.n	8015240 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015236:	4b7f      	ldr	r3, [pc, #508]	@ (8015434 <tcp_receive+0x270>)
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	1ad3      	subs	r3, r2, r3
 801523c:	2b00      	cmp	r3, #0
 801523e:	db0e      	blt.n	801525e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015244:	4b7b      	ldr	r3, [pc, #492]	@ (8015434 <tcp_receive+0x270>)
 8015246:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015248:	429a      	cmp	r2, r3
 801524a:	d125      	bne.n	8015298 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801524c:	4b7a      	ldr	r3, [pc, #488]	@ (8015438 <tcp_receive+0x274>)
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	89db      	ldrh	r3, [r3, #14]
 8015252:	b29a      	uxth	r2, r3
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801525a:	429a      	cmp	r2, r3
 801525c:	d91c      	bls.n	8015298 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801525e:	4b76      	ldr	r3, [pc, #472]	@ (8015438 <tcp_receive+0x274>)
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	89db      	ldrh	r3, [r3, #14]
 8015264:	b29a      	uxth	r2, r3
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015278:	429a      	cmp	r2, r3
 801527a:	d205      	bcs.n	8015288 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8015288:	4b69      	ldr	r3, [pc, #420]	@ (8015430 <tcp_receive+0x26c>)
 801528a:	681a      	ldr	r2, [r3, #0]
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8015290:	4b68      	ldr	r3, [pc, #416]	@ (8015434 <tcp_receive+0x270>)
 8015292:	681a      	ldr	r2, [r3, #0]
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8015298:	4b66      	ldr	r3, [pc, #408]	@ (8015434 <tcp_receive+0x270>)
 801529a:	681a      	ldr	r2, [r3, #0]
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80152a0:	1ad3      	subs	r3, r2, r3
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	dc58      	bgt.n	8015358 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80152a6:	4b65      	ldr	r3, [pc, #404]	@ (801543c <tcp_receive+0x278>)
 80152a8:	881b      	ldrh	r3, [r3, #0]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d14b      	bne.n	8015346 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80152b2:	687a      	ldr	r2, [r7, #4]
 80152b4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80152b8:	4413      	add	r3, r2
 80152ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80152bc:	429a      	cmp	r2, r3
 80152be:	d142      	bne.n	8015346 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	db3d      	blt.n	8015346 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80152ce:	4b59      	ldr	r3, [pc, #356]	@ (8015434 <tcp_receive+0x270>)
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	429a      	cmp	r2, r3
 80152d4:	d137      	bne.n	8015346 <tcp_receive+0x182>
              found_dupack = 1;
 80152d6:	2301      	movs	r3, #1
 80152d8:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80152e0:	2bff      	cmp	r3, #255	@ 0xff
 80152e2:	d007      	beq.n	80152f4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80152ea:	3301      	adds	r3, #1
 80152ec:	b2da      	uxtb	r2, r3
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80152fa:	2b03      	cmp	r3, #3
 80152fc:	d91b      	bls.n	8015336 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015308:	4413      	add	r3, r2
 801530a:	b29a      	uxth	r2, r3
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015312:	429a      	cmp	r2, r3
 8015314:	d30a      	bcc.n	801532c <tcp_receive+0x168>
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015320:	4413      	add	r3, r2
 8015322:	b29a      	uxth	r2, r3
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801532a:	e004      	b.n	8015336 <tcp_receive+0x172>
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015332:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801533c:	2b02      	cmp	r3, #2
 801533e:	d902      	bls.n	8015346 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015340:	6878      	ldr	r0, [r7, #4]
 8015342:	f001 fee7 	bl	8017114 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8015346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015348:	2b00      	cmp	r3, #0
 801534a:	f040 8161 	bne.w	8015610 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	2200      	movs	r2, #0
 8015352:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015356:	e15b      	b.n	8015610 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015358:	4b36      	ldr	r3, [pc, #216]	@ (8015434 <tcp_receive+0x270>)
 801535a:	681a      	ldr	r2, [r3, #0]
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015360:	1ad3      	subs	r3, r2, r3
 8015362:	3b01      	subs	r3, #1
 8015364:	2b00      	cmp	r3, #0
 8015366:	f2c0 814e 	blt.w	8015606 <tcp_receive+0x442>
 801536a:	4b32      	ldr	r3, [pc, #200]	@ (8015434 <tcp_receive+0x270>)
 801536c:	681a      	ldr	r2, [r3, #0]
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015372:	1ad3      	subs	r3, r2, r3
 8015374:	2b00      	cmp	r3, #0
 8015376:	f300 8146 	bgt.w	8015606 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	8b5b      	ldrh	r3, [r3, #26]
 801537e:	f003 0304 	and.w	r3, r3, #4
 8015382:	2b00      	cmp	r3, #0
 8015384:	d010      	beq.n	80153a8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	8b5b      	ldrh	r3, [r3, #26]
 801538a:	f023 0304 	bic.w	r3, r3, #4
 801538e:	b29a      	uxth	r2, r3
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	2200      	movs	r2, #0
 80153a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	2200      	movs	r2, #0
 80153ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80153b6:	10db      	asrs	r3, r3, #3
 80153b8:	b21b      	sxth	r3, r3
 80153ba:	b29a      	uxth	r2, r3
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80153c2:	b29b      	uxth	r3, r3
 80153c4:	4413      	add	r3, r2
 80153c6:	b29b      	uxth	r3, r3
 80153c8:	b21a      	sxth	r2, r3
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80153d0:	4b18      	ldr	r3, [pc, #96]	@ (8015434 <tcp_receive+0x270>)
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	b29a      	uxth	r2, r3
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80153da:	b29b      	uxth	r3, r3
 80153dc:	1ad3      	subs	r3, r2, r3
 80153de:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	2200      	movs	r2, #0
 80153e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80153e8:	4b12      	ldr	r3, [pc, #72]	@ (8015434 <tcp_receive+0x270>)
 80153ea:	681a      	ldr	r2, [r3, #0]
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	7d1b      	ldrb	r3, [r3, #20]
 80153f4:	2b03      	cmp	r3, #3
 80153f6:	f240 8097 	bls.w	8015528 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8015406:	429a      	cmp	r2, r3
 8015408:	d245      	bcs.n	8015496 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	8b5b      	ldrh	r3, [r3, #26]
 801540e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015412:	2b00      	cmp	r3, #0
 8015414:	d014      	beq.n	8015440 <tcp_receive+0x27c>
 8015416:	2301      	movs	r3, #1
 8015418:	e013      	b.n	8015442 <tcp_receive+0x27e>
 801541a:	bf00      	nop
 801541c:	080208d4 	.word	0x080208d4
 8015420:	08020c04 	.word	0x08020c04
 8015424:	08020920 	.word	0x08020920
 8015428:	08020c20 	.word	0x08020c20
 801542c:	2400cc78 	.word	0x2400cc78
 8015430:	2400cc6c 	.word	0x2400cc6c
 8015434:	2400cc70 	.word	0x2400cc70
 8015438:	2400cc5c 	.word	0x2400cc5c
 801543c:	2400cc76 	.word	0x2400cc76
 8015440:	2302      	movs	r3, #2
 8015442:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015446:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801544a:	b29a      	uxth	r2, r3
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015450:	fb12 f303 	smulbb	r3, r2, r3
 8015454:	b29b      	uxth	r3, r3
 8015456:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8015458:	4293      	cmp	r3, r2
 801545a:	bf28      	it	cs
 801545c:	4613      	movcs	r3, r2
 801545e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015466:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015468:	4413      	add	r3, r2
 801546a:	b29a      	uxth	r2, r3
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015472:	429a      	cmp	r2, r3
 8015474:	d309      	bcc.n	801548a <tcp_receive+0x2c6>
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801547c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801547e:	4413      	add	r3, r2
 8015480:	b29a      	uxth	r2, r3
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015488:	e04e      	b.n	8015528 <tcp_receive+0x364>
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015490:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015494:	e048      	b.n	8015528 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801549c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801549e:	4413      	add	r3, r2
 80154a0:	b29a      	uxth	r2, r3
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80154a8:	429a      	cmp	r2, r3
 80154aa:	d309      	bcc.n	80154c0 <tcp_receive+0x2fc>
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80154b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80154b4:	4413      	add	r3, r2
 80154b6:	b29a      	uxth	r2, r3
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80154be:	e004      	b.n	80154ca <tcp_receive+0x306>
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80154c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80154d6:	429a      	cmp	r2, r3
 80154d8:	d326      	bcc.n	8015528 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80154e6:	1ad3      	subs	r3, r2, r3
 80154e8:	b29a      	uxth	r2, r3
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80154fa:	4413      	add	r3, r2
 80154fc:	b29a      	uxth	r2, r3
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015504:	429a      	cmp	r2, r3
 8015506:	d30a      	bcc.n	801551e <tcp_receive+0x35a>
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015512:	4413      	add	r3, r2
 8015514:	b29a      	uxth	r2, r3
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801551c:	e004      	b.n	8015528 <tcp_receive+0x364>
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015524:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015530:	4a98      	ldr	r2, [pc, #608]	@ (8015794 <tcp_receive+0x5d0>)
 8015532:	6878      	ldr	r0, [r7, #4]
 8015534:	f7ff fdca 	bl	80150cc <tcp_free_acked_segments>
 8015538:	4602      	mov	r2, r0
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015546:	4a94      	ldr	r2, [pc, #592]	@ (8015798 <tcp_receive+0x5d4>)
 8015548:	6878      	ldr	r0, [r7, #4]
 801554a:	f7ff fdbf 	bl	80150cc <tcp_free_acked_segments>
 801554e:	4602      	mov	r2, r0
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015558:	2b00      	cmp	r3, #0
 801555a:	d104      	bne.n	8015566 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015562:	861a      	strh	r2, [r3, #48]	@ 0x30
 8015564:	e002      	b.n	801556c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	2200      	movs	r2, #0
 801556a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	2200      	movs	r2, #0
 8015570:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015576:	2b00      	cmp	r3, #0
 8015578:	d103      	bne.n	8015582 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	2200      	movs	r2, #0
 801557e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8015588:	4b84      	ldr	r3, [pc, #528]	@ (801579c <tcp_receive+0x5d8>)
 801558a:	881b      	ldrh	r3, [r3, #0]
 801558c:	4413      	add	r3, r2
 801558e:	b29a      	uxth	r2, r3
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	8b5b      	ldrh	r3, [r3, #26]
 801559a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d035      	beq.n	801560e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d118      	bne.n	80155dc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d00c      	beq.n	80155cc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80155ba:	68db      	ldr	r3, [r3, #12]
 80155bc:	685b      	ldr	r3, [r3, #4]
 80155be:	4618      	mov	r0, r3
 80155c0:	f7fb f861 	bl	8010686 <lwip_htonl>
 80155c4:	4603      	mov	r3, r0
 80155c6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	dc20      	bgt.n	801560e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	8b5b      	ldrh	r3, [r3, #26]
 80155d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80155d4:	b29a      	uxth	r2, r3
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80155da:	e018      	b.n	801560e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80155e4:	68db      	ldr	r3, [r3, #12]
 80155e6:	685b      	ldr	r3, [r3, #4]
 80155e8:	4618      	mov	r0, r3
 80155ea:	f7fb f84c 	bl	8010686 <lwip_htonl>
 80155ee:	4603      	mov	r3, r0
 80155f0:	1ae3      	subs	r3, r4, r3
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	dc0b      	bgt.n	801560e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	8b5b      	ldrh	r3, [r3, #26]
 80155fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80155fe:	b29a      	uxth	r2, r3
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015604:	e003      	b.n	801560e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015606:	6878      	ldr	r0, [r7, #4]
 8015608:	f001 ff70 	bl	80174ec <tcp_send_empty_ack>
 801560c:	e000      	b.n	8015610 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801560e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015614:	2b00      	cmp	r3, #0
 8015616:	d05b      	beq.n	80156d0 <tcp_receive+0x50c>
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801561c:	4b60      	ldr	r3, [pc, #384]	@ (80157a0 <tcp_receive+0x5dc>)
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	1ad3      	subs	r3, r2, r3
 8015622:	2b00      	cmp	r3, #0
 8015624:	da54      	bge.n	80156d0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015626:	4b5f      	ldr	r3, [pc, #380]	@ (80157a4 <tcp_receive+0x5e0>)
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	b29a      	uxth	r2, r3
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015630:	b29b      	uxth	r3, r3
 8015632:	1ad3      	subs	r3, r2, r3
 8015634:	b29b      	uxth	r3, r3
 8015636:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801563a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015644:	10db      	asrs	r3, r3, #3
 8015646:	b21b      	sxth	r3, r3
 8015648:	b29b      	uxth	r3, r3
 801564a:	1ad3      	subs	r3, r2, r3
 801564c:	b29b      	uxth	r3, r3
 801564e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015658:	b29a      	uxth	r2, r3
 801565a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801565e:	4413      	add	r3, r2
 8015660:	b29b      	uxth	r3, r3
 8015662:	b21a      	sxth	r2, r3
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8015668:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801566c:	2b00      	cmp	r3, #0
 801566e:	da05      	bge.n	801567c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8015670:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015674:	425b      	negs	r3, r3
 8015676:	b29b      	uxth	r3, r3
 8015678:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801567c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015686:	109b      	asrs	r3, r3, #2
 8015688:	b21b      	sxth	r3, r3
 801568a:	b29b      	uxth	r3, r3
 801568c:	1ad3      	subs	r3, r2, r3
 801568e:	b29b      	uxth	r3, r3
 8015690:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801569a:	b29a      	uxth	r2, r3
 801569c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80156a0:	4413      	add	r3, r2
 80156a2:	b29b      	uxth	r3, r3
 80156a4:	b21a      	sxth	r2, r3
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80156b0:	10db      	asrs	r3, r3, #3
 80156b2:	b21b      	sxth	r3, r3
 80156b4:	b29a      	uxth	r2, r3
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80156bc:	b29b      	uxth	r3, r3
 80156be:	4413      	add	r3, r2
 80156c0:	b29b      	uxth	r3, r3
 80156c2:	b21a      	sxth	r2, r3
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	2200      	movs	r2, #0
 80156ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80156d0:	4b35      	ldr	r3, [pc, #212]	@ (80157a8 <tcp_receive+0x5e4>)
 80156d2:	881b      	ldrh	r3, [r3, #0]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	f000 84df 	beq.w	8016098 <tcp_receive+0xed4>
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	7d1b      	ldrb	r3, [r3, #20]
 80156de:	2b06      	cmp	r3, #6
 80156e0:	f200 84da 	bhi.w	8016098 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80156e8:	4b30      	ldr	r3, [pc, #192]	@ (80157ac <tcp_receive+0x5e8>)
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	1ad3      	subs	r3, r2, r3
 80156ee:	3b01      	subs	r3, #1
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	f2c0 808f 	blt.w	8015814 <tcp_receive+0x650>
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80156fa:	4b2b      	ldr	r3, [pc, #172]	@ (80157a8 <tcp_receive+0x5e4>)
 80156fc:	881b      	ldrh	r3, [r3, #0]
 80156fe:	4619      	mov	r1, r3
 8015700:	4b2a      	ldr	r3, [pc, #168]	@ (80157ac <tcp_receive+0x5e8>)
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	440b      	add	r3, r1
 8015706:	1ad3      	subs	r3, r2, r3
 8015708:	3301      	adds	r3, #1
 801570a:	2b00      	cmp	r3, #0
 801570c:	f300 8082 	bgt.w	8015814 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015710:	4b27      	ldr	r3, [pc, #156]	@ (80157b0 <tcp_receive+0x5ec>)
 8015712:	685b      	ldr	r3, [r3, #4]
 8015714:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801571a:	4b24      	ldr	r3, [pc, #144]	@ (80157ac <tcp_receive+0x5e8>)
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	1ad3      	subs	r3, r2, r3
 8015720:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015722:	4b23      	ldr	r3, [pc, #140]	@ (80157b0 <tcp_receive+0x5ec>)
 8015724:	685b      	ldr	r3, [r3, #4]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d106      	bne.n	8015738 <tcp_receive+0x574>
 801572a:	4b22      	ldr	r3, [pc, #136]	@ (80157b4 <tcp_receive+0x5f0>)
 801572c:	f240 5294 	movw	r2, #1428	@ 0x594
 8015730:	4921      	ldr	r1, [pc, #132]	@ (80157b8 <tcp_receive+0x5f4>)
 8015732:	4822      	ldr	r0, [pc, #136]	@ (80157bc <tcp_receive+0x5f8>)
 8015734:	f007 fe46 	bl	801d3c4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801573a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801573e:	4293      	cmp	r3, r2
 8015740:	d906      	bls.n	8015750 <tcp_receive+0x58c>
 8015742:	4b1c      	ldr	r3, [pc, #112]	@ (80157b4 <tcp_receive+0x5f0>)
 8015744:	f240 5295 	movw	r2, #1429	@ 0x595
 8015748:	491d      	ldr	r1, [pc, #116]	@ (80157c0 <tcp_receive+0x5fc>)
 801574a:	481c      	ldr	r0, [pc, #112]	@ (80157bc <tcp_receive+0x5f8>)
 801574c:	f007 fe3a 	bl	801d3c4 <iprintf>
      off = (u16_t)off32;
 8015750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015752:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015756:	4b16      	ldr	r3, [pc, #88]	@ (80157b0 <tcp_receive+0x5ec>)
 8015758:	685b      	ldr	r3, [r3, #4]
 801575a:	891b      	ldrh	r3, [r3, #8]
 801575c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015760:	429a      	cmp	r2, r3
 8015762:	d906      	bls.n	8015772 <tcp_receive+0x5ae>
 8015764:	4b13      	ldr	r3, [pc, #76]	@ (80157b4 <tcp_receive+0x5f0>)
 8015766:	f240 5297 	movw	r2, #1431	@ 0x597
 801576a:	4916      	ldr	r1, [pc, #88]	@ (80157c4 <tcp_receive+0x600>)
 801576c:	4813      	ldr	r0, [pc, #76]	@ (80157bc <tcp_receive+0x5f8>)
 801576e:	f007 fe29 	bl	801d3c4 <iprintf>
      inseg.len -= off;
 8015772:	4b0f      	ldr	r3, [pc, #60]	@ (80157b0 <tcp_receive+0x5ec>)
 8015774:	891a      	ldrh	r2, [r3, #8]
 8015776:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801577a:	1ad3      	subs	r3, r2, r3
 801577c:	b29a      	uxth	r2, r3
 801577e:	4b0c      	ldr	r3, [pc, #48]	@ (80157b0 <tcp_receive+0x5ec>)
 8015780:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015782:	4b0b      	ldr	r3, [pc, #44]	@ (80157b0 <tcp_receive+0x5ec>)
 8015784:	685b      	ldr	r3, [r3, #4]
 8015786:	891a      	ldrh	r2, [r3, #8]
 8015788:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801578c:	1ad3      	subs	r3, r2, r3
 801578e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8015790:	e02a      	b.n	80157e8 <tcp_receive+0x624>
 8015792:	bf00      	nop
 8015794:	08020c3c 	.word	0x08020c3c
 8015798:	08020c44 	.word	0x08020c44
 801579c:	2400cc74 	.word	0x2400cc74
 80157a0:	2400cc70 	.word	0x2400cc70
 80157a4:	2400cc34 	.word	0x2400cc34
 80157a8:	2400cc76 	.word	0x2400cc76
 80157ac:	2400cc6c 	.word	0x2400cc6c
 80157b0:	2400cc4c 	.word	0x2400cc4c
 80157b4:	080208d4 	.word	0x080208d4
 80157b8:	08020c4c 	.word	0x08020c4c
 80157bc:	08020920 	.word	0x08020920
 80157c0:	08020c5c 	.word	0x08020c5c
 80157c4:	08020c6c 	.word	0x08020c6c
        off -= p->len;
 80157c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80157ca:	895b      	ldrh	r3, [r3, #10]
 80157cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80157d0:	1ad3      	subs	r3, r2, r3
 80157d2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80157d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80157d8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80157da:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80157dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80157de:	2200      	movs	r2, #0
 80157e0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80157e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80157e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80157ea:	895b      	ldrh	r3, [r3, #10]
 80157ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80157f0:	429a      	cmp	r2, r3
 80157f2:	d8e9      	bhi.n	80157c8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80157f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80157f8:	4619      	mov	r1, r3
 80157fa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80157fc:	f7fc fb5e 	bl	8011ebc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015804:	4a90      	ldr	r2, [pc, #576]	@ (8015a48 <tcp_receive+0x884>)
 8015806:	6013      	str	r3, [r2, #0]
 8015808:	4b90      	ldr	r3, [pc, #576]	@ (8015a4c <tcp_receive+0x888>)
 801580a:	68db      	ldr	r3, [r3, #12]
 801580c:	4a8e      	ldr	r2, [pc, #568]	@ (8015a48 <tcp_receive+0x884>)
 801580e:	6812      	ldr	r2, [r2, #0]
 8015810:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015812:	e00d      	b.n	8015830 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015814:	4b8c      	ldr	r3, [pc, #560]	@ (8015a48 <tcp_receive+0x884>)
 8015816:	681a      	ldr	r2, [r3, #0]
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801581c:	1ad3      	subs	r3, r2, r3
 801581e:	2b00      	cmp	r3, #0
 8015820:	da06      	bge.n	8015830 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	8b5b      	ldrh	r3, [r3, #26]
 8015826:	f043 0302 	orr.w	r3, r3, #2
 801582a:	b29a      	uxth	r2, r3
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015830:	4b85      	ldr	r3, [pc, #532]	@ (8015a48 <tcp_receive+0x884>)
 8015832:	681a      	ldr	r2, [r3, #0]
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015838:	1ad3      	subs	r3, r2, r3
 801583a:	2b00      	cmp	r3, #0
 801583c:	f2c0 8427 	blt.w	801608e <tcp_receive+0xeca>
 8015840:	4b81      	ldr	r3, [pc, #516]	@ (8015a48 <tcp_receive+0x884>)
 8015842:	681a      	ldr	r2, [r3, #0]
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015848:	6879      	ldr	r1, [r7, #4]
 801584a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801584c:	440b      	add	r3, r1
 801584e:	1ad3      	subs	r3, r2, r3
 8015850:	3301      	adds	r3, #1
 8015852:	2b00      	cmp	r3, #0
 8015854:	f300 841b 	bgt.w	801608e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801585c:	4b7a      	ldr	r3, [pc, #488]	@ (8015a48 <tcp_receive+0x884>)
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	429a      	cmp	r2, r3
 8015862:	f040 8298 	bne.w	8015d96 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8015866:	4b79      	ldr	r3, [pc, #484]	@ (8015a4c <tcp_receive+0x888>)
 8015868:	891c      	ldrh	r4, [r3, #8]
 801586a:	4b78      	ldr	r3, [pc, #480]	@ (8015a4c <tcp_receive+0x888>)
 801586c:	68db      	ldr	r3, [r3, #12]
 801586e:	899b      	ldrh	r3, [r3, #12]
 8015870:	b29b      	uxth	r3, r3
 8015872:	4618      	mov	r0, r3
 8015874:	f7fa fef2 	bl	801065c <lwip_htons>
 8015878:	4603      	mov	r3, r0
 801587a:	b2db      	uxtb	r3, r3
 801587c:	f003 0303 	and.w	r3, r3, #3
 8015880:	2b00      	cmp	r3, #0
 8015882:	d001      	beq.n	8015888 <tcp_receive+0x6c4>
 8015884:	2301      	movs	r3, #1
 8015886:	e000      	b.n	801588a <tcp_receive+0x6c6>
 8015888:	2300      	movs	r3, #0
 801588a:	4423      	add	r3, r4
 801588c:	b29a      	uxth	r2, r3
 801588e:	4b70      	ldr	r3, [pc, #448]	@ (8015a50 <tcp_receive+0x88c>)
 8015890:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015896:	4b6e      	ldr	r3, [pc, #440]	@ (8015a50 <tcp_receive+0x88c>)
 8015898:	881b      	ldrh	r3, [r3, #0]
 801589a:	429a      	cmp	r2, r3
 801589c:	d274      	bcs.n	8015988 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801589e:	4b6b      	ldr	r3, [pc, #428]	@ (8015a4c <tcp_receive+0x888>)
 80158a0:	68db      	ldr	r3, [r3, #12]
 80158a2:	899b      	ldrh	r3, [r3, #12]
 80158a4:	b29b      	uxth	r3, r3
 80158a6:	4618      	mov	r0, r3
 80158a8:	f7fa fed8 	bl	801065c <lwip_htons>
 80158ac:	4603      	mov	r3, r0
 80158ae:	b2db      	uxtb	r3, r3
 80158b0:	f003 0301 	and.w	r3, r3, #1
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d01e      	beq.n	80158f6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80158b8:	4b64      	ldr	r3, [pc, #400]	@ (8015a4c <tcp_receive+0x888>)
 80158ba:	68db      	ldr	r3, [r3, #12]
 80158bc:	899b      	ldrh	r3, [r3, #12]
 80158be:	b29b      	uxth	r3, r3
 80158c0:	b21b      	sxth	r3, r3
 80158c2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80158c6:	b21c      	sxth	r4, r3
 80158c8:	4b60      	ldr	r3, [pc, #384]	@ (8015a4c <tcp_receive+0x888>)
 80158ca:	68db      	ldr	r3, [r3, #12]
 80158cc:	899b      	ldrh	r3, [r3, #12]
 80158ce:	b29b      	uxth	r3, r3
 80158d0:	4618      	mov	r0, r3
 80158d2:	f7fa fec3 	bl	801065c <lwip_htons>
 80158d6:	4603      	mov	r3, r0
 80158d8:	b2db      	uxtb	r3, r3
 80158da:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80158de:	b29b      	uxth	r3, r3
 80158e0:	4618      	mov	r0, r3
 80158e2:	f7fa febb 	bl	801065c <lwip_htons>
 80158e6:	4603      	mov	r3, r0
 80158e8:	b21b      	sxth	r3, r3
 80158ea:	4323      	orrs	r3, r4
 80158ec:	b21a      	sxth	r2, r3
 80158ee:	4b57      	ldr	r3, [pc, #348]	@ (8015a4c <tcp_receive+0x888>)
 80158f0:	68db      	ldr	r3, [r3, #12]
 80158f2:	b292      	uxth	r2, r2
 80158f4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80158fa:	4b54      	ldr	r3, [pc, #336]	@ (8015a4c <tcp_receive+0x888>)
 80158fc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80158fe:	4b53      	ldr	r3, [pc, #332]	@ (8015a4c <tcp_receive+0x888>)
 8015900:	68db      	ldr	r3, [r3, #12]
 8015902:	899b      	ldrh	r3, [r3, #12]
 8015904:	b29b      	uxth	r3, r3
 8015906:	4618      	mov	r0, r3
 8015908:	f7fa fea8 	bl	801065c <lwip_htons>
 801590c:	4603      	mov	r3, r0
 801590e:	b2db      	uxtb	r3, r3
 8015910:	f003 0302 	and.w	r3, r3, #2
 8015914:	2b00      	cmp	r3, #0
 8015916:	d005      	beq.n	8015924 <tcp_receive+0x760>
            inseg.len -= 1;
 8015918:	4b4c      	ldr	r3, [pc, #304]	@ (8015a4c <tcp_receive+0x888>)
 801591a:	891b      	ldrh	r3, [r3, #8]
 801591c:	3b01      	subs	r3, #1
 801591e:	b29a      	uxth	r2, r3
 8015920:	4b4a      	ldr	r3, [pc, #296]	@ (8015a4c <tcp_receive+0x888>)
 8015922:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015924:	4b49      	ldr	r3, [pc, #292]	@ (8015a4c <tcp_receive+0x888>)
 8015926:	685b      	ldr	r3, [r3, #4]
 8015928:	4a48      	ldr	r2, [pc, #288]	@ (8015a4c <tcp_receive+0x888>)
 801592a:	8912      	ldrh	r2, [r2, #8]
 801592c:	4611      	mov	r1, r2
 801592e:	4618      	mov	r0, r3
 8015930:	f7fc f9c4 	bl	8011cbc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015934:	4b45      	ldr	r3, [pc, #276]	@ (8015a4c <tcp_receive+0x888>)
 8015936:	891c      	ldrh	r4, [r3, #8]
 8015938:	4b44      	ldr	r3, [pc, #272]	@ (8015a4c <tcp_receive+0x888>)
 801593a:	68db      	ldr	r3, [r3, #12]
 801593c:	899b      	ldrh	r3, [r3, #12]
 801593e:	b29b      	uxth	r3, r3
 8015940:	4618      	mov	r0, r3
 8015942:	f7fa fe8b 	bl	801065c <lwip_htons>
 8015946:	4603      	mov	r3, r0
 8015948:	b2db      	uxtb	r3, r3
 801594a:	f003 0303 	and.w	r3, r3, #3
 801594e:	2b00      	cmp	r3, #0
 8015950:	d001      	beq.n	8015956 <tcp_receive+0x792>
 8015952:	2301      	movs	r3, #1
 8015954:	e000      	b.n	8015958 <tcp_receive+0x794>
 8015956:	2300      	movs	r3, #0
 8015958:	4423      	add	r3, r4
 801595a:	b29a      	uxth	r2, r3
 801595c:	4b3c      	ldr	r3, [pc, #240]	@ (8015a50 <tcp_receive+0x88c>)
 801595e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015960:	4b3b      	ldr	r3, [pc, #236]	@ (8015a50 <tcp_receive+0x88c>)
 8015962:	881b      	ldrh	r3, [r3, #0]
 8015964:	461a      	mov	r2, r3
 8015966:	4b38      	ldr	r3, [pc, #224]	@ (8015a48 <tcp_receive+0x884>)
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	441a      	add	r2, r3
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015970:	6879      	ldr	r1, [r7, #4]
 8015972:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015974:	440b      	add	r3, r1
 8015976:	429a      	cmp	r2, r3
 8015978:	d006      	beq.n	8015988 <tcp_receive+0x7c4>
 801597a:	4b36      	ldr	r3, [pc, #216]	@ (8015a54 <tcp_receive+0x890>)
 801597c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8015980:	4935      	ldr	r1, [pc, #212]	@ (8015a58 <tcp_receive+0x894>)
 8015982:	4836      	ldr	r0, [pc, #216]	@ (8015a5c <tcp_receive+0x898>)
 8015984:	f007 fd1e 	bl	801d3c4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801598c:	2b00      	cmp	r3, #0
 801598e:	f000 80e6 	beq.w	8015b5e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015992:	4b2e      	ldr	r3, [pc, #184]	@ (8015a4c <tcp_receive+0x888>)
 8015994:	68db      	ldr	r3, [r3, #12]
 8015996:	899b      	ldrh	r3, [r3, #12]
 8015998:	b29b      	uxth	r3, r3
 801599a:	4618      	mov	r0, r3
 801599c:	f7fa fe5e 	bl	801065c <lwip_htons>
 80159a0:	4603      	mov	r3, r0
 80159a2:	b2db      	uxtb	r3, r3
 80159a4:	f003 0301 	and.w	r3, r3, #1
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d010      	beq.n	80159ce <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80159ac:	e00a      	b.n	80159c4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80159b2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80159b8:	681a      	ldr	r2, [r3, #0]
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80159be:	68f8      	ldr	r0, [r7, #12]
 80159c0:	f7fd fd93 	bl	80134ea <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d1f0      	bne.n	80159ae <tcp_receive+0x7ea>
 80159cc:	e0c7      	b.n	8015b5e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80159d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80159d4:	e051      	b.n	8015a7a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80159d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80159d8:	68db      	ldr	r3, [r3, #12]
 80159da:	899b      	ldrh	r3, [r3, #12]
 80159dc:	b29b      	uxth	r3, r3
 80159de:	4618      	mov	r0, r3
 80159e0:	f7fa fe3c 	bl	801065c <lwip_htons>
 80159e4:	4603      	mov	r3, r0
 80159e6:	b2db      	uxtb	r3, r3
 80159e8:	f003 0301 	and.w	r3, r3, #1
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d03c      	beq.n	8015a6a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80159f0:	4b16      	ldr	r3, [pc, #88]	@ (8015a4c <tcp_receive+0x888>)
 80159f2:	68db      	ldr	r3, [r3, #12]
 80159f4:	899b      	ldrh	r3, [r3, #12]
 80159f6:	b29b      	uxth	r3, r3
 80159f8:	4618      	mov	r0, r3
 80159fa:	f7fa fe2f 	bl	801065c <lwip_htons>
 80159fe:	4603      	mov	r3, r0
 8015a00:	b2db      	uxtb	r3, r3
 8015a02:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d12f      	bne.n	8015a6a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015a0a:	4b10      	ldr	r3, [pc, #64]	@ (8015a4c <tcp_receive+0x888>)
 8015a0c:	68db      	ldr	r3, [r3, #12]
 8015a0e:	899b      	ldrh	r3, [r3, #12]
 8015a10:	b29c      	uxth	r4, r3
 8015a12:	2001      	movs	r0, #1
 8015a14:	f7fa fe22 	bl	801065c <lwip_htons>
 8015a18:	4603      	mov	r3, r0
 8015a1a:	461a      	mov	r2, r3
 8015a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8015a4c <tcp_receive+0x888>)
 8015a1e:	68db      	ldr	r3, [r3, #12]
 8015a20:	4322      	orrs	r2, r4
 8015a22:	b292      	uxth	r2, r2
 8015a24:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015a26:	4b09      	ldr	r3, [pc, #36]	@ (8015a4c <tcp_receive+0x888>)
 8015a28:	891c      	ldrh	r4, [r3, #8]
 8015a2a:	4b08      	ldr	r3, [pc, #32]	@ (8015a4c <tcp_receive+0x888>)
 8015a2c:	68db      	ldr	r3, [r3, #12]
 8015a2e:	899b      	ldrh	r3, [r3, #12]
 8015a30:	b29b      	uxth	r3, r3
 8015a32:	4618      	mov	r0, r3
 8015a34:	f7fa fe12 	bl	801065c <lwip_htons>
 8015a38:	4603      	mov	r3, r0
 8015a3a:	b2db      	uxtb	r3, r3
 8015a3c:	f003 0303 	and.w	r3, r3, #3
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d00d      	beq.n	8015a60 <tcp_receive+0x89c>
 8015a44:	2301      	movs	r3, #1
 8015a46:	e00c      	b.n	8015a62 <tcp_receive+0x89e>
 8015a48:	2400cc6c 	.word	0x2400cc6c
 8015a4c:	2400cc4c 	.word	0x2400cc4c
 8015a50:	2400cc76 	.word	0x2400cc76
 8015a54:	080208d4 	.word	0x080208d4
 8015a58:	08020c7c 	.word	0x08020c7c
 8015a5c:	08020920 	.word	0x08020920
 8015a60:	2300      	movs	r3, #0
 8015a62:	4423      	add	r3, r4
 8015a64:	b29a      	uxth	r2, r3
 8015a66:	4b98      	ldr	r3, [pc, #608]	@ (8015cc8 <tcp_receive+0xb04>)
 8015a68:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8015a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a6c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8015a74:	6938      	ldr	r0, [r7, #16]
 8015a76:	f7fd fd38 	bl	80134ea <tcp_seg_free>
            while (next &&
 8015a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d00e      	beq.n	8015a9e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015a80:	4b91      	ldr	r3, [pc, #580]	@ (8015cc8 <tcp_receive+0xb04>)
 8015a82:	881b      	ldrh	r3, [r3, #0]
 8015a84:	461a      	mov	r2, r3
 8015a86:	4b91      	ldr	r3, [pc, #580]	@ (8015ccc <tcp_receive+0xb08>)
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	441a      	add	r2, r3
 8015a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a8e:	68db      	ldr	r3, [r3, #12]
 8015a90:	685b      	ldr	r3, [r3, #4]
 8015a92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015a94:	8909      	ldrh	r1, [r1, #8]
 8015a96:	440b      	add	r3, r1
 8015a98:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	da9b      	bge.n	80159d6 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015a9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d059      	beq.n	8015b58 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8015aa4:	4b88      	ldr	r3, [pc, #544]	@ (8015cc8 <tcp_receive+0xb04>)
 8015aa6:	881b      	ldrh	r3, [r3, #0]
 8015aa8:	461a      	mov	r2, r3
 8015aaa:	4b88      	ldr	r3, [pc, #544]	@ (8015ccc <tcp_receive+0xb08>)
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	441a      	add	r2, r3
 8015ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ab2:	68db      	ldr	r3, [r3, #12]
 8015ab4:	685b      	ldr	r3, [r3, #4]
 8015ab6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	dd4d      	ble.n	8015b58 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015abe:	68db      	ldr	r3, [r3, #12]
 8015ac0:	685b      	ldr	r3, [r3, #4]
 8015ac2:	b29a      	uxth	r2, r3
 8015ac4:	4b81      	ldr	r3, [pc, #516]	@ (8015ccc <tcp_receive+0xb08>)
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	b29b      	uxth	r3, r3
 8015aca:	1ad3      	subs	r3, r2, r3
 8015acc:	b29a      	uxth	r2, r3
 8015ace:	4b80      	ldr	r3, [pc, #512]	@ (8015cd0 <tcp_receive+0xb0c>)
 8015ad0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015ad2:	4b7f      	ldr	r3, [pc, #508]	@ (8015cd0 <tcp_receive+0xb0c>)
 8015ad4:	68db      	ldr	r3, [r3, #12]
 8015ad6:	899b      	ldrh	r3, [r3, #12]
 8015ad8:	b29b      	uxth	r3, r3
 8015ada:	4618      	mov	r0, r3
 8015adc:	f7fa fdbe 	bl	801065c <lwip_htons>
 8015ae0:	4603      	mov	r3, r0
 8015ae2:	b2db      	uxtb	r3, r3
 8015ae4:	f003 0302 	and.w	r3, r3, #2
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d005      	beq.n	8015af8 <tcp_receive+0x934>
                inseg.len -= 1;
 8015aec:	4b78      	ldr	r3, [pc, #480]	@ (8015cd0 <tcp_receive+0xb0c>)
 8015aee:	891b      	ldrh	r3, [r3, #8]
 8015af0:	3b01      	subs	r3, #1
 8015af2:	b29a      	uxth	r2, r3
 8015af4:	4b76      	ldr	r3, [pc, #472]	@ (8015cd0 <tcp_receive+0xb0c>)
 8015af6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015af8:	4b75      	ldr	r3, [pc, #468]	@ (8015cd0 <tcp_receive+0xb0c>)
 8015afa:	685b      	ldr	r3, [r3, #4]
 8015afc:	4a74      	ldr	r2, [pc, #464]	@ (8015cd0 <tcp_receive+0xb0c>)
 8015afe:	8912      	ldrh	r2, [r2, #8]
 8015b00:	4611      	mov	r1, r2
 8015b02:	4618      	mov	r0, r3
 8015b04:	f7fc f8da 	bl	8011cbc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015b08:	4b71      	ldr	r3, [pc, #452]	@ (8015cd0 <tcp_receive+0xb0c>)
 8015b0a:	891c      	ldrh	r4, [r3, #8]
 8015b0c:	4b70      	ldr	r3, [pc, #448]	@ (8015cd0 <tcp_receive+0xb0c>)
 8015b0e:	68db      	ldr	r3, [r3, #12]
 8015b10:	899b      	ldrh	r3, [r3, #12]
 8015b12:	b29b      	uxth	r3, r3
 8015b14:	4618      	mov	r0, r3
 8015b16:	f7fa fda1 	bl	801065c <lwip_htons>
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	b2db      	uxtb	r3, r3
 8015b1e:	f003 0303 	and.w	r3, r3, #3
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d001      	beq.n	8015b2a <tcp_receive+0x966>
 8015b26:	2301      	movs	r3, #1
 8015b28:	e000      	b.n	8015b2c <tcp_receive+0x968>
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	4423      	add	r3, r4
 8015b2e:	b29a      	uxth	r2, r3
 8015b30:	4b65      	ldr	r3, [pc, #404]	@ (8015cc8 <tcp_receive+0xb04>)
 8015b32:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015b34:	4b64      	ldr	r3, [pc, #400]	@ (8015cc8 <tcp_receive+0xb04>)
 8015b36:	881b      	ldrh	r3, [r3, #0]
 8015b38:	461a      	mov	r2, r3
 8015b3a:	4b64      	ldr	r3, [pc, #400]	@ (8015ccc <tcp_receive+0xb08>)
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	441a      	add	r2, r3
 8015b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015b42:	68db      	ldr	r3, [r3, #12]
 8015b44:	685b      	ldr	r3, [r3, #4]
 8015b46:	429a      	cmp	r2, r3
 8015b48:	d006      	beq.n	8015b58 <tcp_receive+0x994>
 8015b4a:	4b62      	ldr	r3, [pc, #392]	@ (8015cd4 <tcp_receive+0xb10>)
 8015b4c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8015b50:	4961      	ldr	r1, [pc, #388]	@ (8015cd8 <tcp_receive+0xb14>)
 8015b52:	4862      	ldr	r0, [pc, #392]	@ (8015cdc <tcp_receive+0xb18>)
 8015b54:	f007 fc36 	bl	801d3c4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015b5c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015b5e:	4b5a      	ldr	r3, [pc, #360]	@ (8015cc8 <tcp_receive+0xb04>)
 8015b60:	881b      	ldrh	r3, [r3, #0]
 8015b62:	461a      	mov	r2, r3
 8015b64:	4b59      	ldr	r3, [pc, #356]	@ (8015ccc <tcp_receive+0xb08>)
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	441a      	add	r2, r3
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015b72:	4b55      	ldr	r3, [pc, #340]	@ (8015cc8 <tcp_receive+0xb04>)
 8015b74:	881b      	ldrh	r3, [r3, #0]
 8015b76:	429a      	cmp	r2, r3
 8015b78:	d206      	bcs.n	8015b88 <tcp_receive+0x9c4>
 8015b7a:	4b56      	ldr	r3, [pc, #344]	@ (8015cd4 <tcp_receive+0xb10>)
 8015b7c:	f240 6207 	movw	r2, #1543	@ 0x607
 8015b80:	4957      	ldr	r1, [pc, #348]	@ (8015ce0 <tcp_receive+0xb1c>)
 8015b82:	4856      	ldr	r0, [pc, #344]	@ (8015cdc <tcp_receive+0xb18>)
 8015b84:	f007 fc1e 	bl	801d3c4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015b8c:	4b4e      	ldr	r3, [pc, #312]	@ (8015cc8 <tcp_receive+0xb04>)
 8015b8e:	881b      	ldrh	r3, [r3, #0]
 8015b90:	1ad3      	subs	r3, r2, r3
 8015b92:	b29a      	uxth	r2, r3
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015b98:	6878      	ldr	r0, [r7, #4]
 8015b9a:	f7fc ffc5 	bl	8012b28 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015b9e:	4b4c      	ldr	r3, [pc, #304]	@ (8015cd0 <tcp_receive+0xb0c>)
 8015ba0:	685b      	ldr	r3, [r3, #4]
 8015ba2:	891b      	ldrh	r3, [r3, #8]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d006      	beq.n	8015bb6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8015ba8:	4b49      	ldr	r3, [pc, #292]	@ (8015cd0 <tcp_receive+0xb0c>)
 8015baa:	685b      	ldr	r3, [r3, #4]
 8015bac:	4a4d      	ldr	r2, [pc, #308]	@ (8015ce4 <tcp_receive+0xb20>)
 8015bae:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015bb0:	4b47      	ldr	r3, [pc, #284]	@ (8015cd0 <tcp_receive+0xb0c>)
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015bb6:	4b46      	ldr	r3, [pc, #280]	@ (8015cd0 <tcp_receive+0xb0c>)
 8015bb8:	68db      	ldr	r3, [r3, #12]
 8015bba:	899b      	ldrh	r3, [r3, #12]
 8015bbc:	b29b      	uxth	r3, r3
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f7fa fd4c 	bl	801065c <lwip_htons>
 8015bc4:	4603      	mov	r3, r0
 8015bc6:	b2db      	uxtb	r3, r3
 8015bc8:	f003 0301 	and.w	r3, r3, #1
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	f000 80b8 	beq.w	8015d42 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8015bd2:	4b45      	ldr	r3, [pc, #276]	@ (8015ce8 <tcp_receive+0xb24>)
 8015bd4:	781b      	ldrb	r3, [r3, #0]
 8015bd6:	f043 0320 	orr.w	r3, r3, #32
 8015bda:	b2da      	uxtb	r2, r3
 8015bdc:	4b42      	ldr	r3, [pc, #264]	@ (8015ce8 <tcp_receive+0xb24>)
 8015bde:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015be0:	e0af      	b.n	8015d42 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015be6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015bec:	68db      	ldr	r3, [r3, #12]
 8015bee:	685b      	ldr	r3, [r3, #4]
 8015bf0:	4a36      	ldr	r2, [pc, #216]	@ (8015ccc <tcp_receive+0xb08>)
 8015bf2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015bf4:	68bb      	ldr	r3, [r7, #8]
 8015bf6:	891b      	ldrh	r3, [r3, #8]
 8015bf8:	461c      	mov	r4, r3
 8015bfa:	68bb      	ldr	r3, [r7, #8]
 8015bfc:	68db      	ldr	r3, [r3, #12]
 8015bfe:	899b      	ldrh	r3, [r3, #12]
 8015c00:	b29b      	uxth	r3, r3
 8015c02:	4618      	mov	r0, r3
 8015c04:	f7fa fd2a 	bl	801065c <lwip_htons>
 8015c08:	4603      	mov	r3, r0
 8015c0a:	b2db      	uxtb	r3, r3
 8015c0c:	f003 0303 	and.w	r3, r3, #3
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d001      	beq.n	8015c18 <tcp_receive+0xa54>
 8015c14:	2301      	movs	r3, #1
 8015c16:	e000      	b.n	8015c1a <tcp_receive+0xa56>
 8015c18:	2300      	movs	r3, #0
 8015c1a:	191a      	adds	r2, r3, r4
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c20:	441a      	add	r2, r3
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015c2a:	461c      	mov	r4, r3
 8015c2c:	68bb      	ldr	r3, [r7, #8]
 8015c2e:	891b      	ldrh	r3, [r3, #8]
 8015c30:	461d      	mov	r5, r3
 8015c32:	68bb      	ldr	r3, [r7, #8]
 8015c34:	68db      	ldr	r3, [r3, #12]
 8015c36:	899b      	ldrh	r3, [r3, #12]
 8015c38:	b29b      	uxth	r3, r3
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	f7fa fd0e 	bl	801065c <lwip_htons>
 8015c40:	4603      	mov	r3, r0
 8015c42:	b2db      	uxtb	r3, r3
 8015c44:	f003 0303 	and.w	r3, r3, #3
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d001      	beq.n	8015c50 <tcp_receive+0xa8c>
 8015c4c:	2301      	movs	r3, #1
 8015c4e:	e000      	b.n	8015c52 <tcp_receive+0xa8e>
 8015c50:	2300      	movs	r3, #0
 8015c52:	442b      	add	r3, r5
 8015c54:	429c      	cmp	r4, r3
 8015c56:	d206      	bcs.n	8015c66 <tcp_receive+0xaa2>
 8015c58:	4b1e      	ldr	r3, [pc, #120]	@ (8015cd4 <tcp_receive+0xb10>)
 8015c5a:	f240 622b 	movw	r2, #1579	@ 0x62b
 8015c5e:	4923      	ldr	r1, [pc, #140]	@ (8015cec <tcp_receive+0xb28>)
 8015c60:	481e      	ldr	r0, [pc, #120]	@ (8015cdc <tcp_receive+0xb18>)
 8015c62:	f007 fbaf 	bl	801d3c4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8015c66:	68bb      	ldr	r3, [r7, #8]
 8015c68:	891b      	ldrh	r3, [r3, #8]
 8015c6a:	461c      	mov	r4, r3
 8015c6c:	68bb      	ldr	r3, [r7, #8]
 8015c6e:	68db      	ldr	r3, [r3, #12]
 8015c70:	899b      	ldrh	r3, [r3, #12]
 8015c72:	b29b      	uxth	r3, r3
 8015c74:	4618      	mov	r0, r3
 8015c76:	f7fa fcf1 	bl	801065c <lwip_htons>
 8015c7a:	4603      	mov	r3, r0
 8015c7c:	b2db      	uxtb	r3, r3
 8015c7e:	f003 0303 	and.w	r3, r3, #3
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d001      	beq.n	8015c8a <tcp_receive+0xac6>
 8015c86:	2301      	movs	r3, #1
 8015c88:	e000      	b.n	8015c8c <tcp_receive+0xac8>
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	1919      	adds	r1, r3, r4
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015c92:	b28b      	uxth	r3, r1
 8015c94:	1ad3      	subs	r3, r2, r3
 8015c96:	b29a      	uxth	r2, r3
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015c9c:	6878      	ldr	r0, [r7, #4]
 8015c9e:	f7fc ff43 	bl	8012b28 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8015ca2:	68bb      	ldr	r3, [r7, #8]
 8015ca4:	685b      	ldr	r3, [r3, #4]
 8015ca6:	891b      	ldrh	r3, [r3, #8]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d028      	beq.n	8015cfe <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015cac:	4b0d      	ldr	r3, [pc, #52]	@ (8015ce4 <tcp_receive+0xb20>)
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d01d      	beq.n	8015cf0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8015cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8015ce4 <tcp_receive+0xb20>)
 8015cb6:	681a      	ldr	r2, [r3, #0]
 8015cb8:	68bb      	ldr	r3, [r7, #8]
 8015cba:	685b      	ldr	r3, [r3, #4]
 8015cbc:	4619      	mov	r1, r3
 8015cbe:	4610      	mov	r0, r2
 8015cc0:	f7fc fa50 	bl	8012164 <pbuf_cat>
 8015cc4:	e018      	b.n	8015cf8 <tcp_receive+0xb34>
 8015cc6:	bf00      	nop
 8015cc8:	2400cc76 	.word	0x2400cc76
 8015ccc:	2400cc6c 	.word	0x2400cc6c
 8015cd0:	2400cc4c 	.word	0x2400cc4c
 8015cd4:	080208d4 	.word	0x080208d4
 8015cd8:	08020cb4 	.word	0x08020cb4
 8015cdc:	08020920 	.word	0x08020920
 8015ce0:	08020cf0 	.word	0x08020cf0
 8015ce4:	2400cc7c 	.word	0x2400cc7c
 8015ce8:	2400cc79 	.word	0x2400cc79
 8015cec:	08020d10 	.word	0x08020d10
            } else {
              recv_data = cseg->p;
 8015cf0:	68bb      	ldr	r3, [r7, #8]
 8015cf2:	685b      	ldr	r3, [r3, #4]
 8015cf4:	4a70      	ldr	r2, [pc, #448]	@ (8015eb8 <tcp_receive+0xcf4>)
 8015cf6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8015cf8:	68bb      	ldr	r3, [r7, #8]
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015cfe:	68bb      	ldr	r3, [r7, #8]
 8015d00:	68db      	ldr	r3, [r3, #12]
 8015d02:	899b      	ldrh	r3, [r3, #12]
 8015d04:	b29b      	uxth	r3, r3
 8015d06:	4618      	mov	r0, r3
 8015d08:	f7fa fca8 	bl	801065c <lwip_htons>
 8015d0c:	4603      	mov	r3, r0
 8015d0e:	b2db      	uxtb	r3, r3
 8015d10:	f003 0301 	and.w	r3, r3, #1
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d00d      	beq.n	8015d34 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8015d18:	4b68      	ldr	r3, [pc, #416]	@ (8015ebc <tcp_receive+0xcf8>)
 8015d1a:	781b      	ldrb	r3, [r3, #0]
 8015d1c:	f043 0320 	orr.w	r3, r3, #32
 8015d20:	b2da      	uxtb	r2, r3
 8015d22:	4b66      	ldr	r3, [pc, #408]	@ (8015ebc <tcp_receive+0xcf8>)
 8015d24:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	7d1b      	ldrb	r3, [r3, #20]
 8015d2a:	2b04      	cmp	r3, #4
 8015d2c:	d102      	bne.n	8015d34 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	2207      	movs	r2, #7
 8015d32:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8015d34:	68bb      	ldr	r3, [r7, #8]
 8015d36:	681a      	ldr	r2, [r3, #0]
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8015d3c:	68b8      	ldr	r0, [r7, #8]
 8015d3e:	f7fd fbd4 	bl	80134ea <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d008      	beq.n	8015d5c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d4e:	68db      	ldr	r3, [r3, #12]
 8015d50:	685a      	ldr	r2, [r3, #4]
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8015d56:	429a      	cmp	r2, r3
 8015d58:	f43f af43 	beq.w	8015be2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	8b5b      	ldrh	r3, [r3, #26]
 8015d60:	f003 0301 	and.w	r3, r3, #1
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d00e      	beq.n	8015d86 <tcp_receive+0xbc2>
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	8b5b      	ldrh	r3, [r3, #26]
 8015d6c:	f023 0301 	bic.w	r3, r3, #1
 8015d70:	b29a      	uxth	r2, r3
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	835a      	strh	r2, [r3, #26]
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	8b5b      	ldrh	r3, [r3, #26]
 8015d7a:	f043 0302 	orr.w	r3, r3, #2
 8015d7e:	b29a      	uxth	r2, r3
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015d84:	e187      	b.n	8016096 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	8b5b      	ldrh	r3, [r3, #26]
 8015d8a:	f043 0301 	orr.w	r3, r3, #1
 8015d8e:	b29a      	uxth	r2, r3
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015d94:	e17f      	b.n	8016096 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d106      	bne.n	8015dac <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8015d9e:	4848      	ldr	r0, [pc, #288]	@ (8015ec0 <tcp_receive+0xcfc>)
 8015da0:	f7fd fbbc 	bl	801351c <tcp_seg_copy>
 8015da4:	4602      	mov	r2, r0
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	675a      	str	r2, [r3, #116]	@ 0x74
 8015daa:	e16c      	b.n	8016086 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015dac:	2300      	movs	r3, #0
 8015dae:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015db4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015db6:	e156      	b.n	8016066 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8015db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015dba:	68db      	ldr	r3, [r3, #12]
 8015dbc:	685a      	ldr	r2, [r3, #4]
 8015dbe:	4b41      	ldr	r3, [pc, #260]	@ (8015ec4 <tcp_receive+0xd00>)
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	429a      	cmp	r2, r3
 8015dc4:	d11d      	bne.n	8015e02 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8015dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8015ec0 <tcp_receive+0xcfc>)
 8015dc8:	891a      	ldrh	r2, [r3, #8]
 8015dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015dcc:	891b      	ldrh	r3, [r3, #8]
 8015dce:	429a      	cmp	r2, r3
 8015dd0:	f240 814e 	bls.w	8016070 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015dd4:	483a      	ldr	r0, [pc, #232]	@ (8015ec0 <tcp_receive+0xcfc>)
 8015dd6:	f7fd fba1 	bl	801351c <tcp_seg_copy>
 8015dda:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015ddc:	697b      	ldr	r3, [r7, #20]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	f000 8148 	beq.w	8016074 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8015de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d003      	beq.n	8015df2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8015dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015dec:	697a      	ldr	r2, [r7, #20]
 8015dee:	601a      	str	r2, [r3, #0]
 8015df0:	e002      	b.n	8015df8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	697a      	ldr	r2, [r7, #20]
 8015df6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8015df8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015dfa:	6978      	ldr	r0, [r7, #20]
 8015dfc:	f7ff f8de 	bl	8014fbc <tcp_oos_insert_segment>
                }
                break;
 8015e00:	e138      	b.n	8016074 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8015e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d117      	bne.n	8015e38 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8015e08:	4b2e      	ldr	r3, [pc, #184]	@ (8015ec4 <tcp_receive+0xd00>)
 8015e0a:	681a      	ldr	r2, [r3, #0]
 8015e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e0e:	68db      	ldr	r3, [r3, #12]
 8015e10:	685b      	ldr	r3, [r3, #4]
 8015e12:	1ad3      	subs	r3, r2, r3
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	da57      	bge.n	8015ec8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015e18:	4829      	ldr	r0, [pc, #164]	@ (8015ec0 <tcp_receive+0xcfc>)
 8015e1a:	f7fd fb7f 	bl	801351c <tcp_seg_copy>
 8015e1e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8015e20:	69bb      	ldr	r3, [r7, #24]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	f000 8128 	beq.w	8016078 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	69ba      	ldr	r2, [r7, #24]
 8015e2c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8015e2e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015e30:	69b8      	ldr	r0, [r7, #24]
 8015e32:	f7ff f8c3 	bl	8014fbc <tcp_oos_insert_segment>
                  }
                  break;
 8015e36:	e11f      	b.n	8016078 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8015e38:	4b22      	ldr	r3, [pc, #136]	@ (8015ec4 <tcp_receive+0xd00>)
 8015e3a:	681a      	ldr	r2, [r3, #0]
 8015e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e3e:	68db      	ldr	r3, [r3, #12]
 8015e40:	685b      	ldr	r3, [r3, #4]
 8015e42:	1ad3      	subs	r3, r2, r3
 8015e44:	3b01      	subs	r3, #1
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	db3e      	blt.n	8015ec8 <tcp_receive+0xd04>
 8015e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8015ec4 <tcp_receive+0xd00>)
 8015e4c:	681a      	ldr	r2, [r3, #0]
 8015e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e50:	68db      	ldr	r3, [r3, #12]
 8015e52:	685b      	ldr	r3, [r3, #4]
 8015e54:	1ad3      	subs	r3, r2, r3
 8015e56:	3301      	adds	r3, #1
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	dc35      	bgt.n	8015ec8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015e5c:	4818      	ldr	r0, [pc, #96]	@ (8015ec0 <tcp_receive+0xcfc>)
 8015e5e:	f7fd fb5d 	bl	801351c <tcp_seg_copy>
 8015e62:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015e64:	69fb      	ldr	r3, [r7, #28]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	f000 8108 	beq.w	801607c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e6e:	68db      	ldr	r3, [r3, #12]
 8015e70:	685b      	ldr	r3, [r3, #4]
 8015e72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015e74:	8912      	ldrh	r2, [r2, #8]
 8015e76:	441a      	add	r2, r3
 8015e78:	4b12      	ldr	r3, [pc, #72]	@ (8015ec4 <tcp_receive+0xd00>)
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	1ad3      	subs	r3, r2, r3
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	dd12      	ble.n	8015ea8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8015e82:	4b10      	ldr	r3, [pc, #64]	@ (8015ec4 <tcp_receive+0xd00>)
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	b29a      	uxth	r2, r3
 8015e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e8a:	68db      	ldr	r3, [r3, #12]
 8015e8c:	685b      	ldr	r3, [r3, #4]
 8015e8e:	b29b      	uxth	r3, r3
 8015e90:	1ad3      	subs	r3, r2, r3
 8015e92:	b29a      	uxth	r2, r3
 8015e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e96:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e9a:	685a      	ldr	r2, [r3, #4]
 8015e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e9e:	891b      	ldrh	r3, [r3, #8]
 8015ea0:	4619      	mov	r1, r3
 8015ea2:	4610      	mov	r0, r2
 8015ea4:	f7fb ff0a 	bl	8011cbc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015eaa:	69fa      	ldr	r2, [r7, #28]
 8015eac:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8015eae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015eb0:	69f8      	ldr	r0, [r7, #28]
 8015eb2:	f7ff f883 	bl	8014fbc <tcp_oos_insert_segment>
                  }
                  break;
 8015eb6:	e0e1      	b.n	801607c <tcp_receive+0xeb8>
 8015eb8:	2400cc7c 	.word	0x2400cc7c
 8015ebc:	2400cc79 	.word	0x2400cc79
 8015ec0:	2400cc4c 	.word	0x2400cc4c
 8015ec4:	2400cc6c 	.word	0x2400cc6c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8015ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015eca:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	f040 80c5 	bne.w	8016060 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8015ed6:	4b7f      	ldr	r3, [pc, #508]	@ (80160d4 <tcp_receive+0xf10>)
 8015ed8:	681a      	ldr	r2, [r3, #0]
 8015eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015edc:	68db      	ldr	r3, [r3, #12]
 8015ede:	685b      	ldr	r3, [r3, #4]
 8015ee0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	f340 80bc 	ble.w	8016060 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015eea:	68db      	ldr	r3, [r3, #12]
 8015eec:	899b      	ldrh	r3, [r3, #12]
 8015eee:	b29b      	uxth	r3, r3
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	f7fa fbb3 	bl	801065c <lwip_htons>
 8015ef6:	4603      	mov	r3, r0
 8015ef8:	b2db      	uxtb	r3, r3
 8015efa:	f003 0301 	and.w	r3, r3, #1
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	f040 80be 	bne.w	8016080 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015f04:	4874      	ldr	r0, [pc, #464]	@ (80160d8 <tcp_receive+0xf14>)
 8015f06:	f7fd fb09 	bl	801351c <tcp_seg_copy>
 8015f0a:	4602      	mov	r2, r0
 8015f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f0e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	f000 80b5 	beq.w	8016084 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8015f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f1c:	68db      	ldr	r3, [r3, #12]
 8015f1e:	685b      	ldr	r3, [r3, #4]
 8015f20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015f22:	8912      	ldrh	r2, [r2, #8]
 8015f24:	441a      	add	r2, r3
 8015f26:	4b6b      	ldr	r3, [pc, #428]	@ (80160d4 <tcp_receive+0xf10>)
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	1ad3      	subs	r3, r2, r3
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	dd12      	ble.n	8015f56 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015f30:	4b68      	ldr	r3, [pc, #416]	@ (80160d4 <tcp_receive+0xf10>)
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	b29a      	uxth	r2, r3
 8015f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f38:	68db      	ldr	r3, [r3, #12]
 8015f3a:	685b      	ldr	r3, [r3, #4]
 8015f3c:	b29b      	uxth	r3, r3
 8015f3e:	1ad3      	subs	r3, r2, r3
 8015f40:	b29a      	uxth	r2, r3
 8015f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f44:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8015f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f48:	685a      	ldr	r2, [r3, #4]
 8015f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f4c:	891b      	ldrh	r3, [r3, #8]
 8015f4e:	4619      	mov	r1, r3
 8015f50:	4610      	mov	r0, r2
 8015f52:	f7fb feb3 	bl	8011cbc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8015f56:	4b61      	ldr	r3, [pc, #388]	@ (80160dc <tcp_receive+0xf18>)
 8015f58:	881b      	ldrh	r3, [r3, #0]
 8015f5a:	461a      	mov	r2, r3
 8015f5c:	4b5d      	ldr	r3, [pc, #372]	@ (80160d4 <tcp_receive+0xf10>)
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	441a      	add	r2, r3
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f66:	6879      	ldr	r1, [r7, #4]
 8015f68:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015f6a:	440b      	add	r3, r1
 8015f6c:	1ad3      	subs	r3, r2, r3
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	f340 8088 	ble.w	8016084 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	68db      	ldr	r3, [r3, #12]
 8015f7a:	899b      	ldrh	r3, [r3, #12]
 8015f7c:	b29b      	uxth	r3, r3
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f7fa fb6c 	bl	801065c <lwip_htons>
 8015f84:	4603      	mov	r3, r0
 8015f86:	b2db      	uxtb	r3, r3
 8015f88:	f003 0301 	and.w	r3, r3, #1
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d021      	beq.n	8015fd4 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	68db      	ldr	r3, [r3, #12]
 8015f96:	899b      	ldrh	r3, [r3, #12]
 8015f98:	b29b      	uxth	r3, r3
 8015f9a:	b21b      	sxth	r3, r3
 8015f9c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015fa0:	b21c      	sxth	r4, r3
 8015fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	68db      	ldr	r3, [r3, #12]
 8015fa8:	899b      	ldrh	r3, [r3, #12]
 8015faa:	b29b      	uxth	r3, r3
 8015fac:	4618      	mov	r0, r3
 8015fae:	f7fa fb55 	bl	801065c <lwip_htons>
 8015fb2:	4603      	mov	r3, r0
 8015fb4:	b2db      	uxtb	r3, r3
 8015fb6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8015fba:	b29b      	uxth	r3, r3
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	f7fa fb4d 	bl	801065c <lwip_htons>
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	b21b      	sxth	r3, r3
 8015fc6:	4323      	orrs	r3, r4
 8015fc8:	b21a      	sxth	r2, r3
 8015fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	68db      	ldr	r3, [r3, #12]
 8015fd0:	b292      	uxth	r2, r2
 8015fd2:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015fd8:	b29a      	uxth	r2, r3
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015fde:	4413      	add	r3, r2
 8015fe0:	b299      	uxth	r1, r3
 8015fe2:	4b3c      	ldr	r3, [pc, #240]	@ (80160d4 <tcp_receive+0xf10>)
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	b29a      	uxth	r2, r3
 8015fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	1a8a      	subs	r2, r1, r2
 8015fee:	b292      	uxth	r2, r2
 8015ff0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	685a      	ldr	r2, [r3, #4]
 8015ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	891b      	ldrh	r3, [r3, #8]
 8015ffe:	4619      	mov	r1, r3
 8016000:	4610      	mov	r0, r2
 8016002:	f7fb fe5b 	bl	8011cbc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8016006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	891c      	ldrh	r4, [r3, #8]
 801600c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	68db      	ldr	r3, [r3, #12]
 8016012:	899b      	ldrh	r3, [r3, #12]
 8016014:	b29b      	uxth	r3, r3
 8016016:	4618      	mov	r0, r3
 8016018:	f7fa fb20 	bl	801065c <lwip_htons>
 801601c:	4603      	mov	r3, r0
 801601e:	b2db      	uxtb	r3, r3
 8016020:	f003 0303 	and.w	r3, r3, #3
 8016024:	2b00      	cmp	r3, #0
 8016026:	d001      	beq.n	801602c <tcp_receive+0xe68>
 8016028:	2301      	movs	r3, #1
 801602a:	e000      	b.n	801602e <tcp_receive+0xe6a>
 801602c:	2300      	movs	r3, #0
 801602e:	4423      	add	r3, r4
 8016030:	b29a      	uxth	r2, r3
 8016032:	4b2a      	ldr	r3, [pc, #168]	@ (80160dc <tcp_receive+0xf18>)
 8016034:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016036:	4b29      	ldr	r3, [pc, #164]	@ (80160dc <tcp_receive+0xf18>)
 8016038:	881b      	ldrh	r3, [r3, #0]
 801603a:	461a      	mov	r2, r3
 801603c:	4b25      	ldr	r3, [pc, #148]	@ (80160d4 <tcp_receive+0xf10>)
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	441a      	add	r2, r3
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016046:	6879      	ldr	r1, [r7, #4]
 8016048:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801604a:	440b      	add	r3, r1
 801604c:	429a      	cmp	r2, r3
 801604e:	d019      	beq.n	8016084 <tcp_receive+0xec0>
 8016050:	4b23      	ldr	r3, [pc, #140]	@ (80160e0 <tcp_receive+0xf1c>)
 8016052:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8016056:	4923      	ldr	r1, [pc, #140]	@ (80160e4 <tcp_receive+0xf20>)
 8016058:	4823      	ldr	r0, [pc, #140]	@ (80160e8 <tcp_receive+0xf24>)
 801605a:	f007 f9b3 	bl	801d3c4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801605e:	e011      	b.n	8016084 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016068:	2b00      	cmp	r3, #0
 801606a:	f47f aea5 	bne.w	8015db8 <tcp_receive+0xbf4>
 801606e:	e00a      	b.n	8016086 <tcp_receive+0xec2>
                break;
 8016070:	bf00      	nop
 8016072:	e008      	b.n	8016086 <tcp_receive+0xec2>
                break;
 8016074:	bf00      	nop
 8016076:	e006      	b.n	8016086 <tcp_receive+0xec2>
                  break;
 8016078:	bf00      	nop
 801607a:	e004      	b.n	8016086 <tcp_receive+0xec2>
                  break;
 801607c:	bf00      	nop
 801607e:	e002      	b.n	8016086 <tcp_receive+0xec2>
                  break;
 8016080:	bf00      	nop
 8016082:	e000      	b.n	8016086 <tcp_receive+0xec2>
                break;
 8016084:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8016086:	6878      	ldr	r0, [r7, #4]
 8016088:	f001 fa30 	bl	80174ec <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801608c:	e003      	b.n	8016096 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801608e:	6878      	ldr	r0, [r7, #4]
 8016090:	f001 fa2c 	bl	80174ec <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016094:	e01a      	b.n	80160cc <tcp_receive+0xf08>
 8016096:	e019      	b.n	80160cc <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8016098:	4b0e      	ldr	r3, [pc, #56]	@ (80160d4 <tcp_receive+0xf10>)
 801609a:	681a      	ldr	r2, [r3, #0]
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160a0:	1ad3      	subs	r3, r2, r3
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	db0a      	blt.n	80160bc <tcp_receive+0xef8>
 80160a6:	4b0b      	ldr	r3, [pc, #44]	@ (80160d4 <tcp_receive+0xf10>)
 80160a8:	681a      	ldr	r2, [r3, #0]
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160ae:	6879      	ldr	r1, [r7, #4]
 80160b0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80160b2:	440b      	add	r3, r1
 80160b4:	1ad3      	subs	r3, r2, r3
 80160b6:	3301      	adds	r3, #1
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	dd07      	ble.n	80160cc <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	8b5b      	ldrh	r3, [r3, #26]
 80160c0:	f043 0302 	orr.w	r3, r3, #2
 80160c4:	b29a      	uxth	r2, r3
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80160ca:	e7ff      	b.n	80160cc <tcp_receive+0xf08>
 80160cc:	bf00      	nop
 80160ce:	3750      	adds	r7, #80	@ 0x50
 80160d0:	46bd      	mov	sp, r7
 80160d2:	bdb0      	pop	{r4, r5, r7, pc}
 80160d4:	2400cc6c 	.word	0x2400cc6c
 80160d8:	2400cc4c 	.word	0x2400cc4c
 80160dc:	2400cc76 	.word	0x2400cc76
 80160e0:	080208d4 	.word	0x080208d4
 80160e4:	08020c7c 	.word	0x08020c7c
 80160e8:	08020920 	.word	0x08020920

080160ec <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80160ec:	b480      	push	{r7}
 80160ee:	b083      	sub	sp, #12
 80160f0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80160f2:	4b15      	ldr	r3, [pc, #84]	@ (8016148 <tcp_get_next_optbyte+0x5c>)
 80160f4:	881b      	ldrh	r3, [r3, #0]
 80160f6:	1c5a      	adds	r2, r3, #1
 80160f8:	b291      	uxth	r1, r2
 80160fa:	4a13      	ldr	r2, [pc, #76]	@ (8016148 <tcp_get_next_optbyte+0x5c>)
 80160fc:	8011      	strh	r1, [r2, #0]
 80160fe:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8016100:	4b12      	ldr	r3, [pc, #72]	@ (801614c <tcp_get_next_optbyte+0x60>)
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d004      	beq.n	8016112 <tcp_get_next_optbyte+0x26>
 8016108:	4b11      	ldr	r3, [pc, #68]	@ (8016150 <tcp_get_next_optbyte+0x64>)
 801610a:	881b      	ldrh	r3, [r3, #0]
 801610c:	88fa      	ldrh	r2, [r7, #6]
 801610e:	429a      	cmp	r2, r3
 8016110:	d208      	bcs.n	8016124 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8016112:	4b10      	ldr	r3, [pc, #64]	@ (8016154 <tcp_get_next_optbyte+0x68>)
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	3314      	adds	r3, #20
 8016118:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801611a:	88fb      	ldrh	r3, [r7, #6]
 801611c:	683a      	ldr	r2, [r7, #0]
 801611e:	4413      	add	r3, r2
 8016120:	781b      	ldrb	r3, [r3, #0]
 8016122:	e00b      	b.n	801613c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8016124:	88fb      	ldrh	r3, [r7, #6]
 8016126:	b2da      	uxtb	r2, r3
 8016128:	4b09      	ldr	r3, [pc, #36]	@ (8016150 <tcp_get_next_optbyte+0x64>)
 801612a:	881b      	ldrh	r3, [r3, #0]
 801612c:	b2db      	uxtb	r3, r3
 801612e:	1ad3      	subs	r3, r2, r3
 8016130:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8016132:	4b06      	ldr	r3, [pc, #24]	@ (801614c <tcp_get_next_optbyte+0x60>)
 8016134:	681a      	ldr	r2, [r3, #0]
 8016136:	797b      	ldrb	r3, [r7, #5]
 8016138:	4413      	add	r3, r2
 801613a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801613c:	4618      	mov	r0, r3
 801613e:	370c      	adds	r7, #12
 8016140:	46bd      	mov	sp, r7
 8016142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016146:	4770      	bx	lr
 8016148:	2400cc68 	.word	0x2400cc68
 801614c:	2400cc64 	.word	0x2400cc64
 8016150:	2400cc62 	.word	0x2400cc62
 8016154:	2400cc5c 	.word	0x2400cc5c

08016158 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8016158:	b580      	push	{r7, lr}
 801615a:	b084      	sub	sp, #16
 801615c:	af00      	add	r7, sp, #0
 801615e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	2b00      	cmp	r3, #0
 8016164:	d106      	bne.n	8016174 <tcp_parseopt+0x1c>
 8016166:	4b32      	ldr	r3, [pc, #200]	@ (8016230 <tcp_parseopt+0xd8>)
 8016168:	f240 727d 	movw	r2, #1917	@ 0x77d
 801616c:	4931      	ldr	r1, [pc, #196]	@ (8016234 <tcp_parseopt+0xdc>)
 801616e:	4832      	ldr	r0, [pc, #200]	@ (8016238 <tcp_parseopt+0xe0>)
 8016170:	f007 f928 	bl	801d3c4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8016174:	4b31      	ldr	r3, [pc, #196]	@ (801623c <tcp_parseopt+0xe4>)
 8016176:	881b      	ldrh	r3, [r3, #0]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d056      	beq.n	801622a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801617c:	4b30      	ldr	r3, [pc, #192]	@ (8016240 <tcp_parseopt+0xe8>)
 801617e:	2200      	movs	r2, #0
 8016180:	801a      	strh	r2, [r3, #0]
 8016182:	e046      	b.n	8016212 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8016184:	f7ff ffb2 	bl	80160ec <tcp_get_next_optbyte>
 8016188:	4603      	mov	r3, r0
 801618a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801618c:	7bfb      	ldrb	r3, [r7, #15]
 801618e:	2b02      	cmp	r3, #2
 8016190:	d006      	beq.n	80161a0 <tcp_parseopt+0x48>
 8016192:	2b02      	cmp	r3, #2
 8016194:	dc2a      	bgt.n	80161ec <tcp_parseopt+0x94>
 8016196:	2b00      	cmp	r3, #0
 8016198:	d042      	beq.n	8016220 <tcp_parseopt+0xc8>
 801619a:	2b01      	cmp	r3, #1
 801619c:	d038      	beq.n	8016210 <tcp_parseopt+0xb8>
 801619e:	e025      	b.n	80161ec <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80161a0:	f7ff ffa4 	bl	80160ec <tcp_get_next_optbyte>
 80161a4:	4603      	mov	r3, r0
 80161a6:	2b04      	cmp	r3, #4
 80161a8:	d13c      	bne.n	8016224 <tcp_parseopt+0xcc>
 80161aa:	4b25      	ldr	r3, [pc, #148]	@ (8016240 <tcp_parseopt+0xe8>)
 80161ac:	881b      	ldrh	r3, [r3, #0]
 80161ae:	3301      	adds	r3, #1
 80161b0:	4a22      	ldr	r2, [pc, #136]	@ (801623c <tcp_parseopt+0xe4>)
 80161b2:	8812      	ldrh	r2, [r2, #0]
 80161b4:	4293      	cmp	r3, r2
 80161b6:	da35      	bge.n	8016224 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80161b8:	f7ff ff98 	bl	80160ec <tcp_get_next_optbyte>
 80161bc:	4603      	mov	r3, r0
 80161be:	021b      	lsls	r3, r3, #8
 80161c0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80161c2:	f7ff ff93 	bl	80160ec <tcp_get_next_optbyte>
 80161c6:	4603      	mov	r3, r0
 80161c8:	461a      	mov	r2, r3
 80161ca:	89bb      	ldrh	r3, [r7, #12]
 80161cc:	4313      	orrs	r3, r2
 80161ce:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80161d0:	89bb      	ldrh	r3, [r7, #12]
 80161d2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80161d6:	d804      	bhi.n	80161e2 <tcp_parseopt+0x8a>
 80161d8:	89bb      	ldrh	r3, [r7, #12]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d001      	beq.n	80161e2 <tcp_parseopt+0x8a>
 80161de:	89ba      	ldrh	r2, [r7, #12]
 80161e0:	e001      	b.n	80161e6 <tcp_parseopt+0x8e>
 80161e2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80161ea:	e012      	b.n	8016212 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80161ec:	f7ff ff7e 	bl	80160ec <tcp_get_next_optbyte>
 80161f0:	4603      	mov	r3, r0
 80161f2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80161f4:	7afb      	ldrb	r3, [r7, #11]
 80161f6:	2b01      	cmp	r3, #1
 80161f8:	d916      	bls.n	8016228 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80161fa:	7afb      	ldrb	r3, [r7, #11]
 80161fc:	b29a      	uxth	r2, r3
 80161fe:	4b10      	ldr	r3, [pc, #64]	@ (8016240 <tcp_parseopt+0xe8>)
 8016200:	881b      	ldrh	r3, [r3, #0]
 8016202:	4413      	add	r3, r2
 8016204:	b29b      	uxth	r3, r3
 8016206:	3b02      	subs	r3, #2
 8016208:	b29a      	uxth	r2, r3
 801620a:	4b0d      	ldr	r3, [pc, #52]	@ (8016240 <tcp_parseopt+0xe8>)
 801620c:	801a      	strh	r2, [r3, #0]
 801620e:	e000      	b.n	8016212 <tcp_parseopt+0xba>
          break;
 8016210:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016212:	4b0b      	ldr	r3, [pc, #44]	@ (8016240 <tcp_parseopt+0xe8>)
 8016214:	881a      	ldrh	r2, [r3, #0]
 8016216:	4b09      	ldr	r3, [pc, #36]	@ (801623c <tcp_parseopt+0xe4>)
 8016218:	881b      	ldrh	r3, [r3, #0]
 801621a:	429a      	cmp	r2, r3
 801621c:	d3b2      	bcc.n	8016184 <tcp_parseopt+0x2c>
 801621e:	e004      	b.n	801622a <tcp_parseopt+0xd2>
          return;
 8016220:	bf00      	nop
 8016222:	e002      	b.n	801622a <tcp_parseopt+0xd2>
            return;
 8016224:	bf00      	nop
 8016226:	e000      	b.n	801622a <tcp_parseopt+0xd2>
            return;
 8016228:	bf00      	nop
      }
    }
  }
}
 801622a:	3710      	adds	r7, #16
 801622c:	46bd      	mov	sp, r7
 801622e:	bd80      	pop	{r7, pc}
 8016230:	080208d4 	.word	0x080208d4
 8016234:	08020d38 	.word	0x08020d38
 8016238:	08020920 	.word	0x08020920
 801623c:	2400cc60 	.word	0x2400cc60
 8016240:	2400cc68 	.word	0x2400cc68

08016244 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016244:	b480      	push	{r7}
 8016246:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8016248:	4b05      	ldr	r3, [pc, #20]	@ (8016260 <tcp_trigger_input_pcb_close+0x1c>)
 801624a:	781b      	ldrb	r3, [r3, #0]
 801624c:	f043 0310 	orr.w	r3, r3, #16
 8016250:	b2da      	uxtb	r2, r3
 8016252:	4b03      	ldr	r3, [pc, #12]	@ (8016260 <tcp_trigger_input_pcb_close+0x1c>)
 8016254:	701a      	strb	r2, [r3, #0]
}
 8016256:	bf00      	nop
 8016258:	46bd      	mov	sp, r7
 801625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801625e:	4770      	bx	lr
 8016260:	2400cc79 	.word	0x2400cc79

08016264 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b084      	sub	sp, #16
 8016268:	af00      	add	r7, sp, #0
 801626a:	60f8      	str	r0, [r7, #12]
 801626c:	60b9      	str	r1, [r7, #8]
 801626e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d00a      	beq.n	801628c <tcp_route+0x28>
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	7a1b      	ldrb	r3, [r3, #8]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d006      	beq.n	801628c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	7a1b      	ldrb	r3, [r3, #8]
 8016282:	4618      	mov	r0, r3
 8016284:	f7fb fb12 	bl	80118ac <netif_get_by_index>
 8016288:	4603      	mov	r3, r0
 801628a:	e003      	b.n	8016294 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801628c:	6878      	ldr	r0, [r7, #4]
 801628e:	f005 f865 	bl	801b35c <ip4_route>
 8016292:	4603      	mov	r3, r0
  }
}
 8016294:	4618      	mov	r0, r3
 8016296:	3710      	adds	r7, #16
 8016298:	46bd      	mov	sp, r7
 801629a:	bd80      	pop	{r7, pc}

0801629c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801629c:	b590      	push	{r4, r7, lr}
 801629e:	b087      	sub	sp, #28
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	60f8      	str	r0, [r7, #12]
 80162a4:	60b9      	str	r1, [r7, #8]
 80162a6:	603b      	str	r3, [r7, #0]
 80162a8:	4613      	mov	r3, r2
 80162aa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d105      	bne.n	80162be <tcp_create_segment+0x22>
 80162b2:	4b43      	ldr	r3, [pc, #268]	@ (80163c0 <tcp_create_segment+0x124>)
 80162b4:	22a3      	movs	r2, #163	@ 0xa3
 80162b6:	4943      	ldr	r1, [pc, #268]	@ (80163c4 <tcp_create_segment+0x128>)
 80162b8:	4843      	ldr	r0, [pc, #268]	@ (80163c8 <tcp_create_segment+0x12c>)
 80162ba:	f007 f883 	bl	801d3c4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80162be:	68bb      	ldr	r3, [r7, #8]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d105      	bne.n	80162d0 <tcp_create_segment+0x34>
 80162c4:	4b3e      	ldr	r3, [pc, #248]	@ (80163c0 <tcp_create_segment+0x124>)
 80162c6:	22a4      	movs	r2, #164	@ 0xa4
 80162c8:	4940      	ldr	r1, [pc, #256]	@ (80163cc <tcp_create_segment+0x130>)
 80162ca:	483f      	ldr	r0, [pc, #252]	@ (80163c8 <tcp_create_segment+0x12c>)
 80162cc:	f007 f87a 	bl	801d3c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80162d0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80162d4:	009b      	lsls	r3, r3, #2
 80162d6:	b2db      	uxtb	r3, r3
 80162d8:	f003 0304 	and.w	r3, r3, #4
 80162dc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80162de:	2003      	movs	r0, #3
 80162e0:	f7fa ff4c 	bl	801117c <memp_malloc>
 80162e4:	6138      	str	r0, [r7, #16]
 80162e6:	693b      	ldr	r3, [r7, #16]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d104      	bne.n	80162f6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80162ec:	68b8      	ldr	r0, [r7, #8]
 80162ee:	f7fb fe6b 	bl	8011fc8 <pbuf_free>
    return NULL;
 80162f2:	2300      	movs	r3, #0
 80162f4:	e060      	b.n	80163b8 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80162f6:	693b      	ldr	r3, [r7, #16]
 80162f8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80162fc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80162fe:	693b      	ldr	r3, [r7, #16]
 8016300:	2200      	movs	r2, #0
 8016302:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016304:	693b      	ldr	r3, [r7, #16]
 8016306:	68ba      	ldr	r2, [r7, #8]
 8016308:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801630a:	68bb      	ldr	r3, [r7, #8]
 801630c:	891a      	ldrh	r2, [r3, #8]
 801630e:	7dfb      	ldrb	r3, [r7, #23]
 8016310:	b29b      	uxth	r3, r3
 8016312:	429a      	cmp	r2, r3
 8016314:	d205      	bcs.n	8016322 <tcp_create_segment+0x86>
 8016316:	4b2a      	ldr	r3, [pc, #168]	@ (80163c0 <tcp_create_segment+0x124>)
 8016318:	22b0      	movs	r2, #176	@ 0xb0
 801631a:	492d      	ldr	r1, [pc, #180]	@ (80163d0 <tcp_create_segment+0x134>)
 801631c:	482a      	ldr	r0, [pc, #168]	@ (80163c8 <tcp_create_segment+0x12c>)
 801631e:	f007 f851 	bl	801d3c4 <iprintf>
  seg->len = p->tot_len - optlen;
 8016322:	68bb      	ldr	r3, [r7, #8]
 8016324:	891a      	ldrh	r2, [r3, #8]
 8016326:	7dfb      	ldrb	r3, [r7, #23]
 8016328:	b29b      	uxth	r3, r3
 801632a:	1ad3      	subs	r3, r2, r3
 801632c:	b29a      	uxth	r2, r3
 801632e:	693b      	ldr	r3, [r7, #16]
 8016330:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8016332:	2114      	movs	r1, #20
 8016334:	68b8      	ldr	r0, [r7, #8]
 8016336:	f7fb fdb1 	bl	8011e9c <pbuf_add_header>
 801633a:	4603      	mov	r3, r0
 801633c:	2b00      	cmp	r3, #0
 801633e:	d004      	beq.n	801634a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8016340:	6938      	ldr	r0, [r7, #16]
 8016342:	f7fd f8d2 	bl	80134ea <tcp_seg_free>
    return NULL;
 8016346:	2300      	movs	r3, #0
 8016348:	e036      	b.n	80163b8 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801634a:	693b      	ldr	r3, [r7, #16]
 801634c:	685b      	ldr	r3, [r3, #4]
 801634e:	685a      	ldr	r2, [r3, #4]
 8016350:	693b      	ldr	r3, [r7, #16]
 8016352:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	8ada      	ldrh	r2, [r3, #22]
 8016358:	693b      	ldr	r3, [r7, #16]
 801635a:	68dc      	ldr	r4, [r3, #12]
 801635c:	4610      	mov	r0, r2
 801635e:	f7fa f97d 	bl	801065c <lwip_htons>
 8016362:	4603      	mov	r3, r0
 8016364:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	8b1a      	ldrh	r2, [r3, #24]
 801636a:	693b      	ldr	r3, [r7, #16]
 801636c:	68dc      	ldr	r4, [r3, #12]
 801636e:	4610      	mov	r0, r2
 8016370:	f7fa f974 	bl	801065c <lwip_htons>
 8016374:	4603      	mov	r3, r0
 8016376:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8016378:	693b      	ldr	r3, [r7, #16]
 801637a:	68dc      	ldr	r4, [r3, #12]
 801637c:	6838      	ldr	r0, [r7, #0]
 801637e:	f7fa f982 	bl	8010686 <lwip_htonl>
 8016382:	4603      	mov	r3, r0
 8016384:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8016386:	7dfb      	ldrb	r3, [r7, #23]
 8016388:	089b      	lsrs	r3, r3, #2
 801638a:	b2db      	uxtb	r3, r3
 801638c:	3305      	adds	r3, #5
 801638e:	b29b      	uxth	r3, r3
 8016390:	031b      	lsls	r3, r3, #12
 8016392:	b29a      	uxth	r2, r3
 8016394:	79fb      	ldrb	r3, [r7, #7]
 8016396:	b29b      	uxth	r3, r3
 8016398:	4313      	orrs	r3, r2
 801639a:	b29a      	uxth	r2, r3
 801639c:	693b      	ldr	r3, [r7, #16]
 801639e:	68dc      	ldr	r4, [r3, #12]
 80163a0:	4610      	mov	r0, r2
 80163a2:	f7fa f95b 	bl	801065c <lwip_htons>
 80163a6:	4603      	mov	r3, r0
 80163a8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80163aa:	693b      	ldr	r3, [r7, #16]
 80163ac:	68db      	ldr	r3, [r3, #12]
 80163ae:	2200      	movs	r2, #0
 80163b0:	749a      	strb	r2, [r3, #18]
 80163b2:	2200      	movs	r2, #0
 80163b4:	74da      	strb	r2, [r3, #19]
  return seg;
 80163b6:	693b      	ldr	r3, [r7, #16]
}
 80163b8:	4618      	mov	r0, r3
 80163ba:	371c      	adds	r7, #28
 80163bc:	46bd      	mov	sp, r7
 80163be:	bd90      	pop	{r4, r7, pc}
 80163c0:	08020d54 	.word	0x08020d54
 80163c4:	08020d88 	.word	0x08020d88
 80163c8:	08020da8 	.word	0x08020da8
 80163cc:	08020dd0 	.word	0x08020dd0
 80163d0:	08020df4 	.word	0x08020df4

080163d4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80163d4:	b590      	push	{r4, r7, lr}
 80163d6:	b08b      	sub	sp, #44	@ 0x2c
 80163d8:	af02      	add	r7, sp, #8
 80163da:	6078      	str	r0, [r7, #4]
 80163dc:	460b      	mov	r3, r1
 80163de:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80163e0:	2300      	movs	r3, #0
 80163e2:	61fb      	str	r3, [r7, #28]
 80163e4:	2300      	movs	r3, #0
 80163e6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80163e8:	2300      	movs	r3, #0
 80163ea:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d106      	bne.n	8016400 <tcp_split_unsent_seg+0x2c>
 80163f2:	4b95      	ldr	r3, [pc, #596]	@ (8016648 <tcp_split_unsent_seg+0x274>)
 80163f4:	f240 324b 	movw	r2, #843	@ 0x34b
 80163f8:	4994      	ldr	r1, [pc, #592]	@ (801664c <tcp_split_unsent_seg+0x278>)
 80163fa:	4895      	ldr	r0, [pc, #596]	@ (8016650 <tcp_split_unsent_seg+0x27c>)
 80163fc:	f006 ffe2 	bl	801d3c4 <iprintf>

  useg = pcb->unsent;
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016404:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016406:	697b      	ldr	r3, [r7, #20]
 8016408:	2b00      	cmp	r3, #0
 801640a:	d102      	bne.n	8016412 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801640c:	f04f 33ff 	mov.w	r3, #4294967295
 8016410:	e116      	b.n	8016640 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8016412:	887b      	ldrh	r3, [r7, #2]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d109      	bne.n	801642c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016418:	4b8b      	ldr	r3, [pc, #556]	@ (8016648 <tcp_split_unsent_seg+0x274>)
 801641a:	f240 3253 	movw	r2, #851	@ 0x353
 801641e:	498d      	ldr	r1, [pc, #564]	@ (8016654 <tcp_split_unsent_seg+0x280>)
 8016420:	488b      	ldr	r0, [pc, #556]	@ (8016650 <tcp_split_unsent_seg+0x27c>)
 8016422:	f006 ffcf 	bl	801d3c4 <iprintf>
    return ERR_VAL;
 8016426:	f06f 0305 	mvn.w	r3, #5
 801642a:	e109      	b.n	8016640 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801642c:	697b      	ldr	r3, [r7, #20]
 801642e:	891b      	ldrh	r3, [r3, #8]
 8016430:	887a      	ldrh	r2, [r7, #2]
 8016432:	429a      	cmp	r2, r3
 8016434:	d301      	bcc.n	801643a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8016436:	2300      	movs	r3, #0
 8016438:	e102      	b.n	8016640 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801643e:	887a      	ldrh	r2, [r7, #2]
 8016440:	429a      	cmp	r2, r3
 8016442:	d906      	bls.n	8016452 <tcp_split_unsent_seg+0x7e>
 8016444:	4b80      	ldr	r3, [pc, #512]	@ (8016648 <tcp_split_unsent_seg+0x274>)
 8016446:	f240 325b 	movw	r2, #859	@ 0x35b
 801644a:	4983      	ldr	r1, [pc, #524]	@ (8016658 <tcp_split_unsent_seg+0x284>)
 801644c:	4880      	ldr	r0, [pc, #512]	@ (8016650 <tcp_split_unsent_seg+0x27c>)
 801644e:	f006 ffb9 	bl	801d3c4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8016452:	697b      	ldr	r3, [r7, #20]
 8016454:	891b      	ldrh	r3, [r3, #8]
 8016456:	2b00      	cmp	r3, #0
 8016458:	d106      	bne.n	8016468 <tcp_split_unsent_seg+0x94>
 801645a:	4b7b      	ldr	r3, [pc, #492]	@ (8016648 <tcp_split_unsent_seg+0x274>)
 801645c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8016460:	497e      	ldr	r1, [pc, #504]	@ (801665c <tcp_split_unsent_seg+0x288>)
 8016462:	487b      	ldr	r0, [pc, #492]	@ (8016650 <tcp_split_unsent_seg+0x27c>)
 8016464:	f006 ffae 	bl	801d3c4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8016468:	697b      	ldr	r3, [r7, #20]
 801646a:	7a9b      	ldrb	r3, [r3, #10]
 801646c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801646e:	7bfb      	ldrb	r3, [r7, #15]
 8016470:	009b      	lsls	r3, r3, #2
 8016472:	b2db      	uxtb	r3, r3
 8016474:	f003 0304 	and.w	r3, r3, #4
 8016478:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801647a:	697b      	ldr	r3, [r7, #20]
 801647c:	891a      	ldrh	r2, [r3, #8]
 801647e:	887b      	ldrh	r3, [r7, #2]
 8016480:	1ad3      	subs	r3, r2, r3
 8016482:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016484:	7bbb      	ldrb	r3, [r7, #14]
 8016486:	b29a      	uxth	r2, r3
 8016488:	89bb      	ldrh	r3, [r7, #12]
 801648a:	4413      	add	r3, r2
 801648c:	b29b      	uxth	r3, r3
 801648e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016492:	4619      	mov	r1, r3
 8016494:	2036      	movs	r0, #54	@ 0x36
 8016496:	f7fb fab3 	bl	8011a00 <pbuf_alloc>
 801649a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801649c:	693b      	ldr	r3, [r7, #16]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	f000 80b7 	beq.w	8016612 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80164a4:	697b      	ldr	r3, [r7, #20]
 80164a6:	685b      	ldr	r3, [r3, #4]
 80164a8:	891a      	ldrh	r2, [r3, #8]
 80164aa:	697b      	ldr	r3, [r7, #20]
 80164ac:	891b      	ldrh	r3, [r3, #8]
 80164ae:	1ad3      	subs	r3, r2, r3
 80164b0:	b29a      	uxth	r2, r3
 80164b2:	887b      	ldrh	r3, [r7, #2]
 80164b4:	4413      	add	r3, r2
 80164b6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80164b8:	697b      	ldr	r3, [r7, #20]
 80164ba:	6858      	ldr	r0, [r3, #4]
 80164bc:	693b      	ldr	r3, [r7, #16]
 80164be:	685a      	ldr	r2, [r3, #4]
 80164c0:	7bbb      	ldrb	r3, [r7, #14]
 80164c2:	18d1      	adds	r1, r2, r3
 80164c4:	897b      	ldrh	r3, [r7, #10]
 80164c6:	89ba      	ldrh	r2, [r7, #12]
 80164c8:	f7fb ff84 	bl	80123d4 <pbuf_copy_partial>
 80164cc:	4603      	mov	r3, r0
 80164ce:	461a      	mov	r2, r3
 80164d0:	89bb      	ldrh	r3, [r7, #12]
 80164d2:	4293      	cmp	r3, r2
 80164d4:	f040 809f 	bne.w	8016616 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80164d8:	697b      	ldr	r3, [r7, #20]
 80164da:	68db      	ldr	r3, [r3, #12]
 80164dc:	899b      	ldrh	r3, [r3, #12]
 80164de:	b29b      	uxth	r3, r3
 80164e0:	4618      	mov	r0, r3
 80164e2:	f7fa f8bb 	bl	801065c <lwip_htons>
 80164e6:	4603      	mov	r3, r0
 80164e8:	b2db      	uxtb	r3, r3
 80164ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80164ee:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80164f0:	2300      	movs	r3, #0
 80164f2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80164f4:	7efb      	ldrb	r3, [r7, #27]
 80164f6:	f003 0308 	and.w	r3, r3, #8
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d007      	beq.n	801650e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80164fe:	7efb      	ldrb	r3, [r7, #27]
 8016500:	f023 0308 	bic.w	r3, r3, #8
 8016504:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016506:	7ebb      	ldrb	r3, [r7, #26]
 8016508:	f043 0308 	orr.w	r3, r3, #8
 801650c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801650e:	7efb      	ldrb	r3, [r7, #27]
 8016510:	f003 0301 	and.w	r3, r3, #1
 8016514:	2b00      	cmp	r3, #0
 8016516:	d007      	beq.n	8016528 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016518:	7efb      	ldrb	r3, [r7, #27]
 801651a:	f023 0301 	bic.w	r3, r3, #1
 801651e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016520:	7ebb      	ldrb	r3, [r7, #26]
 8016522:	f043 0301 	orr.w	r3, r3, #1
 8016526:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016528:	697b      	ldr	r3, [r7, #20]
 801652a:	68db      	ldr	r3, [r3, #12]
 801652c:	685b      	ldr	r3, [r3, #4]
 801652e:	4618      	mov	r0, r3
 8016530:	f7fa f8a9 	bl	8010686 <lwip_htonl>
 8016534:	4602      	mov	r2, r0
 8016536:	887b      	ldrh	r3, [r7, #2]
 8016538:	18d1      	adds	r1, r2, r3
 801653a:	7eba      	ldrb	r2, [r7, #26]
 801653c:	7bfb      	ldrb	r3, [r7, #15]
 801653e:	9300      	str	r3, [sp, #0]
 8016540:	460b      	mov	r3, r1
 8016542:	6939      	ldr	r1, [r7, #16]
 8016544:	6878      	ldr	r0, [r7, #4]
 8016546:	f7ff fea9 	bl	801629c <tcp_create_segment>
 801654a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801654c:	69fb      	ldr	r3, [r7, #28]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d063      	beq.n	801661a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8016552:	697b      	ldr	r3, [r7, #20]
 8016554:	685b      	ldr	r3, [r3, #4]
 8016556:	4618      	mov	r0, r3
 8016558:	f7fb fdc4 	bl	80120e4 <pbuf_clen>
 801655c:	4603      	mov	r3, r0
 801655e:	461a      	mov	r2, r3
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016566:	1a9b      	subs	r3, r3, r2
 8016568:	b29a      	uxth	r2, r3
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016570:	697b      	ldr	r3, [r7, #20]
 8016572:	6858      	ldr	r0, [r3, #4]
 8016574:	697b      	ldr	r3, [r7, #20]
 8016576:	685b      	ldr	r3, [r3, #4]
 8016578:	891a      	ldrh	r2, [r3, #8]
 801657a:	89bb      	ldrh	r3, [r7, #12]
 801657c:	1ad3      	subs	r3, r2, r3
 801657e:	b29b      	uxth	r3, r3
 8016580:	4619      	mov	r1, r3
 8016582:	f7fb fb9b 	bl	8011cbc <pbuf_realloc>
  useg->len -= remainder;
 8016586:	697b      	ldr	r3, [r7, #20]
 8016588:	891a      	ldrh	r2, [r3, #8]
 801658a:	89bb      	ldrh	r3, [r7, #12]
 801658c:	1ad3      	subs	r3, r2, r3
 801658e:	b29a      	uxth	r2, r3
 8016590:	697b      	ldr	r3, [r7, #20]
 8016592:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016594:	697b      	ldr	r3, [r7, #20]
 8016596:	68db      	ldr	r3, [r3, #12]
 8016598:	899b      	ldrh	r3, [r3, #12]
 801659a:	b29c      	uxth	r4, r3
 801659c:	7efb      	ldrb	r3, [r7, #27]
 801659e:	b29b      	uxth	r3, r3
 80165a0:	4618      	mov	r0, r3
 80165a2:	f7fa f85b 	bl	801065c <lwip_htons>
 80165a6:	4603      	mov	r3, r0
 80165a8:	461a      	mov	r2, r3
 80165aa:	697b      	ldr	r3, [r7, #20]
 80165ac:	68db      	ldr	r3, [r3, #12]
 80165ae:	4322      	orrs	r2, r4
 80165b0:	b292      	uxth	r2, r2
 80165b2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80165b4:	697b      	ldr	r3, [r7, #20]
 80165b6:	685b      	ldr	r3, [r3, #4]
 80165b8:	4618      	mov	r0, r3
 80165ba:	f7fb fd93 	bl	80120e4 <pbuf_clen>
 80165be:	4603      	mov	r3, r0
 80165c0:	461a      	mov	r2, r3
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80165c8:	4413      	add	r3, r2
 80165ca:	b29a      	uxth	r2, r3
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80165d2:	69fb      	ldr	r3, [r7, #28]
 80165d4:	685b      	ldr	r3, [r3, #4]
 80165d6:	4618      	mov	r0, r3
 80165d8:	f7fb fd84 	bl	80120e4 <pbuf_clen>
 80165dc:	4603      	mov	r3, r0
 80165de:	461a      	mov	r2, r3
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80165e6:	4413      	add	r3, r2
 80165e8:	b29a      	uxth	r2, r3
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80165f0:	697b      	ldr	r3, [r7, #20]
 80165f2:	681a      	ldr	r2, [r3, #0]
 80165f4:	69fb      	ldr	r3, [r7, #28]
 80165f6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80165f8:	697b      	ldr	r3, [r7, #20]
 80165fa:	69fa      	ldr	r2, [r7, #28]
 80165fc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80165fe:	69fb      	ldr	r3, [r7, #28]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	2b00      	cmp	r3, #0
 8016604:	d103      	bne.n	801660e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	2200      	movs	r2, #0
 801660a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801660e:	2300      	movs	r3, #0
 8016610:	e016      	b.n	8016640 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016612:	bf00      	nop
 8016614:	e002      	b.n	801661c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016616:	bf00      	nop
 8016618:	e000      	b.n	801661c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801661a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801661c:	69fb      	ldr	r3, [r7, #28]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d006      	beq.n	8016630 <tcp_split_unsent_seg+0x25c>
 8016622:	4b09      	ldr	r3, [pc, #36]	@ (8016648 <tcp_split_unsent_seg+0x274>)
 8016624:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8016628:	490d      	ldr	r1, [pc, #52]	@ (8016660 <tcp_split_unsent_seg+0x28c>)
 801662a:	4809      	ldr	r0, [pc, #36]	@ (8016650 <tcp_split_unsent_seg+0x27c>)
 801662c:	f006 feca 	bl	801d3c4 <iprintf>
  if (p != NULL) {
 8016630:	693b      	ldr	r3, [r7, #16]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d002      	beq.n	801663c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016636:	6938      	ldr	r0, [r7, #16]
 8016638:	f7fb fcc6 	bl	8011fc8 <pbuf_free>
  }

  return ERR_MEM;
 801663c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016640:	4618      	mov	r0, r3
 8016642:	3724      	adds	r7, #36	@ 0x24
 8016644:	46bd      	mov	sp, r7
 8016646:	bd90      	pop	{r4, r7, pc}
 8016648:	08020d54 	.word	0x08020d54
 801664c:	080210e8 	.word	0x080210e8
 8016650:	08020da8 	.word	0x08020da8
 8016654:	0802110c 	.word	0x0802110c
 8016658:	08021130 	.word	0x08021130
 801665c:	08021140 	.word	0x08021140
 8016660:	08021150 	.word	0x08021150

08016664 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016664:	b590      	push	{r4, r7, lr}
 8016666:	b085      	sub	sp, #20
 8016668:	af00      	add	r7, sp, #0
 801666a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d106      	bne.n	8016680 <tcp_send_fin+0x1c>
 8016672:	4b21      	ldr	r3, [pc, #132]	@ (80166f8 <tcp_send_fin+0x94>)
 8016674:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8016678:	4920      	ldr	r1, [pc, #128]	@ (80166fc <tcp_send_fin+0x98>)
 801667a:	4821      	ldr	r0, [pc, #132]	@ (8016700 <tcp_send_fin+0x9c>)
 801667c:	f006 fea2 	bl	801d3c4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016684:	2b00      	cmp	r3, #0
 8016686:	d02e      	beq.n	80166e6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801668c:	60fb      	str	r3, [r7, #12]
 801668e:	e002      	b.n	8016696 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d1f8      	bne.n	8016690 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	68db      	ldr	r3, [r3, #12]
 80166a2:	899b      	ldrh	r3, [r3, #12]
 80166a4:	b29b      	uxth	r3, r3
 80166a6:	4618      	mov	r0, r3
 80166a8:	f7f9 ffd8 	bl	801065c <lwip_htons>
 80166ac:	4603      	mov	r3, r0
 80166ae:	b2db      	uxtb	r3, r3
 80166b0:	f003 0307 	and.w	r3, r3, #7
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d116      	bne.n	80166e6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	68db      	ldr	r3, [r3, #12]
 80166bc:	899b      	ldrh	r3, [r3, #12]
 80166be:	b29c      	uxth	r4, r3
 80166c0:	2001      	movs	r0, #1
 80166c2:	f7f9 ffcb 	bl	801065c <lwip_htons>
 80166c6:	4603      	mov	r3, r0
 80166c8:	461a      	mov	r2, r3
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	68db      	ldr	r3, [r3, #12]
 80166ce:	4322      	orrs	r2, r4
 80166d0:	b292      	uxth	r2, r2
 80166d2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	8b5b      	ldrh	r3, [r3, #26]
 80166d8:	f043 0320 	orr.w	r3, r3, #32
 80166dc:	b29a      	uxth	r2, r3
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80166e2:	2300      	movs	r3, #0
 80166e4:	e004      	b.n	80166f0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80166e6:	2101      	movs	r1, #1
 80166e8:	6878      	ldr	r0, [r7, #4]
 80166ea:	f000 f80b 	bl	8016704 <tcp_enqueue_flags>
 80166ee:	4603      	mov	r3, r0
}
 80166f0:	4618      	mov	r0, r3
 80166f2:	3714      	adds	r7, #20
 80166f4:	46bd      	mov	sp, r7
 80166f6:	bd90      	pop	{r4, r7, pc}
 80166f8:	08020d54 	.word	0x08020d54
 80166fc:	0802115c 	.word	0x0802115c
 8016700:	08020da8 	.word	0x08020da8

08016704 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b08a      	sub	sp, #40	@ 0x28
 8016708:	af02      	add	r7, sp, #8
 801670a:	6078      	str	r0, [r7, #4]
 801670c:	460b      	mov	r3, r1
 801670e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016710:	2300      	movs	r3, #0
 8016712:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016714:	2300      	movs	r3, #0
 8016716:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016718:	78fb      	ldrb	r3, [r7, #3]
 801671a:	f003 0303 	and.w	r3, r3, #3
 801671e:	2b00      	cmp	r3, #0
 8016720:	d106      	bne.n	8016730 <tcp_enqueue_flags+0x2c>
 8016722:	4b67      	ldr	r3, [pc, #412]	@ (80168c0 <tcp_enqueue_flags+0x1bc>)
 8016724:	f240 4211 	movw	r2, #1041	@ 0x411
 8016728:	4966      	ldr	r1, [pc, #408]	@ (80168c4 <tcp_enqueue_flags+0x1c0>)
 801672a:	4867      	ldr	r0, [pc, #412]	@ (80168c8 <tcp_enqueue_flags+0x1c4>)
 801672c:	f006 fe4a 	bl	801d3c4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	2b00      	cmp	r3, #0
 8016734:	d106      	bne.n	8016744 <tcp_enqueue_flags+0x40>
 8016736:	4b62      	ldr	r3, [pc, #392]	@ (80168c0 <tcp_enqueue_flags+0x1bc>)
 8016738:	f240 4213 	movw	r2, #1043	@ 0x413
 801673c:	4963      	ldr	r1, [pc, #396]	@ (80168cc <tcp_enqueue_flags+0x1c8>)
 801673e:	4862      	ldr	r0, [pc, #392]	@ (80168c8 <tcp_enqueue_flags+0x1c4>)
 8016740:	f006 fe40 	bl	801d3c4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016744:	78fb      	ldrb	r3, [r7, #3]
 8016746:	f003 0302 	and.w	r3, r3, #2
 801674a:	2b00      	cmp	r3, #0
 801674c:	d001      	beq.n	8016752 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801674e:	2301      	movs	r3, #1
 8016750:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016752:	7ffb      	ldrb	r3, [r7, #31]
 8016754:	009b      	lsls	r3, r3, #2
 8016756:	b2db      	uxtb	r3, r3
 8016758:	f003 0304 	and.w	r3, r3, #4
 801675c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801675e:	7dfb      	ldrb	r3, [r7, #23]
 8016760:	b29b      	uxth	r3, r3
 8016762:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016766:	4619      	mov	r1, r3
 8016768:	2036      	movs	r0, #54	@ 0x36
 801676a:	f7fb f949 	bl	8011a00 <pbuf_alloc>
 801676e:	6138      	str	r0, [r7, #16]
 8016770:	693b      	ldr	r3, [r7, #16]
 8016772:	2b00      	cmp	r3, #0
 8016774:	d109      	bne.n	801678a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	8b5b      	ldrh	r3, [r3, #26]
 801677a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801677e:	b29a      	uxth	r2, r3
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016784:	f04f 33ff 	mov.w	r3, #4294967295
 8016788:	e095      	b.n	80168b6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801678a:	693b      	ldr	r3, [r7, #16]
 801678c:	895a      	ldrh	r2, [r3, #10]
 801678e:	7dfb      	ldrb	r3, [r7, #23]
 8016790:	b29b      	uxth	r3, r3
 8016792:	429a      	cmp	r2, r3
 8016794:	d206      	bcs.n	80167a4 <tcp_enqueue_flags+0xa0>
 8016796:	4b4a      	ldr	r3, [pc, #296]	@ (80168c0 <tcp_enqueue_flags+0x1bc>)
 8016798:	f240 4239 	movw	r2, #1081	@ 0x439
 801679c:	494c      	ldr	r1, [pc, #304]	@ (80168d0 <tcp_enqueue_flags+0x1cc>)
 801679e:	484a      	ldr	r0, [pc, #296]	@ (80168c8 <tcp_enqueue_flags+0x1c4>)
 80167a0:	f006 fe10 	bl	801d3c4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80167a8:	78fa      	ldrb	r2, [r7, #3]
 80167aa:	7ffb      	ldrb	r3, [r7, #31]
 80167ac:	9300      	str	r3, [sp, #0]
 80167ae:	460b      	mov	r3, r1
 80167b0:	6939      	ldr	r1, [r7, #16]
 80167b2:	6878      	ldr	r0, [r7, #4]
 80167b4:	f7ff fd72 	bl	801629c <tcp_create_segment>
 80167b8:	60f8      	str	r0, [r7, #12]
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d109      	bne.n	80167d4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	8b5b      	ldrh	r3, [r3, #26]
 80167c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80167c8:	b29a      	uxth	r2, r3
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80167ce:	f04f 33ff 	mov.w	r3, #4294967295
 80167d2:	e070      	b.n	80168b6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	68db      	ldr	r3, [r3, #12]
 80167d8:	f003 0303 	and.w	r3, r3, #3
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d006      	beq.n	80167ee <tcp_enqueue_flags+0xea>
 80167e0:	4b37      	ldr	r3, [pc, #220]	@ (80168c0 <tcp_enqueue_flags+0x1bc>)
 80167e2:	f240 4242 	movw	r2, #1090	@ 0x442
 80167e6:	493b      	ldr	r1, [pc, #236]	@ (80168d4 <tcp_enqueue_flags+0x1d0>)
 80167e8:	4837      	ldr	r0, [pc, #220]	@ (80168c8 <tcp_enqueue_flags+0x1c4>)
 80167ea:	f006 fdeb 	bl	801d3c4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	891b      	ldrh	r3, [r3, #8]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d006      	beq.n	8016804 <tcp_enqueue_flags+0x100>
 80167f6:	4b32      	ldr	r3, [pc, #200]	@ (80168c0 <tcp_enqueue_flags+0x1bc>)
 80167f8:	f240 4243 	movw	r2, #1091	@ 0x443
 80167fc:	4936      	ldr	r1, [pc, #216]	@ (80168d8 <tcp_enqueue_flags+0x1d4>)
 80167fe:	4832      	ldr	r0, [pc, #200]	@ (80168c8 <tcp_enqueue_flags+0x1c4>)
 8016800:	f006 fde0 	bl	801d3c4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016808:	2b00      	cmp	r3, #0
 801680a:	d103      	bne.n	8016814 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	68fa      	ldr	r2, [r7, #12]
 8016810:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016812:	e00d      	b.n	8016830 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016818:	61bb      	str	r3, [r7, #24]
 801681a:	e002      	b.n	8016822 <tcp_enqueue_flags+0x11e>
 801681c:	69bb      	ldr	r3, [r7, #24]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	61bb      	str	r3, [r7, #24]
 8016822:	69bb      	ldr	r3, [r7, #24]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d1f8      	bne.n	801681c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801682a:	69bb      	ldr	r3, [r7, #24]
 801682c:	68fa      	ldr	r2, [r7, #12]
 801682e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	2200      	movs	r2, #0
 8016834:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016838:	78fb      	ldrb	r3, [r7, #3]
 801683a:	f003 0302 	and.w	r3, r3, #2
 801683e:	2b00      	cmp	r3, #0
 8016840:	d104      	bne.n	801684c <tcp_enqueue_flags+0x148>
 8016842:	78fb      	ldrb	r3, [r7, #3]
 8016844:	f003 0301 	and.w	r3, r3, #1
 8016848:	2b00      	cmp	r3, #0
 801684a:	d004      	beq.n	8016856 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016850:	1c5a      	adds	r2, r3, #1
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016856:	78fb      	ldrb	r3, [r7, #3]
 8016858:	f003 0301 	and.w	r3, r3, #1
 801685c:	2b00      	cmp	r3, #0
 801685e:	d006      	beq.n	801686e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	8b5b      	ldrh	r3, [r3, #26]
 8016864:	f043 0320 	orr.w	r3, r3, #32
 8016868:	b29a      	uxth	r2, r3
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	685b      	ldr	r3, [r3, #4]
 8016872:	4618      	mov	r0, r3
 8016874:	f7fb fc36 	bl	80120e4 <pbuf_clen>
 8016878:	4603      	mov	r3, r0
 801687a:	461a      	mov	r2, r3
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016882:	4413      	add	r3, r2
 8016884:	b29a      	uxth	r2, r3
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016892:	2b00      	cmp	r3, #0
 8016894:	d00e      	beq.n	80168b4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801689a:	2b00      	cmp	r3, #0
 801689c:	d10a      	bne.n	80168b4 <tcp_enqueue_flags+0x1b0>
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d106      	bne.n	80168b4 <tcp_enqueue_flags+0x1b0>
 80168a6:	4b06      	ldr	r3, [pc, #24]	@ (80168c0 <tcp_enqueue_flags+0x1bc>)
 80168a8:	f240 4265 	movw	r2, #1125	@ 0x465
 80168ac:	490b      	ldr	r1, [pc, #44]	@ (80168dc <tcp_enqueue_flags+0x1d8>)
 80168ae:	4806      	ldr	r0, [pc, #24]	@ (80168c8 <tcp_enqueue_flags+0x1c4>)
 80168b0:	f006 fd88 	bl	801d3c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80168b4:	2300      	movs	r3, #0
}
 80168b6:	4618      	mov	r0, r3
 80168b8:	3720      	adds	r7, #32
 80168ba:	46bd      	mov	sp, r7
 80168bc:	bd80      	pop	{r7, pc}
 80168be:	bf00      	nop
 80168c0:	08020d54 	.word	0x08020d54
 80168c4:	08021178 	.word	0x08021178
 80168c8:	08020da8 	.word	0x08020da8
 80168cc:	080211d0 	.word	0x080211d0
 80168d0:	080211f0 	.word	0x080211f0
 80168d4:	0802122c 	.word	0x0802122c
 80168d8:	08021244 	.word	0x08021244
 80168dc:	08021270 	.word	0x08021270

080168e0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80168e0:	b5b0      	push	{r4, r5, r7, lr}
 80168e2:	b08a      	sub	sp, #40	@ 0x28
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d106      	bne.n	80168fc <tcp_output+0x1c>
 80168ee:	4b8a      	ldr	r3, [pc, #552]	@ (8016b18 <tcp_output+0x238>)
 80168f0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80168f4:	4989      	ldr	r1, [pc, #548]	@ (8016b1c <tcp_output+0x23c>)
 80168f6:	488a      	ldr	r0, [pc, #552]	@ (8016b20 <tcp_output+0x240>)
 80168f8:	f006 fd64 	bl	801d3c4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	7d1b      	ldrb	r3, [r3, #20]
 8016900:	2b01      	cmp	r3, #1
 8016902:	d106      	bne.n	8016912 <tcp_output+0x32>
 8016904:	4b84      	ldr	r3, [pc, #528]	@ (8016b18 <tcp_output+0x238>)
 8016906:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801690a:	4986      	ldr	r1, [pc, #536]	@ (8016b24 <tcp_output+0x244>)
 801690c:	4884      	ldr	r0, [pc, #528]	@ (8016b20 <tcp_output+0x240>)
 801690e:	f006 fd59 	bl	801d3c4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016912:	4b85      	ldr	r3, [pc, #532]	@ (8016b28 <tcp_output+0x248>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	687a      	ldr	r2, [r7, #4]
 8016918:	429a      	cmp	r2, r3
 801691a:	d101      	bne.n	8016920 <tcp_output+0x40>
    return ERR_OK;
 801691c:	2300      	movs	r3, #0
 801691e:	e1ce      	b.n	8016cbe <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801692c:	4293      	cmp	r3, r2
 801692e:	bf28      	it	cs
 8016930:	4613      	movcs	r3, r2
 8016932:	b29b      	uxth	r3, r3
 8016934:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801693a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801693c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801693e:	2b00      	cmp	r3, #0
 8016940:	d10b      	bne.n	801695a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	8b5b      	ldrh	r3, [r3, #26]
 8016946:	f003 0302 	and.w	r3, r3, #2
 801694a:	2b00      	cmp	r3, #0
 801694c:	f000 81aa 	beq.w	8016ca4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016950:	6878      	ldr	r0, [r7, #4]
 8016952:	f000 fdcb 	bl	80174ec <tcp_send_empty_ack>
 8016956:	4603      	mov	r3, r0
 8016958:	e1b1      	b.n	8016cbe <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801695a:	6879      	ldr	r1, [r7, #4]
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	3304      	adds	r3, #4
 8016960:	461a      	mov	r2, r3
 8016962:	6878      	ldr	r0, [r7, #4]
 8016964:	f7ff fc7e 	bl	8016264 <tcp_route>
 8016968:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801696a:	697b      	ldr	r3, [r7, #20]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d102      	bne.n	8016976 <tcp_output+0x96>
    return ERR_RTE;
 8016970:	f06f 0303 	mvn.w	r3, #3
 8016974:	e1a3      	b.n	8016cbe <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	2b00      	cmp	r3, #0
 801697a:	d003      	beq.n	8016984 <tcp_output+0xa4>
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	2b00      	cmp	r3, #0
 8016982:	d111      	bne.n	80169a8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016984:	697b      	ldr	r3, [r7, #20]
 8016986:	2b00      	cmp	r3, #0
 8016988:	d002      	beq.n	8016990 <tcp_output+0xb0>
 801698a:	697b      	ldr	r3, [r7, #20]
 801698c:	3304      	adds	r3, #4
 801698e:	e000      	b.n	8016992 <tcp_output+0xb2>
 8016990:	2300      	movs	r3, #0
 8016992:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016994:	693b      	ldr	r3, [r7, #16]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d102      	bne.n	80169a0 <tcp_output+0xc0>
      return ERR_RTE;
 801699a:	f06f 0303 	mvn.w	r3, #3
 801699e:	e18e      	b.n	8016cbe <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80169a0:	693b      	ldr	r3, [r7, #16]
 80169a2:	681a      	ldr	r2, [r3, #0]
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80169a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169aa:	68db      	ldr	r3, [r3, #12]
 80169ac:	685b      	ldr	r3, [r3, #4]
 80169ae:	4618      	mov	r0, r3
 80169b0:	f7f9 fe69 	bl	8010686 <lwip_htonl>
 80169b4:	4602      	mov	r2, r0
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80169ba:	1ad3      	subs	r3, r2, r3
 80169bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80169be:	8912      	ldrh	r2, [r2, #8]
 80169c0:	4413      	add	r3, r2
 80169c2:	69ba      	ldr	r2, [r7, #24]
 80169c4:	429a      	cmp	r2, r3
 80169c6:	d227      	bcs.n	8016a18 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80169ce:	461a      	mov	r2, r3
 80169d0:	69bb      	ldr	r3, [r7, #24]
 80169d2:	4293      	cmp	r3, r2
 80169d4:	d114      	bne.n	8016a00 <tcp_output+0x120>
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d110      	bne.n	8016a00 <tcp_output+0x120>
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d10b      	bne.n	8016a00 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	2200      	movs	r2, #0
 80169ec:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	2201      	movs	r2, #1
 80169f4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	2200      	movs	r2, #0
 80169fc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	8b5b      	ldrh	r3, [r3, #26]
 8016a04:	f003 0302 	and.w	r3, r3, #2
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	f000 814d 	beq.w	8016ca8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016a0e:	6878      	ldr	r0, [r7, #4]
 8016a10:	f000 fd6c 	bl	80174ec <tcp_send_empty_ack>
 8016a14:	4603      	mov	r3, r0
 8016a16:	e152      	b.n	8016cbe <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016a24:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016a26:	6a3b      	ldr	r3, [r7, #32]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	f000 811c 	beq.w	8016c66 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016a2e:	e002      	b.n	8016a36 <tcp_output+0x156>
 8016a30:	6a3b      	ldr	r3, [r7, #32]
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	623b      	str	r3, [r7, #32]
 8016a36:	6a3b      	ldr	r3, [r7, #32]
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d1f8      	bne.n	8016a30 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016a3e:	e112      	b.n	8016c66 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a42:	68db      	ldr	r3, [r3, #12]
 8016a44:	899b      	ldrh	r3, [r3, #12]
 8016a46:	b29b      	uxth	r3, r3
 8016a48:	4618      	mov	r0, r3
 8016a4a:	f7f9 fe07 	bl	801065c <lwip_htons>
 8016a4e:	4603      	mov	r3, r0
 8016a50:	b2db      	uxtb	r3, r3
 8016a52:	f003 0304 	and.w	r3, r3, #4
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d006      	beq.n	8016a68 <tcp_output+0x188>
 8016a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8016b18 <tcp_output+0x238>)
 8016a5c:	f240 5236 	movw	r2, #1334	@ 0x536
 8016a60:	4932      	ldr	r1, [pc, #200]	@ (8016b2c <tcp_output+0x24c>)
 8016a62:	482f      	ldr	r0, [pc, #188]	@ (8016b20 <tcp_output+0x240>)
 8016a64:	f006 fcae 	bl	801d3c4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d01f      	beq.n	8016ab0 <tcp_output+0x1d0>
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	8b5b      	ldrh	r3, [r3, #26]
 8016a74:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d119      	bne.n	8016ab0 <tcp_output+0x1d0>
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d00b      	beq.n	8016a9c <tcp_output+0x1bc>
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d110      	bne.n	8016ab0 <tcp_output+0x1d0>
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a92:	891a      	ldrh	r2, [r3, #8]
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016a98:	429a      	cmp	r2, r3
 8016a9a:	d209      	bcs.n	8016ab0 <tcp_output+0x1d0>
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d004      	beq.n	8016ab0 <tcp_output+0x1d0>
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016aac:	2b08      	cmp	r3, #8
 8016aae:	d901      	bls.n	8016ab4 <tcp_output+0x1d4>
 8016ab0:	2301      	movs	r3, #1
 8016ab2:	e000      	b.n	8016ab6 <tcp_output+0x1d6>
 8016ab4:	2300      	movs	r3, #0
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d106      	bne.n	8016ac8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	8b5b      	ldrh	r3, [r3, #26]
 8016abe:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	f000 80e4 	beq.w	8016c90 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	7d1b      	ldrb	r3, [r3, #20]
 8016acc:	2b02      	cmp	r3, #2
 8016ace:	d00d      	beq.n	8016aec <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ad2:	68db      	ldr	r3, [r3, #12]
 8016ad4:	899b      	ldrh	r3, [r3, #12]
 8016ad6:	b29c      	uxth	r4, r3
 8016ad8:	2010      	movs	r0, #16
 8016ada:	f7f9 fdbf 	bl	801065c <lwip_htons>
 8016ade:	4603      	mov	r3, r0
 8016ae0:	461a      	mov	r2, r3
 8016ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ae4:	68db      	ldr	r3, [r3, #12]
 8016ae6:	4322      	orrs	r2, r4
 8016ae8:	b292      	uxth	r2, r2
 8016aea:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016aec:	697a      	ldr	r2, [r7, #20]
 8016aee:	6879      	ldr	r1, [r7, #4]
 8016af0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016af2:	f000 f909 	bl	8016d08 <tcp_output_segment>
 8016af6:	4603      	mov	r3, r0
 8016af8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d016      	beq.n	8016b30 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	8b5b      	ldrh	r3, [r3, #26]
 8016b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016b0a:	b29a      	uxth	r2, r3
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	835a      	strh	r2, [r3, #26]
      return err;
 8016b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b14:	e0d3      	b.n	8016cbe <tcp_output+0x3de>
 8016b16:	bf00      	nop
 8016b18:	08020d54 	.word	0x08020d54
 8016b1c:	08021298 	.word	0x08021298
 8016b20:	08020da8 	.word	0x08020da8
 8016b24:	080212b0 	.word	0x080212b0
 8016b28:	2400cc80 	.word	0x2400cc80
 8016b2c:	080212d8 	.word	0x080212d8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b32:	681a      	ldr	r2, [r3, #0]
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	7d1b      	ldrb	r3, [r3, #20]
 8016b3c:	2b02      	cmp	r3, #2
 8016b3e:	d006      	beq.n	8016b4e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	8b5b      	ldrh	r3, [r3, #26]
 8016b44:	f023 0303 	bic.w	r3, r3, #3
 8016b48:	b29a      	uxth	r2, r3
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b50:	68db      	ldr	r3, [r3, #12]
 8016b52:	685b      	ldr	r3, [r3, #4]
 8016b54:	4618      	mov	r0, r3
 8016b56:	f7f9 fd96 	bl	8010686 <lwip_htonl>
 8016b5a:	4604      	mov	r4, r0
 8016b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b5e:	891b      	ldrh	r3, [r3, #8]
 8016b60:	461d      	mov	r5, r3
 8016b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b64:	68db      	ldr	r3, [r3, #12]
 8016b66:	899b      	ldrh	r3, [r3, #12]
 8016b68:	b29b      	uxth	r3, r3
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	f7f9 fd76 	bl	801065c <lwip_htons>
 8016b70:	4603      	mov	r3, r0
 8016b72:	b2db      	uxtb	r3, r3
 8016b74:	f003 0303 	and.w	r3, r3, #3
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d001      	beq.n	8016b80 <tcp_output+0x2a0>
 8016b7c:	2301      	movs	r3, #1
 8016b7e:	e000      	b.n	8016b82 <tcp_output+0x2a2>
 8016b80:	2300      	movs	r3, #0
 8016b82:	442b      	add	r3, r5
 8016b84:	4423      	add	r3, r4
 8016b86:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016b8c:	68bb      	ldr	r3, [r7, #8]
 8016b8e:	1ad3      	subs	r3, r2, r3
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	da02      	bge.n	8016b9a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	68ba      	ldr	r2, [r7, #8]
 8016b98:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b9c:	891b      	ldrh	r3, [r3, #8]
 8016b9e:	461c      	mov	r4, r3
 8016ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ba2:	68db      	ldr	r3, [r3, #12]
 8016ba4:	899b      	ldrh	r3, [r3, #12]
 8016ba6:	b29b      	uxth	r3, r3
 8016ba8:	4618      	mov	r0, r3
 8016baa:	f7f9 fd57 	bl	801065c <lwip_htons>
 8016bae:	4603      	mov	r3, r0
 8016bb0:	b2db      	uxtb	r3, r3
 8016bb2:	f003 0303 	and.w	r3, r3, #3
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d001      	beq.n	8016bbe <tcp_output+0x2de>
 8016bba:	2301      	movs	r3, #1
 8016bbc:	e000      	b.n	8016bc0 <tcp_output+0x2e0>
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	4423      	add	r3, r4
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d049      	beq.n	8016c5a <tcp_output+0x37a>
      seg->next = NULL;
 8016bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bc8:	2200      	movs	r2, #0
 8016bca:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d105      	bne.n	8016be0 <tcp_output+0x300>
        pcb->unacked = seg;
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016bd8:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8016bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bdc:	623b      	str	r3, [r7, #32]
 8016bde:	e03f      	b.n	8016c60 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016be2:	68db      	ldr	r3, [r3, #12]
 8016be4:	685b      	ldr	r3, [r3, #4]
 8016be6:	4618      	mov	r0, r3
 8016be8:	f7f9 fd4d 	bl	8010686 <lwip_htonl>
 8016bec:	4604      	mov	r4, r0
 8016bee:	6a3b      	ldr	r3, [r7, #32]
 8016bf0:	68db      	ldr	r3, [r3, #12]
 8016bf2:	685b      	ldr	r3, [r3, #4]
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	f7f9 fd46 	bl	8010686 <lwip_htonl>
 8016bfa:	4603      	mov	r3, r0
 8016bfc:	1ae3      	subs	r3, r4, r3
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	da24      	bge.n	8016c4c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	3370      	adds	r3, #112	@ 0x70
 8016c06:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016c08:	e002      	b.n	8016c10 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016c0a:	69fb      	ldr	r3, [r7, #28]
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016c10:	69fb      	ldr	r3, [r7, #28]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d011      	beq.n	8016c3c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016c18:	69fb      	ldr	r3, [r7, #28]
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	68db      	ldr	r3, [r3, #12]
 8016c1e:	685b      	ldr	r3, [r3, #4]
 8016c20:	4618      	mov	r0, r3
 8016c22:	f7f9 fd30 	bl	8010686 <lwip_htonl>
 8016c26:	4604      	mov	r4, r0
 8016c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c2a:	68db      	ldr	r3, [r3, #12]
 8016c2c:	685b      	ldr	r3, [r3, #4]
 8016c2e:	4618      	mov	r0, r3
 8016c30:	f7f9 fd29 	bl	8010686 <lwip_htonl>
 8016c34:	4603      	mov	r3, r0
 8016c36:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	dbe6      	blt.n	8016c0a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016c3c:	69fb      	ldr	r3, [r7, #28]
 8016c3e:	681a      	ldr	r2, [r3, #0]
 8016c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c42:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016c44:	69fb      	ldr	r3, [r7, #28]
 8016c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016c48:	601a      	str	r2, [r3, #0]
 8016c4a:	e009      	b.n	8016c60 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016c4c:	6a3b      	ldr	r3, [r7, #32]
 8016c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016c50:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016c52:	6a3b      	ldr	r3, [r7, #32]
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	623b      	str	r3, [r7, #32]
 8016c58:	e002      	b.n	8016c60 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016c5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016c5c:	f7fc fc45 	bl	80134ea <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016c64:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8016c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d012      	beq.n	8016c92 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c6e:	68db      	ldr	r3, [r3, #12]
 8016c70:	685b      	ldr	r3, [r3, #4]
 8016c72:	4618      	mov	r0, r3
 8016c74:	f7f9 fd07 	bl	8010686 <lwip_htonl>
 8016c78:	4602      	mov	r2, r0
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016c7e:	1ad3      	subs	r3, r2, r3
 8016c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016c82:	8912      	ldrh	r2, [r2, #8]
 8016c84:	4413      	add	r3, r2
  while (seg != NULL &&
 8016c86:	69ba      	ldr	r2, [r7, #24]
 8016c88:	429a      	cmp	r2, r3
 8016c8a:	f4bf aed9 	bcs.w	8016a40 <tcp_output+0x160>
 8016c8e:	e000      	b.n	8016c92 <tcp_output+0x3b2>
      break;
 8016c90:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d108      	bne.n	8016cac <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	2200      	movs	r2, #0
 8016c9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8016ca2:	e004      	b.n	8016cae <tcp_output+0x3ce>
    goto output_done;
 8016ca4:	bf00      	nop
 8016ca6:	e002      	b.n	8016cae <tcp_output+0x3ce>
    goto output_done;
 8016ca8:	bf00      	nop
 8016caa:	e000      	b.n	8016cae <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016cac:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	8b5b      	ldrh	r3, [r3, #26]
 8016cb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016cb6:	b29a      	uxth	r2, r3
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016cbc:	2300      	movs	r3, #0
}
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	3728      	adds	r7, #40	@ 0x28
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8016cc6:	bf00      	nop

08016cc8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b082      	sub	sp, #8
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d106      	bne.n	8016ce4 <tcp_output_segment_busy+0x1c>
 8016cd6:	4b09      	ldr	r3, [pc, #36]	@ (8016cfc <tcp_output_segment_busy+0x34>)
 8016cd8:	f240 529a 	movw	r2, #1434	@ 0x59a
 8016cdc:	4908      	ldr	r1, [pc, #32]	@ (8016d00 <tcp_output_segment_busy+0x38>)
 8016cde:	4809      	ldr	r0, [pc, #36]	@ (8016d04 <tcp_output_segment_busy+0x3c>)
 8016ce0:	f006 fb70 	bl	801d3c4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	685b      	ldr	r3, [r3, #4]
 8016ce8:	7b9b      	ldrb	r3, [r3, #14]
 8016cea:	2b01      	cmp	r3, #1
 8016cec:	d001      	beq.n	8016cf2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8016cee:	2301      	movs	r3, #1
 8016cf0:	e000      	b.n	8016cf4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016cf2:	2300      	movs	r3, #0
}
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	3708      	adds	r7, #8
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	bd80      	pop	{r7, pc}
 8016cfc:	08020d54 	.word	0x08020d54
 8016d00:	080212f0 	.word	0x080212f0
 8016d04:	08020da8 	.word	0x08020da8

08016d08 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016d08:	b5b0      	push	{r4, r5, r7, lr}
 8016d0a:	b08c      	sub	sp, #48	@ 0x30
 8016d0c:	af04      	add	r7, sp, #16
 8016d0e:	60f8      	str	r0, [r7, #12]
 8016d10:	60b9      	str	r1, [r7, #8]
 8016d12:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d106      	bne.n	8016d28 <tcp_output_segment+0x20>
 8016d1a:	4b64      	ldr	r3, [pc, #400]	@ (8016eac <tcp_output_segment+0x1a4>)
 8016d1c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8016d20:	4963      	ldr	r1, [pc, #396]	@ (8016eb0 <tcp_output_segment+0x1a8>)
 8016d22:	4864      	ldr	r0, [pc, #400]	@ (8016eb4 <tcp_output_segment+0x1ac>)
 8016d24:	f006 fb4e 	bl	801d3c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016d28:	68bb      	ldr	r3, [r7, #8]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d106      	bne.n	8016d3c <tcp_output_segment+0x34>
 8016d2e:	4b5f      	ldr	r3, [pc, #380]	@ (8016eac <tcp_output_segment+0x1a4>)
 8016d30:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8016d34:	4960      	ldr	r1, [pc, #384]	@ (8016eb8 <tcp_output_segment+0x1b0>)
 8016d36:	485f      	ldr	r0, [pc, #380]	@ (8016eb4 <tcp_output_segment+0x1ac>)
 8016d38:	f006 fb44 	bl	801d3c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d106      	bne.n	8016d50 <tcp_output_segment+0x48>
 8016d42:	4b5a      	ldr	r3, [pc, #360]	@ (8016eac <tcp_output_segment+0x1a4>)
 8016d44:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8016d48:	495c      	ldr	r1, [pc, #368]	@ (8016ebc <tcp_output_segment+0x1b4>)
 8016d4a:	485a      	ldr	r0, [pc, #360]	@ (8016eb4 <tcp_output_segment+0x1ac>)
 8016d4c:	f006 fb3a 	bl	801d3c4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8016d50:	68f8      	ldr	r0, [r7, #12]
 8016d52:	f7ff ffb9 	bl	8016cc8 <tcp_output_segment_busy>
 8016d56:	4603      	mov	r3, r0
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d001      	beq.n	8016d60 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	e0a1      	b.n	8016ea4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016d60:	68bb      	ldr	r3, [r7, #8]
 8016d62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	68dc      	ldr	r4, [r3, #12]
 8016d68:	4610      	mov	r0, r2
 8016d6a:	f7f9 fc8c 	bl	8010686 <lwip_htonl>
 8016d6e:	4603      	mov	r3, r0
 8016d70:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016d72:	68bb      	ldr	r3, [r7, #8]
 8016d74:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	68dc      	ldr	r4, [r3, #12]
 8016d7a:	4610      	mov	r0, r2
 8016d7c:	f7f9 fc6e 	bl	801065c <lwip_htons>
 8016d80:	4603      	mov	r3, r0
 8016d82:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016d84:	68bb      	ldr	r3, [r7, #8]
 8016d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d88:	68ba      	ldr	r2, [r7, #8]
 8016d8a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8016d8c:	441a      	add	r2, r3
 8016d8e:	68bb      	ldr	r3, [r7, #8]
 8016d90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	68db      	ldr	r3, [r3, #12]
 8016d96:	3314      	adds	r3, #20
 8016d98:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	7a9b      	ldrb	r3, [r3, #10]
 8016d9e:	f003 0301 	and.w	r3, r3, #1
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d015      	beq.n	8016dd2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8016da6:	68bb      	ldr	r3, [r7, #8]
 8016da8:	3304      	adds	r3, #4
 8016daa:	461a      	mov	r2, r3
 8016dac:	6879      	ldr	r1, [r7, #4]
 8016dae:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8016db2:	f7fc fe91 	bl	8013ad8 <tcp_eff_send_mss_netif>
 8016db6:	4603      	mov	r3, r0
 8016db8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8016dba:	8b7b      	ldrh	r3, [r7, #26]
 8016dbc:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	f7f9 fc60 	bl	8010686 <lwip_htonl>
 8016dc6:	4602      	mov	r2, r0
 8016dc8:	69fb      	ldr	r3, [r7, #28]
 8016dca:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016dcc:	69fb      	ldr	r3, [r7, #28]
 8016dce:	3304      	adds	r3, #4
 8016dd0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8016dd2:	68bb      	ldr	r3, [r7, #8]
 8016dd4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	da02      	bge.n	8016de2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8016ddc:	68bb      	ldr	r3, [r7, #8]
 8016dde:	2200      	movs	r2, #0
 8016de0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8016de2:	68bb      	ldr	r3, [r7, #8]
 8016de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d10c      	bne.n	8016e04 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8016dea:	4b35      	ldr	r3, [pc, #212]	@ (8016ec0 <tcp_output_segment+0x1b8>)
 8016dec:	681a      	ldr	r2, [r3, #0]
 8016dee:	68bb      	ldr	r3, [r7, #8]
 8016df0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	68db      	ldr	r3, [r3, #12]
 8016df6:	685b      	ldr	r3, [r3, #4]
 8016df8:	4618      	mov	r0, r3
 8016dfa:	f7f9 fc44 	bl	8010686 <lwip_htonl>
 8016dfe:	4602      	mov	r2, r0
 8016e00:	68bb      	ldr	r3, [r7, #8]
 8016e02:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	68da      	ldr	r2, [r3, #12]
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	685b      	ldr	r3, [r3, #4]
 8016e0c:	685b      	ldr	r3, [r3, #4]
 8016e0e:	1ad3      	subs	r3, r2, r3
 8016e10:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	685b      	ldr	r3, [r3, #4]
 8016e16:	8959      	ldrh	r1, [r3, #10]
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	685b      	ldr	r3, [r3, #4]
 8016e1c:	8b3a      	ldrh	r2, [r7, #24]
 8016e1e:	1a8a      	subs	r2, r1, r2
 8016e20:	b292      	uxth	r2, r2
 8016e22:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	685b      	ldr	r3, [r3, #4]
 8016e28:	8919      	ldrh	r1, [r3, #8]
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	685b      	ldr	r3, [r3, #4]
 8016e2e:	8b3a      	ldrh	r2, [r7, #24]
 8016e30:	1a8a      	subs	r2, r1, r2
 8016e32:	b292      	uxth	r2, r2
 8016e34:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	685b      	ldr	r3, [r3, #4]
 8016e3a:	68fa      	ldr	r2, [r7, #12]
 8016e3c:	68d2      	ldr	r2, [r2, #12]
 8016e3e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	68db      	ldr	r3, [r3, #12]
 8016e44:	2200      	movs	r2, #0
 8016e46:	741a      	strb	r2, [r3, #16]
 8016e48:	2200      	movs	r2, #0
 8016e4a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8016e4c:	68fb      	ldr	r3, [r7, #12]
 8016e4e:	68da      	ldr	r2, [r3, #12]
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	7a9b      	ldrb	r3, [r3, #10]
 8016e54:	f003 0301 	and.w	r3, r3, #1
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d001      	beq.n	8016e60 <tcp_output_segment+0x158>
 8016e5c:	2318      	movs	r3, #24
 8016e5e:	e000      	b.n	8016e62 <tcp_output_segment+0x15a>
 8016e60:	2314      	movs	r3, #20
 8016e62:	4413      	add	r3, r2
 8016e64:	69fa      	ldr	r2, [r7, #28]
 8016e66:	429a      	cmp	r2, r3
 8016e68:	d006      	beq.n	8016e78 <tcp_output_segment+0x170>
 8016e6a:	4b10      	ldr	r3, [pc, #64]	@ (8016eac <tcp_output_segment+0x1a4>)
 8016e6c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8016e70:	4914      	ldr	r1, [pc, #80]	@ (8016ec4 <tcp_output_segment+0x1bc>)
 8016e72:	4810      	ldr	r0, [pc, #64]	@ (8016eb4 <tcp_output_segment+0x1ac>)
 8016e74:	f006 faa6 	bl	801d3c4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	6858      	ldr	r0, [r3, #4]
 8016e7c:	68b9      	ldr	r1, [r7, #8]
 8016e7e:	68bb      	ldr	r3, [r7, #8]
 8016e80:	1d1c      	adds	r4, r3, #4
 8016e82:	68bb      	ldr	r3, [r7, #8]
 8016e84:	7add      	ldrb	r5, [r3, #11]
 8016e86:	68bb      	ldr	r3, [r7, #8]
 8016e88:	7a9b      	ldrb	r3, [r3, #10]
 8016e8a:	687a      	ldr	r2, [r7, #4]
 8016e8c:	9202      	str	r2, [sp, #8]
 8016e8e:	2206      	movs	r2, #6
 8016e90:	9201      	str	r2, [sp, #4]
 8016e92:	9300      	str	r3, [sp, #0]
 8016e94:	462b      	mov	r3, r5
 8016e96:	4622      	mov	r2, r4
 8016e98:	f004 fc3c 	bl	801b714 <ip4_output_if>
 8016e9c:	4603      	mov	r3, r0
 8016e9e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016ea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016ea4:	4618      	mov	r0, r3
 8016ea6:	3720      	adds	r7, #32
 8016ea8:	46bd      	mov	sp, r7
 8016eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8016eac:	08020d54 	.word	0x08020d54
 8016eb0:	08021318 	.word	0x08021318
 8016eb4:	08020da8 	.word	0x08020da8
 8016eb8:	08021338 	.word	0x08021338
 8016ebc:	08021358 	.word	0x08021358
 8016ec0:	2400cc34 	.word	0x2400cc34
 8016ec4:	0802137c 	.word	0x0802137c

08016ec8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8016ec8:	b5b0      	push	{r4, r5, r7, lr}
 8016eca:	b084      	sub	sp, #16
 8016ecc:	af00      	add	r7, sp, #0
 8016ece:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d106      	bne.n	8016ee4 <tcp_rexmit_rto_prepare+0x1c>
 8016ed6:	4b31      	ldr	r3, [pc, #196]	@ (8016f9c <tcp_rexmit_rto_prepare+0xd4>)
 8016ed8:	f240 6263 	movw	r2, #1635	@ 0x663
 8016edc:	4930      	ldr	r1, [pc, #192]	@ (8016fa0 <tcp_rexmit_rto_prepare+0xd8>)
 8016ede:	4831      	ldr	r0, [pc, #196]	@ (8016fa4 <tcp_rexmit_rto_prepare+0xdc>)
 8016ee0:	f006 fa70 	bl	801d3c4 <iprintf>

  if (pcb->unacked == NULL) {
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d102      	bne.n	8016ef2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8016eec:	f06f 0305 	mvn.w	r3, #5
 8016ef0:	e050      	b.n	8016f94 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016ef6:	60fb      	str	r3, [r7, #12]
 8016ef8:	e00b      	b.n	8016f12 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8016efa:	68f8      	ldr	r0, [r7, #12]
 8016efc:	f7ff fee4 	bl	8016cc8 <tcp_output_segment_busy>
 8016f00:	4603      	mov	r3, r0
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d002      	beq.n	8016f0c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8016f06:	f06f 0305 	mvn.w	r3, #5
 8016f0a:	e043      	b.n	8016f94 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	60fb      	str	r3, [r7, #12]
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d1ef      	bne.n	8016efa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8016f1a:	68f8      	ldr	r0, [r7, #12]
 8016f1c:	f7ff fed4 	bl	8016cc8 <tcp_output_segment_busy>
 8016f20:	4603      	mov	r3, r0
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d002      	beq.n	8016f2c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8016f26:	f06f 0305 	mvn.w	r3, #5
 8016f2a:	e033      	b.n	8016f94 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	2200      	movs	r2, #0
 8016f40:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	8b5b      	ldrh	r3, [r3, #26]
 8016f46:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8016f4a:	b29a      	uxth	r2, r3
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	68db      	ldr	r3, [r3, #12]
 8016f54:	685b      	ldr	r3, [r3, #4]
 8016f56:	4618      	mov	r0, r3
 8016f58:	f7f9 fb95 	bl	8010686 <lwip_htonl>
 8016f5c:	4604      	mov	r4, r0
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	891b      	ldrh	r3, [r3, #8]
 8016f62:	461d      	mov	r5, r3
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	68db      	ldr	r3, [r3, #12]
 8016f68:	899b      	ldrh	r3, [r3, #12]
 8016f6a:	b29b      	uxth	r3, r3
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	f7f9 fb75 	bl	801065c <lwip_htons>
 8016f72:	4603      	mov	r3, r0
 8016f74:	b2db      	uxtb	r3, r3
 8016f76:	f003 0303 	and.w	r3, r3, #3
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d001      	beq.n	8016f82 <tcp_rexmit_rto_prepare+0xba>
 8016f7e:	2301      	movs	r3, #1
 8016f80:	e000      	b.n	8016f84 <tcp_rexmit_rto_prepare+0xbc>
 8016f82:	2300      	movs	r3, #0
 8016f84:	442b      	add	r3, r5
 8016f86:	18e2      	adds	r2, r4, r3
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	2200      	movs	r2, #0
 8016f90:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8016f92:	2300      	movs	r3, #0
}
 8016f94:	4618      	mov	r0, r3
 8016f96:	3710      	adds	r7, #16
 8016f98:	46bd      	mov	sp, r7
 8016f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8016f9c:	08020d54 	.word	0x08020d54
 8016fa0:	08021390 	.word	0x08021390
 8016fa4:	08020da8 	.word	0x08020da8

08016fa8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b082      	sub	sp, #8
 8016fac:	af00      	add	r7, sp, #0
 8016fae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d106      	bne.n	8016fc4 <tcp_rexmit_rto_commit+0x1c>
 8016fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8016fec <tcp_rexmit_rto_commit+0x44>)
 8016fb8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8016fbc:	490c      	ldr	r1, [pc, #48]	@ (8016ff0 <tcp_rexmit_rto_commit+0x48>)
 8016fbe:	480d      	ldr	r0, [pc, #52]	@ (8016ff4 <tcp_rexmit_rto_commit+0x4c>)
 8016fc0:	f006 fa00 	bl	801d3c4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016fca:	2bff      	cmp	r3, #255	@ 0xff
 8016fcc:	d007      	beq.n	8016fde <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016fd4:	3301      	adds	r3, #1
 8016fd6:	b2da      	uxtb	r2, r3
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8016fde:	6878      	ldr	r0, [r7, #4]
 8016fe0:	f7ff fc7e 	bl	80168e0 <tcp_output>
}
 8016fe4:	bf00      	nop
 8016fe6:	3708      	adds	r7, #8
 8016fe8:	46bd      	mov	sp, r7
 8016fea:	bd80      	pop	{r7, pc}
 8016fec:	08020d54 	.word	0x08020d54
 8016ff0:	080213b4 	.word	0x080213b4
 8016ff4:	08020da8 	.word	0x08020da8

08016ff8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8016ff8:	b580      	push	{r7, lr}
 8016ffa:	b082      	sub	sp, #8
 8016ffc:	af00      	add	r7, sp, #0
 8016ffe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	2b00      	cmp	r3, #0
 8017004:	d106      	bne.n	8017014 <tcp_rexmit_rto+0x1c>
 8017006:	4b0a      	ldr	r3, [pc, #40]	@ (8017030 <tcp_rexmit_rto+0x38>)
 8017008:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801700c:	4909      	ldr	r1, [pc, #36]	@ (8017034 <tcp_rexmit_rto+0x3c>)
 801700e:	480a      	ldr	r0, [pc, #40]	@ (8017038 <tcp_rexmit_rto+0x40>)
 8017010:	f006 f9d8 	bl	801d3c4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017014:	6878      	ldr	r0, [r7, #4]
 8017016:	f7ff ff57 	bl	8016ec8 <tcp_rexmit_rto_prepare>
 801701a:	4603      	mov	r3, r0
 801701c:	2b00      	cmp	r3, #0
 801701e:	d102      	bne.n	8017026 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017020:	6878      	ldr	r0, [r7, #4]
 8017022:	f7ff ffc1 	bl	8016fa8 <tcp_rexmit_rto_commit>
  }
}
 8017026:	bf00      	nop
 8017028:	3708      	adds	r7, #8
 801702a:	46bd      	mov	sp, r7
 801702c:	bd80      	pop	{r7, pc}
 801702e:	bf00      	nop
 8017030:	08020d54 	.word	0x08020d54
 8017034:	080213d8 	.word	0x080213d8
 8017038:	08020da8 	.word	0x08020da8

0801703c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801703c:	b590      	push	{r4, r7, lr}
 801703e:	b085      	sub	sp, #20
 8017040:	af00      	add	r7, sp, #0
 8017042:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d106      	bne.n	8017058 <tcp_rexmit+0x1c>
 801704a:	4b2f      	ldr	r3, [pc, #188]	@ (8017108 <tcp_rexmit+0xcc>)
 801704c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8017050:	492e      	ldr	r1, [pc, #184]	@ (801710c <tcp_rexmit+0xd0>)
 8017052:	482f      	ldr	r0, [pc, #188]	@ (8017110 <tcp_rexmit+0xd4>)
 8017054:	f006 f9b6 	bl	801d3c4 <iprintf>

  if (pcb->unacked == NULL) {
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801705c:	2b00      	cmp	r3, #0
 801705e:	d102      	bne.n	8017066 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017060:	f06f 0305 	mvn.w	r3, #5
 8017064:	e04c      	b.n	8017100 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801706a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801706c:	68b8      	ldr	r0, [r7, #8]
 801706e:	f7ff fe2b 	bl	8016cc8 <tcp_output_segment_busy>
 8017072:	4603      	mov	r3, r0
 8017074:	2b00      	cmp	r3, #0
 8017076:	d002      	beq.n	801707e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8017078:	f06f 0305 	mvn.w	r3, #5
 801707c:	e040      	b.n	8017100 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801707e:	68bb      	ldr	r3, [r7, #8]
 8017080:	681a      	ldr	r2, [r3, #0]
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	336c      	adds	r3, #108	@ 0x6c
 801708a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801708c:	e002      	b.n	8017094 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d011      	beq.n	80170c0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	68db      	ldr	r3, [r3, #12]
 80170a2:	685b      	ldr	r3, [r3, #4]
 80170a4:	4618      	mov	r0, r3
 80170a6:	f7f9 faee 	bl	8010686 <lwip_htonl>
 80170aa:	4604      	mov	r4, r0
 80170ac:	68bb      	ldr	r3, [r7, #8]
 80170ae:	68db      	ldr	r3, [r3, #12]
 80170b0:	685b      	ldr	r3, [r3, #4]
 80170b2:	4618      	mov	r0, r3
 80170b4:	f7f9 fae7 	bl	8010686 <lwip_htonl>
 80170b8:	4603      	mov	r3, r0
 80170ba:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80170bc:	2b00      	cmp	r3, #0
 80170be:	dbe6      	blt.n	801708e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	681a      	ldr	r2, [r3, #0]
 80170c4:	68bb      	ldr	r3, [r7, #8]
 80170c6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	68ba      	ldr	r2, [r7, #8]
 80170cc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80170ce:	68bb      	ldr	r3, [r7, #8]
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d103      	bne.n	80170de <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	2200      	movs	r2, #0
 80170da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80170e4:	2bff      	cmp	r3, #255	@ 0xff
 80170e6:	d007      	beq.n	80170f8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80170ee:	3301      	adds	r3, #1
 80170f0:	b2da      	uxtb	r2, r3
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	2200      	movs	r2, #0
 80170fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80170fe:	2300      	movs	r3, #0
}
 8017100:	4618      	mov	r0, r3
 8017102:	3714      	adds	r7, #20
 8017104:	46bd      	mov	sp, r7
 8017106:	bd90      	pop	{r4, r7, pc}
 8017108:	08020d54 	.word	0x08020d54
 801710c:	080213f4 	.word	0x080213f4
 8017110:	08020da8 	.word	0x08020da8

08017114 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017114:	b580      	push	{r7, lr}
 8017116:	b082      	sub	sp, #8
 8017118:	af00      	add	r7, sp, #0
 801711a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	2b00      	cmp	r3, #0
 8017120:	d106      	bne.n	8017130 <tcp_rexmit_fast+0x1c>
 8017122:	4b2a      	ldr	r3, [pc, #168]	@ (80171cc <tcp_rexmit_fast+0xb8>)
 8017124:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8017128:	4929      	ldr	r1, [pc, #164]	@ (80171d0 <tcp_rexmit_fast+0xbc>)
 801712a:	482a      	ldr	r0, [pc, #168]	@ (80171d4 <tcp_rexmit_fast+0xc0>)
 801712c:	f006 f94a 	bl	801d3c4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017134:	2b00      	cmp	r3, #0
 8017136:	d045      	beq.n	80171c4 <tcp_rexmit_fast+0xb0>
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	8b5b      	ldrh	r3, [r3, #26]
 801713c:	f003 0304 	and.w	r3, r3, #4
 8017140:	2b00      	cmp	r3, #0
 8017142:	d13f      	bne.n	80171c4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017144:	6878      	ldr	r0, [r7, #4]
 8017146:	f7ff ff79 	bl	801703c <tcp_rexmit>
 801714a:	4603      	mov	r3, r0
 801714c:	2b00      	cmp	r3, #0
 801714e:	d139      	bne.n	80171c4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801715c:	4293      	cmp	r3, r2
 801715e:	bf28      	it	cs
 8017160:	4613      	movcs	r3, r2
 8017162:	b29b      	uxth	r3, r3
 8017164:	2b00      	cmp	r3, #0
 8017166:	da00      	bge.n	801716a <tcp_rexmit_fast+0x56>
 8017168:	3301      	adds	r3, #1
 801716a:	105b      	asrs	r3, r3, #1
 801716c:	b29a      	uxth	r2, r3
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801717a:	461a      	mov	r2, r3
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017180:	005b      	lsls	r3, r3, #1
 8017182:	429a      	cmp	r2, r3
 8017184:	d206      	bcs.n	8017194 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801718a:	005b      	lsls	r3, r3, #1
 801718c:	b29a      	uxth	r2, r3
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801719e:	4619      	mov	r1, r3
 80171a0:	0049      	lsls	r1, r1, #1
 80171a2:	440b      	add	r3, r1
 80171a4:	b29b      	uxth	r3, r3
 80171a6:	4413      	add	r3, r2
 80171a8:	b29a      	uxth	r2, r3
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	8b5b      	ldrh	r3, [r3, #26]
 80171b4:	f043 0304 	orr.w	r3, r3, #4
 80171b8:	b29a      	uxth	r2, r3
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	2200      	movs	r2, #0
 80171c2:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80171c4:	bf00      	nop
 80171c6:	3708      	adds	r7, #8
 80171c8:	46bd      	mov	sp, r7
 80171ca:	bd80      	pop	{r7, pc}
 80171cc:	08020d54 	.word	0x08020d54
 80171d0:	0802140c 	.word	0x0802140c
 80171d4:	08020da8 	.word	0x08020da8

080171d8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80171d8:	b580      	push	{r7, lr}
 80171da:	b086      	sub	sp, #24
 80171dc:	af00      	add	r7, sp, #0
 80171de:	60f8      	str	r0, [r7, #12]
 80171e0:	607b      	str	r3, [r7, #4]
 80171e2:	460b      	mov	r3, r1
 80171e4:	817b      	strh	r3, [r7, #10]
 80171e6:	4613      	mov	r3, r2
 80171e8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80171ea:	897a      	ldrh	r2, [r7, #10]
 80171ec:	893b      	ldrh	r3, [r7, #8]
 80171ee:	4413      	add	r3, r2
 80171f0:	b29b      	uxth	r3, r3
 80171f2:	3314      	adds	r3, #20
 80171f4:	b29b      	uxth	r3, r3
 80171f6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80171fa:	4619      	mov	r1, r3
 80171fc:	2022      	movs	r0, #34	@ 0x22
 80171fe:	f7fa fbff 	bl	8011a00 <pbuf_alloc>
 8017202:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017204:	697b      	ldr	r3, [r7, #20]
 8017206:	2b00      	cmp	r3, #0
 8017208:	d04d      	beq.n	80172a6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801720a:	897b      	ldrh	r3, [r7, #10]
 801720c:	3313      	adds	r3, #19
 801720e:	697a      	ldr	r2, [r7, #20]
 8017210:	8952      	ldrh	r2, [r2, #10]
 8017212:	4293      	cmp	r3, r2
 8017214:	db06      	blt.n	8017224 <tcp_output_alloc_header_common+0x4c>
 8017216:	4b26      	ldr	r3, [pc, #152]	@ (80172b0 <tcp_output_alloc_header_common+0xd8>)
 8017218:	f240 7223 	movw	r2, #1827	@ 0x723
 801721c:	4925      	ldr	r1, [pc, #148]	@ (80172b4 <tcp_output_alloc_header_common+0xdc>)
 801721e:	4826      	ldr	r0, [pc, #152]	@ (80172b8 <tcp_output_alloc_header_common+0xe0>)
 8017220:	f006 f8d0 	bl	801d3c4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017224:	697b      	ldr	r3, [r7, #20]
 8017226:	685b      	ldr	r3, [r3, #4]
 8017228:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801722a:	8c3b      	ldrh	r3, [r7, #32]
 801722c:	4618      	mov	r0, r3
 801722e:	f7f9 fa15 	bl	801065c <lwip_htons>
 8017232:	4603      	mov	r3, r0
 8017234:	461a      	mov	r2, r3
 8017236:	693b      	ldr	r3, [r7, #16]
 8017238:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801723a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801723c:	4618      	mov	r0, r3
 801723e:	f7f9 fa0d 	bl	801065c <lwip_htons>
 8017242:	4603      	mov	r3, r0
 8017244:	461a      	mov	r2, r3
 8017246:	693b      	ldr	r3, [r7, #16]
 8017248:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801724a:	693b      	ldr	r3, [r7, #16]
 801724c:	687a      	ldr	r2, [r7, #4]
 801724e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017250:	68f8      	ldr	r0, [r7, #12]
 8017252:	f7f9 fa18 	bl	8010686 <lwip_htonl>
 8017256:	4602      	mov	r2, r0
 8017258:	693b      	ldr	r3, [r7, #16]
 801725a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801725c:	897b      	ldrh	r3, [r7, #10]
 801725e:	089b      	lsrs	r3, r3, #2
 8017260:	b29b      	uxth	r3, r3
 8017262:	3305      	adds	r3, #5
 8017264:	b29b      	uxth	r3, r3
 8017266:	031b      	lsls	r3, r3, #12
 8017268:	b29a      	uxth	r2, r3
 801726a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801726e:	b29b      	uxth	r3, r3
 8017270:	4313      	orrs	r3, r2
 8017272:	b29b      	uxth	r3, r3
 8017274:	4618      	mov	r0, r3
 8017276:	f7f9 f9f1 	bl	801065c <lwip_htons>
 801727a:	4603      	mov	r3, r0
 801727c:	461a      	mov	r2, r3
 801727e:	693b      	ldr	r3, [r7, #16]
 8017280:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017282:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017284:	4618      	mov	r0, r3
 8017286:	f7f9 f9e9 	bl	801065c <lwip_htons>
 801728a:	4603      	mov	r3, r0
 801728c:	461a      	mov	r2, r3
 801728e:	693b      	ldr	r3, [r7, #16]
 8017290:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017292:	693b      	ldr	r3, [r7, #16]
 8017294:	2200      	movs	r2, #0
 8017296:	741a      	strb	r2, [r3, #16]
 8017298:	2200      	movs	r2, #0
 801729a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801729c:	693b      	ldr	r3, [r7, #16]
 801729e:	2200      	movs	r2, #0
 80172a0:	749a      	strb	r2, [r3, #18]
 80172a2:	2200      	movs	r2, #0
 80172a4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80172a6:	697b      	ldr	r3, [r7, #20]
}
 80172a8:	4618      	mov	r0, r3
 80172aa:	3718      	adds	r7, #24
 80172ac:	46bd      	mov	sp, r7
 80172ae:	bd80      	pop	{r7, pc}
 80172b0:	08020d54 	.word	0x08020d54
 80172b4:	0802142c 	.word	0x0802142c
 80172b8:	08020da8 	.word	0x08020da8

080172bc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80172bc:	b5b0      	push	{r4, r5, r7, lr}
 80172be:	b08a      	sub	sp, #40	@ 0x28
 80172c0:	af04      	add	r7, sp, #16
 80172c2:	60f8      	str	r0, [r7, #12]
 80172c4:	607b      	str	r3, [r7, #4]
 80172c6:	460b      	mov	r3, r1
 80172c8:	817b      	strh	r3, [r7, #10]
 80172ca:	4613      	mov	r3, r2
 80172cc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d106      	bne.n	80172e2 <tcp_output_alloc_header+0x26>
 80172d4:	4b15      	ldr	r3, [pc, #84]	@ (801732c <tcp_output_alloc_header+0x70>)
 80172d6:	f240 7242 	movw	r2, #1858	@ 0x742
 80172da:	4915      	ldr	r1, [pc, #84]	@ (8017330 <tcp_output_alloc_header+0x74>)
 80172dc:	4815      	ldr	r0, [pc, #84]	@ (8017334 <tcp_output_alloc_header+0x78>)
 80172de:	f006 f871 	bl	801d3c4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	8adb      	ldrh	r3, [r3, #22]
 80172ea:	68fa      	ldr	r2, [r7, #12]
 80172ec:	8b12      	ldrh	r2, [r2, #24]
 80172ee:	68f9      	ldr	r1, [r7, #12]
 80172f0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80172f2:	893d      	ldrh	r5, [r7, #8]
 80172f4:	897c      	ldrh	r4, [r7, #10]
 80172f6:	9103      	str	r1, [sp, #12]
 80172f8:	2110      	movs	r1, #16
 80172fa:	9102      	str	r1, [sp, #8]
 80172fc:	9201      	str	r2, [sp, #4]
 80172fe:	9300      	str	r3, [sp, #0]
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	462a      	mov	r2, r5
 8017304:	4621      	mov	r1, r4
 8017306:	f7ff ff67 	bl	80171d8 <tcp_output_alloc_header_common>
 801730a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801730c:	697b      	ldr	r3, [r7, #20]
 801730e:	2b00      	cmp	r3, #0
 8017310:	d006      	beq.n	8017320 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017316:	68fa      	ldr	r2, [r7, #12]
 8017318:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801731a:	441a      	add	r2, r3
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8017320:	697b      	ldr	r3, [r7, #20]
}
 8017322:	4618      	mov	r0, r3
 8017324:	3718      	adds	r7, #24
 8017326:	46bd      	mov	sp, r7
 8017328:	bdb0      	pop	{r4, r5, r7, pc}
 801732a:	bf00      	nop
 801732c:	08020d54 	.word	0x08020d54
 8017330:	0802145c 	.word	0x0802145c
 8017334:	08020da8 	.word	0x08020da8

08017338 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017338:	b580      	push	{r7, lr}
 801733a:	b088      	sub	sp, #32
 801733c:	af00      	add	r7, sp, #0
 801733e:	60f8      	str	r0, [r7, #12]
 8017340:	60b9      	str	r1, [r7, #8]
 8017342:	4611      	mov	r1, r2
 8017344:	461a      	mov	r2, r3
 8017346:	460b      	mov	r3, r1
 8017348:	71fb      	strb	r3, [r7, #7]
 801734a:	4613      	mov	r3, r2
 801734c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801734e:	2300      	movs	r3, #0
 8017350:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8017352:	68bb      	ldr	r3, [r7, #8]
 8017354:	2b00      	cmp	r3, #0
 8017356:	d106      	bne.n	8017366 <tcp_output_fill_options+0x2e>
 8017358:	4b12      	ldr	r3, [pc, #72]	@ (80173a4 <tcp_output_fill_options+0x6c>)
 801735a:	f240 7256 	movw	r2, #1878	@ 0x756
 801735e:	4912      	ldr	r1, [pc, #72]	@ (80173a8 <tcp_output_fill_options+0x70>)
 8017360:	4812      	ldr	r0, [pc, #72]	@ (80173ac <tcp_output_fill_options+0x74>)
 8017362:	f006 f82f 	bl	801d3c4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8017366:	68bb      	ldr	r3, [r7, #8]
 8017368:	685b      	ldr	r3, [r3, #4]
 801736a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801736c:	69bb      	ldr	r3, [r7, #24]
 801736e:	3314      	adds	r3, #20
 8017370:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017372:	8bfb      	ldrh	r3, [r7, #30]
 8017374:	009b      	lsls	r3, r3, #2
 8017376:	461a      	mov	r2, r3
 8017378:	79fb      	ldrb	r3, [r7, #7]
 801737a:	009b      	lsls	r3, r3, #2
 801737c:	f003 0304 	and.w	r3, r3, #4
 8017380:	4413      	add	r3, r2
 8017382:	3314      	adds	r3, #20
 8017384:	69ba      	ldr	r2, [r7, #24]
 8017386:	4413      	add	r3, r2
 8017388:	697a      	ldr	r2, [r7, #20]
 801738a:	429a      	cmp	r2, r3
 801738c:	d006      	beq.n	801739c <tcp_output_fill_options+0x64>
 801738e:	4b05      	ldr	r3, [pc, #20]	@ (80173a4 <tcp_output_fill_options+0x6c>)
 8017390:	f240 7275 	movw	r2, #1909	@ 0x775
 8017394:	4906      	ldr	r1, [pc, #24]	@ (80173b0 <tcp_output_fill_options+0x78>)
 8017396:	4805      	ldr	r0, [pc, #20]	@ (80173ac <tcp_output_fill_options+0x74>)
 8017398:	f006 f814 	bl	801d3c4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801739c:	bf00      	nop
 801739e:	3720      	adds	r7, #32
 80173a0:	46bd      	mov	sp, r7
 80173a2:	bd80      	pop	{r7, pc}
 80173a4:	08020d54 	.word	0x08020d54
 80173a8:	08021484 	.word	0x08021484
 80173ac:	08020da8 	.word	0x08020da8
 80173b0:	0802137c 	.word	0x0802137c

080173b4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b08a      	sub	sp, #40	@ 0x28
 80173b8:	af04      	add	r7, sp, #16
 80173ba:	60f8      	str	r0, [r7, #12]
 80173bc:	60b9      	str	r1, [r7, #8]
 80173be:	607a      	str	r2, [r7, #4]
 80173c0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80173c2:	68bb      	ldr	r3, [r7, #8]
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d106      	bne.n	80173d6 <tcp_output_control_segment+0x22>
 80173c8:	4b1c      	ldr	r3, [pc, #112]	@ (801743c <tcp_output_control_segment+0x88>)
 80173ca:	f240 7287 	movw	r2, #1927	@ 0x787
 80173ce:	491c      	ldr	r1, [pc, #112]	@ (8017440 <tcp_output_control_segment+0x8c>)
 80173d0:	481c      	ldr	r0, [pc, #112]	@ (8017444 <tcp_output_control_segment+0x90>)
 80173d2:	f005 fff7 	bl	801d3c4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80173d6:	683a      	ldr	r2, [r7, #0]
 80173d8:	6879      	ldr	r1, [r7, #4]
 80173da:	68f8      	ldr	r0, [r7, #12]
 80173dc:	f7fe ff42 	bl	8016264 <tcp_route>
 80173e0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80173e2:	693b      	ldr	r3, [r7, #16]
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d102      	bne.n	80173ee <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80173e8:	23fc      	movs	r3, #252	@ 0xfc
 80173ea:	75fb      	strb	r3, [r7, #23]
 80173ec:	e01c      	b.n	8017428 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80173ee:	68fb      	ldr	r3, [r7, #12]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d006      	beq.n	8017402 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	7adb      	ldrb	r3, [r3, #11]
 80173f8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	7a9b      	ldrb	r3, [r3, #10]
 80173fe:	757b      	strb	r3, [r7, #21]
 8017400:	e003      	b.n	801740a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017402:	23ff      	movs	r3, #255	@ 0xff
 8017404:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8017406:	2300      	movs	r3, #0
 8017408:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801740a:	7dba      	ldrb	r2, [r7, #22]
 801740c:	693b      	ldr	r3, [r7, #16]
 801740e:	9302      	str	r3, [sp, #8]
 8017410:	2306      	movs	r3, #6
 8017412:	9301      	str	r3, [sp, #4]
 8017414:	7d7b      	ldrb	r3, [r7, #21]
 8017416:	9300      	str	r3, [sp, #0]
 8017418:	4613      	mov	r3, r2
 801741a:	683a      	ldr	r2, [r7, #0]
 801741c:	6879      	ldr	r1, [r7, #4]
 801741e:	68b8      	ldr	r0, [r7, #8]
 8017420:	f004 f978 	bl	801b714 <ip4_output_if>
 8017424:	4603      	mov	r3, r0
 8017426:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017428:	68b8      	ldr	r0, [r7, #8]
 801742a:	f7fa fdcd 	bl	8011fc8 <pbuf_free>
  return err;
 801742e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017432:	4618      	mov	r0, r3
 8017434:	3718      	adds	r7, #24
 8017436:	46bd      	mov	sp, r7
 8017438:	bd80      	pop	{r7, pc}
 801743a:	bf00      	nop
 801743c:	08020d54 	.word	0x08020d54
 8017440:	080214ac 	.word	0x080214ac
 8017444:	08020da8 	.word	0x08020da8

08017448 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017448:	b590      	push	{r4, r7, lr}
 801744a:	b08b      	sub	sp, #44	@ 0x2c
 801744c:	af04      	add	r7, sp, #16
 801744e:	60f8      	str	r0, [r7, #12]
 8017450:	60b9      	str	r1, [r7, #8]
 8017452:	607a      	str	r2, [r7, #4]
 8017454:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8017456:	683b      	ldr	r3, [r7, #0]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d106      	bne.n	801746a <tcp_rst+0x22>
 801745c:	4b1f      	ldr	r3, [pc, #124]	@ (80174dc <tcp_rst+0x94>)
 801745e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8017462:	491f      	ldr	r1, [pc, #124]	@ (80174e0 <tcp_rst+0x98>)
 8017464:	481f      	ldr	r0, [pc, #124]	@ (80174e4 <tcp_rst+0x9c>)
 8017466:	f005 ffad 	bl	801d3c4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801746a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801746c:	2b00      	cmp	r3, #0
 801746e:	d106      	bne.n	801747e <tcp_rst+0x36>
 8017470:	4b1a      	ldr	r3, [pc, #104]	@ (80174dc <tcp_rst+0x94>)
 8017472:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8017476:	491c      	ldr	r1, [pc, #112]	@ (80174e8 <tcp_rst+0xa0>)
 8017478:	481a      	ldr	r0, [pc, #104]	@ (80174e4 <tcp_rst+0x9c>)
 801747a:	f005 ffa3 	bl	801d3c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801747e:	2300      	movs	r3, #0
 8017480:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8017482:	f246 0308 	movw	r3, #24584	@ 0x6008
 8017486:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8017488:	7dfb      	ldrb	r3, [r7, #23]
 801748a:	b29c      	uxth	r4, r3
 801748c:	68b8      	ldr	r0, [r7, #8]
 801748e:	f7f9 f8fa 	bl	8010686 <lwip_htonl>
 8017492:	4602      	mov	r2, r0
 8017494:	8abb      	ldrh	r3, [r7, #20]
 8017496:	9303      	str	r3, [sp, #12]
 8017498:	2314      	movs	r3, #20
 801749a:	9302      	str	r3, [sp, #8]
 801749c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801749e:	9301      	str	r3, [sp, #4]
 80174a0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80174a2:	9300      	str	r3, [sp, #0]
 80174a4:	4613      	mov	r3, r2
 80174a6:	2200      	movs	r2, #0
 80174a8:	4621      	mov	r1, r4
 80174aa:	6878      	ldr	r0, [r7, #4]
 80174ac:	f7ff fe94 	bl	80171d8 <tcp_output_alloc_header_common>
 80174b0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80174b2:	693b      	ldr	r3, [r7, #16]
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d00c      	beq.n	80174d2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80174b8:	7dfb      	ldrb	r3, [r7, #23]
 80174ba:	2200      	movs	r2, #0
 80174bc:	6939      	ldr	r1, [r7, #16]
 80174be:	68f8      	ldr	r0, [r7, #12]
 80174c0:	f7ff ff3a 	bl	8017338 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80174c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174c6:	683a      	ldr	r2, [r7, #0]
 80174c8:	6939      	ldr	r1, [r7, #16]
 80174ca:	68f8      	ldr	r0, [r7, #12]
 80174cc:	f7ff ff72 	bl	80173b4 <tcp_output_control_segment>
 80174d0:	e000      	b.n	80174d4 <tcp_rst+0x8c>
    return;
 80174d2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80174d4:	371c      	adds	r7, #28
 80174d6:	46bd      	mov	sp, r7
 80174d8:	bd90      	pop	{r4, r7, pc}
 80174da:	bf00      	nop
 80174dc:	08020d54 	.word	0x08020d54
 80174e0:	080214d8 	.word	0x080214d8
 80174e4:	08020da8 	.word	0x08020da8
 80174e8:	080214f4 	.word	0x080214f4

080174ec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80174ec:	b590      	push	{r4, r7, lr}
 80174ee:	b087      	sub	sp, #28
 80174f0:	af00      	add	r7, sp, #0
 80174f2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80174f4:	2300      	movs	r3, #0
 80174f6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80174f8:	2300      	movs	r3, #0
 80174fa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d106      	bne.n	8017510 <tcp_send_empty_ack+0x24>
 8017502:	4b28      	ldr	r3, [pc, #160]	@ (80175a4 <tcp_send_empty_ack+0xb8>)
 8017504:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8017508:	4927      	ldr	r1, [pc, #156]	@ (80175a8 <tcp_send_empty_ack+0xbc>)
 801750a:	4828      	ldr	r0, [pc, #160]	@ (80175ac <tcp_send_empty_ack+0xc0>)
 801750c:	f005 ff5a 	bl	801d3c4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017510:	7dfb      	ldrb	r3, [r7, #23]
 8017512:	009b      	lsls	r3, r3, #2
 8017514:	b2db      	uxtb	r3, r3
 8017516:	f003 0304 	and.w	r3, r3, #4
 801751a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801751c:	7d7b      	ldrb	r3, [r7, #21]
 801751e:	b29c      	uxth	r4, r3
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017524:	4618      	mov	r0, r3
 8017526:	f7f9 f8ae 	bl	8010686 <lwip_htonl>
 801752a:	4603      	mov	r3, r0
 801752c:	2200      	movs	r2, #0
 801752e:	4621      	mov	r1, r4
 8017530:	6878      	ldr	r0, [r7, #4]
 8017532:	f7ff fec3 	bl	80172bc <tcp_output_alloc_header>
 8017536:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017538:	693b      	ldr	r3, [r7, #16]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d109      	bne.n	8017552 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	8b5b      	ldrh	r3, [r3, #26]
 8017542:	f043 0303 	orr.w	r3, r3, #3
 8017546:	b29a      	uxth	r2, r3
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801754c:	f06f 0301 	mvn.w	r3, #1
 8017550:	e023      	b.n	801759a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8017552:	7dbb      	ldrb	r3, [r7, #22]
 8017554:	7dfa      	ldrb	r2, [r7, #23]
 8017556:	6939      	ldr	r1, [r7, #16]
 8017558:	6878      	ldr	r0, [r7, #4]
 801755a:	f7ff feed 	bl	8017338 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801755e:	687a      	ldr	r2, [r7, #4]
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	3304      	adds	r3, #4
 8017564:	6939      	ldr	r1, [r7, #16]
 8017566:	6878      	ldr	r0, [r7, #4]
 8017568:	f7ff ff24 	bl	80173b4 <tcp_output_control_segment>
 801756c:	4603      	mov	r3, r0
 801756e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017574:	2b00      	cmp	r3, #0
 8017576:	d007      	beq.n	8017588 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	8b5b      	ldrh	r3, [r3, #26]
 801757c:	f043 0303 	orr.w	r3, r3, #3
 8017580:	b29a      	uxth	r2, r3
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	835a      	strh	r2, [r3, #26]
 8017586:	e006      	b.n	8017596 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	8b5b      	ldrh	r3, [r3, #26]
 801758c:	f023 0303 	bic.w	r3, r3, #3
 8017590:	b29a      	uxth	r2, r3
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8017596:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801759a:	4618      	mov	r0, r3
 801759c:	371c      	adds	r7, #28
 801759e:	46bd      	mov	sp, r7
 80175a0:	bd90      	pop	{r4, r7, pc}
 80175a2:	bf00      	nop
 80175a4:	08020d54 	.word	0x08020d54
 80175a8:	08021510 	.word	0x08021510
 80175ac:	08020da8 	.word	0x08020da8

080175b0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80175b0:	b590      	push	{r4, r7, lr}
 80175b2:	b087      	sub	sp, #28
 80175b4:	af00      	add	r7, sp, #0
 80175b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80175b8:	2300      	movs	r3, #0
 80175ba:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d106      	bne.n	80175d0 <tcp_keepalive+0x20>
 80175c2:	4b18      	ldr	r3, [pc, #96]	@ (8017624 <tcp_keepalive+0x74>)
 80175c4:	f640 0224 	movw	r2, #2084	@ 0x824
 80175c8:	4917      	ldr	r1, [pc, #92]	@ (8017628 <tcp_keepalive+0x78>)
 80175ca:	4818      	ldr	r0, [pc, #96]	@ (801762c <tcp_keepalive+0x7c>)
 80175cc:	f005 fefa 	bl	801d3c4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80175d0:	7dfb      	ldrb	r3, [r7, #23]
 80175d2:	b29c      	uxth	r4, r3
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80175d8:	3b01      	subs	r3, #1
 80175da:	4618      	mov	r0, r3
 80175dc:	f7f9 f853 	bl	8010686 <lwip_htonl>
 80175e0:	4603      	mov	r3, r0
 80175e2:	2200      	movs	r2, #0
 80175e4:	4621      	mov	r1, r4
 80175e6:	6878      	ldr	r0, [r7, #4]
 80175e8:	f7ff fe68 	bl	80172bc <tcp_output_alloc_header>
 80175ec:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80175ee:	693b      	ldr	r3, [r7, #16]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d102      	bne.n	80175fa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80175f4:	f04f 33ff 	mov.w	r3, #4294967295
 80175f8:	e010      	b.n	801761c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80175fa:	7dfb      	ldrb	r3, [r7, #23]
 80175fc:	2200      	movs	r2, #0
 80175fe:	6939      	ldr	r1, [r7, #16]
 8017600:	6878      	ldr	r0, [r7, #4]
 8017602:	f7ff fe99 	bl	8017338 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017606:	687a      	ldr	r2, [r7, #4]
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	3304      	adds	r3, #4
 801760c:	6939      	ldr	r1, [r7, #16]
 801760e:	6878      	ldr	r0, [r7, #4]
 8017610:	f7ff fed0 	bl	80173b4 <tcp_output_control_segment>
 8017614:	4603      	mov	r3, r0
 8017616:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017618:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801761c:	4618      	mov	r0, r3
 801761e:	371c      	adds	r7, #28
 8017620:	46bd      	mov	sp, r7
 8017622:	bd90      	pop	{r4, r7, pc}
 8017624:	08020d54 	.word	0x08020d54
 8017628:	08021530 	.word	0x08021530
 801762c:	08020da8 	.word	0x08020da8

08017630 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017630:	b590      	push	{r4, r7, lr}
 8017632:	b08b      	sub	sp, #44	@ 0x2c
 8017634:	af00      	add	r7, sp, #0
 8017636:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017638:	2300      	movs	r3, #0
 801763a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	2b00      	cmp	r3, #0
 8017642:	d106      	bne.n	8017652 <tcp_zero_window_probe+0x22>
 8017644:	4b4c      	ldr	r3, [pc, #304]	@ (8017778 <tcp_zero_window_probe+0x148>)
 8017646:	f640 024f 	movw	r2, #2127	@ 0x84f
 801764a:	494c      	ldr	r1, [pc, #304]	@ (801777c <tcp_zero_window_probe+0x14c>)
 801764c:	484c      	ldr	r0, [pc, #304]	@ (8017780 <tcp_zero_window_probe+0x150>)
 801764e:	f005 feb9 	bl	801d3c4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017656:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017658:	6a3b      	ldr	r3, [r7, #32]
 801765a:	2b00      	cmp	r3, #0
 801765c:	d101      	bne.n	8017662 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801765e:	2300      	movs	r3, #0
 8017660:	e086      	b.n	8017770 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017668:	2bff      	cmp	r3, #255	@ 0xff
 801766a:	d007      	beq.n	801767c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017672:	3301      	adds	r3, #1
 8017674:	b2da      	uxtb	r2, r3
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801767c:	6a3b      	ldr	r3, [r7, #32]
 801767e:	68db      	ldr	r3, [r3, #12]
 8017680:	899b      	ldrh	r3, [r3, #12]
 8017682:	b29b      	uxth	r3, r3
 8017684:	4618      	mov	r0, r3
 8017686:	f7f8 ffe9 	bl	801065c <lwip_htons>
 801768a:	4603      	mov	r3, r0
 801768c:	b2db      	uxtb	r3, r3
 801768e:	f003 0301 	and.w	r3, r3, #1
 8017692:	2b00      	cmp	r3, #0
 8017694:	d005      	beq.n	80176a2 <tcp_zero_window_probe+0x72>
 8017696:	6a3b      	ldr	r3, [r7, #32]
 8017698:	891b      	ldrh	r3, [r3, #8]
 801769a:	2b00      	cmp	r3, #0
 801769c:	d101      	bne.n	80176a2 <tcp_zero_window_probe+0x72>
 801769e:	2301      	movs	r3, #1
 80176a0:	e000      	b.n	80176a4 <tcp_zero_window_probe+0x74>
 80176a2:	2300      	movs	r3, #0
 80176a4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80176a6:	7ffb      	ldrb	r3, [r7, #31]
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	bf0c      	ite	eq
 80176ac:	2301      	moveq	r3, #1
 80176ae:	2300      	movne	r3, #0
 80176b0:	b2db      	uxtb	r3, r3
 80176b2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80176b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80176b8:	b299      	uxth	r1, r3
 80176ba:	6a3b      	ldr	r3, [r7, #32]
 80176bc:	68db      	ldr	r3, [r3, #12]
 80176be:	685b      	ldr	r3, [r3, #4]
 80176c0:	8bba      	ldrh	r2, [r7, #28]
 80176c2:	6878      	ldr	r0, [r7, #4]
 80176c4:	f7ff fdfa 	bl	80172bc <tcp_output_alloc_header>
 80176c8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80176ca:	69bb      	ldr	r3, [r7, #24]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d102      	bne.n	80176d6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80176d0:	f04f 33ff 	mov.w	r3, #4294967295
 80176d4:	e04c      	b.n	8017770 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80176d6:	69bb      	ldr	r3, [r7, #24]
 80176d8:	685b      	ldr	r3, [r3, #4]
 80176da:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80176dc:	7ffb      	ldrb	r3, [r7, #31]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d011      	beq.n	8017706 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80176e2:	697b      	ldr	r3, [r7, #20]
 80176e4:	899b      	ldrh	r3, [r3, #12]
 80176e6:	b29b      	uxth	r3, r3
 80176e8:	b21b      	sxth	r3, r3
 80176ea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80176ee:	b21c      	sxth	r4, r3
 80176f0:	2011      	movs	r0, #17
 80176f2:	f7f8 ffb3 	bl	801065c <lwip_htons>
 80176f6:	4603      	mov	r3, r0
 80176f8:	b21b      	sxth	r3, r3
 80176fa:	4323      	orrs	r3, r4
 80176fc:	b21b      	sxth	r3, r3
 80176fe:	b29a      	uxth	r2, r3
 8017700:	697b      	ldr	r3, [r7, #20]
 8017702:	819a      	strh	r2, [r3, #12]
 8017704:	e010      	b.n	8017728 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017706:	69bb      	ldr	r3, [r7, #24]
 8017708:	685b      	ldr	r3, [r3, #4]
 801770a:	3314      	adds	r3, #20
 801770c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801770e:	6a3b      	ldr	r3, [r7, #32]
 8017710:	6858      	ldr	r0, [r3, #4]
 8017712:	6a3b      	ldr	r3, [r7, #32]
 8017714:	685b      	ldr	r3, [r3, #4]
 8017716:	891a      	ldrh	r2, [r3, #8]
 8017718:	6a3b      	ldr	r3, [r7, #32]
 801771a:	891b      	ldrh	r3, [r3, #8]
 801771c:	1ad3      	subs	r3, r2, r3
 801771e:	b29b      	uxth	r3, r3
 8017720:	2201      	movs	r2, #1
 8017722:	6939      	ldr	r1, [r7, #16]
 8017724:	f7fa fe56 	bl	80123d4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017728:	6a3b      	ldr	r3, [r7, #32]
 801772a:	68db      	ldr	r3, [r3, #12]
 801772c:	685b      	ldr	r3, [r3, #4]
 801772e:	4618      	mov	r0, r3
 8017730:	f7f8 ffa9 	bl	8010686 <lwip_htonl>
 8017734:	4603      	mov	r3, r0
 8017736:	3301      	adds	r3, #1
 8017738:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	1ad3      	subs	r3, r2, r3
 8017742:	2b00      	cmp	r3, #0
 8017744:	da02      	bge.n	801774c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	68fa      	ldr	r2, [r7, #12]
 801774a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801774c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017750:	2200      	movs	r2, #0
 8017752:	69b9      	ldr	r1, [r7, #24]
 8017754:	6878      	ldr	r0, [r7, #4]
 8017756:	f7ff fdef 	bl	8017338 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801775a:	687a      	ldr	r2, [r7, #4]
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	3304      	adds	r3, #4
 8017760:	69b9      	ldr	r1, [r7, #24]
 8017762:	6878      	ldr	r0, [r7, #4]
 8017764:	f7ff fe26 	bl	80173b4 <tcp_output_control_segment>
 8017768:	4603      	mov	r3, r0
 801776a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801776c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017770:	4618      	mov	r0, r3
 8017772:	372c      	adds	r7, #44	@ 0x2c
 8017774:	46bd      	mov	sp, r7
 8017776:	bd90      	pop	{r4, r7, pc}
 8017778:	08020d54 	.word	0x08020d54
 801777c:	0802154c 	.word	0x0802154c
 8017780:	08020da8 	.word	0x08020da8

08017784 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017784:	b580      	push	{r7, lr}
 8017786:	b082      	sub	sp, #8
 8017788:	af00      	add	r7, sp, #0
 801778a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801778c:	f7fa ff10 	bl	80125b0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017790:	4b0a      	ldr	r3, [pc, #40]	@ (80177bc <tcpip_tcp_timer+0x38>)
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	2b00      	cmp	r3, #0
 8017796:	d103      	bne.n	80177a0 <tcpip_tcp_timer+0x1c>
 8017798:	4b09      	ldr	r3, [pc, #36]	@ (80177c0 <tcpip_tcp_timer+0x3c>)
 801779a:	681b      	ldr	r3, [r3, #0]
 801779c:	2b00      	cmp	r3, #0
 801779e:	d005      	beq.n	80177ac <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80177a0:	2200      	movs	r2, #0
 80177a2:	4908      	ldr	r1, [pc, #32]	@ (80177c4 <tcpip_tcp_timer+0x40>)
 80177a4:	20fa      	movs	r0, #250	@ 0xfa
 80177a6:	f000 f8f3 	bl	8017990 <sys_timeout>
 80177aa:	e003      	b.n	80177b4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80177ac:	4b06      	ldr	r3, [pc, #24]	@ (80177c8 <tcpip_tcp_timer+0x44>)
 80177ae:	2200      	movs	r2, #0
 80177b0:	601a      	str	r2, [r3, #0]
  }
}
 80177b2:	bf00      	nop
 80177b4:	bf00      	nop
 80177b6:	3708      	adds	r7, #8
 80177b8:	46bd      	mov	sp, r7
 80177ba:	bd80      	pop	{r7, pc}
 80177bc:	2400cc40 	.word	0x2400cc40
 80177c0:	2400cc44 	.word	0x2400cc44
 80177c4:	08017785 	.word	0x08017785
 80177c8:	2400cc8c 	.word	0x2400cc8c

080177cc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80177d0:	4b0a      	ldr	r3, [pc, #40]	@ (80177fc <tcp_timer_needed+0x30>)
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d10f      	bne.n	80177f8 <tcp_timer_needed+0x2c>
 80177d8:	4b09      	ldr	r3, [pc, #36]	@ (8017800 <tcp_timer_needed+0x34>)
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d103      	bne.n	80177e8 <tcp_timer_needed+0x1c>
 80177e0:	4b08      	ldr	r3, [pc, #32]	@ (8017804 <tcp_timer_needed+0x38>)
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d007      	beq.n	80177f8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80177e8:	4b04      	ldr	r3, [pc, #16]	@ (80177fc <tcp_timer_needed+0x30>)
 80177ea:	2201      	movs	r2, #1
 80177ec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80177ee:	2200      	movs	r2, #0
 80177f0:	4905      	ldr	r1, [pc, #20]	@ (8017808 <tcp_timer_needed+0x3c>)
 80177f2:	20fa      	movs	r0, #250	@ 0xfa
 80177f4:	f000 f8cc 	bl	8017990 <sys_timeout>
  }
}
 80177f8:	bf00      	nop
 80177fa:	bd80      	pop	{r7, pc}
 80177fc:	2400cc8c 	.word	0x2400cc8c
 8017800:	2400cc40 	.word	0x2400cc40
 8017804:	2400cc44 	.word	0x2400cc44
 8017808:	08017785 	.word	0x08017785

0801780c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801780c:	b580      	push	{r7, lr}
 801780e:	b086      	sub	sp, #24
 8017810:	af00      	add	r7, sp, #0
 8017812:	60f8      	str	r0, [r7, #12]
 8017814:	60b9      	str	r1, [r7, #8]
 8017816:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017818:	200a      	movs	r0, #10
 801781a:	f7f9 fcaf 	bl	801117c <memp_malloc>
 801781e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017820:	693b      	ldr	r3, [r7, #16]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d109      	bne.n	801783a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017826:	693b      	ldr	r3, [r7, #16]
 8017828:	2b00      	cmp	r3, #0
 801782a:	d151      	bne.n	80178d0 <sys_timeout_abs+0xc4>
 801782c:	4b2a      	ldr	r3, [pc, #168]	@ (80178d8 <sys_timeout_abs+0xcc>)
 801782e:	22be      	movs	r2, #190	@ 0xbe
 8017830:	492a      	ldr	r1, [pc, #168]	@ (80178dc <sys_timeout_abs+0xd0>)
 8017832:	482b      	ldr	r0, [pc, #172]	@ (80178e0 <sys_timeout_abs+0xd4>)
 8017834:	f005 fdc6 	bl	801d3c4 <iprintf>
    return;
 8017838:	e04a      	b.n	80178d0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801783a:	693b      	ldr	r3, [r7, #16]
 801783c:	2200      	movs	r2, #0
 801783e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017840:	693b      	ldr	r3, [r7, #16]
 8017842:	68ba      	ldr	r2, [r7, #8]
 8017844:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017846:	693b      	ldr	r3, [r7, #16]
 8017848:	687a      	ldr	r2, [r7, #4]
 801784a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801784c:	693b      	ldr	r3, [r7, #16]
 801784e:	68fa      	ldr	r2, [r7, #12]
 8017850:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017852:	4b24      	ldr	r3, [pc, #144]	@ (80178e4 <sys_timeout_abs+0xd8>)
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	2b00      	cmp	r3, #0
 8017858:	d103      	bne.n	8017862 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801785a:	4a22      	ldr	r2, [pc, #136]	@ (80178e4 <sys_timeout_abs+0xd8>)
 801785c:	693b      	ldr	r3, [r7, #16]
 801785e:	6013      	str	r3, [r2, #0]
    return;
 8017860:	e037      	b.n	80178d2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017862:	693b      	ldr	r3, [r7, #16]
 8017864:	685a      	ldr	r2, [r3, #4]
 8017866:	4b1f      	ldr	r3, [pc, #124]	@ (80178e4 <sys_timeout_abs+0xd8>)
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	685b      	ldr	r3, [r3, #4]
 801786c:	1ad3      	subs	r3, r2, r3
 801786e:	0fdb      	lsrs	r3, r3, #31
 8017870:	f003 0301 	and.w	r3, r3, #1
 8017874:	b2db      	uxtb	r3, r3
 8017876:	2b00      	cmp	r3, #0
 8017878:	d007      	beq.n	801788a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801787a:	4b1a      	ldr	r3, [pc, #104]	@ (80178e4 <sys_timeout_abs+0xd8>)
 801787c:	681a      	ldr	r2, [r3, #0]
 801787e:	693b      	ldr	r3, [r7, #16]
 8017880:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017882:	4a18      	ldr	r2, [pc, #96]	@ (80178e4 <sys_timeout_abs+0xd8>)
 8017884:	693b      	ldr	r3, [r7, #16]
 8017886:	6013      	str	r3, [r2, #0]
 8017888:	e023      	b.n	80178d2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801788a:	4b16      	ldr	r3, [pc, #88]	@ (80178e4 <sys_timeout_abs+0xd8>)
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	617b      	str	r3, [r7, #20]
 8017890:	e01a      	b.n	80178c8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017892:	697b      	ldr	r3, [r7, #20]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	2b00      	cmp	r3, #0
 8017898:	d00b      	beq.n	80178b2 <sys_timeout_abs+0xa6>
 801789a:	693b      	ldr	r3, [r7, #16]
 801789c:	685a      	ldr	r2, [r3, #4]
 801789e:	697b      	ldr	r3, [r7, #20]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	685b      	ldr	r3, [r3, #4]
 80178a4:	1ad3      	subs	r3, r2, r3
 80178a6:	0fdb      	lsrs	r3, r3, #31
 80178a8:	f003 0301 	and.w	r3, r3, #1
 80178ac:	b2db      	uxtb	r3, r3
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d007      	beq.n	80178c2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80178b2:	697b      	ldr	r3, [r7, #20]
 80178b4:	681a      	ldr	r2, [r3, #0]
 80178b6:	693b      	ldr	r3, [r7, #16]
 80178b8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80178ba:	697b      	ldr	r3, [r7, #20]
 80178bc:	693a      	ldr	r2, [r7, #16]
 80178be:	601a      	str	r2, [r3, #0]
        break;
 80178c0:	e007      	b.n	80178d2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80178c2:	697b      	ldr	r3, [r7, #20]
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	617b      	str	r3, [r7, #20]
 80178c8:	697b      	ldr	r3, [r7, #20]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d1e1      	bne.n	8017892 <sys_timeout_abs+0x86>
 80178ce:	e000      	b.n	80178d2 <sys_timeout_abs+0xc6>
    return;
 80178d0:	bf00      	nop
      }
    }
  }
}
 80178d2:	3718      	adds	r7, #24
 80178d4:	46bd      	mov	sp, r7
 80178d6:	bd80      	pop	{r7, pc}
 80178d8:	08021570 	.word	0x08021570
 80178dc:	080215a4 	.word	0x080215a4
 80178e0:	080215e4 	.word	0x080215e4
 80178e4:	2400cc84 	.word	0x2400cc84

080178e8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80178e8:	b580      	push	{r7, lr}
 80178ea:	b086      	sub	sp, #24
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80178f4:	697b      	ldr	r3, [r7, #20]
 80178f6:	685b      	ldr	r3, [r3, #4]
 80178f8:	4798      	blx	r3

  now = sys_now();
 80178fa:	f7f4 faef 	bl	800bedc <sys_now>
 80178fe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017900:	697b      	ldr	r3, [r7, #20]
 8017902:	681a      	ldr	r2, [r3, #0]
 8017904:	4b0f      	ldr	r3, [pc, #60]	@ (8017944 <lwip_cyclic_timer+0x5c>)
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	4413      	add	r3, r2
 801790a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801790c:	68fa      	ldr	r2, [r7, #12]
 801790e:	693b      	ldr	r3, [r7, #16]
 8017910:	1ad3      	subs	r3, r2, r3
 8017912:	0fdb      	lsrs	r3, r3, #31
 8017914:	f003 0301 	and.w	r3, r3, #1
 8017918:	b2db      	uxtb	r3, r3
 801791a:	2b00      	cmp	r3, #0
 801791c:	d009      	beq.n	8017932 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801791e:	697b      	ldr	r3, [r7, #20]
 8017920:	681a      	ldr	r2, [r3, #0]
 8017922:	693b      	ldr	r3, [r7, #16]
 8017924:	4413      	add	r3, r2
 8017926:	687a      	ldr	r2, [r7, #4]
 8017928:	4907      	ldr	r1, [pc, #28]	@ (8017948 <lwip_cyclic_timer+0x60>)
 801792a:	4618      	mov	r0, r3
 801792c:	f7ff ff6e 	bl	801780c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017930:	e004      	b.n	801793c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017932:	687a      	ldr	r2, [r7, #4]
 8017934:	4904      	ldr	r1, [pc, #16]	@ (8017948 <lwip_cyclic_timer+0x60>)
 8017936:	68f8      	ldr	r0, [r7, #12]
 8017938:	f7ff ff68 	bl	801780c <sys_timeout_abs>
}
 801793c:	bf00      	nop
 801793e:	3718      	adds	r7, #24
 8017940:	46bd      	mov	sp, r7
 8017942:	bd80      	pop	{r7, pc}
 8017944:	2400cc88 	.word	0x2400cc88
 8017948:	080178e9 	.word	0x080178e9

0801794c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801794c:	b580      	push	{r7, lr}
 801794e:	b082      	sub	sp, #8
 8017950:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017952:	2301      	movs	r3, #1
 8017954:	607b      	str	r3, [r7, #4]
 8017956:	e00e      	b.n	8017976 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017958:	4a0b      	ldr	r2, [pc, #44]	@ (8017988 <sys_timeouts_init+0x3c>)
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	00db      	lsls	r3, r3, #3
 8017964:	4a08      	ldr	r2, [pc, #32]	@ (8017988 <sys_timeouts_init+0x3c>)
 8017966:	4413      	add	r3, r2
 8017968:	461a      	mov	r2, r3
 801796a:	4908      	ldr	r1, [pc, #32]	@ (801798c <sys_timeouts_init+0x40>)
 801796c:	f000 f810 	bl	8017990 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	3301      	adds	r3, #1
 8017974:	607b      	str	r3, [r7, #4]
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	2b04      	cmp	r3, #4
 801797a:	d9ed      	bls.n	8017958 <sys_timeouts_init+0xc>
  }
}
 801797c:	bf00      	nop
 801797e:	bf00      	nop
 8017980:	3708      	adds	r7, #8
 8017982:	46bd      	mov	sp, r7
 8017984:	bd80      	pop	{r7, pc}
 8017986:	bf00      	nop
 8017988:	080225e8 	.word	0x080225e8
 801798c:	080178e9 	.word	0x080178e9

08017990 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017990:	b580      	push	{r7, lr}
 8017992:	b086      	sub	sp, #24
 8017994:	af00      	add	r7, sp, #0
 8017996:	60f8      	str	r0, [r7, #12]
 8017998:	60b9      	str	r1, [r7, #8]
 801799a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80179a2:	d306      	bcc.n	80179b2 <sys_timeout+0x22>
 80179a4:	4b0a      	ldr	r3, [pc, #40]	@ (80179d0 <sys_timeout+0x40>)
 80179a6:	f240 1229 	movw	r2, #297	@ 0x129
 80179aa:	490a      	ldr	r1, [pc, #40]	@ (80179d4 <sys_timeout+0x44>)
 80179ac:	480a      	ldr	r0, [pc, #40]	@ (80179d8 <sys_timeout+0x48>)
 80179ae:	f005 fd09 	bl	801d3c4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80179b2:	f7f4 fa93 	bl	800bedc <sys_now>
 80179b6:	4602      	mov	r2, r0
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	4413      	add	r3, r2
 80179bc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80179be:	687a      	ldr	r2, [r7, #4]
 80179c0:	68b9      	ldr	r1, [r7, #8]
 80179c2:	6978      	ldr	r0, [r7, #20]
 80179c4:	f7ff ff22 	bl	801780c <sys_timeout_abs>
#endif
}
 80179c8:	bf00      	nop
 80179ca:	3718      	adds	r7, #24
 80179cc:	46bd      	mov	sp, r7
 80179ce:	bd80      	pop	{r7, pc}
 80179d0:	08021570 	.word	0x08021570
 80179d4:	0802160c 	.word	0x0802160c
 80179d8:	080215e4 	.word	0x080215e4

080179dc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80179dc:	b580      	push	{r7, lr}
 80179de:	b084      	sub	sp, #16
 80179e0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80179e2:	f7f4 fa7b 	bl	800bedc <sys_now>
 80179e6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80179e8:	4b17      	ldr	r3, [pc, #92]	@ (8017a48 <sys_check_timeouts+0x6c>)
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80179ee:	68bb      	ldr	r3, [r7, #8]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d022      	beq.n	8017a3a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80179f4:	68bb      	ldr	r3, [r7, #8]
 80179f6:	685b      	ldr	r3, [r3, #4]
 80179f8:	68fa      	ldr	r2, [r7, #12]
 80179fa:	1ad3      	subs	r3, r2, r3
 80179fc:	0fdb      	lsrs	r3, r3, #31
 80179fe:	f003 0301 	and.w	r3, r3, #1
 8017a02:	b2db      	uxtb	r3, r3
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d11a      	bne.n	8017a3e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017a08:	68bb      	ldr	r3, [r7, #8]
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	4a0e      	ldr	r2, [pc, #56]	@ (8017a48 <sys_check_timeouts+0x6c>)
 8017a0e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017a10:	68bb      	ldr	r3, [r7, #8]
 8017a12:	689b      	ldr	r3, [r3, #8]
 8017a14:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017a16:	68bb      	ldr	r3, [r7, #8]
 8017a18:	68db      	ldr	r3, [r3, #12]
 8017a1a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017a1c:	68bb      	ldr	r3, [r7, #8]
 8017a1e:	685b      	ldr	r3, [r3, #4]
 8017a20:	4a0a      	ldr	r2, [pc, #40]	@ (8017a4c <sys_check_timeouts+0x70>)
 8017a22:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017a24:	68b9      	ldr	r1, [r7, #8]
 8017a26:	200a      	movs	r0, #10
 8017a28:	f7f9 fc1e 	bl	8011268 <memp_free>
    if (handler != NULL) {
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d0da      	beq.n	80179e8 <sys_check_timeouts+0xc>
      handler(arg);
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	6838      	ldr	r0, [r7, #0]
 8017a36:	4798      	blx	r3
  do {
 8017a38:	e7d6      	b.n	80179e8 <sys_check_timeouts+0xc>
      return;
 8017a3a:	bf00      	nop
 8017a3c:	e000      	b.n	8017a40 <sys_check_timeouts+0x64>
      return;
 8017a3e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017a40:	3710      	adds	r7, #16
 8017a42:	46bd      	mov	sp, r7
 8017a44:	bd80      	pop	{r7, pc}
 8017a46:	bf00      	nop
 8017a48:	2400cc84 	.word	0x2400cc84
 8017a4c:	2400cc88 	.word	0x2400cc88

08017a50 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017a50:	b580      	push	{r7, lr}
 8017a52:	b082      	sub	sp, #8
 8017a54:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017a56:	4b16      	ldr	r3, [pc, #88]	@ (8017ab0 <sys_timeouts_sleeptime+0x60>)
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d102      	bne.n	8017a64 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8017a62:	e020      	b.n	8017aa6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017a64:	f7f4 fa3a 	bl	800bedc <sys_now>
 8017a68:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017a6a:	4b11      	ldr	r3, [pc, #68]	@ (8017ab0 <sys_timeouts_sleeptime+0x60>)
 8017a6c:	681b      	ldr	r3, [r3, #0]
 8017a6e:	685a      	ldr	r2, [r3, #4]
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	1ad3      	subs	r3, r2, r3
 8017a74:	0fdb      	lsrs	r3, r3, #31
 8017a76:	f003 0301 	and.w	r3, r3, #1
 8017a7a:	b2db      	uxtb	r3, r3
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d001      	beq.n	8017a84 <sys_timeouts_sleeptime+0x34>
    return 0;
 8017a80:	2300      	movs	r3, #0
 8017a82:	e010      	b.n	8017aa6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017a84:	4b0a      	ldr	r3, [pc, #40]	@ (8017ab0 <sys_timeouts_sleeptime+0x60>)
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	685a      	ldr	r2, [r3, #4]
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	1ad3      	subs	r3, r2, r3
 8017a8e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017a90:	683b      	ldr	r3, [r7, #0]
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	da06      	bge.n	8017aa4 <sys_timeouts_sleeptime+0x54>
 8017a96:	4b07      	ldr	r3, [pc, #28]	@ (8017ab4 <sys_timeouts_sleeptime+0x64>)
 8017a98:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8017a9c:	4906      	ldr	r1, [pc, #24]	@ (8017ab8 <sys_timeouts_sleeptime+0x68>)
 8017a9e:	4807      	ldr	r0, [pc, #28]	@ (8017abc <sys_timeouts_sleeptime+0x6c>)
 8017aa0:	f005 fc90 	bl	801d3c4 <iprintf>
    return ret;
 8017aa4:	683b      	ldr	r3, [r7, #0]
  }
}
 8017aa6:	4618      	mov	r0, r3
 8017aa8:	3708      	adds	r7, #8
 8017aaa:	46bd      	mov	sp, r7
 8017aac:	bd80      	pop	{r7, pc}
 8017aae:	bf00      	nop
 8017ab0:	2400cc84 	.word	0x2400cc84
 8017ab4:	08021570 	.word	0x08021570
 8017ab8:	08021644 	.word	0x08021644
 8017abc:	080215e4 	.word	0x080215e4

08017ac0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017ac0:	b580      	push	{r7, lr}
 8017ac2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017ac4:	f004 ff46 	bl	801c954 <rand>
 8017ac8:	4603      	mov	r3, r0
 8017aca:	b29b      	uxth	r3, r3
 8017acc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017ad0:	b29b      	uxth	r3, r3
 8017ad2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8017ad6:	b29a      	uxth	r2, r3
 8017ad8:	4b01      	ldr	r3, [pc, #4]	@ (8017ae0 <udp_init+0x20>)
 8017ada:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017adc:	bf00      	nop
 8017ade:	bd80      	pop	{r7, pc}
 8017ae0:	24000030 	.word	0x24000030

08017ae4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017ae4:	b480      	push	{r7}
 8017ae6:	b083      	sub	sp, #12
 8017ae8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017aea:	2300      	movs	r3, #0
 8017aec:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8017aee:	4b17      	ldr	r3, [pc, #92]	@ (8017b4c <udp_new_port+0x68>)
 8017af0:	881b      	ldrh	r3, [r3, #0]
 8017af2:	1c5a      	adds	r2, r3, #1
 8017af4:	b291      	uxth	r1, r2
 8017af6:	4a15      	ldr	r2, [pc, #84]	@ (8017b4c <udp_new_port+0x68>)
 8017af8:	8011      	strh	r1, [r2, #0]
 8017afa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017afe:	4293      	cmp	r3, r2
 8017b00:	d103      	bne.n	8017b0a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8017b02:	4b12      	ldr	r3, [pc, #72]	@ (8017b4c <udp_new_port+0x68>)
 8017b04:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8017b08:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017b0a:	4b11      	ldr	r3, [pc, #68]	@ (8017b50 <udp_new_port+0x6c>)
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	603b      	str	r3, [r7, #0]
 8017b10:	e011      	b.n	8017b36 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8017b12:	683b      	ldr	r3, [r7, #0]
 8017b14:	8a5a      	ldrh	r2, [r3, #18]
 8017b16:	4b0d      	ldr	r3, [pc, #52]	@ (8017b4c <udp_new_port+0x68>)
 8017b18:	881b      	ldrh	r3, [r3, #0]
 8017b1a:	429a      	cmp	r2, r3
 8017b1c:	d108      	bne.n	8017b30 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8017b1e:	88fb      	ldrh	r3, [r7, #6]
 8017b20:	3301      	adds	r3, #1
 8017b22:	80fb      	strh	r3, [r7, #6]
 8017b24:	88fb      	ldrh	r3, [r7, #6]
 8017b26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8017b2a:	d3e0      	bcc.n	8017aee <udp_new_port+0xa>
        return 0;
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	e007      	b.n	8017b40 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017b30:	683b      	ldr	r3, [r7, #0]
 8017b32:	68db      	ldr	r3, [r3, #12]
 8017b34:	603b      	str	r3, [r7, #0]
 8017b36:	683b      	ldr	r3, [r7, #0]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d1ea      	bne.n	8017b12 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017b3c:	4b03      	ldr	r3, [pc, #12]	@ (8017b4c <udp_new_port+0x68>)
 8017b3e:	881b      	ldrh	r3, [r3, #0]
}
 8017b40:	4618      	mov	r0, r3
 8017b42:	370c      	adds	r7, #12
 8017b44:	46bd      	mov	sp, r7
 8017b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b4a:	4770      	bx	lr
 8017b4c:	24000030 	.word	0x24000030
 8017b50:	2400cc90 	.word	0x2400cc90

08017b54 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017b54:	b580      	push	{r7, lr}
 8017b56:	b084      	sub	sp, #16
 8017b58:	af00      	add	r7, sp, #0
 8017b5a:	60f8      	str	r0, [r7, #12]
 8017b5c:	60b9      	str	r1, [r7, #8]
 8017b5e:	4613      	mov	r3, r2
 8017b60:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d105      	bne.n	8017b74 <udp_input_local_match+0x20>
 8017b68:	4b27      	ldr	r3, [pc, #156]	@ (8017c08 <udp_input_local_match+0xb4>)
 8017b6a:	2287      	movs	r2, #135	@ 0x87
 8017b6c:	4927      	ldr	r1, [pc, #156]	@ (8017c0c <udp_input_local_match+0xb8>)
 8017b6e:	4828      	ldr	r0, [pc, #160]	@ (8017c10 <udp_input_local_match+0xbc>)
 8017b70:	f005 fc28 	bl	801d3c4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017b74:	68bb      	ldr	r3, [r7, #8]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d105      	bne.n	8017b86 <udp_input_local_match+0x32>
 8017b7a:	4b23      	ldr	r3, [pc, #140]	@ (8017c08 <udp_input_local_match+0xb4>)
 8017b7c:	2288      	movs	r2, #136	@ 0x88
 8017b7e:	4925      	ldr	r1, [pc, #148]	@ (8017c14 <udp_input_local_match+0xc0>)
 8017b80:	4823      	ldr	r0, [pc, #140]	@ (8017c10 <udp_input_local_match+0xbc>)
 8017b82:	f005 fc1f 	bl	801d3c4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	7a1b      	ldrb	r3, [r3, #8]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d00b      	beq.n	8017ba6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	7a1a      	ldrb	r2, [r3, #8]
 8017b92:	4b21      	ldr	r3, [pc, #132]	@ (8017c18 <udp_input_local_match+0xc4>)
 8017b94:	685b      	ldr	r3, [r3, #4]
 8017b96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8017b9a:	3301      	adds	r3, #1
 8017b9c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017b9e:	429a      	cmp	r2, r3
 8017ba0:	d001      	beq.n	8017ba6 <udp_input_local_match+0x52>
    return 0;
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	e02b      	b.n	8017bfe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017ba6:	79fb      	ldrb	r3, [r7, #7]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d018      	beq.n	8017bde <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d013      	beq.n	8017bda <udp_input_local_match+0x86>
 8017bb2:	68fb      	ldr	r3, [r7, #12]
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d00f      	beq.n	8017bda <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017bba:	4b17      	ldr	r3, [pc, #92]	@ (8017c18 <udp_input_local_match+0xc4>)
 8017bbc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017bc2:	d00a      	beq.n	8017bda <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	681a      	ldr	r2, [r3, #0]
 8017bc8:	4b13      	ldr	r3, [pc, #76]	@ (8017c18 <udp_input_local_match+0xc4>)
 8017bca:	695b      	ldr	r3, [r3, #20]
 8017bcc:	405a      	eors	r2, r3
 8017bce:	68bb      	ldr	r3, [r7, #8]
 8017bd0:	3308      	adds	r3, #8
 8017bd2:	681b      	ldr	r3, [r3, #0]
 8017bd4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d110      	bne.n	8017bfc <udp_input_local_match+0xa8>
          return 1;
 8017bda:	2301      	movs	r3, #1
 8017bdc:	e00f      	b.n	8017bfe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d009      	beq.n	8017bf8 <udp_input_local_match+0xa4>
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d005      	beq.n	8017bf8 <udp_input_local_match+0xa4>
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	681a      	ldr	r2, [r3, #0]
 8017bf0:	4b09      	ldr	r3, [pc, #36]	@ (8017c18 <udp_input_local_match+0xc4>)
 8017bf2:	695b      	ldr	r3, [r3, #20]
 8017bf4:	429a      	cmp	r2, r3
 8017bf6:	d101      	bne.n	8017bfc <udp_input_local_match+0xa8>
        return 1;
 8017bf8:	2301      	movs	r3, #1
 8017bfa:	e000      	b.n	8017bfe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017bfc:	2300      	movs	r3, #0
}
 8017bfe:	4618      	mov	r0, r3
 8017c00:	3710      	adds	r7, #16
 8017c02:	46bd      	mov	sp, r7
 8017c04:	bd80      	pop	{r7, pc}
 8017c06:	bf00      	nop
 8017c08:	08021658 	.word	0x08021658
 8017c0c:	08021688 	.word	0x08021688
 8017c10:	080216ac 	.word	0x080216ac
 8017c14:	080216d4 	.word	0x080216d4
 8017c18:	24009b14 	.word	0x24009b14

08017c1c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017c1c:	b590      	push	{r4, r7, lr}
 8017c1e:	b08d      	sub	sp, #52	@ 0x34
 8017c20:	af02      	add	r7, sp, #8
 8017c22:	6078      	str	r0, [r7, #4]
 8017c24:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017c26:	2300      	movs	r3, #0
 8017c28:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d105      	bne.n	8017c3c <udp_input+0x20>
 8017c30:	4b7c      	ldr	r3, [pc, #496]	@ (8017e24 <udp_input+0x208>)
 8017c32:	22cf      	movs	r2, #207	@ 0xcf
 8017c34:	497c      	ldr	r1, [pc, #496]	@ (8017e28 <udp_input+0x20c>)
 8017c36:	487d      	ldr	r0, [pc, #500]	@ (8017e2c <udp_input+0x210>)
 8017c38:	f005 fbc4 	bl	801d3c4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017c3c:	683b      	ldr	r3, [r7, #0]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d105      	bne.n	8017c4e <udp_input+0x32>
 8017c42:	4b78      	ldr	r3, [pc, #480]	@ (8017e24 <udp_input+0x208>)
 8017c44:	22d0      	movs	r2, #208	@ 0xd0
 8017c46:	497a      	ldr	r1, [pc, #488]	@ (8017e30 <udp_input+0x214>)
 8017c48:	4878      	ldr	r0, [pc, #480]	@ (8017e2c <udp_input+0x210>)
 8017c4a:	f005 fbbb 	bl	801d3c4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	895b      	ldrh	r3, [r3, #10]
 8017c52:	2b07      	cmp	r3, #7
 8017c54:	d803      	bhi.n	8017c5e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017c56:	6878      	ldr	r0, [r7, #4]
 8017c58:	f7fa f9b6 	bl	8011fc8 <pbuf_free>
    goto end;
 8017c5c:	e0de      	b.n	8017e1c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	685b      	ldr	r3, [r3, #4]
 8017c62:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017c64:	4b73      	ldr	r3, [pc, #460]	@ (8017e34 <udp_input+0x218>)
 8017c66:	695b      	ldr	r3, [r3, #20]
 8017c68:	4a72      	ldr	r2, [pc, #456]	@ (8017e34 <udp_input+0x218>)
 8017c6a:	6812      	ldr	r2, [r2, #0]
 8017c6c:	4611      	mov	r1, r2
 8017c6e:	4618      	mov	r0, r3
 8017c70:	f003 fe28 	bl	801b8c4 <ip4_addr_isbroadcast_u32>
 8017c74:	4603      	mov	r3, r0
 8017c76:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017c78:	697b      	ldr	r3, [r7, #20]
 8017c7a:	881b      	ldrh	r3, [r3, #0]
 8017c7c:	b29b      	uxth	r3, r3
 8017c7e:	4618      	mov	r0, r3
 8017c80:	f7f8 fcec 	bl	801065c <lwip_htons>
 8017c84:	4603      	mov	r3, r0
 8017c86:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017c88:	697b      	ldr	r3, [r7, #20]
 8017c8a:	885b      	ldrh	r3, [r3, #2]
 8017c8c:	b29b      	uxth	r3, r3
 8017c8e:	4618      	mov	r0, r3
 8017c90:	f7f8 fce4 	bl	801065c <lwip_htons>
 8017c94:	4603      	mov	r3, r0
 8017c96:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017c98:	2300      	movs	r3, #0
 8017c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ca4:	4b64      	ldr	r3, [pc, #400]	@ (8017e38 <udp_input+0x21c>)
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8017caa:	e054      	b.n	8017d56 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cae:	8a5b      	ldrh	r3, [r3, #18]
 8017cb0:	89fa      	ldrh	r2, [r7, #14]
 8017cb2:	429a      	cmp	r2, r3
 8017cb4:	d14a      	bne.n	8017d4c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017cb6:	7cfb      	ldrb	r3, [r7, #19]
 8017cb8:	461a      	mov	r2, r3
 8017cba:	6839      	ldr	r1, [r7, #0]
 8017cbc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017cbe:	f7ff ff49 	bl	8017b54 <udp_input_local_match>
 8017cc2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d041      	beq.n	8017d4c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cca:	7c1b      	ldrb	r3, [r3, #16]
 8017ccc:	f003 0304 	and.w	r3, r3, #4
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d11d      	bne.n	8017d10 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017cd4:	69fb      	ldr	r3, [r7, #28]
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d102      	bne.n	8017ce0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cdc:	61fb      	str	r3, [r7, #28]
 8017cde:	e017      	b.n	8017d10 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017ce0:	7cfb      	ldrb	r3, [r7, #19]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d014      	beq.n	8017d10 <udp_input+0xf4>
 8017ce6:	4b53      	ldr	r3, [pc, #332]	@ (8017e34 <udp_input+0x218>)
 8017ce8:	695b      	ldr	r3, [r3, #20]
 8017cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017cee:	d10f      	bne.n	8017d10 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017cf0:	69fb      	ldr	r3, [r7, #28]
 8017cf2:	681a      	ldr	r2, [r3, #0]
 8017cf4:	683b      	ldr	r3, [r7, #0]
 8017cf6:	3304      	adds	r3, #4
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	429a      	cmp	r2, r3
 8017cfc:	d008      	beq.n	8017d10 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d00:	681a      	ldr	r2, [r3, #0]
 8017d02:	683b      	ldr	r3, [r7, #0]
 8017d04:	3304      	adds	r3, #4
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	429a      	cmp	r2, r3
 8017d0a:	d101      	bne.n	8017d10 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d0e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d12:	8a9b      	ldrh	r3, [r3, #20]
 8017d14:	8a3a      	ldrh	r2, [r7, #16]
 8017d16:	429a      	cmp	r2, r3
 8017d18:	d118      	bne.n	8017d4c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d1c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d005      	beq.n	8017d2e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d24:	685a      	ldr	r2, [r3, #4]
 8017d26:	4b43      	ldr	r3, [pc, #268]	@ (8017e34 <udp_input+0x218>)
 8017d28:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017d2a:	429a      	cmp	r2, r3
 8017d2c:	d10e      	bne.n	8017d4c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017d2e:	6a3b      	ldr	r3, [r7, #32]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d014      	beq.n	8017d5e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d36:	68da      	ldr	r2, [r3, #12]
 8017d38:	6a3b      	ldr	r3, [r7, #32]
 8017d3a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017d3c:	4b3e      	ldr	r3, [pc, #248]	@ (8017e38 <udp_input+0x21c>)
 8017d3e:	681a      	ldr	r2, [r3, #0]
 8017d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d42:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017d44:	4a3c      	ldr	r2, [pc, #240]	@ (8017e38 <udp_input+0x21c>)
 8017d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d48:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017d4a:	e008      	b.n	8017d5e <udp_input+0x142>
      }
    }

    prev = pcb;
 8017d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d4e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d52:	68db      	ldr	r3, [r3, #12]
 8017d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8017d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d1a7      	bne.n	8017cac <udp_input+0x90>
 8017d5c:	e000      	b.n	8017d60 <udp_input+0x144>
        break;
 8017d5e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d101      	bne.n	8017d6a <udp_input+0x14e>
    pcb = uncon_pcb;
 8017d66:	69fb      	ldr	r3, [r7, #28]
 8017d68:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d002      	beq.n	8017d76 <udp_input+0x15a>
    for_us = 1;
 8017d70:	2301      	movs	r3, #1
 8017d72:	76fb      	strb	r3, [r7, #27]
 8017d74:	e00a      	b.n	8017d8c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017d76:	683b      	ldr	r3, [r7, #0]
 8017d78:	3304      	adds	r3, #4
 8017d7a:	681a      	ldr	r2, [r3, #0]
 8017d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8017e34 <udp_input+0x218>)
 8017d7e:	695b      	ldr	r3, [r3, #20]
 8017d80:	429a      	cmp	r2, r3
 8017d82:	bf0c      	ite	eq
 8017d84:	2301      	moveq	r3, #1
 8017d86:	2300      	movne	r3, #0
 8017d88:	b2db      	uxtb	r3, r3
 8017d8a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017d8c:	7efb      	ldrb	r3, [r7, #27]
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d041      	beq.n	8017e16 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8017d92:	2108      	movs	r1, #8
 8017d94:	6878      	ldr	r0, [r7, #4]
 8017d96:	f7fa f891 	bl	8011ebc <pbuf_remove_header>
 8017d9a:	4603      	mov	r3, r0
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d00a      	beq.n	8017db6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017da0:	4b20      	ldr	r3, [pc, #128]	@ (8017e24 <udp_input+0x208>)
 8017da2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8017da6:	4925      	ldr	r1, [pc, #148]	@ (8017e3c <udp_input+0x220>)
 8017da8:	4820      	ldr	r0, [pc, #128]	@ (8017e2c <udp_input+0x210>)
 8017daa:	f005 fb0b 	bl	801d3c4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8017dae:	6878      	ldr	r0, [r7, #4]
 8017db0:	f7fa f90a 	bl	8011fc8 <pbuf_free>
      goto end;
 8017db4:	e032      	b.n	8017e1c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d012      	beq.n	8017de2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dbe:	699b      	ldr	r3, [r3, #24]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d00a      	beq.n	8017dda <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dc6:	699c      	ldr	r4, [r3, #24]
 8017dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dca:	69d8      	ldr	r0, [r3, #28]
 8017dcc:	8a3b      	ldrh	r3, [r7, #16]
 8017dce:	9300      	str	r3, [sp, #0]
 8017dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8017e40 <udp_input+0x224>)
 8017dd2:	687a      	ldr	r2, [r7, #4]
 8017dd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017dd6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017dd8:	e021      	b.n	8017e1e <udp_input+0x202>
        pbuf_free(p);
 8017dda:	6878      	ldr	r0, [r7, #4]
 8017ddc:	f7fa f8f4 	bl	8011fc8 <pbuf_free>
        goto end;
 8017de0:	e01c      	b.n	8017e1c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017de2:	7cfb      	ldrb	r3, [r7, #19]
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d112      	bne.n	8017e0e <udp_input+0x1f2>
 8017de8:	4b12      	ldr	r3, [pc, #72]	@ (8017e34 <udp_input+0x218>)
 8017dea:	695b      	ldr	r3, [r3, #20]
 8017dec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017df0:	2be0      	cmp	r3, #224	@ 0xe0
 8017df2:	d00c      	beq.n	8017e0e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017df4:	4b0f      	ldr	r3, [pc, #60]	@ (8017e34 <udp_input+0x218>)
 8017df6:	899b      	ldrh	r3, [r3, #12]
 8017df8:	3308      	adds	r3, #8
 8017dfa:	b29b      	uxth	r3, r3
 8017dfc:	b21b      	sxth	r3, r3
 8017dfe:	4619      	mov	r1, r3
 8017e00:	6878      	ldr	r0, [r7, #4]
 8017e02:	f7fa f8ce 	bl	8011fa2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8017e06:	2103      	movs	r1, #3
 8017e08:	6878      	ldr	r0, [r7, #4]
 8017e0a:	f003 fa13 	bl	801b234 <icmp_dest_unreach>
      pbuf_free(p);
 8017e0e:	6878      	ldr	r0, [r7, #4]
 8017e10:	f7fa f8da 	bl	8011fc8 <pbuf_free>
  return;
 8017e14:	e003      	b.n	8017e1e <udp_input+0x202>
    pbuf_free(p);
 8017e16:	6878      	ldr	r0, [r7, #4]
 8017e18:	f7fa f8d6 	bl	8011fc8 <pbuf_free>
  return;
 8017e1c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8017e1e:	372c      	adds	r7, #44	@ 0x2c
 8017e20:	46bd      	mov	sp, r7
 8017e22:	bd90      	pop	{r4, r7, pc}
 8017e24:	08021658 	.word	0x08021658
 8017e28:	080216fc 	.word	0x080216fc
 8017e2c:	080216ac 	.word	0x080216ac
 8017e30:	08021714 	.word	0x08021714
 8017e34:	24009b14 	.word	0x24009b14
 8017e38:	2400cc90 	.word	0x2400cc90
 8017e3c:	08021730 	.word	0x08021730
 8017e40:	24009b24 	.word	0x24009b24

08017e44 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8017e44:	b580      	push	{r7, lr}
 8017e46:	b088      	sub	sp, #32
 8017e48:	af02      	add	r7, sp, #8
 8017e4a:	60f8      	str	r0, [r7, #12]
 8017e4c:	60b9      	str	r1, [r7, #8]
 8017e4e:	607a      	str	r2, [r7, #4]
 8017e50:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d109      	bne.n	8017e6c <udp_sendto_if+0x28>
 8017e58:	4b2e      	ldr	r3, [pc, #184]	@ (8017f14 <udp_sendto_if+0xd0>)
 8017e5a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017e5e:	492e      	ldr	r1, [pc, #184]	@ (8017f18 <udp_sendto_if+0xd4>)
 8017e60:	482e      	ldr	r0, [pc, #184]	@ (8017f1c <udp_sendto_if+0xd8>)
 8017e62:	f005 faaf 	bl	801d3c4 <iprintf>
 8017e66:	f06f 030f 	mvn.w	r3, #15
 8017e6a:	e04f      	b.n	8017f0c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8017e6c:	68bb      	ldr	r3, [r7, #8]
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d109      	bne.n	8017e86 <udp_sendto_if+0x42>
 8017e72:	4b28      	ldr	r3, [pc, #160]	@ (8017f14 <udp_sendto_if+0xd0>)
 8017e74:	f240 2281 	movw	r2, #641	@ 0x281
 8017e78:	4929      	ldr	r1, [pc, #164]	@ (8017f20 <udp_sendto_if+0xdc>)
 8017e7a:	4828      	ldr	r0, [pc, #160]	@ (8017f1c <udp_sendto_if+0xd8>)
 8017e7c:	f005 faa2 	bl	801d3c4 <iprintf>
 8017e80:	f06f 030f 	mvn.w	r3, #15
 8017e84:	e042      	b.n	8017f0c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d109      	bne.n	8017ea0 <udp_sendto_if+0x5c>
 8017e8c:	4b21      	ldr	r3, [pc, #132]	@ (8017f14 <udp_sendto_if+0xd0>)
 8017e8e:	f240 2282 	movw	r2, #642	@ 0x282
 8017e92:	4924      	ldr	r1, [pc, #144]	@ (8017f24 <udp_sendto_if+0xe0>)
 8017e94:	4821      	ldr	r0, [pc, #132]	@ (8017f1c <udp_sendto_if+0xd8>)
 8017e96:	f005 fa95 	bl	801d3c4 <iprintf>
 8017e9a:	f06f 030f 	mvn.w	r3, #15
 8017e9e:	e035      	b.n	8017f0c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8017ea0:	6a3b      	ldr	r3, [r7, #32]
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d109      	bne.n	8017eba <udp_sendto_if+0x76>
 8017ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8017f14 <udp_sendto_if+0xd0>)
 8017ea8:	f240 2283 	movw	r2, #643	@ 0x283
 8017eac:	491e      	ldr	r1, [pc, #120]	@ (8017f28 <udp_sendto_if+0xe4>)
 8017eae:	481b      	ldr	r0, [pc, #108]	@ (8017f1c <udp_sendto_if+0xd8>)
 8017eb0:	f005 fa88 	bl	801d3c4 <iprintf>
 8017eb4:	f06f 030f 	mvn.w	r3, #15
 8017eb8:	e028      	b.n	8017f0c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d009      	beq.n	8017ed4 <udp_sendto_if+0x90>
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d005      	beq.n	8017ed4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8017ec8:	68fb      	ldr	r3, [r7, #12]
 8017eca:	681b      	ldr	r3, [r3, #0]
 8017ecc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017ed0:	2be0      	cmp	r3, #224	@ 0xe0
 8017ed2:	d103      	bne.n	8017edc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8017ed4:	6a3b      	ldr	r3, [r7, #32]
 8017ed6:	3304      	adds	r3, #4
 8017ed8:	617b      	str	r3, [r7, #20]
 8017eda:	e00b      	b.n	8017ef4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8017edc:	68fb      	ldr	r3, [r7, #12]
 8017ede:	681a      	ldr	r2, [r3, #0]
 8017ee0:	6a3b      	ldr	r3, [r7, #32]
 8017ee2:	3304      	adds	r3, #4
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	429a      	cmp	r2, r3
 8017ee8:	d002      	beq.n	8017ef0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8017eea:	f06f 0303 	mvn.w	r3, #3
 8017eee:	e00d      	b.n	8017f0c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8017ef4:	887a      	ldrh	r2, [r7, #2]
 8017ef6:	697b      	ldr	r3, [r7, #20]
 8017ef8:	9301      	str	r3, [sp, #4]
 8017efa:	6a3b      	ldr	r3, [r7, #32]
 8017efc:	9300      	str	r3, [sp, #0]
 8017efe:	4613      	mov	r3, r2
 8017f00:	687a      	ldr	r2, [r7, #4]
 8017f02:	68b9      	ldr	r1, [r7, #8]
 8017f04:	68f8      	ldr	r0, [r7, #12]
 8017f06:	f000 f811 	bl	8017f2c <udp_sendto_if_src>
 8017f0a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017f0c:	4618      	mov	r0, r3
 8017f0e:	3718      	adds	r7, #24
 8017f10:	46bd      	mov	sp, r7
 8017f12:	bd80      	pop	{r7, pc}
 8017f14:	08021658 	.word	0x08021658
 8017f18:	080217cc 	.word	0x080217cc
 8017f1c:	080216ac 	.word	0x080216ac
 8017f20:	080217e8 	.word	0x080217e8
 8017f24:	08021804 	.word	0x08021804
 8017f28:	08021824 	.word	0x08021824

08017f2c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8017f2c:	b580      	push	{r7, lr}
 8017f2e:	b08c      	sub	sp, #48	@ 0x30
 8017f30:	af04      	add	r7, sp, #16
 8017f32:	60f8      	str	r0, [r7, #12]
 8017f34:	60b9      	str	r1, [r7, #8]
 8017f36:	607a      	str	r2, [r7, #4]
 8017f38:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8017f3a:	68fb      	ldr	r3, [r7, #12]
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d109      	bne.n	8017f54 <udp_sendto_if_src+0x28>
 8017f40:	4b65      	ldr	r3, [pc, #404]	@ (80180d8 <udp_sendto_if_src+0x1ac>)
 8017f42:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8017f46:	4965      	ldr	r1, [pc, #404]	@ (80180dc <udp_sendto_if_src+0x1b0>)
 8017f48:	4865      	ldr	r0, [pc, #404]	@ (80180e0 <udp_sendto_if_src+0x1b4>)
 8017f4a:	f005 fa3b 	bl	801d3c4 <iprintf>
 8017f4e:	f06f 030f 	mvn.w	r3, #15
 8017f52:	e0bc      	b.n	80180ce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8017f54:	68bb      	ldr	r3, [r7, #8]
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d109      	bne.n	8017f6e <udp_sendto_if_src+0x42>
 8017f5a:	4b5f      	ldr	r3, [pc, #380]	@ (80180d8 <udp_sendto_if_src+0x1ac>)
 8017f5c:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8017f60:	4960      	ldr	r1, [pc, #384]	@ (80180e4 <udp_sendto_if_src+0x1b8>)
 8017f62:	485f      	ldr	r0, [pc, #380]	@ (80180e0 <udp_sendto_if_src+0x1b4>)
 8017f64:	f005 fa2e 	bl	801d3c4 <iprintf>
 8017f68:	f06f 030f 	mvn.w	r3, #15
 8017f6c:	e0af      	b.n	80180ce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d109      	bne.n	8017f88 <udp_sendto_if_src+0x5c>
 8017f74:	4b58      	ldr	r3, [pc, #352]	@ (80180d8 <udp_sendto_if_src+0x1ac>)
 8017f76:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8017f7a:	495b      	ldr	r1, [pc, #364]	@ (80180e8 <udp_sendto_if_src+0x1bc>)
 8017f7c:	4858      	ldr	r0, [pc, #352]	@ (80180e0 <udp_sendto_if_src+0x1b4>)
 8017f7e:	f005 fa21 	bl	801d3c4 <iprintf>
 8017f82:	f06f 030f 	mvn.w	r3, #15
 8017f86:	e0a2      	b.n	80180ce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8017f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d109      	bne.n	8017fa2 <udp_sendto_if_src+0x76>
 8017f8e:	4b52      	ldr	r3, [pc, #328]	@ (80180d8 <udp_sendto_if_src+0x1ac>)
 8017f90:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8017f94:	4955      	ldr	r1, [pc, #340]	@ (80180ec <udp_sendto_if_src+0x1c0>)
 8017f96:	4852      	ldr	r0, [pc, #328]	@ (80180e0 <udp_sendto_if_src+0x1b4>)
 8017f98:	f005 fa14 	bl	801d3c4 <iprintf>
 8017f9c:	f06f 030f 	mvn.w	r3, #15
 8017fa0:	e095      	b.n	80180ce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8017fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d109      	bne.n	8017fbc <udp_sendto_if_src+0x90>
 8017fa8:	4b4b      	ldr	r3, [pc, #300]	@ (80180d8 <udp_sendto_if_src+0x1ac>)
 8017faa:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8017fae:	4950      	ldr	r1, [pc, #320]	@ (80180f0 <udp_sendto_if_src+0x1c4>)
 8017fb0:	484b      	ldr	r0, [pc, #300]	@ (80180e0 <udp_sendto_if_src+0x1b4>)
 8017fb2:	f005 fa07 	bl	801d3c4 <iprintf>
 8017fb6:	f06f 030f 	mvn.w	r3, #15
 8017fba:	e088      	b.n	80180ce <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	8a5b      	ldrh	r3, [r3, #18]
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d10f      	bne.n	8017fe4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017fc4:	68f9      	ldr	r1, [r7, #12]
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	8a5b      	ldrh	r3, [r3, #18]
 8017fca:	461a      	mov	r2, r3
 8017fcc:	68f8      	ldr	r0, [r7, #12]
 8017fce:	f000 f893 	bl	80180f8 <udp_bind>
 8017fd2:	4603      	mov	r3, r0
 8017fd4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8017fd6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d002      	beq.n	8017fe4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8017fde:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017fe2:	e074      	b.n	80180ce <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8017fe4:	68bb      	ldr	r3, [r7, #8]
 8017fe6:	891b      	ldrh	r3, [r3, #8]
 8017fe8:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8017fec:	4293      	cmp	r3, r2
 8017fee:	d902      	bls.n	8017ff6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8017ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8017ff4:	e06b      	b.n	80180ce <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8017ff6:	2108      	movs	r1, #8
 8017ff8:	68b8      	ldr	r0, [r7, #8]
 8017ffa:	f7f9 ff4f 	bl	8011e9c <pbuf_add_header>
 8017ffe:	4603      	mov	r3, r0
 8018000:	2b00      	cmp	r3, #0
 8018002:	d015      	beq.n	8018030 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8018004:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018008:	2108      	movs	r1, #8
 801800a:	2022      	movs	r0, #34	@ 0x22
 801800c:	f7f9 fcf8 	bl	8011a00 <pbuf_alloc>
 8018010:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8018012:	69fb      	ldr	r3, [r7, #28]
 8018014:	2b00      	cmp	r3, #0
 8018016:	d102      	bne.n	801801e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8018018:	f04f 33ff 	mov.w	r3, #4294967295
 801801c:	e057      	b.n	80180ce <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801801e:	68bb      	ldr	r3, [r7, #8]
 8018020:	891b      	ldrh	r3, [r3, #8]
 8018022:	2b00      	cmp	r3, #0
 8018024:	d006      	beq.n	8018034 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8018026:	68b9      	ldr	r1, [r7, #8]
 8018028:	69f8      	ldr	r0, [r7, #28]
 801802a:	f7fa f8f1 	bl	8012210 <pbuf_chain>
 801802e:	e001      	b.n	8018034 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8018030:	68bb      	ldr	r3, [r7, #8]
 8018032:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8018034:	69fb      	ldr	r3, [r7, #28]
 8018036:	895b      	ldrh	r3, [r3, #10]
 8018038:	2b07      	cmp	r3, #7
 801803a:	d806      	bhi.n	801804a <udp_sendto_if_src+0x11e>
 801803c:	4b26      	ldr	r3, [pc, #152]	@ (80180d8 <udp_sendto_if_src+0x1ac>)
 801803e:	f240 320d 	movw	r2, #781	@ 0x30d
 8018042:	492c      	ldr	r1, [pc, #176]	@ (80180f4 <udp_sendto_if_src+0x1c8>)
 8018044:	4826      	ldr	r0, [pc, #152]	@ (80180e0 <udp_sendto_if_src+0x1b4>)
 8018046:	f005 f9bd 	bl	801d3c4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801804a:	69fb      	ldr	r3, [r7, #28]
 801804c:	685b      	ldr	r3, [r3, #4]
 801804e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8018050:	68fb      	ldr	r3, [r7, #12]
 8018052:	8a5b      	ldrh	r3, [r3, #18]
 8018054:	4618      	mov	r0, r3
 8018056:	f7f8 fb01 	bl	801065c <lwip_htons>
 801805a:	4603      	mov	r3, r0
 801805c:	461a      	mov	r2, r3
 801805e:	697b      	ldr	r3, [r7, #20]
 8018060:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8018062:	887b      	ldrh	r3, [r7, #2]
 8018064:	4618      	mov	r0, r3
 8018066:	f7f8 faf9 	bl	801065c <lwip_htons>
 801806a:	4603      	mov	r3, r0
 801806c:	461a      	mov	r2, r3
 801806e:	697b      	ldr	r3, [r7, #20]
 8018070:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8018072:	697b      	ldr	r3, [r7, #20]
 8018074:	2200      	movs	r2, #0
 8018076:	719a      	strb	r2, [r3, #6]
 8018078:	2200      	movs	r2, #0
 801807a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801807c:	69fb      	ldr	r3, [r7, #28]
 801807e:	891b      	ldrh	r3, [r3, #8]
 8018080:	4618      	mov	r0, r3
 8018082:	f7f8 faeb 	bl	801065c <lwip_htons>
 8018086:	4603      	mov	r3, r0
 8018088:	461a      	mov	r2, r3
 801808a:	697b      	ldr	r3, [r7, #20]
 801808c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801808e:	2311      	movs	r3, #17
 8018090:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8018092:	68fb      	ldr	r3, [r7, #12]
 8018094:	7adb      	ldrb	r3, [r3, #11]
 8018096:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	7a9b      	ldrb	r3, [r3, #10]
 801809c:	7cb9      	ldrb	r1, [r7, #18]
 801809e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80180a0:	9202      	str	r2, [sp, #8]
 80180a2:	7cfa      	ldrb	r2, [r7, #19]
 80180a4:	9201      	str	r2, [sp, #4]
 80180a6:	9300      	str	r3, [sp, #0]
 80180a8:	460b      	mov	r3, r1
 80180aa:	687a      	ldr	r2, [r7, #4]
 80180ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80180ae:	69f8      	ldr	r0, [r7, #28]
 80180b0:	f003 fb5a 	bl	801b768 <ip4_output_if_src>
 80180b4:	4603      	mov	r3, r0
 80180b6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80180b8:	69fa      	ldr	r2, [r7, #28]
 80180ba:	68bb      	ldr	r3, [r7, #8]
 80180bc:	429a      	cmp	r2, r3
 80180be:	d004      	beq.n	80180ca <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80180c0:	69f8      	ldr	r0, [r7, #28]
 80180c2:	f7f9 ff81 	bl	8011fc8 <pbuf_free>
    q = NULL;
 80180c6:	2300      	movs	r3, #0
 80180c8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80180ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80180ce:	4618      	mov	r0, r3
 80180d0:	3720      	adds	r7, #32
 80180d2:	46bd      	mov	sp, r7
 80180d4:	bd80      	pop	{r7, pc}
 80180d6:	bf00      	nop
 80180d8:	08021658 	.word	0x08021658
 80180dc:	08021844 	.word	0x08021844
 80180e0:	080216ac 	.word	0x080216ac
 80180e4:	08021864 	.word	0x08021864
 80180e8:	08021884 	.word	0x08021884
 80180ec:	080218a8 	.word	0x080218a8
 80180f0:	080218cc 	.word	0x080218cc
 80180f4:	080218f0 	.word	0x080218f0

080180f8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80180f8:	b580      	push	{r7, lr}
 80180fa:	b086      	sub	sp, #24
 80180fc:	af00      	add	r7, sp, #0
 80180fe:	60f8      	str	r0, [r7, #12]
 8018100:	60b9      	str	r1, [r7, #8]
 8018102:	4613      	mov	r3, r2
 8018104:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8018106:	68bb      	ldr	r3, [r7, #8]
 8018108:	2b00      	cmp	r3, #0
 801810a:	d101      	bne.n	8018110 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801810c:	4b39      	ldr	r3, [pc, #228]	@ (80181f4 <udp_bind+0xfc>)
 801810e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8018110:	68fb      	ldr	r3, [r7, #12]
 8018112:	2b00      	cmp	r3, #0
 8018114:	d109      	bne.n	801812a <udp_bind+0x32>
 8018116:	4b38      	ldr	r3, [pc, #224]	@ (80181f8 <udp_bind+0x100>)
 8018118:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801811c:	4937      	ldr	r1, [pc, #220]	@ (80181fc <udp_bind+0x104>)
 801811e:	4838      	ldr	r0, [pc, #224]	@ (8018200 <udp_bind+0x108>)
 8018120:	f005 f950 	bl	801d3c4 <iprintf>
 8018124:	f06f 030f 	mvn.w	r3, #15
 8018128:	e060      	b.n	80181ec <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801812a:	2300      	movs	r3, #0
 801812c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801812e:	4b35      	ldr	r3, [pc, #212]	@ (8018204 <udp_bind+0x10c>)
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	617b      	str	r3, [r7, #20]
 8018134:	e009      	b.n	801814a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8018136:	68fa      	ldr	r2, [r7, #12]
 8018138:	697b      	ldr	r3, [r7, #20]
 801813a:	429a      	cmp	r2, r3
 801813c:	d102      	bne.n	8018144 <udp_bind+0x4c>
      rebind = 1;
 801813e:	2301      	movs	r3, #1
 8018140:	74fb      	strb	r3, [r7, #19]
      break;
 8018142:	e005      	b.n	8018150 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018144:	697b      	ldr	r3, [r7, #20]
 8018146:	68db      	ldr	r3, [r3, #12]
 8018148:	617b      	str	r3, [r7, #20]
 801814a:	697b      	ldr	r3, [r7, #20]
 801814c:	2b00      	cmp	r3, #0
 801814e:	d1f2      	bne.n	8018136 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8018150:	88fb      	ldrh	r3, [r7, #6]
 8018152:	2b00      	cmp	r3, #0
 8018154:	d109      	bne.n	801816a <udp_bind+0x72>
    port = udp_new_port();
 8018156:	f7ff fcc5 	bl	8017ae4 <udp_new_port>
 801815a:	4603      	mov	r3, r0
 801815c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801815e:	88fb      	ldrh	r3, [r7, #6]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d12c      	bne.n	80181be <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8018164:	f06f 0307 	mvn.w	r3, #7
 8018168:	e040      	b.n	80181ec <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801816a:	4b26      	ldr	r3, [pc, #152]	@ (8018204 <udp_bind+0x10c>)
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	617b      	str	r3, [r7, #20]
 8018170:	e022      	b.n	80181b8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8018172:	68fa      	ldr	r2, [r7, #12]
 8018174:	697b      	ldr	r3, [r7, #20]
 8018176:	429a      	cmp	r2, r3
 8018178:	d01b      	beq.n	80181b2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801817a:	697b      	ldr	r3, [r7, #20]
 801817c:	8a5b      	ldrh	r3, [r3, #18]
 801817e:	88fa      	ldrh	r2, [r7, #6]
 8018180:	429a      	cmp	r2, r3
 8018182:	d116      	bne.n	80181b2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018184:	697b      	ldr	r3, [r7, #20]
 8018186:	681a      	ldr	r2, [r3, #0]
 8018188:	68bb      	ldr	r3, [r7, #8]
 801818a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801818c:	429a      	cmp	r2, r3
 801818e:	d00d      	beq.n	80181ac <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018190:	68bb      	ldr	r3, [r7, #8]
 8018192:	2b00      	cmp	r3, #0
 8018194:	d00a      	beq.n	80181ac <udp_bind+0xb4>
 8018196:	68bb      	ldr	r3, [r7, #8]
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	2b00      	cmp	r3, #0
 801819c:	d006      	beq.n	80181ac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801819e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d003      	beq.n	80181ac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80181a4:	697b      	ldr	r3, [r7, #20]
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d102      	bne.n	80181b2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80181ac:	f06f 0307 	mvn.w	r3, #7
 80181b0:	e01c      	b.n	80181ec <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80181b2:	697b      	ldr	r3, [r7, #20]
 80181b4:	68db      	ldr	r3, [r3, #12]
 80181b6:	617b      	str	r3, [r7, #20]
 80181b8:	697b      	ldr	r3, [r7, #20]
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d1d9      	bne.n	8018172 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80181be:	68bb      	ldr	r3, [r7, #8]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d002      	beq.n	80181ca <udp_bind+0xd2>
 80181c4:	68bb      	ldr	r3, [r7, #8]
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	e000      	b.n	80181cc <udp_bind+0xd4>
 80181ca:	2300      	movs	r3, #0
 80181cc:	68fa      	ldr	r2, [r7, #12]
 80181ce:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80181d0:	68fb      	ldr	r3, [r7, #12]
 80181d2:	88fa      	ldrh	r2, [r7, #6]
 80181d4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80181d6:	7cfb      	ldrb	r3, [r7, #19]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d106      	bne.n	80181ea <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80181dc:	4b09      	ldr	r3, [pc, #36]	@ (8018204 <udp_bind+0x10c>)
 80181de:	681a      	ldr	r2, [r3, #0]
 80181e0:	68fb      	ldr	r3, [r7, #12]
 80181e2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80181e4:	4a07      	ldr	r2, [pc, #28]	@ (8018204 <udp_bind+0x10c>)
 80181e6:	68fb      	ldr	r3, [r7, #12]
 80181e8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80181ea:	2300      	movs	r3, #0
}
 80181ec:	4618      	mov	r0, r3
 80181ee:	3718      	adds	r7, #24
 80181f0:	46bd      	mov	sp, r7
 80181f2:	bd80      	pop	{r7, pc}
 80181f4:	08022610 	.word	0x08022610
 80181f8:	08021658 	.word	0x08021658
 80181fc:	08021920 	.word	0x08021920
 8018200:	080216ac 	.word	0x080216ac
 8018204:	2400cc90 	.word	0x2400cc90

08018208 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018208:	b580      	push	{r7, lr}
 801820a:	b086      	sub	sp, #24
 801820c:	af00      	add	r7, sp, #0
 801820e:	60f8      	str	r0, [r7, #12]
 8018210:	60b9      	str	r1, [r7, #8]
 8018212:	4613      	mov	r3, r2
 8018214:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8018216:	68fb      	ldr	r3, [r7, #12]
 8018218:	2b00      	cmp	r3, #0
 801821a:	d109      	bne.n	8018230 <udp_connect+0x28>
 801821c:	4b2c      	ldr	r3, [pc, #176]	@ (80182d0 <udp_connect+0xc8>)
 801821e:	f240 4235 	movw	r2, #1077	@ 0x435
 8018222:	492c      	ldr	r1, [pc, #176]	@ (80182d4 <udp_connect+0xcc>)
 8018224:	482c      	ldr	r0, [pc, #176]	@ (80182d8 <udp_connect+0xd0>)
 8018226:	f005 f8cd 	bl	801d3c4 <iprintf>
 801822a:	f06f 030f 	mvn.w	r3, #15
 801822e:	e04b      	b.n	80182c8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8018230:	68bb      	ldr	r3, [r7, #8]
 8018232:	2b00      	cmp	r3, #0
 8018234:	d109      	bne.n	801824a <udp_connect+0x42>
 8018236:	4b26      	ldr	r3, [pc, #152]	@ (80182d0 <udp_connect+0xc8>)
 8018238:	f240 4236 	movw	r2, #1078	@ 0x436
 801823c:	4927      	ldr	r1, [pc, #156]	@ (80182dc <udp_connect+0xd4>)
 801823e:	4826      	ldr	r0, [pc, #152]	@ (80182d8 <udp_connect+0xd0>)
 8018240:	f005 f8c0 	bl	801d3c4 <iprintf>
 8018244:	f06f 030f 	mvn.w	r3, #15
 8018248:	e03e      	b.n	80182c8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	8a5b      	ldrh	r3, [r3, #18]
 801824e:	2b00      	cmp	r3, #0
 8018250:	d10f      	bne.n	8018272 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8018252:	68f9      	ldr	r1, [r7, #12]
 8018254:	68fb      	ldr	r3, [r7, #12]
 8018256:	8a5b      	ldrh	r3, [r3, #18]
 8018258:	461a      	mov	r2, r3
 801825a:	68f8      	ldr	r0, [r7, #12]
 801825c:	f7ff ff4c 	bl	80180f8 <udp_bind>
 8018260:	4603      	mov	r3, r0
 8018262:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8018264:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018268:	2b00      	cmp	r3, #0
 801826a:	d002      	beq.n	8018272 <udp_connect+0x6a>
      return err;
 801826c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018270:	e02a      	b.n	80182c8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8018272:	68bb      	ldr	r3, [r7, #8]
 8018274:	2b00      	cmp	r3, #0
 8018276:	d002      	beq.n	801827e <udp_connect+0x76>
 8018278:	68bb      	ldr	r3, [r7, #8]
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	e000      	b.n	8018280 <udp_connect+0x78>
 801827e:	2300      	movs	r3, #0
 8018280:	68fa      	ldr	r2, [r7, #12]
 8018282:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8018284:	68fb      	ldr	r3, [r7, #12]
 8018286:	88fa      	ldrh	r2, [r7, #6]
 8018288:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	7c1b      	ldrb	r3, [r3, #16]
 801828e:	f043 0304 	orr.w	r3, r3, #4
 8018292:	b2da      	uxtb	r2, r3
 8018294:	68fb      	ldr	r3, [r7, #12]
 8018296:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018298:	4b11      	ldr	r3, [pc, #68]	@ (80182e0 <udp_connect+0xd8>)
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	617b      	str	r3, [r7, #20]
 801829e:	e008      	b.n	80182b2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 80182a0:	68fa      	ldr	r2, [r7, #12]
 80182a2:	697b      	ldr	r3, [r7, #20]
 80182a4:	429a      	cmp	r2, r3
 80182a6:	d101      	bne.n	80182ac <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80182a8:	2300      	movs	r3, #0
 80182aa:	e00d      	b.n	80182c8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80182ac:	697b      	ldr	r3, [r7, #20]
 80182ae:	68db      	ldr	r3, [r3, #12]
 80182b0:	617b      	str	r3, [r7, #20]
 80182b2:	697b      	ldr	r3, [r7, #20]
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d1f3      	bne.n	80182a0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80182b8:	4b09      	ldr	r3, [pc, #36]	@ (80182e0 <udp_connect+0xd8>)
 80182ba:	681a      	ldr	r2, [r3, #0]
 80182bc:	68fb      	ldr	r3, [r7, #12]
 80182be:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80182c0:	4a07      	ldr	r2, [pc, #28]	@ (80182e0 <udp_connect+0xd8>)
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80182c6:	2300      	movs	r3, #0
}
 80182c8:	4618      	mov	r0, r3
 80182ca:	3718      	adds	r7, #24
 80182cc:	46bd      	mov	sp, r7
 80182ce:	bd80      	pop	{r7, pc}
 80182d0:	08021658 	.word	0x08021658
 80182d4:	08021938 	.word	0x08021938
 80182d8:	080216ac 	.word	0x080216ac
 80182dc:	08021954 	.word	0x08021954
 80182e0:	2400cc90 	.word	0x2400cc90

080182e4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80182e4:	b580      	push	{r7, lr}
 80182e6:	b084      	sub	sp, #16
 80182e8:	af00      	add	r7, sp, #0
 80182ea:	60f8      	str	r0, [r7, #12]
 80182ec:	60b9      	str	r1, [r7, #8]
 80182ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80182f0:	68fb      	ldr	r3, [r7, #12]
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d107      	bne.n	8018306 <udp_recv+0x22>
 80182f6:	4b08      	ldr	r3, [pc, #32]	@ (8018318 <udp_recv+0x34>)
 80182f8:	f240 428a 	movw	r2, #1162	@ 0x48a
 80182fc:	4907      	ldr	r1, [pc, #28]	@ (801831c <udp_recv+0x38>)
 80182fe:	4808      	ldr	r0, [pc, #32]	@ (8018320 <udp_recv+0x3c>)
 8018300:	f005 f860 	bl	801d3c4 <iprintf>
 8018304:	e005      	b.n	8018312 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	68ba      	ldr	r2, [r7, #8]
 801830a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	687a      	ldr	r2, [r7, #4]
 8018310:	61da      	str	r2, [r3, #28]
}
 8018312:	3710      	adds	r7, #16
 8018314:	46bd      	mov	sp, r7
 8018316:	bd80      	pop	{r7, pc}
 8018318:	08021658 	.word	0x08021658
 801831c:	0802198c 	.word	0x0802198c
 8018320:	080216ac 	.word	0x080216ac

08018324 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8018324:	b580      	push	{r7, lr}
 8018326:	b084      	sub	sp, #16
 8018328:	af00      	add	r7, sp, #0
 801832a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	2b00      	cmp	r3, #0
 8018330:	d107      	bne.n	8018342 <udp_remove+0x1e>
 8018332:	4b19      	ldr	r3, [pc, #100]	@ (8018398 <udp_remove+0x74>)
 8018334:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8018338:	4918      	ldr	r1, [pc, #96]	@ (801839c <udp_remove+0x78>)
 801833a:	4819      	ldr	r0, [pc, #100]	@ (80183a0 <udp_remove+0x7c>)
 801833c:	f005 f842 	bl	801d3c4 <iprintf>
 8018340:	e026      	b.n	8018390 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8018342:	4b18      	ldr	r3, [pc, #96]	@ (80183a4 <udp_remove+0x80>)
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	687a      	ldr	r2, [r7, #4]
 8018348:	429a      	cmp	r2, r3
 801834a:	d105      	bne.n	8018358 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801834c:	4b15      	ldr	r3, [pc, #84]	@ (80183a4 <udp_remove+0x80>)
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	68db      	ldr	r3, [r3, #12]
 8018352:	4a14      	ldr	r2, [pc, #80]	@ (80183a4 <udp_remove+0x80>)
 8018354:	6013      	str	r3, [r2, #0]
 8018356:	e017      	b.n	8018388 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018358:	4b12      	ldr	r3, [pc, #72]	@ (80183a4 <udp_remove+0x80>)
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	60fb      	str	r3, [r7, #12]
 801835e:	e010      	b.n	8018382 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	68db      	ldr	r3, [r3, #12]
 8018364:	2b00      	cmp	r3, #0
 8018366:	d009      	beq.n	801837c <udp_remove+0x58>
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	68db      	ldr	r3, [r3, #12]
 801836c:	687a      	ldr	r2, [r7, #4]
 801836e:	429a      	cmp	r2, r3
 8018370:	d104      	bne.n	801837c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	68da      	ldr	r2, [r3, #12]
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	60da      	str	r2, [r3, #12]
        break;
 801837a:	e005      	b.n	8018388 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	68db      	ldr	r3, [r3, #12]
 8018380:	60fb      	str	r3, [r7, #12]
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d1eb      	bne.n	8018360 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8018388:	6879      	ldr	r1, [r7, #4]
 801838a:	2000      	movs	r0, #0
 801838c:	f7f8 ff6c 	bl	8011268 <memp_free>
}
 8018390:	3710      	adds	r7, #16
 8018392:	46bd      	mov	sp, r7
 8018394:	bd80      	pop	{r7, pc}
 8018396:	bf00      	nop
 8018398:	08021658 	.word	0x08021658
 801839c:	080219a4 	.word	0x080219a4
 80183a0:	080216ac 	.word	0x080216ac
 80183a4:	2400cc90 	.word	0x2400cc90

080183a8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80183a8:	b580      	push	{r7, lr}
 80183aa:	b082      	sub	sp, #8
 80183ac:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80183ae:	2000      	movs	r0, #0
 80183b0:	f7f8 fee4 	bl	801117c <memp_malloc>
 80183b4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d007      	beq.n	80183cc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80183bc:	2220      	movs	r2, #32
 80183be:	2100      	movs	r1, #0
 80183c0:	6878      	ldr	r0, [r7, #4]
 80183c2:	f005 f957 	bl	801d674 <memset>
    pcb->ttl = UDP_TTL;
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	22ff      	movs	r2, #255	@ 0xff
 80183ca:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80183cc:	687b      	ldr	r3, [r7, #4]
}
 80183ce:	4618      	mov	r0, r3
 80183d0:	3708      	adds	r7, #8
 80183d2:	46bd      	mov	sp, r7
 80183d4:	bd80      	pop	{r7, pc}
	...

080183d8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80183d8:	b480      	push	{r7}
 80183da:	b085      	sub	sp, #20
 80183dc:	af00      	add	r7, sp, #0
 80183de:	6078      	str	r0, [r7, #4]
 80183e0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d01e      	beq.n	8018426 <udp_netif_ip_addr_changed+0x4e>
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d01a      	beq.n	8018426 <udp_netif_ip_addr_changed+0x4e>
 80183f0:	683b      	ldr	r3, [r7, #0]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d017      	beq.n	8018426 <udp_netif_ip_addr_changed+0x4e>
 80183f6:	683b      	ldr	r3, [r7, #0]
 80183f8:	681b      	ldr	r3, [r3, #0]
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d013      	beq.n	8018426 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80183fe:	4b0d      	ldr	r3, [pc, #52]	@ (8018434 <udp_netif_ip_addr_changed+0x5c>)
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	60fb      	str	r3, [r7, #12]
 8018404:	e00c      	b.n	8018420 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018406:	68fb      	ldr	r3, [r7, #12]
 8018408:	681a      	ldr	r2, [r3, #0]
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	429a      	cmp	r2, r3
 8018410:	d103      	bne.n	801841a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018412:	683b      	ldr	r3, [r7, #0]
 8018414:	681a      	ldr	r2, [r3, #0]
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801841a:	68fb      	ldr	r3, [r7, #12]
 801841c:	68db      	ldr	r3, [r3, #12]
 801841e:	60fb      	str	r3, [r7, #12]
 8018420:	68fb      	ldr	r3, [r7, #12]
 8018422:	2b00      	cmp	r3, #0
 8018424:	d1ef      	bne.n	8018406 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018426:	bf00      	nop
 8018428:	3714      	adds	r7, #20
 801842a:	46bd      	mov	sp, r7
 801842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018430:	4770      	bx	lr
 8018432:	bf00      	nop
 8018434:	2400cc90 	.word	0x2400cc90

08018438 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8018438:	b580      	push	{r7, lr}
 801843a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801843c:	4b20      	ldr	r3, [pc, #128]	@ (80184c0 <dhcp_inc_pcb_refcount+0x88>)
 801843e:	781b      	ldrb	r3, [r3, #0]
 8018440:	2b00      	cmp	r3, #0
 8018442:	d133      	bne.n	80184ac <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8018444:	4b1f      	ldr	r3, [pc, #124]	@ (80184c4 <dhcp_inc_pcb_refcount+0x8c>)
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	2b00      	cmp	r3, #0
 801844a:	d005      	beq.n	8018458 <dhcp_inc_pcb_refcount+0x20>
 801844c:	4b1e      	ldr	r3, [pc, #120]	@ (80184c8 <dhcp_inc_pcb_refcount+0x90>)
 801844e:	22e5      	movs	r2, #229	@ 0xe5
 8018450:	491e      	ldr	r1, [pc, #120]	@ (80184cc <dhcp_inc_pcb_refcount+0x94>)
 8018452:	481f      	ldr	r0, [pc, #124]	@ (80184d0 <dhcp_inc_pcb_refcount+0x98>)
 8018454:	f004 ffb6 	bl	801d3c4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8018458:	f7ff ffa6 	bl	80183a8 <udp_new>
 801845c:	4603      	mov	r3, r0
 801845e:	4a19      	ldr	r2, [pc, #100]	@ (80184c4 <dhcp_inc_pcb_refcount+0x8c>)
 8018460:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8018462:	4b18      	ldr	r3, [pc, #96]	@ (80184c4 <dhcp_inc_pcb_refcount+0x8c>)
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	2b00      	cmp	r3, #0
 8018468:	d102      	bne.n	8018470 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801846a:	f04f 33ff 	mov.w	r3, #4294967295
 801846e:	e024      	b.n	80184ba <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8018470:	4b14      	ldr	r3, [pc, #80]	@ (80184c4 <dhcp_inc_pcb_refcount+0x8c>)
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	7a5a      	ldrb	r2, [r3, #9]
 8018476:	4b13      	ldr	r3, [pc, #76]	@ (80184c4 <dhcp_inc_pcb_refcount+0x8c>)
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	f042 0220 	orr.w	r2, r2, #32
 801847e:	b2d2      	uxtb	r2, r2
 8018480:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8018482:	4b10      	ldr	r3, [pc, #64]	@ (80184c4 <dhcp_inc_pcb_refcount+0x8c>)
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	2244      	movs	r2, #68	@ 0x44
 8018488:	4912      	ldr	r1, [pc, #72]	@ (80184d4 <dhcp_inc_pcb_refcount+0x9c>)
 801848a:	4618      	mov	r0, r3
 801848c:	f7ff fe34 	bl	80180f8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8018490:	4b0c      	ldr	r3, [pc, #48]	@ (80184c4 <dhcp_inc_pcb_refcount+0x8c>)
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	2243      	movs	r2, #67	@ 0x43
 8018496:	490f      	ldr	r1, [pc, #60]	@ (80184d4 <dhcp_inc_pcb_refcount+0x9c>)
 8018498:	4618      	mov	r0, r3
 801849a:	f7ff feb5 	bl	8018208 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801849e:	4b09      	ldr	r3, [pc, #36]	@ (80184c4 <dhcp_inc_pcb_refcount+0x8c>)
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	2200      	movs	r2, #0
 80184a4:	490c      	ldr	r1, [pc, #48]	@ (80184d8 <dhcp_inc_pcb_refcount+0xa0>)
 80184a6:	4618      	mov	r0, r3
 80184a8:	f7ff ff1c 	bl	80182e4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80184ac:	4b04      	ldr	r3, [pc, #16]	@ (80184c0 <dhcp_inc_pcb_refcount+0x88>)
 80184ae:	781b      	ldrb	r3, [r3, #0]
 80184b0:	3301      	adds	r3, #1
 80184b2:	b2da      	uxtb	r2, r3
 80184b4:	4b02      	ldr	r3, [pc, #8]	@ (80184c0 <dhcp_inc_pcb_refcount+0x88>)
 80184b6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80184b8:	2300      	movs	r3, #0
}
 80184ba:	4618      	mov	r0, r3
 80184bc:	bd80      	pop	{r7, pc}
 80184be:	bf00      	nop
 80184c0:	2400ccc0 	.word	0x2400ccc0
 80184c4:	2400ccbc 	.word	0x2400ccbc
 80184c8:	080219bc 	.word	0x080219bc
 80184cc:	080219f4 	.word	0x080219f4
 80184d0:	08021a1c 	.word	0x08021a1c
 80184d4:	08022610 	.word	0x08022610
 80184d8:	08019d65 	.word	0x08019d65

080184dc <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80184dc:	b580      	push	{r7, lr}
 80184de:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80184e0:	4b0e      	ldr	r3, [pc, #56]	@ (801851c <dhcp_dec_pcb_refcount+0x40>)
 80184e2:	781b      	ldrb	r3, [r3, #0]
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d105      	bne.n	80184f4 <dhcp_dec_pcb_refcount+0x18>
 80184e8:	4b0d      	ldr	r3, [pc, #52]	@ (8018520 <dhcp_dec_pcb_refcount+0x44>)
 80184ea:	22ff      	movs	r2, #255	@ 0xff
 80184ec:	490d      	ldr	r1, [pc, #52]	@ (8018524 <dhcp_dec_pcb_refcount+0x48>)
 80184ee:	480e      	ldr	r0, [pc, #56]	@ (8018528 <dhcp_dec_pcb_refcount+0x4c>)
 80184f0:	f004 ff68 	bl	801d3c4 <iprintf>
  dhcp_pcb_refcount--;
 80184f4:	4b09      	ldr	r3, [pc, #36]	@ (801851c <dhcp_dec_pcb_refcount+0x40>)
 80184f6:	781b      	ldrb	r3, [r3, #0]
 80184f8:	3b01      	subs	r3, #1
 80184fa:	b2da      	uxtb	r2, r3
 80184fc:	4b07      	ldr	r3, [pc, #28]	@ (801851c <dhcp_dec_pcb_refcount+0x40>)
 80184fe:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8018500:	4b06      	ldr	r3, [pc, #24]	@ (801851c <dhcp_dec_pcb_refcount+0x40>)
 8018502:	781b      	ldrb	r3, [r3, #0]
 8018504:	2b00      	cmp	r3, #0
 8018506:	d107      	bne.n	8018518 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8018508:	4b08      	ldr	r3, [pc, #32]	@ (801852c <dhcp_dec_pcb_refcount+0x50>)
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	4618      	mov	r0, r3
 801850e:	f7ff ff09 	bl	8018324 <udp_remove>
    dhcp_pcb = NULL;
 8018512:	4b06      	ldr	r3, [pc, #24]	@ (801852c <dhcp_dec_pcb_refcount+0x50>)
 8018514:	2200      	movs	r2, #0
 8018516:	601a      	str	r2, [r3, #0]
  }
}
 8018518:	bf00      	nop
 801851a:	bd80      	pop	{r7, pc}
 801851c:	2400ccc0 	.word	0x2400ccc0
 8018520:	080219bc 	.word	0x080219bc
 8018524:	08021a44 	.word	0x08021a44
 8018528:	08021a1c 	.word	0x08021a1c
 801852c:	2400ccbc 	.word	0x2400ccbc

08018530 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8018530:	b580      	push	{r7, lr}
 8018532:	b084      	sub	sp, #16
 8018534:	af00      	add	r7, sp, #0
 8018536:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801853c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801853e:	210c      	movs	r1, #12
 8018540:	68f8      	ldr	r0, [r7, #12]
 8018542:	f001 f851 	bl	80195e8 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8018546:	4b06      	ldr	r3, [pc, #24]	@ (8018560 <dhcp_handle_nak+0x30>)
 8018548:	4a05      	ldr	r2, [pc, #20]	@ (8018560 <dhcp_handle_nak+0x30>)
 801854a:	4905      	ldr	r1, [pc, #20]	@ (8018560 <dhcp_handle_nak+0x30>)
 801854c:	6878      	ldr	r0, [r7, #4]
 801854e:	f7f9 f82d 	bl	80115ac <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8018552:	6878      	ldr	r0, [r7, #4]
 8018554:	f000 fc4a 	bl	8018dec <dhcp_discover>
}
 8018558:	bf00      	nop
 801855a:	3710      	adds	r7, #16
 801855c:	46bd      	mov	sp, r7
 801855e:	bd80      	pop	{r7, pc}
 8018560:	08022610 	.word	0x08022610

08018564 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8018564:	b580      	push	{r7, lr}
 8018566:	b084      	sub	sp, #16
 8018568:	af00      	add	r7, sp, #0
 801856a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018570:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8018572:	2108      	movs	r1, #8
 8018574:	68f8      	ldr	r0, [r7, #12]
 8018576:	f001 f837 	bl	80195e8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	331c      	adds	r3, #28
 801857e:	2200      	movs	r2, #0
 8018580:	4619      	mov	r1, r3
 8018582:	6878      	ldr	r0, [r7, #4]
 8018584:	f002 fb38 	bl	801abf8 <etharp_query>
 8018588:	4603      	mov	r3, r0
 801858a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801858c:	68fb      	ldr	r3, [r7, #12]
 801858e:	799b      	ldrb	r3, [r3, #6]
 8018590:	2bff      	cmp	r3, #255	@ 0xff
 8018592:	d005      	beq.n	80185a0 <dhcp_check+0x3c>
    dhcp->tries++;
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	799b      	ldrb	r3, [r3, #6]
 8018598:	3301      	adds	r3, #1
 801859a:	b2da      	uxtb	r2, r3
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80185a0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80185a4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80185a6:	893b      	ldrh	r3, [r7, #8]
 80185a8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80185ac:	4a06      	ldr	r2, [pc, #24]	@ (80185c8 <dhcp_check+0x64>)
 80185ae:	fb82 1203 	smull	r1, r2, r2, r3
 80185b2:	1152      	asrs	r2, r2, #5
 80185b4:	17db      	asrs	r3, r3, #31
 80185b6:	1ad3      	subs	r3, r2, r3
 80185b8:	b29a      	uxth	r2, r3
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80185be:	bf00      	nop
 80185c0:	3710      	adds	r7, #16
 80185c2:	46bd      	mov	sp, r7
 80185c4:	bd80      	pop	{r7, pc}
 80185c6:	bf00      	nop
 80185c8:	10624dd3 	.word	0x10624dd3

080185cc <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80185cc:	b580      	push	{r7, lr}
 80185ce:	b084      	sub	sp, #16
 80185d0:	af00      	add	r7, sp, #0
 80185d2:	6078      	str	r0, [r7, #4]
 80185d4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80185da:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80185dc:	4b0c      	ldr	r3, [pc, #48]	@ (8018610 <dhcp_handle_offer+0x44>)
 80185de:	789b      	ldrb	r3, [r3, #2]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d011      	beq.n	8018608 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	2200      	movs	r2, #0
 80185e8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80185ea:	4b0a      	ldr	r3, [pc, #40]	@ (8018614 <dhcp_handle_offer+0x48>)
 80185ec:	689b      	ldr	r3, [r3, #8]
 80185ee:	4618      	mov	r0, r3
 80185f0:	f7f8 f849 	bl	8010686 <lwip_htonl>
 80185f4:	4602      	mov	r2, r0
 80185f6:	68fb      	ldr	r3, [r7, #12]
 80185f8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80185fa:	683b      	ldr	r3, [r7, #0]
 80185fc:	691a      	ldr	r2, [r3, #16]
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8018602:	6878      	ldr	r0, [r7, #4]
 8018604:	f000 f808 	bl	8018618 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8018608:	bf00      	nop
 801860a:	3710      	adds	r7, #16
 801860c:	46bd      	mov	sp, r7
 801860e:	bd80      	pop	{r7, pc}
 8018610:	2400ccb4 	.word	0x2400ccb4
 8018614:	2400cc94 	.word	0x2400cc94

08018618 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8018618:	b5b0      	push	{r4, r5, r7, lr}
 801861a:	b08a      	sub	sp, #40	@ 0x28
 801861c:	af02      	add	r7, sp, #8
 801861e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d109      	bne.n	801863a <dhcp_select+0x22>
 8018626:	4b71      	ldr	r3, [pc, #452]	@ (80187ec <dhcp_select+0x1d4>)
 8018628:	f240 1277 	movw	r2, #375	@ 0x177
 801862c:	4970      	ldr	r1, [pc, #448]	@ (80187f0 <dhcp_select+0x1d8>)
 801862e:	4871      	ldr	r0, [pc, #452]	@ (80187f4 <dhcp_select+0x1dc>)
 8018630:	f004 fec8 	bl	801d3c4 <iprintf>
 8018634:	f06f 030f 	mvn.w	r3, #15
 8018638:	e0d3      	b.n	80187e2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801863e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8018640:	69bb      	ldr	r3, [r7, #24]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d109      	bne.n	801865a <dhcp_select+0x42>
 8018646:	4b69      	ldr	r3, [pc, #420]	@ (80187ec <dhcp_select+0x1d4>)
 8018648:	f240 1279 	movw	r2, #377	@ 0x179
 801864c:	496a      	ldr	r1, [pc, #424]	@ (80187f8 <dhcp_select+0x1e0>)
 801864e:	4869      	ldr	r0, [pc, #420]	@ (80187f4 <dhcp_select+0x1dc>)
 8018650:	f004 feb8 	bl	801d3c4 <iprintf>
 8018654:	f06f 0305 	mvn.w	r3, #5
 8018658:	e0c3      	b.n	80187e2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801865a:	2101      	movs	r1, #1
 801865c:	69b8      	ldr	r0, [r7, #24]
 801865e:	f000 ffc3 	bl	80195e8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8018662:	f107 030c 	add.w	r3, r7, #12
 8018666:	2203      	movs	r2, #3
 8018668:	69b9      	ldr	r1, [r7, #24]
 801866a:	6878      	ldr	r0, [r7, #4]
 801866c:	f001 fc48 	bl	8019f00 <dhcp_create_msg>
 8018670:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8018672:	697b      	ldr	r3, [r7, #20]
 8018674:	2b00      	cmp	r3, #0
 8018676:	f000 8085 	beq.w	8018784 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801867a:	697b      	ldr	r3, [r7, #20]
 801867c:	685b      	ldr	r3, [r3, #4]
 801867e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8018680:	89b8      	ldrh	r0, [r7, #12]
 8018682:	693b      	ldr	r3, [r7, #16]
 8018684:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018688:	2302      	movs	r3, #2
 801868a:	2239      	movs	r2, #57	@ 0x39
 801868c:	f000 ffc6 	bl	801961c <dhcp_option>
 8018690:	4603      	mov	r3, r0
 8018692:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8018694:	89b8      	ldrh	r0, [r7, #12]
 8018696:	693b      	ldr	r3, [r7, #16]
 8018698:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80186a0:	461a      	mov	r2, r3
 80186a2:	f001 f815 	bl	80196d0 <dhcp_option_short>
 80186a6:	4603      	mov	r3, r0
 80186a8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80186aa:	89b8      	ldrh	r0, [r7, #12]
 80186ac:	693b      	ldr	r3, [r7, #16]
 80186ae:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80186b2:	2304      	movs	r3, #4
 80186b4:	2232      	movs	r2, #50	@ 0x32
 80186b6:	f000 ffb1 	bl	801961c <dhcp_option>
 80186ba:	4603      	mov	r3, r0
 80186bc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80186be:	89bc      	ldrh	r4, [r7, #12]
 80186c0:	693b      	ldr	r3, [r7, #16]
 80186c2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80186c6:	69bb      	ldr	r3, [r7, #24]
 80186c8:	69db      	ldr	r3, [r3, #28]
 80186ca:	4618      	mov	r0, r3
 80186cc:	f7f7 ffdb 	bl	8010686 <lwip_htonl>
 80186d0:	4603      	mov	r3, r0
 80186d2:	461a      	mov	r2, r3
 80186d4:	4629      	mov	r1, r5
 80186d6:	4620      	mov	r0, r4
 80186d8:	f001 f82c 	bl	8019734 <dhcp_option_long>
 80186dc:	4603      	mov	r3, r0
 80186de:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80186e0:	89b8      	ldrh	r0, [r7, #12]
 80186e2:	693b      	ldr	r3, [r7, #16]
 80186e4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80186e8:	2304      	movs	r3, #4
 80186ea:	2236      	movs	r2, #54	@ 0x36
 80186ec:	f000 ff96 	bl	801961c <dhcp_option>
 80186f0:	4603      	mov	r3, r0
 80186f2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80186f4:	89bc      	ldrh	r4, [r7, #12]
 80186f6:	693b      	ldr	r3, [r7, #16]
 80186f8:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80186fc:	69bb      	ldr	r3, [r7, #24]
 80186fe:	699b      	ldr	r3, [r3, #24]
 8018700:	4618      	mov	r0, r3
 8018702:	f7f7 ffc0 	bl	8010686 <lwip_htonl>
 8018706:	4603      	mov	r3, r0
 8018708:	461a      	mov	r2, r3
 801870a:	4629      	mov	r1, r5
 801870c:	4620      	mov	r0, r4
 801870e:	f001 f811 	bl	8019734 <dhcp_option_long>
 8018712:	4603      	mov	r3, r0
 8018714:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018716:	89b8      	ldrh	r0, [r7, #12]
 8018718:	693b      	ldr	r3, [r7, #16]
 801871a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801871e:	2303      	movs	r3, #3
 8018720:	2237      	movs	r2, #55	@ 0x37
 8018722:	f000 ff7b 	bl	801961c <dhcp_option>
 8018726:	4603      	mov	r3, r0
 8018728:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801872a:	2300      	movs	r3, #0
 801872c:	77bb      	strb	r3, [r7, #30]
 801872e:	e00e      	b.n	801874e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018730:	89b8      	ldrh	r0, [r7, #12]
 8018732:	693b      	ldr	r3, [r7, #16]
 8018734:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018738:	7fbb      	ldrb	r3, [r7, #30]
 801873a:	4a30      	ldr	r2, [pc, #192]	@ (80187fc <dhcp_select+0x1e4>)
 801873c:	5cd3      	ldrb	r3, [r2, r3]
 801873e:	461a      	mov	r2, r3
 8018740:	f000 ffa0 	bl	8019684 <dhcp_option_byte>
 8018744:	4603      	mov	r3, r0
 8018746:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018748:	7fbb      	ldrb	r3, [r7, #30]
 801874a:	3301      	adds	r3, #1
 801874c:	77bb      	strb	r3, [r7, #30]
 801874e:	7fbb      	ldrb	r3, [r7, #30]
 8018750:	2b02      	cmp	r3, #2
 8018752:	d9ed      	bls.n	8018730 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018754:	89b8      	ldrh	r0, [r7, #12]
 8018756:	693b      	ldr	r3, [r7, #16]
 8018758:	33f0      	adds	r3, #240	@ 0xf0
 801875a:	697a      	ldr	r2, [r7, #20]
 801875c:	4619      	mov	r1, r3
 801875e:	f001 fca5 	bl	801a0ac <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8018762:	4b27      	ldr	r3, [pc, #156]	@ (8018800 <dhcp_select+0x1e8>)
 8018764:	6818      	ldr	r0, [r3, #0]
 8018766:	4b27      	ldr	r3, [pc, #156]	@ (8018804 <dhcp_select+0x1ec>)
 8018768:	9301      	str	r3, [sp, #4]
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	9300      	str	r3, [sp, #0]
 801876e:	2343      	movs	r3, #67	@ 0x43
 8018770:	4a25      	ldr	r2, [pc, #148]	@ (8018808 <dhcp_select+0x1f0>)
 8018772:	6979      	ldr	r1, [r7, #20]
 8018774:	f7ff fbda 	bl	8017f2c <udp_sendto_if_src>
 8018778:	4603      	mov	r3, r0
 801877a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801877c:	6978      	ldr	r0, [r7, #20]
 801877e:	f7f9 fc23 	bl	8011fc8 <pbuf_free>
 8018782:	e001      	b.n	8018788 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8018784:	23ff      	movs	r3, #255	@ 0xff
 8018786:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8018788:	69bb      	ldr	r3, [r7, #24]
 801878a:	799b      	ldrb	r3, [r3, #6]
 801878c:	2bff      	cmp	r3, #255	@ 0xff
 801878e:	d005      	beq.n	801879c <dhcp_select+0x184>
    dhcp->tries++;
 8018790:	69bb      	ldr	r3, [r7, #24]
 8018792:	799b      	ldrb	r3, [r3, #6]
 8018794:	3301      	adds	r3, #1
 8018796:	b2da      	uxtb	r2, r3
 8018798:	69bb      	ldr	r3, [r7, #24]
 801879a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801879c:	69bb      	ldr	r3, [r7, #24]
 801879e:	799b      	ldrb	r3, [r3, #6]
 80187a0:	2b05      	cmp	r3, #5
 80187a2:	d80d      	bhi.n	80187c0 <dhcp_select+0x1a8>
 80187a4:	69bb      	ldr	r3, [r7, #24]
 80187a6:	799b      	ldrb	r3, [r3, #6]
 80187a8:	461a      	mov	r2, r3
 80187aa:	2301      	movs	r3, #1
 80187ac:	4093      	lsls	r3, r2
 80187ae:	b29b      	uxth	r3, r3
 80187b0:	461a      	mov	r2, r3
 80187b2:	0152      	lsls	r2, r2, #5
 80187b4:	1ad2      	subs	r2, r2, r3
 80187b6:	0092      	lsls	r2, r2, #2
 80187b8:	4413      	add	r3, r2
 80187ba:	00db      	lsls	r3, r3, #3
 80187bc:	b29b      	uxth	r3, r3
 80187be:	e001      	b.n	80187c4 <dhcp_select+0x1ac>
 80187c0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80187c4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80187c6:	89fb      	ldrh	r3, [r7, #14]
 80187c8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80187cc:	4a0f      	ldr	r2, [pc, #60]	@ (801880c <dhcp_select+0x1f4>)
 80187ce:	fb82 1203 	smull	r1, r2, r2, r3
 80187d2:	1152      	asrs	r2, r2, #5
 80187d4:	17db      	asrs	r3, r3, #31
 80187d6:	1ad3      	subs	r3, r2, r3
 80187d8:	b29a      	uxth	r2, r3
 80187da:	69bb      	ldr	r3, [r7, #24]
 80187dc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80187de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80187e2:	4618      	mov	r0, r3
 80187e4:	3720      	adds	r7, #32
 80187e6:	46bd      	mov	sp, r7
 80187e8:	bdb0      	pop	{r4, r5, r7, pc}
 80187ea:	bf00      	nop
 80187ec:	080219bc 	.word	0x080219bc
 80187f0:	08021a68 	.word	0x08021a68
 80187f4:	08021a1c 	.word	0x08021a1c
 80187f8:	08021a84 	.word	0x08021a84
 80187fc:	24000034 	.word	0x24000034
 8018800:	2400ccbc 	.word	0x2400ccbc
 8018804:	08022610 	.word	0x08022610
 8018808:	08022614 	.word	0x08022614
 801880c:	10624dd3 	.word	0x10624dd3

08018810 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8018810:	b580      	push	{r7, lr}
 8018812:	b082      	sub	sp, #8
 8018814:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8018816:	4b27      	ldr	r3, [pc, #156]	@ (80188b4 <dhcp_coarse_tmr+0xa4>)
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	607b      	str	r3, [r7, #4]
 801881c:	e042      	b.n	80188a4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018822:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8018824:	683b      	ldr	r3, [r7, #0]
 8018826:	2b00      	cmp	r3, #0
 8018828:	d039      	beq.n	801889e <dhcp_coarse_tmr+0x8e>
 801882a:	683b      	ldr	r3, [r7, #0]
 801882c:	795b      	ldrb	r3, [r3, #5]
 801882e:	2b00      	cmp	r3, #0
 8018830:	d035      	beq.n	801889e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8018832:	683b      	ldr	r3, [r7, #0]
 8018834:	8a9b      	ldrh	r3, [r3, #20]
 8018836:	2b00      	cmp	r3, #0
 8018838:	d012      	beq.n	8018860 <dhcp_coarse_tmr+0x50>
 801883a:	683b      	ldr	r3, [r7, #0]
 801883c:	8a5b      	ldrh	r3, [r3, #18]
 801883e:	3301      	adds	r3, #1
 8018840:	b29a      	uxth	r2, r3
 8018842:	683b      	ldr	r3, [r7, #0]
 8018844:	825a      	strh	r2, [r3, #18]
 8018846:	683b      	ldr	r3, [r7, #0]
 8018848:	8a5a      	ldrh	r2, [r3, #18]
 801884a:	683b      	ldr	r3, [r7, #0]
 801884c:	8a9b      	ldrh	r3, [r3, #20]
 801884e:	429a      	cmp	r2, r3
 8018850:	d106      	bne.n	8018860 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8018852:	6878      	ldr	r0, [r7, #4]
 8018854:	f000 fe2e 	bl	80194b4 <dhcp_release_and_stop>
        dhcp_start(netif);
 8018858:	6878      	ldr	r0, [r7, #4]
 801885a:	f000 f96b 	bl	8018b34 <dhcp_start>
 801885e:	e01e      	b.n	801889e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8018860:	683b      	ldr	r3, [r7, #0]
 8018862:	8a1b      	ldrh	r3, [r3, #16]
 8018864:	2b00      	cmp	r3, #0
 8018866:	d00b      	beq.n	8018880 <dhcp_coarse_tmr+0x70>
 8018868:	683b      	ldr	r3, [r7, #0]
 801886a:	8a1b      	ldrh	r3, [r3, #16]
 801886c:	1e5a      	subs	r2, r3, #1
 801886e:	b291      	uxth	r1, r2
 8018870:	683a      	ldr	r2, [r7, #0]
 8018872:	8211      	strh	r1, [r2, #16]
 8018874:	2b01      	cmp	r3, #1
 8018876:	d103      	bne.n	8018880 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8018878:	6878      	ldr	r0, [r7, #4]
 801887a:	f000 f8c7 	bl	8018a0c <dhcp_t2_timeout>
 801887e:	e00e      	b.n	801889e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8018880:	683b      	ldr	r3, [r7, #0]
 8018882:	89db      	ldrh	r3, [r3, #14]
 8018884:	2b00      	cmp	r3, #0
 8018886:	d00a      	beq.n	801889e <dhcp_coarse_tmr+0x8e>
 8018888:	683b      	ldr	r3, [r7, #0]
 801888a:	89db      	ldrh	r3, [r3, #14]
 801888c:	1e5a      	subs	r2, r3, #1
 801888e:	b291      	uxth	r1, r2
 8018890:	683a      	ldr	r2, [r7, #0]
 8018892:	81d1      	strh	r1, [r2, #14]
 8018894:	2b01      	cmp	r3, #1
 8018896:	d102      	bne.n	801889e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8018898:	6878      	ldr	r0, [r7, #4]
 801889a:	f000 f888 	bl	80189ae <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	607b      	str	r3, [r7, #4]
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	d1b9      	bne.n	801881e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80188aa:	bf00      	nop
 80188ac:	bf00      	nop
 80188ae:	3708      	adds	r7, #8
 80188b0:	46bd      	mov	sp, r7
 80188b2:	bd80      	pop	{r7, pc}
 80188b4:	2400cc28 	.word	0x2400cc28

080188b8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80188b8:	b580      	push	{r7, lr}
 80188ba:	b082      	sub	sp, #8
 80188bc:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80188be:	4b16      	ldr	r3, [pc, #88]	@ (8018918 <dhcp_fine_tmr+0x60>)
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	607b      	str	r3, [r7, #4]
 80188c4:	e020      	b.n	8018908 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80188ca:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80188cc:	683b      	ldr	r3, [r7, #0]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d017      	beq.n	8018902 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80188d2:	683b      	ldr	r3, [r7, #0]
 80188d4:	891b      	ldrh	r3, [r3, #8]
 80188d6:	2b01      	cmp	r3, #1
 80188d8:	d906      	bls.n	80188e8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80188da:	683b      	ldr	r3, [r7, #0]
 80188dc:	891b      	ldrh	r3, [r3, #8]
 80188de:	3b01      	subs	r3, #1
 80188e0:	b29a      	uxth	r2, r3
 80188e2:	683b      	ldr	r3, [r7, #0]
 80188e4:	811a      	strh	r2, [r3, #8]
 80188e6:	e00c      	b.n	8018902 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80188e8:	683b      	ldr	r3, [r7, #0]
 80188ea:	891b      	ldrh	r3, [r3, #8]
 80188ec:	2b01      	cmp	r3, #1
 80188ee:	d108      	bne.n	8018902 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80188f0:	683b      	ldr	r3, [r7, #0]
 80188f2:	891b      	ldrh	r3, [r3, #8]
 80188f4:	3b01      	subs	r3, #1
 80188f6:	b29a      	uxth	r2, r3
 80188f8:	683b      	ldr	r3, [r7, #0]
 80188fa:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80188fc:	6878      	ldr	r0, [r7, #4]
 80188fe:	f000 f80d 	bl	801891c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	607b      	str	r3, [r7, #4]
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	2b00      	cmp	r3, #0
 801890c:	d1db      	bne.n	80188c6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801890e:	bf00      	nop
 8018910:	bf00      	nop
 8018912:	3708      	adds	r7, #8
 8018914:	46bd      	mov	sp, r7
 8018916:	bd80      	pop	{r7, pc}
 8018918:	2400cc28 	.word	0x2400cc28

0801891c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801891c:	b580      	push	{r7, lr}
 801891e:	b084      	sub	sp, #16
 8018920:	af00      	add	r7, sp, #0
 8018922:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018928:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801892a:	68fb      	ldr	r3, [r7, #12]
 801892c:	795b      	ldrb	r3, [r3, #5]
 801892e:	2b0c      	cmp	r3, #12
 8018930:	d003      	beq.n	801893a <dhcp_timeout+0x1e>
 8018932:	68fb      	ldr	r3, [r7, #12]
 8018934:	795b      	ldrb	r3, [r3, #5]
 8018936:	2b06      	cmp	r3, #6
 8018938:	d103      	bne.n	8018942 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801893a:	6878      	ldr	r0, [r7, #4]
 801893c:	f000 fa56 	bl	8018dec <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8018940:	e031      	b.n	80189a6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	795b      	ldrb	r3, [r3, #5]
 8018946:	2b01      	cmp	r3, #1
 8018948:	d10e      	bne.n	8018968 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801894a:	68fb      	ldr	r3, [r7, #12]
 801894c:	799b      	ldrb	r3, [r3, #6]
 801894e:	2b05      	cmp	r3, #5
 8018950:	d803      	bhi.n	801895a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8018952:	6878      	ldr	r0, [r7, #4]
 8018954:	f7ff fe60 	bl	8018618 <dhcp_select>
}
 8018958:	e025      	b.n	80189a6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801895a:	6878      	ldr	r0, [r7, #4]
 801895c:	f000 fdaa 	bl	80194b4 <dhcp_release_and_stop>
      dhcp_start(netif);
 8018960:	6878      	ldr	r0, [r7, #4]
 8018962:	f000 f8e7 	bl	8018b34 <dhcp_start>
}
 8018966:	e01e      	b.n	80189a6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	795b      	ldrb	r3, [r3, #5]
 801896c:	2b08      	cmp	r3, #8
 801896e:	d10b      	bne.n	8018988 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	799b      	ldrb	r3, [r3, #6]
 8018974:	2b01      	cmp	r3, #1
 8018976:	d803      	bhi.n	8018980 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8018978:	6878      	ldr	r0, [r7, #4]
 801897a:	f7ff fdf3 	bl	8018564 <dhcp_check>
}
 801897e:	e012      	b.n	80189a6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8018980:	6878      	ldr	r0, [r7, #4]
 8018982:	f000 fad5 	bl	8018f30 <dhcp_bind>
}
 8018986:	e00e      	b.n	80189a6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	795b      	ldrb	r3, [r3, #5]
 801898c:	2b03      	cmp	r3, #3
 801898e:	d10a      	bne.n	80189a6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	799b      	ldrb	r3, [r3, #6]
 8018994:	2b01      	cmp	r3, #1
 8018996:	d803      	bhi.n	80189a0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8018998:	6878      	ldr	r0, [r7, #4]
 801899a:	f000 fcd7 	bl	801934c <dhcp_reboot>
}
 801899e:	e002      	b.n	80189a6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80189a0:	6878      	ldr	r0, [r7, #4]
 80189a2:	f000 fa23 	bl	8018dec <dhcp_discover>
}
 80189a6:	bf00      	nop
 80189a8:	3710      	adds	r7, #16
 80189aa:	46bd      	mov	sp, r7
 80189ac:	bd80      	pop	{r7, pc}

080189ae <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80189ae:	b580      	push	{r7, lr}
 80189b0:	b084      	sub	sp, #16
 80189b2:	af00      	add	r7, sp, #0
 80189b4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80189ba:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80189bc:	68fb      	ldr	r3, [r7, #12]
 80189be:	795b      	ldrb	r3, [r3, #5]
 80189c0:	2b01      	cmp	r3, #1
 80189c2:	d007      	beq.n	80189d4 <dhcp_t1_timeout+0x26>
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	795b      	ldrb	r3, [r3, #5]
 80189c8:	2b0a      	cmp	r3, #10
 80189ca:	d003      	beq.n	80189d4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80189cc:	68fb      	ldr	r3, [r7, #12]
 80189ce:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80189d0:	2b05      	cmp	r3, #5
 80189d2:	d117      	bne.n	8018a04 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80189d4:	6878      	ldr	r0, [r7, #4]
 80189d6:	f000 fb85 	bl	80190e4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80189da:	68fb      	ldr	r3, [r7, #12]
 80189dc:	899b      	ldrh	r3, [r3, #12]
 80189de:	461a      	mov	r2, r3
 80189e0:	68fb      	ldr	r3, [r7, #12]
 80189e2:	8a5b      	ldrh	r3, [r3, #18]
 80189e4:	1ad3      	subs	r3, r2, r3
 80189e6:	2b01      	cmp	r3, #1
 80189e8:	dd0c      	ble.n	8018a04 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80189ea:	68fb      	ldr	r3, [r7, #12]
 80189ec:	899b      	ldrh	r3, [r3, #12]
 80189ee:	461a      	mov	r2, r3
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	8a5b      	ldrh	r3, [r3, #18]
 80189f4:	1ad3      	subs	r3, r2, r3
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	da00      	bge.n	80189fc <dhcp_t1_timeout+0x4e>
 80189fa:	3301      	adds	r3, #1
 80189fc:	105b      	asrs	r3, r3, #1
 80189fe:	b29a      	uxth	r2, r3
 8018a00:	68fb      	ldr	r3, [r7, #12]
 8018a02:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8018a04:	bf00      	nop
 8018a06:	3710      	adds	r7, #16
 8018a08:	46bd      	mov	sp, r7
 8018a0a:	bd80      	pop	{r7, pc}

08018a0c <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8018a0c:	b580      	push	{r7, lr}
 8018a0e:	b084      	sub	sp, #16
 8018a10:	af00      	add	r7, sp, #0
 8018a12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a18:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018a1a:	68fb      	ldr	r3, [r7, #12]
 8018a1c:	795b      	ldrb	r3, [r3, #5]
 8018a1e:	2b01      	cmp	r3, #1
 8018a20:	d00b      	beq.n	8018a3a <dhcp_t2_timeout+0x2e>
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	795b      	ldrb	r3, [r3, #5]
 8018a26:	2b0a      	cmp	r3, #10
 8018a28:	d007      	beq.n	8018a3a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018a2e:	2b05      	cmp	r3, #5
 8018a30:	d003      	beq.n	8018a3a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	795b      	ldrb	r3, [r3, #5]
 8018a36:	2b04      	cmp	r3, #4
 8018a38:	d117      	bne.n	8018a6a <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8018a3a:	6878      	ldr	r0, [r7, #4]
 8018a3c:	f000 fbec 	bl	8019218 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	8a9b      	ldrh	r3, [r3, #20]
 8018a44:	461a      	mov	r2, r3
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	8a5b      	ldrh	r3, [r3, #18]
 8018a4a:	1ad3      	subs	r3, r2, r3
 8018a4c:	2b01      	cmp	r3, #1
 8018a4e:	dd0c      	ble.n	8018a6a <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8018a50:	68fb      	ldr	r3, [r7, #12]
 8018a52:	8a9b      	ldrh	r3, [r3, #20]
 8018a54:	461a      	mov	r2, r3
 8018a56:	68fb      	ldr	r3, [r7, #12]
 8018a58:	8a5b      	ldrh	r3, [r3, #18]
 8018a5a:	1ad3      	subs	r3, r2, r3
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	da00      	bge.n	8018a62 <dhcp_t2_timeout+0x56>
 8018a60:	3301      	adds	r3, #1
 8018a62:	105b      	asrs	r3, r3, #1
 8018a64:	b29a      	uxth	r2, r3
 8018a66:	68fb      	ldr	r3, [r7, #12]
 8018a68:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8018a6a:	bf00      	nop
 8018a6c:	3710      	adds	r7, #16
 8018a6e:	46bd      	mov	sp, r7
 8018a70:	bd80      	pop	{r7, pc}
	...

08018a74 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8018a74:	b580      	push	{r7, lr}
 8018a76:	b084      	sub	sp, #16
 8018a78:	af00      	add	r7, sp, #0
 8018a7a:	6078      	str	r0, [r7, #4]
 8018a7c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a82:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8018a84:	68fb      	ldr	r3, [r7, #12]
 8018a86:	2200      	movs	r2, #0
 8018a88:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8018a8a:	68fb      	ldr	r3, [r7, #12]
 8018a8c:	2200      	movs	r2, #0
 8018a8e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8018a90:	4b26      	ldr	r3, [pc, #152]	@ (8018b2c <dhcp_handle_ack+0xb8>)
 8018a92:	78db      	ldrb	r3, [r3, #3]
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d003      	beq.n	8018aa0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8018a98:	4b25      	ldr	r3, [pc, #148]	@ (8018b30 <dhcp_handle_ack+0xbc>)
 8018a9a:	68da      	ldr	r2, [r3, #12]
 8018a9c:	68fb      	ldr	r3, [r7, #12]
 8018a9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8018aa0:	4b22      	ldr	r3, [pc, #136]	@ (8018b2c <dhcp_handle_ack+0xb8>)
 8018aa2:	791b      	ldrb	r3, [r3, #4]
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d004      	beq.n	8018ab2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8018aa8:	4b21      	ldr	r3, [pc, #132]	@ (8018b30 <dhcp_handle_ack+0xbc>)
 8018aaa:	691a      	ldr	r2, [r3, #16]
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	62da      	str	r2, [r3, #44]	@ 0x2c
 8018ab0:	e004      	b.n	8018abc <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ab6:	085a      	lsrs	r2, r3, #1
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8018abc:	4b1b      	ldr	r3, [pc, #108]	@ (8018b2c <dhcp_handle_ack+0xb8>)
 8018abe:	795b      	ldrb	r3, [r3, #5]
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d004      	beq.n	8018ace <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8018ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8018b30 <dhcp_handle_ack+0xbc>)
 8018ac6:	695a      	ldr	r2, [r3, #20]
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	631a      	str	r2, [r3, #48]	@ 0x30
 8018acc:	e007      	b.n	8018ade <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8018ace:	68fb      	ldr	r3, [r7, #12]
 8018ad0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018ad2:	4613      	mov	r3, r2
 8018ad4:	00db      	lsls	r3, r3, #3
 8018ad6:	1a9b      	subs	r3, r3, r2
 8018ad8:	08da      	lsrs	r2, r3, #3
 8018ada:	68fb      	ldr	r3, [r7, #12]
 8018adc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8018ade:	683b      	ldr	r3, [r7, #0]
 8018ae0:	691a      	ldr	r2, [r3, #16]
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8018ae6:	4b11      	ldr	r3, [pc, #68]	@ (8018b2c <dhcp_handle_ack+0xb8>)
 8018ae8:	799b      	ldrb	r3, [r3, #6]
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d00b      	beq.n	8018b06 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8018aee:	4b10      	ldr	r3, [pc, #64]	@ (8018b30 <dhcp_handle_ack+0xbc>)
 8018af0:	699b      	ldr	r3, [r3, #24]
 8018af2:	4618      	mov	r0, r3
 8018af4:	f7f7 fdc7 	bl	8010686 <lwip_htonl>
 8018af8:	4602      	mov	r2, r0
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8018afe:	68fb      	ldr	r3, [r7, #12]
 8018b00:	2201      	movs	r2, #1
 8018b02:	71da      	strb	r2, [r3, #7]
 8018b04:	e002      	b.n	8018b0c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8018b06:	68fb      	ldr	r3, [r7, #12]
 8018b08:	2200      	movs	r2, #0
 8018b0a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8018b0c:	4b07      	ldr	r3, [pc, #28]	@ (8018b2c <dhcp_handle_ack+0xb8>)
 8018b0e:	79db      	ldrb	r3, [r3, #7]
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d007      	beq.n	8018b24 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8018b14:	4b06      	ldr	r3, [pc, #24]	@ (8018b30 <dhcp_handle_ack+0xbc>)
 8018b16:	69db      	ldr	r3, [r3, #28]
 8018b18:	4618      	mov	r0, r3
 8018b1a:	f7f7 fdb4 	bl	8010686 <lwip_htonl>
 8018b1e:	4602      	mov	r2, r0
 8018b20:	68fb      	ldr	r3, [r7, #12]
 8018b22:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8018b24:	bf00      	nop
 8018b26:	3710      	adds	r7, #16
 8018b28:	46bd      	mov	sp, r7
 8018b2a:	bd80      	pop	{r7, pc}
 8018b2c:	2400ccb4 	.word	0x2400ccb4
 8018b30:	2400cc94 	.word	0x2400cc94

08018b34 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8018b34:	b580      	push	{r7, lr}
 8018b36:	b084      	sub	sp, #16
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d109      	bne.n	8018b56 <dhcp_start+0x22>
 8018b42:	4b37      	ldr	r3, [pc, #220]	@ (8018c20 <dhcp_start+0xec>)
 8018b44:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8018b48:	4936      	ldr	r1, [pc, #216]	@ (8018c24 <dhcp_start+0xf0>)
 8018b4a:	4837      	ldr	r0, [pc, #220]	@ (8018c28 <dhcp_start+0xf4>)
 8018b4c:	f004 fc3a 	bl	801d3c4 <iprintf>
 8018b50:	f06f 030f 	mvn.w	r3, #15
 8018b54:	e060      	b.n	8018c18 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018b5c:	f003 0301 	and.w	r3, r3, #1
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d109      	bne.n	8018b78 <dhcp_start+0x44>
 8018b64:	4b2e      	ldr	r3, [pc, #184]	@ (8018c20 <dhcp_start+0xec>)
 8018b66:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8018b6a:	4930      	ldr	r1, [pc, #192]	@ (8018c2c <dhcp_start+0xf8>)
 8018b6c:	482e      	ldr	r0, [pc, #184]	@ (8018c28 <dhcp_start+0xf4>)
 8018b6e:	f004 fc29 	bl	801d3c4 <iprintf>
 8018b72:	f06f 030f 	mvn.w	r3, #15
 8018b76:	e04f      	b.n	8018c18 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018b7c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018b82:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8018b86:	d202      	bcs.n	8018b8e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8018b88:	f04f 33ff 	mov.w	r3, #4294967295
 8018b8c:	e044      	b.n	8018c18 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d10d      	bne.n	8018bb0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8018b94:	2034      	movs	r0, #52	@ 0x34
 8018b96:	f7f8 f94d 	bl	8010e34 <mem_malloc>
 8018b9a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d102      	bne.n	8018ba8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8018ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8018ba6:	e037      	b.n	8018c18 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	68fa      	ldr	r2, [r7, #12]
 8018bac:	625a      	str	r2, [r3, #36]	@ 0x24
 8018bae:	e005      	b.n	8018bbc <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8018bb0:	68fb      	ldr	r3, [r7, #12]
 8018bb2:	791b      	ldrb	r3, [r3, #4]
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d001      	beq.n	8018bbc <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8018bb8:	f7ff fc90 	bl	80184dc <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8018bbc:	2234      	movs	r2, #52	@ 0x34
 8018bbe:	2100      	movs	r1, #0
 8018bc0:	68f8      	ldr	r0, [r7, #12]
 8018bc2:	f004 fd57 	bl	801d674 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8018bc6:	f7ff fc37 	bl	8018438 <dhcp_inc_pcb_refcount>
 8018bca:	4603      	mov	r3, r0
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d002      	beq.n	8018bd6 <dhcp_start+0xa2>
    return ERR_MEM;
 8018bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8018bd4:	e020      	b.n	8018c18 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8018bd6:	68fb      	ldr	r3, [r7, #12]
 8018bd8:	2201      	movs	r2, #1
 8018bda:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018be2:	f003 0304 	and.w	r3, r3, #4
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d105      	bne.n	8018bf6 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8018bea:	2102      	movs	r1, #2
 8018bec:	68f8      	ldr	r0, [r7, #12]
 8018bee:	f000 fcfb 	bl	80195e8 <dhcp_set_state>
    return ERR_OK;
 8018bf2:	2300      	movs	r3, #0
 8018bf4:	e010      	b.n	8018c18 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8018bf6:	6878      	ldr	r0, [r7, #4]
 8018bf8:	f000 f8f8 	bl	8018dec <dhcp_discover>
 8018bfc:	4603      	mov	r3, r0
 8018bfe:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8018c00:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d005      	beq.n	8018c14 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8018c08:	6878      	ldr	r0, [r7, #4]
 8018c0a:	f000 fc53 	bl	80194b4 <dhcp_release_and_stop>
    return ERR_MEM;
 8018c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8018c12:	e001      	b.n	8018c18 <dhcp_start+0xe4>
  }
  return result;
 8018c14:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8018c18:	4618      	mov	r0, r3
 8018c1a:	3710      	adds	r7, #16
 8018c1c:	46bd      	mov	sp, r7
 8018c1e:	bd80      	pop	{r7, pc}
 8018c20:	080219bc 	.word	0x080219bc
 8018c24:	08021aa0 	.word	0x08021aa0
 8018c28:	08021a1c 	.word	0x08021a1c
 8018c2c:	08021ae4 	.word	0x08021ae4

08018c30 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8018c30:	b580      	push	{r7, lr}
 8018c32:	b084      	sub	sp, #16
 8018c34:	af00      	add	r7, sp, #0
 8018c36:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c3c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8018c3e:	68fb      	ldr	r3, [r7, #12]
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d025      	beq.n	8018c90 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8018c44:	68fb      	ldr	r3, [r7, #12]
 8018c46:	795b      	ldrb	r3, [r3, #5]
 8018c48:	2b0a      	cmp	r3, #10
 8018c4a:	d008      	beq.n	8018c5e <dhcp_network_changed+0x2e>
 8018c4c:	2b0a      	cmp	r3, #10
 8018c4e:	dc0d      	bgt.n	8018c6c <dhcp_network_changed+0x3c>
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d01f      	beq.n	8018c94 <dhcp_network_changed+0x64>
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	db09      	blt.n	8018c6c <dhcp_network_changed+0x3c>
 8018c58:	3b03      	subs	r3, #3
 8018c5a:	2b02      	cmp	r3, #2
 8018c5c:	d806      	bhi.n	8018c6c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8018c5e:	68fb      	ldr	r3, [r7, #12]
 8018c60:	2200      	movs	r2, #0
 8018c62:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8018c64:	6878      	ldr	r0, [r7, #4]
 8018c66:	f000 fb71 	bl	801934c <dhcp_reboot>
      break;
 8018c6a:	e014      	b.n	8018c96 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8018c6c:	68fb      	ldr	r3, [r7, #12]
 8018c6e:	795b      	ldrb	r3, [r3, #5]
 8018c70:	2b0c      	cmp	r3, #12
 8018c72:	d906      	bls.n	8018c82 <dhcp_network_changed+0x52>
 8018c74:	4b09      	ldr	r3, [pc, #36]	@ (8018c9c <dhcp_network_changed+0x6c>)
 8018c76:	f240 326d 	movw	r2, #877	@ 0x36d
 8018c7a:	4909      	ldr	r1, [pc, #36]	@ (8018ca0 <dhcp_network_changed+0x70>)
 8018c7c:	4809      	ldr	r0, [pc, #36]	@ (8018ca4 <dhcp_network_changed+0x74>)
 8018c7e:	f004 fba1 	bl	801d3c4 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8018c82:	68fb      	ldr	r3, [r7, #12]
 8018c84:	2200      	movs	r2, #0
 8018c86:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8018c88:	6878      	ldr	r0, [r7, #4]
 8018c8a:	f000 f8af 	bl	8018dec <dhcp_discover>
      break;
 8018c8e:	e002      	b.n	8018c96 <dhcp_network_changed+0x66>
    return;
 8018c90:	bf00      	nop
 8018c92:	e000      	b.n	8018c96 <dhcp_network_changed+0x66>
      break;
 8018c94:	bf00      	nop
  }
}
 8018c96:	3710      	adds	r7, #16
 8018c98:	46bd      	mov	sp, r7
 8018c9a:	bd80      	pop	{r7, pc}
 8018c9c:	080219bc 	.word	0x080219bc
 8018ca0:	08021b08 	.word	0x08021b08
 8018ca4:	08021a1c 	.word	0x08021a1c

08018ca8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8018ca8:	b580      	push	{r7, lr}
 8018caa:	b084      	sub	sp, #16
 8018cac:	af00      	add	r7, sp, #0
 8018cae:	6078      	str	r0, [r7, #4]
 8018cb0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d107      	bne.n	8018cc8 <dhcp_arp_reply+0x20>
 8018cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8018cf4 <dhcp_arp_reply+0x4c>)
 8018cba:	f240 328b 	movw	r2, #907	@ 0x38b
 8018cbe:	490e      	ldr	r1, [pc, #56]	@ (8018cf8 <dhcp_arp_reply+0x50>)
 8018cc0:	480e      	ldr	r0, [pc, #56]	@ (8018cfc <dhcp_arp_reply+0x54>)
 8018cc2:	f004 fb7f 	bl	801d3c4 <iprintf>
 8018cc6:	e012      	b.n	8018cee <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ccc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8018cce:	68fb      	ldr	r3, [r7, #12]
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d00c      	beq.n	8018cee <dhcp_arp_reply+0x46>
 8018cd4:	68fb      	ldr	r3, [r7, #12]
 8018cd6:	795b      	ldrb	r3, [r3, #5]
 8018cd8:	2b08      	cmp	r3, #8
 8018cda:	d108      	bne.n	8018cee <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8018cdc:	683b      	ldr	r3, [r7, #0]
 8018cde:	681a      	ldr	r2, [r3, #0]
 8018ce0:	68fb      	ldr	r3, [r7, #12]
 8018ce2:	69db      	ldr	r3, [r3, #28]
 8018ce4:	429a      	cmp	r2, r3
 8018ce6:	d102      	bne.n	8018cee <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8018ce8:	6878      	ldr	r0, [r7, #4]
 8018cea:	f000 f809 	bl	8018d00 <dhcp_decline>
    }
  }
}
 8018cee:	3710      	adds	r7, #16
 8018cf0:	46bd      	mov	sp, r7
 8018cf2:	bd80      	pop	{r7, pc}
 8018cf4:	080219bc 	.word	0x080219bc
 8018cf8:	08021aa0 	.word	0x08021aa0
 8018cfc:	08021a1c 	.word	0x08021a1c

08018d00 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8018d00:	b5b0      	push	{r4, r5, r7, lr}
 8018d02:	b08a      	sub	sp, #40	@ 0x28
 8018d04:	af02      	add	r7, sp, #8
 8018d06:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d0c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8018d0e:	210c      	movs	r1, #12
 8018d10:	69b8      	ldr	r0, [r7, #24]
 8018d12:	f000 fc69 	bl	80195e8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8018d16:	f107 030c 	add.w	r3, r7, #12
 8018d1a:	2204      	movs	r2, #4
 8018d1c:	69b9      	ldr	r1, [r7, #24]
 8018d1e:	6878      	ldr	r0, [r7, #4]
 8018d20:	f001 f8ee 	bl	8019f00 <dhcp_create_msg>
 8018d24:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8018d26:	697b      	ldr	r3, [r7, #20]
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d035      	beq.n	8018d98 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018d2c:	697b      	ldr	r3, [r7, #20]
 8018d2e:	685b      	ldr	r3, [r3, #4]
 8018d30:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8018d32:	89b8      	ldrh	r0, [r7, #12]
 8018d34:	693b      	ldr	r3, [r7, #16]
 8018d36:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018d3a:	2304      	movs	r3, #4
 8018d3c:	2232      	movs	r2, #50	@ 0x32
 8018d3e:	f000 fc6d 	bl	801961c <dhcp_option>
 8018d42:	4603      	mov	r3, r0
 8018d44:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8018d46:	89bc      	ldrh	r4, [r7, #12]
 8018d48:	693b      	ldr	r3, [r7, #16]
 8018d4a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8018d4e:	69bb      	ldr	r3, [r7, #24]
 8018d50:	69db      	ldr	r3, [r3, #28]
 8018d52:	4618      	mov	r0, r3
 8018d54:	f7f7 fc97 	bl	8010686 <lwip_htonl>
 8018d58:	4603      	mov	r3, r0
 8018d5a:	461a      	mov	r2, r3
 8018d5c:	4629      	mov	r1, r5
 8018d5e:	4620      	mov	r0, r4
 8018d60:	f000 fce8 	bl	8019734 <dhcp_option_long>
 8018d64:	4603      	mov	r3, r0
 8018d66:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018d68:	89b8      	ldrh	r0, [r7, #12]
 8018d6a:	693b      	ldr	r3, [r7, #16]
 8018d6c:	33f0      	adds	r3, #240	@ 0xf0
 8018d6e:	697a      	ldr	r2, [r7, #20]
 8018d70:	4619      	mov	r1, r3
 8018d72:	f001 f99b 	bl	801a0ac <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8018d76:	4b19      	ldr	r3, [pc, #100]	@ (8018ddc <dhcp_decline+0xdc>)
 8018d78:	6818      	ldr	r0, [r3, #0]
 8018d7a:	4b19      	ldr	r3, [pc, #100]	@ (8018de0 <dhcp_decline+0xe0>)
 8018d7c:	9301      	str	r3, [sp, #4]
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	9300      	str	r3, [sp, #0]
 8018d82:	2343      	movs	r3, #67	@ 0x43
 8018d84:	4a17      	ldr	r2, [pc, #92]	@ (8018de4 <dhcp_decline+0xe4>)
 8018d86:	6979      	ldr	r1, [r7, #20]
 8018d88:	f7ff f8d0 	bl	8017f2c <udp_sendto_if_src>
 8018d8c:	4603      	mov	r3, r0
 8018d8e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8018d90:	6978      	ldr	r0, [r7, #20]
 8018d92:	f7f9 f919 	bl	8011fc8 <pbuf_free>
 8018d96:	e001      	b.n	8018d9c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8018d98:	23ff      	movs	r3, #255	@ 0xff
 8018d9a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8018d9c:	69bb      	ldr	r3, [r7, #24]
 8018d9e:	799b      	ldrb	r3, [r3, #6]
 8018da0:	2bff      	cmp	r3, #255	@ 0xff
 8018da2:	d005      	beq.n	8018db0 <dhcp_decline+0xb0>
    dhcp->tries++;
 8018da4:	69bb      	ldr	r3, [r7, #24]
 8018da6:	799b      	ldrb	r3, [r3, #6]
 8018da8:	3301      	adds	r3, #1
 8018daa:	b2da      	uxtb	r2, r3
 8018dac:	69bb      	ldr	r3, [r7, #24]
 8018dae:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8018db0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8018db4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018db6:	89fb      	ldrh	r3, [r7, #14]
 8018db8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8018dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8018de8 <dhcp_decline+0xe8>)
 8018dbe:	fb82 1203 	smull	r1, r2, r2, r3
 8018dc2:	1152      	asrs	r2, r2, #5
 8018dc4:	17db      	asrs	r3, r3, #31
 8018dc6:	1ad3      	subs	r3, r2, r3
 8018dc8:	b29a      	uxth	r2, r3
 8018dca:	69bb      	ldr	r3, [r7, #24]
 8018dcc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018dce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018dd2:	4618      	mov	r0, r3
 8018dd4:	3720      	adds	r7, #32
 8018dd6:	46bd      	mov	sp, r7
 8018dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8018dda:	bf00      	nop
 8018ddc:	2400ccbc 	.word	0x2400ccbc
 8018de0:	08022610 	.word	0x08022610
 8018de4:	08022614 	.word	0x08022614
 8018de8:	10624dd3 	.word	0x10624dd3

08018dec <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8018dec:	b580      	push	{r7, lr}
 8018dee:	b08a      	sub	sp, #40	@ 0x28
 8018df0:	af02      	add	r7, sp, #8
 8018df2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018df8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8018dfa:	2300      	movs	r3, #0
 8018dfc:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8018dfe:	69bb      	ldr	r3, [r7, #24]
 8018e00:	2200      	movs	r2, #0
 8018e02:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8018e04:	2106      	movs	r1, #6
 8018e06:	69b8      	ldr	r0, [r7, #24]
 8018e08:	f000 fbee 	bl	80195e8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8018e0c:	f107 0308 	add.w	r3, r7, #8
 8018e10:	2201      	movs	r2, #1
 8018e12:	69b9      	ldr	r1, [r7, #24]
 8018e14:	6878      	ldr	r0, [r7, #4]
 8018e16:	f001 f873 	bl	8019f00 <dhcp_create_msg>
 8018e1a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8018e1c:	693b      	ldr	r3, [r7, #16]
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d04b      	beq.n	8018eba <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018e22:	693b      	ldr	r3, [r7, #16]
 8018e24:	685b      	ldr	r3, [r3, #4]
 8018e26:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8018e28:	8938      	ldrh	r0, [r7, #8]
 8018e2a:	68fb      	ldr	r3, [r7, #12]
 8018e2c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018e30:	2302      	movs	r3, #2
 8018e32:	2239      	movs	r2, #57	@ 0x39
 8018e34:	f000 fbf2 	bl	801961c <dhcp_option>
 8018e38:	4603      	mov	r3, r0
 8018e3a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8018e3c:	8938      	ldrh	r0, [r7, #8]
 8018e3e:	68fb      	ldr	r3, [r7, #12]
 8018e40:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018e48:	461a      	mov	r2, r3
 8018e4a:	f000 fc41 	bl	80196d0 <dhcp_option_short>
 8018e4e:	4603      	mov	r3, r0
 8018e50:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018e52:	8938      	ldrh	r0, [r7, #8]
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018e5a:	2303      	movs	r3, #3
 8018e5c:	2237      	movs	r2, #55	@ 0x37
 8018e5e:	f000 fbdd 	bl	801961c <dhcp_option>
 8018e62:	4603      	mov	r3, r0
 8018e64:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018e66:	2300      	movs	r3, #0
 8018e68:	77fb      	strb	r3, [r7, #31]
 8018e6a:	e00e      	b.n	8018e8a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018e6c:	8938      	ldrh	r0, [r7, #8]
 8018e6e:	68fb      	ldr	r3, [r7, #12]
 8018e70:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018e74:	7ffb      	ldrb	r3, [r7, #31]
 8018e76:	4a29      	ldr	r2, [pc, #164]	@ (8018f1c <dhcp_discover+0x130>)
 8018e78:	5cd3      	ldrb	r3, [r2, r3]
 8018e7a:	461a      	mov	r2, r3
 8018e7c:	f000 fc02 	bl	8019684 <dhcp_option_byte>
 8018e80:	4603      	mov	r3, r0
 8018e82:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018e84:	7ffb      	ldrb	r3, [r7, #31]
 8018e86:	3301      	adds	r3, #1
 8018e88:	77fb      	strb	r3, [r7, #31]
 8018e8a:	7ffb      	ldrb	r3, [r7, #31]
 8018e8c:	2b02      	cmp	r3, #2
 8018e8e:	d9ed      	bls.n	8018e6c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018e90:	8938      	ldrh	r0, [r7, #8]
 8018e92:	68fb      	ldr	r3, [r7, #12]
 8018e94:	33f0      	adds	r3, #240	@ 0xf0
 8018e96:	693a      	ldr	r2, [r7, #16]
 8018e98:	4619      	mov	r1, r3
 8018e9a:	f001 f907 	bl	801a0ac <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8018e9e:	4b20      	ldr	r3, [pc, #128]	@ (8018f20 <dhcp_discover+0x134>)
 8018ea0:	6818      	ldr	r0, [r3, #0]
 8018ea2:	4b20      	ldr	r3, [pc, #128]	@ (8018f24 <dhcp_discover+0x138>)
 8018ea4:	9301      	str	r3, [sp, #4]
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	9300      	str	r3, [sp, #0]
 8018eaa:	2343      	movs	r3, #67	@ 0x43
 8018eac:	4a1e      	ldr	r2, [pc, #120]	@ (8018f28 <dhcp_discover+0x13c>)
 8018eae:	6939      	ldr	r1, [r7, #16]
 8018eb0:	f7ff f83c 	bl	8017f2c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8018eb4:	6938      	ldr	r0, [r7, #16]
 8018eb6:	f7f9 f887 	bl	8011fc8 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8018eba:	69bb      	ldr	r3, [r7, #24]
 8018ebc:	799b      	ldrb	r3, [r3, #6]
 8018ebe:	2bff      	cmp	r3, #255	@ 0xff
 8018ec0:	d005      	beq.n	8018ece <dhcp_discover+0xe2>
    dhcp->tries++;
 8018ec2:	69bb      	ldr	r3, [r7, #24]
 8018ec4:	799b      	ldrb	r3, [r3, #6]
 8018ec6:	3301      	adds	r3, #1
 8018ec8:	b2da      	uxtb	r2, r3
 8018eca:	69bb      	ldr	r3, [r7, #24]
 8018ecc:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8018ece:	69bb      	ldr	r3, [r7, #24]
 8018ed0:	799b      	ldrb	r3, [r3, #6]
 8018ed2:	2b05      	cmp	r3, #5
 8018ed4:	d80d      	bhi.n	8018ef2 <dhcp_discover+0x106>
 8018ed6:	69bb      	ldr	r3, [r7, #24]
 8018ed8:	799b      	ldrb	r3, [r3, #6]
 8018eda:	461a      	mov	r2, r3
 8018edc:	2301      	movs	r3, #1
 8018ede:	4093      	lsls	r3, r2
 8018ee0:	b29b      	uxth	r3, r3
 8018ee2:	461a      	mov	r2, r3
 8018ee4:	0152      	lsls	r2, r2, #5
 8018ee6:	1ad2      	subs	r2, r2, r3
 8018ee8:	0092      	lsls	r2, r2, #2
 8018eea:	4413      	add	r3, r2
 8018eec:	00db      	lsls	r3, r3, #3
 8018eee:	b29b      	uxth	r3, r3
 8018ef0:	e001      	b.n	8018ef6 <dhcp_discover+0x10a>
 8018ef2:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8018ef6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018ef8:	897b      	ldrh	r3, [r7, #10]
 8018efa:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8018efe:	4a0b      	ldr	r2, [pc, #44]	@ (8018f2c <dhcp_discover+0x140>)
 8018f00:	fb82 1203 	smull	r1, r2, r2, r3
 8018f04:	1152      	asrs	r2, r2, #5
 8018f06:	17db      	asrs	r3, r3, #31
 8018f08:	1ad3      	subs	r3, r2, r3
 8018f0a:	b29a      	uxth	r2, r3
 8018f0c:	69bb      	ldr	r3, [r7, #24]
 8018f0e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018f10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018f14:	4618      	mov	r0, r3
 8018f16:	3720      	adds	r7, #32
 8018f18:	46bd      	mov	sp, r7
 8018f1a:	bd80      	pop	{r7, pc}
 8018f1c:	24000034 	.word	0x24000034
 8018f20:	2400ccbc 	.word	0x2400ccbc
 8018f24:	08022610 	.word	0x08022610
 8018f28:	08022614 	.word	0x08022614
 8018f2c:	10624dd3 	.word	0x10624dd3

08018f30 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8018f30:	b580      	push	{r7, lr}
 8018f32:	b088      	sub	sp, #32
 8018f34:	af00      	add	r7, sp, #0
 8018f36:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d107      	bne.n	8018f4e <dhcp_bind+0x1e>
 8018f3e:	4b64      	ldr	r3, [pc, #400]	@ (80190d0 <dhcp_bind+0x1a0>)
 8018f40:	f240 4215 	movw	r2, #1045	@ 0x415
 8018f44:	4963      	ldr	r1, [pc, #396]	@ (80190d4 <dhcp_bind+0x1a4>)
 8018f46:	4864      	ldr	r0, [pc, #400]	@ (80190d8 <dhcp_bind+0x1a8>)
 8018f48:	f004 fa3c 	bl	801d3c4 <iprintf>
 8018f4c:	e0bc      	b.n	80190c8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018f52:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8018f54:	69bb      	ldr	r3, [r7, #24]
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	d107      	bne.n	8018f6a <dhcp_bind+0x3a>
 8018f5a:	4b5d      	ldr	r3, [pc, #372]	@ (80190d0 <dhcp_bind+0x1a0>)
 8018f5c:	f240 4217 	movw	r2, #1047	@ 0x417
 8018f60:	495e      	ldr	r1, [pc, #376]	@ (80190dc <dhcp_bind+0x1ac>)
 8018f62:	485d      	ldr	r0, [pc, #372]	@ (80190d8 <dhcp_bind+0x1a8>)
 8018f64:	f004 fa2e 	bl	801d3c4 <iprintf>
 8018f68:	e0ae      	b.n	80190c8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8018f6a:	69bb      	ldr	r3, [r7, #24]
 8018f6c:	2200      	movs	r2, #0
 8018f6e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8018f70:	69bb      	ldr	r3, [r7, #24]
 8018f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f78:	d019      	beq.n	8018fae <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8018f7a:	69bb      	ldr	r3, [r7, #24]
 8018f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f7e:	331e      	adds	r3, #30
 8018f80:	4a57      	ldr	r2, [pc, #348]	@ (80190e0 <dhcp_bind+0x1b0>)
 8018f82:	fba2 2303 	umull	r2, r3, r2, r3
 8018f86:	095b      	lsrs	r3, r3, #5
 8018f88:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8018f8a:	69fb      	ldr	r3, [r7, #28]
 8018f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018f90:	d302      	bcc.n	8018f98 <dhcp_bind+0x68>
      timeout = 0xffff;
 8018f92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018f96:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8018f98:	69fb      	ldr	r3, [r7, #28]
 8018f9a:	b29a      	uxth	r2, r3
 8018f9c:	69bb      	ldr	r3, [r7, #24]
 8018f9e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8018fa0:	69bb      	ldr	r3, [r7, #24]
 8018fa2:	8a9b      	ldrh	r3, [r3, #20]
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d102      	bne.n	8018fae <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8018fa8:	69bb      	ldr	r3, [r7, #24]
 8018faa:	2201      	movs	r2, #1
 8018fac:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8018fae:	69bb      	ldr	r3, [r7, #24]
 8018fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018fb6:	d01d      	beq.n	8018ff4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8018fb8:	69bb      	ldr	r3, [r7, #24]
 8018fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018fbc:	331e      	adds	r3, #30
 8018fbe:	4a48      	ldr	r2, [pc, #288]	@ (80190e0 <dhcp_bind+0x1b0>)
 8018fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8018fc4:	095b      	lsrs	r3, r3, #5
 8018fc6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8018fc8:	69fb      	ldr	r3, [r7, #28]
 8018fca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018fce:	d302      	bcc.n	8018fd6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8018fd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018fd4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8018fd6:	69fb      	ldr	r3, [r7, #28]
 8018fd8:	b29a      	uxth	r2, r3
 8018fda:	69bb      	ldr	r3, [r7, #24]
 8018fdc:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8018fde:	69bb      	ldr	r3, [r7, #24]
 8018fe0:	895b      	ldrh	r3, [r3, #10]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d102      	bne.n	8018fec <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8018fe6:	69bb      	ldr	r3, [r7, #24]
 8018fe8:	2201      	movs	r2, #1
 8018fea:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8018fec:	69bb      	ldr	r3, [r7, #24]
 8018fee:	895a      	ldrh	r2, [r3, #10]
 8018ff0:	69bb      	ldr	r3, [r7, #24]
 8018ff2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8018ff4:	69bb      	ldr	r3, [r7, #24]
 8018ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ffc:	d01d      	beq.n	801903a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8018ffe:	69bb      	ldr	r3, [r7, #24]
 8019000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019002:	331e      	adds	r3, #30
 8019004:	4a36      	ldr	r2, [pc, #216]	@ (80190e0 <dhcp_bind+0x1b0>)
 8019006:	fba2 2303 	umull	r2, r3, r2, r3
 801900a:	095b      	lsrs	r3, r3, #5
 801900c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801900e:	69fb      	ldr	r3, [r7, #28]
 8019010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019014:	d302      	bcc.n	801901c <dhcp_bind+0xec>
      timeout = 0xffff;
 8019016:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801901a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801901c:	69fb      	ldr	r3, [r7, #28]
 801901e:	b29a      	uxth	r2, r3
 8019020:	69bb      	ldr	r3, [r7, #24]
 8019022:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8019024:	69bb      	ldr	r3, [r7, #24]
 8019026:	899b      	ldrh	r3, [r3, #12]
 8019028:	2b00      	cmp	r3, #0
 801902a:	d102      	bne.n	8019032 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801902c:	69bb      	ldr	r3, [r7, #24]
 801902e:	2201      	movs	r2, #1
 8019030:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8019032:	69bb      	ldr	r3, [r7, #24]
 8019034:	899a      	ldrh	r2, [r3, #12]
 8019036:	69bb      	ldr	r3, [r7, #24]
 8019038:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801903a:	69bb      	ldr	r3, [r7, #24]
 801903c:	895a      	ldrh	r2, [r3, #10]
 801903e:	69bb      	ldr	r3, [r7, #24]
 8019040:	899b      	ldrh	r3, [r3, #12]
 8019042:	429a      	cmp	r2, r3
 8019044:	d306      	bcc.n	8019054 <dhcp_bind+0x124>
 8019046:	69bb      	ldr	r3, [r7, #24]
 8019048:	899b      	ldrh	r3, [r3, #12]
 801904a:	2b00      	cmp	r3, #0
 801904c:	d002      	beq.n	8019054 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801904e:	69bb      	ldr	r3, [r7, #24]
 8019050:	2200      	movs	r2, #0
 8019052:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8019054:	69bb      	ldr	r3, [r7, #24]
 8019056:	79db      	ldrb	r3, [r3, #7]
 8019058:	2b00      	cmp	r3, #0
 801905a:	d003      	beq.n	8019064 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801905c:	69bb      	ldr	r3, [r7, #24]
 801905e:	6a1b      	ldr	r3, [r3, #32]
 8019060:	613b      	str	r3, [r7, #16]
 8019062:	e014      	b.n	801908e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8019064:	69bb      	ldr	r3, [r7, #24]
 8019066:	331c      	adds	r3, #28
 8019068:	781b      	ldrb	r3, [r3, #0]
 801906a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801906c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019070:	2b00      	cmp	r3, #0
 8019072:	db02      	blt.n	801907a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8019074:	23ff      	movs	r3, #255	@ 0xff
 8019076:	613b      	str	r3, [r7, #16]
 8019078:	e009      	b.n	801908e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801907a:	7dfb      	ldrb	r3, [r7, #23]
 801907c:	2bbf      	cmp	r3, #191	@ 0xbf
 801907e:	d903      	bls.n	8019088 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8019080:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8019084:	613b      	str	r3, [r7, #16]
 8019086:	e002      	b.n	801908e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8019088:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801908c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801908e:	69bb      	ldr	r3, [r7, #24]
 8019090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019092:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8019094:	68fb      	ldr	r3, [r7, #12]
 8019096:	2b00      	cmp	r3, #0
 8019098:	d108      	bne.n	80190ac <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801909a:	69bb      	ldr	r3, [r7, #24]
 801909c:	69da      	ldr	r2, [r3, #28]
 801909e:	693b      	ldr	r3, [r7, #16]
 80190a0:	4013      	ands	r3, r2
 80190a2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80190aa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80190ac:	210a      	movs	r1, #10
 80190ae:	69b8      	ldr	r0, [r7, #24]
 80190b0:	f000 fa9a 	bl	80195e8 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80190b4:	69bb      	ldr	r3, [r7, #24]
 80190b6:	f103 011c 	add.w	r1, r3, #28
 80190ba:	f107 030c 	add.w	r3, r7, #12
 80190be:	f107 0210 	add.w	r2, r7, #16
 80190c2:	6878      	ldr	r0, [r7, #4]
 80190c4:	f7f8 fa72 	bl	80115ac <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80190c8:	3720      	adds	r7, #32
 80190ca:	46bd      	mov	sp, r7
 80190cc:	bd80      	pop	{r7, pc}
 80190ce:	bf00      	nop
 80190d0:	080219bc 	.word	0x080219bc
 80190d4:	08021b1c 	.word	0x08021b1c
 80190d8:	08021a1c 	.word	0x08021a1c
 80190dc:	08021b38 	.word	0x08021b38
 80190e0:	88888889 	.word	0x88888889

080190e4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80190e4:	b580      	push	{r7, lr}
 80190e6:	b08a      	sub	sp, #40	@ 0x28
 80190e8:	af02      	add	r7, sp, #8
 80190ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80190f0:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80190f2:	2105      	movs	r1, #5
 80190f4:	69b8      	ldr	r0, [r7, #24]
 80190f6:	f000 fa77 	bl	80195e8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80190fa:	f107 030c 	add.w	r3, r7, #12
 80190fe:	2203      	movs	r2, #3
 8019100:	69b9      	ldr	r1, [r7, #24]
 8019102:	6878      	ldr	r0, [r7, #4]
 8019104:	f000 fefc 	bl	8019f00 <dhcp_create_msg>
 8019108:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801910a:	697b      	ldr	r3, [r7, #20]
 801910c:	2b00      	cmp	r3, #0
 801910e:	d04e      	beq.n	80191ae <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019110:	697b      	ldr	r3, [r7, #20]
 8019112:	685b      	ldr	r3, [r3, #4]
 8019114:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019116:	89b8      	ldrh	r0, [r7, #12]
 8019118:	693b      	ldr	r3, [r7, #16]
 801911a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801911e:	2302      	movs	r3, #2
 8019120:	2239      	movs	r2, #57	@ 0x39
 8019122:	f000 fa7b 	bl	801961c <dhcp_option>
 8019126:	4603      	mov	r3, r0
 8019128:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801912a:	89b8      	ldrh	r0, [r7, #12]
 801912c:	693b      	ldr	r3, [r7, #16]
 801912e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019136:	461a      	mov	r2, r3
 8019138:	f000 faca 	bl	80196d0 <dhcp_option_short>
 801913c:	4603      	mov	r3, r0
 801913e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019140:	89b8      	ldrh	r0, [r7, #12]
 8019142:	693b      	ldr	r3, [r7, #16]
 8019144:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019148:	2303      	movs	r3, #3
 801914a:	2237      	movs	r2, #55	@ 0x37
 801914c:	f000 fa66 	bl	801961c <dhcp_option>
 8019150:	4603      	mov	r3, r0
 8019152:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019154:	2300      	movs	r3, #0
 8019156:	77bb      	strb	r3, [r7, #30]
 8019158:	e00e      	b.n	8019178 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801915a:	89b8      	ldrh	r0, [r7, #12]
 801915c:	693b      	ldr	r3, [r7, #16]
 801915e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019162:	7fbb      	ldrb	r3, [r7, #30]
 8019164:	4a29      	ldr	r2, [pc, #164]	@ (801920c <dhcp_renew+0x128>)
 8019166:	5cd3      	ldrb	r3, [r2, r3]
 8019168:	461a      	mov	r2, r3
 801916a:	f000 fa8b 	bl	8019684 <dhcp_option_byte>
 801916e:	4603      	mov	r3, r0
 8019170:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019172:	7fbb      	ldrb	r3, [r7, #30]
 8019174:	3301      	adds	r3, #1
 8019176:	77bb      	strb	r3, [r7, #30]
 8019178:	7fbb      	ldrb	r3, [r7, #30]
 801917a:	2b02      	cmp	r3, #2
 801917c:	d9ed      	bls.n	801915a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801917e:	89b8      	ldrh	r0, [r7, #12]
 8019180:	693b      	ldr	r3, [r7, #16]
 8019182:	33f0      	adds	r3, #240	@ 0xf0
 8019184:	697a      	ldr	r2, [r7, #20]
 8019186:	4619      	mov	r1, r3
 8019188:	f000 ff90 	bl	801a0ac <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801918c:	4b20      	ldr	r3, [pc, #128]	@ (8019210 <dhcp_renew+0x12c>)
 801918e:	6818      	ldr	r0, [r3, #0]
 8019190:	69bb      	ldr	r3, [r7, #24]
 8019192:	f103 0218 	add.w	r2, r3, #24
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	9300      	str	r3, [sp, #0]
 801919a:	2343      	movs	r3, #67	@ 0x43
 801919c:	6979      	ldr	r1, [r7, #20]
 801919e:	f7fe fe51 	bl	8017e44 <udp_sendto_if>
 80191a2:	4603      	mov	r3, r0
 80191a4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80191a6:	6978      	ldr	r0, [r7, #20]
 80191a8:	f7f8 ff0e 	bl	8011fc8 <pbuf_free>
 80191ac:	e001      	b.n	80191b2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80191ae:	23ff      	movs	r3, #255	@ 0xff
 80191b0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80191b2:	69bb      	ldr	r3, [r7, #24]
 80191b4:	799b      	ldrb	r3, [r3, #6]
 80191b6:	2bff      	cmp	r3, #255	@ 0xff
 80191b8:	d005      	beq.n	80191c6 <dhcp_renew+0xe2>
    dhcp->tries++;
 80191ba:	69bb      	ldr	r3, [r7, #24]
 80191bc:	799b      	ldrb	r3, [r3, #6]
 80191be:	3301      	adds	r3, #1
 80191c0:	b2da      	uxtb	r2, r3
 80191c2:	69bb      	ldr	r3, [r7, #24]
 80191c4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80191c6:	69bb      	ldr	r3, [r7, #24]
 80191c8:	799b      	ldrb	r3, [r3, #6]
 80191ca:	2b09      	cmp	r3, #9
 80191cc:	d809      	bhi.n	80191e2 <dhcp_renew+0xfe>
 80191ce:	69bb      	ldr	r3, [r7, #24]
 80191d0:	799b      	ldrb	r3, [r3, #6]
 80191d2:	461a      	mov	r2, r3
 80191d4:	0152      	lsls	r2, r2, #5
 80191d6:	1ad2      	subs	r2, r2, r3
 80191d8:	0092      	lsls	r2, r2, #2
 80191da:	4413      	add	r3, r2
 80191dc:	011b      	lsls	r3, r3, #4
 80191de:	b29b      	uxth	r3, r3
 80191e0:	e001      	b.n	80191e6 <dhcp_renew+0x102>
 80191e2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80191e6:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80191e8:	89fb      	ldrh	r3, [r7, #14]
 80191ea:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80191ee:	4a09      	ldr	r2, [pc, #36]	@ (8019214 <dhcp_renew+0x130>)
 80191f0:	fb82 1203 	smull	r1, r2, r2, r3
 80191f4:	1152      	asrs	r2, r2, #5
 80191f6:	17db      	asrs	r3, r3, #31
 80191f8:	1ad3      	subs	r3, r2, r3
 80191fa:	b29a      	uxth	r2, r3
 80191fc:	69bb      	ldr	r3, [r7, #24]
 80191fe:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019200:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019204:	4618      	mov	r0, r3
 8019206:	3720      	adds	r7, #32
 8019208:	46bd      	mov	sp, r7
 801920a:	bd80      	pop	{r7, pc}
 801920c:	24000034 	.word	0x24000034
 8019210:	2400ccbc 	.word	0x2400ccbc
 8019214:	10624dd3 	.word	0x10624dd3

08019218 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8019218:	b580      	push	{r7, lr}
 801921a:	b08a      	sub	sp, #40	@ 0x28
 801921c:	af02      	add	r7, sp, #8
 801921e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019224:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8019226:	2104      	movs	r1, #4
 8019228:	69b8      	ldr	r0, [r7, #24]
 801922a:	f000 f9dd 	bl	80195e8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801922e:	f107 030c 	add.w	r3, r7, #12
 8019232:	2203      	movs	r2, #3
 8019234:	69b9      	ldr	r1, [r7, #24]
 8019236:	6878      	ldr	r0, [r7, #4]
 8019238:	f000 fe62 	bl	8019f00 <dhcp_create_msg>
 801923c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801923e:	697b      	ldr	r3, [r7, #20]
 8019240:	2b00      	cmp	r3, #0
 8019242:	d04c      	beq.n	80192de <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019244:	697b      	ldr	r3, [r7, #20]
 8019246:	685b      	ldr	r3, [r3, #4]
 8019248:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801924a:	89b8      	ldrh	r0, [r7, #12]
 801924c:	693b      	ldr	r3, [r7, #16]
 801924e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019252:	2302      	movs	r3, #2
 8019254:	2239      	movs	r2, #57	@ 0x39
 8019256:	f000 f9e1 	bl	801961c <dhcp_option>
 801925a:	4603      	mov	r3, r0
 801925c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801925e:	89b8      	ldrh	r0, [r7, #12]
 8019260:	693b      	ldr	r3, [r7, #16]
 8019262:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801926a:	461a      	mov	r2, r3
 801926c:	f000 fa30 	bl	80196d0 <dhcp_option_short>
 8019270:	4603      	mov	r3, r0
 8019272:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019274:	89b8      	ldrh	r0, [r7, #12]
 8019276:	693b      	ldr	r3, [r7, #16]
 8019278:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801927c:	2303      	movs	r3, #3
 801927e:	2237      	movs	r2, #55	@ 0x37
 8019280:	f000 f9cc 	bl	801961c <dhcp_option>
 8019284:	4603      	mov	r3, r0
 8019286:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019288:	2300      	movs	r3, #0
 801928a:	77bb      	strb	r3, [r7, #30]
 801928c:	e00e      	b.n	80192ac <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801928e:	89b8      	ldrh	r0, [r7, #12]
 8019290:	693b      	ldr	r3, [r7, #16]
 8019292:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019296:	7fbb      	ldrb	r3, [r7, #30]
 8019298:	4a28      	ldr	r2, [pc, #160]	@ (801933c <dhcp_rebind+0x124>)
 801929a:	5cd3      	ldrb	r3, [r2, r3]
 801929c:	461a      	mov	r2, r3
 801929e:	f000 f9f1 	bl	8019684 <dhcp_option_byte>
 80192a2:	4603      	mov	r3, r0
 80192a4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80192a6:	7fbb      	ldrb	r3, [r7, #30]
 80192a8:	3301      	adds	r3, #1
 80192aa:	77bb      	strb	r3, [r7, #30]
 80192ac:	7fbb      	ldrb	r3, [r7, #30]
 80192ae:	2b02      	cmp	r3, #2
 80192b0:	d9ed      	bls.n	801928e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80192b2:	89b8      	ldrh	r0, [r7, #12]
 80192b4:	693b      	ldr	r3, [r7, #16]
 80192b6:	33f0      	adds	r3, #240	@ 0xf0
 80192b8:	697a      	ldr	r2, [r7, #20]
 80192ba:	4619      	mov	r1, r3
 80192bc:	f000 fef6 	bl	801a0ac <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80192c0:	4b1f      	ldr	r3, [pc, #124]	@ (8019340 <dhcp_rebind+0x128>)
 80192c2:	6818      	ldr	r0, [r3, #0]
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	9300      	str	r3, [sp, #0]
 80192c8:	2343      	movs	r3, #67	@ 0x43
 80192ca:	4a1e      	ldr	r2, [pc, #120]	@ (8019344 <dhcp_rebind+0x12c>)
 80192cc:	6979      	ldr	r1, [r7, #20]
 80192ce:	f7fe fdb9 	bl	8017e44 <udp_sendto_if>
 80192d2:	4603      	mov	r3, r0
 80192d4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80192d6:	6978      	ldr	r0, [r7, #20]
 80192d8:	f7f8 fe76 	bl	8011fc8 <pbuf_free>
 80192dc:	e001      	b.n	80192e2 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80192de:	23ff      	movs	r3, #255	@ 0xff
 80192e0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80192e2:	69bb      	ldr	r3, [r7, #24]
 80192e4:	799b      	ldrb	r3, [r3, #6]
 80192e6:	2bff      	cmp	r3, #255	@ 0xff
 80192e8:	d005      	beq.n	80192f6 <dhcp_rebind+0xde>
    dhcp->tries++;
 80192ea:	69bb      	ldr	r3, [r7, #24]
 80192ec:	799b      	ldrb	r3, [r3, #6]
 80192ee:	3301      	adds	r3, #1
 80192f0:	b2da      	uxtb	r2, r3
 80192f2:	69bb      	ldr	r3, [r7, #24]
 80192f4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80192f6:	69bb      	ldr	r3, [r7, #24]
 80192f8:	799b      	ldrb	r3, [r3, #6]
 80192fa:	2b09      	cmp	r3, #9
 80192fc:	d809      	bhi.n	8019312 <dhcp_rebind+0xfa>
 80192fe:	69bb      	ldr	r3, [r7, #24]
 8019300:	799b      	ldrb	r3, [r3, #6]
 8019302:	461a      	mov	r2, r3
 8019304:	0152      	lsls	r2, r2, #5
 8019306:	1ad2      	subs	r2, r2, r3
 8019308:	0092      	lsls	r2, r2, #2
 801930a:	4413      	add	r3, r2
 801930c:	00db      	lsls	r3, r3, #3
 801930e:	b29b      	uxth	r3, r3
 8019310:	e001      	b.n	8019316 <dhcp_rebind+0xfe>
 8019312:	f242 7310 	movw	r3, #10000	@ 0x2710
 8019316:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019318:	89fb      	ldrh	r3, [r7, #14]
 801931a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801931e:	4a0a      	ldr	r2, [pc, #40]	@ (8019348 <dhcp_rebind+0x130>)
 8019320:	fb82 1203 	smull	r1, r2, r2, r3
 8019324:	1152      	asrs	r2, r2, #5
 8019326:	17db      	asrs	r3, r3, #31
 8019328:	1ad3      	subs	r3, r2, r3
 801932a:	b29a      	uxth	r2, r3
 801932c:	69bb      	ldr	r3, [r7, #24]
 801932e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019330:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019334:	4618      	mov	r0, r3
 8019336:	3720      	adds	r7, #32
 8019338:	46bd      	mov	sp, r7
 801933a:	bd80      	pop	{r7, pc}
 801933c:	24000034 	.word	0x24000034
 8019340:	2400ccbc 	.word	0x2400ccbc
 8019344:	08022614 	.word	0x08022614
 8019348:	10624dd3 	.word	0x10624dd3

0801934c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801934c:	b5b0      	push	{r4, r5, r7, lr}
 801934e:	b08a      	sub	sp, #40	@ 0x28
 8019350:	af02      	add	r7, sp, #8
 8019352:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019358:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801935a:	2103      	movs	r1, #3
 801935c:	69b8      	ldr	r0, [r7, #24]
 801935e:	f000 f943 	bl	80195e8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019362:	f107 030c 	add.w	r3, r7, #12
 8019366:	2203      	movs	r2, #3
 8019368:	69b9      	ldr	r1, [r7, #24]
 801936a:	6878      	ldr	r0, [r7, #4]
 801936c:	f000 fdc8 	bl	8019f00 <dhcp_create_msg>
 8019370:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019372:	697b      	ldr	r3, [r7, #20]
 8019374:	2b00      	cmp	r3, #0
 8019376:	d066      	beq.n	8019446 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019378:	697b      	ldr	r3, [r7, #20]
 801937a:	685b      	ldr	r3, [r3, #4]
 801937c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801937e:	89b8      	ldrh	r0, [r7, #12]
 8019380:	693b      	ldr	r3, [r7, #16]
 8019382:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019386:	2302      	movs	r3, #2
 8019388:	2239      	movs	r2, #57	@ 0x39
 801938a:	f000 f947 	bl	801961c <dhcp_option>
 801938e:	4603      	mov	r3, r0
 8019390:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8019392:	89b8      	ldrh	r0, [r7, #12]
 8019394:	693b      	ldr	r3, [r7, #16]
 8019396:	33f0      	adds	r3, #240	@ 0xf0
 8019398:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801939c:	4619      	mov	r1, r3
 801939e:	f000 f997 	bl	80196d0 <dhcp_option_short>
 80193a2:	4603      	mov	r3, r0
 80193a4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80193a6:	89b8      	ldrh	r0, [r7, #12]
 80193a8:	693b      	ldr	r3, [r7, #16]
 80193aa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80193ae:	2304      	movs	r3, #4
 80193b0:	2232      	movs	r2, #50	@ 0x32
 80193b2:	f000 f933 	bl	801961c <dhcp_option>
 80193b6:	4603      	mov	r3, r0
 80193b8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80193ba:	89bc      	ldrh	r4, [r7, #12]
 80193bc:	693b      	ldr	r3, [r7, #16]
 80193be:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80193c2:	69bb      	ldr	r3, [r7, #24]
 80193c4:	69db      	ldr	r3, [r3, #28]
 80193c6:	4618      	mov	r0, r3
 80193c8:	f7f7 f95d 	bl	8010686 <lwip_htonl>
 80193cc:	4603      	mov	r3, r0
 80193ce:	461a      	mov	r2, r3
 80193d0:	4629      	mov	r1, r5
 80193d2:	4620      	mov	r0, r4
 80193d4:	f000 f9ae 	bl	8019734 <dhcp_option_long>
 80193d8:	4603      	mov	r3, r0
 80193da:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80193dc:	89b8      	ldrh	r0, [r7, #12]
 80193de:	693b      	ldr	r3, [r7, #16]
 80193e0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80193e4:	2303      	movs	r3, #3
 80193e6:	2237      	movs	r2, #55	@ 0x37
 80193e8:	f000 f918 	bl	801961c <dhcp_option>
 80193ec:	4603      	mov	r3, r0
 80193ee:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80193f0:	2300      	movs	r3, #0
 80193f2:	77bb      	strb	r3, [r7, #30]
 80193f4:	e00e      	b.n	8019414 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80193f6:	89b8      	ldrh	r0, [r7, #12]
 80193f8:	693b      	ldr	r3, [r7, #16]
 80193fa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80193fe:	7fbb      	ldrb	r3, [r7, #30]
 8019400:	4a28      	ldr	r2, [pc, #160]	@ (80194a4 <dhcp_reboot+0x158>)
 8019402:	5cd3      	ldrb	r3, [r2, r3]
 8019404:	461a      	mov	r2, r3
 8019406:	f000 f93d 	bl	8019684 <dhcp_option_byte>
 801940a:	4603      	mov	r3, r0
 801940c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801940e:	7fbb      	ldrb	r3, [r7, #30]
 8019410:	3301      	adds	r3, #1
 8019412:	77bb      	strb	r3, [r7, #30]
 8019414:	7fbb      	ldrb	r3, [r7, #30]
 8019416:	2b02      	cmp	r3, #2
 8019418:	d9ed      	bls.n	80193f6 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801941a:	89b8      	ldrh	r0, [r7, #12]
 801941c:	693b      	ldr	r3, [r7, #16]
 801941e:	33f0      	adds	r3, #240	@ 0xf0
 8019420:	697a      	ldr	r2, [r7, #20]
 8019422:	4619      	mov	r1, r3
 8019424:	f000 fe42 	bl	801a0ac <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019428:	4b1f      	ldr	r3, [pc, #124]	@ (80194a8 <dhcp_reboot+0x15c>)
 801942a:	6818      	ldr	r0, [r3, #0]
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	9300      	str	r3, [sp, #0]
 8019430:	2343      	movs	r3, #67	@ 0x43
 8019432:	4a1e      	ldr	r2, [pc, #120]	@ (80194ac <dhcp_reboot+0x160>)
 8019434:	6979      	ldr	r1, [r7, #20]
 8019436:	f7fe fd05 	bl	8017e44 <udp_sendto_if>
 801943a:	4603      	mov	r3, r0
 801943c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801943e:	6978      	ldr	r0, [r7, #20]
 8019440:	f7f8 fdc2 	bl	8011fc8 <pbuf_free>
 8019444:	e001      	b.n	801944a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019446:	23ff      	movs	r3, #255	@ 0xff
 8019448:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801944a:	69bb      	ldr	r3, [r7, #24]
 801944c:	799b      	ldrb	r3, [r3, #6]
 801944e:	2bff      	cmp	r3, #255	@ 0xff
 8019450:	d005      	beq.n	801945e <dhcp_reboot+0x112>
    dhcp->tries++;
 8019452:	69bb      	ldr	r3, [r7, #24]
 8019454:	799b      	ldrb	r3, [r3, #6]
 8019456:	3301      	adds	r3, #1
 8019458:	b2da      	uxtb	r2, r3
 801945a:	69bb      	ldr	r3, [r7, #24]
 801945c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801945e:	69bb      	ldr	r3, [r7, #24]
 8019460:	799b      	ldrb	r3, [r3, #6]
 8019462:	2b09      	cmp	r3, #9
 8019464:	d809      	bhi.n	801947a <dhcp_reboot+0x12e>
 8019466:	69bb      	ldr	r3, [r7, #24]
 8019468:	799b      	ldrb	r3, [r3, #6]
 801946a:	461a      	mov	r2, r3
 801946c:	0152      	lsls	r2, r2, #5
 801946e:	1ad2      	subs	r2, r2, r3
 8019470:	0092      	lsls	r2, r2, #2
 8019472:	4413      	add	r3, r2
 8019474:	00db      	lsls	r3, r3, #3
 8019476:	b29b      	uxth	r3, r3
 8019478:	e001      	b.n	801947e <dhcp_reboot+0x132>
 801947a:	f242 7310 	movw	r3, #10000	@ 0x2710
 801947e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019480:	89fb      	ldrh	r3, [r7, #14]
 8019482:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019486:	4a0a      	ldr	r2, [pc, #40]	@ (80194b0 <dhcp_reboot+0x164>)
 8019488:	fb82 1203 	smull	r1, r2, r2, r3
 801948c:	1152      	asrs	r2, r2, #5
 801948e:	17db      	asrs	r3, r3, #31
 8019490:	1ad3      	subs	r3, r2, r3
 8019492:	b29a      	uxth	r2, r3
 8019494:	69bb      	ldr	r3, [r7, #24]
 8019496:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019498:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801949c:	4618      	mov	r0, r3
 801949e:	3720      	adds	r7, #32
 80194a0:	46bd      	mov	sp, r7
 80194a2:	bdb0      	pop	{r4, r5, r7, pc}
 80194a4:	24000034 	.word	0x24000034
 80194a8:	2400ccbc 	.word	0x2400ccbc
 80194ac:	08022614 	.word	0x08022614
 80194b0:	10624dd3 	.word	0x10624dd3

080194b4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80194b4:	b5b0      	push	{r4, r5, r7, lr}
 80194b6:	b08a      	sub	sp, #40	@ 0x28
 80194b8:	af02      	add	r7, sp, #8
 80194ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80194c0:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80194c2:	69fb      	ldr	r3, [r7, #28]
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	f000 8084 	beq.w	80195d2 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80194ca:	69fb      	ldr	r3, [r7, #28]
 80194cc:	795b      	ldrb	r3, [r3, #5]
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	f000 8081 	beq.w	80195d6 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80194d4:	69fb      	ldr	r3, [r7, #28]
 80194d6:	699b      	ldr	r3, [r3, #24]
 80194d8:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80194da:	69fb      	ldr	r3, [r7, #28]
 80194dc:	2200      	movs	r2, #0
 80194de:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80194e0:	69fb      	ldr	r3, [r7, #28]
 80194e2:	2200      	movs	r2, #0
 80194e4:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80194e6:	69fb      	ldr	r3, [r7, #28]
 80194e8:	2200      	movs	r2, #0
 80194ea:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80194ec:	69fb      	ldr	r3, [r7, #28]
 80194ee:	2200      	movs	r2, #0
 80194f0:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80194f2:	69fb      	ldr	r3, [r7, #28]
 80194f4:	2200      	movs	r2, #0
 80194f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80194f8:	69fb      	ldr	r3, [r7, #28]
 80194fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80194fc:	69fb      	ldr	r3, [r7, #28]
 80194fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8019500:	69fb      	ldr	r3, [r7, #28]
 8019502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019504:	69fb      	ldr	r3, [r7, #28]
 8019506:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8019508:	69fb      	ldr	r3, [r7, #28]
 801950a:	2200      	movs	r2, #0
 801950c:	829a      	strh	r2, [r3, #20]
 801950e:	69fb      	ldr	r3, [r7, #28]
 8019510:	8a9a      	ldrh	r2, [r3, #20]
 8019512:	69fb      	ldr	r3, [r7, #28]
 8019514:	825a      	strh	r2, [r3, #18]
 8019516:	69fb      	ldr	r3, [r7, #28]
 8019518:	8a5a      	ldrh	r2, [r3, #18]
 801951a:	69fb      	ldr	r3, [r7, #28]
 801951c:	821a      	strh	r2, [r3, #16]
 801951e:	69fb      	ldr	r3, [r7, #28]
 8019520:	8a1a      	ldrh	r2, [r3, #16]
 8019522:	69fb      	ldr	r3, [r7, #28]
 8019524:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8019526:	6878      	ldr	r0, [r7, #4]
 8019528:	f000 fdee 	bl	801a108 <dhcp_supplied_address>
 801952c:	4603      	mov	r3, r0
 801952e:	2b00      	cmp	r3, #0
 8019530:	d03b      	beq.n	80195aa <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8019532:	f107 030e 	add.w	r3, r7, #14
 8019536:	2207      	movs	r2, #7
 8019538:	69f9      	ldr	r1, [r7, #28]
 801953a:	6878      	ldr	r0, [r7, #4]
 801953c:	f000 fce0 	bl	8019f00 <dhcp_create_msg>
 8019540:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8019542:	69bb      	ldr	r3, [r7, #24]
 8019544:	2b00      	cmp	r3, #0
 8019546:	d030      	beq.n	80195aa <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019548:	69bb      	ldr	r3, [r7, #24]
 801954a:	685b      	ldr	r3, [r3, #4]
 801954c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801954e:	89f8      	ldrh	r0, [r7, #14]
 8019550:	697b      	ldr	r3, [r7, #20]
 8019552:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019556:	2304      	movs	r3, #4
 8019558:	2236      	movs	r2, #54	@ 0x36
 801955a:	f000 f85f 	bl	801961c <dhcp_option>
 801955e:	4603      	mov	r3, r0
 8019560:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8019562:	89fc      	ldrh	r4, [r7, #14]
 8019564:	697b      	ldr	r3, [r7, #20]
 8019566:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801956a:	693b      	ldr	r3, [r7, #16]
 801956c:	4618      	mov	r0, r3
 801956e:	f7f7 f88a 	bl	8010686 <lwip_htonl>
 8019572:	4603      	mov	r3, r0
 8019574:	461a      	mov	r2, r3
 8019576:	4629      	mov	r1, r5
 8019578:	4620      	mov	r0, r4
 801957a:	f000 f8db 	bl	8019734 <dhcp_option_long>
 801957e:	4603      	mov	r3, r0
 8019580:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019582:	89f8      	ldrh	r0, [r7, #14]
 8019584:	697b      	ldr	r3, [r7, #20]
 8019586:	33f0      	adds	r3, #240	@ 0xf0
 8019588:	69ba      	ldr	r2, [r7, #24]
 801958a:	4619      	mov	r1, r3
 801958c:	f000 fd8e 	bl	801a0ac <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019590:	4b13      	ldr	r3, [pc, #76]	@ (80195e0 <dhcp_release_and_stop+0x12c>)
 8019592:	6818      	ldr	r0, [r3, #0]
 8019594:	f107 0210 	add.w	r2, r7, #16
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	9300      	str	r3, [sp, #0]
 801959c:	2343      	movs	r3, #67	@ 0x43
 801959e:	69b9      	ldr	r1, [r7, #24]
 80195a0:	f7fe fc50 	bl	8017e44 <udp_sendto_if>
      pbuf_free(p_out);
 80195a4:	69b8      	ldr	r0, [r7, #24]
 80195a6:	f7f8 fd0f 	bl	8011fc8 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80195aa:	4b0e      	ldr	r3, [pc, #56]	@ (80195e4 <dhcp_release_and_stop+0x130>)
 80195ac:	4a0d      	ldr	r2, [pc, #52]	@ (80195e4 <dhcp_release_and_stop+0x130>)
 80195ae:	490d      	ldr	r1, [pc, #52]	@ (80195e4 <dhcp_release_and_stop+0x130>)
 80195b0:	6878      	ldr	r0, [r7, #4]
 80195b2:	f7f7 fffb 	bl	80115ac <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80195b6:	2100      	movs	r1, #0
 80195b8:	69f8      	ldr	r0, [r7, #28]
 80195ba:	f000 f815 	bl	80195e8 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80195be:	69fb      	ldr	r3, [r7, #28]
 80195c0:	791b      	ldrb	r3, [r3, #4]
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d008      	beq.n	80195d8 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80195c6:	f7fe ff89 	bl	80184dc <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80195ca:	69fb      	ldr	r3, [r7, #28]
 80195cc:	2200      	movs	r2, #0
 80195ce:	711a      	strb	r2, [r3, #4]
 80195d0:	e002      	b.n	80195d8 <dhcp_release_and_stop+0x124>
    return;
 80195d2:	bf00      	nop
 80195d4:	e000      	b.n	80195d8 <dhcp_release_and_stop+0x124>
    return;
 80195d6:	bf00      	nop
  }
}
 80195d8:	3720      	adds	r7, #32
 80195da:	46bd      	mov	sp, r7
 80195dc:	bdb0      	pop	{r4, r5, r7, pc}
 80195de:	bf00      	nop
 80195e0:	2400ccbc 	.word	0x2400ccbc
 80195e4:	08022610 	.word	0x08022610

080195e8 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80195e8:	b480      	push	{r7}
 80195ea:	b083      	sub	sp, #12
 80195ec:	af00      	add	r7, sp, #0
 80195ee:	6078      	str	r0, [r7, #4]
 80195f0:	460b      	mov	r3, r1
 80195f2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	795b      	ldrb	r3, [r3, #5]
 80195f8:	78fa      	ldrb	r2, [r7, #3]
 80195fa:	429a      	cmp	r2, r3
 80195fc:	d008      	beq.n	8019610 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	78fa      	ldrb	r2, [r7, #3]
 8019602:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	2200      	movs	r2, #0
 8019608:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	2200      	movs	r2, #0
 801960e:	811a      	strh	r2, [r3, #8]
  }
}
 8019610:	bf00      	nop
 8019612:	370c      	adds	r7, #12
 8019614:	46bd      	mov	sp, r7
 8019616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801961a:	4770      	bx	lr

0801961c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801961c:	b580      	push	{r7, lr}
 801961e:	b082      	sub	sp, #8
 8019620:	af00      	add	r7, sp, #0
 8019622:	6039      	str	r1, [r7, #0]
 8019624:	4611      	mov	r1, r2
 8019626:	461a      	mov	r2, r3
 8019628:	4603      	mov	r3, r0
 801962a:	80fb      	strh	r3, [r7, #6]
 801962c:	460b      	mov	r3, r1
 801962e:	717b      	strb	r3, [r7, #5]
 8019630:	4613      	mov	r3, r2
 8019632:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8019634:	88fa      	ldrh	r2, [r7, #6]
 8019636:	793b      	ldrb	r3, [r7, #4]
 8019638:	4413      	add	r3, r2
 801963a:	3302      	adds	r3, #2
 801963c:	2b44      	cmp	r3, #68	@ 0x44
 801963e:	d906      	bls.n	801964e <dhcp_option+0x32>
 8019640:	4b0d      	ldr	r3, [pc, #52]	@ (8019678 <dhcp_option+0x5c>)
 8019642:	f240 529a 	movw	r2, #1434	@ 0x59a
 8019646:	490d      	ldr	r1, [pc, #52]	@ (801967c <dhcp_option+0x60>)
 8019648:	480d      	ldr	r0, [pc, #52]	@ (8019680 <dhcp_option+0x64>)
 801964a:	f003 febb 	bl	801d3c4 <iprintf>
  options[options_out_len++] = option_type;
 801964e:	88fb      	ldrh	r3, [r7, #6]
 8019650:	1c5a      	adds	r2, r3, #1
 8019652:	80fa      	strh	r2, [r7, #6]
 8019654:	461a      	mov	r2, r3
 8019656:	683b      	ldr	r3, [r7, #0]
 8019658:	4413      	add	r3, r2
 801965a:	797a      	ldrb	r2, [r7, #5]
 801965c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801965e:	88fb      	ldrh	r3, [r7, #6]
 8019660:	1c5a      	adds	r2, r3, #1
 8019662:	80fa      	strh	r2, [r7, #6]
 8019664:	461a      	mov	r2, r3
 8019666:	683b      	ldr	r3, [r7, #0]
 8019668:	4413      	add	r3, r2
 801966a:	793a      	ldrb	r2, [r7, #4]
 801966c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801966e:	88fb      	ldrh	r3, [r7, #6]
}
 8019670:	4618      	mov	r0, r3
 8019672:	3708      	adds	r7, #8
 8019674:	46bd      	mov	sp, r7
 8019676:	bd80      	pop	{r7, pc}
 8019678:	080219bc 	.word	0x080219bc
 801967c:	08021b50 	.word	0x08021b50
 8019680:	08021a1c 	.word	0x08021a1c

08019684 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8019684:	b580      	push	{r7, lr}
 8019686:	b082      	sub	sp, #8
 8019688:	af00      	add	r7, sp, #0
 801968a:	4603      	mov	r3, r0
 801968c:	6039      	str	r1, [r7, #0]
 801968e:	80fb      	strh	r3, [r7, #6]
 8019690:	4613      	mov	r3, r2
 8019692:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8019694:	88fb      	ldrh	r3, [r7, #6]
 8019696:	2b43      	cmp	r3, #67	@ 0x43
 8019698:	d906      	bls.n	80196a8 <dhcp_option_byte+0x24>
 801969a:	4b0a      	ldr	r3, [pc, #40]	@ (80196c4 <dhcp_option_byte+0x40>)
 801969c:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 80196a0:	4909      	ldr	r1, [pc, #36]	@ (80196c8 <dhcp_option_byte+0x44>)
 80196a2:	480a      	ldr	r0, [pc, #40]	@ (80196cc <dhcp_option_byte+0x48>)
 80196a4:	f003 fe8e 	bl	801d3c4 <iprintf>
  options[options_out_len++] = value;
 80196a8:	88fb      	ldrh	r3, [r7, #6]
 80196aa:	1c5a      	adds	r2, r3, #1
 80196ac:	80fa      	strh	r2, [r7, #6]
 80196ae:	461a      	mov	r2, r3
 80196b0:	683b      	ldr	r3, [r7, #0]
 80196b2:	4413      	add	r3, r2
 80196b4:	797a      	ldrb	r2, [r7, #5]
 80196b6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80196b8:	88fb      	ldrh	r3, [r7, #6]
}
 80196ba:	4618      	mov	r0, r3
 80196bc:	3708      	adds	r7, #8
 80196be:	46bd      	mov	sp, r7
 80196c0:	bd80      	pop	{r7, pc}
 80196c2:	bf00      	nop
 80196c4:	080219bc 	.word	0x080219bc
 80196c8:	08021b94 	.word	0x08021b94
 80196cc:	08021a1c 	.word	0x08021a1c

080196d0 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80196d0:	b580      	push	{r7, lr}
 80196d2:	b082      	sub	sp, #8
 80196d4:	af00      	add	r7, sp, #0
 80196d6:	4603      	mov	r3, r0
 80196d8:	6039      	str	r1, [r7, #0]
 80196da:	80fb      	strh	r3, [r7, #6]
 80196dc:	4613      	mov	r3, r2
 80196de:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80196e0:	88fb      	ldrh	r3, [r7, #6]
 80196e2:	3302      	adds	r3, #2
 80196e4:	2b44      	cmp	r3, #68	@ 0x44
 80196e6:	d906      	bls.n	80196f6 <dhcp_option_short+0x26>
 80196e8:	4b0f      	ldr	r3, [pc, #60]	@ (8019728 <dhcp_option_short+0x58>)
 80196ea:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 80196ee:	490f      	ldr	r1, [pc, #60]	@ (801972c <dhcp_option_short+0x5c>)
 80196f0:	480f      	ldr	r0, [pc, #60]	@ (8019730 <dhcp_option_short+0x60>)
 80196f2:	f003 fe67 	bl	801d3c4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80196f6:	88bb      	ldrh	r3, [r7, #4]
 80196f8:	0a1b      	lsrs	r3, r3, #8
 80196fa:	b29a      	uxth	r2, r3
 80196fc:	88fb      	ldrh	r3, [r7, #6]
 80196fe:	1c59      	adds	r1, r3, #1
 8019700:	80f9      	strh	r1, [r7, #6]
 8019702:	4619      	mov	r1, r3
 8019704:	683b      	ldr	r3, [r7, #0]
 8019706:	440b      	add	r3, r1
 8019708:	b2d2      	uxtb	r2, r2
 801970a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801970c:	88fb      	ldrh	r3, [r7, #6]
 801970e:	1c5a      	adds	r2, r3, #1
 8019710:	80fa      	strh	r2, [r7, #6]
 8019712:	461a      	mov	r2, r3
 8019714:	683b      	ldr	r3, [r7, #0]
 8019716:	4413      	add	r3, r2
 8019718:	88ba      	ldrh	r2, [r7, #4]
 801971a:	b2d2      	uxtb	r2, r2
 801971c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801971e:	88fb      	ldrh	r3, [r7, #6]
}
 8019720:	4618      	mov	r0, r3
 8019722:	3708      	adds	r7, #8
 8019724:	46bd      	mov	sp, r7
 8019726:	bd80      	pop	{r7, pc}
 8019728:	080219bc 	.word	0x080219bc
 801972c:	08021bcc 	.word	0x08021bcc
 8019730:	08021a1c 	.word	0x08021a1c

08019734 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8019734:	b580      	push	{r7, lr}
 8019736:	b084      	sub	sp, #16
 8019738:	af00      	add	r7, sp, #0
 801973a:	4603      	mov	r3, r0
 801973c:	60b9      	str	r1, [r7, #8]
 801973e:	607a      	str	r2, [r7, #4]
 8019740:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8019742:	89fb      	ldrh	r3, [r7, #14]
 8019744:	3304      	adds	r3, #4
 8019746:	2b44      	cmp	r3, #68	@ 0x44
 8019748:	d906      	bls.n	8019758 <dhcp_option_long+0x24>
 801974a:	4b19      	ldr	r3, [pc, #100]	@ (80197b0 <dhcp_option_long+0x7c>)
 801974c:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8019750:	4918      	ldr	r1, [pc, #96]	@ (80197b4 <dhcp_option_long+0x80>)
 8019752:	4819      	ldr	r0, [pc, #100]	@ (80197b8 <dhcp_option_long+0x84>)
 8019754:	f003 fe36 	bl	801d3c4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	0e1a      	lsrs	r2, r3, #24
 801975c:	89fb      	ldrh	r3, [r7, #14]
 801975e:	1c59      	adds	r1, r3, #1
 8019760:	81f9      	strh	r1, [r7, #14]
 8019762:	4619      	mov	r1, r3
 8019764:	68bb      	ldr	r3, [r7, #8]
 8019766:	440b      	add	r3, r1
 8019768:	b2d2      	uxtb	r2, r2
 801976a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	0c1a      	lsrs	r2, r3, #16
 8019770:	89fb      	ldrh	r3, [r7, #14]
 8019772:	1c59      	adds	r1, r3, #1
 8019774:	81f9      	strh	r1, [r7, #14]
 8019776:	4619      	mov	r1, r3
 8019778:	68bb      	ldr	r3, [r7, #8]
 801977a:	440b      	add	r3, r1
 801977c:	b2d2      	uxtb	r2, r2
 801977e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	0a1a      	lsrs	r2, r3, #8
 8019784:	89fb      	ldrh	r3, [r7, #14]
 8019786:	1c59      	adds	r1, r3, #1
 8019788:	81f9      	strh	r1, [r7, #14]
 801978a:	4619      	mov	r1, r3
 801978c:	68bb      	ldr	r3, [r7, #8]
 801978e:	440b      	add	r3, r1
 8019790:	b2d2      	uxtb	r2, r2
 8019792:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8019794:	89fb      	ldrh	r3, [r7, #14]
 8019796:	1c5a      	adds	r2, r3, #1
 8019798:	81fa      	strh	r2, [r7, #14]
 801979a:	461a      	mov	r2, r3
 801979c:	68bb      	ldr	r3, [r7, #8]
 801979e:	4413      	add	r3, r2
 80197a0:	687a      	ldr	r2, [r7, #4]
 80197a2:	b2d2      	uxtb	r2, r2
 80197a4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80197a6:	89fb      	ldrh	r3, [r7, #14]
}
 80197a8:	4618      	mov	r0, r3
 80197aa:	3710      	adds	r7, #16
 80197ac:	46bd      	mov	sp, r7
 80197ae:	bd80      	pop	{r7, pc}
 80197b0:	080219bc 	.word	0x080219bc
 80197b4:	08021c08 	.word	0x08021c08
 80197b8:	08021a1c 	.word	0x08021a1c

080197bc <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80197bc:	b580      	push	{r7, lr}
 80197be:	b090      	sub	sp, #64	@ 0x40
 80197c0:	af00      	add	r7, sp, #0
 80197c2:	6078      	str	r0, [r7, #4]
 80197c4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80197c6:	2300      	movs	r3, #0
 80197c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 80197ca:	2300      	movs	r3, #0
 80197cc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80197ce:	2208      	movs	r2, #8
 80197d0:	2100      	movs	r1, #0
 80197d2:	48b5      	ldr	r0, [pc, #724]	@ (8019aa8 <dhcp_parse_reply+0x2ec>)
 80197d4:	f003 ff4e 	bl	801d674 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	895b      	ldrh	r3, [r3, #10]
 80197dc:	2b2b      	cmp	r3, #43	@ 0x2b
 80197de:	d802      	bhi.n	80197e6 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80197e0:	f06f 0301 	mvn.w	r3, #1
 80197e4:	e2a7      	b.n	8019d36 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	685b      	ldr	r3, [r3, #4]
 80197ea:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80197ec:	23f0      	movs	r3, #240	@ 0xf0
 80197ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	891b      	ldrh	r3, [r3, #8]
 80197f4:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80197fa:	e00c      	b.n	8019816 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80197fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80197fe:	895b      	ldrh	r3, [r3, #10]
 8019800:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8019802:	1ad3      	subs	r3, r2, r3
 8019804:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8019806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019808:	895b      	ldrh	r3, [r3, #10]
 801980a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 801980c:	1ad3      	subs	r3, r2, r3
 801980e:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8019810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8019816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019818:	2b00      	cmp	r3, #0
 801981a:	d004      	beq.n	8019826 <dhcp_parse_reply+0x6a>
 801981c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801981e:	895b      	ldrh	r3, [r3, #10]
 8019820:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8019822:	429a      	cmp	r2, r3
 8019824:	d2ea      	bcs.n	80197fc <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8019826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019828:	2b00      	cmp	r3, #0
 801982a:	d102      	bne.n	8019832 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801982c:	f06f 0301 	mvn.w	r3, #1
 8019830:	e281      	b.n	8019d36 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8019832:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019834:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 8019836:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8019838:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 801983a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801983c:	685b      	ldr	r3, [r3, #4]
 801983e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8019840:	e239      	b.n	8019cb6 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8019842:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019844:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019846:	4413      	add	r3, r2
 8019848:	781b      	ldrb	r3, [r3, #0]
 801984a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801984c:	2300      	movs	r3, #0
 801984e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 8019852:	f04f 33ff 	mov.w	r3, #4294967295
 8019856:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8019858:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801985a:	3302      	adds	r3, #2
 801985c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801985e:	8bfa      	ldrh	r2, [r7, #30]
 8019860:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019862:	429a      	cmp	r2, r3
 8019864:	d202      	bcs.n	801986c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8019866:	f06f 0301 	mvn.w	r3, #1
 801986a:	e264      	b.n	8019d36 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801986c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801986e:	3301      	adds	r3, #1
 8019870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019872:	8952      	ldrh	r2, [r2, #10]
 8019874:	4293      	cmp	r3, r2
 8019876:	da07      	bge.n	8019888 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8019878:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801987a:	3301      	adds	r3, #1
 801987c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801987e:	4413      	add	r3, r2
 8019880:	781b      	ldrb	r3, [r3, #0]
 8019882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019886:	e00b      	b.n	80198a0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8019888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	2b00      	cmp	r3, #0
 801988e:	d004      	beq.n	801989a <dhcp_parse_reply+0xde>
 8019890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019892:	681b      	ldr	r3, [r3, #0]
 8019894:	685b      	ldr	r3, [r3, #4]
 8019896:	781b      	ldrb	r3, [r3, #0]
 8019898:	e000      	b.n	801989c <dhcp_parse_reply+0xe0>
 801989a:	2300      	movs	r3, #0
 801989c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80198a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80198a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 80198a8:	7dfb      	ldrb	r3, [r7, #23]
 80198aa:	2b3b      	cmp	r3, #59	@ 0x3b
 80198ac:	f200 812c 	bhi.w	8019b08 <dhcp_parse_reply+0x34c>
 80198b0:	a201      	add	r2, pc, #4	@ (adr r2, 80198b8 <dhcp_parse_reply+0xfc>)
 80198b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80198b6:	bf00      	nop
 80198b8:	080199a9 	.word	0x080199a9
 80198bc:	080199b9 	.word	0x080199b9
 80198c0:	08019b09 	.word	0x08019b09
 80198c4:	080199db 	.word	0x080199db
 80198c8:	08019b09 	.word	0x08019b09
 80198cc:	08019b09 	.word	0x08019b09
 80198d0:	08019b09 	.word	0x08019b09
 80198d4:	08019b09 	.word	0x08019b09
 80198d8:	08019b09 	.word	0x08019b09
 80198dc:	08019b09 	.word	0x08019b09
 80198e0:	08019b09 	.word	0x08019b09
 80198e4:	08019b09 	.word	0x08019b09
 80198e8:	08019b09 	.word	0x08019b09
 80198ec:	08019b09 	.word	0x08019b09
 80198f0:	08019b09 	.word	0x08019b09
 80198f4:	08019b09 	.word	0x08019b09
 80198f8:	08019b09 	.word	0x08019b09
 80198fc:	08019b09 	.word	0x08019b09
 8019900:	08019b09 	.word	0x08019b09
 8019904:	08019b09 	.word	0x08019b09
 8019908:	08019b09 	.word	0x08019b09
 801990c:	08019b09 	.word	0x08019b09
 8019910:	08019b09 	.word	0x08019b09
 8019914:	08019b09 	.word	0x08019b09
 8019918:	08019b09 	.word	0x08019b09
 801991c:	08019b09 	.word	0x08019b09
 8019920:	08019b09 	.word	0x08019b09
 8019924:	08019b09 	.word	0x08019b09
 8019928:	08019b09 	.word	0x08019b09
 801992c:	08019b09 	.word	0x08019b09
 8019930:	08019b09 	.word	0x08019b09
 8019934:	08019b09 	.word	0x08019b09
 8019938:	08019b09 	.word	0x08019b09
 801993c:	08019b09 	.word	0x08019b09
 8019940:	08019b09 	.word	0x08019b09
 8019944:	08019b09 	.word	0x08019b09
 8019948:	08019b09 	.word	0x08019b09
 801994c:	08019b09 	.word	0x08019b09
 8019950:	08019b09 	.word	0x08019b09
 8019954:	08019b09 	.word	0x08019b09
 8019958:	08019b09 	.word	0x08019b09
 801995c:	08019b09 	.word	0x08019b09
 8019960:	08019b09 	.word	0x08019b09
 8019964:	08019b09 	.word	0x08019b09
 8019968:	08019b09 	.word	0x08019b09
 801996c:	08019b09 	.word	0x08019b09
 8019970:	08019b09 	.word	0x08019b09
 8019974:	08019b09 	.word	0x08019b09
 8019978:	08019b09 	.word	0x08019b09
 801997c:	08019b09 	.word	0x08019b09
 8019980:	08019b09 	.word	0x08019b09
 8019984:	08019a07 	.word	0x08019a07
 8019988:	08019a29 	.word	0x08019a29
 801998c:	08019a65 	.word	0x08019a65
 8019990:	08019a87 	.word	0x08019a87
 8019994:	08019b09 	.word	0x08019b09
 8019998:	08019b09 	.word	0x08019b09
 801999c:	08019b09 	.word	0x08019b09
 80199a0:	08019ac5 	.word	0x08019ac5
 80199a4:	08019ae7 	.word	0x08019ae7
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80199a8:	2300      	movs	r3, #0
 80199aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80199ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80199b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 80199b6:	e0ab      	b.n	8019b10 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80199b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80199bc:	2b04      	cmp	r3, #4
 80199be:	d009      	beq.n	80199d4 <dhcp_parse_reply+0x218>
 80199c0:	4b3a      	ldr	r3, [pc, #232]	@ (8019aac <dhcp_parse_reply+0x2f0>)
 80199c2:	f240 622e 	movw	r2, #1582	@ 0x62e
 80199c6:	493a      	ldr	r1, [pc, #232]	@ (8019ab0 <dhcp_parse_reply+0x2f4>)
 80199c8:	483a      	ldr	r0, [pc, #232]	@ (8019ab4 <dhcp_parse_reply+0x2f8>)
 80199ca:	f003 fcfb 	bl	801d3c4 <iprintf>
 80199ce:	f06f 0305 	mvn.w	r3, #5
 80199d2:	e1b0      	b.n	8019d36 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80199d4:	2306      	movs	r3, #6
 80199d6:	623b      	str	r3, [r7, #32]
        break;
 80199d8:	e09a      	b.n	8019b10 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80199da:	2304      	movs	r3, #4
 80199dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80199e0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80199e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80199e8:	429a      	cmp	r2, r3
 80199ea:	d209      	bcs.n	8019a00 <dhcp_parse_reply+0x244>
 80199ec:	4b2f      	ldr	r3, [pc, #188]	@ (8019aac <dhcp_parse_reply+0x2f0>)
 80199ee:	f240 6233 	movw	r2, #1587	@ 0x633
 80199f2:	4931      	ldr	r1, [pc, #196]	@ (8019ab8 <dhcp_parse_reply+0x2fc>)
 80199f4:	482f      	ldr	r0, [pc, #188]	@ (8019ab4 <dhcp_parse_reply+0x2f8>)
 80199f6:	f003 fce5 	bl	801d3c4 <iprintf>
 80199fa:	f06f 0305 	mvn.w	r3, #5
 80199fe:	e19a      	b.n	8019d36 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8019a00:	2307      	movs	r3, #7
 8019a02:	623b      	str	r3, [r7, #32]
        break;
 8019a04:	e084      	b.n	8019b10 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019a06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019a0a:	2b04      	cmp	r3, #4
 8019a0c:	d009      	beq.n	8019a22 <dhcp_parse_reply+0x266>
 8019a0e:	4b27      	ldr	r3, [pc, #156]	@ (8019aac <dhcp_parse_reply+0x2f0>)
 8019a10:	f240 6241 	movw	r2, #1601	@ 0x641
 8019a14:	4926      	ldr	r1, [pc, #152]	@ (8019ab0 <dhcp_parse_reply+0x2f4>)
 8019a16:	4827      	ldr	r0, [pc, #156]	@ (8019ab4 <dhcp_parse_reply+0x2f8>)
 8019a18:	f003 fcd4 	bl	801d3c4 <iprintf>
 8019a1c:	f06f 0305 	mvn.w	r3, #5
 8019a20:	e189      	b.n	8019d36 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8019a22:	2303      	movs	r3, #3
 8019a24:	623b      	str	r3, [r7, #32]
        break;
 8019a26:	e073      	b.n	8019b10 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8019a28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019a2c:	2b01      	cmp	r3, #1
 8019a2e:	d009      	beq.n	8019a44 <dhcp_parse_reply+0x288>
 8019a30:	4b1e      	ldr	r3, [pc, #120]	@ (8019aac <dhcp_parse_reply+0x2f0>)
 8019a32:	f240 624f 	movw	r2, #1615	@ 0x64f
 8019a36:	4921      	ldr	r1, [pc, #132]	@ (8019abc <dhcp_parse_reply+0x300>)
 8019a38:	481e      	ldr	r0, [pc, #120]	@ (8019ab4 <dhcp_parse_reply+0x2f8>)
 8019a3a:	f003 fcc3 	bl	801d3c4 <iprintf>
 8019a3e:	f06f 0305 	mvn.w	r3, #5
 8019a42:	e178      	b.n	8019d36 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8019a44:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019a46:	2bf0      	cmp	r3, #240	@ 0xf0
 8019a48:	d009      	beq.n	8019a5e <dhcp_parse_reply+0x2a2>
 8019a4a:	4b18      	ldr	r3, [pc, #96]	@ (8019aac <dhcp_parse_reply+0x2f0>)
 8019a4c:	f240 6251 	movw	r2, #1617	@ 0x651
 8019a50:	491b      	ldr	r1, [pc, #108]	@ (8019ac0 <dhcp_parse_reply+0x304>)
 8019a52:	4818      	ldr	r0, [pc, #96]	@ (8019ab4 <dhcp_parse_reply+0x2f8>)
 8019a54:	f003 fcb6 	bl	801d3c4 <iprintf>
 8019a58:	f06f 0305 	mvn.w	r3, #5
 8019a5c:	e16b      	b.n	8019d36 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8019a5e:	2300      	movs	r3, #0
 8019a60:	623b      	str	r3, [r7, #32]
        break;
 8019a62:	e055      	b.n	8019b10 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8019a64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019a68:	2b01      	cmp	r3, #1
 8019a6a:	d009      	beq.n	8019a80 <dhcp_parse_reply+0x2c4>
 8019a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8019aac <dhcp_parse_reply+0x2f0>)
 8019a6e:	f240 6255 	movw	r2, #1621	@ 0x655
 8019a72:	4912      	ldr	r1, [pc, #72]	@ (8019abc <dhcp_parse_reply+0x300>)
 8019a74:	480f      	ldr	r0, [pc, #60]	@ (8019ab4 <dhcp_parse_reply+0x2f8>)
 8019a76:	f003 fca5 	bl	801d3c4 <iprintf>
 8019a7a:	f06f 0305 	mvn.w	r3, #5
 8019a7e:	e15a      	b.n	8019d36 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8019a80:	2301      	movs	r3, #1
 8019a82:	623b      	str	r3, [r7, #32]
        break;
 8019a84:	e044      	b.n	8019b10 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019a86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019a8a:	2b04      	cmp	r3, #4
 8019a8c:	d009      	beq.n	8019aa2 <dhcp_parse_reply+0x2e6>
 8019a8e:	4b07      	ldr	r3, [pc, #28]	@ (8019aac <dhcp_parse_reply+0x2f0>)
 8019a90:	f240 6259 	movw	r2, #1625	@ 0x659
 8019a94:	4906      	ldr	r1, [pc, #24]	@ (8019ab0 <dhcp_parse_reply+0x2f4>)
 8019a96:	4807      	ldr	r0, [pc, #28]	@ (8019ab4 <dhcp_parse_reply+0x2f8>)
 8019a98:	f003 fc94 	bl	801d3c4 <iprintf>
 8019a9c:	f06f 0305 	mvn.w	r3, #5
 8019aa0:	e149      	b.n	8019d36 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8019aa2:	2302      	movs	r3, #2
 8019aa4:	623b      	str	r3, [r7, #32]
        break;
 8019aa6:	e033      	b.n	8019b10 <dhcp_parse_reply+0x354>
 8019aa8:	2400ccb4 	.word	0x2400ccb4
 8019aac:	080219bc 	.word	0x080219bc
 8019ab0:	08021c44 	.word	0x08021c44
 8019ab4:	08021a1c 	.word	0x08021a1c
 8019ab8:	08021c50 	.word	0x08021c50
 8019abc:	08021c64 	.word	0x08021c64
 8019ac0:	08021c70 	.word	0x08021c70
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019ac8:	2b04      	cmp	r3, #4
 8019aca:	d009      	beq.n	8019ae0 <dhcp_parse_reply+0x324>
 8019acc:	4b9c      	ldr	r3, [pc, #624]	@ (8019d40 <dhcp_parse_reply+0x584>)
 8019ace:	f240 625d 	movw	r2, #1629	@ 0x65d
 8019ad2:	499c      	ldr	r1, [pc, #624]	@ (8019d44 <dhcp_parse_reply+0x588>)
 8019ad4:	489c      	ldr	r0, [pc, #624]	@ (8019d48 <dhcp_parse_reply+0x58c>)
 8019ad6:	f003 fc75 	bl	801d3c4 <iprintf>
 8019ada:	f06f 0305 	mvn.w	r3, #5
 8019ade:	e12a      	b.n	8019d36 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8019ae0:	2304      	movs	r3, #4
 8019ae2:	623b      	str	r3, [r7, #32]
        break;
 8019ae4:	e014      	b.n	8019b10 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019ae6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019aea:	2b04      	cmp	r3, #4
 8019aec:	d009      	beq.n	8019b02 <dhcp_parse_reply+0x346>
 8019aee:	4b94      	ldr	r3, [pc, #592]	@ (8019d40 <dhcp_parse_reply+0x584>)
 8019af0:	f240 6261 	movw	r2, #1633	@ 0x661
 8019af4:	4993      	ldr	r1, [pc, #588]	@ (8019d44 <dhcp_parse_reply+0x588>)
 8019af6:	4894      	ldr	r0, [pc, #592]	@ (8019d48 <dhcp_parse_reply+0x58c>)
 8019af8:	f003 fc64 	bl	801d3c4 <iprintf>
 8019afc:	f06f 0305 	mvn.w	r3, #5
 8019b00:	e119      	b.n	8019d36 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8019b02:	2305      	movs	r3, #5
 8019b04:	623b      	str	r3, [r7, #32]
        break;
 8019b06:	e003      	b.n	8019b10 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8019b08:	2300      	movs	r3, #0
 8019b0a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8019b0e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8019b10:	7dfb      	ldrb	r3, [r7, #23]
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d103      	bne.n	8019b1e <dhcp_parse_reply+0x362>
      offset++;
 8019b16:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019b18:	3301      	adds	r3, #1
 8019b1a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8019b1c:	e0a1      	b.n	8019c62 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8019b1e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019b20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019b24:	4413      	add	r3, r2
 8019b26:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8019b2a:	4293      	cmp	r3, r2
 8019b2c:	dd02      	ble.n	8019b34 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8019b2e:	f06f 0301 	mvn.w	r3, #1
 8019b32:	e100      	b.n	8019d36 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8019b34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019b38:	b29a      	uxth	r2, r3
 8019b3a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019b3c:	4413      	add	r3, r2
 8019b3e:	b29b      	uxth	r3, r3
 8019b40:	3302      	adds	r3, #2
 8019b42:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8019b44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	f000 808a 	beq.w	8019c62 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8019b4e:	2300      	movs	r3, #0
 8019b50:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8019b52:	6a3b      	ldr	r3, [r7, #32]
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	db02      	blt.n	8019b5e <dhcp_parse_reply+0x3a2>
 8019b58:	6a3b      	ldr	r3, [r7, #32]
 8019b5a:	2b07      	cmp	r3, #7
 8019b5c:	dd06      	ble.n	8019b6c <dhcp_parse_reply+0x3b0>
 8019b5e:	4b78      	ldr	r3, [pc, #480]	@ (8019d40 <dhcp_parse_reply+0x584>)
 8019b60:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8019b64:	4979      	ldr	r1, [pc, #484]	@ (8019d4c <dhcp_parse_reply+0x590>)
 8019b66:	4878      	ldr	r0, [pc, #480]	@ (8019d48 <dhcp_parse_reply+0x58c>)
 8019b68:	f003 fc2c 	bl	801d3c4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8019b6c:	4a78      	ldr	r2, [pc, #480]	@ (8019d50 <dhcp_parse_reply+0x594>)
 8019b6e:	6a3b      	ldr	r3, [r7, #32]
 8019b70:	4413      	add	r3, r2
 8019b72:	781b      	ldrb	r3, [r3, #0]
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d174      	bne.n	8019c62 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8019b78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019b7c:	2b04      	cmp	r3, #4
 8019b7e:	bf28      	it	cs
 8019b80:	2304      	movcs	r3, #4
 8019b82:	b2db      	uxtb	r3, r3
 8019b84:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8019b86:	8bfb      	ldrh	r3, [r7, #30]
 8019b88:	8aba      	ldrh	r2, [r7, #20]
 8019b8a:	f107 0108 	add.w	r1, r7, #8
 8019b8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019b90:	f7f8 fc20 	bl	80123d4 <pbuf_copy_partial>
 8019b94:	4603      	mov	r3, r0
 8019b96:	461a      	mov	r2, r3
 8019b98:	8abb      	ldrh	r3, [r7, #20]
 8019b9a:	4293      	cmp	r3, r2
 8019b9c:	d002      	beq.n	8019ba4 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8019b9e:	f06f 0301 	mvn.w	r3, #1
 8019ba2:	e0c8      	b.n	8019d36 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8019ba4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019ba8:	2b04      	cmp	r3, #4
 8019baa:	d933      	bls.n	8019c14 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8019bac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019bb0:	f003 0303 	and.w	r3, r3, #3
 8019bb4:	b2db      	uxtb	r3, r3
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d009      	beq.n	8019bce <dhcp_parse_reply+0x412>
 8019bba:	4b61      	ldr	r3, [pc, #388]	@ (8019d40 <dhcp_parse_reply+0x584>)
 8019bbc:	f240 6281 	movw	r2, #1665	@ 0x681
 8019bc0:	4964      	ldr	r1, [pc, #400]	@ (8019d54 <dhcp_parse_reply+0x598>)
 8019bc2:	4861      	ldr	r0, [pc, #388]	@ (8019d48 <dhcp_parse_reply+0x58c>)
 8019bc4:	f003 fbfe 	bl	801d3c4 <iprintf>
 8019bc8:	f06f 0305 	mvn.w	r3, #5
 8019bcc:	e0b3      	b.n	8019d36 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8019bce:	4a60      	ldr	r2, [pc, #384]	@ (8019d50 <dhcp_parse_reply+0x594>)
 8019bd0:	6a3b      	ldr	r3, [r7, #32]
 8019bd2:	4413      	add	r3, r2
 8019bd4:	2201      	movs	r2, #1
 8019bd6:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8019bd8:	68bb      	ldr	r3, [r7, #8]
 8019bda:	4618      	mov	r0, r3
 8019bdc:	f7f6 fd53 	bl	8010686 <lwip_htonl>
 8019be0:	4602      	mov	r2, r0
 8019be2:	495d      	ldr	r1, [pc, #372]	@ (8019d58 <dhcp_parse_reply+0x59c>)
 8019be4:	6a3b      	ldr	r3, [r7, #32]
 8019be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8019bea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019bee:	3b04      	subs	r3, #4
 8019bf0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8019bf4:	8bfb      	ldrh	r3, [r7, #30]
 8019bf6:	3304      	adds	r3, #4
 8019bf8:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8019bfa:	8a7a      	ldrh	r2, [r7, #18]
 8019bfc:	8bfb      	ldrh	r3, [r7, #30]
 8019bfe:	429a      	cmp	r2, r3
 8019c00:	d202      	bcs.n	8019c08 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8019c02:	f06f 0301 	mvn.w	r3, #1
 8019c06:	e096      	b.n	8019d36 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8019c08:	8a7b      	ldrh	r3, [r7, #18]
 8019c0a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8019c0c:	6a3b      	ldr	r3, [r7, #32]
 8019c0e:	3301      	adds	r3, #1
 8019c10:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8019c12:	e79e      	b.n	8019b52 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8019c14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019c18:	2b04      	cmp	r3, #4
 8019c1a:	d106      	bne.n	8019c2a <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8019c1c:	68bb      	ldr	r3, [r7, #8]
 8019c1e:	4618      	mov	r0, r3
 8019c20:	f7f6 fd31 	bl	8010686 <lwip_htonl>
 8019c24:	4603      	mov	r3, r0
 8019c26:	60bb      	str	r3, [r7, #8]
 8019c28:	e011      	b.n	8019c4e <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8019c2a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019c2e:	2b01      	cmp	r3, #1
 8019c30:	d009      	beq.n	8019c46 <dhcp_parse_reply+0x48a>
 8019c32:	4b43      	ldr	r3, [pc, #268]	@ (8019d40 <dhcp_parse_reply+0x584>)
 8019c34:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8019c38:	4948      	ldr	r1, [pc, #288]	@ (8019d5c <dhcp_parse_reply+0x5a0>)
 8019c3a:	4843      	ldr	r0, [pc, #268]	@ (8019d48 <dhcp_parse_reply+0x58c>)
 8019c3c:	f003 fbc2 	bl	801d3c4 <iprintf>
 8019c40:	f06f 0305 	mvn.w	r3, #5
 8019c44:	e077      	b.n	8019d36 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8019c46:	f107 0308 	add.w	r3, r7, #8
 8019c4a:	781b      	ldrb	r3, [r3, #0]
 8019c4c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8019c4e:	4a40      	ldr	r2, [pc, #256]	@ (8019d50 <dhcp_parse_reply+0x594>)
 8019c50:	6a3b      	ldr	r3, [r7, #32]
 8019c52:	4413      	add	r3, r2
 8019c54:	2201      	movs	r2, #1
 8019c56:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8019c58:	68ba      	ldr	r2, [r7, #8]
 8019c5a:	493f      	ldr	r1, [pc, #252]	@ (8019d58 <dhcp_parse_reply+0x59c>)
 8019c5c:	6a3b      	ldr	r3, [r7, #32]
 8019c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8019c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c64:	895b      	ldrh	r3, [r3, #10]
 8019c66:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019c68:	429a      	cmp	r2, r3
 8019c6a:	d324      	bcc.n	8019cb6 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8019c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c6e:	895b      	ldrh	r3, [r3, #10]
 8019c70:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019c72:	1ad3      	subs	r3, r2, r3
 8019c74:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8019c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c78:	895b      	ldrh	r3, [r3, #10]
 8019c7a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8019c7c:	1ad3      	subs	r3, r2, r3
 8019c7e:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 8019c80:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019c82:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8019c84:	429a      	cmp	r2, r3
 8019c86:	d213      	bcs.n	8019cb0 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8019c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c8a:	681b      	ldr	r3, [r3, #0]
 8019c8c:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8019c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d109      	bne.n	8019ca8 <dhcp_parse_reply+0x4ec>
 8019c94:	4b2a      	ldr	r3, [pc, #168]	@ (8019d40 <dhcp_parse_reply+0x584>)
 8019c96:	f240 629d 	movw	r2, #1693	@ 0x69d
 8019c9a:	4931      	ldr	r1, [pc, #196]	@ (8019d60 <dhcp_parse_reply+0x5a4>)
 8019c9c:	482a      	ldr	r0, [pc, #168]	@ (8019d48 <dhcp_parse_reply+0x58c>)
 8019c9e:	f003 fb91 	bl	801d3c4 <iprintf>
 8019ca2:	f06f 0305 	mvn.w	r3, #5
 8019ca6:	e046      	b.n	8019d36 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8019ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019caa:	685b      	ldr	r3, [r3, #4]
 8019cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019cae:	e002      	b.n	8019cb6 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8019cb0:	f06f 0301 	mvn.w	r3, #1
 8019cb4:	e03f      	b.n	8019d36 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8019cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d00a      	beq.n	8019cd2 <dhcp_parse_reply+0x516>
 8019cbc:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019cbe:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8019cc0:	429a      	cmp	r2, r3
 8019cc2:	d206      	bcs.n	8019cd2 <dhcp_parse_reply+0x516>
 8019cc4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019cc6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019cc8:	4413      	add	r3, r2
 8019cca:	781b      	ldrb	r3, [r3, #0]
 8019ccc:	2bff      	cmp	r3, #255	@ 0xff
 8019cce:	f47f adb8 	bne.w	8019842 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8019cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8019d50 <dhcp_parse_reply+0x594>)
 8019cd4:	781b      	ldrb	r3, [r3, #0]
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	d018      	beq.n	8019d0c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8019cda:	4b1f      	ldr	r3, [pc, #124]	@ (8019d58 <dhcp_parse_reply+0x59c>)
 8019cdc:	681b      	ldr	r3, [r3, #0]
 8019cde:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8019ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8019d50 <dhcp_parse_reply+0x594>)
 8019ce2:	2200      	movs	r2, #0
 8019ce4:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8019ce6:	68fb      	ldr	r3, [r7, #12]
 8019ce8:	2b01      	cmp	r3, #1
 8019cea:	d102      	bne.n	8019cf2 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8019cec:	2301      	movs	r3, #1
 8019cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019cf0:	e00c      	b.n	8019d0c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	2b02      	cmp	r3, #2
 8019cf6:	d102      	bne.n	8019cfe <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8019cf8:	2301      	movs	r3, #1
 8019cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019cfc:	e006      	b.n	8019d0c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	2b03      	cmp	r3, #3
 8019d02:	d103      	bne.n	8019d0c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8019d04:	2301      	movs	r3, #1
 8019d06:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8019d08:	2301      	movs	r3, #1
 8019d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8019d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	d006      	beq.n	8019d20 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8019d12:	2300      	movs	r3, #0
 8019d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 8019d16:	236c      	movs	r3, #108	@ 0x6c
 8019d18:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8019d1a:	23ec      	movs	r3, #236	@ 0xec
 8019d1c:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8019d1e:	e56a      	b.n	80197f6 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8019d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	d006      	beq.n	8019d34 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8019d26:	2300      	movs	r3, #0
 8019d28:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 8019d2a:	232c      	movs	r3, #44	@ 0x2c
 8019d2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8019d2e:	236c      	movs	r3, #108	@ 0x6c
 8019d30:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 8019d32:	e560      	b.n	80197f6 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8019d34:	2300      	movs	r3, #0
}
 8019d36:	4618      	mov	r0, r3
 8019d38:	3740      	adds	r7, #64	@ 0x40
 8019d3a:	46bd      	mov	sp, r7
 8019d3c:	bd80      	pop	{r7, pc}
 8019d3e:	bf00      	nop
 8019d40:	080219bc 	.word	0x080219bc
 8019d44:	08021c44 	.word	0x08021c44
 8019d48:	08021a1c 	.word	0x08021a1c
 8019d4c:	08021c88 	.word	0x08021c88
 8019d50:	2400ccb4 	.word	0x2400ccb4
 8019d54:	08021c9c 	.word	0x08021c9c
 8019d58:	2400cc94 	.word	0x2400cc94
 8019d5c:	08021cb4 	.word	0x08021cb4
 8019d60:	08021cc8 	.word	0x08021cc8

08019d64 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8019d64:	b580      	push	{r7, lr}
 8019d66:	b08a      	sub	sp, #40	@ 0x28
 8019d68:	af00      	add	r7, sp, #0
 8019d6a:	60f8      	str	r0, [r7, #12]
 8019d6c:	60b9      	str	r1, [r7, #8]
 8019d6e:	607a      	str	r2, [r7, #4]
 8019d70:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8019d72:	4b60      	ldr	r3, [pc, #384]	@ (8019ef4 <dhcp_recv+0x190>)
 8019d74:	685b      	ldr	r3, [r3, #4]
 8019d76:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019d78:	6a3b      	ldr	r3, [r7, #32]
 8019d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d7c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	685b      	ldr	r3, [r3, #4]
 8019d82:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8019d84:	69fb      	ldr	r3, [r7, #28]
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	f000 809d 	beq.w	8019ec6 <dhcp_recv+0x162>
 8019d8c:	69fb      	ldr	r3, [r7, #28]
 8019d8e:	791b      	ldrb	r3, [r3, #4]
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	f000 8098 	beq.w	8019ec6 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	895b      	ldrh	r3, [r3, #10]
 8019d9a:	2b2b      	cmp	r3, #43	@ 0x2b
 8019d9c:	f240 8095 	bls.w	8019eca <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8019da0:	69bb      	ldr	r3, [r7, #24]
 8019da2:	781b      	ldrb	r3, [r3, #0]
 8019da4:	2b02      	cmp	r3, #2
 8019da6:	f040 8092 	bne.w	8019ece <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8019daa:	2300      	movs	r3, #0
 8019dac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019db0:	e012      	b.n	8019dd8 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8019db2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019db6:	6a3a      	ldr	r2, [r7, #32]
 8019db8:	4413      	add	r3, r2
 8019dba:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8019dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019dc2:	69b9      	ldr	r1, [r7, #24]
 8019dc4:	440b      	add	r3, r1
 8019dc6:	7f1b      	ldrb	r3, [r3, #28]
 8019dc8:	429a      	cmp	r2, r3
 8019dca:	f040 8082 	bne.w	8019ed2 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8019dce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019dd2:	3301      	adds	r3, #1
 8019dd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019dd8:	6a3b      	ldr	r3, [r7, #32]
 8019dda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019dde:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019de2:	429a      	cmp	r2, r3
 8019de4:	d203      	bcs.n	8019dee <dhcp_recv+0x8a>
 8019de6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019dea:	2b05      	cmp	r3, #5
 8019dec:	d9e1      	bls.n	8019db2 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8019dee:	69bb      	ldr	r3, [r7, #24]
 8019df0:	685b      	ldr	r3, [r3, #4]
 8019df2:	4618      	mov	r0, r3
 8019df4:	f7f6 fc47 	bl	8010686 <lwip_htonl>
 8019df8:	4602      	mov	r2, r0
 8019dfa:	69fb      	ldr	r3, [r7, #28]
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	429a      	cmp	r2, r3
 8019e00:	d169      	bne.n	8019ed6 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8019e02:	69f9      	ldr	r1, [r7, #28]
 8019e04:	6878      	ldr	r0, [r7, #4]
 8019e06:	f7ff fcd9 	bl	80197bc <dhcp_parse_reply>
 8019e0a:	4603      	mov	r3, r0
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d164      	bne.n	8019eda <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8019e10:	4b39      	ldr	r3, [pc, #228]	@ (8019ef8 <dhcp_recv+0x194>)
 8019e12:	785b      	ldrb	r3, [r3, #1]
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	d062      	beq.n	8019ede <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	685b      	ldr	r3, [r3, #4]
 8019e1c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8019e1e:	4b37      	ldr	r3, [pc, #220]	@ (8019efc <dhcp_recv+0x198>)
 8019e20:	685b      	ldr	r3, [r3, #4]
 8019e22:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8019e24:	7cfb      	ldrb	r3, [r7, #19]
 8019e26:	2b05      	cmp	r3, #5
 8019e28:	d12a      	bne.n	8019e80 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8019e2a:	69fb      	ldr	r3, [r7, #28]
 8019e2c:	795b      	ldrb	r3, [r3, #5]
 8019e2e:	2b01      	cmp	r3, #1
 8019e30:	d112      	bne.n	8019e58 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8019e32:	6979      	ldr	r1, [r7, #20]
 8019e34:	6a38      	ldr	r0, [r7, #32]
 8019e36:	f7fe fe1d 	bl	8018a74 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8019e3a:	6a3b      	ldr	r3, [r7, #32]
 8019e3c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019e40:	f003 0308 	and.w	r3, r3, #8
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d003      	beq.n	8019e50 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8019e48:	6a38      	ldr	r0, [r7, #32]
 8019e4a:	f7fe fb8b 	bl	8018564 <dhcp_check>
 8019e4e:	e049      	b.n	8019ee4 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8019e50:	6a38      	ldr	r0, [r7, #32]
 8019e52:	f7ff f86d 	bl	8018f30 <dhcp_bind>
 8019e56:	e045      	b.n	8019ee4 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8019e58:	69fb      	ldr	r3, [r7, #28]
 8019e5a:	795b      	ldrb	r3, [r3, #5]
 8019e5c:	2b03      	cmp	r3, #3
 8019e5e:	d007      	beq.n	8019e70 <dhcp_recv+0x10c>
 8019e60:	69fb      	ldr	r3, [r7, #28]
 8019e62:	795b      	ldrb	r3, [r3, #5]
 8019e64:	2b04      	cmp	r3, #4
 8019e66:	d003      	beq.n	8019e70 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8019e68:	69fb      	ldr	r3, [r7, #28]
 8019e6a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8019e6c:	2b05      	cmp	r3, #5
 8019e6e:	d139      	bne.n	8019ee4 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8019e70:	6979      	ldr	r1, [r7, #20]
 8019e72:	6a38      	ldr	r0, [r7, #32]
 8019e74:	f7fe fdfe 	bl	8018a74 <dhcp_handle_ack>
      dhcp_bind(netif);
 8019e78:	6a38      	ldr	r0, [r7, #32]
 8019e7a:	f7ff f859 	bl	8018f30 <dhcp_bind>
 8019e7e:	e031      	b.n	8019ee4 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8019e80:	7cfb      	ldrb	r3, [r7, #19]
 8019e82:	2b06      	cmp	r3, #6
 8019e84:	d113      	bne.n	8019eae <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8019e86:	69fb      	ldr	r3, [r7, #28]
 8019e88:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8019e8a:	2b03      	cmp	r3, #3
 8019e8c:	d00b      	beq.n	8019ea6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8019e8e:	69fb      	ldr	r3, [r7, #28]
 8019e90:	795b      	ldrb	r3, [r3, #5]
 8019e92:	2b01      	cmp	r3, #1
 8019e94:	d007      	beq.n	8019ea6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8019e96:	69fb      	ldr	r3, [r7, #28]
 8019e98:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8019e9a:	2b04      	cmp	r3, #4
 8019e9c:	d003      	beq.n	8019ea6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8019e9e:	69fb      	ldr	r3, [r7, #28]
 8019ea0:	795b      	ldrb	r3, [r3, #5]
 8019ea2:	2b05      	cmp	r3, #5
 8019ea4:	d103      	bne.n	8019eae <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8019ea6:	6a38      	ldr	r0, [r7, #32]
 8019ea8:	f7fe fb42 	bl	8018530 <dhcp_handle_nak>
 8019eac:	e01a      	b.n	8019ee4 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8019eae:	7cfb      	ldrb	r3, [r7, #19]
 8019eb0:	2b02      	cmp	r3, #2
 8019eb2:	d116      	bne.n	8019ee2 <dhcp_recv+0x17e>
 8019eb4:	69fb      	ldr	r3, [r7, #28]
 8019eb6:	795b      	ldrb	r3, [r3, #5]
 8019eb8:	2b06      	cmp	r3, #6
 8019eba:	d112      	bne.n	8019ee2 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8019ebc:	6979      	ldr	r1, [r7, #20]
 8019ebe:	6a38      	ldr	r0, [r7, #32]
 8019ec0:	f7fe fb84 	bl	80185cc <dhcp_handle_offer>
 8019ec4:	e00e      	b.n	8019ee4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019ec6:	bf00      	nop
 8019ec8:	e00c      	b.n	8019ee4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019eca:	bf00      	nop
 8019ecc:	e00a      	b.n	8019ee4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019ece:	bf00      	nop
 8019ed0:	e008      	b.n	8019ee4 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8019ed2:	bf00      	nop
 8019ed4:	e006      	b.n	8019ee4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019ed6:	bf00      	nop
 8019ed8:	e004      	b.n	8019ee4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019eda:	bf00      	nop
 8019edc:	e002      	b.n	8019ee4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019ede:	bf00      	nop
 8019ee0:	e000      	b.n	8019ee4 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8019ee2:	bf00      	nop
  pbuf_free(p);
 8019ee4:	6878      	ldr	r0, [r7, #4]
 8019ee6:	f7f8 f86f 	bl	8011fc8 <pbuf_free>
}
 8019eea:	bf00      	nop
 8019eec:	3728      	adds	r7, #40	@ 0x28
 8019eee:	46bd      	mov	sp, r7
 8019ef0:	bd80      	pop	{r7, pc}
 8019ef2:	bf00      	nop
 8019ef4:	24009b14 	.word	0x24009b14
 8019ef8:	2400ccb4 	.word	0x2400ccb4
 8019efc:	2400cc94 	.word	0x2400cc94

08019f00 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8019f00:	b580      	push	{r7, lr}
 8019f02:	b088      	sub	sp, #32
 8019f04:	af00      	add	r7, sp, #0
 8019f06:	60f8      	str	r0, [r7, #12]
 8019f08:	60b9      	str	r1, [r7, #8]
 8019f0a:	603b      	str	r3, [r7, #0]
 8019f0c:	4613      	mov	r3, r2
 8019f0e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8019f10:	68fb      	ldr	r3, [r7, #12]
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d108      	bne.n	8019f28 <dhcp_create_msg+0x28>
 8019f16:	4b5f      	ldr	r3, [pc, #380]	@ (801a094 <dhcp_create_msg+0x194>)
 8019f18:	f240 7269 	movw	r2, #1897	@ 0x769
 8019f1c:	495e      	ldr	r1, [pc, #376]	@ (801a098 <dhcp_create_msg+0x198>)
 8019f1e:	485f      	ldr	r0, [pc, #380]	@ (801a09c <dhcp_create_msg+0x19c>)
 8019f20:	f003 fa50 	bl	801d3c4 <iprintf>
 8019f24:	2300      	movs	r3, #0
 8019f26:	e0b1      	b.n	801a08c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8019f28:	68bb      	ldr	r3, [r7, #8]
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d108      	bne.n	8019f40 <dhcp_create_msg+0x40>
 8019f2e:	4b59      	ldr	r3, [pc, #356]	@ (801a094 <dhcp_create_msg+0x194>)
 8019f30:	f240 726a 	movw	r2, #1898	@ 0x76a
 8019f34:	495a      	ldr	r1, [pc, #360]	@ (801a0a0 <dhcp_create_msg+0x1a0>)
 8019f36:	4859      	ldr	r0, [pc, #356]	@ (801a09c <dhcp_create_msg+0x19c>)
 8019f38:	f003 fa44 	bl	801d3c4 <iprintf>
 8019f3c:	2300      	movs	r3, #0
 8019f3e:	e0a5      	b.n	801a08c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8019f40:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019f44:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8019f48:	2036      	movs	r0, #54	@ 0x36
 8019f4a:	f7f7 fd59 	bl	8011a00 <pbuf_alloc>
 8019f4e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8019f50:	69bb      	ldr	r3, [r7, #24]
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d101      	bne.n	8019f5a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8019f56:	2300      	movs	r3, #0
 8019f58:	e098      	b.n	801a08c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8019f5a:	69bb      	ldr	r3, [r7, #24]
 8019f5c:	895b      	ldrh	r3, [r3, #10]
 8019f5e:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8019f62:	d206      	bcs.n	8019f72 <dhcp_create_msg+0x72>
 8019f64:	4b4b      	ldr	r3, [pc, #300]	@ (801a094 <dhcp_create_msg+0x194>)
 8019f66:	f240 7271 	movw	r2, #1905	@ 0x771
 8019f6a:	494e      	ldr	r1, [pc, #312]	@ (801a0a4 <dhcp_create_msg+0x1a4>)
 8019f6c:	484b      	ldr	r0, [pc, #300]	@ (801a09c <dhcp_create_msg+0x19c>)
 8019f6e:	f003 fa29 	bl	801d3c4 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8019f72:	79fb      	ldrb	r3, [r7, #7]
 8019f74:	2b03      	cmp	r3, #3
 8019f76:	d103      	bne.n	8019f80 <dhcp_create_msg+0x80>
 8019f78:	68bb      	ldr	r3, [r7, #8]
 8019f7a:	795b      	ldrb	r3, [r3, #5]
 8019f7c:	2b03      	cmp	r3, #3
 8019f7e:	d10d      	bne.n	8019f9c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8019f80:	68bb      	ldr	r3, [r7, #8]
 8019f82:	799b      	ldrb	r3, [r3, #6]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d105      	bne.n	8019f94 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8019f88:	f002 fce4 	bl	801c954 <rand>
 8019f8c:	4603      	mov	r3, r0
 8019f8e:	461a      	mov	r2, r3
 8019f90:	4b45      	ldr	r3, [pc, #276]	@ (801a0a8 <dhcp_create_msg+0x1a8>)
 8019f92:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8019f94:	4b44      	ldr	r3, [pc, #272]	@ (801a0a8 <dhcp_create_msg+0x1a8>)
 8019f96:	681a      	ldr	r2, [r3, #0]
 8019f98:	68bb      	ldr	r3, [r7, #8]
 8019f9a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8019f9c:	69bb      	ldr	r3, [r7, #24]
 8019f9e:	685b      	ldr	r3, [r3, #4]
 8019fa0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8019fa2:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8019fa6:	2100      	movs	r1, #0
 8019fa8:	6978      	ldr	r0, [r7, #20]
 8019faa:	f003 fb63 	bl	801d674 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8019fae:	697b      	ldr	r3, [r7, #20]
 8019fb0:	2201      	movs	r2, #1
 8019fb2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8019fb4:	697b      	ldr	r3, [r7, #20]
 8019fb6:	2201      	movs	r2, #1
 8019fb8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8019fba:	68fb      	ldr	r3, [r7, #12]
 8019fbc:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8019fc0:	697b      	ldr	r3, [r7, #20]
 8019fc2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8019fc4:	68bb      	ldr	r3, [r7, #8]
 8019fc6:	681b      	ldr	r3, [r3, #0]
 8019fc8:	4618      	mov	r0, r3
 8019fca:	f7f6 fb5c 	bl	8010686 <lwip_htonl>
 8019fce:	4602      	mov	r2, r0
 8019fd0:	697b      	ldr	r3, [r7, #20]
 8019fd2:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8019fd4:	79fb      	ldrb	r3, [r7, #7]
 8019fd6:	2b08      	cmp	r3, #8
 8019fd8:	d010      	beq.n	8019ffc <dhcp_create_msg+0xfc>
 8019fda:	79fb      	ldrb	r3, [r7, #7]
 8019fdc:	2b04      	cmp	r3, #4
 8019fde:	d00d      	beq.n	8019ffc <dhcp_create_msg+0xfc>
 8019fe0:	79fb      	ldrb	r3, [r7, #7]
 8019fe2:	2b07      	cmp	r3, #7
 8019fe4:	d00a      	beq.n	8019ffc <dhcp_create_msg+0xfc>
 8019fe6:	79fb      	ldrb	r3, [r7, #7]
 8019fe8:	2b03      	cmp	r3, #3
 8019fea:	d10c      	bne.n	801a006 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8019fec:	68bb      	ldr	r3, [r7, #8]
 8019fee:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8019ff0:	2b05      	cmp	r3, #5
 8019ff2:	d003      	beq.n	8019ffc <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8019ff4:	68bb      	ldr	r3, [r7, #8]
 8019ff6:	795b      	ldrb	r3, [r3, #5]
 8019ff8:	2b04      	cmp	r3, #4
 8019ffa:	d104      	bne.n	801a006 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8019ffc:	68fb      	ldr	r3, [r7, #12]
 8019ffe:	3304      	adds	r3, #4
 801a000:	681a      	ldr	r2, [r3, #0]
 801a002:	697b      	ldr	r3, [r7, #20]
 801a004:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a006:	2300      	movs	r3, #0
 801a008:	83fb      	strh	r3, [r7, #30]
 801a00a:	e00c      	b.n	801a026 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801a00c:	8bfa      	ldrh	r2, [r7, #30]
 801a00e:	8bfb      	ldrh	r3, [r7, #30]
 801a010:	68f9      	ldr	r1, [r7, #12]
 801a012:	440a      	add	r2, r1
 801a014:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 801a018:	697a      	ldr	r2, [r7, #20]
 801a01a:	4413      	add	r3, r2
 801a01c:	460a      	mov	r2, r1
 801a01e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a020:	8bfb      	ldrh	r3, [r7, #30]
 801a022:	3301      	adds	r3, #1
 801a024:	83fb      	strh	r3, [r7, #30]
 801a026:	8bfb      	ldrh	r3, [r7, #30]
 801a028:	2b05      	cmp	r3, #5
 801a02a:	d9ef      	bls.n	801a00c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801a02c:	697b      	ldr	r3, [r7, #20]
 801a02e:	2200      	movs	r2, #0
 801a030:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801a034:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801a038:	2200      	movs	r2, #0
 801a03a:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801a03e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801a042:	2200      	movs	r2, #0
 801a044:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 801a048:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 801a04c:	2200      	movs	r2, #0
 801a04e:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801a052:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801a056:	697b      	ldr	r3, [r7, #20]
 801a058:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a05c:	2301      	movs	r3, #1
 801a05e:	2235      	movs	r2, #53	@ 0x35
 801a060:	2000      	movs	r0, #0
 801a062:	f7ff fadb 	bl	801961c <dhcp_option>
 801a066:	4603      	mov	r3, r0
 801a068:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801a06a:	697b      	ldr	r3, [r7, #20]
 801a06c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a070:	79fa      	ldrb	r2, [r7, #7]
 801a072:	8a7b      	ldrh	r3, [r7, #18]
 801a074:	4618      	mov	r0, r3
 801a076:	f7ff fb05 	bl	8019684 <dhcp_option_byte>
 801a07a:	4603      	mov	r3, r0
 801a07c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801a07e:	683b      	ldr	r3, [r7, #0]
 801a080:	2b00      	cmp	r3, #0
 801a082:	d002      	beq.n	801a08a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801a084:	683b      	ldr	r3, [r7, #0]
 801a086:	8a7a      	ldrh	r2, [r7, #18]
 801a088:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801a08a:	69bb      	ldr	r3, [r7, #24]
}
 801a08c:	4618      	mov	r0, r3
 801a08e:	3720      	adds	r7, #32
 801a090:	46bd      	mov	sp, r7
 801a092:	bd80      	pop	{r7, pc}
 801a094:	080219bc 	.word	0x080219bc
 801a098:	08021cdc 	.word	0x08021cdc
 801a09c:	08021a1c 	.word	0x08021a1c
 801a0a0:	08021cfc 	.word	0x08021cfc
 801a0a4:	08021d1c 	.word	0x08021d1c
 801a0a8:	2400ccc4 	.word	0x2400ccc4

0801a0ac <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801a0ac:	b580      	push	{r7, lr}
 801a0ae:	b084      	sub	sp, #16
 801a0b0:	af00      	add	r7, sp, #0
 801a0b2:	4603      	mov	r3, r0
 801a0b4:	60b9      	str	r1, [r7, #8]
 801a0b6:	607a      	str	r2, [r7, #4]
 801a0b8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801a0ba:	89fb      	ldrh	r3, [r7, #14]
 801a0bc:	1c5a      	adds	r2, r3, #1
 801a0be:	81fa      	strh	r2, [r7, #14]
 801a0c0:	461a      	mov	r2, r3
 801a0c2:	68bb      	ldr	r3, [r7, #8]
 801a0c4:	4413      	add	r3, r2
 801a0c6:	22ff      	movs	r2, #255	@ 0xff
 801a0c8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801a0ca:	e007      	b.n	801a0dc <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801a0cc:	89fb      	ldrh	r3, [r7, #14]
 801a0ce:	1c5a      	adds	r2, r3, #1
 801a0d0:	81fa      	strh	r2, [r7, #14]
 801a0d2:	461a      	mov	r2, r3
 801a0d4:	68bb      	ldr	r3, [r7, #8]
 801a0d6:	4413      	add	r3, r2
 801a0d8:	2200      	movs	r2, #0
 801a0da:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801a0dc:	89fb      	ldrh	r3, [r7, #14]
 801a0de:	2b43      	cmp	r3, #67	@ 0x43
 801a0e0:	d904      	bls.n	801a0ec <dhcp_option_trailer+0x40>
 801a0e2:	89fb      	ldrh	r3, [r7, #14]
 801a0e4:	f003 0303 	and.w	r3, r3, #3
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d002      	beq.n	801a0f2 <dhcp_option_trailer+0x46>
 801a0ec:	89fb      	ldrh	r3, [r7, #14]
 801a0ee:	2b43      	cmp	r3, #67	@ 0x43
 801a0f0:	d9ec      	bls.n	801a0cc <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801a0f2:	89fb      	ldrh	r3, [r7, #14]
 801a0f4:	33f0      	adds	r3, #240	@ 0xf0
 801a0f6:	b29b      	uxth	r3, r3
 801a0f8:	4619      	mov	r1, r3
 801a0fa:	6878      	ldr	r0, [r7, #4]
 801a0fc:	f7f7 fdde 	bl	8011cbc <pbuf_realloc>
}
 801a100:	bf00      	nop
 801a102:	3710      	adds	r7, #16
 801a104:	46bd      	mov	sp, r7
 801a106:	bd80      	pop	{r7, pc}

0801a108 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801a108:	b480      	push	{r7}
 801a10a:	b085      	sub	sp, #20
 801a10c:	af00      	add	r7, sp, #0
 801a10e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	2b00      	cmp	r3, #0
 801a114:	d017      	beq.n	801a146 <dhcp_supplied_address+0x3e>
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	d013      	beq.n	801a146 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a122:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801a124:	68fb      	ldr	r3, [r7, #12]
 801a126:	795b      	ldrb	r3, [r3, #5]
 801a128:	2b0a      	cmp	r3, #10
 801a12a:	d007      	beq.n	801a13c <dhcp_supplied_address+0x34>
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	795b      	ldrb	r3, [r3, #5]
 801a130:	2b05      	cmp	r3, #5
 801a132:	d003      	beq.n	801a13c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801a134:	68fb      	ldr	r3, [r7, #12]
 801a136:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801a138:	2b04      	cmp	r3, #4
 801a13a:	d101      	bne.n	801a140 <dhcp_supplied_address+0x38>
 801a13c:	2301      	movs	r3, #1
 801a13e:	e000      	b.n	801a142 <dhcp_supplied_address+0x3a>
 801a140:	2300      	movs	r3, #0
 801a142:	b2db      	uxtb	r3, r3
 801a144:	e000      	b.n	801a148 <dhcp_supplied_address+0x40>
  }
  return 0;
 801a146:	2300      	movs	r3, #0
}
 801a148:	4618      	mov	r0, r3
 801a14a:	3714      	adds	r7, #20
 801a14c:	46bd      	mov	sp, r7
 801a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a152:	4770      	bx	lr

0801a154 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801a154:	b580      	push	{r7, lr}
 801a156:	b082      	sub	sp, #8
 801a158:	af00      	add	r7, sp, #0
 801a15a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801a15c:	4915      	ldr	r1, [pc, #84]	@ (801a1b4 <etharp_free_entry+0x60>)
 801a15e:	687a      	ldr	r2, [r7, #4]
 801a160:	4613      	mov	r3, r2
 801a162:	005b      	lsls	r3, r3, #1
 801a164:	4413      	add	r3, r2
 801a166:	00db      	lsls	r3, r3, #3
 801a168:	440b      	add	r3, r1
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d013      	beq.n	801a198 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801a170:	4910      	ldr	r1, [pc, #64]	@ (801a1b4 <etharp_free_entry+0x60>)
 801a172:	687a      	ldr	r2, [r7, #4]
 801a174:	4613      	mov	r3, r2
 801a176:	005b      	lsls	r3, r3, #1
 801a178:	4413      	add	r3, r2
 801a17a:	00db      	lsls	r3, r3, #3
 801a17c:	440b      	add	r3, r1
 801a17e:	681b      	ldr	r3, [r3, #0]
 801a180:	4618      	mov	r0, r3
 801a182:	f7f7 ff21 	bl	8011fc8 <pbuf_free>
    arp_table[i].q = NULL;
 801a186:	490b      	ldr	r1, [pc, #44]	@ (801a1b4 <etharp_free_entry+0x60>)
 801a188:	687a      	ldr	r2, [r7, #4]
 801a18a:	4613      	mov	r3, r2
 801a18c:	005b      	lsls	r3, r3, #1
 801a18e:	4413      	add	r3, r2
 801a190:	00db      	lsls	r3, r3, #3
 801a192:	440b      	add	r3, r1
 801a194:	2200      	movs	r2, #0
 801a196:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801a198:	4906      	ldr	r1, [pc, #24]	@ (801a1b4 <etharp_free_entry+0x60>)
 801a19a:	687a      	ldr	r2, [r7, #4]
 801a19c:	4613      	mov	r3, r2
 801a19e:	005b      	lsls	r3, r3, #1
 801a1a0:	4413      	add	r3, r2
 801a1a2:	00db      	lsls	r3, r3, #3
 801a1a4:	440b      	add	r3, r1
 801a1a6:	3314      	adds	r3, #20
 801a1a8:	2200      	movs	r2, #0
 801a1aa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801a1ac:	bf00      	nop
 801a1ae:	3708      	adds	r7, #8
 801a1b0:	46bd      	mov	sp, r7
 801a1b2:	bd80      	pop	{r7, pc}
 801a1b4:	2400ccc8 	.word	0x2400ccc8

0801a1b8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801a1b8:	b580      	push	{r7, lr}
 801a1ba:	b082      	sub	sp, #8
 801a1bc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a1be:	2300      	movs	r3, #0
 801a1c0:	607b      	str	r3, [r7, #4]
 801a1c2:	e096      	b.n	801a2f2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801a1c4:	494f      	ldr	r1, [pc, #316]	@ (801a304 <etharp_tmr+0x14c>)
 801a1c6:	687a      	ldr	r2, [r7, #4]
 801a1c8:	4613      	mov	r3, r2
 801a1ca:	005b      	lsls	r3, r3, #1
 801a1cc:	4413      	add	r3, r2
 801a1ce:	00db      	lsls	r3, r3, #3
 801a1d0:	440b      	add	r3, r1
 801a1d2:	3314      	adds	r3, #20
 801a1d4:	781b      	ldrb	r3, [r3, #0]
 801a1d6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801a1d8:	78fb      	ldrb	r3, [r7, #3]
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	f000 8086 	beq.w	801a2ec <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801a1e0:	4948      	ldr	r1, [pc, #288]	@ (801a304 <etharp_tmr+0x14c>)
 801a1e2:	687a      	ldr	r2, [r7, #4]
 801a1e4:	4613      	mov	r3, r2
 801a1e6:	005b      	lsls	r3, r3, #1
 801a1e8:	4413      	add	r3, r2
 801a1ea:	00db      	lsls	r3, r3, #3
 801a1ec:	440b      	add	r3, r1
 801a1ee:	3312      	adds	r3, #18
 801a1f0:	881b      	ldrh	r3, [r3, #0]
 801a1f2:	3301      	adds	r3, #1
 801a1f4:	b298      	uxth	r0, r3
 801a1f6:	4943      	ldr	r1, [pc, #268]	@ (801a304 <etharp_tmr+0x14c>)
 801a1f8:	687a      	ldr	r2, [r7, #4]
 801a1fa:	4613      	mov	r3, r2
 801a1fc:	005b      	lsls	r3, r3, #1
 801a1fe:	4413      	add	r3, r2
 801a200:	00db      	lsls	r3, r3, #3
 801a202:	440b      	add	r3, r1
 801a204:	3312      	adds	r3, #18
 801a206:	4602      	mov	r2, r0
 801a208:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a20a:	493e      	ldr	r1, [pc, #248]	@ (801a304 <etharp_tmr+0x14c>)
 801a20c:	687a      	ldr	r2, [r7, #4]
 801a20e:	4613      	mov	r3, r2
 801a210:	005b      	lsls	r3, r3, #1
 801a212:	4413      	add	r3, r2
 801a214:	00db      	lsls	r3, r3, #3
 801a216:	440b      	add	r3, r1
 801a218:	3312      	adds	r3, #18
 801a21a:	881b      	ldrh	r3, [r3, #0]
 801a21c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801a220:	d215      	bcs.n	801a24e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a222:	4938      	ldr	r1, [pc, #224]	@ (801a304 <etharp_tmr+0x14c>)
 801a224:	687a      	ldr	r2, [r7, #4]
 801a226:	4613      	mov	r3, r2
 801a228:	005b      	lsls	r3, r3, #1
 801a22a:	4413      	add	r3, r2
 801a22c:	00db      	lsls	r3, r3, #3
 801a22e:	440b      	add	r3, r1
 801a230:	3314      	adds	r3, #20
 801a232:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a234:	2b01      	cmp	r3, #1
 801a236:	d10e      	bne.n	801a256 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801a238:	4932      	ldr	r1, [pc, #200]	@ (801a304 <etharp_tmr+0x14c>)
 801a23a:	687a      	ldr	r2, [r7, #4]
 801a23c:	4613      	mov	r3, r2
 801a23e:	005b      	lsls	r3, r3, #1
 801a240:	4413      	add	r3, r2
 801a242:	00db      	lsls	r3, r3, #3
 801a244:	440b      	add	r3, r1
 801a246:	3312      	adds	r3, #18
 801a248:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a24a:	2b04      	cmp	r3, #4
 801a24c:	d903      	bls.n	801a256 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801a24e:	6878      	ldr	r0, [r7, #4]
 801a250:	f7ff ff80 	bl	801a154 <etharp_free_entry>
 801a254:	e04a      	b.n	801a2ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801a256:	492b      	ldr	r1, [pc, #172]	@ (801a304 <etharp_tmr+0x14c>)
 801a258:	687a      	ldr	r2, [r7, #4]
 801a25a:	4613      	mov	r3, r2
 801a25c:	005b      	lsls	r3, r3, #1
 801a25e:	4413      	add	r3, r2
 801a260:	00db      	lsls	r3, r3, #3
 801a262:	440b      	add	r3, r1
 801a264:	3314      	adds	r3, #20
 801a266:	781b      	ldrb	r3, [r3, #0]
 801a268:	2b03      	cmp	r3, #3
 801a26a:	d10a      	bne.n	801a282 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801a26c:	4925      	ldr	r1, [pc, #148]	@ (801a304 <etharp_tmr+0x14c>)
 801a26e:	687a      	ldr	r2, [r7, #4]
 801a270:	4613      	mov	r3, r2
 801a272:	005b      	lsls	r3, r3, #1
 801a274:	4413      	add	r3, r2
 801a276:	00db      	lsls	r3, r3, #3
 801a278:	440b      	add	r3, r1
 801a27a:	3314      	adds	r3, #20
 801a27c:	2204      	movs	r2, #4
 801a27e:	701a      	strb	r2, [r3, #0]
 801a280:	e034      	b.n	801a2ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801a282:	4920      	ldr	r1, [pc, #128]	@ (801a304 <etharp_tmr+0x14c>)
 801a284:	687a      	ldr	r2, [r7, #4]
 801a286:	4613      	mov	r3, r2
 801a288:	005b      	lsls	r3, r3, #1
 801a28a:	4413      	add	r3, r2
 801a28c:	00db      	lsls	r3, r3, #3
 801a28e:	440b      	add	r3, r1
 801a290:	3314      	adds	r3, #20
 801a292:	781b      	ldrb	r3, [r3, #0]
 801a294:	2b04      	cmp	r3, #4
 801a296:	d10a      	bne.n	801a2ae <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801a298:	491a      	ldr	r1, [pc, #104]	@ (801a304 <etharp_tmr+0x14c>)
 801a29a:	687a      	ldr	r2, [r7, #4]
 801a29c:	4613      	mov	r3, r2
 801a29e:	005b      	lsls	r3, r3, #1
 801a2a0:	4413      	add	r3, r2
 801a2a2:	00db      	lsls	r3, r3, #3
 801a2a4:	440b      	add	r3, r1
 801a2a6:	3314      	adds	r3, #20
 801a2a8:	2202      	movs	r2, #2
 801a2aa:	701a      	strb	r2, [r3, #0]
 801a2ac:	e01e      	b.n	801a2ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a2ae:	4915      	ldr	r1, [pc, #84]	@ (801a304 <etharp_tmr+0x14c>)
 801a2b0:	687a      	ldr	r2, [r7, #4]
 801a2b2:	4613      	mov	r3, r2
 801a2b4:	005b      	lsls	r3, r3, #1
 801a2b6:	4413      	add	r3, r2
 801a2b8:	00db      	lsls	r3, r3, #3
 801a2ba:	440b      	add	r3, r1
 801a2bc:	3314      	adds	r3, #20
 801a2be:	781b      	ldrb	r3, [r3, #0]
 801a2c0:	2b01      	cmp	r3, #1
 801a2c2:	d113      	bne.n	801a2ec <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801a2c4:	490f      	ldr	r1, [pc, #60]	@ (801a304 <etharp_tmr+0x14c>)
 801a2c6:	687a      	ldr	r2, [r7, #4]
 801a2c8:	4613      	mov	r3, r2
 801a2ca:	005b      	lsls	r3, r3, #1
 801a2cc:	4413      	add	r3, r2
 801a2ce:	00db      	lsls	r3, r3, #3
 801a2d0:	440b      	add	r3, r1
 801a2d2:	3308      	adds	r3, #8
 801a2d4:	6818      	ldr	r0, [r3, #0]
 801a2d6:	687a      	ldr	r2, [r7, #4]
 801a2d8:	4613      	mov	r3, r2
 801a2da:	005b      	lsls	r3, r3, #1
 801a2dc:	4413      	add	r3, r2
 801a2de:	00db      	lsls	r3, r3, #3
 801a2e0:	4a08      	ldr	r2, [pc, #32]	@ (801a304 <etharp_tmr+0x14c>)
 801a2e2:	4413      	add	r3, r2
 801a2e4:	3304      	adds	r3, #4
 801a2e6:	4619      	mov	r1, r3
 801a2e8:	f000 fe72 	bl	801afd0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	3301      	adds	r3, #1
 801a2f0:	607b      	str	r3, [r7, #4]
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	2b09      	cmp	r3, #9
 801a2f6:	f77f af65 	ble.w	801a1c4 <etharp_tmr+0xc>
      }
    }
  }
}
 801a2fa:	bf00      	nop
 801a2fc:	bf00      	nop
 801a2fe:	3708      	adds	r7, #8
 801a300:	46bd      	mov	sp, r7
 801a302:	bd80      	pop	{r7, pc}
 801a304:	2400ccc8 	.word	0x2400ccc8

0801a308 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801a308:	b580      	push	{r7, lr}
 801a30a:	b08a      	sub	sp, #40	@ 0x28
 801a30c:	af00      	add	r7, sp, #0
 801a30e:	60f8      	str	r0, [r7, #12]
 801a310:	460b      	mov	r3, r1
 801a312:	607a      	str	r2, [r7, #4]
 801a314:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801a316:	230a      	movs	r3, #10
 801a318:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801a31a:	230a      	movs	r3, #10
 801a31c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801a31e:	230a      	movs	r3, #10
 801a320:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801a322:	2300      	movs	r3, #0
 801a324:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801a326:	230a      	movs	r3, #10
 801a328:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801a32a:	2300      	movs	r3, #0
 801a32c:	83bb      	strh	r3, [r7, #28]
 801a32e:	2300      	movs	r3, #0
 801a330:	837b      	strh	r3, [r7, #26]
 801a332:	2300      	movs	r3, #0
 801a334:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a336:	2300      	movs	r3, #0
 801a338:	843b      	strh	r3, [r7, #32]
 801a33a:	e0ae      	b.n	801a49a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801a33c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a340:	49a6      	ldr	r1, [pc, #664]	@ (801a5dc <etharp_find_entry+0x2d4>)
 801a342:	4613      	mov	r3, r2
 801a344:	005b      	lsls	r3, r3, #1
 801a346:	4413      	add	r3, r2
 801a348:	00db      	lsls	r3, r3, #3
 801a34a:	440b      	add	r3, r1
 801a34c:	3314      	adds	r3, #20
 801a34e:	781b      	ldrb	r3, [r3, #0]
 801a350:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801a352:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a356:	2b0a      	cmp	r3, #10
 801a358:	d105      	bne.n	801a366 <etharp_find_entry+0x5e>
 801a35a:	7dfb      	ldrb	r3, [r7, #23]
 801a35c:	2b00      	cmp	r3, #0
 801a35e:	d102      	bne.n	801a366 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801a360:	8c3b      	ldrh	r3, [r7, #32]
 801a362:	847b      	strh	r3, [r7, #34]	@ 0x22
 801a364:	e095      	b.n	801a492 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801a366:	7dfb      	ldrb	r3, [r7, #23]
 801a368:	2b00      	cmp	r3, #0
 801a36a:	f000 8092 	beq.w	801a492 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801a36e:	7dfb      	ldrb	r3, [r7, #23]
 801a370:	2b01      	cmp	r3, #1
 801a372:	d009      	beq.n	801a388 <etharp_find_entry+0x80>
 801a374:	7dfb      	ldrb	r3, [r7, #23]
 801a376:	2b01      	cmp	r3, #1
 801a378:	d806      	bhi.n	801a388 <etharp_find_entry+0x80>
 801a37a:	4b99      	ldr	r3, [pc, #612]	@ (801a5e0 <etharp_find_entry+0x2d8>)
 801a37c:	f240 1223 	movw	r2, #291	@ 0x123
 801a380:	4998      	ldr	r1, [pc, #608]	@ (801a5e4 <etharp_find_entry+0x2dc>)
 801a382:	4899      	ldr	r0, [pc, #612]	@ (801a5e8 <etharp_find_entry+0x2e0>)
 801a384:	f003 f81e 	bl	801d3c4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801a388:	68fb      	ldr	r3, [r7, #12]
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	d020      	beq.n	801a3d0 <etharp_find_entry+0xc8>
 801a38e:	68fb      	ldr	r3, [r7, #12]
 801a390:	6819      	ldr	r1, [r3, #0]
 801a392:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a396:	4891      	ldr	r0, [pc, #580]	@ (801a5dc <etharp_find_entry+0x2d4>)
 801a398:	4613      	mov	r3, r2
 801a39a:	005b      	lsls	r3, r3, #1
 801a39c:	4413      	add	r3, r2
 801a39e:	00db      	lsls	r3, r3, #3
 801a3a0:	4403      	add	r3, r0
 801a3a2:	3304      	adds	r3, #4
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	4299      	cmp	r1, r3
 801a3a8:	d112      	bne.n	801a3d0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	d00c      	beq.n	801a3ca <etharp_find_entry+0xc2>
 801a3b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3b4:	4989      	ldr	r1, [pc, #548]	@ (801a5dc <etharp_find_entry+0x2d4>)
 801a3b6:	4613      	mov	r3, r2
 801a3b8:	005b      	lsls	r3, r3, #1
 801a3ba:	4413      	add	r3, r2
 801a3bc:	00db      	lsls	r3, r3, #3
 801a3be:	440b      	add	r3, r1
 801a3c0:	3308      	adds	r3, #8
 801a3c2:	681b      	ldr	r3, [r3, #0]
 801a3c4:	687a      	ldr	r2, [r7, #4]
 801a3c6:	429a      	cmp	r2, r3
 801a3c8:	d102      	bne.n	801a3d0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801a3ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a3ce:	e100      	b.n	801a5d2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801a3d0:	7dfb      	ldrb	r3, [r7, #23]
 801a3d2:	2b01      	cmp	r3, #1
 801a3d4:	d140      	bne.n	801a458 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801a3d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3da:	4980      	ldr	r1, [pc, #512]	@ (801a5dc <etharp_find_entry+0x2d4>)
 801a3dc:	4613      	mov	r3, r2
 801a3de:	005b      	lsls	r3, r3, #1
 801a3e0:	4413      	add	r3, r2
 801a3e2:	00db      	lsls	r3, r3, #3
 801a3e4:	440b      	add	r3, r1
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d01a      	beq.n	801a422 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801a3ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3f0:	497a      	ldr	r1, [pc, #488]	@ (801a5dc <etharp_find_entry+0x2d4>)
 801a3f2:	4613      	mov	r3, r2
 801a3f4:	005b      	lsls	r3, r3, #1
 801a3f6:	4413      	add	r3, r2
 801a3f8:	00db      	lsls	r3, r3, #3
 801a3fa:	440b      	add	r3, r1
 801a3fc:	3312      	adds	r3, #18
 801a3fe:	881b      	ldrh	r3, [r3, #0]
 801a400:	8bba      	ldrh	r2, [r7, #28]
 801a402:	429a      	cmp	r2, r3
 801a404:	d845      	bhi.n	801a492 <etharp_find_entry+0x18a>
            old_queue = i;
 801a406:	8c3b      	ldrh	r3, [r7, #32]
 801a408:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801a40a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a40e:	4973      	ldr	r1, [pc, #460]	@ (801a5dc <etharp_find_entry+0x2d4>)
 801a410:	4613      	mov	r3, r2
 801a412:	005b      	lsls	r3, r3, #1
 801a414:	4413      	add	r3, r2
 801a416:	00db      	lsls	r3, r3, #3
 801a418:	440b      	add	r3, r1
 801a41a:	3312      	adds	r3, #18
 801a41c:	881b      	ldrh	r3, [r3, #0]
 801a41e:	83bb      	strh	r3, [r7, #28]
 801a420:	e037      	b.n	801a492 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801a422:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a426:	496d      	ldr	r1, [pc, #436]	@ (801a5dc <etharp_find_entry+0x2d4>)
 801a428:	4613      	mov	r3, r2
 801a42a:	005b      	lsls	r3, r3, #1
 801a42c:	4413      	add	r3, r2
 801a42e:	00db      	lsls	r3, r3, #3
 801a430:	440b      	add	r3, r1
 801a432:	3312      	adds	r3, #18
 801a434:	881b      	ldrh	r3, [r3, #0]
 801a436:	8b7a      	ldrh	r2, [r7, #26]
 801a438:	429a      	cmp	r2, r3
 801a43a:	d82a      	bhi.n	801a492 <etharp_find_entry+0x18a>
            old_pending = i;
 801a43c:	8c3b      	ldrh	r3, [r7, #32]
 801a43e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801a440:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a444:	4965      	ldr	r1, [pc, #404]	@ (801a5dc <etharp_find_entry+0x2d4>)
 801a446:	4613      	mov	r3, r2
 801a448:	005b      	lsls	r3, r3, #1
 801a44a:	4413      	add	r3, r2
 801a44c:	00db      	lsls	r3, r3, #3
 801a44e:	440b      	add	r3, r1
 801a450:	3312      	adds	r3, #18
 801a452:	881b      	ldrh	r3, [r3, #0]
 801a454:	837b      	strh	r3, [r7, #26]
 801a456:	e01c      	b.n	801a492 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801a458:	7dfb      	ldrb	r3, [r7, #23]
 801a45a:	2b01      	cmp	r3, #1
 801a45c:	d919      	bls.n	801a492 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801a45e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a462:	495e      	ldr	r1, [pc, #376]	@ (801a5dc <etharp_find_entry+0x2d4>)
 801a464:	4613      	mov	r3, r2
 801a466:	005b      	lsls	r3, r3, #1
 801a468:	4413      	add	r3, r2
 801a46a:	00db      	lsls	r3, r3, #3
 801a46c:	440b      	add	r3, r1
 801a46e:	3312      	adds	r3, #18
 801a470:	881b      	ldrh	r3, [r3, #0]
 801a472:	8b3a      	ldrh	r2, [r7, #24]
 801a474:	429a      	cmp	r2, r3
 801a476:	d80c      	bhi.n	801a492 <etharp_find_entry+0x18a>
            old_stable = i;
 801a478:	8c3b      	ldrh	r3, [r7, #32]
 801a47a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801a47c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a480:	4956      	ldr	r1, [pc, #344]	@ (801a5dc <etharp_find_entry+0x2d4>)
 801a482:	4613      	mov	r3, r2
 801a484:	005b      	lsls	r3, r3, #1
 801a486:	4413      	add	r3, r2
 801a488:	00db      	lsls	r3, r3, #3
 801a48a:	440b      	add	r3, r1
 801a48c:	3312      	adds	r3, #18
 801a48e:	881b      	ldrh	r3, [r3, #0]
 801a490:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a492:	8c3b      	ldrh	r3, [r7, #32]
 801a494:	3301      	adds	r3, #1
 801a496:	b29b      	uxth	r3, r3
 801a498:	843b      	strh	r3, [r7, #32]
 801a49a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a49e:	2b09      	cmp	r3, #9
 801a4a0:	f77f af4c 	ble.w	801a33c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801a4a4:	7afb      	ldrb	r3, [r7, #11]
 801a4a6:	f003 0302 	and.w	r3, r3, #2
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d108      	bne.n	801a4c0 <etharp_find_entry+0x1b8>
 801a4ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a4b2:	2b0a      	cmp	r3, #10
 801a4b4:	d107      	bne.n	801a4c6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801a4b6:	7afb      	ldrb	r3, [r7, #11]
 801a4b8:	f003 0301 	and.w	r3, r3, #1
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d102      	bne.n	801a4c6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801a4c0:	f04f 33ff 	mov.w	r3, #4294967295
 801a4c4:	e085      	b.n	801a5d2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801a4c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a4ca:	2b09      	cmp	r3, #9
 801a4cc:	dc02      	bgt.n	801a4d4 <etharp_find_entry+0x1cc>
    i = empty;
 801a4ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a4d0:	843b      	strh	r3, [r7, #32]
 801a4d2:	e039      	b.n	801a548 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801a4d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801a4d8:	2b09      	cmp	r3, #9
 801a4da:	dc14      	bgt.n	801a506 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801a4dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a4de:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801a4e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a4e4:	493d      	ldr	r1, [pc, #244]	@ (801a5dc <etharp_find_entry+0x2d4>)
 801a4e6:	4613      	mov	r3, r2
 801a4e8:	005b      	lsls	r3, r3, #1
 801a4ea:	4413      	add	r3, r2
 801a4ec:	00db      	lsls	r3, r3, #3
 801a4ee:	440b      	add	r3, r1
 801a4f0:	681b      	ldr	r3, [r3, #0]
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	d018      	beq.n	801a528 <etharp_find_entry+0x220>
 801a4f6:	4b3a      	ldr	r3, [pc, #232]	@ (801a5e0 <etharp_find_entry+0x2d8>)
 801a4f8:	f240 126d 	movw	r2, #365	@ 0x16d
 801a4fc:	493b      	ldr	r1, [pc, #236]	@ (801a5ec <etharp_find_entry+0x2e4>)
 801a4fe:	483a      	ldr	r0, [pc, #232]	@ (801a5e8 <etharp_find_entry+0x2e0>)
 801a500:	f002 ff60 	bl	801d3c4 <iprintf>
 801a504:	e010      	b.n	801a528 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801a506:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801a50a:	2b09      	cmp	r3, #9
 801a50c:	dc02      	bgt.n	801a514 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801a50e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a510:	843b      	strh	r3, [r7, #32]
 801a512:	e009      	b.n	801a528 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801a514:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a518:	2b09      	cmp	r3, #9
 801a51a:	dc02      	bgt.n	801a522 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801a51c:	8bfb      	ldrh	r3, [r7, #30]
 801a51e:	843b      	strh	r3, [r7, #32]
 801a520:	e002      	b.n	801a528 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801a522:	f04f 33ff 	mov.w	r3, #4294967295
 801a526:	e054      	b.n	801a5d2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a528:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a52c:	2b09      	cmp	r3, #9
 801a52e:	dd06      	ble.n	801a53e <etharp_find_entry+0x236>
 801a530:	4b2b      	ldr	r3, [pc, #172]	@ (801a5e0 <etharp_find_entry+0x2d8>)
 801a532:	f240 127f 	movw	r2, #383	@ 0x17f
 801a536:	492e      	ldr	r1, [pc, #184]	@ (801a5f0 <etharp_find_entry+0x2e8>)
 801a538:	482b      	ldr	r0, [pc, #172]	@ (801a5e8 <etharp_find_entry+0x2e0>)
 801a53a:	f002 ff43 	bl	801d3c4 <iprintf>
    etharp_free_entry(i);
 801a53e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a542:	4618      	mov	r0, r3
 801a544:	f7ff fe06 	bl	801a154 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a548:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a54c:	2b09      	cmp	r3, #9
 801a54e:	dd06      	ble.n	801a55e <etharp_find_entry+0x256>
 801a550:	4b23      	ldr	r3, [pc, #140]	@ (801a5e0 <etharp_find_entry+0x2d8>)
 801a552:	f240 1283 	movw	r2, #387	@ 0x183
 801a556:	4926      	ldr	r1, [pc, #152]	@ (801a5f0 <etharp_find_entry+0x2e8>)
 801a558:	4823      	ldr	r0, [pc, #140]	@ (801a5e8 <etharp_find_entry+0x2e0>)
 801a55a:	f002 ff33 	bl	801d3c4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801a55e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a562:	491e      	ldr	r1, [pc, #120]	@ (801a5dc <etharp_find_entry+0x2d4>)
 801a564:	4613      	mov	r3, r2
 801a566:	005b      	lsls	r3, r3, #1
 801a568:	4413      	add	r3, r2
 801a56a:	00db      	lsls	r3, r3, #3
 801a56c:	440b      	add	r3, r1
 801a56e:	3314      	adds	r3, #20
 801a570:	781b      	ldrb	r3, [r3, #0]
 801a572:	2b00      	cmp	r3, #0
 801a574:	d006      	beq.n	801a584 <etharp_find_entry+0x27c>
 801a576:	4b1a      	ldr	r3, [pc, #104]	@ (801a5e0 <etharp_find_entry+0x2d8>)
 801a578:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801a57c:	491d      	ldr	r1, [pc, #116]	@ (801a5f4 <etharp_find_entry+0x2ec>)
 801a57e:	481a      	ldr	r0, [pc, #104]	@ (801a5e8 <etharp_find_entry+0x2e0>)
 801a580:	f002 ff20 	bl	801d3c4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801a584:	68fb      	ldr	r3, [r7, #12]
 801a586:	2b00      	cmp	r3, #0
 801a588:	d00b      	beq.n	801a5a2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801a58a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a58e:	68fb      	ldr	r3, [r7, #12]
 801a590:	6819      	ldr	r1, [r3, #0]
 801a592:	4812      	ldr	r0, [pc, #72]	@ (801a5dc <etharp_find_entry+0x2d4>)
 801a594:	4613      	mov	r3, r2
 801a596:	005b      	lsls	r3, r3, #1
 801a598:	4413      	add	r3, r2
 801a59a:	00db      	lsls	r3, r3, #3
 801a59c:	4403      	add	r3, r0
 801a59e:	3304      	adds	r3, #4
 801a5a0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801a5a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a5a6:	490d      	ldr	r1, [pc, #52]	@ (801a5dc <etharp_find_entry+0x2d4>)
 801a5a8:	4613      	mov	r3, r2
 801a5aa:	005b      	lsls	r3, r3, #1
 801a5ac:	4413      	add	r3, r2
 801a5ae:	00db      	lsls	r3, r3, #3
 801a5b0:	440b      	add	r3, r1
 801a5b2:	3312      	adds	r3, #18
 801a5b4:	2200      	movs	r2, #0
 801a5b6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801a5b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a5bc:	4907      	ldr	r1, [pc, #28]	@ (801a5dc <etharp_find_entry+0x2d4>)
 801a5be:	4613      	mov	r3, r2
 801a5c0:	005b      	lsls	r3, r3, #1
 801a5c2:	4413      	add	r3, r2
 801a5c4:	00db      	lsls	r3, r3, #3
 801a5c6:	440b      	add	r3, r1
 801a5c8:	3308      	adds	r3, #8
 801a5ca:	687a      	ldr	r2, [r7, #4]
 801a5cc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801a5ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801a5d2:	4618      	mov	r0, r3
 801a5d4:	3728      	adds	r7, #40	@ 0x28
 801a5d6:	46bd      	mov	sp, r7
 801a5d8:	bd80      	pop	{r7, pc}
 801a5da:	bf00      	nop
 801a5dc:	2400ccc8 	.word	0x2400ccc8
 801a5e0:	08021d5c 	.word	0x08021d5c
 801a5e4:	08021d94 	.word	0x08021d94
 801a5e8:	08021dd4 	.word	0x08021dd4
 801a5ec:	08021dfc 	.word	0x08021dfc
 801a5f0:	08021e14 	.word	0x08021e14
 801a5f4:	08021e28 	.word	0x08021e28

0801a5f8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801a5f8:	b580      	push	{r7, lr}
 801a5fa:	b088      	sub	sp, #32
 801a5fc:	af02      	add	r7, sp, #8
 801a5fe:	60f8      	str	r0, [r7, #12]
 801a600:	60b9      	str	r1, [r7, #8]
 801a602:	607a      	str	r2, [r7, #4]
 801a604:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801a606:	68fb      	ldr	r3, [r7, #12]
 801a608:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a60c:	2b06      	cmp	r3, #6
 801a60e:	d006      	beq.n	801a61e <etharp_update_arp_entry+0x26>
 801a610:	4b48      	ldr	r3, [pc, #288]	@ (801a734 <etharp_update_arp_entry+0x13c>)
 801a612:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801a616:	4948      	ldr	r1, [pc, #288]	@ (801a738 <etharp_update_arp_entry+0x140>)
 801a618:	4848      	ldr	r0, [pc, #288]	@ (801a73c <etharp_update_arp_entry+0x144>)
 801a61a:	f002 fed3 	bl	801d3c4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801a61e:	68bb      	ldr	r3, [r7, #8]
 801a620:	2b00      	cmp	r3, #0
 801a622:	d012      	beq.n	801a64a <etharp_update_arp_entry+0x52>
 801a624:	68bb      	ldr	r3, [r7, #8]
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	2b00      	cmp	r3, #0
 801a62a:	d00e      	beq.n	801a64a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a62c:	68bb      	ldr	r3, [r7, #8]
 801a62e:	681b      	ldr	r3, [r3, #0]
 801a630:	68f9      	ldr	r1, [r7, #12]
 801a632:	4618      	mov	r0, r3
 801a634:	f001 f946 	bl	801b8c4 <ip4_addr_isbroadcast_u32>
 801a638:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d105      	bne.n	801a64a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801a63e:	68bb      	ldr	r3, [r7, #8]
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a646:	2be0      	cmp	r3, #224	@ 0xe0
 801a648:	d102      	bne.n	801a650 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a64a:	f06f 030f 	mvn.w	r3, #15
 801a64e:	e06c      	b.n	801a72a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801a650:	78fb      	ldrb	r3, [r7, #3]
 801a652:	68fa      	ldr	r2, [r7, #12]
 801a654:	4619      	mov	r1, r3
 801a656:	68b8      	ldr	r0, [r7, #8]
 801a658:	f7ff fe56 	bl	801a308 <etharp_find_entry>
 801a65c:	4603      	mov	r3, r0
 801a65e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801a660:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a664:	2b00      	cmp	r3, #0
 801a666:	da02      	bge.n	801a66e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801a668:	8afb      	ldrh	r3, [r7, #22]
 801a66a:	b25b      	sxtb	r3, r3
 801a66c:	e05d      	b.n	801a72a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801a66e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a672:	4933      	ldr	r1, [pc, #204]	@ (801a740 <etharp_update_arp_entry+0x148>)
 801a674:	4613      	mov	r3, r2
 801a676:	005b      	lsls	r3, r3, #1
 801a678:	4413      	add	r3, r2
 801a67a:	00db      	lsls	r3, r3, #3
 801a67c:	440b      	add	r3, r1
 801a67e:	3314      	adds	r3, #20
 801a680:	2202      	movs	r2, #2
 801a682:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801a684:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a688:	492d      	ldr	r1, [pc, #180]	@ (801a740 <etharp_update_arp_entry+0x148>)
 801a68a:	4613      	mov	r3, r2
 801a68c:	005b      	lsls	r3, r3, #1
 801a68e:	4413      	add	r3, r2
 801a690:	00db      	lsls	r3, r3, #3
 801a692:	440b      	add	r3, r1
 801a694:	3308      	adds	r3, #8
 801a696:	68fa      	ldr	r2, [r7, #12]
 801a698:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801a69a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a69e:	4613      	mov	r3, r2
 801a6a0:	005b      	lsls	r3, r3, #1
 801a6a2:	4413      	add	r3, r2
 801a6a4:	00db      	lsls	r3, r3, #3
 801a6a6:	3308      	adds	r3, #8
 801a6a8:	4a25      	ldr	r2, [pc, #148]	@ (801a740 <etharp_update_arp_entry+0x148>)
 801a6aa:	4413      	add	r3, r2
 801a6ac:	3304      	adds	r3, #4
 801a6ae:	2206      	movs	r2, #6
 801a6b0:	6879      	ldr	r1, [r7, #4]
 801a6b2:	4618      	mov	r0, r3
 801a6b4:	f003 f8ad 	bl	801d812 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801a6b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a6bc:	4920      	ldr	r1, [pc, #128]	@ (801a740 <etharp_update_arp_entry+0x148>)
 801a6be:	4613      	mov	r3, r2
 801a6c0:	005b      	lsls	r3, r3, #1
 801a6c2:	4413      	add	r3, r2
 801a6c4:	00db      	lsls	r3, r3, #3
 801a6c6:	440b      	add	r3, r1
 801a6c8:	3312      	adds	r3, #18
 801a6ca:	2200      	movs	r2, #0
 801a6cc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801a6ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a6d2:	491b      	ldr	r1, [pc, #108]	@ (801a740 <etharp_update_arp_entry+0x148>)
 801a6d4:	4613      	mov	r3, r2
 801a6d6:	005b      	lsls	r3, r3, #1
 801a6d8:	4413      	add	r3, r2
 801a6da:	00db      	lsls	r3, r3, #3
 801a6dc:	440b      	add	r3, r1
 801a6de:	681b      	ldr	r3, [r3, #0]
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	d021      	beq.n	801a728 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801a6e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a6e8:	4915      	ldr	r1, [pc, #84]	@ (801a740 <etharp_update_arp_entry+0x148>)
 801a6ea:	4613      	mov	r3, r2
 801a6ec:	005b      	lsls	r3, r3, #1
 801a6ee:	4413      	add	r3, r2
 801a6f0:	00db      	lsls	r3, r3, #3
 801a6f2:	440b      	add	r3, r1
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801a6f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a6fc:	4910      	ldr	r1, [pc, #64]	@ (801a740 <etharp_update_arp_entry+0x148>)
 801a6fe:	4613      	mov	r3, r2
 801a700:	005b      	lsls	r3, r3, #1
 801a702:	4413      	add	r3, r2
 801a704:	00db      	lsls	r3, r3, #3
 801a706:	440b      	add	r3, r1
 801a708:	2200      	movs	r2, #0
 801a70a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801a70c:	68fb      	ldr	r3, [r7, #12]
 801a70e:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801a712:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a716:	9300      	str	r3, [sp, #0]
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	6939      	ldr	r1, [r7, #16]
 801a71c:	68f8      	ldr	r0, [r7, #12]
 801a71e:	f001 ffdf 	bl	801c6e0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801a722:	6938      	ldr	r0, [r7, #16]
 801a724:	f7f7 fc50 	bl	8011fc8 <pbuf_free>
  }
  return ERR_OK;
 801a728:	2300      	movs	r3, #0
}
 801a72a:	4618      	mov	r0, r3
 801a72c:	3718      	adds	r7, #24
 801a72e:	46bd      	mov	sp, r7
 801a730:	bd80      	pop	{r7, pc}
 801a732:	bf00      	nop
 801a734:	08021d5c 	.word	0x08021d5c
 801a738:	08021e54 	.word	0x08021e54
 801a73c:	08021dd4 	.word	0x08021dd4
 801a740:	2400ccc8 	.word	0x2400ccc8

0801a744 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801a744:	b580      	push	{r7, lr}
 801a746:	b084      	sub	sp, #16
 801a748:	af00      	add	r7, sp, #0
 801a74a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a74c:	2300      	movs	r3, #0
 801a74e:	60fb      	str	r3, [r7, #12]
 801a750:	e01e      	b.n	801a790 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801a752:	4913      	ldr	r1, [pc, #76]	@ (801a7a0 <etharp_cleanup_netif+0x5c>)
 801a754:	68fa      	ldr	r2, [r7, #12]
 801a756:	4613      	mov	r3, r2
 801a758:	005b      	lsls	r3, r3, #1
 801a75a:	4413      	add	r3, r2
 801a75c:	00db      	lsls	r3, r3, #3
 801a75e:	440b      	add	r3, r1
 801a760:	3314      	adds	r3, #20
 801a762:	781b      	ldrb	r3, [r3, #0]
 801a764:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801a766:	7afb      	ldrb	r3, [r7, #11]
 801a768:	2b00      	cmp	r3, #0
 801a76a:	d00e      	beq.n	801a78a <etharp_cleanup_netif+0x46>
 801a76c:	490c      	ldr	r1, [pc, #48]	@ (801a7a0 <etharp_cleanup_netif+0x5c>)
 801a76e:	68fa      	ldr	r2, [r7, #12]
 801a770:	4613      	mov	r3, r2
 801a772:	005b      	lsls	r3, r3, #1
 801a774:	4413      	add	r3, r2
 801a776:	00db      	lsls	r3, r3, #3
 801a778:	440b      	add	r3, r1
 801a77a:	3308      	adds	r3, #8
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	687a      	ldr	r2, [r7, #4]
 801a780:	429a      	cmp	r2, r3
 801a782:	d102      	bne.n	801a78a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801a784:	68f8      	ldr	r0, [r7, #12]
 801a786:	f7ff fce5 	bl	801a154 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a78a:	68fb      	ldr	r3, [r7, #12]
 801a78c:	3301      	adds	r3, #1
 801a78e:	60fb      	str	r3, [r7, #12]
 801a790:	68fb      	ldr	r3, [r7, #12]
 801a792:	2b09      	cmp	r3, #9
 801a794:	dddd      	ble.n	801a752 <etharp_cleanup_netif+0xe>
    }
  }
}
 801a796:	bf00      	nop
 801a798:	bf00      	nop
 801a79a:	3710      	adds	r7, #16
 801a79c:	46bd      	mov	sp, r7
 801a79e:	bd80      	pop	{r7, pc}
 801a7a0:	2400ccc8 	.word	0x2400ccc8

0801a7a4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801a7a4:	b5b0      	push	{r4, r5, r7, lr}
 801a7a6:	b08a      	sub	sp, #40	@ 0x28
 801a7a8:	af04      	add	r7, sp, #16
 801a7aa:	6078      	str	r0, [r7, #4]
 801a7ac:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a7ae:	683b      	ldr	r3, [r7, #0]
 801a7b0:	2b00      	cmp	r3, #0
 801a7b2:	d107      	bne.n	801a7c4 <etharp_input+0x20>
 801a7b4:	4b3f      	ldr	r3, [pc, #252]	@ (801a8b4 <etharp_input+0x110>)
 801a7b6:	f240 228a 	movw	r2, #650	@ 0x28a
 801a7ba:	493f      	ldr	r1, [pc, #252]	@ (801a8b8 <etharp_input+0x114>)
 801a7bc:	483f      	ldr	r0, [pc, #252]	@ (801a8bc <etharp_input+0x118>)
 801a7be:	f002 fe01 	bl	801d3c4 <iprintf>
 801a7c2:	e074      	b.n	801a8ae <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	685b      	ldr	r3, [r3, #4]
 801a7c8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a7ca:	693b      	ldr	r3, [r7, #16]
 801a7cc:	881b      	ldrh	r3, [r3, #0]
 801a7ce:	b29b      	uxth	r3, r3
 801a7d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a7d4:	d10c      	bne.n	801a7f0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a7d6:	693b      	ldr	r3, [r7, #16]
 801a7d8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a7da:	2b06      	cmp	r3, #6
 801a7dc:	d108      	bne.n	801a7f0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a7de:	693b      	ldr	r3, [r7, #16]
 801a7e0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a7e2:	2b04      	cmp	r3, #4
 801a7e4:	d104      	bne.n	801a7f0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801a7e6:	693b      	ldr	r3, [r7, #16]
 801a7e8:	885b      	ldrh	r3, [r3, #2]
 801a7ea:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a7ec:	2b08      	cmp	r3, #8
 801a7ee:	d003      	beq.n	801a7f8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801a7f0:	6878      	ldr	r0, [r7, #4]
 801a7f2:	f7f7 fbe9 	bl	8011fc8 <pbuf_free>
    return;
 801a7f6:	e05a      	b.n	801a8ae <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a7f8:	693b      	ldr	r3, [r7, #16]
 801a7fa:	330e      	adds	r3, #14
 801a7fc:	681b      	ldr	r3, [r3, #0]
 801a7fe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a800:	693b      	ldr	r3, [r7, #16]
 801a802:	3318      	adds	r3, #24
 801a804:	681b      	ldr	r3, [r3, #0]
 801a806:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a808:	683b      	ldr	r3, [r7, #0]
 801a80a:	3304      	adds	r3, #4
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d102      	bne.n	801a818 <etharp_input+0x74>
    for_us = 0;
 801a812:	2300      	movs	r3, #0
 801a814:	75fb      	strb	r3, [r7, #23]
 801a816:	e009      	b.n	801a82c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a818:	68ba      	ldr	r2, [r7, #8]
 801a81a:	683b      	ldr	r3, [r7, #0]
 801a81c:	3304      	adds	r3, #4
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	429a      	cmp	r2, r3
 801a822:	bf0c      	ite	eq
 801a824:	2301      	moveq	r3, #1
 801a826:	2300      	movne	r3, #0
 801a828:	b2db      	uxtb	r3, r3
 801a82a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a82c:	693b      	ldr	r3, [r7, #16]
 801a82e:	f103 0208 	add.w	r2, r3, #8
 801a832:	7dfb      	ldrb	r3, [r7, #23]
 801a834:	2b00      	cmp	r3, #0
 801a836:	d001      	beq.n	801a83c <etharp_input+0x98>
 801a838:	2301      	movs	r3, #1
 801a83a:	e000      	b.n	801a83e <etharp_input+0x9a>
 801a83c:	2302      	movs	r3, #2
 801a83e:	f107 010c 	add.w	r1, r7, #12
 801a842:	6838      	ldr	r0, [r7, #0]
 801a844:	f7ff fed8 	bl	801a5f8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a848:	693b      	ldr	r3, [r7, #16]
 801a84a:	88db      	ldrh	r3, [r3, #6]
 801a84c:	b29b      	uxth	r3, r3
 801a84e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a852:	d003      	beq.n	801a85c <etharp_input+0xb8>
 801a854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a858:	d01e      	beq.n	801a898 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a85a:	e025      	b.n	801a8a8 <etharp_input+0x104>
      if (for_us) {
 801a85c:	7dfb      	ldrb	r3, [r7, #23]
 801a85e:	2b00      	cmp	r3, #0
 801a860:	d021      	beq.n	801a8a6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a862:	683b      	ldr	r3, [r7, #0]
 801a864:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801a868:	693b      	ldr	r3, [r7, #16]
 801a86a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a86e:	683b      	ldr	r3, [r7, #0]
 801a870:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 801a874:	683b      	ldr	r3, [r7, #0]
 801a876:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801a878:	693a      	ldr	r2, [r7, #16]
 801a87a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801a87c:	2102      	movs	r1, #2
 801a87e:	9103      	str	r1, [sp, #12]
 801a880:	f107 010c 	add.w	r1, r7, #12
 801a884:	9102      	str	r1, [sp, #8]
 801a886:	9201      	str	r2, [sp, #4]
 801a888:	9300      	str	r3, [sp, #0]
 801a88a:	462b      	mov	r3, r5
 801a88c:	4622      	mov	r2, r4
 801a88e:	4601      	mov	r1, r0
 801a890:	6838      	ldr	r0, [r7, #0]
 801a892:	f000 faef 	bl	801ae74 <etharp_raw>
      break;
 801a896:	e006      	b.n	801a8a6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801a898:	f107 030c 	add.w	r3, r7, #12
 801a89c:	4619      	mov	r1, r3
 801a89e:	6838      	ldr	r0, [r7, #0]
 801a8a0:	f7fe fa02 	bl	8018ca8 <dhcp_arp_reply>
      break;
 801a8a4:	e000      	b.n	801a8a8 <etharp_input+0x104>
      break;
 801a8a6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801a8a8:	6878      	ldr	r0, [r7, #4]
 801a8aa:	f7f7 fb8d 	bl	8011fc8 <pbuf_free>
}
 801a8ae:	3718      	adds	r7, #24
 801a8b0:	46bd      	mov	sp, r7
 801a8b2:	bdb0      	pop	{r4, r5, r7, pc}
 801a8b4:	08021d5c 	.word	0x08021d5c
 801a8b8:	08021eac 	.word	0x08021eac
 801a8bc:	08021dd4 	.word	0x08021dd4

0801a8c0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801a8c0:	b580      	push	{r7, lr}
 801a8c2:	b086      	sub	sp, #24
 801a8c4:	af02      	add	r7, sp, #8
 801a8c6:	60f8      	str	r0, [r7, #12]
 801a8c8:	60b9      	str	r1, [r7, #8]
 801a8ca:	4613      	mov	r3, r2
 801a8cc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a8ce:	79fa      	ldrb	r2, [r7, #7]
 801a8d0:	4944      	ldr	r1, [pc, #272]	@ (801a9e4 <etharp_output_to_arp_index+0x124>)
 801a8d2:	4613      	mov	r3, r2
 801a8d4:	005b      	lsls	r3, r3, #1
 801a8d6:	4413      	add	r3, r2
 801a8d8:	00db      	lsls	r3, r3, #3
 801a8da:	440b      	add	r3, r1
 801a8dc:	3314      	adds	r3, #20
 801a8de:	781b      	ldrb	r3, [r3, #0]
 801a8e0:	2b01      	cmp	r3, #1
 801a8e2:	d806      	bhi.n	801a8f2 <etharp_output_to_arp_index+0x32>
 801a8e4:	4b40      	ldr	r3, [pc, #256]	@ (801a9e8 <etharp_output_to_arp_index+0x128>)
 801a8e6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801a8ea:	4940      	ldr	r1, [pc, #256]	@ (801a9ec <etharp_output_to_arp_index+0x12c>)
 801a8ec:	4840      	ldr	r0, [pc, #256]	@ (801a9f0 <etharp_output_to_arp_index+0x130>)
 801a8ee:	f002 fd69 	bl	801d3c4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a8f2:	79fa      	ldrb	r2, [r7, #7]
 801a8f4:	493b      	ldr	r1, [pc, #236]	@ (801a9e4 <etharp_output_to_arp_index+0x124>)
 801a8f6:	4613      	mov	r3, r2
 801a8f8:	005b      	lsls	r3, r3, #1
 801a8fa:	4413      	add	r3, r2
 801a8fc:	00db      	lsls	r3, r3, #3
 801a8fe:	440b      	add	r3, r1
 801a900:	3314      	adds	r3, #20
 801a902:	781b      	ldrb	r3, [r3, #0]
 801a904:	2b02      	cmp	r3, #2
 801a906:	d153      	bne.n	801a9b0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a908:	79fa      	ldrb	r2, [r7, #7]
 801a90a:	4936      	ldr	r1, [pc, #216]	@ (801a9e4 <etharp_output_to_arp_index+0x124>)
 801a90c:	4613      	mov	r3, r2
 801a90e:	005b      	lsls	r3, r3, #1
 801a910:	4413      	add	r3, r2
 801a912:	00db      	lsls	r3, r3, #3
 801a914:	440b      	add	r3, r1
 801a916:	3312      	adds	r3, #18
 801a918:	881b      	ldrh	r3, [r3, #0]
 801a91a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801a91e:	d919      	bls.n	801a954 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801a920:	79fa      	ldrb	r2, [r7, #7]
 801a922:	4613      	mov	r3, r2
 801a924:	005b      	lsls	r3, r3, #1
 801a926:	4413      	add	r3, r2
 801a928:	00db      	lsls	r3, r3, #3
 801a92a:	4a2e      	ldr	r2, [pc, #184]	@ (801a9e4 <etharp_output_to_arp_index+0x124>)
 801a92c:	4413      	add	r3, r2
 801a92e:	3304      	adds	r3, #4
 801a930:	4619      	mov	r1, r3
 801a932:	68f8      	ldr	r0, [r7, #12]
 801a934:	f000 fb4c 	bl	801afd0 <etharp_request>
 801a938:	4603      	mov	r3, r0
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d138      	bne.n	801a9b0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a93e:	79fa      	ldrb	r2, [r7, #7]
 801a940:	4928      	ldr	r1, [pc, #160]	@ (801a9e4 <etharp_output_to_arp_index+0x124>)
 801a942:	4613      	mov	r3, r2
 801a944:	005b      	lsls	r3, r3, #1
 801a946:	4413      	add	r3, r2
 801a948:	00db      	lsls	r3, r3, #3
 801a94a:	440b      	add	r3, r1
 801a94c:	3314      	adds	r3, #20
 801a94e:	2203      	movs	r2, #3
 801a950:	701a      	strb	r2, [r3, #0]
 801a952:	e02d      	b.n	801a9b0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801a954:	79fa      	ldrb	r2, [r7, #7]
 801a956:	4923      	ldr	r1, [pc, #140]	@ (801a9e4 <etharp_output_to_arp_index+0x124>)
 801a958:	4613      	mov	r3, r2
 801a95a:	005b      	lsls	r3, r3, #1
 801a95c:	4413      	add	r3, r2
 801a95e:	00db      	lsls	r3, r3, #3
 801a960:	440b      	add	r3, r1
 801a962:	3312      	adds	r3, #18
 801a964:	881b      	ldrh	r3, [r3, #0]
 801a966:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801a96a:	d321      	bcc.n	801a9b0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801a96c:	79fa      	ldrb	r2, [r7, #7]
 801a96e:	4613      	mov	r3, r2
 801a970:	005b      	lsls	r3, r3, #1
 801a972:	4413      	add	r3, r2
 801a974:	00db      	lsls	r3, r3, #3
 801a976:	4a1b      	ldr	r2, [pc, #108]	@ (801a9e4 <etharp_output_to_arp_index+0x124>)
 801a978:	4413      	add	r3, r2
 801a97a:	1d19      	adds	r1, r3, #4
 801a97c:	79fa      	ldrb	r2, [r7, #7]
 801a97e:	4613      	mov	r3, r2
 801a980:	005b      	lsls	r3, r3, #1
 801a982:	4413      	add	r3, r2
 801a984:	00db      	lsls	r3, r3, #3
 801a986:	3308      	adds	r3, #8
 801a988:	4a16      	ldr	r2, [pc, #88]	@ (801a9e4 <etharp_output_to_arp_index+0x124>)
 801a98a:	4413      	add	r3, r2
 801a98c:	3304      	adds	r3, #4
 801a98e:	461a      	mov	r2, r3
 801a990:	68f8      	ldr	r0, [r7, #12]
 801a992:	f000 fafb 	bl	801af8c <etharp_request_dst>
 801a996:	4603      	mov	r3, r0
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d109      	bne.n	801a9b0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a99c:	79fa      	ldrb	r2, [r7, #7]
 801a99e:	4911      	ldr	r1, [pc, #68]	@ (801a9e4 <etharp_output_to_arp_index+0x124>)
 801a9a0:	4613      	mov	r3, r2
 801a9a2:	005b      	lsls	r3, r3, #1
 801a9a4:	4413      	add	r3, r2
 801a9a6:	00db      	lsls	r3, r3, #3
 801a9a8:	440b      	add	r3, r1
 801a9aa:	3314      	adds	r3, #20
 801a9ac:	2203      	movs	r2, #3
 801a9ae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801a9b0:	68fb      	ldr	r3, [r7, #12]
 801a9b2:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 801a9b6:	79fa      	ldrb	r2, [r7, #7]
 801a9b8:	4613      	mov	r3, r2
 801a9ba:	005b      	lsls	r3, r3, #1
 801a9bc:	4413      	add	r3, r2
 801a9be:	00db      	lsls	r3, r3, #3
 801a9c0:	3308      	adds	r3, #8
 801a9c2:	4a08      	ldr	r2, [pc, #32]	@ (801a9e4 <etharp_output_to_arp_index+0x124>)
 801a9c4:	4413      	add	r3, r2
 801a9c6:	3304      	adds	r3, #4
 801a9c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a9cc:	9200      	str	r2, [sp, #0]
 801a9ce:	460a      	mov	r2, r1
 801a9d0:	68b9      	ldr	r1, [r7, #8]
 801a9d2:	68f8      	ldr	r0, [r7, #12]
 801a9d4:	f001 fe84 	bl	801c6e0 <ethernet_output>
 801a9d8:	4603      	mov	r3, r0
}
 801a9da:	4618      	mov	r0, r3
 801a9dc:	3710      	adds	r7, #16
 801a9de:	46bd      	mov	sp, r7
 801a9e0:	bd80      	pop	{r7, pc}
 801a9e2:	bf00      	nop
 801a9e4:	2400ccc8 	.word	0x2400ccc8
 801a9e8:	08021d5c 	.word	0x08021d5c
 801a9ec:	08021ecc 	.word	0x08021ecc
 801a9f0:	08021dd4 	.word	0x08021dd4

0801a9f4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801a9f4:	b580      	push	{r7, lr}
 801a9f6:	b08a      	sub	sp, #40	@ 0x28
 801a9f8:	af02      	add	r7, sp, #8
 801a9fa:	60f8      	str	r0, [r7, #12]
 801a9fc:	60b9      	str	r1, [r7, #8]
 801a9fe:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801aa04:	68fb      	ldr	r3, [r7, #12]
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d106      	bne.n	801aa18 <etharp_output+0x24>
 801aa0a:	4b73      	ldr	r3, [pc, #460]	@ (801abd8 <etharp_output+0x1e4>)
 801aa0c:	f240 321e 	movw	r2, #798	@ 0x31e
 801aa10:	4972      	ldr	r1, [pc, #456]	@ (801abdc <etharp_output+0x1e8>)
 801aa12:	4873      	ldr	r0, [pc, #460]	@ (801abe0 <etharp_output+0x1ec>)
 801aa14:	f002 fcd6 	bl	801d3c4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801aa18:	68bb      	ldr	r3, [r7, #8]
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d106      	bne.n	801aa2c <etharp_output+0x38>
 801aa1e:	4b6e      	ldr	r3, [pc, #440]	@ (801abd8 <etharp_output+0x1e4>)
 801aa20:	f240 321f 	movw	r2, #799	@ 0x31f
 801aa24:	496f      	ldr	r1, [pc, #444]	@ (801abe4 <etharp_output+0x1f0>)
 801aa26:	486e      	ldr	r0, [pc, #440]	@ (801abe0 <etharp_output+0x1ec>)
 801aa28:	f002 fccc 	bl	801d3c4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d106      	bne.n	801aa40 <etharp_output+0x4c>
 801aa32:	4b69      	ldr	r3, [pc, #420]	@ (801abd8 <etharp_output+0x1e4>)
 801aa34:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801aa38:	496b      	ldr	r1, [pc, #428]	@ (801abe8 <etharp_output+0x1f4>)
 801aa3a:	4869      	ldr	r0, [pc, #420]	@ (801abe0 <etharp_output+0x1ec>)
 801aa3c:	f002 fcc2 	bl	801d3c4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	681b      	ldr	r3, [r3, #0]
 801aa44:	68f9      	ldr	r1, [r7, #12]
 801aa46:	4618      	mov	r0, r3
 801aa48:	f000 ff3c 	bl	801b8c4 <ip4_addr_isbroadcast_u32>
 801aa4c:	4603      	mov	r3, r0
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	d002      	beq.n	801aa58 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801aa52:	4b66      	ldr	r3, [pc, #408]	@ (801abec <etharp_output+0x1f8>)
 801aa54:	61fb      	str	r3, [r7, #28]
 801aa56:	e0af      	b.n	801abb8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	681b      	ldr	r3, [r3, #0]
 801aa5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801aa60:	2be0      	cmp	r3, #224	@ 0xe0
 801aa62:	d118      	bne.n	801aa96 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801aa64:	2301      	movs	r3, #1
 801aa66:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801aa68:	2300      	movs	r3, #0
 801aa6a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801aa6c:	235e      	movs	r3, #94	@ 0x5e
 801aa6e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	3301      	adds	r3, #1
 801aa74:	781b      	ldrb	r3, [r3, #0]
 801aa76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801aa7a:	b2db      	uxtb	r3, r3
 801aa7c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	3302      	adds	r3, #2
 801aa82:	781b      	ldrb	r3, [r3, #0]
 801aa84:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	3303      	adds	r3, #3
 801aa8a:	781b      	ldrb	r3, [r3, #0]
 801aa8c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801aa8e:	f107 0310 	add.w	r3, r7, #16
 801aa92:	61fb      	str	r3, [r7, #28]
 801aa94:	e090      	b.n	801abb8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	681a      	ldr	r2, [r3, #0]
 801aa9a:	68fb      	ldr	r3, [r7, #12]
 801aa9c:	3304      	adds	r3, #4
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	405a      	eors	r2, r3
 801aaa2:	68fb      	ldr	r3, [r7, #12]
 801aaa4:	3308      	adds	r3, #8
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	4013      	ands	r3, r2
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d012      	beq.n	801aad4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801aab4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801aab8:	4293      	cmp	r3, r2
 801aaba:	d00b      	beq.n	801aad4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801aabc:	68fb      	ldr	r3, [r7, #12]
 801aabe:	330c      	adds	r3, #12
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	d003      	beq.n	801aace <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801aac6:	68fb      	ldr	r3, [r7, #12]
 801aac8:	330c      	adds	r3, #12
 801aaca:	61bb      	str	r3, [r7, #24]
 801aacc:	e002      	b.n	801aad4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801aace:	f06f 0303 	mvn.w	r3, #3
 801aad2:	e07d      	b.n	801abd0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801aad4:	4b46      	ldr	r3, [pc, #280]	@ (801abf0 <etharp_output+0x1fc>)
 801aad6:	781b      	ldrb	r3, [r3, #0]
 801aad8:	4619      	mov	r1, r3
 801aada:	4a46      	ldr	r2, [pc, #280]	@ (801abf4 <etharp_output+0x200>)
 801aadc:	460b      	mov	r3, r1
 801aade:	005b      	lsls	r3, r3, #1
 801aae0:	440b      	add	r3, r1
 801aae2:	00db      	lsls	r3, r3, #3
 801aae4:	4413      	add	r3, r2
 801aae6:	3314      	adds	r3, #20
 801aae8:	781b      	ldrb	r3, [r3, #0]
 801aaea:	2b01      	cmp	r3, #1
 801aaec:	d925      	bls.n	801ab3a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801aaee:	4b40      	ldr	r3, [pc, #256]	@ (801abf0 <etharp_output+0x1fc>)
 801aaf0:	781b      	ldrb	r3, [r3, #0]
 801aaf2:	4619      	mov	r1, r3
 801aaf4:	4a3f      	ldr	r2, [pc, #252]	@ (801abf4 <etharp_output+0x200>)
 801aaf6:	460b      	mov	r3, r1
 801aaf8:	005b      	lsls	r3, r3, #1
 801aafa:	440b      	add	r3, r1
 801aafc:	00db      	lsls	r3, r3, #3
 801aafe:	4413      	add	r3, r2
 801ab00:	3308      	adds	r3, #8
 801ab02:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ab04:	68fa      	ldr	r2, [r7, #12]
 801ab06:	429a      	cmp	r2, r3
 801ab08:	d117      	bne.n	801ab3a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801ab0a:	69bb      	ldr	r3, [r7, #24]
 801ab0c:	681a      	ldr	r2, [r3, #0]
 801ab0e:	4b38      	ldr	r3, [pc, #224]	@ (801abf0 <etharp_output+0x1fc>)
 801ab10:	781b      	ldrb	r3, [r3, #0]
 801ab12:	4618      	mov	r0, r3
 801ab14:	4937      	ldr	r1, [pc, #220]	@ (801abf4 <etharp_output+0x200>)
 801ab16:	4603      	mov	r3, r0
 801ab18:	005b      	lsls	r3, r3, #1
 801ab1a:	4403      	add	r3, r0
 801ab1c:	00db      	lsls	r3, r3, #3
 801ab1e:	440b      	add	r3, r1
 801ab20:	3304      	adds	r3, #4
 801ab22:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801ab24:	429a      	cmp	r2, r3
 801ab26:	d108      	bne.n	801ab3a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801ab28:	4b31      	ldr	r3, [pc, #196]	@ (801abf0 <etharp_output+0x1fc>)
 801ab2a:	781b      	ldrb	r3, [r3, #0]
 801ab2c:	461a      	mov	r2, r3
 801ab2e:	68b9      	ldr	r1, [r7, #8]
 801ab30:	68f8      	ldr	r0, [r7, #12]
 801ab32:	f7ff fec5 	bl	801a8c0 <etharp_output_to_arp_index>
 801ab36:	4603      	mov	r3, r0
 801ab38:	e04a      	b.n	801abd0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ab3a:	2300      	movs	r3, #0
 801ab3c:	75fb      	strb	r3, [r7, #23]
 801ab3e:	e031      	b.n	801aba4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ab40:	7dfa      	ldrb	r2, [r7, #23]
 801ab42:	492c      	ldr	r1, [pc, #176]	@ (801abf4 <etharp_output+0x200>)
 801ab44:	4613      	mov	r3, r2
 801ab46:	005b      	lsls	r3, r3, #1
 801ab48:	4413      	add	r3, r2
 801ab4a:	00db      	lsls	r3, r3, #3
 801ab4c:	440b      	add	r3, r1
 801ab4e:	3314      	adds	r3, #20
 801ab50:	781b      	ldrb	r3, [r3, #0]
 801ab52:	2b01      	cmp	r3, #1
 801ab54:	d923      	bls.n	801ab9e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801ab56:	7dfa      	ldrb	r2, [r7, #23]
 801ab58:	4926      	ldr	r1, [pc, #152]	@ (801abf4 <etharp_output+0x200>)
 801ab5a:	4613      	mov	r3, r2
 801ab5c:	005b      	lsls	r3, r3, #1
 801ab5e:	4413      	add	r3, r2
 801ab60:	00db      	lsls	r3, r3, #3
 801ab62:	440b      	add	r3, r1
 801ab64:	3308      	adds	r3, #8
 801ab66:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ab68:	68fa      	ldr	r2, [r7, #12]
 801ab6a:	429a      	cmp	r2, r3
 801ab6c:	d117      	bne.n	801ab9e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801ab6e:	69bb      	ldr	r3, [r7, #24]
 801ab70:	6819      	ldr	r1, [r3, #0]
 801ab72:	7dfa      	ldrb	r2, [r7, #23]
 801ab74:	481f      	ldr	r0, [pc, #124]	@ (801abf4 <etharp_output+0x200>)
 801ab76:	4613      	mov	r3, r2
 801ab78:	005b      	lsls	r3, r3, #1
 801ab7a:	4413      	add	r3, r2
 801ab7c:	00db      	lsls	r3, r3, #3
 801ab7e:	4403      	add	r3, r0
 801ab80:	3304      	adds	r3, #4
 801ab82:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801ab84:	4299      	cmp	r1, r3
 801ab86:	d10a      	bne.n	801ab9e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801ab88:	4a19      	ldr	r2, [pc, #100]	@ (801abf0 <etharp_output+0x1fc>)
 801ab8a:	7dfb      	ldrb	r3, [r7, #23]
 801ab8c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801ab8e:	7dfb      	ldrb	r3, [r7, #23]
 801ab90:	461a      	mov	r2, r3
 801ab92:	68b9      	ldr	r1, [r7, #8]
 801ab94:	68f8      	ldr	r0, [r7, #12]
 801ab96:	f7ff fe93 	bl	801a8c0 <etharp_output_to_arp_index>
 801ab9a:	4603      	mov	r3, r0
 801ab9c:	e018      	b.n	801abd0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ab9e:	7dfb      	ldrb	r3, [r7, #23]
 801aba0:	3301      	adds	r3, #1
 801aba2:	75fb      	strb	r3, [r7, #23]
 801aba4:	7dfb      	ldrb	r3, [r7, #23]
 801aba6:	2b09      	cmp	r3, #9
 801aba8:	d9ca      	bls.n	801ab40 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801abaa:	68ba      	ldr	r2, [r7, #8]
 801abac:	69b9      	ldr	r1, [r7, #24]
 801abae:	68f8      	ldr	r0, [r7, #12]
 801abb0:	f000 f822 	bl	801abf8 <etharp_query>
 801abb4:	4603      	mov	r3, r0
 801abb6:	e00b      	b.n	801abd0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801abb8:	68fb      	ldr	r3, [r7, #12]
 801abba:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801abbe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801abc2:	9300      	str	r3, [sp, #0]
 801abc4:	69fb      	ldr	r3, [r7, #28]
 801abc6:	68b9      	ldr	r1, [r7, #8]
 801abc8:	68f8      	ldr	r0, [r7, #12]
 801abca:	f001 fd89 	bl	801c6e0 <ethernet_output>
 801abce:	4603      	mov	r3, r0
}
 801abd0:	4618      	mov	r0, r3
 801abd2:	3720      	adds	r7, #32
 801abd4:	46bd      	mov	sp, r7
 801abd6:	bd80      	pop	{r7, pc}
 801abd8:	08021d5c 	.word	0x08021d5c
 801abdc:	08021eac 	.word	0x08021eac
 801abe0:	08021dd4 	.word	0x08021dd4
 801abe4:	08021efc 	.word	0x08021efc
 801abe8:	08021e9c 	.word	0x08021e9c
 801abec:	08022618 	.word	0x08022618
 801abf0:	2400cdb8 	.word	0x2400cdb8
 801abf4:	2400ccc8 	.word	0x2400ccc8

0801abf8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801abf8:	b580      	push	{r7, lr}
 801abfa:	b08c      	sub	sp, #48	@ 0x30
 801abfc:	af02      	add	r7, sp, #8
 801abfe:	60f8      	str	r0, [r7, #12]
 801ac00:	60b9      	str	r1, [r7, #8]
 801ac02:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801ac04:	68fb      	ldr	r3, [r7, #12]
 801ac06:	332a      	adds	r3, #42	@ 0x2a
 801ac08:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801ac0a:	23ff      	movs	r3, #255	@ 0xff
 801ac0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801ac10:	2300      	movs	r3, #0
 801ac12:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ac14:	68bb      	ldr	r3, [r7, #8]
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	68f9      	ldr	r1, [r7, #12]
 801ac1a:	4618      	mov	r0, r3
 801ac1c:	f000 fe52 	bl	801b8c4 <ip4_addr_isbroadcast_u32>
 801ac20:	4603      	mov	r3, r0
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	d10c      	bne.n	801ac40 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ac26:	68bb      	ldr	r3, [r7, #8]
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ac2e:	2be0      	cmp	r3, #224	@ 0xe0
 801ac30:	d006      	beq.n	801ac40 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ac32:	68bb      	ldr	r3, [r7, #8]
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	d003      	beq.n	801ac40 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801ac38:	68bb      	ldr	r3, [r7, #8]
 801ac3a:	681b      	ldr	r3, [r3, #0]
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	d102      	bne.n	801ac46 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ac40:	f06f 030f 	mvn.w	r3, #15
 801ac44:	e101      	b.n	801ae4a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801ac46:	68fa      	ldr	r2, [r7, #12]
 801ac48:	2101      	movs	r1, #1
 801ac4a:	68b8      	ldr	r0, [r7, #8]
 801ac4c:	f7ff fb5c 	bl	801a308 <etharp_find_entry>
 801ac50:	4603      	mov	r3, r0
 801ac52:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801ac54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	da02      	bge.n	801ac62 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801ac5c:	8a7b      	ldrh	r3, [r7, #18]
 801ac5e:	b25b      	sxtb	r3, r3
 801ac60:	e0f3      	b.n	801ae4a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801ac62:	8a7b      	ldrh	r3, [r7, #18]
 801ac64:	2b7e      	cmp	r3, #126	@ 0x7e
 801ac66:	d906      	bls.n	801ac76 <etharp_query+0x7e>
 801ac68:	4b7a      	ldr	r3, [pc, #488]	@ (801ae54 <etharp_query+0x25c>)
 801ac6a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801ac6e:	497a      	ldr	r1, [pc, #488]	@ (801ae58 <etharp_query+0x260>)
 801ac70:	487a      	ldr	r0, [pc, #488]	@ (801ae5c <etharp_query+0x264>)
 801ac72:	f002 fba7 	bl	801d3c4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801ac76:	8a7b      	ldrh	r3, [r7, #18]
 801ac78:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801ac7a:	7c7a      	ldrb	r2, [r7, #17]
 801ac7c:	4978      	ldr	r1, [pc, #480]	@ (801ae60 <etharp_query+0x268>)
 801ac7e:	4613      	mov	r3, r2
 801ac80:	005b      	lsls	r3, r3, #1
 801ac82:	4413      	add	r3, r2
 801ac84:	00db      	lsls	r3, r3, #3
 801ac86:	440b      	add	r3, r1
 801ac88:	3314      	adds	r3, #20
 801ac8a:	781b      	ldrb	r3, [r3, #0]
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d115      	bne.n	801acbc <etharp_query+0xc4>
    is_new_entry = 1;
 801ac90:	2301      	movs	r3, #1
 801ac92:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801ac94:	7c7a      	ldrb	r2, [r7, #17]
 801ac96:	4972      	ldr	r1, [pc, #456]	@ (801ae60 <etharp_query+0x268>)
 801ac98:	4613      	mov	r3, r2
 801ac9a:	005b      	lsls	r3, r3, #1
 801ac9c:	4413      	add	r3, r2
 801ac9e:	00db      	lsls	r3, r3, #3
 801aca0:	440b      	add	r3, r1
 801aca2:	3314      	adds	r3, #20
 801aca4:	2201      	movs	r2, #1
 801aca6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801aca8:	7c7a      	ldrb	r2, [r7, #17]
 801acaa:	496d      	ldr	r1, [pc, #436]	@ (801ae60 <etharp_query+0x268>)
 801acac:	4613      	mov	r3, r2
 801acae:	005b      	lsls	r3, r3, #1
 801acb0:	4413      	add	r3, r2
 801acb2:	00db      	lsls	r3, r3, #3
 801acb4:	440b      	add	r3, r1
 801acb6:	3308      	adds	r3, #8
 801acb8:	68fa      	ldr	r2, [r7, #12]
 801acba:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801acbc:	7c7a      	ldrb	r2, [r7, #17]
 801acbe:	4968      	ldr	r1, [pc, #416]	@ (801ae60 <etharp_query+0x268>)
 801acc0:	4613      	mov	r3, r2
 801acc2:	005b      	lsls	r3, r3, #1
 801acc4:	4413      	add	r3, r2
 801acc6:	00db      	lsls	r3, r3, #3
 801acc8:	440b      	add	r3, r1
 801acca:	3314      	adds	r3, #20
 801accc:	781b      	ldrb	r3, [r3, #0]
 801acce:	2b01      	cmp	r3, #1
 801acd0:	d011      	beq.n	801acf6 <etharp_query+0xfe>
 801acd2:	7c7a      	ldrb	r2, [r7, #17]
 801acd4:	4962      	ldr	r1, [pc, #392]	@ (801ae60 <etharp_query+0x268>)
 801acd6:	4613      	mov	r3, r2
 801acd8:	005b      	lsls	r3, r3, #1
 801acda:	4413      	add	r3, r2
 801acdc:	00db      	lsls	r3, r3, #3
 801acde:	440b      	add	r3, r1
 801ace0:	3314      	adds	r3, #20
 801ace2:	781b      	ldrb	r3, [r3, #0]
 801ace4:	2b01      	cmp	r3, #1
 801ace6:	d806      	bhi.n	801acf6 <etharp_query+0xfe>
 801ace8:	4b5a      	ldr	r3, [pc, #360]	@ (801ae54 <etharp_query+0x25c>)
 801acea:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801acee:	495d      	ldr	r1, [pc, #372]	@ (801ae64 <etharp_query+0x26c>)
 801acf0:	485a      	ldr	r0, [pc, #360]	@ (801ae5c <etharp_query+0x264>)
 801acf2:	f002 fb67 	bl	801d3c4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801acf6:	6a3b      	ldr	r3, [r7, #32]
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	d102      	bne.n	801ad02 <etharp_query+0x10a>
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	d10c      	bne.n	801ad1c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801ad02:	68b9      	ldr	r1, [r7, #8]
 801ad04:	68f8      	ldr	r0, [r7, #12]
 801ad06:	f000 f963 	bl	801afd0 <etharp_request>
 801ad0a:	4603      	mov	r3, r0
 801ad0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d102      	bne.n	801ad1c <etharp_query+0x124>
      return result;
 801ad16:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801ad1a:	e096      	b.n	801ae4a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801ad1c:	687b      	ldr	r3, [r7, #4]
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	d106      	bne.n	801ad30 <etharp_query+0x138>
 801ad22:	4b4c      	ldr	r3, [pc, #304]	@ (801ae54 <etharp_query+0x25c>)
 801ad24:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801ad28:	494f      	ldr	r1, [pc, #316]	@ (801ae68 <etharp_query+0x270>)
 801ad2a:	484c      	ldr	r0, [pc, #304]	@ (801ae5c <etharp_query+0x264>)
 801ad2c:	f002 fb4a 	bl	801d3c4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801ad30:	7c7a      	ldrb	r2, [r7, #17]
 801ad32:	494b      	ldr	r1, [pc, #300]	@ (801ae60 <etharp_query+0x268>)
 801ad34:	4613      	mov	r3, r2
 801ad36:	005b      	lsls	r3, r3, #1
 801ad38:	4413      	add	r3, r2
 801ad3a:	00db      	lsls	r3, r3, #3
 801ad3c:	440b      	add	r3, r1
 801ad3e:	3314      	adds	r3, #20
 801ad40:	781b      	ldrb	r3, [r3, #0]
 801ad42:	2b01      	cmp	r3, #1
 801ad44:	d917      	bls.n	801ad76 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801ad46:	4a49      	ldr	r2, [pc, #292]	@ (801ae6c <etharp_query+0x274>)
 801ad48:	7c7b      	ldrb	r3, [r7, #17]
 801ad4a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801ad4c:	7c7a      	ldrb	r2, [r7, #17]
 801ad4e:	4613      	mov	r3, r2
 801ad50:	005b      	lsls	r3, r3, #1
 801ad52:	4413      	add	r3, r2
 801ad54:	00db      	lsls	r3, r3, #3
 801ad56:	3308      	adds	r3, #8
 801ad58:	4a41      	ldr	r2, [pc, #260]	@ (801ae60 <etharp_query+0x268>)
 801ad5a:	4413      	add	r3, r2
 801ad5c:	3304      	adds	r3, #4
 801ad5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801ad62:	9200      	str	r2, [sp, #0]
 801ad64:	697a      	ldr	r2, [r7, #20]
 801ad66:	6879      	ldr	r1, [r7, #4]
 801ad68:	68f8      	ldr	r0, [r7, #12]
 801ad6a:	f001 fcb9 	bl	801c6e0 <ethernet_output>
 801ad6e:	4603      	mov	r3, r0
 801ad70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ad74:	e067      	b.n	801ae46 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ad76:	7c7a      	ldrb	r2, [r7, #17]
 801ad78:	4939      	ldr	r1, [pc, #228]	@ (801ae60 <etharp_query+0x268>)
 801ad7a:	4613      	mov	r3, r2
 801ad7c:	005b      	lsls	r3, r3, #1
 801ad7e:	4413      	add	r3, r2
 801ad80:	00db      	lsls	r3, r3, #3
 801ad82:	440b      	add	r3, r1
 801ad84:	3314      	adds	r3, #20
 801ad86:	781b      	ldrb	r3, [r3, #0]
 801ad88:	2b01      	cmp	r3, #1
 801ad8a:	d15c      	bne.n	801ae46 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801ad8c:	2300      	movs	r3, #0
 801ad8e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ad94:	e01c      	b.n	801add0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801ad96:	69fb      	ldr	r3, [r7, #28]
 801ad98:	895a      	ldrh	r2, [r3, #10]
 801ad9a:	69fb      	ldr	r3, [r7, #28]
 801ad9c:	891b      	ldrh	r3, [r3, #8]
 801ad9e:	429a      	cmp	r2, r3
 801ada0:	d10a      	bne.n	801adb8 <etharp_query+0x1c0>
 801ada2:	69fb      	ldr	r3, [r7, #28]
 801ada4:	681b      	ldr	r3, [r3, #0]
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d006      	beq.n	801adb8 <etharp_query+0x1c0>
 801adaa:	4b2a      	ldr	r3, [pc, #168]	@ (801ae54 <etharp_query+0x25c>)
 801adac:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801adb0:	492f      	ldr	r1, [pc, #188]	@ (801ae70 <etharp_query+0x278>)
 801adb2:	482a      	ldr	r0, [pc, #168]	@ (801ae5c <etharp_query+0x264>)
 801adb4:	f002 fb06 	bl	801d3c4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801adb8:	69fb      	ldr	r3, [r7, #28]
 801adba:	7b1b      	ldrb	r3, [r3, #12]
 801adbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d002      	beq.n	801adca <etharp_query+0x1d2>
        copy_needed = 1;
 801adc4:	2301      	movs	r3, #1
 801adc6:	61bb      	str	r3, [r7, #24]
        break;
 801adc8:	e005      	b.n	801add6 <etharp_query+0x1de>
      }
      p = p->next;
 801adca:	69fb      	ldr	r3, [r7, #28]
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	61fb      	str	r3, [r7, #28]
    while (p) {
 801add0:	69fb      	ldr	r3, [r7, #28]
 801add2:	2b00      	cmp	r3, #0
 801add4:	d1df      	bne.n	801ad96 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801add6:	69bb      	ldr	r3, [r7, #24]
 801add8:	2b00      	cmp	r3, #0
 801adda:	d007      	beq.n	801adec <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801addc:	687a      	ldr	r2, [r7, #4]
 801adde:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801ade2:	200e      	movs	r0, #14
 801ade4:	f7f7 fb68 	bl	80124b8 <pbuf_clone>
 801ade8:	61f8      	str	r0, [r7, #28]
 801adea:	e004      	b.n	801adf6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801adf0:	69f8      	ldr	r0, [r7, #28]
 801adf2:	f7f7 f98f 	bl	8012114 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801adf6:	69fb      	ldr	r3, [r7, #28]
 801adf8:	2b00      	cmp	r3, #0
 801adfa:	d021      	beq.n	801ae40 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801adfc:	7c7a      	ldrb	r2, [r7, #17]
 801adfe:	4918      	ldr	r1, [pc, #96]	@ (801ae60 <etharp_query+0x268>)
 801ae00:	4613      	mov	r3, r2
 801ae02:	005b      	lsls	r3, r3, #1
 801ae04:	4413      	add	r3, r2
 801ae06:	00db      	lsls	r3, r3, #3
 801ae08:	440b      	add	r3, r1
 801ae0a:	681b      	ldr	r3, [r3, #0]
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	d00a      	beq.n	801ae26 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801ae10:	7c7a      	ldrb	r2, [r7, #17]
 801ae12:	4913      	ldr	r1, [pc, #76]	@ (801ae60 <etharp_query+0x268>)
 801ae14:	4613      	mov	r3, r2
 801ae16:	005b      	lsls	r3, r3, #1
 801ae18:	4413      	add	r3, r2
 801ae1a:	00db      	lsls	r3, r3, #3
 801ae1c:	440b      	add	r3, r1
 801ae1e:	681b      	ldr	r3, [r3, #0]
 801ae20:	4618      	mov	r0, r3
 801ae22:	f7f7 f8d1 	bl	8011fc8 <pbuf_free>
      }
      arp_table[i].q = p;
 801ae26:	7c7a      	ldrb	r2, [r7, #17]
 801ae28:	490d      	ldr	r1, [pc, #52]	@ (801ae60 <etharp_query+0x268>)
 801ae2a:	4613      	mov	r3, r2
 801ae2c:	005b      	lsls	r3, r3, #1
 801ae2e:	4413      	add	r3, r2
 801ae30:	00db      	lsls	r3, r3, #3
 801ae32:	440b      	add	r3, r1
 801ae34:	69fa      	ldr	r2, [r7, #28]
 801ae36:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801ae38:	2300      	movs	r3, #0
 801ae3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ae3e:	e002      	b.n	801ae46 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801ae40:	23ff      	movs	r3, #255	@ 0xff
 801ae42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801ae46:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801ae4a:	4618      	mov	r0, r3
 801ae4c:	3728      	adds	r7, #40	@ 0x28
 801ae4e:	46bd      	mov	sp, r7
 801ae50:	bd80      	pop	{r7, pc}
 801ae52:	bf00      	nop
 801ae54:	08021d5c 	.word	0x08021d5c
 801ae58:	08021f08 	.word	0x08021f08
 801ae5c:	08021dd4 	.word	0x08021dd4
 801ae60:	2400ccc8 	.word	0x2400ccc8
 801ae64:	08021f18 	.word	0x08021f18
 801ae68:	08021efc 	.word	0x08021efc
 801ae6c:	2400cdb8 	.word	0x2400cdb8
 801ae70:	08021f40 	.word	0x08021f40

0801ae74 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801ae74:	b580      	push	{r7, lr}
 801ae76:	b08a      	sub	sp, #40	@ 0x28
 801ae78:	af02      	add	r7, sp, #8
 801ae7a:	60f8      	str	r0, [r7, #12]
 801ae7c:	60b9      	str	r1, [r7, #8]
 801ae7e:	607a      	str	r2, [r7, #4]
 801ae80:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801ae82:	2300      	movs	r3, #0
 801ae84:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ae86:	68fb      	ldr	r3, [r7, #12]
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	d106      	bne.n	801ae9a <etharp_raw+0x26>
 801ae8c:	4b3a      	ldr	r3, [pc, #232]	@ (801af78 <etharp_raw+0x104>)
 801ae8e:	f240 4257 	movw	r2, #1111	@ 0x457
 801ae92:	493a      	ldr	r1, [pc, #232]	@ (801af7c <etharp_raw+0x108>)
 801ae94:	483a      	ldr	r0, [pc, #232]	@ (801af80 <etharp_raw+0x10c>)
 801ae96:	f002 fa95 	bl	801d3c4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801ae9a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ae9e:	211c      	movs	r1, #28
 801aea0:	200e      	movs	r0, #14
 801aea2:	f7f6 fdad 	bl	8011a00 <pbuf_alloc>
 801aea6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801aea8:	69bb      	ldr	r3, [r7, #24]
 801aeaa:	2b00      	cmp	r3, #0
 801aeac:	d102      	bne.n	801aeb4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801aeae:	f04f 33ff 	mov.w	r3, #4294967295
 801aeb2:	e05d      	b.n	801af70 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801aeb4:	69bb      	ldr	r3, [r7, #24]
 801aeb6:	895b      	ldrh	r3, [r3, #10]
 801aeb8:	2b1b      	cmp	r3, #27
 801aeba:	d806      	bhi.n	801aeca <etharp_raw+0x56>
 801aebc:	4b2e      	ldr	r3, [pc, #184]	@ (801af78 <etharp_raw+0x104>)
 801aebe:	f240 4262 	movw	r2, #1122	@ 0x462
 801aec2:	4930      	ldr	r1, [pc, #192]	@ (801af84 <etharp_raw+0x110>)
 801aec4:	482e      	ldr	r0, [pc, #184]	@ (801af80 <etharp_raw+0x10c>)
 801aec6:	f002 fa7d 	bl	801d3c4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801aeca:	69bb      	ldr	r3, [r7, #24]
 801aecc:	685b      	ldr	r3, [r3, #4]
 801aece:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801aed0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801aed2:	4618      	mov	r0, r3
 801aed4:	f7f5 fbc2 	bl	801065c <lwip_htons>
 801aed8:	4603      	mov	r3, r0
 801aeda:	461a      	mov	r2, r3
 801aedc:	697b      	ldr	r3, [r7, #20]
 801aede:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801aee0:	68fb      	ldr	r3, [r7, #12]
 801aee2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801aee6:	2b06      	cmp	r3, #6
 801aee8:	d006      	beq.n	801aef8 <etharp_raw+0x84>
 801aeea:	4b23      	ldr	r3, [pc, #140]	@ (801af78 <etharp_raw+0x104>)
 801aeec:	f240 4269 	movw	r2, #1129	@ 0x469
 801aef0:	4925      	ldr	r1, [pc, #148]	@ (801af88 <etharp_raw+0x114>)
 801aef2:	4823      	ldr	r0, [pc, #140]	@ (801af80 <etharp_raw+0x10c>)
 801aef4:	f002 fa66 	bl	801d3c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801aef8:	697b      	ldr	r3, [r7, #20]
 801aefa:	3308      	adds	r3, #8
 801aefc:	2206      	movs	r2, #6
 801aefe:	6839      	ldr	r1, [r7, #0]
 801af00:	4618      	mov	r0, r3
 801af02:	f002 fc86 	bl	801d812 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801af06:	697b      	ldr	r3, [r7, #20]
 801af08:	3312      	adds	r3, #18
 801af0a:	2206      	movs	r2, #6
 801af0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801af0e:	4618      	mov	r0, r3
 801af10:	f002 fc7f 	bl	801d812 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801af14:	697b      	ldr	r3, [r7, #20]
 801af16:	330e      	adds	r3, #14
 801af18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801af1a:	6812      	ldr	r2, [r2, #0]
 801af1c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801af1e:	697b      	ldr	r3, [r7, #20]
 801af20:	3318      	adds	r3, #24
 801af22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801af24:	6812      	ldr	r2, [r2, #0]
 801af26:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801af28:	697b      	ldr	r3, [r7, #20]
 801af2a:	2200      	movs	r2, #0
 801af2c:	701a      	strb	r2, [r3, #0]
 801af2e:	2200      	movs	r2, #0
 801af30:	f042 0201 	orr.w	r2, r2, #1
 801af34:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801af36:	697b      	ldr	r3, [r7, #20]
 801af38:	2200      	movs	r2, #0
 801af3a:	f042 0208 	orr.w	r2, r2, #8
 801af3e:	709a      	strb	r2, [r3, #2]
 801af40:	2200      	movs	r2, #0
 801af42:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801af44:	697b      	ldr	r3, [r7, #20]
 801af46:	2206      	movs	r2, #6
 801af48:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801af4a:	697b      	ldr	r3, [r7, #20]
 801af4c:	2204      	movs	r2, #4
 801af4e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801af50:	f640 0306 	movw	r3, #2054	@ 0x806
 801af54:	9300      	str	r3, [sp, #0]
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	68ba      	ldr	r2, [r7, #8]
 801af5a:	69b9      	ldr	r1, [r7, #24]
 801af5c:	68f8      	ldr	r0, [r7, #12]
 801af5e:	f001 fbbf 	bl	801c6e0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801af62:	69b8      	ldr	r0, [r7, #24]
 801af64:	f7f7 f830 	bl	8011fc8 <pbuf_free>
  p = NULL;
 801af68:	2300      	movs	r3, #0
 801af6a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801af6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801af70:	4618      	mov	r0, r3
 801af72:	3720      	adds	r7, #32
 801af74:	46bd      	mov	sp, r7
 801af76:	bd80      	pop	{r7, pc}
 801af78:	08021d5c 	.word	0x08021d5c
 801af7c:	08021eac 	.word	0x08021eac
 801af80:	08021dd4 	.word	0x08021dd4
 801af84:	08021f5c 	.word	0x08021f5c
 801af88:	08021f90 	.word	0x08021f90

0801af8c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801af8c:	b580      	push	{r7, lr}
 801af8e:	b088      	sub	sp, #32
 801af90:	af04      	add	r7, sp, #16
 801af92:	60f8      	str	r0, [r7, #12]
 801af94:	60b9      	str	r1, [r7, #8]
 801af96:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801af98:	68fb      	ldr	r3, [r7, #12]
 801af9a:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801af9e:	68fb      	ldr	r3, [r7, #12]
 801afa0:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801afa4:	68fb      	ldr	r3, [r7, #12]
 801afa6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801afa8:	2201      	movs	r2, #1
 801afaa:	9203      	str	r2, [sp, #12]
 801afac:	68ba      	ldr	r2, [r7, #8]
 801afae:	9202      	str	r2, [sp, #8]
 801afb0:	4a06      	ldr	r2, [pc, #24]	@ (801afcc <etharp_request_dst+0x40>)
 801afb2:	9201      	str	r2, [sp, #4]
 801afb4:	9300      	str	r3, [sp, #0]
 801afb6:	4603      	mov	r3, r0
 801afb8:	687a      	ldr	r2, [r7, #4]
 801afba:	68f8      	ldr	r0, [r7, #12]
 801afbc:	f7ff ff5a 	bl	801ae74 <etharp_raw>
 801afc0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801afc2:	4618      	mov	r0, r3
 801afc4:	3710      	adds	r7, #16
 801afc6:	46bd      	mov	sp, r7
 801afc8:	bd80      	pop	{r7, pc}
 801afca:	bf00      	nop
 801afcc:	08022620 	.word	0x08022620

0801afd0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801afd0:	b580      	push	{r7, lr}
 801afd2:	b082      	sub	sp, #8
 801afd4:	af00      	add	r7, sp, #0
 801afd6:	6078      	str	r0, [r7, #4]
 801afd8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801afda:	4a05      	ldr	r2, [pc, #20]	@ (801aff0 <etharp_request+0x20>)
 801afdc:	6839      	ldr	r1, [r7, #0]
 801afde:	6878      	ldr	r0, [r7, #4]
 801afe0:	f7ff ffd4 	bl	801af8c <etharp_request_dst>
 801afe4:	4603      	mov	r3, r0
}
 801afe6:	4618      	mov	r0, r3
 801afe8:	3708      	adds	r7, #8
 801afea:	46bd      	mov	sp, r7
 801afec:	bd80      	pop	{r7, pc}
 801afee:	bf00      	nop
 801aff0:	08022618 	.word	0x08022618

0801aff4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801aff4:	b580      	push	{r7, lr}
 801aff6:	b08e      	sub	sp, #56	@ 0x38
 801aff8:	af04      	add	r7, sp, #16
 801affa:	6078      	str	r0, [r7, #4]
 801affc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801affe:	4b87      	ldr	r3, [pc, #540]	@ (801b21c <icmp_input+0x228>)
 801b000:	689b      	ldr	r3, [r3, #8]
 801b002:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801b004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b006:	781b      	ldrb	r3, [r3, #0]
 801b008:	f003 030f 	and.w	r3, r3, #15
 801b00c:	b2db      	uxtb	r3, r3
 801b00e:	009b      	lsls	r3, r3, #2
 801b010:	b2db      	uxtb	r3, r3
 801b012:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801b014:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b016:	2b13      	cmp	r3, #19
 801b018:	f240 80e8 	bls.w	801b1ec <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	895b      	ldrh	r3, [r3, #10]
 801b020:	2b03      	cmp	r3, #3
 801b022:	f240 80e5 	bls.w	801b1f0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	685b      	ldr	r3, [r3, #4]
 801b02a:	781b      	ldrb	r3, [r3, #0]
 801b02c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801b030:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801b034:	2b00      	cmp	r3, #0
 801b036:	f000 80d2 	beq.w	801b1de <icmp_input+0x1ea>
 801b03a:	2b08      	cmp	r3, #8
 801b03c:	f040 80d2 	bne.w	801b1e4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801b040:	4b77      	ldr	r3, [pc, #476]	@ (801b220 <icmp_input+0x22c>)
 801b042:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b044:	4b75      	ldr	r3, [pc, #468]	@ (801b21c <icmp_input+0x228>)
 801b046:	695b      	ldr	r3, [r3, #20]
 801b048:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b04c:	2be0      	cmp	r3, #224	@ 0xe0
 801b04e:	f000 80d6 	beq.w	801b1fe <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801b052:	4b72      	ldr	r3, [pc, #456]	@ (801b21c <icmp_input+0x228>)
 801b054:	695b      	ldr	r3, [r3, #20]
 801b056:	4a71      	ldr	r2, [pc, #452]	@ (801b21c <icmp_input+0x228>)
 801b058:	6812      	ldr	r2, [r2, #0]
 801b05a:	4611      	mov	r1, r2
 801b05c:	4618      	mov	r0, r3
 801b05e:	f000 fc31 	bl	801b8c4 <ip4_addr_isbroadcast_u32>
 801b062:	4603      	mov	r3, r0
 801b064:	2b00      	cmp	r3, #0
 801b066:	f040 80cc 	bne.w	801b202 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	891b      	ldrh	r3, [r3, #8]
 801b06e:	2b07      	cmp	r3, #7
 801b070:	f240 80c0 	bls.w	801b1f4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 801b074:	6878      	ldr	r0, [r7, #4]
 801b076:	f7f5 fb8e 	bl	8010796 <inet_chksum_pbuf>
 801b07a:	4603      	mov	r3, r0
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d003      	beq.n	801b088 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801b080:	6878      	ldr	r0, [r7, #4]
 801b082:	f7f6 ffa1 	bl	8011fc8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801b086:	e0c5      	b.n	801b214 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b088:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b08a:	330e      	adds	r3, #14
 801b08c:	4619      	mov	r1, r3
 801b08e:	6878      	ldr	r0, [r7, #4]
 801b090:	f7f6 ff04 	bl	8011e9c <pbuf_add_header>
 801b094:	4603      	mov	r3, r0
 801b096:	2b00      	cmp	r3, #0
 801b098:	d04b      	beq.n	801b132 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801b09a:	687b      	ldr	r3, [r7, #4]
 801b09c:	891a      	ldrh	r2, [r3, #8]
 801b09e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b0a0:	4413      	add	r3, r2
 801b0a2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	891b      	ldrh	r3, [r3, #8]
 801b0a8:	8b7a      	ldrh	r2, [r7, #26]
 801b0aa:	429a      	cmp	r2, r3
 801b0ac:	f0c0 80ab 	bcc.w	801b206 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801b0b0:	8b7b      	ldrh	r3, [r7, #26]
 801b0b2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b0b6:	4619      	mov	r1, r3
 801b0b8:	200e      	movs	r0, #14
 801b0ba:	f7f6 fca1 	bl	8011a00 <pbuf_alloc>
 801b0be:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801b0c0:	697b      	ldr	r3, [r7, #20]
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	f000 80a1 	beq.w	801b20a <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b0c8:	697b      	ldr	r3, [r7, #20]
 801b0ca:	895b      	ldrh	r3, [r3, #10]
 801b0cc:	461a      	mov	r2, r3
 801b0ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b0d0:	3308      	adds	r3, #8
 801b0d2:	429a      	cmp	r2, r3
 801b0d4:	d203      	bcs.n	801b0de <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801b0d6:	6978      	ldr	r0, [r7, #20]
 801b0d8:	f7f6 ff76 	bl	8011fc8 <pbuf_free>
          goto icmperr;
 801b0dc:	e096      	b.n	801b20c <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801b0de:	697b      	ldr	r3, [r7, #20]
 801b0e0:	685b      	ldr	r3, [r3, #4]
 801b0e2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801b0e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b0e6:	4618      	mov	r0, r3
 801b0e8:	f002 fb93 	bl	801d812 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b0ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b0ee:	4619      	mov	r1, r3
 801b0f0:	6978      	ldr	r0, [r7, #20]
 801b0f2:	f7f6 fee3 	bl	8011ebc <pbuf_remove_header>
 801b0f6:	4603      	mov	r3, r0
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	d009      	beq.n	801b110 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b0fc:	4b49      	ldr	r3, [pc, #292]	@ (801b224 <icmp_input+0x230>)
 801b0fe:	22b6      	movs	r2, #182	@ 0xb6
 801b100:	4949      	ldr	r1, [pc, #292]	@ (801b228 <icmp_input+0x234>)
 801b102:	484a      	ldr	r0, [pc, #296]	@ (801b22c <icmp_input+0x238>)
 801b104:	f002 f95e 	bl	801d3c4 <iprintf>
          pbuf_free(r);
 801b108:	6978      	ldr	r0, [r7, #20]
 801b10a:	f7f6 ff5d 	bl	8011fc8 <pbuf_free>
          goto icmperr;
 801b10e:	e07d      	b.n	801b20c <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801b110:	6879      	ldr	r1, [r7, #4]
 801b112:	6978      	ldr	r0, [r7, #20]
 801b114:	f7f7 f88c 	bl	8012230 <pbuf_copy>
 801b118:	4603      	mov	r3, r0
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d003      	beq.n	801b126 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801b11e:	6978      	ldr	r0, [r7, #20]
 801b120:	f7f6 ff52 	bl	8011fc8 <pbuf_free>
          goto icmperr;
 801b124:	e072      	b.n	801b20c <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801b126:	6878      	ldr	r0, [r7, #4]
 801b128:	f7f6 ff4e 	bl	8011fc8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801b12c:	697b      	ldr	r3, [r7, #20]
 801b12e:	607b      	str	r3, [r7, #4]
 801b130:	e00f      	b.n	801b152 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b132:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b134:	330e      	adds	r3, #14
 801b136:	4619      	mov	r1, r3
 801b138:	6878      	ldr	r0, [r7, #4]
 801b13a:	f7f6 febf 	bl	8011ebc <pbuf_remove_header>
 801b13e:	4603      	mov	r3, r0
 801b140:	2b00      	cmp	r3, #0
 801b142:	d006      	beq.n	801b152 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801b144:	4b37      	ldr	r3, [pc, #220]	@ (801b224 <icmp_input+0x230>)
 801b146:	22c7      	movs	r2, #199	@ 0xc7
 801b148:	4939      	ldr	r1, [pc, #228]	@ (801b230 <icmp_input+0x23c>)
 801b14a:	4838      	ldr	r0, [pc, #224]	@ (801b22c <icmp_input+0x238>)
 801b14c:	f002 f93a 	bl	801d3c4 <iprintf>
          goto icmperr;
 801b150:	e05c      	b.n	801b20c <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	685b      	ldr	r3, [r3, #4]
 801b156:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801b158:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b15a:	4619      	mov	r1, r3
 801b15c:	6878      	ldr	r0, [r7, #4]
 801b15e:	f7f6 fe9d 	bl	8011e9c <pbuf_add_header>
 801b162:	4603      	mov	r3, r0
 801b164:	2b00      	cmp	r3, #0
 801b166:	d13c      	bne.n	801b1e2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	685b      	ldr	r3, [r3, #4]
 801b16c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801b16e:	69fb      	ldr	r3, [r7, #28]
 801b170:	681a      	ldr	r2, [r3, #0]
 801b172:	68fb      	ldr	r3, [r7, #12]
 801b174:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801b176:	4b29      	ldr	r3, [pc, #164]	@ (801b21c <icmp_input+0x228>)
 801b178:	691a      	ldr	r2, [r3, #16]
 801b17a:	68fb      	ldr	r3, [r7, #12]
 801b17c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801b17e:	693b      	ldr	r3, [r7, #16]
 801b180:	2200      	movs	r2, #0
 801b182:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801b184:	693b      	ldr	r3, [r7, #16]
 801b186:	885b      	ldrh	r3, [r3, #2]
 801b188:	b29b      	uxth	r3, r3
 801b18a:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801b18e:	4293      	cmp	r3, r2
 801b190:	d907      	bls.n	801b1a2 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801b192:	693b      	ldr	r3, [r7, #16]
 801b194:	885b      	ldrh	r3, [r3, #2]
 801b196:	b29b      	uxth	r3, r3
 801b198:	3309      	adds	r3, #9
 801b19a:	b29a      	uxth	r2, r3
 801b19c:	693b      	ldr	r3, [r7, #16]
 801b19e:	805a      	strh	r2, [r3, #2]
 801b1a0:	e006      	b.n	801b1b0 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801b1a2:	693b      	ldr	r3, [r7, #16]
 801b1a4:	885b      	ldrh	r3, [r3, #2]
 801b1a6:	b29b      	uxth	r3, r3
 801b1a8:	3308      	adds	r3, #8
 801b1aa:	b29a      	uxth	r2, r3
 801b1ac:	693b      	ldr	r3, [r7, #16]
 801b1ae:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801b1b0:	68fb      	ldr	r3, [r7, #12]
 801b1b2:	22ff      	movs	r2, #255	@ 0xff
 801b1b4:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801b1b6:	68fb      	ldr	r3, [r7, #12]
 801b1b8:	2200      	movs	r2, #0
 801b1ba:	729a      	strb	r2, [r3, #10]
 801b1bc:	2200      	movs	r2, #0
 801b1be:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b1c0:	683b      	ldr	r3, [r7, #0]
 801b1c2:	9302      	str	r3, [sp, #8]
 801b1c4:	2301      	movs	r3, #1
 801b1c6:	9301      	str	r3, [sp, #4]
 801b1c8:	2300      	movs	r3, #0
 801b1ca:	9300      	str	r3, [sp, #0]
 801b1cc:	23ff      	movs	r3, #255	@ 0xff
 801b1ce:	2200      	movs	r2, #0
 801b1d0:	69f9      	ldr	r1, [r7, #28]
 801b1d2:	6878      	ldr	r0, [r7, #4]
 801b1d4:	f000 fa9e 	bl	801b714 <ip4_output_if>
 801b1d8:	4603      	mov	r3, r0
 801b1da:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801b1dc:	e001      	b.n	801b1e2 <icmp_input+0x1ee>
      break;
 801b1de:	bf00      	nop
 801b1e0:	e000      	b.n	801b1e4 <icmp_input+0x1f0>
      break;
 801b1e2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801b1e4:	6878      	ldr	r0, [r7, #4]
 801b1e6:	f7f6 feef 	bl	8011fc8 <pbuf_free>
  return;
 801b1ea:	e013      	b.n	801b214 <icmp_input+0x220>
    goto lenerr;
 801b1ec:	bf00      	nop
 801b1ee:	e002      	b.n	801b1f6 <icmp_input+0x202>
    goto lenerr;
 801b1f0:	bf00      	nop
 801b1f2:	e000      	b.n	801b1f6 <icmp_input+0x202>
        goto lenerr;
 801b1f4:	bf00      	nop
lenerr:
  pbuf_free(p);
 801b1f6:	6878      	ldr	r0, [r7, #4]
 801b1f8:	f7f6 fee6 	bl	8011fc8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b1fc:	e00a      	b.n	801b214 <icmp_input+0x220>
        goto icmperr;
 801b1fe:	bf00      	nop
 801b200:	e004      	b.n	801b20c <icmp_input+0x218>
        goto icmperr;
 801b202:	bf00      	nop
 801b204:	e002      	b.n	801b20c <icmp_input+0x218>
          goto icmperr;
 801b206:	bf00      	nop
 801b208:	e000      	b.n	801b20c <icmp_input+0x218>
          goto icmperr;
 801b20a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801b20c:	6878      	ldr	r0, [r7, #4]
 801b20e:	f7f6 fedb 	bl	8011fc8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b212:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801b214:	3728      	adds	r7, #40	@ 0x28
 801b216:	46bd      	mov	sp, r7
 801b218:	bd80      	pop	{r7, pc}
 801b21a:	bf00      	nop
 801b21c:	24009b14 	.word	0x24009b14
 801b220:	24009b28 	.word	0x24009b28
 801b224:	08021fd4 	.word	0x08021fd4
 801b228:	0802200c 	.word	0x0802200c
 801b22c:	08022044 	.word	0x08022044
 801b230:	0802206c 	.word	0x0802206c

0801b234 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801b234:	b580      	push	{r7, lr}
 801b236:	b082      	sub	sp, #8
 801b238:	af00      	add	r7, sp, #0
 801b23a:	6078      	str	r0, [r7, #4]
 801b23c:	460b      	mov	r3, r1
 801b23e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801b240:	78fb      	ldrb	r3, [r7, #3]
 801b242:	461a      	mov	r2, r3
 801b244:	2103      	movs	r1, #3
 801b246:	6878      	ldr	r0, [r7, #4]
 801b248:	f000 f814 	bl	801b274 <icmp_send_response>
}
 801b24c:	bf00      	nop
 801b24e:	3708      	adds	r7, #8
 801b250:	46bd      	mov	sp, r7
 801b252:	bd80      	pop	{r7, pc}

0801b254 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801b254:	b580      	push	{r7, lr}
 801b256:	b082      	sub	sp, #8
 801b258:	af00      	add	r7, sp, #0
 801b25a:	6078      	str	r0, [r7, #4]
 801b25c:	460b      	mov	r3, r1
 801b25e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801b260:	78fb      	ldrb	r3, [r7, #3]
 801b262:	461a      	mov	r2, r3
 801b264:	210b      	movs	r1, #11
 801b266:	6878      	ldr	r0, [r7, #4]
 801b268:	f000 f804 	bl	801b274 <icmp_send_response>
}
 801b26c:	bf00      	nop
 801b26e:	3708      	adds	r7, #8
 801b270:	46bd      	mov	sp, r7
 801b272:	bd80      	pop	{r7, pc}

0801b274 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801b274:	b580      	push	{r7, lr}
 801b276:	b08c      	sub	sp, #48	@ 0x30
 801b278:	af04      	add	r7, sp, #16
 801b27a:	6078      	str	r0, [r7, #4]
 801b27c:	460b      	mov	r3, r1
 801b27e:	70fb      	strb	r3, [r7, #3]
 801b280:	4613      	mov	r3, r2
 801b282:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801b284:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b288:	2124      	movs	r1, #36	@ 0x24
 801b28a:	2022      	movs	r0, #34	@ 0x22
 801b28c:	f7f6 fbb8 	bl	8011a00 <pbuf_alloc>
 801b290:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801b292:	69fb      	ldr	r3, [r7, #28]
 801b294:	2b00      	cmp	r3, #0
 801b296:	d056      	beq.n	801b346 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b298:	69fb      	ldr	r3, [r7, #28]
 801b29a:	895b      	ldrh	r3, [r3, #10]
 801b29c:	2b23      	cmp	r3, #35	@ 0x23
 801b29e:	d806      	bhi.n	801b2ae <icmp_send_response+0x3a>
 801b2a0:	4b2b      	ldr	r3, [pc, #172]	@ (801b350 <icmp_send_response+0xdc>)
 801b2a2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801b2a6:	492b      	ldr	r1, [pc, #172]	@ (801b354 <icmp_send_response+0xe0>)
 801b2a8:	482b      	ldr	r0, [pc, #172]	@ (801b358 <icmp_send_response+0xe4>)
 801b2aa:	f002 f88b 	bl	801d3c4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	685b      	ldr	r3, [r3, #4]
 801b2b2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801b2b4:	69fb      	ldr	r3, [r7, #28]
 801b2b6:	685b      	ldr	r3, [r3, #4]
 801b2b8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801b2ba:	697b      	ldr	r3, [r7, #20]
 801b2bc:	78fa      	ldrb	r2, [r7, #3]
 801b2be:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801b2c0:	697b      	ldr	r3, [r7, #20]
 801b2c2:	78ba      	ldrb	r2, [r7, #2]
 801b2c4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801b2c6:	697b      	ldr	r3, [r7, #20]
 801b2c8:	2200      	movs	r2, #0
 801b2ca:	711a      	strb	r2, [r3, #4]
 801b2cc:	2200      	movs	r2, #0
 801b2ce:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801b2d0:	697b      	ldr	r3, [r7, #20]
 801b2d2:	2200      	movs	r2, #0
 801b2d4:	719a      	strb	r2, [r3, #6]
 801b2d6:	2200      	movs	r2, #0
 801b2d8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801b2da:	69fb      	ldr	r3, [r7, #28]
 801b2dc:	685b      	ldr	r3, [r3, #4]
 801b2de:	f103 0008 	add.w	r0, r3, #8
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	685b      	ldr	r3, [r3, #4]
 801b2e6:	221c      	movs	r2, #28
 801b2e8:	4619      	mov	r1, r3
 801b2ea:	f002 fa92 	bl	801d812 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801b2ee:	69bb      	ldr	r3, [r7, #24]
 801b2f0:	68db      	ldr	r3, [r3, #12]
 801b2f2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801b2f4:	f107 030c 	add.w	r3, r7, #12
 801b2f8:	4618      	mov	r0, r3
 801b2fa:	f000 f82f 	bl	801b35c <ip4_route>
 801b2fe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801b300:	693b      	ldr	r3, [r7, #16]
 801b302:	2b00      	cmp	r3, #0
 801b304:	d01b      	beq.n	801b33e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801b306:	697b      	ldr	r3, [r7, #20]
 801b308:	2200      	movs	r2, #0
 801b30a:	709a      	strb	r2, [r3, #2]
 801b30c:	2200      	movs	r2, #0
 801b30e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801b310:	69fb      	ldr	r3, [r7, #28]
 801b312:	895b      	ldrh	r3, [r3, #10]
 801b314:	4619      	mov	r1, r3
 801b316:	6978      	ldr	r0, [r7, #20]
 801b318:	f7f5 fa2b 	bl	8010772 <inet_chksum>
 801b31c:	4603      	mov	r3, r0
 801b31e:	461a      	mov	r2, r3
 801b320:	697b      	ldr	r3, [r7, #20]
 801b322:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b324:	f107 020c 	add.w	r2, r7, #12
 801b328:	693b      	ldr	r3, [r7, #16]
 801b32a:	9302      	str	r3, [sp, #8]
 801b32c:	2301      	movs	r3, #1
 801b32e:	9301      	str	r3, [sp, #4]
 801b330:	2300      	movs	r3, #0
 801b332:	9300      	str	r3, [sp, #0]
 801b334:	23ff      	movs	r3, #255	@ 0xff
 801b336:	2100      	movs	r1, #0
 801b338:	69f8      	ldr	r0, [r7, #28]
 801b33a:	f000 f9eb 	bl	801b714 <ip4_output_if>
  }
  pbuf_free(q);
 801b33e:	69f8      	ldr	r0, [r7, #28]
 801b340:	f7f6 fe42 	bl	8011fc8 <pbuf_free>
 801b344:	e000      	b.n	801b348 <icmp_send_response+0xd4>
    return;
 801b346:	bf00      	nop
}
 801b348:	3720      	adds	r7, #32
 801b34a:	46bd      	mov	sp, r7
 801b34c:	bd80      	pop	{r7, pc}
 801b34e:	bf00      	nop
 801b350:	08021fd4 	.word	0x08021fd4
 801b354:	080220a0 	.word	0x080220a0
 801b358:	08022044 	.word	0x08022044

0801b35c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801b35c:	b480      	push	{r7}
 801b35e:	b085      	sub	sp, #20
 801b360:	af00      	add	r7, sp, #0
 801b362:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801b364:	4b33      	ldr	r3, [pc, #204]	@ (801b434 <ip4_route+0xd8>)
 801b366:	681b      	ldr	r3, [r3, #0]
 801b368:	60fb      	str	r3, [r7, #12]
 801b36a:	e036      	b.n	801b3da <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b36c:	68fb      	ldr	r3, [r7, #12]
 801b36e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b372:	f003 0301 	and.w	r3, r3, #1
 801b376:	b2db      	uxtb	r3, r3
 801b378:	2b00      	cmp	r3, #0
 801b37a:	d02b      	beq.n	801b3d4 <ip4_route+0x78>
 801b37c:	68fb      	ldr	r3, [r7, #12]
 801b37e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b382:	089b      	lsrs	r3, r3, #2
 801b384:	f003 0301 	and.w	r3, r3, #1
 801b388:	b2db      	uxtb	r3, r3
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	d022      	beq.n	801b3d4 <ip4_route+0x78>
 801b38e:	68fb      	ldr	r3, [r7, #12]
 801b390:	3304      	adds	r3, #4
 801b392:	681b      	ldr	r3, [r3, #0]
 801b394:	2b00      	cmp	r3, #0
 801b396:	d01d      	beq.n	801b3d4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	681a      	ldr	r2, [r3, #0]
 801b39c:	68fb      	ldr	r3, [r7, #12]
 801b39e:	3304      	adds	r3, #4
 801b3a0:	681b      	ldr	r3, [r3, #0]
 801b3a2:	405a      	eors	r2, r3
 801b3a4:	68fb      	ldr	r3, [r7, #12]
 801b3a6:	3308      	adds	r3, #8
 801b3a8:	681b      	ldr	r3, [r3, #0]
 801b3aa:	4013      	ands	r3, r2
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	d101      	bne.n	801b3b4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801b3b0:	68fb      	ldr	r3, [r7, #12]
 801b3b2:	e038      	b.n	801b426 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801b3b4:	68fb      	ldr	r3, [r7, #12]
 801b3b6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b3ba:	f003 0302 	and.w	r3, r3, #2
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	d108      	bne.n	801b3d4 <ip4_route+0x78>
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	681a      	ldr	r2, [r3, #0]
 801b3c6:	68fb      	ldr	r3, [r7, #12]
 801b3c8:	330c      	adds	r3, #12
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	429a      	cmp	r2, r3
 801b3ce:	d101      	bne.n	801b3d4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801b3d0:	68fb      	ldr	r3, [r7, #12]
 801b3d2:	e028      	b.n	801b426 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801b3d4:	68fb      	ldr	r3, [r7, #12]
 801b3d6:	681b      	ldr	r3, [r3, #0]
 801b3d8:	60fb      	str	r3, [r7, #12]
 801b3da:	68fb      	ldr	r3, [r7, #12]
 801b3dc:	2b00      	cmp	r3, #0
 801b3de:	d1c5      	bne.n	801b36c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b3e0:	4b15      	ldr	r3, [pc, #84]	@ (801b438 <ip4_route+0xdc>)
 801b3e2:	681b      	ldr	r3, [r3, #0]
 801b3e4:	2b00      	cmp	r3, #0
 801b3e6:	d01a      	beq.n	801b41e <ip4_route+0xc2>
 801b3e8:	4b13      	ldr	r3, [pc, #76]	@ (801b438 <ip4_route+0xdc>)
 801b3ea:	681b      	ldr	r3, [r3, #0]
 801b3ec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b3f0:	f003 0301 	and.w	r3, r3, #1
 801b3f4:	2b00      	cmp	r3, #0
 801b3f6:	d012      	beq.n	801b41e <ip4_route+0xc2>
 801b3f8:	4b0f      	ldr	r3, [pc, #60]	@ (801b438 <ip4_route+0xdc>)
 801b3fa:	681b      	ldr	r3, [r3, #0]
 801b3fc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b400:	f003 0304 	and.w	r3, r3, #4
 801b404:	2b00      	cmp	r3, #0
 801b406:	d00a      	beq.n	801b41e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b408:	4b0b      	ldr	r3, [pc, #44]	@ (801b438 <ip4_route+0xdc>)
 801b40a:	681b      	ldr	r3, [r3, #0]
 801b40c:	3304      	adds	r3, #4
 801b40e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b410:	2b00      	cmp	r3, #0
 801b412:	d004      	beq.n	801b41e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	b2db      	uxtb	r3, r3
 801b41a:	2b7f      	cmp	r3, #127	@ 0x7f
 801b41c:	d101      	bne.n	801b422 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801b41e:	2300      	movs	r3, #0
 801b420:	e001      	b.n	801b426 <ip4_route+0xca>
  }

  return netif_default;
 801b422:	4b05      	ldr	r3, [pc, #20]	@ (801b438 <ip4_route+0xdc>)
 801b424:	681b      	ldr	r3, [r3, #0]
}
 801b426:	4618      	mov	r0, r3
 801b428:	3714      	adds	r7, #20
 801b42a:	46bd      	mov	sp, r7
 801b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b430:	4770      	bx	lr
 801b432:	bf00      	nop
 801b434:	2400cc28 	.word	0x2400cc28
 801b438:	2400cc2c 	.word	0x2400cc2c

0801b43c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801b43c:	b580      	push	{r7, lr}
 801b43e:	b082      	sub	sp, #8
 801b440:	af00      	add	r7, sp, #0
 801b442:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b44a:	f003 0301 	and.w	r3, r3, #1
 801b44e:	b2db      	uxtb	r3, r3
 801b450:	2b00      	cmp	r3, #0
 801b452:	d016      	beq.n	801b482 <ip4_input_accept+0x46>
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	3304      	adds	r3, #4
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	2b00      	cmp	r3, #0
 801b45c:	d011      	beq.n	801b482 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b45e:	4b0b      	ldr	r3, [pc, #44]	@ (801b48c <ip4_input_accept+0x50>)
 801b460:	695a      	ldr	r2, [r3, #20]
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	3304      	adds	r3, #4
 801b466:	681b      	ldr	r3, [r3, #0]
 801b468:	429a      	cmp	r2, r3
 801b46a:	d008      	beq.n	801b47e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801b46c:	4b07      	ldr	r3, [pc, #28]	@ (801b48c <ip4_input_accept+0x50>)
 801b46e:	695b      	ldr	r3, [r3, #20]
 801b470:	6879      	ldr	r1, [r7, #4]
 801b472:	4618      	mov	r0, r3
 801b474:	f000 fa26 	bl	801b8c4 <ip4_addr_isbroadcast_u32>
 801b478:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d001      	beq.n	801b482 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801b47e:	2301      	movs	r3, #1
 801b480:	e000      	b.n	801b484 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801b482:	2300      	movs	r3, #0
}
 801b484:	4618      	mov	r0, r3
 801b486:	3708      	adds	r7, #8
 801b488:	46bd      	mov	sp, r7
 801b48a:	bd80      	pop	{r7, pc}
 801b48c:	24009b14 	.word	0x24009b14

0801b490 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801b490:	b580      	push	{r7, lr}
 801b492:	b088      	sub	sp, #32
 801b494:	af00      	add	r7, sp, #0
 801b496:	6078      	str	r0, [r7, #4]
 801b498:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801b49a:	2301      	movs	r3, #1
 801b49c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	685b      	ldr	r3, [r3, #4]
 801b4a2:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801b4a4:	69fb      	ldr	r3, [r7, #28]
 801b4a6:	781b      	ldrb	r3, [r3, #0]
 801b4a8:	091b      	lsrs	r3, r3, #4
 801b4aa:	b2db      	uxtb	r3, r3
 801b4ac:	2b04      	cmp	r3, #4
 801b4ae:	d004      	beq.n	801b4ba <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801b4b0:	6878      	ldr	r0, [r7, #4]
 801b4b2:	f7f6 fd89 	bl	8011fc8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801b4b6:	2300      	movs	r3, #0
 801b4b8:	e123      	b.n	801b702 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801b4ba:	69fb      	ldr	r3, [r7, #28]
 801b4bc:	781b      	ldrb	r3, [r3, #0]
 801b4be:	f003 030f 	and.w	r3, r3, #15
 801b4c2:	b2db      	uxtb	r3, r3
 801b4c4:	009b      	lsls	r3, r3, #2
 801b4c6:	b2db      	uxtb	r3, r3
 801b4c8:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b4ca:	69fb      	ldr	r3, [r7, #28]
 801b4cc:	885b      	ldrh	r3, [r3, #2]
 801b4ce:	b29b      	uxth	r3, r3
 801b4d0:	4618      	mov	r0, r3
 801b4d2:	f7f5 f8c3 	bl	801065c <lwip_htons>
 801b4d6:	4603      	mov	r3, r0
 801b4d8:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	891b      	ldrh	r3, [r3, #8]
 801b4de:	8a3a      	ldrh	r2, [r7, #16]
 801b4e0:	429a      	cmp	r2, r3
 801b4e2:	d204      	bcs.n	801b4ee <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801b4e4:	8a3b      	ldrh	r3, [r7, #16]
 801b4e6:	4619      	mov	r1, r3
 801b4e8:	6878      	ldr	r0, [r7, #4]
 801b4ea:	f7f6 fbe7 	bl	8011cbc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	895b      	ldrh	r3, [r3, #10]
 801b4f2:	8a7a      	ldrh	r2, [r7, #18]
 801b4f4:	429a      	cmp	r2, r3
 801b4f6:	d807      	bhi.n	801b508 <ip4_input+0x78>
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	891b      	ldrh	r3, [r3, #8]
 801b4fc:	8a3a      	ldrh	r2, [r7, #16]
 801b4fe:	429a      	cmp	r2, r3
 801b500:	d802      	bhi.n	801b508 <ip4_input+0x78>
 801b502:	8a7b      	ldrh	r3, [r7, #18]
 801b504:	2b13      	cmp	r3, #19
 801b506:	d804      	bhi.n	801b512 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801b508:	6878      	ldr	r0, [r7, #4]
 801b50a:	f7f6 fd5d 	bl	8011fc8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801b50e:	2300      	movs	r3, #0
 801b510:	e0f7      	b.n	801b702 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801b512:	69fb      	ldr	r3, [r7, #28]
 801b514:	691b      	ldr	r3, [r3, #16]
 801b516:	4a7d      	ldr	r2, [pc, #500]	@ (801b70c <ip4_input+0x27c>)
 801b518:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801b51a:	69fb      	ldr	r3, [r7, #28]
 801b51c:	68db      	ldr	r3, [r3, #12]
 801b51e:	4a7b      	ldr	r2, [pc, #492]	@ (801b70c <ip4_input+0x27c>)
 801b520:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b522:	4b7a      	ldr	r3, [pc, #488]	@ (801b70c <ip4_input+0x27c>)
 801b524:	695b      	ldr	r3, [r3, #20]
 801b526:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b52a:	2be0      	cmp	r3, #224	@ 0xe0
 801b52c:	d112      	bne.n	801b554 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801b52e:	683b      	ldr	r3, [r7, #0]
 801b530:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b534:	f003 0301 	and.w	r3, r3, #1
 801b538:	b2db      	uxtb	r3, r3
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	d007      	beq.n	801b54e <ip4_input+0xbe>
 801b53e:	683b      	ldr	r3, [r7, #0]
 801b540:	3304      	adds	r3, #4
 801b542:	681b      	ldr	r3, [r3, #0]
 801b544:	2b00      	cmp	r3, #0
 801b546:	d002      	beq.n	801b54e <ip4_input+0xbe>
      netif = inp;
 801b548:	683b      	ldr	r3, [r7, #0]
 801b54a:	61bb      	str	r3, [r7, #24]
 801b54c:	e02a      	b.n	801b5a4 <ip4_input+0x114>
    } else {
      netif = NULL;
 801b54e:	2300      	movs	r3, #0
 801b550:	61bb      	str	r3, [r7, #24]
 801b552:	e027      	b.n	801b5a4 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801b554:	6838      	ldr	r0, [r7, #0]
 801b556:	f7ff ff71 	bl	801b43c <ip4_input_accept>
 801b55a:	4603      	mov	r3, r0
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	d002      	beq.n	801b566 <ip4_input+0xd6>
      netif = inp;
 801b560:	683b      	ldr	r3, [r7, #0]
 801b562:	61bb      	str	r3, [r7, #24]
 801b564:	e01e      	b.n	801b5a4 <ip4_input+0x114>
    } else {
      netif = NULL;
 801b566:	2300      	movs	r3, #0
 801b568:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801b56a:	4b68      	ldr	r3, [pc, #416]	@ (801b70c <ip4_input+0x27c>)
 801b56c:	695b      	ldr	r3, [r3, #20]
 801b56e:	b2db      	uxtb	r3, r3
 801b570:	2b7f      	cmp	r3, #127	@ 0x7f
 801b572:	d017      	beq.n	801b5a4 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801b574:	4b66      	ldr	r3, [pc, #408]	@ (801b710 <ip4_input+0x280>)
 801b576:	681b      	ldr	r3, [r3, #0]
 801b578:	61bb      	str	r3, [r7, #24]
 801b57a:	e00e      	b.n	801b59a <ip4_input+0x10a>
          if (netif == inp) {
 801b57c:	69ba      	ldr	r2, [r7, #24]
 801b57e:	683b      	ldr	r3, [r7, #0]
 801b580:	429a      	cmp	r2, r3
 801b582:	d006      	beq.n	801b592 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801b584:	69b8      	ldr	r0, [r7, #24]
 801b586:	f7ff ff59 	bl	801b43c <ip4_input_accept>
 801b58a:	4603      	mov	r3, r0
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d108      	bne.n	801b5a2 <ip4_input+0x112>
 801b590:	e000      	b.n	801b594 <ip4_input+0x104>
            continue;
 801b592:	bf00      	nop
        NETIF_FOREACH(netif) {
 801b594:	69bb      	ldr	r3, [r7, #24]
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	61bb      	str	r3, [r7, #24]
 801b59a:	69bb      	ldr	r3, [r7, #24]
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d1ed      	bne.n	801b57c <ip4_input+0xec>
 801b5a0:	e000      	b.n	801b5a4 <ip4_input+0x114>
            break;
 801b5a2:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801b5a4:	69bb      	ldr	r3, [r7, #24]
 801b5a6:	2b00      	cmp	r3, #0
 801b5a8:	d111      	bne.n	801b5ce <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801b5aa:	69fb      	ldr	r3, [r7, #28]
 801b5ac:	7a5b      	ldrb	r3, [r3, #9]
 801b5ae:	2b11      	cmp	r3, #17
 801b5b0:	d10d      	bne.n	801b5ce <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801b5b2:	8a7b      	ldrh	r3, [r7, #18]
 801b5b4:	69fa      	ldr	r2, [r7, #28]
 801b5b6:	4413      	add	r3, r2
 801b5b8:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801b5ba:	68fb      	ldr	r3, [r7, #12]
 801b5bc:	885b      	ldrh	r3, [r3, #2]
 801b5be:	b29b      	uxth	r3, r3
 801b5c0:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801b5c4:	d103      	bne.n	801b5ce <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801b5c6:	683b      	ldr	r3, [r7, #0]
 801b5c8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801b5ca:	2300      	movs	r3, #0
 801b5cc:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801b5ce:	697b      	ldr	r3, [r7, #20]
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d017      	beq.n	801b604 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801b5d4:	4b4d      	ldr	r3, [pc, #308]	@ (801b70c <ip4_input+0x27c>)
 801b5d6:	691b      	ldr	r3, [r3, #16]
 801b5d8:	2b00      	cmp	r3, #0
 801b5da:	d013      	beq.n	801b604 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b5dc:	4b4b      	ldr	r3, [pc, #300]	@ (801b70c <ip4_input+0x27c>)
 801b5de:	691b      	ldr	r3, [r3, #16]
 801b5e0:	6839      	ldr	r1, [r7, #0]
 801b5e2:	4618      	mov	r0, r3
 801b5e4:	f000 f96e 	bl	801b8c4 <ip4_addr_isbroadcast_u32>
 801b5e8:	4603      	mov	r3, r0
 801b5ea:	2b00      	cmp	r3, #0
 801b5ec:	d105      	bne.n	801b5fa <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801b5ee:	4b47      	ldr	r3, [pc, #284]	@ (801b70c <ip4_input+0x27c>)
 801b5f0:	691b      	ldr	r3, [r3, #16]
 801b5f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b5f6:	2be0      	cmp	r3, #224	@ 0xe0
 801b5f8:	d104      	bne.n	801b604 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801b5fa:	6878      	ldr	r0, [r7, #4]
 801b5fc:	f7f6 fce4 	bl	8011fc8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801b600:	2300      	movs	r3, #0
 801b602:	e07e      	b.n	801b702 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801b604:	69bb      	ldr	r3, [r7, #24]
 801b606:	2b00      	cmp	r3, #0
 801b608:	d104      	bne.n	801b614 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801b60a:	6878      	ldr	r0, [r7, #4]
 801b60c:	f7f6 fcdc 	bl	8011fc8 <pbuf_free>
    return ERR_OK;
 801b610:	2300      	movs	r3, #0
 801b612:	e076      	b.n	801b702 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801b614:	69fb      	ldr	r3, [r7, #28]
 801b616:	88db      	ldrh	r3, [r3, #6]
 801b618:	b29b      	uxth	r3, r3
 801b61a:	461a      	mov	r2, r3
 801b61c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801b620:	4013      	ands	r3, r2
 801b622:	2b00      	cmp	r3, #0
 801b624:	d00b      	beq.n	801b63e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801b626:	6878      	ldr	r0, [r7, #4]
 801b628:	f000 fc92 	bl	801bf50 <ip4_reass>
 801b62c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	2b00      	cmp	r3, #0
 801b632:	d101      	bne.n	801b638 <ip4_input+0x1a8>
      return ERR_OK;
 801b634:	2300      	movs	r3, #0
 801b636:	e064      	b.n	801b702 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801b638:	687b      	ldr	r3, [r7, #4]
 801b63a:	685b      	ldr	r3, [r3, #4]
 801b63c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801b63e:	4a33      	ldr	r2, [pc, #204]	@ (801b70c <ip4_input+0x27c>)
 801b640:	69bb      	ldr	r3, [r7, #24]
 801b642:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801b644:	4a31      	ldr	r2, [pc, #196]	@ (801b70c <ip4_input+0x27c>)
 801b646:	683b      	ldr	r3, [r7, #0]
 801b648:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801b64a:	4a30      	ldr	r2, [pc, #192]	@ (801b70c <ip4_input+0x27c>)
 801b64c:	69fb      	ldr	r3, [r7, #28]
 801b64e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801b650:	69fb      	ldr	r3, [r7, #28]
 801b652:	781b      	ldrb	r3, [r3, #0]
 801b654:	f003 030f 	and.w	r3, r3, #15
 801b658:	b2db      	uxtb	r3, r3
 801b65a:	009b      	lsls	r3, r3, #2
 801b65c:	b2db      	uxtb	r3, r3
 801b65e:	461a      	mov	r2, r3
 801b660:	4b2a      	ldr	r3, [pc, #168]	@ (801b70c <ip4_input+0x27c>)
 801b662:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801b664:	8a7b      	ldrh	r3, [r7, #18]
 801b666:	4619      	mov	r1, r3
 801b668:	6878      	ldr	r0, [r7, #4]
 801b66a:	f7f6 fc27 	bl	8011ebc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801b66e:	69fb      	ldr	r3, [r7, #28]
 801b670:	7a5b      	ldrb	r3, [r3, #9]
 801b672:	2b11      	cmp	r3, #17
 801b674:	d006      	beq.n	801b684 <ip4_input+0x1f4>
 801b676:	2b11      	cmp	r3, #17
 801b678:	dc13      	bgt.n	801b6a2 <ip4_input+0x212>
 801b67a:	2b01      	cmp	r3, #1
 801b67c:	d00c      	beq.n	801b698 <ip4_input+0x208>
 801b67e:	2b06      	cmp	r3, #6
 801b680:	d005      	beq.n	801b68e <ip4_input+0x1fe>
 801b682:	e00e      	b.n	801b6a2 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801b684:	6839      	ldr	r1, [r7, #0]
 801b686:	6878      	ldr	r0, [r7, #4]
 801b688:	f7fc fac8 	bl	8017c1c <udp_input>
        break;
 801b68c:	e026      	b.n	801b6dc <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801b68e:	6839      	ldr	r1, [r7, #0]
 801b690:	6878      	ldr	r0, [r7, #4]
 801b692:	f7f8 fadf 	bl	8013c54 <tcp_input>
        break;
 801b696:	e021      	b.n	801b6dc <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801b698:	6839      	ldr	r1, [r7, #0]
 801b69a:	6878      	ldr	r0, [r7, #4]
 801b69c:	f7ff fcaa 	bl	801aff4 <icmp_input>
        break;
 801b6a0:	e01c      	b.n	801b6dc <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b6a2:	4b1a      	ldr	r3, [pc, #104]	@ (801b70c <ip4_input+0x27c>)
 801b6a4:	695b      	ldr	r3, [r3, #20]
 801b6a6:	69b9      	ldr	r1, [r7, #24]
 801b6a8:	4618      	mov	r0, r3
 801b6aa:	f000 f90b 	bl	801b8c4 <ip4_addr_isbroadcast_u32>
 801b6ae:	4603      	mov	r3, r0
 801b6b0:	2b00      	cmp	r3, #0
 801b6b2:	d10f      	bne.n	801b6d4 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b6b4:	4b15      	ldr	r3, [pc, #84]	@ (801b70c <ip4_input+0x27c>)
 801b6b6:	695b      	ldr	r3, [r3, #20]
 801b6b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b6bc:	2be0      	cmp	r3, #224	@ 0xe0
 801b6be:	d009      	beq.n	801b6d4 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801b6c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b6c4:	4619      	mov	r1, r3
 801b6c6:	6878      	ldr	r0, [r7, #4]
 801b6c8:	f7f6 fc6b 	bl	8011fa2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801b6cc:	2102      	movs	r1, #2
 801b6ce:	6878      	ldr	r0, [r7, #4]
 801b6d0:	f7ff fdb0 	bl	801b234 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801b6d4:	6878      	ldr	r0, [r7, #4]
 801b6d6:	f7f6 fc77 	bl	8011fc8 <pbuf_free>
        break;
 801b6da:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801b6dc:	4b0b      	ldr	r3, [pc, #44]	@ (801b70c <ip4_input+0x27c>)
 801b6de:	2200      	movs	r2, #0
 801b6e0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801b6e2:	4b0a      	ldr	r3, [pc, #40]	@ (801b70c <ip4_input+0x27c>)
 801b6e4:	2200      	movs	r2, #0
 801b6e6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801b6e8:	4b08      	ldr	r3, [pc, #32]	@ (801b70c <ip4_input+0x27c>)
 801b6ea:	2200      	movs	r2, #0
 801b6ec:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801b6ee:	4b07      	ldr	r3, [pc, #28]	@ (801b70c <ip4_input+0x27c>)
 801b6f0:	2200      	movs	r2, #0
 801b6f2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801b6f4:	4b05      	ldr	r3, [pc, #20]	@ (801b70c <ip4_input+0x27c>)
 801b6f6:	2200      	movs	r2, #0
 801b6f8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801b6fa:	4b04      	ldr	r3, [pc, #16]	@ (801b70c <ip4_input+0x27c>)
 801b6fc:	2200      	movs	r2, #0
 801b6fe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801b700:	2300      	movs	r3, #0
}
 801b702:	4618      	mov	r0, r3
 801b704:	3720      	adds	r7, #32
 801b706:	46bd      	mov	sp, r7
 801b708:	bd80      	pop	{r7, pc}
 801b70a:	bf00      	nop
 801b70c:	24009b14 	.word	0x24009b14
 801b710:	2400cc28 	.word	0x2400cc28

0801b714 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801b714:	b580      	push	{r7, lr}
 801b716:	b08a      	sub	sp, #40	@ 0x28
 801b718:	af04      	add	r7, sp, #16
 801b71a:	60f8      	str	r0, [r7, #12]
 801b71c:	60b9      	str	r1, [r7, #8]
 801b71e:	607a      	str	r2, [r7, #4]
 801b720:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801b722:	68bb      	ldr	r3, [r7, #8]
 801b724:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	2b00      	cmp	r3, #0
 801b72a:	d009      	beq.n	801b740 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801b72c:	68bb      	ldr	r3, [r7, #8]
 801b72e:	2b00      	cmp	r3, #0
 801b730:	d003      	beq.n	801b73a <ip4_output_if+0x26>
 801b732:	68bb      	ldr	r3, [r7, #8]
 801b734:	681b      	ldr	r3, [r3, #0]
 801b736:	2b00      	cmp	r3, #0
 801b738:	d102      	bne.n	801b740 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801b73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b73c:	3304      	adds	r3, #4
 801b73e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801b740:	78fa      	ldrb	r2, [r7, #3]
 801b742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b744:	9302      	str	r3, [sp, #8]
 801b746:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801b74a:	9301      	str	r3, [sp, #4]
 801b74c:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b750:	9300      	str	r3, [sp, #0]
 801b752:	4613      	mov	r3, r2
 801b754:	687a      	ldr	r2, [r7, #4]
 801b756:	6979      	ldr	r1, [r7, #20]
 801b758:	68f8      	ldr	r0, [r7, #12]
 801b75a:	f000 f805 	bl	801b768 <ip4_output_if_src>
 801b75e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801b760:	4618      	mov	r0, r3
 801b762:	3718      	adds	r7, #24
 801b764:	46bd      	mov	sp, r7
 801b766:	bd80      	pop	{r7, pc}

0801b768 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801b768:	b580      	push	{r7, lr}
 801b76a:	b088      	sub	sp, #32
 801b76c:	af00      	add	r7, sp, #0
 801b76e:	60f8      	str	r0, [r7, #12]
 801b770:	60b9      	str	r1, [r7, #8]
 801b772:	607a      	str	r2, [r7, #4]
 801b774:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801b776:	68fb      	ldr	r3, [r7, #12]
 801b778:	7b9b      	ldrb	r3, [r3, #14]
 801b77a:	2b01      	cmp	r3, #1
 801b77c:	d006      	beq.n	801b78c <ip4_output_if_src+0x24>
 801b77e:	4b4b      	ldr	r3, [pc, #300]	@ (801b8ac <ip4_output_if_src+0x144>)
 801b780:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801b784:	494a      	ldr	r1, [pc, #296]	@ (801b8b0 <ip4_output_if_src+0x148>)
 801b786:	484b      	ldr	r0, [pc, #300]	@ (801b8b4 <ip4_output_if_src+0x14c>)
 801b788:	f001 fe1c 	bl	801d3c4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d060      	beq.n	801b854 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801b792:	2314      	movs	r3, #20
 801b794:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801b796:	2114      	movs	r1, #20
 801b798:	68f8      	ldr	r0, [r7, #12]
 801b79a:	f7f6 fb7f 	bl	8011e9c <pbuf_add_header>
 801b79e:	4603      	mov	r3, r0
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	d002      	beq.n	801b7aa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b7a4:	f06f 0301 	mvn.w	r3, #1
 801b7a8:	e07c      	b.n	801b8a4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801b7aa:	68fb      	ldr	r3, [r7, #12]
 801b7ac:	685b      	ldr	r3, [r3, #4]
 801b7ae:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801b7b0:	68fb      	ldr	r3, [r7, #12]
 801b7b2:	895b      	ldrh	r3, [r3, #10]
 801b7b4:	2b13      	cmp	r3, #19
 801b7b6:	d806      	bhi.n	801b7c6 <ip4_output_if_src+0x5e>
 801b7b8:	4b3c      	ldr	r3, [pc, #240]	@ (801b8ac <ip4_output_if_src+0x144>)
 801b7ba:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801b7be:	493e      	ldr	r1, [pc, #248]	@ (801b8b8 <ip4_output_if_src+0x150>)
 801b7c0:	483c      	ldr	r0, [pc, #240]	@ (801b8b4 <ip4_output_if_src+0x14c>)
 801b7c2:	f001 fdff 	bl	801d3c4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801b7c6:	69fb      	ldr	r3, [r7, #28]
 801b7c8:	78fa      	ldrb	r2, [r7, #3]
 801b7ca:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801b7cc:	69fb      	ldr	r3, [r7, #28]
 801b7ce:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801b7d2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	681a      	ldr	r2, [r3, #0]
 801b7d8:	69fb      	ldr	r3, [r7, #28]
 801b7da:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801b7dc:	8b7b      	ldrh	r3, [r7, #26]
 801b7de:	089b      	lsrs	r3, r3, #2
 801b7e0:	b29b      	uxth	r3, r3
 801b7e2:	b2db      	uxtb	r3, r3
 801b7e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b7e8:	b2da      	uxtb	r2, r3
 801b7ea:	69fb      	ldr	r3, [r7, #28]
 801b7ec:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801b7ee:	69fb      	ldr	r3, [r7, #28]
 801b7f0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801b7f4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801b7f6:	68fb      	ldr	r3, [r7, #12]
 801b7f8:	891b      	ldrh	r3, [r3, #8]
 801b7fa:	4618      	mov	r0, r3
 801b7fc:	f7f4 ff2e 	bl	801065c <lwip_htons>
 801b800:	4603      	mov	r3, r0
 801b802:	461a      	mov	r2, r3
 801b804:	69fb      	ldr	r3, [r7, #28]
 801b806:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801b808:	69fb      	ldr	r3, [r7, #28]
 801b80a:	2200      	movs	r2, #0
 801b80c:	719a      	strb	r2, [r3, #6]
 801b80e:	2200      	movs	r2, #0
 801b810:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801b812:	4b2a      	ldr	r3, [pc, #168]	@ (801b8bc <ip4_output_if_src+0x154>)
 801b814:	881b      	ldrh	r3, [r3, #0]
 801b816:	4618      	mov	r0, r3
 801b818:	f7f4 ff20 	bl	801065c <lwip_htons>
 801b81c:	4603      	mov	r3, r0
 801b81e:	461a      	mov	r2, r3
 801b820:	69fb      	ldr	r3, [r7, #28]
 801b822:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801b824:	4b25      	ldr	r3, [pc, #148]	@ (801b8bc <ip4_output_if_src+0x154>)
 801b826:	881b      	ldrh	r3, [r3, #0]
 801b828:	3301      	adds	r3, #1
 801b82a:	b29a      	uxth	r2, r3
 801b82c:	4b23      	ldr	r3, [pc, #140]	@ (801b8bc <ip4_output_if_src+0x154>)
 801b82e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801b830:	68bb      	ldr	r3, [r7, #8]
 801b832:	2b00      	cmp	r3, #0
 801b834:	d104      	bne.n	801b840 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801b836:	4b22      	ldr	r3, [pc, #136]	@ (801b8c0 <ip4_output_if_src+0x158>)
 801b838:	681a      	ldr	r2, [r3, #0]
 801b83a:	69fb      	ldr	r3, [r7, #28]
 801b83c:	60da      	str	r2, [r3, #12]
 801b83e:	e003      	b.n	801b848 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801b840:	68bb      	ldr	r3, [r7, #8]
 801b842:	681a      	ldr	r2, [r3, #0]
 801b844:	69fb      	ldr	r3, [r7, #28]
 801b846:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801b848:	69fb      	ldr	r3, [r7, #28]
 801b84a:	2200      	movs	r2, #0
 801b84c:	729a      	strb	r2, [r3, #10]
 801b84e:	2200      	movs	r2, #0
 801b850:	72da      	strb	r2, [r3, #11]
 801b852:	e00f      	b.n	801b874 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801b854:	68fb      	ldr	r3, [r7, #12]
 801b856:	895b      	ldrh	r3, [r3, #10]
 801b858:	2b13      	cmp	r3, #19
 801b85a:	d802      	bhi.n	801b862 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b85c:	f06f 0301 	mvn.w	r3, #1
 801b860:	e020      	b.n	801b8a4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801b862:	68fb      	ldr	r3, [r7, #12]
 801b864:	685b      	ldr	r3, [r3, #4]
 801b866:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801b868:	69fb      	ldr	r3, [r7, #28]
 801b86a:	691b      	ldr	r3, [r3, #16]
 801b86c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801b86e:	f107 0314 	add.w	r3, r7, #20
 801b872:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801b874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801b878:	2b00      	cmp	r3, #0
 801b87a:	d00c      	beq.n	801b896 <ip4_output_if_src+0x12e>
 801b87c:	68fb      	ldr	r3, [r7, #12]
 801b87e:	891a      	ldrh	r2, [r3, #8]
 801b880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801b884:	429a      	cmp	r2, r3
 801b886:	d906      	bls.n	801b896 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801b888:	687a      	ldr	r2, [r7, #4]
 801b88a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801b88c:	68f8      	ldr	r0, [r7, #12]
 801b88e:	f000 fd53 	bl	801c338 <ip4_frag>
 801b892:	4603      	mov	r3, r0
 801b894:	e006      	b.n	801b8a4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801b896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b898:	695b      	ldr	r3, [r3, #20]
 801b89a:	687a      	ldr	r2, [r7, #4]
 801b89c:	68f9      	ldr	r1, [r7, #12]
 801b89e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b8a0:	4798      	blx	r3
 801b8a2:	4603      	mov	r3, r0
}
 801b8a4:	4618      	mov	r0, r3
 801b8a6:	3720      	adds	r7, #32
 801b8a8:	46bd      	mov	sp, r7
 801b8aa:	bd80      	pop	{r7, pc}
 801b8ac:	080220cc 	.word	0x080220cc
 801b8b0:	08022100 	.word	0x08022100
 801b8b4:	0802210c 	.word	0x0802210c
 801b8b8:	08022134 	.word	0x08022134
 801b8bc:	2400cdba 	.word	0x2400cdba
 801b8c0:	08022610 	.word	0x08022610

0801b8c4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b8c4:	b480      	push	{r7}
 801b8c6:	b085      	sub	sp, #20
 801b8c8:	af00      	add	r7, sp, #0
 801b8ca:	6078      	str	r0, [r7, #4]
 801b8cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b8ce:	687b      	ldr	r3, [r7, #4]
 801b8d0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b8d8:	d002      	beq.n	801b8e0 <ip4_addr_isbroadcast_u32+0x1c>
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	d101      	bne.n	801b8e4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b8e0:	2301      	movs	r3, #1
 801b8e2:	e02a      	b.n	801b93a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b8e4:	683b      	ldr	r3, [r7, #0]
 801b8e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b8ea:	f003 0302 	and.w	r3, r3, #2
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	d101      	bne.n	801b8f6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b8f2:	2300      	movs	r3, #0
 801b8f4:	e021      	b.n	801b93a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b8f6:	683b      	ldr	r3, [r7, #0]
 801b8f8:	3304      	adds	r3, #4
 801b8fa:	681b      	ldr	r3, [r3, #0]
 801b8fc:	687a      	ldr	r2, [r7, #4]
 801b8fe:	429a      	cmp	r2, r3
 801b900:	d101      	bne.n	801b906 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b902:	2300      	movs	r3, #0
 801b904:	e019      	b.n	801b93a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b906:	68fa      	ldr	r2, [r7, #12]
 801b908:	683b      	ldr	r3, [r7, #0]
 801b90a:	3304      	adds	r3, #4
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	405a      	eors	r2, r3
 801b910:	683b      	ldr	r3, [r7, #0]
 801b912:	3308      	adds	r3, #8
 801b914:	681b      	ldr	r3, [r3, #0]
 801b916:	4013      	ands	r3, r2
 801b918:	2b00      	cmp	r3, #0
 801b91a:	d10d      	bne.n	801b938 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b91c:	683b      	ldr	r3, [r7, #0]
 801b91e:	3308      	adds	r3, #8
 801b920:	681b      	ldr	r3, [r3, #0]
 801b922:	43da      	mvns	r2, r3
 801b924:	687b      	ldr	r3, [r7, #4]
 801b926:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b928:	683b      	ldr	r3, [r7, #0]
 801b92a:	3308      	adds	r3, #8
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b930:	429a      	cmp	r2, r3
 801b932:	d101      	bne.n	801b938 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b934:	2301      	movs	r3, #1
 801b936:	e000      	b.n	801b93a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b938:	2300      	movs	r3, #0
  }
}
 801b93a:	4618      	mov	r0, r3
 801b93c:	3714      	adds	r7, #20
 801b93e:	46bd      	mov	sp, r7
 801b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b944:	4770      	bx	lr
	...

0801b948 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b948:	b580      	push	{r7, lr}
 801b94a:	b084      	sub	sp, #16
 801b94c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b94e:	2300      	movs	r3, #0
 801b950:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b952:	4b12      	ldr	r3, [pc, #72]	@ (801b99c <ip_reass_tmr+0x54>)
 801b954:	681b      	ldr	r3, [r3, #0]
 801b956:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b958:	e018      	b.n	801b98c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b95a:	68fb      	ldr	r3, [r7, #12]
 801b95c:	7fdb      	ldrb	r3, [r3, #31]
 801b95e:	2b00      	cmp	r3, #0
 801b960:	d00b      	beq.n	801b97a <ip_reass_tmr+0x32>
      r->timer--;
 801b962:	68fb      	ldr	r3, [r7, #12]
 801b964:	7fdb      	ldrb	r3, [r3, #31]
 801b966:	3b01      	subs	r3, #1
 801b968:	b2da      	uxtb	r2, r3
 801b96a:	68fb      	ldr	r3, [r7, #12]
 801b96c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801b96e:	68fb      	ldr	r3, [r7, #12]
 801b970:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801b972:	68fb      	ldr	r3, [r7, #12]
 801b974:	681b      	ldr	r3, [r3, #0]
 801b976:	60fb      	str	r3, [r7, #12]
 801b978:	e008      	b.n	801b98c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801b97a:	68fb      	ldr	r3, [r7, #12]
 801b97c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801b97e:	68fb      	ldr	r3, [r7, #12]
 801b980:	681b      	ldr	r3, [r3, #0]
 801b982:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801b984:	68b9      	ldr	r1, [r7, #8]
 801b986:	6878      	ldr	r0, [r7, #4]
 801b988:	f000 f80a 	bl	801b9a0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801b98c:	68fb      	ldr	r3, [r7, #12]
 801b98e:	2b00      	cmp	r3, #0
 801b990:	d1e3      	bne.n	801b95a <ip_reass_tmr+0x12>
    }
  }
}
 801b992:	bf00      	nop
 801b994:	bf00      	nop
 801b996:	3710      	adds	r7, #16
 801b998:	46bd      	mov	sp, r7
 801b99a:	bd80      	pop	{r7, pc}
 801b99c:	2400cdbc 	.word	0x2400cdbc

0801b9a0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b9a0:	b580      	push	{r7, lr}
 801b9a2:	b088      	sub	sp, #32
 801b9a4:	af00      	add	r7, sp, #0
 801b9a6:	6078      	str	r0, [r7, #4]
 801b9a8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801b9aa:	2300      	movs	r3, #0
 801b9ac:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801b9ae:	683a      	ldr	r2, [r7, #0]
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	429a      	cmp	r2, r3
 801b9b4:	d105      	bne.n	801b9c2 <ip_reass_free_complete_datagram+0x22>
 801b9b6:	4b45      	ldr	r3, [pc, #276]	@ (801bacc <ip_reass_free_complete_datagram+0x12c>)
 801b9b8:	22ab      	movs	r2, #171	@ 0xab
 801b9ba:	4945      	ldr	r1, [pc, #276]	@ (801bad0 <ip_reass_free_complete_datagram+0x130>)
 801b9bc:	4845      	ldr	r0, [pc, #276]	@ (801bad4 <ip_reass_free_complete_datagram+0x134>)
 801b9be:	f001 fd01 	bl	801d3c4 <iprintf>
  if (prev != NULL) {
 801b9c2:	683b      	ldr	r3, [r7, #0]
 801b9c4:	2b00      	cmp	r3, #0
 801b9c6:	d00a      	beq.n	801b9de <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801b9c8:	683b      	ldr	r3, [r7, #0]
 801b9ca:	681b      	ldr	r3, [r3, #0]
 801b9cc:	687a      	ldr	r2, [r7, #4]
 801b9ce:	429a      	cmp	r2, r3
 801b9d0:	d005      	beq.n	801b9de <ip_reass_free_complete_datagram+0x3e>
 801b9d2:	4b3e      	ldr	r3, [pc, #248]	@ (801bacc <ip_reass_free_complete_datagram+0x12c>)
 801b9d4:	22ad      	movs	r2, #173	@ 0xad
 801b9d6:	4940      	ldr	r1, [pc, #256]	@ (801bad8 <ip_reass_free_complete_datagram+0x138>)
 801b9d8:	483e      	ldr	r0, [pc, #248]	@ (801bad4 <ip_reass_free_complete_datagram+0x134>)
 801b9da:	f001 fcf3 	bl	801d3c4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	685b      	ldr	r3, [r3, #4]
 801b9e2:	685b      	ldr	r3, [r3, #4]
 801b9e4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801b9e6:	697b      	ldr	r3, [r7, #20]
 801b9e8:	889b      	ldrh	r3, [r3, #4]
 801b9ea:	b29b      	uxth	r3, r3
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d12a      	bne.n	801ba46 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	685b      	ldr	r3, [r3, #4]
 801b9f4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801b9f6:	697b      	ldr	r3, [r7, #20]
 801b9f8:	681a      	ldr	r2, [r3, #0]
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801b9fe:	69bb      	ldr	r3, [r7, #24]
 801ba00:	6858      	ldr	r0, [r3, #4]
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	3308      	adds	r3, #8
 801ba06:	2214      	movs	r2, #20
 801ba08:	4619      	mov	r1, r3
 801ba0a:	f001 ff02 	bl	801d812 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801ba0e:	2101      	movs	r1, #1
 801ba10:	69b8      	ldr	r0, [r7, #24]
 801ba12:	f7ff fc1f 	bl	801b254 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801ba16:	69b8      	ldr	r0, [r7, #24]
 801ba18:	f7f6 fb64 	bl	80120e4 <pbuf_clen>
 801ba1c:	4603      	mov	r3, r0
 801ba1e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ba20:	8bfa      	ldrh	r2, [r7, #30]
 801ba22:	8a7b      	ldrh	r3, [r7, #18]
 801ba24:	4413      	add	r3, r2
 801ba26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ba2a:	db05      	blt.n	801ba38 <ip_reass_free_complete_datagram+0x98>
 801ba2c:	4b27      	ldr	r3, [pc, #156]	@ (801bacc <ip_reass_free_complete_datagram+0x12c>)
 801ba2e:	22bc      	movs	r2, #188	@ 0xbc
 801ba30:	492a      	ldr	r1, [pc, #168]	@ (801badc <ip_reass_free_complete_datagram+0x13c>)
 801ba32:	4828      	ldr	r0, [pc, #160]	@ (801bad4 <ip_reass_free_complete_datagram+0x134>)
 801ba34:	f001 fcc6 	bl	801d3c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ba38:	8bfa      	ldrh	r2, [r7, #30]
 801ba3a:	8a7b      	ldrh	r3, [r7, #18]
 801ba3c:	4413      	add	r3, r2
 801ba3e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801ba40:	69b8      	ldr	r0, [r7, #24]
 801ba42:	f7f6 fac1 	bl	8011fc8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	685b      	ldr	r3, [r3, #4]
 801ba4a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801ba4c:	e01f      	b.n	801ba8e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801ba4e:	69bb      	ldr	r3, [r7, #24]
 801ba50:	685b      	ldr	r3, [r3, #4]
 801ba52:	617b      	str	r3, [r7, #20]
    pcur = p;
 801ba54:	69bb      	ldr	r3, [r7, #24]
 801ba56:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801ba58:	697b      	ldr	r3, [r7, #20]
 801ba5a:	681b      	ldr	r3, [r3, #0]
 801ba5c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801ba5e:	68f8      	ldr	r0, [r7, #12]
 801ba60:	f7f6 fb40 	bl	80120e4 <pbuf_clen>
 801ba64:	4603      	mov	r3, r0
 801ba66:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ba68:	8bfa      	ldrh	r2, [r7, #30]
 801ba6a:	8a7b      	ldrh	r3, [r7, #18]
 801ba6c:	4413      	add	r3, r2
 801ba6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ba72:	db05      	blt.n	801ba80 <ip_reass_free_complete_datagram+0xe0>
 801ba74:	4b15      	ldr	r3, [pc, #84]	@ (801bacc <ip_reass_free_complete_datagram+0x12c>)
 801ba76:	22cc      	movs	r2, #204	@ 0xcc
 801ba78:	4918      	ldr	r1, [pc, #96]	@ (801badc <ip_reass_free_complete_datagram+0x13c>)
 801ba7a:	4816      	ldr	r0, [pc, #88]	@ (801bad4 <ip_reass_free_complete_datagram+0x134>)
 801ba7c:	f001 fca2 	bl	801d3c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ba80:	8bfa      	ldrh	r2, [r7, #30]
 801ba82:	8a7b      	ldrh	r3, [r7, #18]
 801ba84:	4413      	add	r3, r2
 801ba86:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801ba88:	68f8      	ldr	r0, [r7, #12]
 801ba8a:	f7f6 fa9d 	bl	8011fc8 <pbuf_free>
  while (p != NULL) {
 801ba8e:	69bb      	ldr	r3, [r7, #24]
 801ba90:	2b00      	cmp	r3, #0
 801ba92:	d1dc      	bne.n	801ba4e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801ba94:	6839      	ldr	r1, [r7, #0]
 801ba96:	6878      	ldr	r0, [r7, #4]
 801ba98:	f000 f8c2 	bl	801bc20 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801ba9c:	4b10      	ldr	r3, [pc, #64]	@ (801bae0 <ip_reass_free_complete_datagram+0x140>)
 801ba9e:	881b      	ldrh	r3, [r3, #0]
 801baa0:	8bfa      	ldrh	r2, [r7, #30]
 801baa2:	429a      	cmp	r2, r3
 801baa4:	d905      	bls.n	801bab2 <ip_reass_free_complete_datagram+0x112>
 801baa6:	4b09      	ldr	r3, [pc, #36]	@ (801bacc <ip_reass_free_complete_datagram+0x12c>)
 801baa8:	22d2      	movs	r2, #210	@ 0xd2
 801baaa:	490e      	ldr	r1, [pc, #56]	@ (801bae4 <ip_reass_free_complete_datagram+0x144>)
 801baac:	4809      	ldr	r0, [pc, #36]	@ (801bad4 <ip_reass_free_complete_datagram+0x134>)
 801baae:	f001 fc89 	bl	801d3c4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801bab2:	4b0b      	ldr	r3, [pc, #44]	@ (801bae0 <ip_reass_free_complete_datagram+0x140>)
 801bab4:	881a      	ldrh	r2, [r3, #0]
 801bab6:	8bfb      	ldrh	r3, [r7, #30]
 801bab8:	1ad3      	subs	r3, r2, r3
 801baba:	b29a      	uxth	r2, r3
 801babc:	4b08      	ldr	r3, [pc, #32]	@ (801bae0 <ip_reass_free_complete_datagram+0x140>)
 801babe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801bac0:	8bfb      	ldrh	r3, [r7, #30]
}
 801bac2:	4618      	mov	r0, r3
 801bac4:	3720      	adds	r7, #32
 801bac6:	46bd      	mov	sp, r7
 801bac8:	bd80      	pop	{r7, pc}
 801baca:	bf00      	nop
 801bacc:	08022164 	.word	0x08022164
 801bad0:	080221a0 	.word	0x080221a0
 801bad4:	080221ac 	.word	0x080221ac
 801bad8:	080221d4 	.word	0x080221d4
 801badc:	080221e8 	.word	0x080221e8
 801bae0:	2400cdc0 	.word	0x2400cdc0
 801bae4:	08022208 	.word	0x08022208

0801bae8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801bae8:	b580      	push	{r7, lr}
 801baea:	b08a      	sub	sp, #40	@ 0x28
 801baec:	af00      	add	r7, sp, #0
 801baee:	6078      	str	r0, [r7, #4]
 801baf0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801baf2:	2300      	movs	r3, #0
 801baf4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801baf6:	2300      	movs	r3, #0
 801baf8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801bafa:	2300      	movs	r3, #0
 801bafc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801bafe:	2300      	movs	r3, #0
 801bb00:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801bb02:	2300      	movs	r3, #0
 801bb04:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801bb06:	4b28      	ldr	r3, [pc, #160]	@ (801bba8 <ip_reass_remove_oldest_datagram+0xc0>)
 801bb08:	681b      	ldr	r3, [r3, #0]
 801bb0a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801bb0c:	e030      	b.n	801bb70 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801bb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb10:	695a      	ldr	r2, [r3, #20]
 801bb12:	687b      	ldr	r3, [r7, #4]
 801bb14:	68db      	ldr	r3, [r3, #12]
 801bb16:	429a      	cmp	r2, r3
 801bb18:	d10c      	bne.n	801bb34 <ip_reass_remove_oldest_datagram+0x4c>
 801bb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb1c:	699a      	ldr	r2, [r3, #24]
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	691b      	ldr	r3, [r3, #16]
 801bb22:	429a      	cmp	r2, r3
 801bb24:	d106      	bne.n	801bb34 <ip_reass_remove_oldest_datagram+0x4c>
 801bb26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb28:	899a      	ldrh	r2, [r3, #12]
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	889b      	ldrh	r3, [r3, #4]
 801bb2e:	b29b      	uxth	r3, r3
 801bb30:	429a      	cmp	r2, r3
 801bb32:	d014      	beq.n	801bb5e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801bb34:	693b      	ldr	r3, [r7, #16]
 801bb36:	3301      	adds	r3, #1
 801bb38:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801bb3a:	6a3b      	ldr	r3, [r7, #32]
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	d104      	bne.n	801bb4a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801bb40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb42:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801bb44:	69fb      	ldr	r3, [r7, #28]
 801bb46:	61bb      	str	r3, [r7, #24]
 801bb48:	e009      	b.n	801bb5e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801bb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb4c:	7fda      	ldrb	r2, [r3, #31]
 801bb4e:	6a3b      	ldr	r3, [r7, #32]
 801bb50:	7fdb      	ldrb	r3, [r3, #31]
 801bb52:	429a      	cmp	r2, r3
 801bb54:	d803      	bhi.n	801bb5e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801bb56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb58:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801bb5a:	69fb      	ldr	r3, [r7, #28]
 801bb5c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801bb5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb60:	681b      	ldr	r3, [r3, #0]
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	d001      	beq.n	801bb6a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801bb66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb68:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801bb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801bb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	d1cb      	bne.n	801bb0e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801bb76:	6a3b      	ldr	r3, [r7, #32]
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	d008      	beq.n	801bb8e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801bb7c:	69b9      	ldr	r1, [r7, #24]
 801bb7e:	6a38      	ldr	r0, [r7, #32]
 801bb80:	f7ff ff0e 	bl	801b9a0 <ip_reass_free_complete_datagram>
 801bb84:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801bb86:	697a      	ldr	r2, [r7, #20]
 801bb88:	68fb      	ldr	r3, [r7, #12]
 801bb8a:	4413      	add	r3, r2
 801bb8c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801bb8e:	697a      	ldr	r2, [r7, #20]
 801bb90:	683b      	ldr	r3, [r7, #0]
 801bb92:	429a      	cmp	r2, r3
 801bb94:	da02      	bge.n	801bb9c <ip_reass_remove_oldest_datagram+0xb4>
 801bb96:	693b      	ldr	r3, [r7, #16]
 801bb98:	2b01      	cmp	r3, #1
 801bb9a:	dcac      	bgt.n	801baf6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801bb9c:	697b      	ldr	r3, [r7, #20]
}
 801bb9e:	4618      	mov	r0, r3
 801bba0:	3728      	adds	r7, #40	@ 0x28
 801bba2:	46bd      	mov	sp, r7
 801bba4:	bd80      	pop	{r7, pc}
 801bba6:	bf00      	nop
 801bba8:	2400cdbc 	.word	0x2400cdbc

0801bbac <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801bbac:	b580      	push	{r7, lr}
 801bbae:	b084      	sub	sp, #16
 801bbb0:	af00      	add	r7, sp, #0
 801bbb2:	6078      	str	r0, [r7, #4]
 801bbb4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801bbb6:	2004      	movs	r0, #4
 801bbb8:	f7f5 fae0 	bl	801117c <memp_malloc>
 801bbbc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801bbbe:	68fb      	ldr	r3, [r7, #12]
 801bbc0:	2b00      	cmp	r3, #0
 801bbc2:	d110      	bne.n	801bbe6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801bbc4:	6839      	ldr	r1, [r7, #0]
 801bbc6:	6878      	ldr	r0, [r7, #4]
 801bbc8:	f7ff ff8e 	bl	801bae8 <ip_reass_remove_oldest_datagram>
 801bbcc:	4602      	mov	r2, r0
 801bbce:	683b      	ldr	r3, [r7, #0]
 801bbd0:	4293      	cmp	r3, r2
 801bbd2:	dc03      	bgt.n	801bbdc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801bbd4:	2004      	movs	r0, #4
 801bbd6:	f7f5 fad1 	bl	801117c <memp_malloc>
 801bbda:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801bbdc:	68fb      	ldr	r3, [r7, #12]
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	d101      	bne.n	801bbe6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801bbe2:	2300      	movs	r3, #0
 801bbe4:	e016      	b.n	801bc14 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801bbe6:	2220      	movs	r2, #32
 801bbe8:	2100      	movs	r1, #0
 801bbea:	68f8      	ldr	r0, [r7, #12]
 801bbec:	f001 fd42 	bl	801d674 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801bbf0:	68fb      	ldr	r3, [r7, #12]
 801bbf2:	220f      	movs	r2, #15
 801bbf4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801bbf6:	4b09      	ldr	r3, [pc, #36]	@ (801bc1c <ip_reass_enqueue_new_datagram+0x70>)
 801bbf8:	681a      	ldr	r2, [r3, #0]
 801bbfa:	68fb      	ldr	r3, [r7, #12]
 801bbfc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801bbfe:	4a07      	ldr	r2, [pc, #28]	@ (801bc1c <ip_reass_enqueue_new_datagram+0x70>)
 801bc00:	68fb      	ldr	r3, [r7, #12]
 801bc02:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801bc04:	68fb      	ldr	r3, [r7, #12]
 801bc06:	3308      	adds	r3, #8
 801bc08:	2214      	movs	r2, #20
 801bc0a:	6879      	ldr	r1, [r7, #4]
 801bc0c:	4618      	mov	r0, r3
 801bc0e:	f001 fe00 	bl	801d812 <memcpy>
  return ipr;
 801bc12:	68fb      	ldr	r3, [r7, #12]
}
 801bc14:	4618      	mov	r0, r3
 801bc16:	3710      	adds	r7, #16
 801bc18:	46bd      	mov	sp, r7
 801bc1a:	bd80      	pop	{r7, pc}
 801bc1c:	2400cdbc 	.word	0x2400cdbc

0801bc20 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801bc20:	b580      	push	{r7, lr}
 801bc22:	b082      	sub	sp, #8
 801bc24:	af00      	add	r7, sp, #0
 801bc26:	6078      	str	r0, [r7, #4]
 801bc28:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801bc2a:	4b10      	ldr	r3, [pc, #64]	@ (801bc6c <ip_reass_dequeue_datagram+0x4c>)
 801bc2c:	681b      	ldr	r3, [r3, #0]
 801bc2e:	687a      	ldr	r2, [r7, #4]
 801bc30:	429a      	cmp	r2, r3
 801bc32:	d104      	bne.n	801bc3e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801bc34:	687b      	ldr	r3, [r7, #4]
 801bc36:	681b      	ldr	r3, [r3, #0]
 801bc38:	4a0c      	ldr	r2, [pc, #48]	@ (801bc6c <ip_reass_dequeue_datagram+0x4c>)
 801bc3a:	6013      	str	r3, [r2, #0]
 801bc3c:	e00d      	b.n	801bc5a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801bc3e:	683b      	ldr	r3, [r7, #0]
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	d106      	bne.n	801bc52 <ip_reass_dequeue_datagram+0x32>
 801bc44:	4b0a      	ldr	r3, [pc, #40]	@ (801bc70 <ip_reass_dequeue_datagram+0x50>)
 801bc46:	f240 1245 	movw	r2, #325	@ 0x145
 801bc4a:	490a      	ldr	r1, [pc, #40]	@ (801bc74 <ip_reass_dequeue_datagram+0x54>)
 801bc4c:	480a      	ldr	r0, [pc, #40]	@ (801bc78 <ip_reass_dequeue_datagram+0x58>)
 801bc4e:	f001 fbb9 	bl	801d3c4 <iprintf>
    prev->next = ipr->next;
 801bc52:	687b      	ldr	r3, [r7, #4]
 801bc54:	681a      	ldr	r2, [r3, #0]
 801bc56:	683b      	ldr	r3, [r7, #0]
 801bc58:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801bc5a:	6879      	ldr	r1, [r7, #4]
 801bc5c:	2004      	movs	r0, #4
 801bc5e:	f7f5 fb03 	bl	8011268 <memp_free>
}
 801bc62:	bf00      	nop
 801bc64:	3708      	adds	r7, #8
 801bc66:	46bd      	mov	sp, r7
 801bc68:	bd80      	pop	{r7, pc}
 801bc6a:	bf00      	nop
 801bc6c:	2400cdbc 	.word	0x2400cdbc
 801bc70:	08022164 	.word	0x08022164
 801bc74:	0802222c 	.word	0x0802222c
 801bc78:	080221ac 	.word	0x080221ac

0801bc7c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801bc7c:	b580      	push	{r7, lr}
 801bc7e:	b08c      	sub	sp, #48	@ 0x30
 801bc80:	af00      	add	r7, sp, #0
 801bc82:	60f8      	str	r0, [r7, #12]
 801bc84:	60b9      	str	r1, [r7, #8]
 801bc86:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801bc88:	2300      	movs	r3, #0
 801bc8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801bc8c:	2301      	movs	r3, #1
 801bc8e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801bc90:	68bb      	ldr	r3, [r7, #8]
 801bc92:	685b      	ldr	r3, [r3, #4]
 801bc94:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bc96:	69fb      	ldr	r3, [r7, #28]
 801bc98:	885b      	ldrh	r3, [r3, #2]
 801bc9a:	b29b      	uxth	r3, r3
 801bc9c:	4618      	mov	r0, r3
 801bc9e:	f7f4 fcdd 	bl	801065c <lwip_htons>
 801bca2:	4603      	mov	r3, r0
 801bca4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801bca6:	69fb      	ldr	r3, [r7, #28]
 801bca8:	781b      	ldrb	r3, [r3, #0]
 801bcaa:	f003 030f 	and.w	r3, r3, #15
 801bcae:	b2db      	uxtb	r3, r3
 801bcb0:	009b      	lsls	r3, r3, #2
 801bcb2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801bcb4:	7e7b      	ldrb	r3, [r7, #25]
 801bcb6:	b29b      	uxth	r3, r3
 801bcb8:	8b7a      	ldrh	r2, [r7, #26]
 801bcba:	429a      	cmp	r2, r3
 801bcbc:	d202      	bcs.n	801bcc4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bcbe:	f04f 33ff 	mov.w	r3, #4294967295
 801bcc2:	e135      	b.n	801bf30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801bcc4:	7e7b      	ldrb	r3, [r7, #25]
 801bcc6:	b29b      	uxth	r3, r3
 801bcc8:	8b7a      	ldrh	r2, [r7, #26]
 801bcca:	1ad3      	subs	r3, r2, r3
 801bccc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801bcce:	69fb      	ldr	r3, [r7, #28]
 801bcd0:	88db      	ldrh	r3, [r3, #6]
 801bcd2:	b29b      	uxth	r3, r3
 801bcd4:	4618      	mov	r0, r3
 801bcd6:	f7f4 fcc1 	bl	801065c <lwip_htons>
 801bcda:	4603      	mov	r3, r0
 801bcdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bce0:	b29b      	uxth	r3, r3
 801bce2:	00db      	lsls	r3, r3, #3
 801bce4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801bce6:	68bb      	ldr	r3, [r7, #8]
 801bce8:	685b      	ldr	r3, [r3, #4]
 801bcea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801bcec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bcee:	2200      	movs	r2, #0
 801bcf0:	701a      	strb	r2, [r3, #0]
 801bcf2:	2200      	movs	r2, #0
 801bcf4:	705a      	strb	r2, [r3, #1]
 801bcf6:	2200      	movs	r2, #0
 801bcf8:	709a      	strb	r2, [r3, #2]
 801bcfa:	2200      	movs	r2, #0
 801bcfc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801bcfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd00:	8afa      	ldrh	r2, [r7, #22]
 801bd02:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801bd04:	8afa      	ldrh	r2, [r7, #22]
 801bd06:	8b7b      	ldrh	r3, [r7, #26]
 801bd08:	4413      	add	r3, r2
 801bd0a:	b29a      	uxth	r2, r3
 801bd0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd0e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801bd10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd12:	88db      	ldrh	r3, [r3, #6]
 801bd14:	b29b      	uxth	r3, r3
 801bd16:	8afa      	ldrh	r2, [r7, #22]
 801bd18:	429a      	cmp	r2, r3
 801bd1a:	d902      	bls.n	801bd22 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bd1c:	f04f 33ff 	mov.w	r3, #4294967295
 801bd20:	e106      	b.n	801bf30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801bd22:	68fb      	ldr	r3, [r7, #12]
 801bd24:	685b      	ldr	r3, [r3, #4]
 801bd26:	627b      	str	r3, [r7, #36]	@ 0x24
 801bd28:	e068      	b.n	801bdfc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801bd2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd2c:	685b      	ldr	r3, [r3, #4]
 801bd2e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801bd30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd32:	889b      	ldrh	r3, [r3, #4]
 801bd34:	b29a      	uxth	r2, r3
 801bd36:	693b      	ldr	r3, [r7, #16]
 801bd38:	889b      	ldrh	r3, [r3, #4]
 801bd3a:	b29b      	uxth	r3, r3
 801bd3c:	429a      	cmp	r2, r3
 801bd3e:	d235      	bcs.n	801bdac <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801bd40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bd44:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801bd46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd48:	2b00      	cmp	r3, #0
 801bd4a:	d020      	beq.n	801bd8e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801bd4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd4e:	889b      	ldrh	r3, [r3, #4]
 801bd50:	b29a      	uxth	r2, r3
 801bd52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd54:	88db      	ldrh	r3, [r3, #6]
 801bd56:	b29b      	uxth	r3, r3
 801bd58:	429a      	cmp	r2, r3
 801bd5a:	d307      	bcc.n	801bd6c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801bd5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd5e:	88db      	ldrh	r3, [r3, #6]
 801bd60:	b29a      	uxth	r2, r3
 801bd62:	693b      	ldr	r3, [r7, #16]
 801bd64:	889b      	ldrh	r3, [r3, #4]
 801bd66:	b29b      	uxth	r3, r3
 801bd68:	429a      	cmp	r2, r3
 801bd6a:	d902      	bls.n	801bd72 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bd6c:	f04f 33ff 	mov.w	r3, #4294967295
 801bd70:	e0de      	b.n	801bf30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801bd72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd74:	68ba      	ldr	r2, [r7, #8]
 801bd76:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801bd78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd7a:	88db      	ldrh	r3, [r3, #6]
 801bd7c:	b29a      	uxth	r2, r3
 801bd7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd80:	889b      	ldrh	r3, [r3, #4]
 801bd82:	b29b      	uxth	r3, r3
 801bd84:	429a      	cmp	r2, r3
 801bd86:	d03d      	beq.n	801be04 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801bd88:	2300      	movs	r3, #0
 801bd8a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801bd8c:	e03a      	b.n	801be04 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801bd8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd90:	88db      	ldrh	r3, [r3, #6]
 801bd92:	b29a      	uxth	r2, r3
 801bd94:	693b      	ldr	r3, [r7, #16]
 801bd96:	889b      	ldrh	r3, [r3, #4]
 801bd98:	b29b      	uxth	r3, r3
 801bd9a:	429a      	cmp	r2, r3
 801bd9c:	d902      	bls.n	801bda4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bd9e:	f04f 33ff 	mov.w	r3, #4294967295
 801bda2:	e0c5      	b.n	801bf30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801bda4:	68fb      	ldr	r3, [r7, #12]
 801bda6:	68ba      	ldr	r2, [r7, #8]
 801bda8:	605a      	str	r2, [r3, #4]
      break;
 801bdaa:	e02b      	b.n	801be04 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801bdac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdae:	889b      	ldrh	r3, [r3, #4]
 801bdb0:	b29a      	uxth	r2, r3
 801bdb2:	693b      	ldr	r3, [r7, #16]
 801bdb4:	889b      	ldrh	r3, [r3, #4]
 801bdb6:	b29b      	uxth	r3, r3
 801bdb8:	429a      	cmp	r2, r3
 801bdba:	d102      	bne.n	801bdc2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bdbc:	f04f 33ff 	mov.w	r3, #4294967295
 801bdc0:	e0b6      	b.n	801bf30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801bdc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdc4:	889b      	ldrh	r3, [r3, #4]
 801bdc6:	b29a      	uxth	r2, r3
 801bdc8:	693b      	ldr	r3, [r7, #16]
 801bdca:	88db      	ldrh	r3, [r3, #6]
 801bdcc:	b29b      	uxth	r3, r3
 801bdce:	429a      	cmp	r2, r3
 801bdd0:	d202      	bcs.n	801bdd8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bdd2:	f04f 33ff 	mov.w	r3, #4294967295
 801bdd6:	e0ab      	b.n	801bf30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801bdd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d009      	beq.n	801bdf2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801bdde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bde0:	88db      	ldrh	r3, [r3, #6]
 801bde2:	b29a      	uxth	r2, r3
 801bde4:	693b      	ldr	r3, [r7, #16]
 801bde6:	889b      	ldrh	r3, [r3, #4]
 801bde8:	b29b      	uxth	r3, r3
 801bdea:	429a      	cmp	r2, r3
 801bdec:	d001      	beq.n	801bdf2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801bdee:	2300      	movs	r3, #0
 801bdf0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801bdf2:	693b      	ldr	r3, [r7, #16]
 801bdf4:	681b      	ldr	r3, [r3, #0]
 801bdf6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801bdf8:	693b      	ldr	r3, [r7, #16]
 801bdfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801bdfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d193      	bne.n	801bd2a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801be02:	e000      	b.n	801be06 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801be04:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801be06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d12d      	bne.n	801be68 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801be0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be0e:	2b00      	cmp	r3, #0
 801be10:	d01c      	beq.n	801be4c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801be12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be14:	88db      	ldrh	r3, [r3, #6]
 801be16:	b29a      	uxth	r2, r3
 801be18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be1a:	889b      	ldrh	r3, [r3, #4]
 801be1c:	b29b      	uxth	r3, r3
 801be1e:	429a      	cmp	r2, r3
 801be20:	d906      	bls.n	801be30 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801be22:	4b45      	ldr	r3, [pc, #276]	@ (801bf38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801be24:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801be28:	4944      	ldr	r1, [pc, #272]	@ (801bf3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801be2a:	4845      	ldr	r0, [pc, #276]	@ (801bf40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801be2c:	f001 faca 	bl	801d3c4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801be30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be32:	68ba      	ldr	r2, [r7, #8]
 801be34:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801be36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be38:	88db      	ldrh	r3, [r3, #6]
 801be3a:	b29a      	uxth	r2, r3
 801be3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be3e:	889b      	ldrh	r3, [r3, #4]
 801be40:	b29b      	uxth	r3, r3
 801be42:	429a      	cmp	r2, r3
 801be44:	d010      	beq.n	801be68 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801be46:	2300      	movs	r3, #0
 801be48:	623b      	str	r3, [r7, #32]
 801be4a:	e00d      	b.n	801be68 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801be4c:	68fb      	ldr	r3, [r7, #12]
 801be4e:	685b      	ldr	r3, [r3, #4]
 801be50:	2b00      	cmp	r3, #0
 801be52:	d006      	beq.n	801be62 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801be54:	4b38      	ldr	r3, [pc, #224]	@ (801bf38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801be56:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801be5a:	493a      	ldr	r1, [pc, #232]	@ (801bf44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801be5c:	4838      	ldr	r0, [pc, #224]	@ (801bf40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801be5e:	f001 fab1 	bl	801d3c4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801be62:	68fb      	ldr	r3, [r7, #12]
 801be64:	68ba      	ldr	r2, [r7, #8]
 801be66:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	d105      	bne.n	801be7a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801be6e:	68fb      	ldr	r3, [r7, #12]
 801be70:	7f9b      	ldrb	r3, [r3, #30]
 801be72:	f003 0301 	and.w	r3, r3, #1
 801be76:	2b00      	cmp	r3, #0
 801be78:	d059      	beq.n	801bf2e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801be7a:	6a3b      	ldr	r3, [r7, #32]
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	d04f      	beq.n	801bf20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801be80:	68fb      	ldr	r3, [r7, #12]
 801be82:	685b      	ldr	r3, [r3, #4]
 801be84:	2b00      	cmp	r3, #0
 801be86:	d006      	beq.n	801be96 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801be88:	68fb      	ldr	r3, [r7, #12]
 801be8a:	685b      	ldr	r3, [r3, #4]
 801be8c:	685b      	ldr	r3, [r3, #4]
 801be8e:	889b      	ldrh	r3, [r3, #4]
 801be90:	b29b      	uxth	r3, r3
 801be92:	2b00      	cmp	r3, #0
 801be94:	d002      	beq.n	801be9c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801be96:	2300      	movs	r3, #0
 801be98:	623b      	str	r3, [r7, #32]
 801be9a:	e041      	b.n	801bf20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801be9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be9e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801bea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bea2:	681b      	ldr	r3, [r3, #0]
 801bea4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801bea6:	e012      	b.n	801bece <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801bea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801beaa:	685b      	ldr	r3, [r3, #4]
 801beac:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801beae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801beb0:	88db      	ldrh	r3, [r3, #6]
 801beb2:	b29a      	uxth	r2, r3
 801beb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801beb6:	889b      	ldrh	r3, [r3, #4]
 801beb8:	b29b      	uxth	r3, r3
 801beba:	429a      	cmp	r2, r3
 801bebc:	d002      	beq.n	801bec4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801bebe:	2300      	movs	r3, #0
 801bec0:	623b      	str	r3, [r7, #32]
            break;
 801bec2:	e007      	b.n	801bed4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801bec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bec6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801bec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801beca:	681b      	ldr	r3, [r3, #0]
 801becc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801bece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	d1e9      	bne.n	801bea8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801bed4:	6a3b      	ldr	r3, [r7, #32]
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	d022      	beq.n	801bf20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801beda:	68fb      	ldr	r3, [r7, #12]
 801bedc:	685b      	ldr	r3, [r3, #4]
 801bede:	2b00      	cmp	r3, #0
 801bee0:	d106      	bne.n	801bef0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801bee2:	4b15      	ldr	r3, [pc, #84]	@ (801bf38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bee4:	f240 12df 	movw	r2, #479	@ 0x1df
 801bee8:	4917      	ldr	r1, [pc, #92]	@ (801bf48 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801beea:	4815      	ldr	r0, [pc, #84]	@ (801bf40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801beec:	f001 fa6a 	bl	801d3c4 <iprintf>
          LWIP_ASSERT("sanity check",
 801bef0:	68fb      	ldr	r3, [r7, #12]
 801bef2:	685b      	ldr	r3, [r3, #4]
 801bef4:	685b      	ldr	r3, [r3, #4]
 801bef6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bef8:	429a      	cmp	r2, r3
 801befa:	d106      	bne.n	801bf0a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801befc:	4b0e      	ldr	r3, [pc, #56]	@ (801bf38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801befe:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801bf02:	4911      	ldr	r1, [pc, #68]	@ (801bf48 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801bf04:	480e      	ldr	r0, [pc, #56]	@ (801bf40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bf06:	f001 fa5d 	bl	801d3c4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801bf0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf0c:	681b      	ldr	r3, [r3, #0]
 801bf0e:	2b00      	cmp	r3, #0
 801bf10:	d006      	beq.n	801bf20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801bf12:	4b09      	ldr	r3, [pc, #36]	@ (801bf38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bf14:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801bf18:	490c      	ldr	r1, [pc, #48]	@ (801bf4c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801bf1a:	4809      	ldr	r0, [pc, #36]	@ (801bf40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bf1c:	f001 fa52 	bl	801d3c4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801bf20:	6a3b      	ldr	r3, [r7, #32]
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	bf14      	ite	ne
 801bf26:	2301      	movne	r3, #1
 801bf28:	2300      	moveq	r3, #0
 801bf2a:	b2db      	uxtb	r3, r3
 801bf2c:	e000      	b.n	801bf30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801bf2e:	2300      	movs	r3, #0
}
 801bf30:	4618      	mov	r0, r3
 801bf32:	3730      	adds	r7, #48	@ 0x30
 801bf34:	46bd      	mov	sp, r7
 801bf36:	bd80      	pop	{r7, pc}
 801bf38:	08022164 	.word	0x08022164
 801bf3c:	08022248 	.word	0x08022248
 801bf40:	080221ac 	.word	0x080221ac
 801bf44:	08022268 	.word	0x08022268
 801bf48:	080222a0 	.word	0x080222a0
 801bf4c:	080222b0 	.word	0x080222b0

0801bf50 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801bf50:	b580      	push	{r7, lr}
 801bf52:	b08e      	sub	sp, #56	@ 0x38
 801bf54:	af00      	add	r7, sp, #0
 801bf56:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801bf58:	687b      	ldr	r3, [r7, #4]
 801bf5a:	685b      	ldr	r3, [r3, #4]
 801bf5c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801bf5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf60:	781b      	ldrb	r3, [r3, #0]
 801bf62:	f003 030f 	and.w	r3, r3, #15
 801bf66:	b2db      	uxtb	r3, r3
 801bf68:	009b      	lsls	r3, r3, #2
 801bf6a:	b2db      	uxtb	r3, r3
 801bf6c:	2b14      	cmp	r3, #20
 801bf6e:	f040 8171 	bne.w	801c254 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801bf72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf74:	88db      	ldrh	r3, [r3, #6]
 801bf76:	b29b      	uxth	r3, r3
 801bf78:	4618      	mov	r0, r3
 801bf7a:	f7f4 fb6f 	bl	801065c <lwip_htons>
 801bf7e:	4603      	mov	r3, r0
 801bf80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bf84:	b29b      	uxth	r3, r3
 801bf86:	00db      	lsls	r3, r3, #3
 801bf88:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bf8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf8c:	885b      	ldrh	r3, [r3, #2]
 801bf8e:	b29b      	uxth	r3, r3
 801bf90:	4618      	mov	r0, r3
 801bf92:	f7f4 fb63 	bl	801065c <lwip_htons>
 801bf96:	4603      	mov	r3, r0
 801bf98:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801bf9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf9c:	781b      	ldrb	r3, [r3, #0]
 801bf9e:	f003 030f 	and.w	r3, r3, #15
 801bfa2:	b2db      	uxtb	r3, r3
 801bfa4:	009b      	lsls	r3, r3, #2
 801bfa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801bfaa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801bfae:	b29b      	uxth	r3, r3
 801bfb0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801bfb2:	429a      	cmp	r2, r3
 801bfb4:	f0c0 8150 	bcc.w	801c258 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801bfb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801bfbc:	b29b      	uxth	r3, r3
 801bfbe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801bfc0:	1ad3      	subs	r3, r2, r3
 801bfc2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801bfc4:	6878      	ldr	r0, [r7, #4]
 801bfc6:	f7f6 f88d 	bl	80120e4 <pbuf_clen>
 801bfca:	4603      	mov	r3, r0
 801bfcc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801bfce:	4b8c      	ldr	r3, [pc, #560]	@ (801c200 <ip4_reass+0x2b0>)
 801bfd0:	881b      	ldrh	r3, [r3, #0]
 801bfd2:	461a      	mov	r2, r3
 801bfd4:	8c3b      	ldrh	r3, [r7, #32]
 801bfd6:	4413      	add	r3, r2
 801bfd8:	2b0a      	cmp	r3, #10
 801bfda:	dd10      	ble.n	801bffe <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801bfdc:	8c3b      	ldrh	r3, [r7, #32]
 801bfde:	4619      	mov	r1, r3
 801bfe0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bfe2:	f7ff fd81 	bl	801bae8 <ip_reass_remove_oldest_datagram>
 801bfe6:	4603      	mov	r3, r0
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	f000 8137 	beq.w	801c25c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801bfee:	4b84      	ldr	r3, [pc, #528]	@ (801c200 <ip4_reass+0x2b0>)
 801bff0:	881b      	ldrh	r3, [r3, #0]
 801bff2:	461a      	mov	r2, r3
 801bff4:	8c3b      	ldrh	r3, [r7, #32]
 801bff6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801bff8:	2b0a      	cmp	r3, #10
 801bffa:	f300 812f 	bgt.w	801c25c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801bffe:	4b81      	ldr	r3, [pc, #516]	@ (801c204 <ip4_reass+0x2b4>)
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	633b      	str	r3, [r7, #48]	@ 0x30
 801c004:	e015      	b.n	801c032 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801c006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c008:	695a      	ldr	r2, [r3, #20]
 801c00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c00c:	68db      	ldr	r3, [r3, #12]
 801c00e:	429a      	cmp	r2, r3
 801c010:	d10c      	bne.n	801c02c <ip4_reass+0xdc>
 801c012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c014:	699a      	ldr	r2, [r3, #24]
 801c016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c018:	691b      	ldr	r3, [r3, #16]
 801c01a:	429a      	cmp	r2, r3
 801c01c:	d106      	bne.n	801c02c <ip4_reass+0xdc>
 801c01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c020:	899a      	ldrh	r2, [r3, #12]
 801c022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c024:	889b      	ldrh	r3, [r3, #4]
 801c026:	b29b      	uxth	r3, r3
 801c028:	429a      	cmp	r2, r3
 801c02a:	d006      	beq.n	801c03a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c02e:	681b      	ldr	r3, [r3, #0]
 801c030:	633b      	str	r3, [r7, #48]	@ 0x30
 801c032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c034:	2b00      	cmp	r3, #0
 801c036:	d1e6      	bne.n	801c006 <ip4_reass+0xb6>
 801c038:	e000      	b.n	801c03c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801c03a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801c03c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c03e:	2b00      	cmp	r3, #0
 801c040:	d109      	bne.n	801c056 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801c042:	8c3b      	ldrh	r3, [r7, #32]
 801c044:	4619      	mov	r1, r3
 801c046:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c048:	f7ff fdb0 	bl	801bbac <ip_reass_enqueue_new_datagram>
 801c04c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801c04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c050:	2b00      	cmp	r3, #0
 801c052:	d11c      	bne.n	801c08e <ip4_reass+0x13e>
      goto nullreturn;
 801c054:	e105      	b.n	801c262 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c058:	88db      	ldrh	r3, [r3, #6]
 801c05a:	b29b      	uxth	r3, r3
 801c05c:	4618      	mov	r0, r3
 801c05e:	f7f4 fafd 	bl	801065c <lwip_htons>
 801c062:	4603      	mov	r3, r0
 801c064:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c068:	2b00      	cmp	r3, #0
 801c06a:	d110      	bne.n	801c08e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801c06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c06e:	89db      	ldrh	r3, [r3, #14]
 801c070:	4618      	mov	r0, r3
 801c072:	f7f4 faf3 	bl	801065c <lwip_htons>
 801c076:	4603      	mov	r3, r0
 801c078:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c07c:	2b00      	cmp	r3, #0
 801c07e:	d006      	beq.n	801c08e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801c080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c082:	3308      	adds	r3, #8
 801c084:	2214      	movs	r2, #20
 801c086:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c088:	4618      	mov	r0, r3
 801c08a:	f001 fbc2 	bl	801d812 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801c08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c090:	88db      	ldrh	r3, [r3, #6]
 801c092:	b29b      	uxth	r3, r3
 801c094:	f003 0320 	and.w	r3, r3, #32
 801c098:	2b00      	cmp	r3, #0
 801c09a:	bf0c      	ite	eq
 801c09c:	2301      	moveq	r3, #1
 801c09e:	2300      	movne	r3, #0
 801c0a0:	b2db      	uxtb	r3, r3
 801c0a2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801c0a4:	69fb      	ldr	r3, [r7, #28]
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	d00e      	beq.n	801c0c8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801c0aa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c0ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c0ae:	4413      	add	r3, r2
 801c0b0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801c0b2:	8b7a      	ldrh	r2, [r7, #26]
 801c0b4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c0b6:	429a      	cmp	r2, r3
 801c0b8:	f0c0 80a0 	bcc.w	801c1fc <ip4_reass+0x2ac>
 801c0bc:	8b7b      	ldrh	r3, [r7, #26]
 801c0be:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801c0c2:	4293      	cmp	r3, r2
 801c0c4:	f200 809a 	bhi.w	801c1fc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801c0c8:	69fa      	ldr	r2, [r7, #28]
 801c0ca:	6879      	ldr	r1, [r7, #4]
 801c0cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c0ce:	f7ff fdd5 	bl	801bc7c <ip_reass_chain_frag_into_datagram_and_validate>
 801c0d2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801c0d4:	697b      	ldr	r3, [r7, #20]
 801c0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c0da:	f000 809b 	beq.w	801c214 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c0de:	4b48      	ldr	r3, [pc, #288]	@ (801c200 <ip4_reass+0x2b0>)
 801c0e0:	881a      	ldrh	r2, [r3, #0]
 801c0e2:	8c3b      	ldrh	r3, [r7, #32]
 801c0e4:	4413      	add	r3, r2
 801c0e6:	b29a      	uxth	r2, r3
 801c0e8:	4b45      	ldr	r3, [pc, #276]	@ (801c200 <ip4_reass+0x2b0>)
 801c0ea:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801c0ec:	69fb      	ldr	r3, [r7, #28]
 801c0ee:	2b00      	cmp	r3, #0
 801c0f0:	d00d      	beq.n	801c10e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801c0f2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c0f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c0f6:	4413      	add	r3, r2
 801c0f8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801c0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0fc:	8a7a      	ldrh	r2, [r7, #18]
 801c0fe:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c102:	7f9b      	ldrb	r3, [r3, #30]
 801c104:	f043 0301 	orr.w	r3, r3, #1
 801c108:	b2da      	uxtb	r2, r3
 801c10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c10c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801c10e:	697b      	ldr	r3, [r7, #20]
 801c110:	2b01      	cmp	r3, #1
 801c112:	d171      	bne.n	801c1f8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801c114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c116:	8b9b      	ldrh	r3, [r3, #28]
 801c118:	3314      	adds	r3, #20
 801c11a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801c11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c11e:	685b      	ldr	r3, [r3, #4]
 801c120:	685b      	ldr	r3, [r3, #4]
 801c122:	681b      	ldr	r3, [r3, #0]
 801c124:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801c126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c128:	685b      	ldr	r3, [r3, #4]
 801c12a:	685b      	ldr	r3, [r3, #4]
 801c12c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c130:	3308      	adds	r3, #8
 801c132:	2214      	movs	r2, #20
 801c134:	4619      	mov	r1, r3
 801c136:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c138:	f001 fb6b 	bl	801d812 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801c13c:	8a3b      	ldrh	r3, [r7, #16]
 801c13e:	4618      	mov	r0, r3
 801c140:	f7f4 fa8c 	bl	801065c <lwip_htons>
 801c144:	4603      	mov	r3, r0
 801c146:	461a      	mov	r2, r3
 801c148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c14a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801c14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c14e:	2200      	movs	r2, #0
 801c150:	719a      	strb	r2, [r3, #6]
 801c152:	2200      	movs	r2, #0
 801c154:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801c156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c158:	2200      	movs	r2, #0
 801c15a:	729a      	strb	r2, [r3, #10]
 801c15c:	2200      	movs	r2, #0
 801c15e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801c160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c162:	685b      	ldr	r3, [r3, #4]
 801c164:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801c166:	e00d      	b.n	801c184 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801c168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c16a:	685b      	ldr	r3, [r3, #4]
 801c16c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801c16e:	2114      	movs	r1, #20
 801c170:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801c172:	f7f5 fea3 	bl	8011ebc <pbuf_remove_header>
      pbuf_cat(p, r);
 801c176:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c178:	6878      	ldr	r0, [r7, #4]
 801c17a:	f7f5 fff3 	bl	8012164 <pbuf_cat>
      r = iprh->next_pbuf;
 801c17e:	68fb      	ldr	r3, [r7, #12]
 801c180:	681b      	ldr	r3, [r3, #0]
 801c182:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801c184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c186:	2b00      	cmp	r3, #0
 801c188:	d1ee      	bne.n	801c168 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801c18a:	4b1e      	ldr	r3, [pc, #120]	@ (801c204 <ip4_reass+0x2b4>)
 801c18c:	681b      	ldr	r3, [r3, #0]
 801c18e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c190:	429a      	cmp	r2, r3
 801c192:	d102      	bne.n	801c19a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801c194:	2300      	movs	r3, #0
 801c196:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c198:	e010      	b.n	801c1bc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c19a:	4b1a      	ldr	r3, [pc, #104]	@ (801c204 <ip4_reass+0x2b4>)
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c1a0:	e007      	b.n	801c1b2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801c1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1a4:	681b      	ldr	r3, [r3, #0]
 801c1a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c1a8:	429a      	cmp	r2, r3
 801c1aa:	d006      	beq.n	801c1ba <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	d1f4      	bne.n	801c1a2 <ip4_reass+0x252>
 801c1b8:	e000      	b.n	801c1bc <ip4_reass+0x26c>
          break;
 801c1ba:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801c1bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c1be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c1c0:	f7ff fd2e 	bl	801bc20 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801c1c4:	6878      	ldr	r0, [r7, #4]
 801c1c6:	f7f5 ff8d 	bl	80120e4 <pbuf_clen>
 801c1ca:	4603      	mov	r3, r0
 801c1cc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801c1ce:	4b0c      	ldr	r3, [pc, #48]	@ (801c200 <ip4_reass+0x2b0>)
 801c1d0:	881b      	ldrh	r3, [r3, #0]
 801c1d2:	8c3a      	ldrh	r2, [r7, #32]
 801c1d4:	429a      	cmp	r2, r3
 801c1d6:	d906      	bls.n	801c1e6 <ip4_reass+0x296>
 801c1d8:	4b0b      	ldr	r3, [pc, #44]	@ (801c208 <ip4_reass+0x2b8>)
 801c1da:	f240 229b 	movw	r2, #667	@ 0x29b
 801c1de:	490b      	ldr	r1, [pc, #44]	@ (801c20c <ip4_reass+0x2bc>)
 801c1e0:	480b      	ldr	r0, [pc, #44]	@ (801c210 <ip4_reass+0x2c0>)
 801c1e2:	f001 f8ef 	bl	801d3c4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801c1e6:	4b06      	ldr	r3, [pc, #24]	@ (801c200 <ip4_reass+0x2b0>)
 801c1e8:	881a      	ldrh	r2, [r3, #0]
 801c1ea:	8c3b      	ldrh	r3, [r7, #32]
 801c1ec:	1ad3      	subs	r3, r2, r3
 801c1ee:	b29a      	uxth	r2, r3
 801c1f0:	4b03      	ldr	r3, [pc, #12]	@ (801c200 <ip4_reass+0x2b0>)
 801c1f2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	e038      	b.n	801c26a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801c1f8:	2300      	movs	r3, #0
 801c1fa:	e036      	b.n	801c26a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801c1fc:	bf00      	nop
 801c1fe:	e00a      	b.n	801c216 <ip4_reass+0x2c6>
 801c200:	2400cdc0 	.word	0x2400cdc0
 801c204:	2400cdbc 	.word	0x2400cdbc
 801c208:	08022164 	.word	0x08022164
 801c20c:	080222d4 	.word	0x080222d4
 801c210:	080221ac 	.word	0x080221ac
    goto nullreturn_ipr;
 801c214:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801c216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c218:	2b00      	cmp	r3, #0
 801c21a:	d106      	bne.n	801c22a <ip4_reass+0x2da>
 801c21c:	4b15      	ldr	r3, [pc, #84]	@ (801c274 <ip4_reass+0x324>)
 801c21e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801c222:	4915      	ldr	r1, [pc, #84]	@ (801c278 <ip4_reass+0x328>)
 801c224:	4815      	ldr	r0, [pc, #84]	@ (801c27c <ip4_reass+0x32c>)
 801c226:	f001 f8cd 	bl	801d3c4 <iprintf>
  if (ipr->p == NULL) {
 801c22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c22c:	685b      	ldr	r3, [r3, #4]
 801c22e:	2b00      	cmp	r3, #0
 801c230:	d116      	bne.n	801c260 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801c232:	4b13      	ldr	r3, [pc, #76]	@ (801c280 <ip4_reass+0x330>)
 801c234:	681b      	ldr	r3, [r3, #0]
 801c236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c238:	429a      	cmp	r2, r3
 801c23a:	d006      	beq.n	801c24a <ip4_reass+0x2fa>
 801c23c:	4b0d      	ldr	r3, [pc, #52]	@ (801c274 <ip4_reass+0x324>)
 801c23e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801c242:	4910      	ldr	r1, [pc, #64]	@ (801c284 <ip4_reass+0x334>)
 801c244:	480d      	ldr	r0, [pc, #52]	@ (801c27c <ip4_reass+0x32c>)
 801c246:	f001 f8bd 	bl	801d3c4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801c24a:	2100      	movs	r1, #0
 801c24c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c24e:	f7ff fce7 	bl	801bc20 <ip_reass_dequeue_datagram>
 801c252:	e006      	b.n	801c262 <ip4_reass+0x312>
    goto nullreturn;
 801c254:	bf00      	nop
 801c256:	e004      	b.n	801c262 <ip4_reass+0x312>
    goto nullreturn;
 801c258:	bf00      	nop
 801c25a:	e002      	b.n	801c262 <ip4_reass+0x312>
      goto nullreturn;
 801c25c:	bf00      	nop
 801c25e:	e000      	b.n	801c262 <ip4_reass+0x312>
  }

nullreturn:
 801c260:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801c262:	6878      	ldr	r0, [r7, #4]
 801c264:	f7f5 feb0 	bl	8011fc8 <pbuf_free>
  return NULL;
 801c268:	2300      	movs	r3, #0
}
 801c26a:	4618      	mov	r0, r3
 801c26c:	3738      	adds	r7, #56	@ 0x38
 801c26e:	46bd      	mov	sp, r7
 801c270:	bd80      	pop	{r7, pc}
 801c272:	bf00      	nop
 801c274:	08022164 	.word	0x08022164
 801c278:	080222f0 	.word	0x080222f0
 801c27c:	080221ac 	.word	0x080221ac
 801c280:	2400cdbc 	.word	0x2400cdbc
 801c284:	080222fc 	.word	0x080222fc

0801c288 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801c288:	b580      	push	{r7, lr}
 801c28a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801c28c:	2005      	movs	r0, #5
 801c28e:	f7f4 ff75 	bl	801117c <memp_malloc>
 801c292:	4603      	mov	r3, r0
}
 801c294:	4618      	mov	r0, r3
 801c296:	bd80      	pop	{r7, pc}

0801c298 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801c298:	b580      	push	{r7, lr}
 801c29a:	b082      	sub	sp, #8
 801c29c:	af00      	add	r7, sp, #0
 801c29e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801c2a0:	687b      	ldr	r3, [r7, #4]
 801c2a2:	2b00      	cmp	r3, #0
 801c2a4:	d106      	bne.n	801c2b4 <ip_frag_free_pbuf_custom_ref+0x1c>
 801c2a6:	4b07      	ldr	r3, [pc, #28]	@ (801c2c4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c2a8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801c2ac:	4906      	ldr	r1, [pc, #24]	@ (801c2c8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801c2ae:	4807      	ldr	r0, [pc, #28]	@ (801c2cc <ip_frag_free_pbuf_custom_ref+0x34>)
 801c2b0:	f001 f888 	bl	801d3c4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c2b4:	6879      	ldr	r1, [r7, #4]
 801c2b6:	2005      	movs	r0, #5
 801c2b8:	f7f4 ffd6 	bl	8011268 <memp_free>
}
 801c2bc:	bf00      	nop
 801c2be:	3708      	adds	r7, #8
 801c2c0:	46bd      	mov	sp, r7
 801c2c2:	bd80      	pop	{r7, pc}
 801c2c4:	08022164 	.word	0x08022164
 801c2c8:	0802231c 	.word	0x0802231c
 801c2cc:	080221ac 	.word	0x080221ac

0801c2d0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c2d0:	b580      	push	{r7, lr}
 801c2d2:	b084      	sub	sp, #16
 801c2d4:	af00      	add	r7, sp, #0
 801c2d6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801c2d8:	687b      	ldr	r3, [r7, #4]
 801c2da:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c2dc:	68fb      	ldr	r3, [r7, #12]
 801c2de:	2b00      	cmp	r3, #0
 801c2e0:	d106      	bne.n	801c2f0 <ipfrag_free_pbuf_custom+0x20>
 801c2e2:	4b11      	ldr	r3, [pc, #68]	@ (801c328 <ipfrag_free_pbuf_custom+0x58>)
 801c2e4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801c2e8:	4910      	ldr	r1, [pc, #64]	@ (801c32c <ipfrag_free_pbuf_custom+0x5c>)
 801c2ea:	4811      	ldr	r0, [pc, #68]	@ (801c330 <ipfrag_free_pbuf_custom+0x60>)
 801c2ec:	f001 f86a 	bl	801d3c4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801c2f0:	68fa      	ldr	r2, [r7, #12]
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	429a      	cmp	r2, r3
 801c2f6:	d006      	beq.n	801c306 <ipfrag_free_pbuf_custom+0x36>
 801c2f8:	4b0b      	ldr	r3, [pc, #44]	@ (801c328 <ipfrag_free_pbuf_custom+0x58>)
 801c2fa:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801c2fe:	490d      	ldr	r1, [pc, #52]	@ (801c334 <ipfrag_free_pbuf_custom+0x64>)
 801c300:	480b      	ldr	r0, [pc, #44]	@ (801c330 <ipfrag_free_pbuf_custom+0x60>)
 801c302:	f001 f85f 	bl	801d3c4 <iprintf>
  if (pcr->original != NULL) {
 801c306:	68fb      	ldr	r3, [r7, #12]
 801c308:	695b      	ldr	r3, [r3, #20]
 801c30a:	2b00      	cmp	r3, #0
 801c30c:	d004      	beq.n	801c318 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801c30e:	68fb      	ldr	r3, [r7, #12]
 801c310:	695b      	ldr	r3, [r3, #20]
 801c312:	4618      	mov	r0, r3
 801c314:	f7f5 fe58 	bl	8011fc8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c318:	68f8      	ldr	r0, [r7, #12]
 801c31a:	f7ff ffbd 	bl	801c298 <ip_frag_free_pbuf_custom_ref>
}
 801c31e:	bf00      	nop
 801c320:	3710      	adds	r7, #16
 801c322:	46bd      	mov	sp, r7
 801c324:	bd80      	pop	{r7, pc}
 801c326:	bf00      	nop
 801c328:	08022164 	.word	0x08022164
 801c32c:	08022328 	.word	0x08022328
 801c330:	080221ac 	.word	0x080221ac
 801c334:	08022334 	.word	0x08022334

0801c338 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801c338:	b580      	push	{r7, lr}
 801c33a:	b094      	sub	sp, #80	@ 0x50
 801c33c:	af02      	add	r7, sp, #8
 801c33e:	60f8      	str	r0, [r7, #12]
 801c340:	60b9      	str	r1, [r7, #8]
 801c342:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801c344:	2300      	movs	r3, #0
 801c346:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801c34a:	68bb      	ldr	r3, [r7, #8]
 801c34c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c34e:	3b14      	subs	r3, #20
 801c350:	2b00      	cmp	r3, #0
 801c352:	da00      	bge.n	801c356 <ip4_frag+0x1e>
 801c354:	3307      	adds	r3, #7
 801c356:	10db      	asrs	r3, r3, #3
 801c358:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801c35a:	2314      	movs	r3, #20
 801c35c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801c35e:	68fb      	ldr	r3, [r7, #12]
 801c360:	685b      	ldr	r3, [r3, #4]
 801c362:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801c364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c366:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801c368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c36a:	781b      	ldrb	r3, [r3, #0]
 801c36c:	f003 030f 	and.w	r3, r3, #15
 801c370:	b2db      	uxtb	r3, r3
 801c372:	009b      	lsls	r3, r3, #2
 801c374:	b2db      	uxtb	r3, r3
 801c376:	2b14      	cmp	r3, #20
 801c378:	d002      	beq.n	801c380 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801c37a:	f06f 0305 	mvn.w	r3, #5
 801c37e:	e110      	b.n	801c5a2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801c380:	68fb      	ldr	r3, [r7, #12]
 801c382:	895b      	ldrh	r3, [r3, #10]
 801c384:	2b13      	cmp	r3, #19
 801c386:	d809      	bhi.n	801c39c <ip4_frag+0x64>
 801c388:	4b88      	ldr	r3, [pc, #544]	@ (801c5ac <ip4_frag+0x274>)
 801c38a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801c38e:	4988      	ldr	r1, [pc, #544]	@ (801c5b0 <ip4_frag+0x278>)
 801c390:	4888      	ldr	r0, [pc, #544]	@ (801c5b4 <ip4_frag+0x27c>)
 801c392:	f001 f817 	bl	801d3c4 <iprintf>
 801c396:	f06f 0305 	mvn.w	r3, #5
 801c39a:	e102      	b.n	801c5a2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801c39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c39e:	88db      	ldrh	r3, [r3, #6]
 801c3a0:	b29b      	uxth	r3, r3
 801c3a2:	4618      	mov	r0, r3
 801c3a4:	f7f4 f95a 	bl	801065c <lwip_htons>
 801c3a8:	4603      	mov	r3, r0
 801c3aa:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801c3ac:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c3ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c3b2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801c3b6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c3b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c3bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801c3be:	68fb      	ldr	r3, [r7, #12]
 801c3c0:	891b      	ldrh	r3, [r3, #8]
 801c3c2:	3b14      	subs	r3, #20
 801c3c4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801c3c8:	e0e1      	b.n	801c58e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801c3ca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c3cc:	00db      	lsls	r3, r3, #3
 801c3ce:	b29b      	uxth	r3, r3
 801c3d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c3d4:	4293      	cmp	r3, r2
 801c3d6:	bf28      	it	cs
 801c3d8:	4613      	movcs	r3, r2
 801c3da:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c3dc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c3e0:	2114      	movs	r1, #20
 801c3e2:	200e      	movs	r0, #14
 801c3e4:	f7f5 fb0c 	bl	8011a00 <pbuf_alloc>
 801c3e8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801c3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3ec:	2b00      	cmp	r3, #0
 801c3ee:	f000 80d5 	beq.w	801c59c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801c3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3f4:	895b      	ldrh	r3, [r3, #10]
 801c3f6:	2b13      	cmp	r3, #19
 801c3f8:	d806      	bhi.n	801c408 <ip4_frag+0xd0>
 801c3fa:	4b6c      	ldr	r3, [pc, #432]	@ (801c5ac <ip4_frag+0x274>)
 801c3fc:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801c400:	496d      	ldr	r1, [pc, #436]	@ (801c5b8 <ip4_frag+0x280>)
 801c402:	486c      	ldr	r0, [pc, #432]	@ (801c5b4 <ip4_frag+0x27c>)
 801c404:	f000 ffde 	bl	801d3c4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801c408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c40a:	685b      	ldr	r3, [r3, #4]
 801c40c:	2214      	movs	r2, #20
 801c40e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c410:	4618      	mov	r0, r3
 801c412:	f001 f9fe 	bl	801d812 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801c416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c418:	685b      	ldr	r3, [r3, #4]
 801c41a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801c41c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c41e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801c422:	e064      	b.n	801c4ee <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801c424:	68fb      	ldr	r3, [r7, #12]
 801c426:	895a      	ldrh	r2, [r3, #10]
 801c428:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c42a:	1ad3      	subs	r3, r2, r3
 801c42c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801c42e:	68fb      	ldr	r3, [r7, #12]
 801c430:	895b      	ldrh	r3, [r3, #10]
 801c432:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c434:	429a      	cmp	r2, r3
 801c436:	d906      	bls.n	801c446 <ip4_frag+0x10e>
 801c438:	4b5c      	ldr	r3, [pc, #368]	@ (801c5ac <ip4_frag+0x274>)
 801c43a:	f240 322d 	movw	r2, #813	@ 0x32d
 801c43e:	495f      	ldr	r1, [pc, #380]	@ (801c5bc <ip4_frag+0x284>)
 801c440:	485c      	ldr	r0, [pc, #368]	@ (801c5b4 <ip4_frag+0x27c>)
 801c442:	f000 ffbf 	bl	801d3c4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801c446:	8bfa      	ldrh	r2, [r7, #30]
 801c448:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c44c:	4293      	cmp	r3, r2
 801c44e:	bf28      	it	cs
 801c450:	4613      	movcs	r3, r2
 801c452:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801c456:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c45a:	2b00      	cmp	r3, #0
 801c45c:	d105      	bne.n	801c46a <ip4_frag+0x132>
        poff = 0;
 801c45e:	2300      	movs	r3, #0
 801c460:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801c462:	68fb      	ldr	r3, [r7, #12]
 801c464:	681b      	ldr	r3, [r3, #0]
 801c466:	60fb      	str	r3, [r7, #12]
        continue;
 801c468:	e041      	b.n	801c4ee <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801c46a:	f7ff ff0d 	bl	801c288 <ip_frag_alloc_pbuf_custom_ref>
 801c46e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801c470:	69bb      	ldr	r3, [r7, #24]
 801c472:	2b00      	cmp	r3, #0
 801c474:	d103      	bne.n	801c47e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801c476:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c478:	f7f5 fda6 	bl	8011fc8 <pbuf_free>
        goto memerr;
 801c47c:	e08f      	b.n	801c59e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c47e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c484:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c486:	4413      	add	r3, r2
 801c488:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801c48c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801c490:	9201      	str	r2, [sp, #4]
 801c492:	9300      	str	r3, [sp, #0]
 801c494:	4603      	mov	r3, r0
 801c496:	2241      	movs	r2, #65	@ 0x41
 801c498:	2000      	movs	r0, #0
 801c49a:	f7f5 fbdb 	bl	8011c54 <pbuf_alloced_custom>
 801c49e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801c4a0:	697b      	ldr	r3, [r7, #20]
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d106      	bne.n	801c4b4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801c4a6:	69b8      	ldr	r0, [r7, #24]
 801c4a8:	f7ff fef6 	bl	801c298 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801c4ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c4ae:	f7f5 fd8b 	bl	8011fc8 <pbuf_free>
        goto memerr;
 801c4b2:	e074      	b.n	801c59e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801c4b4:	68f8      	ldr	r0, [r7, #12]
 801c4b6:	f7f5 fe2d 	bl	8012114 <pbuf_ref>
      pcr->original = p;
 801c4ba:	69bb      	ldr	r3, [r7, #24]
 801c4bc:	68fa      	ldr	r2, [r7, #12]
 801c4be:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801c4c0:	69bb      	ldr	r3, [r7, #24]
 801c4c2:	4a3f      	ldr	r2, [pc, #252]	@ (801c5c0 <ip4_frag+0x288>)
 801c4c4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801c4c6:	6979      	ldr	r1, [r7, #20]
 801c4c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c4ca:	f7f5 fe4b 	bl	8012164 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801c4ce:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801c4d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c4d6:	1ad3      	subs	r3, r2, r3
 801c4d8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801c4dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	d004      	beq.n	801c4ee <ip4_frag+0x1b6>
        poff = 0;
 801c4e4:	2300      	movs	r3, #0
 801c4e6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801c4e8:	68fb      	ldr	r3, [r7, #12]
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801c4ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d196      	bne.n	801c424 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801c4f6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c4f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c4fc:	4413      	add	r3, r2
 801c4fe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801c500:	68bb      	ldr	r3, [r7, #8]
 801c502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c504:	f1a3 0213 	sub.w	r2, r3, #19
 801c508:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c50c:	429a      	cmp	r2, r3
 801c50e:	bfcc      	ite	gt
 801c510:	2301      	movgt	r3, #1
 801c512:	2300      	movle	r3, #0
 801c514:	b2db      	uxtb	r3, r3
 801c516:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801c518:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801c51c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c520:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801c522:	6a3b      	ldr	r3, [r7, #32]
 801c524:	2b00      	cmp	r3, #0
 801c526:	d002      	beq.n	801c52e <ip4_frag+0x1f6>
 801c528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	d003      	beq.n	801c536 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801c52e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c530:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801c534:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c536:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c538:	4618      	mov	r0, r3
 801c53a:	f7f4 f88f 	bl	801065c <lwip_htons>
 801c53e:	4603      	mov	r3, r0
 801c540:	461a      	mov	r2, r3
 801c542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c544:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801c546:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c548:	3314      	adds	r3, #20
 801c54a:	b29b      	uxth	r3, r3
 801c54c:	4618      	mov	r0, r3
 801c54e:	f7f4 f885 	bl	801065c <lwip_htons>
 801c552:	4603      	mov	r3, r0
 801c554:	461a      	mov	r2, r3
 801c556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c558:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801c55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c55c:	2200      	movs	r2, #0
 801c55e:	729a      	strb	r2, [r3, #10]
 801c560:	2200      	movs	r2, #0
 801c562:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801c564:	68bb      	ldr	r3, [r7, #8]
 801c566:	695b      	ldr	r3, [r3, #20]
 801c568:	687a      	ldr	r2, [r7, #4]
 801c56a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c56c:	68b8      	ldr	r0, [r7, #8]
 801c56e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801c570:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c572:	f7f5 fd29 	bl	8011fc8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801c576:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c57a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c57c:	1ad3      	subs	r3, r2, r3
 801c57e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801c582:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801c586:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c588:	4413      	add	r3, r2
 801c58a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801c58e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c592:	2b00      	cmp	r3, #0
 801c594:	f47f af19 	bne.w	801c3ca <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801c598:	2300      	movs	r3, #0
 801c59a:	e002      	b.n	801c5a2 <ip4_frag+0x26a>
      goto memerr;
 801c59c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801c59e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c5a2:	4618      	mov	r0, r3
 801c5a4:	3748      	adds	r7, #72	@ 0x48
 801c5a6:	46bd      	mov	sp, r7
 801c5a8:	bd80      	pop	{r7, pc}
 801c5aa:	bf00      	nop
 801c5ac:	08022164 	.word	0x08022164
 801c5b0:	08022340 	.word	0x08022340
 801c5b4:	080221ac 	.word	0x080221ac
 801c5b8:	0802235c 	.word	0x0802235c
 801c5bc:	0802237c 	.word	0x0802237c
 801c5c0:	0801c2d1 	.word	0x0801c2d1

0801c5c4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801c5c4:	b580      	push	{r7, lr}
 801c5c6:	b086      	sub	sp, #24
 801c5c8:	af00      	add	r7, sp, #0
 801c5ca:	6078      	str	r0, [r7, #4]
 801c5cc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801c5ce:	230e      	movs	r3, #14
 801c5d0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801c5d2:	687b      	ldr	r3, [r7, #4]
 801c5d4:	895b      	ldrh	r3, [r3, #10]
 801c5d6:	2b0e      	cmp	r3, #14
 801c5d8:	d96e      	bls.n	801c6b8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801c5da:	687b      	ldr	r3, [r7, #4]
 801c5dc:	7bdb      	ldrb	r3, [r3, #15]
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	d106      	bne.n	801c5f0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801c5e2:	683b      	ldr	r3, [r7, #0]
 801c5e4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801c5e8:	3301      	adds	r3, #1
 801c5ea:	b2da      	uxtb	r2, r3
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	685b      	ldr	r3, [r3, #4]
 801c5f4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801c5f6:	693b      	ldr	r3, [r7, #16]
 801c5f8:	7b1a      	ldrb	r2, [r3, #12]
 801c5fa:	7b5b      	ldrb	r3, [r3, #13]
 801c5fc:	021b      	lsls	r3, r3, #8
 801c5fe:	4313      	orrs	r3, r2
 801c600:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801c602:	693b      	ldr	r3, [r7, #16]
 801c604:	781b      	ldrb	r3, [r3, #0]
 801c606:	f003 0301 	and.w	r3, r3, #1
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	d023      	beq.n	801c656 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801c60e:	693b      	ldr	r3, [r7, #16]
 801c610:	781b      	ldrb	r3, [r3, #0]
 801c612:	2b01      	cmp	r3, #1
 801c614:	d10f      	bne.n	801c636 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c616:	693b      	ldr	r3, [r7, #16]
 801c618:	785b      	ldrb	r3, [r3, #1]
 801c61a:	2b00      	cmp	r3, #0
 801c61c:	d11b      	bne.n	801c656 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801c61e:	693b      	ldr	r3, [r7, #16]
 801c620:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c622:	2b5e      	cmp	r3, #94	@ 0x5e
 801c624:	d117      	bne.n	801c656 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	7b5b      	ldrb	r3, [r3, #13]
 801c62a:	f043 0310 	orr.w	r3, r3, #16
 801c62e:	b2da      	uxtb	r2, r3
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	735a      	strb	r2, [r3, #13]
 801c634:	e00f      	b.n	801c656 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c636:	693b      	ldr	r3, [r7, #16]
 801c638:	2206      	movs	r2, #6
 801c63a:	4928      	ldr	r1, [pc, #160]	@ (801c6dc <ethernet_input+0x118>)
 801c63c:	4618      	mov	r0, r3
 801c63e:	f001 f809 	bl	801d654 <memcmp>
 801c642:	4603      	mov	r3, r0
 801c644:	2b00      	cmp	r3, #0
 801c646:	d106      	bne.n	801c656 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	7b5b      	ldrb	r3, [r3, #13]
 801c64c:	f043 0308 	orr.w	r3, r3, #8
 801c650:	b2da      	uxtb	r2, r3
 801c652:	687b      	ldr	r3, [r7, #4]
 801c654:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801c656:	89fb      	ldrh	r3, [r7, #14]
 801c658:	2b08      	cmp	r3, #8
 801c65a:	d003      	beq.n	801c664 <ethernet_input+0xa0>
 801c65c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801c660:	d014      	beq.n	801c68c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801c662:	e032      	b.n	801c6ca <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c664:	683b      	ldr	r3, [r7, #0]
 801c666:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801c66a:	f003 0308 	and.w	r3, r3, #8
 801c66e:	2b00      	cmp	r3, #0
 801c670:	d024      	beq.n	801c6bc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c672:	8afb      	ldrh	r3, [r7, #22]
 801c674:	4619      	mov	r1, r3
 801c676:	6878      	ldr	r0, [r7, #4]
 801c678:	f7f5 fc20 	bl	8011ebc <pbuf_remove_header>
 801c67c:	4603      	mov	r3, r0
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d11e      	bne.n	801c6c0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801c682:	6839      	ldr	r1, [r7, #0]
 801c684:	6878      	ldr	r0, [r7, #4]
 801c686:	f7fe ff03 	bl	801b490 <ip4_input>
      break;
 801c68a:	e013      	b.n	801c6b4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c68c:	683b      	ldr	r3, [r7, #0]
 801c68e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801c692:	f003 0308 	and.w	r3, r3, #8
 801c696:	2b00      	cmp	r3, #0
 801c698:	d014      	beq.n	801c6c4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c69a:	8afb      	ldrh	r3, [r7, #22]
 801c69c:	4619      	mov	r1, r3
 801c69e:	6878      	ldr	r0, [r7, #4]
 801c6a0:	f7f5 fc0c 	bl	8011ebc <pbuf_remove_header>
 801c6a4:	4603      	mov	r3, r0
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	d10e      	bne.n	801c6c8 <ethernet_input+0x104>
        etharp_input(p, netif);
 801c6aa:	6839      	ldr	r1, [r7, #0]
 801c6ac:	6878      	ldr	r0, [r7, #4]
 801c6ae:	f7fe f879 	bl	801a7a4 <etharp_input>
      break;
 801c6b2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801c6b4:	2300      	movs	r3, #0
 801c6b6:	e00c      	b.n	801c6d2 <ethernet_input+0x10e>
    goto free_and_return;
 801c6b8:	bf00      	nop
 801c6ba:	e006      	b.n	801c6ca <ethernet_input+0x106>
        goto free_and_return;
 801c6bc:	bf00      	nop
 801c6be:	e004      	b.n	801c6ca <ethernet_input+0x106>
        goto free_and_return;
 801c6c0:	bf00      	nop
 801c6c2:	e002      	b.n	801c6ca <ethernet_input+0x106>
        goto free_and_return;
 801c6c4:	bf00      	nop
 801c6c6:	e000      	b.n	801c6ca <ethernet_input+0x106>
        goto free_and_return;
 801c6c8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801c6ca:	6878      	ldr	r0, [r7, #4]
 801c6cc:	f7f5 fc7c 	bl	8011fc8 <pbuf_free>
  return ERR_OK;
 801c6d0:	2300      	movs	r3, #0
}
 801c6d2:	4618      	mov	r0, r3
 801c6d4:	3718      	adds	r7, #24
 801c6d6:	46bd      	mov	sp, r7
 801c6d8:	bd80      	pop	{r7, pc}
 801c6da:	bf00      	nop
 801c6dc:	08022618 	.word	0x08022618

0801c6e0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801c6e0:	b580      	push	{r7, lr}
 801c6e2:	b086      	sub	sp, #24
 801c6e4:	af00      	add	r7, sp, #0
 801c6e6:	60f8      	str	r0, [r7, #12]
 801c6e8:	60b9      	str	r1, [r7, #8]
 801c6ea:	607a      	str	r2, [r7, #4]
 801c6ec:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c6ee:	8c3b      	ldrh	r3, [r7, #32]
 801c6f0:	4618      	mov	r0, r3
 801c6f2:	f7f3 ffb3 	bl	801065c <lwip_htons>
 801c6f6:	4603      	mov	r3, r0
 801c6f8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801c6fa:	210e      	movs	r1, #14
 801c6fc:	68b8      	ldr	r0, [r7, #8]
 801c6fe:	f7f5 fbcd 	bl	8011e9c <pbuf_add_header>
 801c702:	4603      	mov	r3, r0
 801c704:	2b00      	cmp	r3, #0
 801c706:	d125      	bne.n	801c754 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801c708:	68bb      	ldr	r3, [r7, #8]
 801c70a:	685b      	ldr	r3, [r3, #4]
 801c70c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801c70e:	693b      	ldr	r3, [r7, #16]
 801c710:	8afa      	ldrh	r2, [r7, #22]
 801c712:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801c714:	693b      	ldr	r3, [r7, #16]
 801c716:	2206      	movs	r2, #6
 801c718:	6839      	ldr	r1, [r7, #0]
 801c71a:	4618      	mov	r0, r3
 801c71c:	f001 f879 	bl	801d812 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801c720:	693b      	ldr	r3, [r7, #16]
 801c722:	3306      	adds	r3, #6
 801c724:	2206      	movs	r2, #6
 801c726:	6879      	ldr	r1, [r7, #4]
 801c728:	4618      	mov	r0, r3
 801c72a:	f001 f872 	bl	801d812 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c734:	2b06      	cmp	r3, #6
 801c736:	d006      	beq.n	801c746 <ethernet_output+0x66>
 801c738:	4b0a      	ldr	r3, [pc, #40]	@ (801c764 <ethernet_output+0x84>)
 801c73a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801c73e:	490a      	ldr	r1, [pc, #40]	@ (801c768 <ethernet_output+0x88>)
 801c740:	480a      	ldr	r0, [pc, #40]	@ (801c76c <ethernet_output+0x8c>)
 801c742:	f000 fe3f 	bl	801d3c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c746:	68fb      	ldr	r3, [r7, #12]
 801c748:	699b      	ldr	r3, [r3, #24]
 801c74a:	68b9      	ldr	r1, [r7, #8]
 801c74c:	68f8      	ldr	r0, [r7, #12]
 801c74e:	4798      	blx	r3
 801c750:	4603      	mov	r3, r0
 801c752:	e002      	b.n	801c75a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801c754:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801c756:	f06f 0301 	mvn.w	r3, #1
}
 801c75a:	4618      	mov	r0, r3
 801c75c:	3718      	adds	r7, #24
 801c75e:	46bd      	mov	sp, r7
 801c760:	bd80      	pop	{r7, pc}
 801c762:	bf00      	nop
 801c764:	0802238c 	.word	0x0802238c
 801c768:	080223c4 	.word	0x080223c4
 801c76c:	080223f8 	.word	0x080223f8

0801c770 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c770:	b580      	push	{r7, lr}
 801c772:	b082      	sub	sp, #8
 801c774:	af00      	add	r7, sp, #0
 801c776:	6078      	str	r0, [r7, #4]
 801c778:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801c77a:	683b      	ldr	r3, [r7, #0]
 801c77c:	2200      	movs	r2, #0
 801c77e:	2104      	movs	r1, #4
 801c780:	4618      	mov	r0, r3
 801c782:	f7f0 fa11 	bl	800cba8 <osMessageQueueNew>
 801c786:	4602      	mov	r2, r0
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801c78c:	687b      	ldr	r3, [r7, #4]
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	2b00      	cmp	r3, #0
 801c792:	d102      	bne.n	801c79a <sys_mbox_new+0x2a>
    return ERR_MEM;
 801c794:	f04f 33ff 	mov.w	r3, #4294967295
 801c798:	e000      	b.n	801c79c <sys_mbox_new+0x2c>

  return ERR_OK;
 801c79a:	2300      	movs	r3, #0
}
 801c79c:	4618      	mov	r0, r3
 801c79e:	3708      	adds	r7, #8
 801c7a0:	46bd      	mov	sp, r7
 801c7a2:	bd80      	pop	{r7, pc}

0801c7a4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c7a4:	b580      	push	{r7, lr}
 801c7a6:	b084      	sub	sp, #16
 801c7a8:	af00      	add	r7, sp, #0
 801c7aa:	6078      	str	r0, [r7, #4]
 801c7ac:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801c7ae:	687b      	ldr	r3, [r7, #4]
 801c7b0:	6818      	ldr	r0, [r3, #0]
 801c7b2:	4639      	mov	r1, r7
 801c7b4:	2300      	movs	r3, #0
 801c7b6:	2200      	movs	r2, #0
 801c7b8:	f7f0 fa6a 	bl	800cc90 <osMessageQueuePut>
 801c7bc:	4603      	mov	r3, r0
 801c7be:	2b00      	cmp	r3, #0
 801c7c0:	d102      	bne.n	801c7c8 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801c7c2:	2300      	movs	r3, #0
 801c7c4:	73fb      	strb	r3, [r7, #15]
 801c7c6:	e001      	b.n	801c7cc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801c7c8:	23ff      	movs	r3, #255	@ 0xff
 801c7ca:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801c7cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c7d0:	4618      	mov	r0, r3
 801c7d2:	3710      	adds	r7, #16
 801c7d4:	46bd      	mov	sp, r7
 801c7d6:	bd80      	pop	{r7, pc}

0801c7d8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c7d8:	b580      	push	{r7, lr}
 801c7da:	b086      	sub	sp, #24
 801c7dc:	af00      	add	r7, sp, #0
 801c7de:	60f8      	str	r0, [r7, #12]
 801c7e0:	60b9      	str	r1, [r7, #8]
 801c7e2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801c7e4:	f7ef fe5e 	bl	800c4a4 <osKernelGetTickCount>
 801c7e8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801c7ea:	687b      	ldr	r3, [r7, #4]
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d013      	beq.n	801c818 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801c7f0:	68fb      	ldr	r3, [r7, #12]
 801c7f2:	6818      	ldr	r0, [r3, #0]
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	2200      	movs	r2, #0
 801c7f8:	68b9      	ldr	r1, [r7, #8]
 801c7fa:	f7f0 faa9 	bl	800cd50 <osMessageQueueGet>
 801c7fe:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801c800:	693b      	ldr	r3, [r7, #16]
 801c802:	2b00      	cmp	r3, #0
 801c804:	d105      	bne.n	801c812 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801c806:	f7ef fe4d 	bl	800c4a4 <osKernelGetTickCount>
 801c80a:	4602      	mov	r2, r0
 801c80c:	697b      	ldr	r3, [r7, #20]
 801c80e:	1ad3      	subs	r3, r2, r3
 801c810:	e00f      	b.n	801c832 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c812:	f04f 33ff 	mov.w	r3, #4294967295
 801c816:	e00c      	b.n	801c832 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801c818:	68fb      	ldr	r3, [r7, #12]
 801c81a:	6818      	ldr	r0, [r3, #0]
 801c81c:	f04f 33ff 	mov.w	r3, #4294967295
 801c820:	2200      	movs	r2, #0
 801c822:	68b9      	ldr	r1, [r7, #8]
 801c824:	f7f0 fa94 	bl	800cd50 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801c828:	f7ef fe3c 	bl	800c4a4 <osKernelGetTickCount>
 801c82c:	4602      	mov	r2, r0
 801c82e:	697b      	ldr	r3, [r7, #20]
 801c830:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801c832:	4618      	mov	r0, r3
 801c834:	3718      	adds	r7, #24
 801c836:	46bd      	mov	sp, r7
 801c838:	bd80      	pop	{r7, pc}

0801c83a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801c83a:	b480      	push	{r7}
 801c83c:	b083      	sub	sp, #12
 801c83e:	af00      	add	r7, sp, #0
 801c840:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801c842:	687b      	ldr	r3, [r7, #4]
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	2b00      	cmp	r3, #0
 801c848:	d101      	bne.n	801c84e <sys_mbox_valid+0x14>
    return 0;
 801c84a:	2300      	movs	r3, #0
 801c84c:	e000      	b.n	801c850 <sys_mbox_valid+0x16>
  else
    return 1;
 801c84e:	2301      	movs	r3, #1
}
 801c850:	4618      	mov	r0, r3
 801c852:	370c      	adds	r7, #12
 801c854:	46bd      	mov	sp, r7
 801c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c85a:	4770      	bx	lr

0801c85c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801c85c:	b580      	push	{r7, lr}
 801c85e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801c860:	2000      	movs	r0, #0
 801c862:	f7ef ff73 	bl	800c74c <osMutexNew>
 801c866:	4603      	mov	r3, r0
 801c868:	4a01      	ldr	r2, [pc, #4]	@ (801c870 <sys_init+0x14>)
 801c86a:	6013      	str	r3, [r2, #0]
#endif
}
 801c86c:	bf00      	nop
 801c86e:	bd80      	pop	{r7, pc}
 801c870:	2400cdc4 	.word	0x2400cdc4

0801c874 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c874:	b580      	push	{r7, lr}
 801c876:	b082      	sub	sp, #8
 801c878:	af00      	add	r7, sp, #0
 801c87a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801c87c:	2000      	movs	r0, #0
 801c87e:	f7ef ff65 	bl	800c74c <osMutexNew>
 801c882:	4602      	mov	r2, r0
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801c888:	687b      	ldr	r3, [r7, #4]
 801c88a:	681b      	ldr	r3, [r3, #0]
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	d102      	bne.n	801c896 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c890:	f04f 33ff 	mov.w	r3, #4294967295
 801c894:	e000      	b.n	801c898 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c896:	2300      	movs	r3, #0
}
 801c898:	4618      	mov	r0, r3
 801c89a:	3708      	adds	r7, #8
 801c89c:	46bd      	mov	sp, r7
 801c89e:	bd80      	pop	{r7, pc}

0801c8a0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c8a0:	b580      	push	{r7, lr}
 801c8a2:	b082      	sub	sp, #8
 801c8a4:	af00      	add	r7, sp, #0
 801c8a6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	681b      	ldr	r3, [r3, #0]
 801c8ac:	f04f 31ff 	mov.w	r1, #4294967295
 801c8b0:	4618      	mov	r0, r3
 801c8b2:	f7ef ffd1 	bl	800c858 <osMutexAcquire>
#endif
}
 801c8b6:	bf00      	nop
 801c8b8:	3708      	adds	r7, #8
 801c8ba:	46bd      	mov	sp, r7
 801c8bc:	bd80      	pop	{r7, pc}

0801c8be <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c8be:	b580      	push	{r7, lr}
 801c8c0:	b082      	sub	sp, #8
 801c8c2:	af00      	add	r7, sp, #0
 801c8c4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801c8c6:	687b      	ldr	r3, [r7, #4]
 801c8c8:	681b      	ldr	r3, [r3, #0]
 801c8ca:	4618      	mov	r0, r3
 801c8cc:	f7f0 f80f 	bl	800c8ee <osMutexRelease>
}
 801c8d0:	bf00      	nop
 801c8d2:	3708      	adds	r7, #8
 801c8d4:	46bd      	mov	sp, r7
 801c8d6:	bd80      	pop	{r7, pc}

0801c8d8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c8d8:	b580      	push	{r7, lr}
 801c8da:	b08e      	sub	sp, #56	@ 0x38
 801c8dc:	af00      	add	r7, sp, #0
 801c8de:	60f8      	str	r0, [r7, #12]
 801c8e0:	60b9      	str	r1, [r7, #8]
 801c8e2:	607a      	str	r2, [r7, #4]
 801c8e4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801c8e6:	f107 0314 	add.w	r3, r7, #20
 801c8ea:	2224      	movs	r2, #36	@ 0x24
 801c8ec:	2100      	movs	r1, #0
 801c8ee:	4618      	mov	r0, r3
 801c8f0:	f000 fec0 	bl	801d674 <memset>
 801c8f4:	68fb      	ldr	r3, [r7, #12]
 801c8f6:	617b      	str	r3, [r7, #20]
 801c8f8:	683b      	ldr	r3, [r7, #0]
 801c8fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c8fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c8fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801c900:	f107 0314 	add.w	r3, r7, #20
 801c904:	461a      	mov	r2, r3
 801c906:	6879      	ldr	r1, [r7, #4]
 801c908:	68b8      	ldr	r0, [r7, #8]
 801c90a:	f7ef fde0 	bl	800c4ce <osThreadNew>
 801c90e:	4603      	mov	r3, r0
#endif
}
 801c910:	4618      	mov	r0, r3
 801c912:	3738      	adds	r7, #56	@ 0x38
 801c914:	46bd      	mov	sp, r7
 801c916:	bd80      	pop	{r7, pc}

0801c918 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c918:	b580      	push	{r7, lr}
 801c91a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801c91c:	4b04      	ldr	r3, [pc, #16]	@ (801c930 <sys_arch_protect+0x18>)
 801c91e:	681b      	ldr	r3, [r3, #0]
 801c920:	f04f 31ff 	mov.w	r1, #4294967295
 801c924:	4618      	mov	r0, r3
 801c926:	f7ef ff97 	bl	800c858 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801c92a:	2301      	movs	r3, #1
}
 801c92c:	4618      	mov	r0, r3
 801c92e:	bd80      	pop	{r7, pc}
 801c930:	2400cdc4 	.word	0x2400cdc4

0801c934 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801c934:	b580      	push	{r7, lr}
 801c936:	b082      	sub	sp, #8
 801c938:	af00      	add	r7, sp, #0
 801c93a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801c93c:	4b04      	ldr	r3, [pc, #16]	@ (801c950 <sys_arch_unprotect+0x1c>)
 801c93e:	681b      	ldr	r3, [r3, #0]
 801c940:	4618      	mov	r0, r3
 801c942:	f7ef ffd4 	bl	800c8ee <osMutexRelease>
}
 801c946:	bf00      	nop
 801c948:	3708      	adds	r7, #8
 801c94a:	46bd      	mov	sp, r7
 801c94c:	bd80      	pop	{r7, pc}
 801c94e:	bf00      	nop
 801c950:	2400cdc4 	.word	0x2400cdc4

0801c954 <rand>:
 801c954:	4b16      	ldr	r3, [pc, #88]	@ (801c9b0 <rand+0x5c>)
 801c956:	b510      	push	{r4, lr}
 801c958:	681c      	ldr	r4, [r3, #0]
 801c95a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c95c:	b9b3      	cbnz	r3, 801c98c <rand+0x38>
 801c95e:	2018      	movs	r0, #24
 801c960:	f001 fdae 	bl	801e4c0 <malloc>
 801c964:	4602      	mov	r2, r0
 801c966:	6320      	str	r0, [r4, #48]	@ 0x30
 801c968:	b920      	cbnz	r0, 801c974 <rand+0x20>
 801c96a:	4b12      	ldr	r3, [pc, #72]	@ (801c9b4 <rand+0x60>)
 801c96c:	4812      	ldr	r0, [pc, #72]	@ (801c9b8 <rand+0x64>)
 801c96e:	2152      	movs	r1, #82	@ 0x52
 801c970:	f000 ff5e 	bl	801d830 <__assert_func>
 801c974:	4911      	ldr	r1, [pc, #68]	@ (801c9bc <rand+0x68>)
 801c976:	4b12      	ldr	r3, [pc, #72]	@ (801c9c0 <rand+0x6c>)
 801c978:	e9c0 1300 	strd	r1, r3, [r0]
 801c97c:	4b11      	ldr	r3, [pc, #68]	@ (801c9c4 <rand+0x70>)
 801c97e:	6083      	str	r3, [r0, #8]
 801c980:	230b      	movs	r3, #11
 801c982:	8183      	strh	r3, [r0, #12]
 801c984:	2100      	movs	r1, #0
 801c986:	2001      	movs	r0, #1
 801c988:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c98c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c98e:	480e      	ldr	r0, [pc, #56]	@ (801c9c8 <rand+0x74>)
 801c990:	690b      	ldr	r3, [r1, #16]
 801c992:	694c      	ldr	r4, [r1, #20]
 801c994:	4a0d      	ldr	r2, [pc, #52]	@ (801c9cc <rand+0x78>)
 801c996:	4358      	muls	r0, r3
 801c998:	fb02 0004 	mla	r0, r2, r4, r0
 801c99c:	fba3 3202 	umull	r3, r2, r3, r2
 801c9a0:	3301      	adds	r3, #1
 801c9a2:	eb40 0002 	adc.w	r0, r0, r2
 801c9a6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801c9aa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801c9ae:	bd10      	pop	{r4, pc}
 801c9b0:	24000044 	.word	0x24000044
 801c9b4:	08022626 	.word	0x08022626
 801c9b8:	0802263d 	.word	0x0802263d
 801c9bc:	abcd330e 	.word	0xabcd330e
 801c9c0:	e66d1234 	.word	0xe66d1234
 801c9c4:	0005deec 	.word	0x0005deec
 801c9c8:	5851f42d 	.word	0x5851f42d
 801c9cc:	4c957f2d 	.word	0x4c957f2d

0801c9d0 <__cvt>:
 801c9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c9d2:	ed2d 8b02 	vpush	{d8}
 801c9d6:	eeb0 8b40 	vmov.f64	d8, d0
 801c9da:	b085      	sub	sp, #20
 801c9dc:	4617      	mov	r7, r2
 801c9de:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801c9e0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c9e2:	ee18 2a90 	vmov	r2, s17
 801c9e6:	f025 0520 	bic.w	r5, r5, #32
 801c9ea:	2a00      	cmp	r2, #0
 801c9ec:	bfb6      	itet	lt
 801c9ee:	222d      	movlt	r2, #45	@ 0x2d
 801c9f0:	2200      	movge	r2, #0
 801c9f2:	eeb1 8b40 	vneglt.f64	d8, d0
 801c9f6:	2d46      	cmp	r5, #70	@ 0x46
 801c9f8:	460c      	mov	r4, r1
 801c9fa:	701a      	strb	r2, [r3, #0]
 801c9fc:	d004      	beq.n	801ca08 <__cvt+0x38>
 801c9fe:	2d45      	cmp	r5, #69	@ 0x45
 801ca00:	d100      	bne.n	801ca04 <__cvt+0x34>
 801ca02:	3401      	adds	r4, #1
 801ca04:	2102      	movs	r1, #2
 801ca06:	e000      	b.n	801ca0a <__cvt+0x3a>
 801ca08:	2103      	movs	r1, #3
 801ca0a:	ab03      	add	r3, sp, #12
 801ca0c:	9301      	str	r3, [sp, #4]
 801ca0e:	ab02      	add	r3, sp, #8
 801ca10:	9300      	str	r3, [sp, #0]
 801ca12:	4622      	mov	r2, r4
 801ca14:	4633      	mov	r3, r6
 801ca16:	eeb0 0b48 	vmov.f64	d0, d8
 801ca1a:	f000 ffb1 	bl	801d980 <_dtoa_r>
 801ca1e:	2d47      	cmp	r5, #71	@ 0x47
 801ca20:	d114      	bne.n	801ca4c <__cvt+0x7c>
 801ca22:	07fb      	lsls	r3, r7, #31
 801ca24:	d50a      	bpl.n	801ca3c <__cvt+0x6c>
 801ca26:	1902      	adds	r2, r0, r4
 801ca28:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ca2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca30:	bf08      	it	eq
 801ca32:	9203      	streq	r2, [sp, #12]
 801ca34:	2130      	movs	r1, #48	@ 0x30
 801ca36:	9b03      	ldr	r3, [sp, #12]
 801ca38:	4293      	cmp	r3, r2
 801ca3a:	d319      	bcc.n	801ca70 <__cvt+0xa0>
 801ca3c:	9b03      	ldr	r3, [sp, #12]
 801ca3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ca40:	1a1b      	subs	r3, r3, r0
 801ca42:	6013      	str	r3, [r2, #0]
 801ca44:	b005      	add	sp, #20
 801ca46:	ecbd 8b02 	vpop	{d8}
 801ca4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca4c:	2d46      	cmp	r5, #70	@ 0x46
 801ca4e:	eb00 0204 	add.w	r2, r0, r4
 801ca52:	d1e9      	bne.n	801ca28 <__cvt+0x58>
 801ca54:	7803      	ldrb	r3, [r0, #0]
 801ca56:	2b30      	cmp	r3, #48	@ 0x30
 801ca58:	d107      	bne.n	801ca6a <__cvt+0x9a>
 801ca5a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ca5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca62:	bf1c      	itt	ne
 801ca64:	f1c4 0401 	rsbne	r4, r4, #1
 801ca68:	6034      	strne	r4, [r6, #0]
 801ca6a:	6833      	ldr	r3, [r6, #0]
 801ca6c:	441a      	add	r2, r3
 801ca6e:	e7db      	b.n	801ca28 <__cvt+0x58>
 801ca70:	1c5c      	adds	r4, r3, #1
 801ca72:	9403      	str	r4, [sp, #12]
 801ca74:	7019      	strb	r1, [r3, #0]
 801ca76:	e7de      	b.n	801ca36 <__cvt+0x66>

0801ca78 <__exponent>:
 801ca78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ca7a:	2900      	cmp	r1, #0
 801ca7c:	bfba      	itte	lt
 801ca7e:	4249      	neglt	r1, r1
 801ca80:	232d      	movlt	r3, #45	@ 0x2d
 801ca82:	232b      	movge	r3, #43	@ 0x2b
 801ca84:	2909      	cmp	r1, #9
 801ca86:	7002      	strb	r2, [r0, #0]
 801ca88:	7043      	strb	r3, [r0, #1]
 801ca8a:	dd29      	ble.n	801cae0 <__exponent+0x68>
 801ca8c:	f10d 0307 	add.w	r3, sp, #7
 801ca90:	461d      	mov	r5, r3
 801ca92:	270a      	movs	r7, #10
 801ca94:	461a      	mov	r2, r3
 801ca96:	fbb1 f6f7 	udiv	r6, r1, r7
 801ca9a:	fb07 1416 	mls	r4, r7, r6, r1
 801ca9e:	3430      	adds	r4, #48	@ 0x30
 801caa0:	f802 4c01 	strb.w	r4, [r2, #-1]
 801caa4:	460c      	mov	r4, r1
 801caa6:	2c63      	cmp	r4, #99	@ 0x63
 801caa8:	f103 33ff 	add.w	r3, r3, #4294967295
 801caac:	4631      	mov	r1, r6
 801caae:	dcf1      	bgt.n	801ca94 <__exponent+0x1c>
 801cab0:	3130      	adds	r1, #48	@ 0x30
 801cab2:	1e94      	subs	r4, r2, #2
 801cab4:	f803 1c01 	strb.w	r1, [r3, #-1]
 801cab8:	1c41      	adds	r1, r0, #1
 801caba:	4623      	mov	r3, r4
 801cabc:	42ab      	cmp	r3, r5
 801cabe:	d30a      	bcc.n	801cad6 <__exponent+0x5e>
 801cac0:	f10d 0309 	add.w	r3, sp, #9
 801cac4:	1a9b      	subs	r3, r3, r2
 801cac6:	42ac      	cmp	r4, r5
 801cac8:	bf88      	it	hi
 801caca:	2300      	movhi	r3, #0
 801cacc:	3302      	adds	r3, #2
 801cace:	4403      	add	r3, r0
 801cad0:	1a18      	subs	r0, r3, r0
 801cad2:	b003      	add	sp, #12
 801cad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cad6:	f813 6b01 	ldrb.w	r6, [r3], #1
 801cada:	f801 6f01 	strb.w	r6, [r1, #1]!
 801cade:	e7ed      	b.n	801cabc <__exponent+0x44>
 801cae0:	2330      	movs	r3, #48	@ 0x30
 801cae2:	3130      	adds	r1, #48	@ 0x30
 801cae4:	7083      	strb	r3, [r0, #2]
 801cae6:	70c1      	strb	r1, [r0, #3]
 801cae8:	1d03      	adds	r3, r0, #4
 801caea:	e7f1      	b.n	801cad0 <__exponent+0x58>
 801caec:	0000      	movs	r0, r0
	...

0801caf0 <_printf_float>:
 801caf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801caf4:	b08d      	sub	sp, #52	@ 0x34
 801caf6:	460c      	mov	r4, r1
 801caf8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801cafc:	4616      	mov	r6, r2
 801cafe:	461f      	mov	r7, r3
 801cb00:	4605      	mov	r5, r0
 801cb02:	f000 fdbf 	bl	801d684 <_localeconv_r>
 801cb06:	f8d0 b000 	ldr.w	fp, [r0]
 801cb0a:	4658      	mov	r0, fp
 801cb0c:	f7e3 fc50 	bl	80003b0 <strlen>
 801cb10:	2300      	movs	r3, #0
 801cb12:	930a      	str	r3, [sp, #40]	@ 0x28
 801cb14:	f8d8 3000 	ldr.w	r3, [r8]
 801cb18:	f894 9018 	ldrb.w	r9, [r4, #24]
 801cb1c:	6822      	ldr	r2, [r4, #0]
 801cb1e:	9005      	str	r0, [sp, #20]
 801cb20:	3307      	adds	r3, #7
 801cb22:	f023 0307 	bic.w	r3, r3, #7
 801cb26:	f103 0108 	add.w	r1, r3, #8
 801cb2a:	f8c8 1000 	str.w	r1, [r8]
 801cb2e:	ed93 0b00 	vldr	d0, [r3]
 801cb32:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 801cd90 <_printf_float+0x2a0>
 801cb36:	eeb0 7bc0 	vabs.f64	d7, d0
 801cb3a:	eeb4 7b46 	vcmp.f64	d7, d6
 801cb3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb42:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801cb46:	dd24      	ble.n	801cb92 <_printf_float+0xa2>
 801cb48:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801cb4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb50:	d502      	bpl.n	801cb58 <_printf_float+0x68>
 801cb52:	232d      	movs	r3, #45	@ 0x2d
 801cb54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cb58:	498f      	ldr	r1, [pc, #572]	@ (801cd98 <_printf_float+0x2a8>)
 801cb5a:	4b90      	ldr	r3, [pc, #576]	@ (801cd9c <_printf_float+0x2ac>)
 801cb5c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 801cb60:	bf94      	ite	ls
 801cb62:	4688      	movls	r8, r1
 801cb64:	4698      	movhi	r8, r3
 801cb66:	f022 0204 	bic.w	r2, r2, #4
 801cb6a:	2303      	movs	r3, #3
 801cb6c:	6123      	str	r3, [r4, #16]
 801cb6e:	6022      	str	r2, [r4, #0]
 801cb70:	f04f 0a00 	mov.w	sl, #0
 801cb74:	9700      	str	r7, [sp, #0]
 801cb76:	4633      	mov	r3, r6
 801cb78:	aa0b      	add	r2, sp, #44	@ 0x2c
 801cb7a:	4621      	mov	r1, r4
 801cb7c:	4628      	mov	r0, r5
 801cb7e:	f000 f9d1 	bl	801cf24 <_printf_common>
 801cb82:	3001      	adds	r0, #1
 801cb84:	f040 8089 	bne.w	801cc9a <_printf_float+0x1aa>
 801cb88:	f04f 30ff 	mov.w	r0, #4294967295
 801cb8c:	b00d      	add	sp, #52	@ 0x34
 801cb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb92:	eeb4 0b40 	vcmp.f64	d0, d0
 801cb96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb9a:	d709      	bvc.n	801cbb0 <_printf_float+0xc0>
 801cb9c:	ee10 3a90 	vmov	r3, s1
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	bfbc      	itt	lt
 801cba4:	232d      	movlt	r3, #45	@ 0x2d
 801cba6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801cbaa:	497d      	ldr	r1, [pc, #500]	@ (801cda0 <_printf_float+0x2b0>)
 801cbac:	4b7d      	ldr	r3, [pc, #500]	@ (801cda4 <_printf_float+0x2b4>)
 801cbae:	e7d5      	b.n	801cb5c <_printf_float+0x6c>
 801cbb0:	6863      	ldr	r3, [r4, #4]
 801cbb2:	1c59      	adds	r1, r3, #1
 801cbb4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 801cbb8:	d139      	bne.n	801cc2e <_printf_float+0x13e>
 801cbba:	2306      	movs	r3, #6
 801cbbc:	6063      	str	r3, [r4, #4]
 801cbbe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801cbc2:	2300      	movs	r3, #0
 801cbc4:	6022      	str	r2, [r4, #0]
 801cbc6:	9303      	str	r3, [sp, #12]
 801cbc8:	ab0a      	add	r3, sp, #40	@ 0x28
 801cbca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801cbce:	ab09      	add	r3, sp, #36	@ 0x24
 801cbd0:	9300      	str	r3, [sp, #0]
 801cbd2:	6861      	ldr	r1, [r4, #4]
 801cbd4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801cbd8:	4628      	mov	r0, r5
 801cbda:	f7ff fef9 	bl	801c9d0 <__cvt>
 801cbde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801cbe2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801cbe4:	4680      	mov	r8, r0
 801cbe6:	d129      	bne.n	801cc3c <_printf_float+0x14c>
 801cbe8:	1cc8      	adds	r0, r1, #3
 801cbea:	db02      	blt.n	801cbf2 <_printf_float+0x102>
 801cbec:	6863      	ldr	r3, [r4, #4]
 801cbee:	4299      	cmp	r1, r3
 801cbf0:	dd41      	ble.n	801cc76 <_printf_float+0x186>
 801cbf2:	f1a9 0902 	sub.w	r9, r9, #2
 801cbf6:	fa5f f989 	uxtb.w	r9, r9
 801cbfa:	3901      	subs	r1, #1
 801cbfc:	464a      	mov	r2, r9
 801cbfe:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801cc02:	9109      	str	r1, [sp, #36]	@ 0x24
 801cc04:	f7ff ff38 	bl	801ca78 <__exponent>
 801cc08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cc0a:	1813      	adds	r3, r2, r0
 801cc0c:	2a01      	cmp	r2, #1
 801cc0e:	4682      	mov	sl, r0
 801cc10:	6123      	str	r3, [r4, #16]
 801cc12:	dc02      	bgt.n	801cc1a <_printf_float+0x12a>
 801cc14:	6822      	ldr	r2, [r4, #0]
 801cc16:	07d2      	lsls	r2, r2, #31
 801cc18:	d501      	bpl.n	801cc1e <_printf_float+0x12e>
 801cc1a:	3301      	adds	r3, #1
 801cc1c:	6123      	str	r3, [r4, #16]
 801cc1e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	d0a6      	beq.n	801cb74 <_printf_float+0x84>
 801cc26:	232d      	movs	r3, #45	@ 0x2d
 801cc28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cc2c:	e7a2      	b.n	801cb74 <_printf_float+0x84>
 801cc2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801cc32:	d1c4      	bne.n	801cbbe <_printf_float+0xce>
 801cc34:	2b00      	cmp	r3, #0
 801cc36:	d1c2      	bne.n	801cbbe <_printf_float+0xce>
 801cc38:	2301      	movs	r3, #1
 801cc3a:	e7bf      	b.n	801cbbc <_printf_float+0xcc>
 801cc3c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801cc40:	d9db      	bls.n	801cbfa <_printf_float+0x10a>
 801cc42:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801cc46:	d118      	bne.n	801cc7a <_printf_float+0x18a>
 801cc48:	2900      	cmp	r1, #0
 801cc4a:	6863      	ldr	r3, [r4, #4]
 801cc4c:	dd0b      	ble.n	801cc66 <_printf_float+0x176>
 801cc4e:	6121      	str	r1, [r4, #16]
 801cc50:	b913      	cbnz	r3, 801cc58 <_printf_float+0x168>
 801cc52:	6822      	ldr	r2, [r4, #0]
 801cc54:	07d0      	lsls	r0, r2, #31
 801cc56:	d502      	bpl.n	801cc5e <_printf_float+0x16e>
 801cc58:	3301      	adds	r3, #1
 801cc5a:	440b      	add	r3, r1
 801cc5c:	6123      	str	r3, [r4, #16]
 801cc5e:	65a1      	str	r1, [r4, #88]	@ 0x58
 801cc60:	f04f 0a00 	mov.w	sl, #0
 801cc64:	e7db      	b.n	801cc1e <_printf_float+0x12e>
 801cc66:	b913      	cbnz	r3, 801cc6e <_printf_float+0x17e>
 801cc68:	6822      	ldr	r2, [r4, #0]
 801cc6a:	07d2      	lsls	r2, r2, #31
 801cc6c:	d501      	bpl.n	801cc72 <_printf_float+0x182>
 801cc6e:	3302      	adds	r3, #2
 801cc70:	e7f4      	b.n	801cc5c <_printf_float+0x16c>
 801cc72:	2301      	movs	r3, #1
 801cc74:	e7f2      	b.n	801cc5c <_printf_float+0x16c>
 801cc76:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801cc7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cc7c:	4299      	cmp	r1, r3
 801cc7e:	db05      	blt.n	801cc8c <_printf_float+0x19c>
 801cc80:	6823      	ldr	r3, [r4, #0]
 801cc82:	6121      	str	r1, [r4, #16]
 801cc84:	07d8      	lsls	r0, r3, #31
 801cc86:	d5ea      	bpl.n	801cc5e <_printf_float+0x16e>
 801cc88:	1c4b      	adds	r3, r1, #1
 801cc8a:	e7e7      	b.n	801cc5c <_printf_float+0x16c>
 801cc8c:	2900      	cmp	r1, #0
 801cc8e:	bfd4      	ite	le
 801cc90:	f1c1 0202 	rsble	r2, r1, #2
 801cc94:	2201      	movgt	r2, #1
 801cc96:	4413      	add	r3, r2
 801cc98:	e7e0      	b.n	801cc5c <_printf_float+0x16c>
 801cc9a:	6823      	ldr	r3, [r4, #0]
 801cc9c:	055a      	lsls	r2, r3, #21
 801cc9e:	d407      	bmi.n	801ccb0 <_printf_float+0x1c0>
 801cca0:	6923      	ldr	r3, [r4, #16]
 801cca2:	4642      	mov	r2, r8
 801cca4:	4631      	mov	r1, r6
 801cca6:	4628      	mov	r0, r5
 801cca8:	47b8      	blx	r7
 801ccaa:	3001      	adds	r0, #1
 801ccac:	d12a      	bne.n	801cd04 <_printf_float+0x214>
 801ccae:	e76b      	b.n	801cb88 <_printf_float+0x98>
 801ccb0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801ccb4:	f240 80e0 	bls.w	801ce78 <_printf_float+0x388>
 801ccb8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801ccbc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ccc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccc4:	d133      	bne.n	801cd2e <_printf_float+0x23e>
 801ccc6:	4a38      	ldr	r2, [pc, #224]	@ (801cda8 <_printf_float+0x2b8>)
 801ccc8:	2301      	movs	r3, #1
 801ccca:	4631      	mov	r1, r6
 801cccc:	4628      	mov	r0, r5
 801ccce:	47b8      	blx	r7
 801ccd0:	3001      	adds	r0, #1
 801ccd2:	f43f af59 	beq.w	801cb88 <_printf_float+0x98>
 801ccd6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801ccda:	4543      	cmp	r3, r8
 801ccdc:	db02      	blt.n	801cce4 <_printf_float+0x1f4>
 801ccde:	6823      	ldr	r3, [r4, #0]
 801cce0:	07d8      	lsls	r0, r3, #31
 801cce2:	d50f      	bpl.n	801cd04 <_printf_float+0x214>
 801cce4:	9b05      	ldr	r3, [sp, #20]
 801cce6:	465a      	mov	r2, fp
 801cce8:	4631      	mov	r1, r6
 801ccea:	4628      	mov	r0, r5
 801ccec:	47b8      	blx	r7
 801ccee:	3001      	adds	r0, #1
 801ccf0:	f43f af4a 	beq.w	801cb88 <_printf_float+0x98>
 801ccf4:	f04f 0900 	mov.w	r9, #0
 801ccf8:	f108 38ff 	add.w	r8, r8, #4294967295
 801ccfc:	f104 0a1a 	add.w	sl, r4, #26
 801cd00:	45c8      	cmp	r8, r9
 801cd02:	dc09      	bgt.n	801cd18 <_printf_float+0x228>
 801cd04:	6823      	ldr	r3, [r4, #0]
 801cd06:	079b      	lsls	r3, r3, #30
 801cd08:	f100 8107 	bmi.w	801cf1a <_printf_float+0x42a>
 801cd0c:	68e0      	ldr	r0, [r4, #12]
 801cd0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cd10:	4298      	cmp	r0, r3
 801cd12:	bfb8      	it	lt
 801cd14:	4618      	movlt	r0, r3
 801cd16:	e739      	b.n	801cb8c <_printf_float+0x9c>
 801cd18:	2301      	movs	r3, #1
 801cd1a:	4652      	mov	r2, sl
 801cd1c:	4631      	mov	r1, r6
 801cd1e:	4628      	mov	r0, r5
 801cd20:	47b8      	blx	r7
 801cd22:	3001      	adds	r0, #1
 801cd24:	f43f af30 	beq.w	801cb88 <_printf_float+0x98>
 801cd28:	f109 0901 	add.w	r9, r9, #1
 801cd2c:	e7e8      	b.n	801cd00 <_printf_float+0x210>
 801cd2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cd30:	2b00      	cmp	r3, #0
 801cd32:	dc3b      	bgt.n	801cdac <_printf_float+0x2bc>
 801cd34:	4a1c      	ldr	r2, [pc, #112]	@ (801cda8 <_printf_float+0x2b8>)
 801cd36:	2301      	movs	r3, #1
 801cd38:	4631      	mov	r1, r6
 801cd3a:	4628      	mov	r0, r5
 801cd3c:	47b8      	blx	r7
 801cd3e:	3001      	adds	r0, #1
 801cd40:	f43f af22 	beq.w	801cb88 <_printf_float+0x98>
 801cd44:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801cd48:	ea59 0303 	orrs.w	r3, r9, r3
 801cd4c:	d102      	bne.n	801cd54 <_printf_float+0x264>
 801cd4e:	6823      	ldr	r3, [r4, #0]
 801cd50:	07d9      	lsls	r1, r3, #31
 801cd52:	d5d7      	bpl.n	801cd04 <_printf_float+0x214>
 801cd54:	9b05      	ldr	r3, [sp, #20]
 801cd56:	465a      	mov	r2, fp
 801cd58:	4631      	mov	r1, r6
 801cd5a:	4628      	mov	r0, r5
 801cd5c:	47b8      	blx	r7
 801cd5e:	3001      	adds	r0, #1
 801cd60:	f43f af12 	beq.w	801cb88 <_printf_float+0x98>
 801cd64:	f04f 0a00 	mov.w	sl, #0
 801cd68:	f104 0b1a 	add.w	fp, r4, #26
 801cd6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cd6e:	425b      	negs	r3, r3
 801cd70:	4553      	cmp	r3, sl
 801cd72:	dc01      	bgt.n	801cd78 <_printf_float+0x288>
 801cd74:	464b      	mov	r3, r9
 801cd76:	e794      	b.n	801cca2 <_printf_float+0x1b2>
 801cd78:	2301      	movs	r3, #1
 801cd7a:	465a      	mov	r2, fp
 801cd7c:	4631      	mov	r1, r6
 801cd7e:	4628      	mov	r0, r5
 801cd80:	47b8      	blx	r7
 801cd82:	3001      	adds	r0, #1
 801cd84:	f43f af00 	beq.w	801cb88 <_printf_float+0x98>
 801cd88:	f10a 0a01 	add.w	sl, sl, #1
 801cd8c:	e7ee      	b.n	801cd6c <_printf_float+0x27c>
 801cd8e:	bf00      	nop
 801cd90:	ffffffff 	.word	0xffffffff
 801cd94:	7fefffff 	.word	0x7fefffff
 801cd98:	08022796 	.word	0x08022796
 801cd9c:	0802279a 	.word	0x0802279a
 801cda0:	0802279e 	.word	0x0802279e
 801cda4:	080227a2 	.word	0x080227a2
 801cda8:	080227a6 	.word	0x080227a6
 801cdac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801cdae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801cdb2:	4553      	cmp	r3, sl
 801cdb4:	bfa8      	it	ge
 801cdb6:	4653      	movge	r3, sl
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	4699      	mov	r9, r3
 801cdbc:	dc37      	bgt.n	801ce2e <_printf_float+0x33e>
 801cdbe:	2300      	movs	r3, #0
 801cdc0:	9307      	str	r3, [sp, #28]
 801cdc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801cdc6:	f104 021a 	add.w	r2, r4, #26
 801cdca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801cdcc:	9907      	ldr	r1, [sp, #28]
 801cdce:	9306      	str	r3, [sp, #24]
 801cdd0:	eba3 0309 	sub.w	r3, r3, r9
 801cdd4:	428b      	cmp	r3, r1
 801cdd6:	dc31      	bgt.n	801ce3c <_printf_float+0x34c>
 801cdd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cdda:	459a      	cmp	sl, r3
 801cddc:	dc3b      	bgt.n	801ce56 <_printf_float+0x366>
 801cdde:	6823      	ldr	r3, [r4, #0]
 801cde0:	07da      	lsls	r2, r3, #31
 801cde2:	d438      	bmi.n	801ce56 <_printf_float+0x366>
 801cde4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cde6:	ebaa 0903 	sub.w	r9, sl, r3
 801cdea:	9b06      	ldr	r3, [sp, #24]
 801cdec:	ebaa 0303 	sub.w	r3, sl, r3
 801cdf0:	4599      	cmp	r9, r3
 801cdf2:	bfa8      	it	ge
 801cdf4:	4699      	movge	r9, r3
 801cdf6:	f1b9 0f00 	cmp.w	r9, #0
 801cdfa:	dc34      	bgt.n	801ce66 <_printf_float+0x376>
 801cdfc:	f04f 0800 	mov.w	r8, #0
 801ce00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ce04:	f104 0b1a 	add.w	fp, r4, #26
 801ce08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce0a:	ebaa 0303 	sub.w	r3, sl, r3
 801ce0e:	eba3 0309 	sub.w	r3, r3, r9
 801ce12:	4543      	cmp	r3, r8
 801ce14:	f77f af76 	ble.w	801cd04 <_printf_float+0x214>
 801ce18:	2301      	movs	r3, #1
 801ce1a:	465a      	mov	r2, fp
 801ce1c:	4631      	mov	r1, r6
 801ce1e:	4628      	mov	r0, r5
 801ce20:	47b8      	blx	r7
 801ce22:	3001      	adds	r0, #1
 801ce24:	f43f aeb0 	beq.w	801cb88 <_printf_float+0x98>
 801ce28:	f108 0801 	add.w	r8, r8, #1
 801ce2c:	e7ec      	b.n	801ce08 <_printf_float+0x318>
 801ce2e:	4642      	mov	r2, r8
 801ce30:	4631      	mov	r1, r6
 801ce32:	4628      	mov	r0, r5
 801ce34:	47b8      	blx	r7
 801ce36:	3001      	adds	r0, #1
 801ce38:	d1c1      	bne.n	801cdbe <_printf_float+0x2ce>
 801ce3a:	e6a5      	b.n	801cb88 <_printf_float+0x98>
 801ce3c:	2301      	movs	r3, #1
 801ce3e:	4631      	mov	r1, r6
 801ce40:	4628      	mov	r0, r5
 801ce42:	9206      	str	r2, [sp, #24]
 801ce44:	47b8      	blx	r7
 801ce46:	3001      	adds	r0, #1
 801ce48:	f43f ae9e 	beq.w	801cb88 <_printf_float+0x98>
 801ce4c:	9b07      	ldr	r3, [sp, #28]
 801ce4e:	9a06      	ldr	r2, [sp, #24]
 801ce50:	3301      	adds	r3, #1
 801ce52:	9307      	str	r3, [sp, #28]
 801ce54:	e7b9      	b.n	801cdca <_printf_float+0x2da>
 801ce56:	9b05      	ldr	r3, [sp, #20]
 801ce58:	465a      	mov	r2, fp
 801ce5a:	4631      	mov	r1, r6
 801ce5c:	4628      	mov	r0, r5
 801ce5e:	47b8      	blx	r7
 801ce60:	3001      	adds	r0, #1
 801ce62:	d1bf      	bne.n	801cde4 <_printf_float+0x2f4>
 801ce64:	e690      	b.n	801cb88 <_printf_float+0x98>
 801ce66:	9a06      	ldr	r2, [sp, #24]
 801ce68:	464b      	mov	r3, r9
 801ce6a:	4442      	add	r2, r8
 801ce6c:	4631      	mov	r1, r6
 801ce6e:	4628      	mov	r0, r5
 801ce70:	47b8      	blx	r7
 801ce72:	3001      	adds	r0, #1
 801ce74:	d1c2      	bne.n	801cdfc <_printf_float+0x30c>
 801ce76:	e687      	b.n	801cb88 <_printf_float+0x98>
 801ce78:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801ce7c:	f1b9 0f01 	cmp.w	r9, #1
 801ce80:	dc01      	bgt.n	801ce86 <_printf_float+0x396>
 801ce82:	07db      	lsls	r3, r3, #31
 801ce84:	d536      	bpl.n	801cef4 <_printf_float+0x404>
 801ce86:	2301      	movs	r3, #1
 801ce88:	4642      	mov	r2, r8
 801ce8a:	4631      	mov	r1, r6
 801ce8c:	4628      	mov	r0, r5
 801ce8e:	47b8      	blx	r7
 801ce90:	3001      	adds	r0, #1
 801ce92:	f43f ae79 	beq.w	801cb88 <_printf_float+0x98>
 801ce96:	9b05      	ldr	r3, [sp, #20]
 801ce98:	465a      	mov	r2, fp
 801ce9a:	4631      	mov	r1, r6
 801ce9c:	4628      	mov	r0, r5
 801ce9e:	47b8      	blx	r7
 801cea0:	3001      	adds	r0, #1
 801cea2:	f43f ae71 	beq.w	801cb88 <_printf_float+0x98>
 801cea6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801ceaa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ceae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ceb2:	f109 39ff 	add.w	r9, r9, #4294967295
 801ceb6:	d018      	beq.n	801ceea <_printf_float+0x3fa>
 801ceb8:	464b      	mov	r3, r9
 801ceba:	f108 0201 	add.w	r2, r8, #1
 801cebe:	4631      	mov	r1, r6
 801cec0:	4628      	mov	r0, r5
 801cec2:	47b8      	blx	r7
 801cec4:	3001      	adds	r0, #1
 801cec6:	d10c      	bne.n	801cee2 <_printf_float+0x3f2>
 801cec8:	e65e      	b.n	801cb88 <_printf_float+0x98>
 801ceca:	2301      	movs	r3, #1
 801cecc:	465a      	mov	r2, fp
 801cece:	4631      	mov	r1, r6
 801ced0:	4628      	mov	r0, r5
 801ced2:	47b8      	blx	r7
 801ced4:	3001      	adds	r0, #1
 801ced6:	f43f ae57 	beq.w	801cb88 <_printf_float+0x98>
 801ceda:	f108 0801 	add.w	r8, r8, #1
 801cede:	45c8      	cmp	r8, r9
 801cee0:	dbf3      	blt.n	801ceca <_printf_float+0x3da>
 801cee2:	4653      	mov	r3, sl
 801cee4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801cee8:	e6dc      	b.n	801cca4 <_printf_float+0x1b4>
 801ceea:	f04f 0800 	mov.w	r8, #0
 801ceee:	f104 0b1a 	add.w	fp, r4, #26
 801cef2:	e7f4      	b.n	801cede <_printf_float+0x3ee>
 801cef4:	2301      	movs	r3, #1
 801cef6:	4642      	mov	r2, r8
 801cef8:	e7e1      	b.n	801cebe <_printf_float+0x3ce>
 801cefa:	2301      	movs	r3, #1
 801cefc:	464a      	mov	r2, r9
 801cefe:	4631      	mov	r1, r6
 801cf00:	4628      	mov	r0, r5
 801cf02:	47b8      	blx	r7
 801cf04:	3001      	adds	r0, #1
 801cf06:	f43f ae3f 	beq.w	801cb88 <_printf_float+0x98>
 801cf0a:	f108 0801 	add.w	r8, r8, #1
 801cf0e:	68e3      	ldr	r3, [r4, #12]
 801cf10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cf12:	1a5b      	subs	r3, r3, r1
 801cf14:	4543      	cmp	r3, r8
 801cf16:	dcf0      	bgt.n	801cefa <_printf_float+0x40a>
 801cf18:	e6f8      	b.n	801cd0c <_printf_float+0x21c>
 801cf1a:	f04f 0800 	mov.w	r8, #0
 801cf1e:	f104 0919 	add.w	r9, r4, #25
 801cf22:	e7f4      	b.n	801cf0e <_printf_float+0x41e>

0801cf24 <_printf_common>:
 801cf24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf28:	4616      	mov	r6, r2
 801cf2a:	4698      	mov	r8, r3
 801cf2c:	688a      	ldr	r2, [r1, #8]
 801cf2e:	690b      	ldr	r3, [r1, #16]
 801cf30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801cf34:	4293      	cmp	r3, r2
 801cf36:	bfb8      	it	lt
 801cf38:	4613      	movlt	r3, r2
 801cf3a:	6033      	str	r3, [r6, #0]
 801cf3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801cf40:	4607      	mov	r7, r0
 801cf42:	460c      	mov	r4, r1
 801cf44:	b10a      	cbz	r2, 801cf4a <_printf_common+0x26>
 801cf46:	3301      	adds	r3, #1
 801cf48:	6033      	str	r3, [r6, #0]
 801cf4a:	6823      	ldr	r3, [r4, #0]
 801cf4c:	0699      	lsls	r1, r3, #26
 801cf4e:	bf42      	ittt	mi
 801cf50:	6833      	ldrmi	r3, [r6, #0]
 801cf52:	3302      	addmi	r3, #2
 801cf54:	6033      	strmi	r3, [r6, #0]
 801cf56:	6825      	ldr	r5, [r4, #0]
 801cf58:	f015 0506 	ands.w	r5, r5, #6
 801cf5c:	d106      	bne.n	801cf6c <_printf_common+0x48>
 801cf5e:	f104 0a19 	add.w	sl, r4, #25
 801cf62:	68e3      	ldr	r3, [r4, #12]
 801cf64:	6832      	ldr	r2, [r6, #0]
 801cf66:	1a9b      	subs	r3, r3, r2
 801cf68:	42ab      	cmp	r3, r5
 801cf6a:	dc26      	bgt.n	801cfba <_printf_common+0x96>
 801cf6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801cf70:	6822      	ldr	r2, [r4, #0]
 801cf72:	3b00      	subs	r3, #0
 801cf74:	bf18      	it	ne
 801cf76:	2301      	movne	r3, #1
 801cf78:	0692      	lsls	r2, r2, #26
 801cf7a:	d42b      	bmi.n	801cfd4 <_printf_common+0xb0>
 801cf7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801cf80:	4641      	mov	r1, r8
 801cf82:	4638      	mov	r0, r7
 801cf84:	47c8      	blx	r9
 801cf86:	3001      	adds	r0, #1
 801cf88:	d01e      	beq.n	801cfc8 <_printf_common+0xa4>
 801cf8a:	6823      	ldr	r3, [r4, #0]
 801cf8c:	6922      	ldr	r2, [r4, #16]
 801cf8e:	f003 0306 	and.w	r3, r3, #6
 801cf92:	2b04      	cmp	r3, #4
 801cf94:	bf02      	ittt	eq
 801cf96:	68e5      	ldreq	r5, [r4, #12]
 801cf98:	6833      	ldreq	r3, [r6, #0]
 801cf9a:	1aed      	subeq	r5, r5, r3
 801cf9c:	68a3      	ldr	r3, [r4, #8]
 801cf9e:	bf0c      	ite	eq
 801cfa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cfa4:	2500      	movne	r5, #0
 801cfa6:	4293      	cmp	r3, r2
 801cfa8:	bfc4      	itt	gt
 801cfaa:	1a9b      	subgt	r3, r3, r2
 801cfac:	18ed      	addgt	r5, r5, r3
 801cfae:	2600      	movs	r6, #0
 801cfb0:	341a      	adds	r4, #26
 801cfb2:	42b5      	cmp	r5, r6
 801cfb4:	d11a      	bne.n	801cfec <_printf_common+0xc8>
 801cfb6:	2000      	movs	r0, #0
 801cfb8:	e008      	b.n	801cfcc <_printf_common+0xa8>
 801cfba:	2301      	movs	r3, #1
 801cfbc:	4652      	mov	r2, sl
 801cfbe:	4641      	mov	r1, r8
 801cfc0:	4638      	mov	r0, r7
 801cfc2:	47c8      	blx	r9
 801cfc4:	3001      	adds	r0, #1
 801cfc6:	d103      	bne.n	801cfd0 <_printf_common+0xac>
 801cfc8:	f04f 30ff 	mov.w	r0, #4294967295
 801cfcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cfd0:	3501      	adds	r5, #1
 801cfd2:	e7c6      	b.n	801cf62 <_printf_common+0x3e>
 801cfd4:	18e1      	adds	r1, r4, r3
 801cfd6:	1c5a      	adds	r2, r3, #1
 801cfd8:	2030      	movs	r0, #48	@ 0x30
 801cfda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801cfde:	4422      	add	r2, r4
 801cfe0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801cfe4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801cfe8:	3302      	adds	r3, #2
 801cfea:	e7c7      	b.n	801cf7c <_printf_common+0x58>
 801cfec:	2301      	movs	r3, #1
 801cfee:	4622      	mov	r2, r4
 801cff0:	4641      	mov	r1, r8
 801cff2:	4638      	mov	r0, r7
 801cff4:	47c8      	blx	r9
 801cff6:	3001      	adds	r0, #1
 801cff8:	d0e6      	beq.n	801cfc8 <_printf_common+0xa4>
 801cffa:	3601      	adds	r6, #1
 801cffc:	e7d9      	b.n	801cfb2 <_printf_common+0x8e>
	...

0801d000 <_printf_i>:
 801d000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d004:	7e0f      	ldrb	r7, [r1, #24]
 801d006:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d008:	2f78      	cmp	r7, #120	@ 0x78
 801d00a:	4691      	mov	r9, r2
 801d00c:	4680      	mov	r8, r0
 801d00e:	460c      	mov	r4, r1
 801d010:	469a      	mov	sl, r3
 801d012:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d016:	d807      	bhi.n	801d028 <_printf_i+0x28>
 801d018:	2f62      	cmp	r7, #98	@ 0x62
 801d01a:	d80a      	bhi.n	801d032 <_printf_i+0x32>
 801d01c:	2f00      	cmp	r7, #0
 801d01e:	f000 80d2 	beq.w	801d1c6 <_printf_i+0x1c6>
 801d022:	2f58      	cmp	r7, #88	@ 0x58
 801d024:	f000 80b9 	beq.w	801d19a <_printf_i+0x19a>
 801d028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d02c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d030:	e03a      	b.n	801d0a8 <_printf_i+0xa8>
 801d032:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d036:	2b15      	cmp	r3, #21
 801d038:	d8f6      	bhi.n	801d028 <_printf_i+0x28>
 801d03a:	a101      	add	r1, pc, #4	@ (adr r1, 801d040 <_printf_i+0x40>)
 801d03c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d040:	0801d099 	.word	0x0801d099
 801d044:	0801d0ad 	.word	0x0801d0ad
 801d048:	0801d029 	.word	0x0801d029
 801d04c:	0801d029 	.word	0x0801d029
 801d050:	0801d029 	.word	0x0801d029
 801d054:	0801d029 	.word	0x0801d029
 801d058:	0801d0ad 	.word	0x0801d0ad
 801d05c:	0801d029 	.word	0x0801d029
 801d060:	0801d029 	.word	0x0801d029
 801d064:	0801d029 	.word	0x0801d029
 801d068:	0801d029 	.word	0x0801d029
 801d06c:	0801d1ad 	.word	0x0801d1ad
 801d070:	0801d0d7 	.word	0x0801d0d7
 801d074:	0801d167 	.word	0x0801d167
 801d078:	0801d029 	.word	0x0801d029
 801d07c:	0801d029 	.word	0x0801d029
 801d080:	0801d1cf 	.word	0x0801d1cf
 801d084:	0801d029 	.word	0x0801d029
 801d088:	0801d0d7 	.word	0x0801d0d7
 801d08c:	0801d029 	.word	0x0801d029
 801d090:	0801d029 	.word	0x0801d029
 801d094:	0801d16f 	.word	0x0801d16f
 801d098:	6833      	ldr	r3, [r6, #0]
 801d09a:	1d1a      	adds	r2, r3, #4
 801d09c:	681b      	ldr	r3, [r3, #0]
 801d09e:	6032      	str	r2, [r6, #0]
 801d0a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d0a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d0a8:	2301      	movs	r3, #1
 801d0aa:	e09d      	b.n	801d1e8 <_printf_i+0x1e8>
 801d0ac:	6833      	ldr	r3, [r6, #0]
 801d0ae:	6820      	ldr	r0, [r4, #0]
 801d0b0:	1d19      	adds	r1, r3, #4
 801d0b2:	6031      	str	r1, [r6, #0]
 801d0b4:	0606      	lsls	r6, r0, #24
 801d0b6:	d501      	bpl.n	801d0bc <_printf_i+0xbc>
 801d0b8:	681d      	ldr	r5, [r3, #0]
 801d0ba:	e003      	b.n	801d0c4 <_printf_i+0xc4>
 801d0bc:	0645      	lsls	r5, r0, #25
 801d0be:	d5fb      	bpl.n	801d0b8 <_printf_i+0xb8>
 801d0c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d0c4:	2d00      	cmp	r5, #0
 801d0c6:	da03      	bge.n	801d0d0 <_printf_i+0xd0>
 801d0c8:	232d      	movs	r3, #45	@ 0x2d
 801d0ca:	426d      	negs	r5, r5
 801d0cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d0d0:	4859      	ldr	r0, [pc, #356]	@ (801d238 <_printf_i+0x238>)
 801d0d2:	230a      	movs	r3, #10
 801d0d4:	e011      	b.n	801d0fa <_printf_i+0xfa>
 801d0d6:	6821      	ldr	r1, [r4, #0]
 801d0d8:	6833      	ldr	r3, [r6, #0]
 801d0da:	0608      	lsls	r0, r1, #24
 801d0dc:	f853 5b04 	ldr.w	r5, [r3], #4
 801d0e0:	d402      	bmi.n	801d0e8 <_printf_i+0xe8>
 801d0e2:	0649      	lsls	r1, r1, #25
 801d0e4:	bf48      	it	mi
 801d0e6:	b2ad      	uxthmi	r5, r5
 801d0e8:	2f6f      	cmp	r7, #111	@ 0x6f
 801d0ea:	4853      	ldr	r0, [pc, #332]	@ (801d238 <_printf_i+0x238>)
 801d0ec:	6033      	str	r3, [r6, #0]
 801d0ee:	bf14      	ite	ne
 801d0f0:	230a      	movne	r3, #10
 801d0f2:	2308      	moveq	r3, #8
 801d0f4:	2100      	movs	r1, #0
 801d0f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d0fa:	6866      	ldr	r6, [r4, #4]
 801d0fc:	60a6      	str	r6, [r4, #8]
 801d0fe:	2e00      	cmp	r6, #0
 801d100:	bfa2      	ittt	ge
 801d102:	6821      	ldrge	r1, [r4, #0]
 801d104:	f021 0104 	bicge.w	r1, r1, #4
 801d108:	6021      	strge	r1, [r4, #0]
 801d10a:	b90d      	cbnz	r5, 801d110 <_printf_i+0x110>
 801d10c:	2e00      	cmp	r6, #0
 801d10e:	d04b      	beq.n	801d1a8 <_printf_i+0x1a8>
 801d110:	4616      	mov	r6, r2
 801d112:	fbb5 f1f3 	udiv	r1, r5, r3
 801d116:	fb03 5711 	mls	r7, r3, r1, r5
 801d11a:	5dc7      	ldrb	r7, [r0, r7]
 801d11c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d120:	462f      	mov	r7, r5
 801d122:	42bb      	cmp	r3, r7
 801d124:	460d      	mov	r5, r1
 801d126:	d9f4      	bls.n	801d112 <_printf_i+0x112>
 801d128:	2b08      	cmp	r3, #8
 801d12a:	d10b      	bne.n	801d144 <_printf_i+0x144>
 801d12c:	6823      	ldr	r3, [r4, #0]
 801d12e:	07df      	lsls	r7, r3, #31
 801d130:	d508      	bpl.n	801d144 <_printf_i+0x144>
 801d132:	6923      	ldr	r3, [r4, #16]
 801d134:	6861      	ldr	r1, [r4, #4]
 801d136:	4299      	cmp	r1, r3
 801d138:	bfde      	ittt	le
 801d13a:	2330      	movle	r3, #48	@ 0x30
 801d13c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d140:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d144:	1b92      	subs	r2, r2, r6
 801d146:	6122      	str	r2, [r4, #16]
 801d148:	f8cd a000 	str.w	sl, [sp]
 801d14c:	464b      	mov	r3, r9
 801d14e:	aa03      	add	r2, sp, #12
 801d150:	4621      	mov	r1, r4
 801d152:	4640      	mov	r0, r8
 801d154:	f7ff fee6 	bl	801cf24 <_printf_common>
 801d158:	3001      	adds	r0, #1
 801d15a:	d14a      	bne.n	801d1f2 <_printf_i+0x1f2>
 801d15c:	f04f 30ff 	mov.w	r0, #4294967295
 801d160:	b004      	add	sp, #16
 801d162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d166:	6823      	ldr	r3, [r4, #0]
 801d168:	f043 0320 	orr.w	r3, r3, #32
 801d16c:	6023      	str	r3, [r4, #0]
 801d16e:	4833      	ldr	r0, [pc, #204]	@ (801d23c <_printf_i+0x23c>)
 801d170:	2778      	movs	r7, #120	@ 0x78
 801d172:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d176:	6823      	ldr	r3, [r4, #0]
 801d178:	6831      	ldr	r1, [r6, #0]
 801d17a:	061f      	lsls	r7, r3, #24
 801d17c:	f851 5b04 	ldr.w	r5, [r1], #4
 801d180:	d402      	bmi.n	801d188 <_printf_i+0x188>
 801d182:	065f      	lsls	r7, r3, #25
 801d184:	bf48      	it	mi
 801d186:	b2ad      	uxthmi	r5, r5
 801d188:	6031      	str	r1, [r6, #0]
 801d18a:	07d9      	lsls	r1, r3, #31
 801d18c:	bf44      	itt	mi
 801d18e:	f043 0320 	orrmi.w	r3, r3, #32
 801d192:	6023      	strmi	r3, [r4, #0]
 801d194:	b11d      	cbz	r5, 801d19e <_printf_i+0x19e>
 801d196:	2310      	movs	r3, #16
 801d198:	e7ac      	b.n	801d0f4 <_printf_i+0xf4>
 801d19a:	4827      	ldr	r0, [pc, #156]	@ (801d238 <_printf_i+0x238>)
 801d19c:	e7e9      	b.n	801d172 <_printf_i+0x172>
 801d19e:	6823      	ldr	r3, [r4, #0]
 801d1a0:	f023 0320 	bic.w	r3, r3, #32
 801d1a4:	6023      	str	r3, [r4, #0]
 801d1a6:	e7f6      	b.n	801d196 <_printf_i+0x196>
 801d1a8:	4616      	mov	r6, r2
 801d1aa:	e7bd      	b.n	801d128 <_printf_i+0x128>
 801d1ac:	6833      	ldr	r3, [r6, #0]
 801d1ae:	6825      	ldr	r5, [r4, #0]
 801d1b0:	6961      	ldr	r1, [r4, #20]
 801d1b2:	1d18      	adds	r0, r3, #4
 801d1b4:	6030      	str	r0, [r6, #0]
 801d1b6:	062e      	lsls	r6, r5, #24
 801d1b8:	681b      	ldr	r3, [r3, #0]
 801d1ba:	d501      	bpl.n	801d1c0 <_printf_i+0x1c0>
 801d1bc:	6019      	str	r1, [r3, #0]
 801d1be:	e002      	b.n	801d1c6 <_printf_i+0x1c6>
 801d1c0:	0668      	lsls	r0, r5, #25
 801d1c2:	d5fb      	bpl.n	801d1bc <_printf_i+0x1bc>
 801d1c4:	8019      	strh	r1, [r3, #0]
 801d1c6:	2300      	movs	r3, #0
 801d1c8:	6123      	str	r3, [r4, #16]
 801d1ca:	4616      	mov	r6, r2
 801d1cc:	e7bc      	b.n	801d148 <_printf_i+0x148>
 801d1ce:	6833      	ldr	r3, [r6, #0]
 801d1d0:	1d1a      	adds	r2, r3, #4
 801d1d2:	6032      	str	r2, [r6, #0]
 801d1d4:	681e      	ldr	r6, [r3, #0]
 801d1d6:	6862      	ldr	r2, [r4, #4]
 801d1d8:	2100      	movs	r1, #0
 801d1da:	4630      	mov	r0, r6
 801d1dc:	f7e3 f898 	bl	8000310 <memchr>
 801d1e0:	b108      	cbz	r0, 801d1e6 <_printf_i+0x1e6>
 801d1e2:	1b80      	subs	r0, r0, r6
 801d1e4:	6060      	str	r0, [r4, #4]
 801d1e6:	6863      	ldr	r3, [r4, #4]
 801d1e8:	6123      	str	r3, [r4, #16]
 801d1ea:	2300      	movs	r3, #0
 801d1ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d1f0:	e7aa      	b.n	801d148 <_printf_i+0x148>
 801d1f2:	6923      	ldr	r3, [r4, #16]
 801d1f4:	4632      	mov	r2, r6
 801d1f6:	4649      	mov	r1, r9
 801d1f8:	4640      	mov	r0, r8
 801d1fa:	47d0      	blx	sl
 801d1fc:	3001      	adds	r0, #1
 801d1fe:	d0ad      	beq.n	801d15c <_printf_i+0x15c>
 801d200:	6823      	ldr	r3, [r4, #0]
 801d202:	079b      	lsls	r3, r3, #30
 801d204:	d413      	bmi.n	801d22e <_printf_i+0x22e>
 801d206:	68e0      	ldr	r0, [r4, #12]
 801d208:	9b03      	ldr	r3, [sp, #12]
 801d20a:	4298      	cmp	r0, r3
 801d20c:	bfb8      	it	lt
 801d20e:	4618      	movlt	r0, r3
 801d210:	e7a6      	b.n	801d160 <_printf_i+0x160>
 801d212:	2301      	movs	r3, #1
 801d214:	4632      	mov	r2, r6
 801d216:	4649      	mov	r1, r9
 801d218:	4640      	mov	r0, r8
 801d21a:	47d0      	blx	sl
 801d21c:	3001      	adds	r0, #1
 801d21e:	d09d      	beq.n	801d15c <_printf_i+0x15c>
 801d220:	3501      	adds	r5, #1
 801d222:	68e3      	ldr	r3, [r4, #12]
 801d224:	9903      	ldr	r1, [sp, #12]
 801d226:	1a5b      	subs	r3, r3, r1
 801d228:	42ab      	cmp	r3, r5
 801d22a:	dcf2      	bgt.n	801d212 <_printf_i+0x212>
 801d22c:	e7eb      	b.n	801d206 <_printf_i+0x206>
 801d22e:	2500      	movs	r5, #0
 801d230:	f104 0619 	add.w	r6, r4, #25
 801d234:	e7f5      	b.n	801d222 <_printf_i+0x222>
 801d236:	bf00      	nop
 801d238:	080227a8 	.word	0x080227a8
 801d23c:	080227b9 	.word	0x080227b9

0801d240 <std>:
 801d240:	2300      	movs	r3, #0
 801d242:	b510      	push	{r4, lr}
 801d244:	4604      	mov	r4, r0
 801d246:	e9c0 3300 	strd	r3, r3, [r0]
 801d24a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d24e:	6083      	str	r3, [r0, #8]
 801d250:	8181      	strh	r1, [r0, #12]
 801d252:	6643      	str	r3, [r0, #100]	@ 0x64
 801d254:	81c2      	strh	r2, [r0, #14]
 801d256:	6183      	str	r3, [r0, #24]
 801d258:	4619      	mov	r1, r3
 801d25a:	2208      	movs	r2, #8
 801d25c:	305c      	adds	r0, #92	@ 0x5c
 801d25e:	f000 fa09 	bl	801d674 <memset>
 801d262:	4b0d      	ldr	r3, [pc, #52]	@ (801d298 <std+0x58>)
 801d264:	6263      	str	r3, [r4, #36]	@ 0x24
 801d266:	4b0d      	ldr	r3, [pc, #52]	@ (801d29c <std+0x5c>)
 801d268:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d26a:	4b0d      	ldr	r3, [pc, #52]	@ (801d2a0 <std+0x60>)
 801d26c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d26e:	4b0d      	ldr	r3, [pc, #52]	@ (801d2a4 <std+0x64>)
 801d270:	6323      	str	r3, [r4, #48]	@ 0x30
 801d272:	4b0d      	ldr	r3, [pc, #52]	@ (801d2a8 <std+0x68>)
 801d274:	6224      	str	r4, [r4, #32]
 801d276:	429c      	cmp	r4, r3
 801d278:	d006      	beq.n	801d288 <std+0x48>
 801d27a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d27e:	4294      	cmp	r4, r2
 801d280:	d002      	beq.n	801d288 <std+0x48>
 801d282:	33d0      	adds	r3, #208	@ 0xd0
 801d284:	429c      	cmp	r4, r3
 801d286:	d105      	bne.n	801d294 <std+0x54>
 801d288:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d290:	f000 babc 	b.w	801d80c <__retarget_lock_init_recursive>
 801d294:	bd10      	pop	{r4, pc}
 801d296:	bf00      	nop
 801d298:	0801d4a5 	.word	0x0801d4a5
 801d29c:	0801d4c7 	.word	0x0801d4c7
 801d2a0:	0801d4ff 	.word	0x0801d4ff
 801d2a4:	0801d523 	.word	0x0801d523
 801d2a8:	2400cdc8 	.word	0x2400cdc8

0801d2ac <stdio_exit_handler>:
 801d2ac:	4a02      	ldr	r2, [pc, #8]	@ (801d2b8 <stdio_exit_handler+0xc>)
 801d2ae:	4903      	ldr	r1, [pc, #12]	@ (801d2bc <stdio_exit_handler+0x10>)
 801d2b0:	4803      	ldr	r0, [pc, #12]	@ (801d2c0 <stdio_exit_handler+0x14>)
 801d2b2:	f000 b869 	b.w	801d388 <_fwalk_sglue>
 801d2b6:	bf00      	nop
 801d2b8:	24000038 	.word	0x24000038
 801d2bc:	0801f0bd 	.word	0x0801f0bd
 801d2c0:	24000048 	.word	0x24000048

0801d2c4 <cleanup_stdio>:
 801d2c4:	6841      	ldr	r1, [r0, #4]
 801d2c6:	4b0c      	ldr	r3, [pc, #48]	@ (801d2f8 <cleanup_stdio+0x34>)
 801d2c8:	4299      	cmp	r1, r3
 801d2ca:	b510      	push	{r4, lr}
 801d2cc:	4604      	mov	r4, r0
 801d2ce:	d001      	beq.n	801d2d4 <cleanup_stdio+0x10>
 801d2d0:	f001 fef4 	bl	801f0bc <_fflush_r>
 801d2d4:	68a1      	ldr	r1, [r4, #8]
 801d2d6:	4b09      	ldr	r3, [pc, #36]	@ (801d2fc <cleanup_stdio+0x38>)
 801d2d8:	4299      	cmp	r1, r3
 801d2da:	d002      	beq.n	801d2e2 <cleanup_stdio+0x1e>
 801d2dc:	4620      	mov	r0, r4
 801d2de:	f001 feed 	bl	801f0bc <_fflush_r>
 801d2e2:	68e1      	ldr	r1, [r4, #12]
 801d2e4:	4b06      	ldr	r3, [pc, #24]	@ (801d300 <cleanup_stdio+0x3c>)
 801d2e6:	4299      	cmp	r1, r3
 801d2e8:	d004      	beq.n	801d2f4 <cleanup_stdio+0x30>
 801d2ea:	4620      	mov	r0, r4
 801d2ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d2f0:	f001 bee4 	b.w	801f0bc <_fflush_r>
 801d2f4:	bd10      	pop	{r4, pc}
 801d2f6:	bf00      	nop
 801d2f8:	2400cdc8 	.word	0x2400cdc8
 801d2fc:	2400ce30 	.word	0x2400ce30
 801d300:	2400ce98 	.word	0x2400ce98

0801d304 <global_stdio_init.part.0>:
 801d304:	b510      	push	{r4, lr}
 801d306:	4b0b      	ldr	r3, [pc, #44]	@ (801d334 <global_stdio_init.part.0+0x30>)
 801d308:	4c0b      	ldr	r4, [pc, #44]	@ (801d338 <global_stdio_init.part.0+0x34>)
 801d30a:	4a0c      	ldr	r2, [pc, #48]	@ (801d33c <global_stdio_init.part.0+0x38>)
 801d30c:	601a      	str	r2, [r3, #0]
 801d30e:	4620      	mov	r0, r4
 801d310:	2200      	movs	r2, #0
 801d312:	2104      	movs	r1, #4
 801d314:	f7ff ff94 	bl	801d240 <std>
 801d318:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d31c:	2201      	movs	r2, #1
 801d31e:	2109      	movs	r1, #9
 801d320:	f7ff ff8e 	bl	801d240 <std>
 801d324:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d328:	2202      	movs	r2, #2
 801d32a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d32e:	2112      	movs	r1, #18
 801d330:	f7ff bf86 	b.w	801d240 <std>
 801d334:	2400cf00 	.word	0x2400cf00
 801d338:	2400cdc8 	.word	0x2400cdc8
 801d33c:	0801d2ad 	.word	0x0801d2ad

0801d340 <__sfp_lock_acquire>:
 801d340:	4801      	ldr	r0, [pc, #4]	@ (801d348 <__sfp_lock_acquire+0x8>)
 801d342:	f000 ba64 	b.w	801d80e <__retarget_lock_acquire_recursive>
 801d346:	bf00      	nop
 801d348:	2400cf09 	.word	0x2400cf09

0801d34c <__sfp_lock_release>:
 801d34c:	4801      	ldr	r0, [pc, #4]	@ (801d354 <__sfp_lock_release+0x8>)
 801d34e:	f000 ba5f 	b.w	801d810 <__retarget_lock_release_recursive>
 801d352:	bf00      	nop
 801d354:	2400cf09 	.word	0x2400cf09

0801d358 <__sinit>:
 801d358:	b510      	push	{r4, lr}
 801d35a:	4604      	mov	r4, r0
 801d35c:	f7ff fff0 	bl	801d340 <__sfp_lock_acquire>
 801d360:	6a23      	ldr	r3, [r4, #32]
 801d362:	b11b      	cbz	r3, 801d36c <__sinit+0x14>
 801d364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d368:	f7ff bff0 	b.w	801d34c <__sfp_lock_release>
 801d36c:	4b04      	ldr	r3, [pc, #16]	@ (801d380 <__sinit+0x28>)
 801d36e:	6223      	str	r3, [r4, #32]
 801d370:	4b04      	ldr	r3, [pc, #16]	@ (801d384 <__sinit+0x2c>)
 801d372:	681b      	ldr	r3, [r3, #0]
 801d374:	2b00      	cmp	r3, #0
 801d376:	d1f5      	bne.n	801d364 <__sinit+0xc>
 801d378:	f7ff ffc4 	bl	801d304 <global_stdio_init.part.0>
 801d37c:	e7f2      	b.n	801d364 <__sinit+0xc>
 801d37e:	bf00      	nop
 801d380:	0801d2c5 	.word	0x0801d2c5
 801d384:	2400cf00 	.word	0x2400cf00

0801d388 <_fwalk_sglue>:
 801d388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d38c:	4607      	mov	r7, r0
 801d38e:	4688      	mov	r8, r1
 801d390:	4614      	mov	r4, r2
 801d392:	2600      	movs	r6, #0
 801d394:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d398:	f1b9 0901 	subs.w	r9, r9, #1
 801d39c:	d505      	bpl.n	801d3aa <_fwalk_sglue+0x22>
 801d39e:	6824      	ldr	r4, [r4, #0]
 801d3a0:	2c00      	cmp	r4, #0
 801d3a2:	d1f7      	bne.n	801d394 <_fwalk_sglue+0xc>
 801d3a4:	4630      	mov	r0, r6
 801d3a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d3aa:	89ab      	ldrh	r3, [r5, #12]
 801d3ac:	2b01      	cmp	r3, #1
 801d3ae:	d907      	bls.n	801d3c0 <_fwalk_sglue+0x38>
 801d3b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d3b4:	3301      	adds	r3, #1
 801d3b6:	d003      	beq.n	801d3c0 <_fwalk_sglue+0x38>
 801d3b8:	4629      	mov	r1, r5
 801d3ba:	4638      	mov	r0, r7
 801d3bc:	47c0      	blx	r8
 801d3be:	4306      	orrs	r6, r0
 801d3c0:	3568      	adds	r5, #104	@ 0x68
 801d3c2:	e7e9      	b.n	801d398 <_fwalk_sglue+0x10>

0801d3c4 <iprintf>:
 801d3c4:	b40f      	push	{r0, r1, r2, r3}
 801d3c6:	b507      	push	{r0, r1, r2, lr}
 801d3c8:	4906      	ldr	r1, [pc, #24]	@ (801d3e4 <iprintf+0x20>)
 801d3ca:	ab04      	add	r3, sp, #16
 801d3cc:	6808      	ldr	r0, [r1, #0]
 801d3ce:	f853 2b04 	ldr.w	r2, [r3], #4
 801d3d2:	6881      	ldr	r1, [r0, #8]
 801d3d4:	9301      	str	r3, [sp, #4]
 801d3d6:	f001 fcd5 	bl	801ed84 <_vfiprintf_r>
 801d3da:	b003      	add	sp, #12
 801d3dc:	f85d eb04 	ldr.w	lr, [sp], #4
 801d3e0:	b004      	add	sp, #16
 801d3e2:	4770      	bx	lr
 801d3e4:	24000044 	.word	0x24000044

0801d3e8 <_puts_r>:
 801d3e8:	6a03      	ldr	r3, [r0, #32]
 801d3ea:	b570      	push	{r4, r5, r6, lr}
 801d3ec:	6884      	ldr	r4, [r0, #8]
 801d3ee:	4605      	mov	r5, r0
 801d3f0:	460e      	mov	r6, r1
 801d3f2:	b90b      	cbnz	r3, 801d3f8 <_puts_r+0x10>
 801d3f4:	f7ff ffb0 	bl	801d358 <__sinit>
 801d3f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d3fa:	07db      	lsls	r3, r3, #31
 801d3fc:	d405      	bmi.n	801d40a <_puts_r+0x22>
 801d3fe:	89a3      	ldrh	r3, [r4, #12]
 801d400:	0598      	lsls	r0, r3, #22
 801d402:	d402      	bmi.n	801d40a <_puts_r+0x22>
 801d404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d406:	f000 fa02 	bl	801d80e <__retarget_lock_acquire_recursive>
 801d40a:	89a3      	ldrh	r3, [r4, #12]
 801d40c:	0719      	lsls	r1, r3, #28
 801d40e:	d502      	bpl.n	801d416 <_puts_r+0x2e>
 801d410:	6923      	ldr	r3, [r4, #16]
 801d412:	2b00      	cmp	r3, #0
 801d414:	d135      	bne.n	801d482 <_puts_r+0x9a>
 801d416:	4621      	mov	r1, r4
 801d418:	4628      	mov	r0, r5
 801d41a:	f000 f8c5 	bl	801d5a8 <__swsetup_r>
 801d41e:	b380      	cbz	r0, 801d482 <_puts_r+0x9a>
 801d420:	f04f 35ff 	mov.w	r5, #4294967295
 801d424:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d426:	07da      	lsls	r2, r3, #31
 801d428:	d405      	bmi.n	801d436 <_puts_r+0x4e>
 801d42a:	89a3      	ldrh	r3, [r4, #12]
 801d42c:	059b      	lsls	r3, r3, #22
 801d42e:	d402      	bmi.n	801d436 <_puts_r+0x4e>
 801d430:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d432:	f000 f9ed 	bl	801d810 <__retarget_lock_release_recursive>
 801d436:	4628      	mov	r0, r5
 801d438:	bd70      	pop	{r4, r5, r6, pc}
 801d43a:	2b00      	cmp	r3, #0
 801d43c:	da04      	bge.n	801d448 <_puts_r+0x60>
 801d43e:	69a2      	ldr	r2, [r4, #24]
 801d440:	429a      	cmp	r2, r3
 801d442:	dc17      	bgt.n	801d474 <_puts_r+0x8c>
 801d444:	290a      	cmp	r1, #10
 801d446:	d015      	beq.n	801d474 <_puts_r+0x8c>
 801d448:	6823      	ldr	r3, [r4, #0]
 801d44a:	1c5a      	adds	r2, r3, #1
 801d44c:	6022      	str	r2, [r4, #0]
 801d44e:	7019      	strb	r1, [r3, #0]
 801d450:	68a3      	ldr	r3, [r4, #8]
 801d452:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d456:	3b01      	subs	r3, #1
 801d458:	60a3      	str	r3, [r4, #8]
 801d45a:	2900      	cmp	r1, #0
 801d45c:	d1ed      	bne.n	801d43a <_puts_r+0x52>
 801d45e:	2b00      	cmp	r3, #0
 801d460:	da11      	bge.n	801d486 <_puts_r+0x9e>
 801d462:	4622      	mov	r2, r4
 801d464:	210a      	movs	r1, #10
 801d466:	4628      	mov	r0, r5
 801d468:	f000 f85f 	bl	801d52a <__swbuf_r>
 801d46c:	3001      	adds	r0, #1
 801d46e:	d0d7      	beq.n	801d420 <_puts_r+0x38>
 801d470:	250a      	movs	r5, #10
 801d472:	e7d7      	b.n	801d424 <_puts_r+0x3c>
 801d474:	4622      	mov	r2, r4
 801d476:	4628      	mov	r0, r5
 801d478:	f000 f857 	bl	801d52a <__swbuf_r>
 801d47c:	3001      	adds	r0, #1
 801d47e:	d1e7      	bne.n	801d450 <_puts_r+0x68>
 801d480:	e7ce      	b.n	801d420 <_puts_r+0x38>
 801d482:	3e01      	subs	r6, #1
 801d484:	e7e4      	b.n	801d450 <_puts_r+0x68>
 801d486:	6823      	ldr	r3, [r4, #0]
 801d488:	1c5a      	adds	r2, r3, #1
 801d48a:	6022      	str	r2, [r4, #0]
 801d48c:	220a      	movs	r2, #10
 801d48e:	701a      	strb	r2, [r3, #0]
 801d490:	e7ee      	b.n	801d470 <_puts_r+0x88>
	...

0801d494 <puts>:
 801d494:	4b02      	ldr	r3, [pc, #8]	@ (801d4a0 <puts+0xc>)
 801d496:	4601      	mov	r1, r0
 801d498:	6818      	ldr	r0, [r3, #0]
 801d49a:	f7ff bfa5 	b.w	801d3e8 <_puts_r>
 801d49e:	bf00      	nop
 801d4a0:	24000044 	.word	0x24000044

0801d4a4 <__sread>:
 801d4a4:	b510      	push	{r4, lr}
 801d4a6:	460c      	mov	r4, r1
 801d4a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d4ac:	f000 f966 	bl	801d77c <_read_r>
 801d4b0:	2800      	cmp	r0, #0
 801d4b2:	bfab      	itete	ge
 801d4b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d4b6:	89a3      	ldrhlt	r3, [r4, #12]
 801d4b8:	181b      	addge	r3, r3, r0
 801d4ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d4be:	bfac      	ite	ge
 801d4c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d4c2:	81a3      	strhlt	r3, [r4, #12]
 801d4c4:	bd10      	pop	{r4, pc}

0801d4c6 <__swrite>:
 801d4c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d4ca:	461f      	mov	r7, r3
 801d4cc:	898b      	ldrh	r3, [r1, #12]
 801d4ce:	05db      	lsls	r3, r3, #23
 801d4d0:	4605      	mov	r5, r0
 801d4d2:	460c      	mov	r4, r1
 801d4d4:	4616      	mov	r6, r2
 801d4d6:	d505      	bpl.n	801d4e4 <__swrite+0x1e>
 801d4d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d4dc:	2302      	movs	r3, #2
 801d4de:	2200      	movs	r2, #0
 801d4e0:	f000 f93a 	bl	801d758 <_lseek_r>
 801d4e4:	89a3      	ldrh	r3, [r4, #12]
 801d4e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d4ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d4ee:	81a3      	strh	r3, [r4, #12]
 801d4f0:	4632      	mov	r2, r6
 801d4f2:	463b      	mov	r3, r7
 801d4f4:	4628      	mov	r0, r5
 801d4f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d4fa:	f000 b951 	b.w	801d7a0 <_write_r>

0801d4fe <__sseek>:
 801d4fe:	b510      	push	{r4, lr}
 801d500:	460c      	mov	r4, r1
 801d502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d506:	f000 f927 	bl	801d758 <_lseek_r>
 801d50a:	1c43      	adds	r3, r0, #1
 801d50c:	89a3      	ldrh	r3, [r4, #12]
 801d50e:	bf15      	itete	ne
 801d510:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d512:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d516:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d51a:	81a3      	strheq	r3, [r4, #12]
 801d51c:	bf18      	it	ne
 801d51e:	81a3      	strhne	r3, [r4, #12]
 801d520:	bd10      	pop	{r4, pc}

0801d522 <__sclose>:
 801d522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d526:	f000 b8b1 	b.w	801d68c <_close_r>

0801d52a <__swbuf_r>:
 801d52a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d52c:	460e      	mov	r6, r1
 801d52e:	4614      	mov	r4, r2
 801d530:	4605      	mov	r5, r0
 801d532:	b118      	cbz	r0, 801d53c <__swbuf_r+0x12>
 801d534:	6a03      	ldr	r3, [r0, #32]
 801d536:	b90b      	cbnz	r3, 801d53c <__swbuf_r+0x12>
 801d538:	f7ff ff0e 	bl	801d358 <__sinit>
 801d53c:	69a3      	ldr	r3, [r4, #24]
 801d53e:	60a3      	str	r3, [r4, #8]
 801d540:	89a3      	ldrh	r3, [r4, #12]
 801d542:	071a      	lsls	r2, r3, #28
 801d544:	d501      	bpl.n	801d54a <__swbuf_r+0x20>
 801d546:	6923      	ldr	r3, [r4, #16]
 801d548:	b943      	cbnz	r3, 801d55c <__swbuf_r+0x32>
 801d54a:	4621      	mov	r1, r4
 801d54c:	4628      	mov	r0, r5
 801d54e:	f000 f82b 	bl	801d5a8 <__swsetup_r>
 801d552:	b118      	cbz	r0, 801d55c <__swbuf_r+0x32>
 801d554:	f04f 37ff 	mov.w	r7, #4294967295
 801d558:	4638      	mov	r0, r7
 801d55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d55c:	6823      	ldr	r3, [r4, #0]
 801d55e:	6922      	ldr	r2, [r4, #16]
 801d560:	1a98      	subs	r0, r3, r2
 801d562:	6963      	ldr	r3, [r4, #20]
 801d564:	b2f6      	uxtb	r6, r6
 801d566:	4283      	cmp	r3, r0
 801d568:	4637      	mov	r7, r6
 801d56a:	dc05      	bgt.n	801d578 <__swbuf_r+0x4e>
 801d56c:	4621      	mov	r1, r4
 801d56e:	4628      	mov	r0, r5
 801d570:	f001 fda4 	bl	801f0bc <_fflush_r>
 801d574:	2800      	cmp	r0, #0
 801d576:	d1ed      	bne.n	801d554 <__swbuf_r+0x2a>
 801d578:	68a3      	ldr	r3, [r4, #8]
 801d57a:	3b01      	subs	r3, #1
 801d57c:	60a3      	str	r3, [r4, #8]
 801d57e:	6823      	ldr	r3, [r4, #0]
 801d580:	1c5a      	adds	r2, r3, #1
 801d582:	6022      	str	r2, [r4, #0]
 801d584:	701e      	strb	r6, [r3, #0]
 801d586:	6962      	ldr	r2, [r4, #20]
 801d588:	1c43      	adds	r3, r0, #1
 801d58a:	429a      	cmp	r2, r3
 801d58c:	d004      	beq.n	801d598 <__swbuf_r+0x6e>
 801d58e:	89a3      	ldrh	r3, [r4, #12]
 801d590:	07db      	lsls	r3, r3, #31
 801d592:	d5e1      	bpl.n	801d558 <__swbuf_r+0x2e>
 801d594:	2e0a      	cmp	r6, #10
 801d596:	d1df      	bne.n	801d558 <__swbuf_r+0x2e>
 801d598:	4621      	mov	r1, r4
 801d59a:	4628      	mov	r0, r5
 801d59c:	f001 fd8e 	bl	801f0bc <_fflush_r>
 801d5a0:	2800      	cmp	r0, #0
 801d5a2:	d0d9      	beq.n	801d558 <__swbuf_r+0x2e>
 801d5a4:	e7d6      	b.n	801d554 <__swbuf_r+0x2a>
	...

0801d5a8 <__swsetup_r>:
 801d5a8:	b538      	push	{r3, r4, r5, lr}
 801d5aa:	4b29      	ldr	r3, [pc, #164]	@ (801d650 <__swsetup_r+0xa8>)
 801d5ac:	4605      	mov	r5, r0
 801d5ae:	6818      	ldr	r0, [r3, #0]
 801d5b0:	460c      	mov	r4, r1
 801d5b2:	b118      	cbz	r0, 801d5bc <__swsetup_r+0x14>
 801d5b4:	6a03      	ldr	r3, [r0, #32]
 801d5b6:	b90b      	cbnz	r3, 801d5bc <__swsetup_r+0x14>
 801d5b8:	f7ff fece 	bl	801d358 <__sinit>
 801d5bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d5c0:	0719      	lsls	r1, r3, #28
 801d5c2:	d422      	bmi.n	801d60a <__swsetup_r+0x62>
 801d5c4:	06da      	lsls	r2, r3, #27
 801d5c6:	d407      	bmi.n	801d5d8 <__swsetup_r+0x30>
 801d5c8:	2209      	movs	r2, #9
 801d5ca:	602a      	str	r2, [r5, #0]
 801d5cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d5d0:	81a3      	strh	r3, [r4, #12]
 801d5d2:	f04f 30ff 	mov.w	r0, #4294967295
 801d5d6:	e033      	b.n	801d640 <__swsetup_r+0x98>
 801d5d8:	0758      	lsls	r0, r3, #29
 801d5da:	d512      	bpl.n	801d602 <__swsetup_r+0x5a>
 801d5dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d5de:	b141      	cbz	r1, 801d5f2 <__swsetup_r+0x4a>
 801d5e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d5e4:	4299      	cmp	r1, r3
 801d5e6:	d002      	beq.n	801d5ee <__swsetup_r+0x46>
 801d5e8:	4628      	mov	r0, r5
 801d5ea:	f000 ff1f 	bl	801e42c <_free_r>
 801d5ee:	2300      	movs	r3, #0
 801d5f0:	6363      	str	r3, [r4, #52]	@ 0x34
 801d5f2:	89a3      	ldrh	r3, [r4, #12]
 801d5f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d5f8:	81a3      	strh	r3, [r4, #12]
 801d5fa:	2300      	movs	r3, #0
 801d5fc:	6063      	str	r3, [r4, #4]
 801d5fe:	6923      	ldr	r3, [r4, #16]
 801d600:	6023      	str	r3, [r4, #0]
 801d602:	89a3      	ldrh	r3, [r4, #12]
 801d604:	f043 0308 	orr.w	r3, r3, #8
 801d608:	81a3      	strh	r3, [r4, #12]
 801d60a:	6923      	ldr	r3, [r4, #16]
 801d60c:	b94b      	cbnz	r3, 801d622 <__swsetup_r+0x7a>
 801d60e:	89a3      	ldrh	r3, [r4, #12]
 801d610:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d618:	d003      	beq.n	801d622 <__swsetup_r+0x7a>
 801d61a:	4621      	mov	r1, r4
 801d61c:	4628      	mov	r0, r5
 801d61e:	f001 fdad 	bl	801f17c <__smakebuf_r>
 801d622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d626:	f013 0201 	ands.w	r2, r3, #1
 801d62a:	d00a      	beq.n	801d642 <__swsetup_r+0x9a>
 801d62c:	2200      	movs	r2, #0
 801d62e:	60a2      	str	r2, [r4, #8]
 801d630:	6962      	ldr	r2, [r4, #20]
 801d632:	4252      	negs	r2, r2
 801d634:	61a2      	str	r2, [r4, #24]
 801d636:	6922      	ldr	r2, [r4, #16]
 801d638:	b942      	cbnz	r2, 801d64c <__swsetup_r+0xa4>
 801d63a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d63e:	d1c5      	bne.n	801d5cc <__swsetup_r+0x24>
 801d640:	bd38      	pop	{r3, r4, r5, pc}
 801d642:	0799      	lsls	r1, r3, #30
 801d644:	bf58      	it	pl
 801d646:	6962      	ldrpl	r2, [r4, #20]
 801d648:	60a2      	str	r2, [r4, #8]
 801d64a:	e7f4      	b.n	801d636 <__swsetup_r+0x8e>
 801d64c:	2000      	movs	r0, #0
 801d64e:	e7f7      	b.n	801d640 <__swsetup_r+0x98>
 801d650:	24000044 	.word	0x24000044

0801d654 <memcmp>:
 801d654:	b510      	push	{r4, lr}
 801d656:	3901      	subs	r1, #1
 801d658:	4402      	add	r2, r0
 801d65a:	4290      	cmp	r0, r2
 801d65c:	d101      	bne.n	801d662 <memcmp+0xe>
 801d65e:	2000      	movs	r0, #0
 801d660:	e005      	b.n	801d66e <memcmp+0x1a>
 801d662:	7803      	ldrb	r3, [r0, #0]
 801d664:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d668:	42a3      	cmp	r3, r4
 801d66a:	d001      	beq.n	801d670 <memcmp+0x1c>
 801d66c:	1b18      	subs	r0, r3, r4
 801d66e:	bd10      	pop	{r4, pc}
 801d670:	3001      	adds	r0, #1
 801d672:	e7f2      	b.n	801d65a <memcmp+0x6>

0801d674 <memset>:
 801d674:	4402      	add	r2, r0
 801d676:	4603      	mov	r3, r0
 801d678:	4293      	cmp	r3, r2
 801d67a:	d100      	bne.n	801d67e <memset+0xa>
 801d67c:	4770      	bx	lr
 801d67e:	f803 1b01 	strb.w	r1, [r3], #1
 801d682:	e7f9      	b.n	801d678 <memset+0x4>

0801d684 <_localeconv_r>:
 801d684:	4800      	ldr	r0, [pc, #0]	@ (801d688 <_localeconv_r+0x4>)
 801d686:	4770      	bx	lr
 801d688:	24000184 	.word	0x24000184

0801d68c <_close_r>:
 801d68c:	b538      	push	{r3, r4, r5, lr}
 801d68e:	4d06      	ldr	r5, [pc, #24]	@ (801d6a8 <_close_r+0x1c>)
 801d690:	2300      	movs	r3, #0
 801d692:	4604      	mov	r4, r0
 801d694:	4608      	mov	r0, r1
 801d696:	602b      	str	r3, [r5, #0]
 801d698:	f7e4 f8d4 	bl	8001844 <_close>
 801d69c:	1c43      	adds	r3, r0, #1
 801d69e:	d102      	bne.n	801d6a6 <_close_r+0x1a>
 801d6a0:	682b      	ldr	r3, [r5, #0]
 801d6a2:	b103      	cbz	r3, 801d6a6 <_close_r+0x1a>
 801d6a4:	6023      	str	r3, [r4, #0]
 801d6a6:	bd38      	pop	{r3, r4, r5, pc}
 801d6a8:	2400cf04 	.word	0x2400cf04

0801d6ac <_reclaim_reent>:
 801d6ac:	4b29      	ldr	r3, [pc, #164]	@ (801d754 <_reclaim_reent+0xa8>)
 801d6ae:	681b      	ldr	r3, [r3, #0]
 801d6b0:	4283      	cmp	r3, r0
 801d6b2:	b570      	push	{r4, r5, r6, lr}
 801d6b4:	4604      	mov	r4, r0
 801d6b6:	d04b      	beq.n	801d750 <_reclaim_reent+0xa4>
 801d6b8:	69c3      	ldr	r3, [r0, #28]
 801d6ba:	b1ab      	cbz	r3, 801d6e8 <_reclaim_reent+0x3c>
 801d6bc:	68db      	ldr	r3, [r3, #12]
 801d6be:	b16b      	cbz	r3, 801d6dc <_reclaim_reent+0x30>
 801d6c0:	2500      	movs	r5, #0
 801d6c2:	69e3      	ldr	r3, [r4, #28]
 801d6c4:	68db      	ldr	r3, [r3, #12]
 801d6c6:	5959      	ldr	r1, [r3, r5]
 801d6c8:	2900      	cmp	r1, #0
 801d6ca:	d13b      	bne.n	801d744 <_reclaim_reent+0x98>
 801d6cc:	3504      	adds	r5, #4
 801d6ce:	2d80      	cmp	r5, #128	@ 0x80
 801d6d0:	d1f7      	bne.n	801d6c2 <_reclaim_reent+0x16>
 801d6d2:	69e3      	ldr	r3, [r4, #28]
 801d6d4:	4620      	mov	r0, r4
 801d6d6:	68d9      	ldr	r1, [r3, #12]
 801d6d8:	f000 fea8 	bl	801e42c <_free_r>
 801d6dc:	69e3      	ldr	r3, [r4, #28]
 801d6de:	6819      	ldr	r1, [r3, #0]
 801d6e0:	b111      	cbz	r1, 801d6e8 <_reclaim_reent+0x3c>
 801d6e2:	4620      	mov	r0, r4
 801d6e4:	f000 fea2 	bl	801e42c <_free_r>
 801d6e8:	6961      	ldr	r1, [r4, #20]
 801d6ea:	b111      	cbz	r1, 801d6f2 <_reclaim_reent+0x46>
 801d6ec:	4620      	mov	r0, r4
 801d6ee:	f000 fe9d 	bl	801e42c <_free_r>
 801d6f2:	69e1      	ldr	r1, [r4, #28]
 801d6f4:	b111      	cbz	r1, 801d6fc <_reclaim_reent+0x50>
 801d6f6:	4620      	mov	r0, r4
 801d6f8:	f000 fe98 	bl	801e42c <_free_r>
 801d6fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d6fe:	b111      	cbz	r1, 801d706 <_reclaim_reent+0x5a>
 801d700:	4620      	mov	r0, r4
 801d702:	f000 fe93 	bl	801e42c <_free_r>
 801d706:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d708:	b111      	cbz	r1, 801d710 <_reclaim_reent+0x64>
 801d70a:	4620      	mov	r0, r4
 801d70c:	f000 fe8e 	bl	801e42c <_free_r>
 801d710:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801d712:	b111      	cbz	r1, 801d71a <_reclaim_reent+0x6e>
 801d714:	4620      	mov	r0, r4
 801d716:	f000 fe89 	bl	801e42c <_free_r>
 801d71a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801d71c:	b111      	cbz	r1, 801d724 <_reclaim_reent+0x78>
 801d71e:	4620      	mov	r0, r4
 801d720:	f000 fe84 	bl	801e42c <_free_r>
 801d724:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801d726:	b111      	cbz	r1, 801d72e <_reclaim_reent+0x82>
 801d728:	4620      	mov	r0, r4
 801d72a:	f000 fe7f 	bl	801e42c <_free_r>
 801d72e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801d730:	b111      	cbz	r1, 801d738 <_reclaim_reent+0x8c>
 801d732:	4620      	mov	r0, r4
 801d734:	f000 fe7a 	bl	801e42c <_free_r>
 801d738:	6a23      	ldr	r3, [r4, #32]
 801d73a:	b14b      	cbz	r3, 801d750 <_reclaim_reent+0xa4>
 801d73c:	4620      	mov	r0, r4
 801d73e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d742:	4718      	bx	r3
 801d744:	680e      	ldr	r6, [r1, #0]
 801d746:	4620      	mov	r0, r4
 801d748:	f000 fe70 	bl	801e42c <_free_r>
 801d74c:	4631      	mov	r1, r6
 801d74e:	e7bb      	b.n	801d6c8 <_reclaim_reent+0x1c>
 801d750:	bd70      	pop	{r4, r5, r6, pc}
 801d752:	bf00      	nop
 801d754:	24000044 	.word	0x24000044

0801d758 <_lseek_r>:
 801d758:	b538      	push	{r3, r4, r5, lr}
 801d75a:	4d07      	ldr	r5, [pc, #28]	@ (801d778 <_lseek_r+0x20>)
 801d75c:	4604      	mov	r4, r0
 801d75e:	4608      	mov	r0, r1
 801d760:	4611      	mov	r1, r2
 801d762:	2200      	movs	r2, #0
 801d764:	602a      	str	r2, [r5, #0]
 801d766:	461a      	mov	r2, r3
 801d768:	f7e4 f893 	bl	8001892 <_lseek>
 801d76c:	1c43      	adds	r3, r0, #1
 801d76e:	d102      	bne.n	801d776 <_lseek_r+0x1e>
 801d770:	682b      	ldr	r3, [r5, #0]
 801d772:	b103      	cbz	r3, 801d776 <_lseek_r+0x1e>
 801d774:	6023      	str	r3, [r4, #0]
 801d776:	bd38      	pop	{r3, r4, r5, pc}
 801d778:	2400cf04 	.word	0x2400cf04

0801d77c <_read_r>:
 801d77c:	b538      	push	{r3, r4, r5, lr}
 801d77e:	4d07      	ldr	r5, [pc, #28]	@ (801d79c <_read_r+0x20>)
 801d780:	4604      	mov	r4, r0
 801d782:	4608      	mov	r0, r1
 801d784:	4611      	mov	r1, r2
 801d786:	2200      	movs	r2, #0
 801d788:	602a      	str	r2, [r5, #0]
 801d78a:	461a      	mov	r2, r3
 801d78c:	f7e4 f83d 	bl	800180a <_read>
 801d790:	1c43      	adds	r3, r0, #1
 801d792:	d102      	bne.n	801d79a <_read_r+0x1e>
 801d794:	682b      	ldr	r3, [r5, #0]
 801d796:	b103      	cbz	r3, 801d79a <_read_r+0x1e>
 801d798:	6023      	str	r3, [r4, #0]
 801d79a:	bd38      	pop	{r3, r4, r5, pc}
 801d79c:	2400cf04 	.word	0x2400cf04

0801d7a0 <_write_r>:
 801d7a0:	b538      	push	{r3, r4, r5, lr}
 801d7a2:	4d07      	ldr	r5, [pc, #28]	@ (801d7c0 <_write_r+0x20>)
 801d7a4:	4604      	mov	r4, r0
 801d7a6:	4608      	mov	r0, r1
 801d7a8:	4611      	mov	r1, r2
 801d7aa:	2200      	movs	r2, #0
 801d7ac:	602a      	str	r2, [r5, #0]
 801d7ae:	461a      	mov	r2, r3
 801d7b0:	f7e3 f8da 	bl	8000968 <_write>
 801d7b4:	1c43      	adds	r3, r0, #1
 801d7b6:	d102      	bne.n	801d7be <_write_r+0x1e>
 801d7b8:	682b      	ldr	r3, [r5, #0]
 801d7ba:	b103      	cbz	r3, 801d7be <_write_r+0x1e>
 801d7bc:	6023      	str	r3, [r4, #0]
 801d7be:	bd38      	pop	{r3, r4, r5, pc}
 801d7c0:	2400cf04 	.word	0x2400cf04

0801d7c4 <__libc_init_array>:
 801d7c4:	b570      	push	{r4, r5, r6, lr}
 801d7c6:	4d0d      	ldr	r5, [pc, #52]	@ (801d7fc <__libc_init_array+0x38>)
 801d7c8:	4c0d      	ldr	r4, [pc, #52]	@ (801d800 <__libc_init_array+0x3c>)
 801d7ca:	1b64      	subs	r4, r4, r5
 801d7cc:	10a4      	asrs	r4, r4, #2
 801d7ce:	2600      	movs	r6, #0
 801d7d0:	42a6      	cmp	r6, r4
 801d7d2:	d109      	bne.n	801d7e8 <__libc_init_array+0x24>
 801d7d4:	4d0b      	ldr	r5, [pc, #44]	@ (801d804 <__libc_init_array+0x40>)
 801d7d6:	4c0c      	ldr	r4, [pc, #48]	@ (801d808 <__libc_init_array+0x44>)
 801d7d8:	f001 fdbc 	bl	801f354 <_init>
 801d7dc:	1b64      	subs	r4, r4, r5
 801d7de:	10a4      	asrs	r4, r4, #2
 801d7e0:	2600      	movs	r6, #0
 801d7e2:	42a6      	cmp	r6, r4
 801d7e4:	d105      	bne.n	801d7f2 <__libc_init_array+0x2e>
 801d7e6:	bd70      	pop	{r4, r5, r6, pc}
 801d7e8:	f855 3b04 	ldr.w	r3, [r5], #4
 801d7ec:	4798      	blx	r3
 801d7ee:	3601      	adds	r6, #1
 801d7f0:	e7ee      	b.n	801d7d0 <__libc_init_array+0xc>
 801d7f2:	f855 3b04 	ldr.w	r3, [r5], #4
 801d7f6:	4798      	blx	r3
 801d7f8:	3601      	adds	r6, #1
 801d7fa:	e7f2      	b.n	801d7e2 <__libc_init_array+0x1e>
 801d7fc:	080229fc 	.word	0x080229fc
 801d800:	080229fc 	.word	0x080229fc
 801d804:	080229fc 	.word	0x080229fc
 801d808:	08022a00 	.word	0x08022a00

0801d80c <__retarget_lock_init_recursive>:
 801d80c:	4770      	bx	lr

0801d80e <__retarget_lock_acquire_recursive>:
 801d80e:	4770      	bx	lr

0801d810 <__retarget_lock_release_recursive>:
 801d810:	4770      	bx	lr

0801d812 <memcpy>:
 801d812:	440a      	add	r2, r1
 801d814:	4291      	cmp	r1, r2
 801d816:	f100 33ff 	add.w	r3, r0, #4294967295
 801d81a:	d100      	bne.n	801d81e <memcpy+0xc>
 801d81c:	4770      	bx	lr
 801d81e:	b510      	push	{r4, lr}
 801d820:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d824:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d828:	4291      	cmp	r1, r2
 801d82a:	d1f9      	bne.n	801d820 <memcpy+0xe>
 801d82c:	bd10      	pop	{r4, pc}
	...

0801d830 <__assert_func>:
 801d830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d832:	4614      	mov	r4, r2
 801d834:	461a      	mov	r2, r3
 801d836:	4b09      	ldr	r3, [pc, #36]	@ (801d85c <__assert_func+0x2c>)
 801d838:	681b      	ldr	r3, [r3, #0]
 801d83a:	4605      	mov	r5, r0
 801d83c:	68d8      	ldr	r0, [r3, #12]
 801d83e:	b954      	cbnz	r4, 801d856 <__assert_func+0x26>
 801d840:	4b07      	ldr	r3, [pc, #28]	@ (801d860 <__assert_func+0x30>)
 801d842:	461c      	mov	r4, r3
 801d844:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d848:	9100      	str	r1, [sp, #0]
 801d84a:	462b      	mov	r3, r5
 801d84c:	4905      	ldr	r1, [pc, #20]	@ (801d864 <__assert_func+0x34>)
 801d84e:	f001 fc5d 	bl	801f10c <fiprintf>
 801d852:	f001 fd01 	bl	801f258 <abort>
 801d856:	4b04      	ldr	r3, [pc, #16]	@ (801d868 <__assert_func+0x38>)
 801d858:	e7f4      	b.n	801d844 <__assert_func+0x14>
 801d85a:	bf00      	nop
 801d85c:	24000044 	.word	0x24000044
 801d860:	08022805 	.word	0x08022805
 801d864:	080227d7 	.word	0x080227d7
 801d868:	080227ca 	.word	0x080227ca

0801d86c <quorem>:
 801d86c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d870:	6903      	ldr	r3, [r0, #16]
 801d872:	690c      	ldr	r4, [r1, #16]
 801d874:	42a3      	cmp	r3, r4
 801d876:	4607      	mov	r7, r0
 801d878:	db7e      	blt.n	801d978 <quorem+0x10c>
 801d87a:	3c01      	subs	r4, #1
 801d87c:	f101 0814 	add.w	r8, r1, #20
 801d880:	00a3      	lsls	r3, r4, #2
 801d882:	f100 0514 	add.w	r5, r0, #20
 801d886:	9300      	str	r3, [sp, #0]
 801d888:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d88c:	9301      	str	r3, [sp, #4]
 801d88e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d892:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d896:	3301      	adds	r3, #1
 801d898:	429a      	cmp	r2, r3
 801d89a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d89e:	fbb2 f6f3 	udiv	r6, r2, r3
 801d8a2:	d32e      	bcc.n	801d902 <quorem+0x96>
 801d8a4:	f04f 0a00 	mov.w	sl, #0
 801d8a8:	46c4      	mov	ip, r8
 801d8aa:	46ae      	mov	lr, r5
 801d8ac:	46d3      	mov	fp, sl
 801d8ae:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d8b2:	b298      	uxth	r0, r3
 801d8b4:	fb06 a000 	mla	r0, r6, r0, sl
 801d8b8:	0c02      	lsrs	r2, r0, #16
 801d8ba:	0c1b      	lsrs	r3, r3, #16
 801d8bc:	fb06 2303 	mla	r3, r6, r3, r2
 801d8c0:	f8de 2000 	ldr.w	r2, [lr]
 801d8c4:	b280      	uxth	r0, r0
 801d8c6:	b292      	uxth	r2, r2
 801d8c8:	1a12      	subs	r2, r2, r0
 801d8ca:	445a      	add	r2, fp
 801d8cc:	f8de 0000 	ldr.w	r0, [lr]
 801d8d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d8d4:	b29b      	uxth	r3, r3
 801d8d6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801d8da:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801d8de:	b292      	uxth	r2, r2
 801d8e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801d8e4:	45e1      	cmp	r9, ip
 801d8e6:	f84e 2b04 	str.w	r2, [lr], #4
 801d8ea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801d8ee:	d2de      	bcs.n	801d8ae <quorem+0x42>
 801d8f0:	9b00      	ldr	r3, [sp, #0]
 801d8f2:	58eb      	ldr	r3, [r5, r3]
 801d8f4:	b92b      	cbnz	r3, 801d902 <quorem+0x96>
 801d8f6:	9b01      	ldr	r3, [sp, #4]
 801d8f8:	3b04      	subs	r3, #4
 801d8fa:	429d      	cmp	r5, r3
 801d8fc:	461a      	mov	r2, r3
 801d8fe:	d32f      	bcc.n	801d960 <quorem+0xf4>
 801d900:	613c      	str	r4, [r7, #16]
 801d902:	4638      	mov	r0, r7
 801d904:	f001 f90c 	bl	801eb20 <__mcmp>
 801d908:	2800      	cmp	r0, #0
 801d90a:	db25      	blt.n	801d958 <quorem+0xec>
 801d90c:	4629      	mov	r1, r5
 801d90e:	2000      	movs	r0, #0
 801d910:	f858 2b04 	ldr.w	r2, [r8], #4
 801d914:	f8d1 c000 	ldr.w	ip, [r1]
 801d918:	fa1f fe82 	uxth.w	lr, r2
 801d91c:	fa1f f38c 	uxth.w	r3, ip
 801d920:	eba3 030e 	sub.w	r3, r3, lr
 801d924:	4403      	add	r3, r0
 801d926:	0c12      	lsrs	r2, r2, #16
 801d928:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801d92c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801d930:	b29b      	uxth	r3, r3
 801d932:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d936:	45c1      	cmp	r9, r8
 801d938:	f841 3b04 	str.w	r3, [r1], #4
 801d93c:	ea4f 4022 	mov.w	r0, r2, asr #16
 801d940:	d2e6      	bcs.n	801d910 <quorem+0xa4>
 801d942:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d946:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d94a:	b922      	cbnz	r2, 801d956 <quorem+0xea>
 801d94c:	3b04      	subs	r3, #4
 801d94e:	429d      	cmp	r5, r3
 801d950:	461a      	mov	r2, r3
 801d952:	d30b      	bcc.n	801d96c <quorem+0x100>
 801d954:	613c      	str	r4, [r7, #16]
 801d956:	3601      	adds	r6, #1
 801d958:	4630      	mov	r0, r6
 801d95a:	b003      	add	sp, #12
 801d95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d960:	6812      	ldr	r2, [r2, #0]
 801d962:	3b04      	subs	r3, #4
 801d964:	2a00      	cmp	r2, #0
 801d966:	d1cb      	bne.n	801d900 <quorem+0x94>
 801d968:	3c01      	subs	r4, #1
 801d96a:	e7c6      	b.n	801d8fa <quorem+0x8e>
 801d96c:	6812      	ldr	r2, [r2, #0]
 801d96e:	3b04      	subs	r3, #4
 801d970:	2a00      	cmp	r2, #0
 801d972:	d1ef      	bne.n	801d954 <quorem+0xe8>
 801d974:	3c01      	subs	r4, #1
 801d976:	e7ea      	b.n	801d94e <quorem+0xe2>
 801d978:	2000      	movs	r0, #0
 801d97a:	e7ee      	b.n	801d95a <quorem+0xee>
 801d97c:	0000      	movs	r0, r0
	...

0801d980 <_dtoa_r>:
 801d980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d984:	ed2d 8b02 	vpush	{d8}
 801d988:	69c7      	ldr	r7, [r0, #28]
 801d98a:	b091      	sub	sp, #68	@ 0x44
 801d98c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801d990:	ec55 4b10 	vmov	r4, r5, d0
 801d994:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801d996:	9107      	str	r1, [sp, #28]
 801d998:	4681      	mov	r9, r0
 801d99a:	9209      	str	r2, [sp, #36]	@ 0x24
 801d99c:	930d      	str	r3, [sp, #52]	@ 0x34
 801d99e:	b97f      	cbnz	r7, 801d9c0 <_dtoa_r+0x40>
 801d9a0:	2010      	movs	r0, #16
 801d9a2:	f000 fd8d 	bl	801e4c0 <malloc>
 801d9a6:	4602      	mov	r2, r0
 801d9a8:	f8c9 001c 	str.w	r0, [r9, #28]
 801d9ac:	b920      	cbnz	r0, 801d9b8 <_dtoa_r+0x38>
 801d9ae:	4ba0      	ldr	r3, [pc, #640]	@ (801dc30 <_dtoa_r+0x2b0>)
 801d9b0:	21ef      	movs	r1, #239	@ 0xef
 801d9b2:	48a0      	ldr	r0, [pc, #640]	@ (801dc34 <_dtoa_r+0x2b4>)
 801d9b4:	f7ff ff3c 	bl	801d830 <__assert_func>
 801d9b8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801d9bc:	6007      	str	r7, [r0, #0]
 801d9be:	60c7      	str	r7, [r0, #12]
 801d9c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801d9c4:	6819      	ldr	r1, [r3, #0]
 801d9c6:	b159      	cbz	r1, 801d9e0 <_dtoa_r+0x60>
 801d9c8:	685a      	ldr	r2, [r3, #4]
 801d9ca:	604a      	str	r2, [r1, #4]
 801d9cc:	2301      	movs	r3, #1
 801d9ce:	4093      	lsls	r3, r2
 801d9d0:	608b      	str	r3, [r1, #8]
 801d9d2:	4648      	mov	r0, r9
 801d9d4:	f000 fe6a 	bl	801e6ac <_Bfree>
 801d9d8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801d9dc:	2200      	movs	r2, #0
 801d9de:	601a      	str	r2, [r3, #0]
 801d9e0:	1e2b      	subs	r3, r5, #0
 801d9e2:	bfbb      	ittet	lt
 801d9e4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801d9e8:	9303      	strlt	r3, [sp, #12]
 801d9ea:	2300      	movge	r3, #0
 801d9ec:	2201      	movlt	r2, #1
 801d9ee:	bfac      	ite	ge
 801d9f0:	6033      	strge	r3, [r6, #0]
 801d9f2:	6032      	strlt	r2, [r6, #0]
 801d9f4:	4b90      	ldr	r3, [pc, #576]	@ (801dc38 <_dtoa_r+0x2b8>)
 801d9f6:	9e03      	ldr	r6, [sp, #12]
 801d9f8:	43b3      	bics	r3, r6
 801d9fa:	d110      	bne.n	801da1e <_dtoa_r+0x9e>
 801d9fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d9fe:	f242 730f 	movw	r3, #9999	@ 0x270f
 801da02:	6013      	str	r3, [r2, #0]
 801da04:	f3c6 0313 	ubfx	r3, r6, #0, #20
 801da08:	4323      	orrs	r3, r4
 801da0a:	f000 84de 	beq.w	801e3ca <_dtoa_r+0xa4a>
 801da0e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801da10:	4f8a      	ldr	r7, [pc, #552]	@ (801dc3c <_dtoa_r+0x2bc>)
 801da12:	2b00      	cmp	r3, #0
 801da14:	f000 84e0 	beq.w	801e3d8 <_dtoa_r+0xa58>
 801da18:	1cfb      	adds	r3, r7, #3
 801da1a:	f000 bcdb 	b.w	801e3d4 <_dtoa_r+0xa54>
 801da1e:	ed9d 8b02 	vldr	d8, [sp, #8]
 801da22:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801da26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da2a:	d10a      	bne.n	801da42 <_dtoa_r+0xc2>
 801da2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801da2e:	2301      	movs	r3, #1
 801da30:	6013      	str	r3, [r2, #0]
 801da32:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801da34:	b113      	cbz	r3, 801da3c <_dtoa_r+0xbc>
 801da36:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801da38:	4b81      	ldr	r3, [pc, #516]	@ (801dc40 <_dtoa_r+0x2c0>)
 801da3a:	6013      	str	r3, [r2, #0]
 801da3c:	4f81      	ldr	r7, [pc, #516]	@ (801dc44 <_dtoa_r+0x2c4>)
 801da3e:	f000 bccb 	b.w	801e3d8 <_dtoa_r+0xa58>
 801da42:	aa0e      	add	r2, sp, #56	@ 0x38
 801da44:	a90f      	add	r1, sp, #60	@ 0x3c
 801da46:	4648      	mov	r0, r9
 801da48:	eeb0 0b48 	vmov.f64	d0, d8
 801da4c:	f001 f918 	bl	801ec80 <__d2b>
 801da50:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801da54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801da56:	9001      	str	r0, [sp, #4]
 801da58:	2b00      	cmp	r3, #0
 801da5a:	d045      	beq.n	801dae8 <_dtoa_r+0x168>
 801da5c:	eeb0 7b48 	vmov.f64	d7, d8
 801da60:	ee18 1a90 	vmov	r1, s17
 801da64:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801da68:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801da6c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801da70:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801da74:	2500      	movs	r5, #0
 801da76:	ee07 1a90 	vmov	s15, r1
 801da7a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801da7e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801dc18 <_dtoa_r+0x298>
 801da82:	ee37 7b46 	vsub.f64	d7, d7, d6
 801da86:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801dc20 <_dtoa_r+0x2a0>
 801da8a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801da8e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801dc28 <_dtoa_r+0x2a8>
 801da92:	ee07 3a90 	vmov	s15, r3
 801da96:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801da9a:	eeb0 7b46 	vmov.f64	d7, d6
 801da9e:	eea4 7b05 	vfma.f64	d7, d4, d5
 801daa2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801daa6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801daaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801daae:	ee16 8a90 	vmov	r8, s13
 801dab2:	d508      	bpl.n	801dac6 <_dtoa_r+0x146>
 801dab4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801dab8:	eeb4 6b47 	vcmp.f64	d6, d7
 801dabc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dac0:	bf18      	it	ne
 801dac2:	f108 38ff 	addne.w	r8, r8, #4294967295
 801dac6:	f1b8 0f16 	cmp.w	r8, #22
 801daca:	d82b      	bhi.n	801db24 <_dtoa_r+0x1a4>
 801dacc:	495e      	ldr	r1, [pc, #376]	@ (801dc48 <_dtoa_r+0x2c8>)
 801dace:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801dad2:	ed91 7b00 	vldr	d7, [r1]
 801dad6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801dada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dade:	d501      	bpl.n	801dae4 <_dtoa_r+0x164>
 801dae0:	f108 38ff 	add.w	r8, r8, #4294967295
 801dae4:	2100      	movs	r1, #0
 801dae6:	e01e      	b.n	801db26 <_dtoa_r+0x1a6>
 801dae8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801daea:	4413      	add	r3, r2
 801daec:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801daf0:	2920      	cmp	r1, #32
 801daf2:	bfc1      	itttt	gt
 801daf4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801daf8:	408e      	lslgt	r6, r1
 801dafa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801dafe:	fa24 f101 	lsrgt.w	r1, r4, r1
 801db02:	bfd6      	itet	le
 801db04:	f1c1 0120 	rsble	r1, r1, #32
 801db08:	4331      	orrgt	r1, r6
 801db0a:	fa04 f101 	lslle.w	r1, r4, r1
 801db0e:	ee07 1a90 	vmov	s15, r1
 801db12:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801db16:	3b01      	subs	r3, #1
 801db18:	ee17 1a90 	vmov	r1, s15
 801db1c:	2501      	movs	r5, #1
 801db1e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801db22:	e7a8      	b.n	801da76 <_dtoa_r+0xf6>
 801db24:	2101      	movs	r1, #1
 801db26:	1ad2      	subs	r2, r2, r3
 801db28:	1e53      	subs	r3, r2, #1
 801db2a:	9306      	str	r3, [sp, #24]
 801db2c:	bf45      	ittet	mi
 801db2e:	f1c2 0301 	rsbmi	r3, r2, #1
 801db32:	9305      	strmi	r3, [sp, #20]
 801db34:	2300      	movpl	r3, #0
 801db36:	2300      	movmi	r3, #0
 801db38:	bf4c      	ite	mi
 801db3a:	9306      	strmi	r3, [sp, #24]
 801db3c:	9305      	strpl	r3, [sp, #20]
 801db3e:	f1b8 0f00 	cmp.w	r8, #0
 801db42:	910c      	str	r1, [sp, #48]	@ 0x30
 801db44:	db18      	blt.n	801db78 <_dtoa_r+0x1f8>
 801db46:	9b06      	ldr	r3, [sp, #24]
 801db48:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801db4c:	4443      	add	r3, r8
 801db4e:	9306      	str	r3, [sp, #24]
 801db50:	2300      	movs	r3, #0
 801db52:	9a07      	ldr	r2, [sp, #28]
 801db54:	2a09      	cmp	r2, #9
 801db56:	d849      	bhi.n	801dbec <_dtoa_r+0x26c>
 801db58:	2a05      	cmp	r2, #5
 801db5a:	bfc4      	itt	gt
 801db5c:	3a04      	subgt	r2, #4
 801db5e:	9207      	strgt	r2, [sp, #28]
 801db60:	9a07      	ldr	r2, [sp, #28]
 801db62:	f1a2 0202 	sub.w	r2, r2, #2
 801db66:	bfcc      	ite	gt
 801db68:	2400      	movgt	r4, #0
 801db6a:	2401      	movle	r4, #1
 801db6c:	2a03      	cmp	r2, #3
 801db6e:	d848      	bhi.n	801dc02 <_dtoa_r+0x282>
 801db70:	e8df f002 	tbb	[pc, r2]
 801db74:	3a2c2e0b 	.word	0x3a2c2e0b
 801db78:	9b05      	ldr	r3, [sp, #20]
 801db7a:	2200      	movs	r2, #0
 801db7c:	eba3 0308 	sub.w	r3, r3, r8
 801db80:	9305      	str	r3, [sp, #20]
 801db82:	920a      	str	r2, [sp, #40]	@ 0x28
 801db84:	f1c8 0300 	rsb	r3, r8, #0
 801db88:	e7e3      	b.n	801db52 <_dtoa_r+0x1d2>
 801db8a:	2200      	movs	r2, #0
 801db8c:	9208      	str	r2, [sp, #32]
 801db8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801db90:	2a00      	cmp	r2, #0
 801db92:	dc39      	bgt.n	801dc08 <_dtoa_r+0x288>
 801db94:	f04f 0b01 	mov.w	fp, #1
 801db98:	46da      	mov	sl, fp
 801db9a:	465a      	mov	r2, fp
 801db9c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801dba0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801dba4:	2100      	movs	r1, #0
 801dba6:	2004      	movs	r0, #4
 801dba8:	f100 0614 	add.w	r6, r0, #20
 801dbac:	4296      	cmp	r6, r2
 801dbae:	d930      	bls.n	801dc12 <_dtoa_r+0x292>
 801dbb0:	6079      	str	r1, [r7, #4]
 801dbb2:	4648      	mov	r0, r9
 801dbb4:	9304      	str	r3, [sp, #16]
 801dbb6:	f000 fd39 	bl	801e62c <_Balloc>
 801dbba:	9b04      	ldr	r3, [sp, #16]
 801dbbc:	4607      	mov	r7, r0
 801dbbe:	2800      	cmp	r0, #0
 801dbc0:	d146      	bne.n	801dc50 <_dtoa_r+0x2d0>
 801dbc2:	4b22      	ldr	r3, [pc, #136]	@ (801dc4c <_dtoa_r+0x2cc>)
 801dbc4:	4602      	mov	r2, r0
 801dbc6:	f240 11af 	movw	r1, #431	@ 0x1af
 801dbca:	e6f2      	b.n	801d9b2 <_dtoa_r+0x32>
 801dbcc:	2201      	movs	r2, #1
 801dbce:	e7dd      	b.n	801db8c <_dtoa_r+0x20c>
 801dbd0:	2200      	movs	r2, #0
 801dbd2:	9208      	str	r2, [sp, #32]
 801dbd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dbd6:	eb08 0b02 	add.w	fp, r8, r2
 801dbda:	f10b 0a01 	add.w	sl, fp, #1
 801dbde:	4652      	mov	r2, sl
 801dbe0:	2a01      	cmp	r2, #1
 801dbe2:	bfb8      	it	lt
 801dbe4:	2201      	movlt	r2, #1
 801dbe6:	e7db      	b.n	801dba0 <_dtoa_r+0x220>
 801dbe8:	2201      	movs	r2, #1
 801dbea:	e7f2      	b.n	801dbd2 <_dtoa_r+0x252>
 801dbec:	2401      	movs	r4, #1
 801dbee:	2200      	movs	r2, #0
 801dbf0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801dbf4:	f04f 3bff 	mov.w	fp, #4294967295
 801dbf8:	2100      	movs	r1, #0
 801dbfa:	46da      	mov	sl, fp
 801dbfc:	2212      	movs	r2, #18
 801dbfe:	9109      	str	r1, [sp, #36]	@ 0x24
 801dc00:	e7ce      	b.n	801dba0 <_dtoa_r+0x220>
 801dc02:	2201      	movs	r2, #1
 801dc04:	9208      	str	r2, [sp, #32]
 801dc06:	e7f5      	b.n	801dbf4 <_dtoa_r+0x274>
 801dc08:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801dc0c:	46da      	mov	sl, fp
 801dc0e:	465a      	mov	r2, fp
 801dc10:	e7c6      	b.n	801dba0 <_dtoa_r+0x220>
 801dc12:	3101      	adds	r1, #1
 801dc14:	0040      	lsls	r0, r0, #1
 801dc16:	e7c7      	b.n	801dba8 <_dtoa_r+0x228>
 801dc18:	636f4361 	.word	0x636f4361
 801dc1c:	3fd287a7 	.word	0x3fd287a7
 801dc20:	8b60c8b3 	.word	0x8b60c8b3
 801dc24:	3fc68a28 	.word	0x3fc68a28
 801dc28:	509f79fb 	.word	0x509f79fb
 801dc2c:	3fd34413 	.word	0x3fd34413
 801dc30:	08022626 	.word	0x08022626
 801dc34:	08022813 	.word	0x08022813
 801dc38:	7ff00000 	.word	0x7ff00000
 801dc3c:	0802280f 	.word	0x0802280f
 801dc40:	080227a7 	.word	0x080227a7
 801dc44:	080227a6 	.word	0x080227a6
 801dc48:	08022910 	.word	0x08022910
 801dc4c:	0802286b 	.word	0x0802286b
 801dc50:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801dc54:	f1ba 0f0e 	cmp.w	sl, #14
 801dc58:	6010      	str	r0, [r2, #0]
 801dc5a:	d86f      	bhi.n	801dd3c <_dtoa_r+0x3bc>
 801dc5c:	2c00      	cmp	r4, #0
 801dc5e:	d06d      	beq.n	801dd3c <_dtoa_r+0x3bc>
 801dc60:	f1b8 0f00 	cmp.w	r8, #0
 801dc64:	f340 80c2 	ble.w	801ddec <_dtoa_r+0x46c>
 801dc68:	4aca      	ldr	r2, [pc, #808]	@ (801df94 <_dtoa_r+0x614>)
 801dc6a:	f008 010f 	and.w	r1, r8, #15
 801dc6e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801dc72:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801dc76:	ed92 7b00 	vldr	d7, [r2]
 801dc7a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801dc7e:	f000 80a9 	beq.w	801ddd4 <_dtoa_r+0x454>
 801dc82:	4ac5      	ldr	r2, [pc, #788]	@ (801df98 <_dtoa_r+0x618>)
 801dc84:	ed92 6b08 	vldr	d6, [r2, #32]
 801dc88:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801dc8c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801dc90:	f001 010f 	and.w	r1, r1, #15
 801dc94:	2203      	movs	r2, #3
 801dc96:	48c0      	ldr	r0, [pc, #768]	@ (801df98 <_dtoa_r+0x618>)
 801dc98:	2900      	cmp	r1, #0
 801dc9a:	f040 809d 	bne.w	801ddd8 <_dtoa_r+0x458>
 801dc9e:	ed9d 6b02 	vldr	d6, [sp, #8]
 801dca2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801dca6:	ed8d 7b02 	vstr	d7, [sp, #8]
 801dcaa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801dcac:	ed9d 7b02 	vldr	d7, [sp, #8]
 801dcb0:	2900      	cmp	r1, #0
 801dcb2:	f000 80c1 	beq.w	801de38 <_dtoa_r+0x4b8>
 801dcb6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801dcba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801dcbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dcc2:	f140 80b9 	bpl.w	801de38 <_dtoa_r+0x4b8>
 801dcc6:	f1ba 0f00 	cmp.w	sl, #0
 801dcca:	f000 80b5 	beq.w	801de38 <_dtoa_r+0x4b8>
 801dcce:	f1bb 0f00 	cmp.w	fp, #0
 801dcd2:	dd31      	ble.n	801dd38 <_dtoa_r+0x3b8>
 801dcd4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801dcd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 801dcdc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801dce0:	f108 31ff 	add.w	r1, r8, #4294967295
 801dce4:	9104      	str	r1, [sp, #16]
 801dce6:	3201      	adds	r2, #1
 801dce8:	465c      	mov	r4, fp
 801dcea:	ed9d 6b02 	vldr	d6, [sp, #8]
 801dcee:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801dcf2:	ee07 2a90 	vmov	s15, r2
 801dcf6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801dcfa:	eea7 5b06 	vfma.f64	d5, d7, d6
 801dcfe:	ee15 2a90 	vmov	r2, s11
 801dd02:	ec51 0b15 	vmov	r0, r1, d5
 801dd06:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801dd0a:	2c00      	cmp	r4, #0
 801dd0c:	f040 8098 	bne.w	801de40 <_dtoa_r+0x4c0>
 801dd10:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801dd14:	ee36 6b47 	vsub.f64	d6, d6, d7
 801dd18:	ec41 0b17 	vmov	d7, r0, r1
 801dd1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801dd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd24:	f300 8261 	bgt.w	801e1ea <_dtoa_r+0x86a>
 801dd28:	eeb1 7b47 	vneg.f64	d7, d7
 801dd2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801dd30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd34:	f100 80f5 	bmi.w	801df22 <_dtoa_r+0x5a2>
 801dd38:	ed8d 8b02 	vstr	d8, [sp, #8]
 801dd3c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801dd3e:	2a00      	cmp	r2, #0
 801dd40:	f2c0 812c 	blt.w	801df9c <_dtoa_r+0x61c>
 801dd44:	f1b8 0f0e 	cmp.w	r8, #14
 801dd48:	f300 8128 	bgt.w	801df9c <_dtoa_r+0x61c>
 801dd4c:	4b91      	ldr	r3, [pc, #580]	@ (801df94 <_dtoa_r+0x614>)
 801dd4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801dd52:	ed93 6b00 	vldr	d6, [r3]
 801dd56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd58:	2b00      	cmp	r3, #0
 801dd5a:	da03      	bge.n	801dd64 <_dtoa_r+0x3e4>
 801dd5c:	f1ba 0f00 	cmp.w	sl, #0
 801dd60:	f340 80d2 	ble.w	801df08 <_dtoa_r+0x588>
 801dd64:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801dd68:	ed9d 7b02 	vldr	d7, [sp, #8]
 801dd6c:	463e      	mov	r6, r7
 801dd6e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801dd72:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801dd76:	ee15 3a10 	vmov	r3, s10
 801dd7a:	3330      	adds	r3, #48	@ 0x30
 801dd7c:	f806 3b01 	strb.w	r3, [r6], #1
 801dd80:	1bf3      	subs	r3, r6, r7
 801dd82:	459a      	cmp	sl, r3
 801dd84:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801dd88:	eea3 7b46 	vfms.f64	d7, d3, d6
 801dd8c:	f040 80f8 	bne.w	801df80 <_dtoa_r+0x600>
 801dd90:	ee37 7b07 	vadd.f64	d7, d7, d7
 801dd94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801dd98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd9c:	f300 80dd 	bgt.w	801df5a <_dtoa_r+0x5da>
 801dda0:	eeb4 7b46 	vcmp.f64	d7, d6
 801dda4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dda8:	d104      	bne.n	801ddb4 <_dtoa_r+0x434>
 801ddaa:	ee15 3a10 	vmov	r3, s10
 801ddae:	07db      	lsls	r3, r3, #31
 801ddb0:	f100 80d3 	bmi.w	801df5a <_dtoa_r+0x5da>
 801ddb4:	9901      	ldr	r1, [sp, #4]
 801ddb6:	4648      	mov	r0, r9
 801ddb8:	f000 fc78 	bl	801e6ac <_Bfree>
 801ddbc:	2300      	movs	r3, #0
 801ddbe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ddc0:	7033      	strb	r3, [r6, #0]
 801ddc2:	f108 0301 	add.w	r3, r8, #1
 801ddc6:	6013      	str	r3, [r2, #0]
 801ddc8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ddca:	2b00      	cmp	r3, #0
 801ddcc:	f000 8304 	beq.w	801e3d8 <_dtoa_r+0xa58>
 801ddd0:	601e      	str	r6, [r3, #0]
 801ddd2:	e301      	b.n	801e3d8 <_dtoa_r+0xa58>
 801ddd4:	2202      	movs	r2, #2
 801ddd6:	e75e      	b.n	801dc96 <_dtoa_r+0x316>
 801ddd8:	07cc      	lsls	r4, r1, #31
 801ddda:	d504      	bpl.n	801dde6 <_dtoa_r+0x466>
 801dddc:	ed90 6b00 	vldr	d6, [r0]
 801dde0:	3201      	adds	r2, #1
 801dde2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801dde6:	1049      	asrs	r1, r1, #1
 801dde8:	3008      	adds	r0, #8
 801ddea:	e755      	b.n	801dc98 <_dtoa_r+0x318>
 801ddec:	d022      	beq.n	801de34 <_dtoa_r+0x4b4>
 801ddee:	f1c8 0100 	rsb	r1, r8, #0
 801ddf2:	4a68      	ldr	r2, [pc, #416]	@ (801df94 <_dtoa_r+0x614>)
 801ddf4:	f001 000f 	and.w	r0, r1, #15
 801ddf8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801ddfc:	ed92 7b00 	vldr	d7, [r2]
 801de00:	ee28 7b07 	vmul.f64	d7, d8, d7
 801de04:	ed8d 7b02 	vstr	d7, [sp, #8]
 801de08:	4863      	ldr	r0, [pc, #396]	@ (801df98 <_dtoa_r+0x618>)
 801de0a:	1109      	asrs	r1, r1, #4
 801de0c:	2400      	movs	r4, #0
 801de0e:	2202      	movs	r2, #2
 801de10:	b929      	cbnz	r1, 801de1e <_dtoa_r+0x49e>
 801de12:	2c00      	cmp	r4, #0
 801de14:	f43f af49 	beq.w	801dcaa <_dtoa_r+0x32a>
 801de18:	ed8d 7b02 	vstr	d7, [sp, #8]
 801de1c:	e745      	b.n	801dcaa <_dtoa_r+0x32a>
 801de1e:	07ce      	lsls	r6, r1, #31
 801de20:	d505      	bpl.n	801de2e <_dtoa_r+0x4ae>
 801de22:	ed90 6b00 	vldr	d6, [r0]
 801de26:	3201      	adds	r2, #1
 801de28:	2401      	movs	r4, #1
 801de2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801de2e:	1049      	asrs	r1, r1, #1
 801de30:	3008      	adds	r0, #8
 801de32:	e7ed      	b.n	801de10 <_dtoa_r+0x490>
 801de34:	2202      	movs	r2, #2
 801de36:	e738      	b.n	801dcaa <_dtoa_r+0x32a>
 801de38:	f8cd 8010 	str.w	r8, [sp, #16]
 801de3c:	4654      	mov	r4, sl
 801de3e:	e754      	b.n	801dcea <_dtoa_r+0x36a>
 801de40:	4a54      	ldr	r2, [pc, #336]	@ (801df94 <_dtoa_r+0x614>)
 801de42:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801de46:	ed12 4b02 	vldr	d4, [r2, #-8]
 801de4a:	9a08      	ldr	r2, [sp, #32]
 801de4c:	ec41 0b17 	vmov	d7, r0, r1
 801de50:	443c      	add	r4, r7
 801de52:	b34a      	cbz	r2, 801dea8 <_dtoa_r+0x528>
 801de54:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801de58:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801de5c:	463e      	mov	r6, r7
 801de5e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801de62:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801de66:	ee35 7b47 	vsub.f64	d7, d5, d7
 801de6a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801de6e:	ee14 2a90 	vmov	r2, s9
 801de72:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801de76:	3230      	adds	r2, #48	@ 0x30
 801de78:	ee36 6b45 	vsub.f64	d6, d6, d5
 801de7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801de80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de84:	f806 2b01 	strb.w	r2, [r6], #1
 801de88:	d438      	bmi.n	801defc <_dtoa_r+0x57c>
 801de8a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801de8e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801de92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de96:	d462      	bmi.n	801df5e <_dtoa_r+0x5de>
 801de98:	42a6      	cmp	r6, r4
 801de9a:	f43f af4d 	beq.w	801dd38 <_dtoa_r+0x3b8>
 801de9e:	ee27 7b03 	vmul.f64	d7, d7, d3
 801dea2:	ee26 6b03 	vmul.f64	d6, d6, d3
 801dea6:	e7e0      	b.n	801de6a <_dtoa_r+0x4ea>
 801dea8:	4621      	mov	r1, r4
 801deaa:	463e      	mov	r6, r7
 801deac:	ee27 7b04 	vmul.f64	d7, d7, d4
 801deb0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801deb4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801deb8:	ee14 2a90 	vmov	r2, s9
 801debc:	3230      	adds	r2, #48	@ 0x30
 801debe:	f806 2b01 	strb.w	r2, [r6], #1
 801dec2:	42a6      	cmp	r6, r4
 801dec4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801dec8:	ee36 6b45 	vsub.f64	d6, d6, d5
 801decc:	d119      	bne.n	801df02 <_dtoa_r+0x582>
 801dece:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801ded2:	ee37 4b05 	vadd.f64	d4, d7, d5
 801ded6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801deda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dede:	dc3e      	bgt.n	801df5e <_dtoa_r+0x5de>
 801dee0:	ee35 5b47 	vsub.f64	d5, d5, d7
 801dee4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801dee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801deec:	f57f af24 	bpl.w	801dd38 <_dtoa_r+0x3b8>
 801def0:	460e      	mov	r6, r1
 801def2:	3901      	subs	r1, #1
 801def4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801def8:	2b30      	cmp	r3, #48	@ 0x30
 801defa:	d0f9      	beq.n	801def0 <_dtoa_r+0x570>
 801defc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801df00:	e758      	b.n	801ddb4 <_dtoa_r+0x434>
 801df02:	ee26 6b03 	vmul.f64	d6, d6, d3
 801df06:	e7d5      	b.n	801deb4 <_dtoa_r+0x534>
 801df08:	d10b      	bne.n	801df22 <_dtoa_r+0x5a2>
 801df0a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801df0e:	ee26 6b07 	vmul.f64	d6, d6, d7
 801df12:	ed9d 7b02 	vldr	d7, [sp, #8]
 801df16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801df1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df1e:	f2c0 8161 	blt.w	801e1e4 <_dtoa_r+0x864>
 801df22:	2400      	movs	r4, #0
 801df24:	4625      	mov	r5, r4
 801df26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df28:	43db      	mvns	r3, r3
 801df2a:	9304      	str	r3, [sp, #16]
 801df2c:	463e      	mov	r6, r7
 801df2e:	f04f 0800 	mov.w	r8, #0
 801df32:	4621      	mov	r1, r4
 801df34:	4648      	mov	r0, r9
 801df36:	f000 fbb9 	bl	801e6ac <_Bfree>
 801df3a:	2d00      	cmp	r5, #0
 801df3c:	d0de      	beq.n	801defc <_dtoa_r+0x57c>
 801df3e:	f1b8 0f00 	cmp.w	r8, #0
 801df42:	d005      	beq.n	801df50 <_dtoa_r+0x5d0>
 801df44:	45a8      	cmp	r8, r5
 801df46:	d003      	beq.n	801df50 <_dtoa_r+0x5d0>
 801df48:	4641      	mov	r1, r8
 801df4a:	4648      	mov	r0, r9
 801df4c:	f000 fbae 	bl	801e6ac <_Bfree>
 801df50:	4629      	mov	r1, r5
 801df52:	4648      	mov	r0, r9
 801df54:	f000 fbaa 	bl	801e6ac <_Bfree>
 801df58:	e7d0      	b.n	801defc <_dtoa_r+0x57c>
 801df5a:	f8cd 8010 	str.w	r8, [sp, #16]
 801df5e:	4633      	mov	r3, r6
 801df60:	461e      	mov	r6, r3
 801df62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801df66:	2a39      	cmp	r2, #57	@ 0x39
 801df68:	d106      	bne.n	801df78 <_dtoa_r+0x5f8>
 801df6a:	429f      	cmp	r7, r3
 801df6c:	d1f8      	bne.n	801df60 <_dtoa_r+0x5e0>
 801df6e:	9a04      	ldr	r2, [sp, #16]
 801df70:	3201      	adds	r2, #1
 801df72:	9204      	str	r2, [sp, #16]
 801df74:	2230      	movs	r2, #48	@ 0x30
 801df76:	703a      	strb	r2, [r7, #0]
 801df78:	781a      	ldrb	r2, [r3, #0]
 801df7a:	3201      	adds	r2, #1
 801df7c:	701a      	strb	r2, [r3, #0]
 801df7e:	e7bd      	b.n	801defc <_dtoa_r+0x57c>
 801df80:	ee27 7b04 	vmul.f64	d7, d7, d4
 801df84:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801df88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df8c:	f47f aeef 	bne.w	801dd6e <_dtoa_r+0x3ee>
 801df90:	e710      	b.n	801ddb4 <_dtoa_r+0x434>
 801df92:	bf00      	nop
 801df94:	08022910 	.word	0x08022910
 801df98:	080228e8 	.word	0x080228e8
 801df9c:	9908      	ldr	r1, [sp, #32]
 801df9e:	2900      	cmp	r1, #0
 801dfa0:	f000 80e3 	beq.w	801e16a <_dtoa_r+0x7ea>
 801dfa4:	9907      	ldr	r1, [sp, #28]
 801dfa6:	2901      	cmp	r1, #1
 801dfa8:	f300 80c8 	bgt.w	801e13c <_dtoa_r+0x7bc>
 801dfac:	2d00      	cmp	r5, #0
 801dfae:	f000 80c1 	beq.w	801e134 <_dtoa_r+0x7b4>
 801dfb2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801dfb6:	9e05      	ldr	r6, [sp, #20]
 801dfb8:	461c      	mov	r4, r3
 801dfba:	9304      	str	r3, [sp, #16]
 801dfbc:	9b05      	ldr	r3, [sp, #20]
 801dfbe:	4413      	add	r3, r2
 801dfc0:	9305      	str	r3, [sp, #20]
 801dfc2:	9b06      	ldr	r3, [sp, #24]
 801dfc4:	2101      	movs	r1, #1
 801dfc6:	4413      	add	r3, r2
 801dfc8:	4648      	mov	r0, r9
 801dfca:	9306      	str	r3, [sp, #24]
 801dfcc:	f000 fc22 	bl	801e814 <__i2b>
 801dfd0:	9b04      	ldr	r3, [sp, #16]
 801dfd2:	4605      	mov	r5, r0
 801dfd4:	b166      	cbz	r6, 801dff0 <_dtoa_r+0x670>
 801dfd6:	9a06      	ldr	r2, [sp, #24]
 801dfd8:	2a00      	cmp	r2, #0
 801dfda:	dd09      	ble.n	801dff0 <_dtoa_r+0x670>
 801dfdc:	42b2      	cmp	r2, r6
 801dfde:	9905      	ldr	r1, [sp, #20]
 801dfe0:	bfa8      	it	ge
 801dfe2:	4632      	movge	r2, r6
 801dfe4:	1a89      	subs	r1, r1, r2
 801dfe6:	9105      	str	r1, [sp, #20]
 801dfe8:	9906      	ldr	r1, [sp, #24]
 801dfea:	1ab6      	subs	r6, r6, r2
 801dfec:	1a8a      	subs	r2, r1, r2
 801dfee:	9206      	str	r2, [sp, #24]
 801dff0:	b1fb      	cbz	r3, 801e032 <_dtoa_r+0x6b2>
 801dff2:	9a08      	ldr	r2, [sp, #32]
 801dff4:	2a00      	cmp	r2, #0
 801dff6:	f000 80bc 	beq.w	801e172 <_dtoa_r+0x7f2>
 801dffa:	b19c      	cbz	r4, 801e024 <_dtoa_r+0x6a4>
 801dffc:	4629      	mov	r1, r5
 801dffe:	4622      	mov	r2, r4
 801e000:	4648      	mov	r0, r9
 801e002:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e004:	f000 fcc6 	bl	801e994 <__pow5mult>
 801e008:	9a01      	ldr	r2, [sp, #4]
 801e00a:	4601      	mov	r1, r0
 801e00c:	4605      	mov	r5, r0
 801e00e:	4648      	mov	r0, r9
 801e010:	f000 fc16 	bl	801e840 <__multiply>
 801e014:	9901      	ldr	r1, [sp, #4]
 801e016:	9004      	str	r0, [sp, #16]
 801e018:	4648      	mov	r0, r9
 801e01a:	f000 fb47 	bl	801e6ac <_Bfree>
 801e01e:	9a04      	ldr	r2, [sp, #16]
 801e020:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e022:	9201      	str	r2, [sp, #4]
 801e024:	1b1a      	subs	r2, r3, r4
 801e026:	d004      	beq.n	801e032 <_dtoa_r+0x6b2>
 801e028:	9901      	ldr	r1, [sp, #4]
 801e02a:	4648      	mov	r0, r9
 801e02c:	f000 fcb2 	bl	801e994 <__pow5mult>
 801e030:	9001      	str	r0, [sp, #4]
 801e032:	2101      	movs	r1, #1
 801e034:	4648      	mov	r0, r9
 801e036:	f000 fbed 	bl	801e814 <__i2b>
 801e03a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e03c:	4604      	mov	r4, r0
 801e03e:	2b00      	cmp	r3, #0
 801e040:	f000 81d0 	beq.w	801e3e4 <_dtoa_r+0xa64>
 801e044:	461a      	mov	r2, r3
 801e046:	4601      	mov	r1, r0
 801e048:	4648      	mov	r0, r9
 801e04a:	f000 fca3 	bl	801e994 <__pow5mult>
 801e04e:	9b07      	ldr	r3, [sp, #28]
 801e050:	2b01      	cmp	r3, #1
 801e052:	4604      	mov	r4, r0
 801e054:	f300 8095 	bgt.w	801e182 <_dtoa_r+0x802>
 801e058:	9b02      	ldr	r3, [sp, #8]
 801e05a:	2b00      	cmp	r3, #0
 801e05c:	f040 808b 	bne.w	801e176 <_dtoa_r+0x7f6>
 801e060:	9b03      	ldr	r3, [sp, #12]
 801e062:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801e066:	2a00      	cmp	r2, #0
 801e068:	f040 8087 	bne.w	801e17a <_dtoa_r+0x7fa>
 801e06c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801e070:	0d12      	lsrs	r2, r2, #20
 801e072:	0512      	lsls	r2, r2, #20
 801e074:	2a00      	cmp	r2, #0
 801e076:	f000 8082 	beq.w	801e17e <_dtoa_r+0x7fe>
 801e07a:	9b05      	ldr	r3, [sp, #20]
 801e07c:	3301      	adds	r3, #1
 801e07e:	9305      	str	r3, [sp, #20]
 801e080:	9b06      	ldr	r3, [sp, #24]
 801e082:	3301      	adds	r3, #1
 801e084:	9306      	str	r3, [sp, #24]
 801e086:	2301      	movs	r3, #1
 801e088:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e08a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e08c:	2b00      	cmp	r3, #0
 801e08e:	f000 81af 	beq.w	801e3f0 <_dtoa_r+0xa70>
 801e092:	6922      	ldr	r2, [r4, #16]
 801e094:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801e098:	6910      	ldr	r0, [r2, #16]
 801e09a:	f000 fb6f 	bl	801e77c <__hi0bits>
 801e09e:	f1c0 0020 	rsb	r0, r0, #32
 801e0a2:	9b06      	ldr	r3, [sp, #24]
 801e0a4:	4418      	add	r0, r3
 801e0a6:	f010 001f 	ands.w	r0, r0, #31
 801e0aa:	d076      	beq.n	801e19a <_dtoa_r+0x81a>
 801e0ac:	f1c0 0220 	rsb	r2, r0, #32
 801e0b0:	2a04      	cmp	r2, #4
 801e0b2:	dd69      	ble.n	801e188 <_dtoa_r+0x808>
 801e0b4:	9b05      	ldr	r3, [sp, #20]
 801e0b6:	f1c0 001c 	rsb	r0, r0, #28
 801e0ba:	4403      	add	r3, r0
 801e0bc:	9305      	str	r3, [sp, #20]
 801e0be:	9b06      	ldr	r3, [sp, #24]
 801e0c0:	4406      	add	r6, r0
 801e0c2:	4403      	add	r3, r0
 801e0c4:	9306      	str	r3, [sp, #24]
 801e0c6:	9b05      	ldr	r3, [sp, #20]
 801e0c8:	2b00      	cmp	r3, #0
 801e0ca:	dd05      	ble.n	801e0d8 <_dtoa_r+0x758>
 801e0cc:	9901      	ldr	r1, [sp, #4]
 801e0ce:	461a      	mov	r2, r3
 801e0d0:	4648      	mov	r0, r9
 801e0d2:	f000 fcb9 	bl	801ea48 <__lshift>
 801e0d6:	9001      	str	r0, [sp, #4]
 801e0d8:	9b06      	ldr	r3, [sp, #24]
 801e0da:	2b00      	cmp	r3, #0
 801e0dc:	dd05      	ble.n	801e0ea <_dtoa_r+0x76a>
 801e0de:	4621      	mov	r1, r4
 801e0e0:	461a      	mov	r2, r3
 801e0e2:	4648      	mov	r0, r9
 801e0e4:	f000 fcb0 	bl	801ea48 <__lshift>
 801e0e8:	4604      	mov	r4, r0
 801e0ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e0ec:	2b00      	cmp	r3, #0
 801e0ee:	d056      	beq.n	801e19e <_dtoa_r+0x81e>
 801e0f0:	9801      	ldr	r0, [sp, #4]
 801e0f2:	4621      	mov	r1, r4
 801e0f4:	f000 fd14 	bl	801eb20 <__mcmp>
 801e0f8:	2800      	cmp	r0, #0
 801e0fa:	da50      	bge.n	801e19e <_dtoa_r+0x81e>
 801e0fc:	f108 33ff 	add.w	r3, r8, #4294967295
 801e100:	9304      	str	r3, [sp, #16]
 801e102:	9901      	ldr	r1, [sp, #4]
 801e104:	2300      	movs	r3, #0
 801e106:	220a      	movs	r2, #10
 801e108:	4648      	mov	r0, r9
 801e10a:	f000 faf1 	bl	801e6f0 <__multadd>
 801e10e:	9b08      	ldr	r3, [sp, #32]
 801e110:	9001      	str	r0, [sp, #4]
 801e112:	2b00      	cmp	r3, #0
 801e114:	f000 816e 	beq.w	801e3f4 <_dtoa_r+0xa74>
 801e118:	4629      	mov	r1, r5
 801e11a:	2300      	movs	r3, #0
 801e11c:	220a      	movs	r2, #10
 801e11e:	4648      	mov	r0, r9
 801e120:	f000 fae6 	bl	801e6f0 <__multadd>
 801e124:	f1bb 0f00 	cmp.w	fp, #0
 801e128:	4605      	mov	r5, r0
 801e12a:	dc64      	bgt.n	801e1f6 <_dtoa_r+0x876>
 801e12c:	9b07      	ldr	r3, [sp, #28]
 801e12e:	2b02      	cmp	r3, #2
 801e130:	dc3e      	bgt.n	801e1b0 <_dtoa_r+0x830>
 801e132:	e060      	b.n	801e1f6 <_dtoa_r+0x876>
 801e134:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e136:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801e13a:	e73c      	b.n	801dfb6 <_dtoa_r+0x636>
 801e13c:	f10a 34ff 	add.w	r4, sl, #4294967295
 801e140:	42a3      	cmp	r3, r4
 801e142:	bfbf      	itttt	lt
 801e144:	1ae2      	sublt	r2, r4, r3
 801e146:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801e148:	189b      	addlt	r3, r3, r2
 801e14a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801e14c:	bfae      	itee	ge
 801e14e:	1b1c      	subge	r4, r3, r4
 801e150:	4623      	movlt	r3, r4
 801e152:	2400      	movlt	r4, #0
 801e154:	f1ba 0f00 	cmp.w	sl, #0
 801e158:	bfb5      	itete	lt
 801e15a:	9a05      	ldrlt	r2, [sp, #20]
 801e15c:	9e05      	ldrge	r6, [sp, #20]
 801e15e:	eba2 060a 	sublt.w	r6, r2, sl
 801e162:	4652      	movge	r2, sl
 801e164:	bfb8      	it	lt
 801e166:	2200      	movlt	r2, #0
 801e168:	e727      	b.n	801dfba <_dtoa_r+0x63a>
 801e16a:	9e05      	ldr	r6, [sp, #20]
 801e16c:	9d08      	ldr	r5, [sp, #32]
 801e16e:	461c      	mov	r4, r3
 801e170:	e730      	b.n	801dfd4 <_dtoa_r+0x654>
 801e172:	461a      	mov	r2, r3
 801e174:	e758      	b.n	801e028 <_dtoa_r+0x6a8>
 801e176:	2300      	movs	r3, #0
 801e178:	e786      	b.n	801e088 <_dtoa_r+0x708>
 801e17a:	9b02      	ldr	r3, [sp, #8]
 801e17c:	e784      	b.n	801e088 <_dtoa_r+0x708>
 801e17e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e180:	e783      	b.n	801e08a <_dtoa_r+0x70a>
 801e182:	2300      	movs	r3, #0
 801e184:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e186:	e784      	b.n	801e092 <_dtoa_r+0x712>
 801e188:	d09d      	beq.n	801e0c6 <_dtoa_r+0x746>
 801e18a:	9b05      	ldr	r3, [sp, #20]
 801e18c:	321c      	adds	r2, #28
 801e18e:	4413      	add	r3, r2
 801e190:	9305      	str	r3, [sp, #20]
 801e192:	9b06      	ldr	r3, [sp, #24]
 801e194:	4416      	add	r6, r2
 801e196:	4413      	add	r3, r2
 801e198:	e794      	b.n	801e0c4 <_dtoa_r+0x744>
 801e19a:	4602      	mov	r2, r0
 801e19c:	e7f5      	b.n	801e18a <_dtoa_r+0x80a>
 801e19e:	f1ba 0f00 	cmp.w	sl, #0
 801e1a2:	f8cd 8010 	str.w	r8, [sp, #16]
 801e1a6:	46d3      	mov	fp, sl
 801e1a8:	dc21      	bgt.n	801e1ee <_dtoa_r+0x86e>
 801e1aa:	9b07      	ldr	r3, [sp, #28]
 801e1ac:	2b02      	cmp	r3, #2
 801e1ae:	dd1e      	ble.n	801e1ee <_dtoa_r+0x86e>
 801e1b0:	f1bb 0f00 	cmp.w	fp, #0
 801e1b4:	f47f aeb7 	bne.w	801df26 <_dtoa_r+0x5a6>
 801e1b8:	4621      	mov	r1, r4
 801e1ba:	465b      	mov	r3, fp
 801e1bc:	2205      	movs	r2, #5
 801e1be:	4648      	mov	r0, r9
 801e1c0:	f000 fa96 	bl	801e6f0 <__multadd>
 801e1c4:	4601      	mov	r1, r0
 801e1c6:	4604      	mov	r4, r0
 801e1c8:	9801      	ldr	r0, [sp, #4]
 801e1ca:	f000 fca9 	bl	801eb20 <__mcmp>
 801e1ce:	2800      	cmp	r0, #0
 801e1d0:	f77f aea9 	ble.w	801df26 <_dtoa_r+0x5a6>
 801e1d4:	463e      	mov	r6, r7
 801e1d6:	2331      	movs	r3, #49	@ 0x31
 801e1d8:	f806 3b01 	strb.w	r3, [r6], #1
 801e1dc:	9b04      	ldr	r3, [sp, #16]
 801e1de:	3301      	adds	r3, #1
 801e1e0:	9304      	str	r3, [sp, #16]
 801e1e2:	e6a4      	b.n	801df2e <_dtoa_r+0x5ae>
 801e1e4:	f8cd 8010 	str.w	r8, [sp, #16]
 801e1e8:	4654      	mov	r4, sl
 801e1ea:	4625      	mov	r5, r4
 801e1ec:	e7f2      	b.n	801e1d4 <_dtoa_r+0x854>
 801e1ee:	9b08      	ldr	r3, [sp, #32]
 801e1f0:	2b00      	cmp	r3, #0
 801e1f2:	f000 8103 	beq.w	801e3fc <_dtoa_r+0xa7c>
 801e1f6:	2e00      	cmp	r6, #0
 801e1f8:	dd05      	ble.n	801e206 <_dtoa_r+0x886>
 801e1fa:	4629      	mov	r1, r5
 801e1fc:	4632      	mov	r2, r6
 801e1fe:	4648      	mov	r0, r9
 801e200:	f000 fc22 	bl	801ea48 <__lshift>
 801e204:	4605      	mov	r5, r0
 801e206:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e208:	2b00      	cmp	r3, #0
 801e20a:	d058      	beq.n	801e2be <_dtoa_r+0x93e>
 801e20c:	6869      	ldr	r1, [r5, #4]
 801e20e:	4648      	mov	r0, r9
 801e210:	f000 fa0c 	bl	801e62c <_Balloc>
 801e214:	4606      	mov	r6, r0
 801e216:	b928      	cbnz	r0, 801e224 <_dtoa_r+0x8a4>
 801e218:	4b82      	ldr	r3, [pc, #520]	@ (801e424 <_dtoa_r+0xaa4>)
 801e21a:	4602      	mov	r2, r0
 801e21c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801e220:	f7ff bbc7 	b.w	801d9b2 <_dtoa_r+0x32>
 801e224:	692a      	ldr	r2, [r5, #16]
 801e226:	3202      	adds	r2, #2
 801e228:	0092      	lsls	r2, r2, #2
 801e22a:	f105 010c 	add.w	r1, r5, #12
 801e22e:	300c      	adds	r0, #12
 801e230:	f7ff faef 	bl	801d812 <memcpy>
 801e234:	2201      	movs	r2, #1
 801e236:	4631      	mov	r1, r6
 801e238:	4648      	mov	r0, r9
 801e23a:	f000 fc05 	bl	801ea48 <__lshift>
 801e23e:	1c7b      	adds	r3, r7, #1
 801e240:	9305      	str	r3, [sp, #20]
 801e242:	eb07 030b 	add.w	r3, r7, fp
 801e246:	9309      	str	r3, [sp, #36]	@ 0x24
 801e248:	9b02      	ldr	r3, [sp, #8]
 801e24a:	f003 0301 	and.w	r3, r3, #1
 801e24e:	46a8      	mov	r8, r5
 801e250:	9308      	str	r3, [sp, #32]
 801e252:	4605      	mov	r5, r0
 801e254:	9b05      	ldr	r3, [sp, #20]
 801e256:	9801      	ldr	r0, [sp, #4]
 801e258:	4621      	mov	r1, r4
 801e25a:	f103 3bff 	add.w	fp, r3, #4294967295
 801e25e:	f7ff fb05 	bl	801d86c <quorem>
 801e262:	4641      	mov	r1, r8
 801e264:	9002      	str	r0, [sp, #8]
 801e266:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801e26a:	9801      	ldr	r0, [sp, #4]
 801e26c:	f000 fc58 	bl	801eb20 <__mcmp>
 801e270:	462a      	mov	r2, r5
 801e272:	9006      	str	r0, [sp, #24]
 801e274:	4621      	mov	r1, r4
 801e276:	4648      	mov	r0, r9
 801e278:	f000 fc6e 	bl	801eb58 <__mdiff>
 801e27c:	68c2      	ldr	r2, [r0, #12]
 801e27e:	4606      	mov	r6, r0
 801e280:	b9fa      	cbnz	r2, 801e2c2 <_dtoa_r+0x942>
 801e282:	4601      	mov	r1, r0
 801e284:	9801      	ldr	r0, [sp, #4]
 801e286:	f000 fc4b 	bl	801eb20 <__mcmp>
 801e28a:	4602      	mov	r2, r0
 801e28c:	4631      	mov	r1, r6
 801e28e:	4648      	mov	r0, r9
 801e290:	920a      	str	r2, [sp, #40]	@ 0x28
 801e292:	f000 fa0b 	bl	801e6ac <_Bfree>
 801e296:	9b07      	ldr	r3, [sp, #28]
 801e298:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e29a:	9e05      	ldr	r6, [sp, #20]
 801e29c:	ea43 0102 	orr.w	r1, r3, r2
 801e2a0:	9b08      	ldr	r3, [sp, #32]
 801e2a2:	4319      	orrs	r1, r3
 801e2a4:	d10f      	bne.n	801e2c6 <_dtoa_r+0x946>
 801e2a6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801e2aa:	d028      	beq.n	801e2fe <_dtoa_r+0x97e>
 801e2ac:	9b06      	ldr	r3, [sp, #24]
 801e2ae:	2b00      	cmp	r3, #0
 801e2b0:	dd02      	ble.n	801e2b8 <_dtoa_r+0x938>
 801e2b2:	9b02      	ldr	r3, [sp, #8]
 801e2b4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801e2b8:	f88b a000 	strb.w	sl, [fp]
 801e2bc:	e639      	b.n	801df32 <_dtoa_r+0x5b2>
 801e2be:	4628      	mov	r0, r5
 801e2c0:	e7bd      	b.n	801e23e <_dtoa_r+0x8be>
 801e2c2:	2201      	movs	r2, #1
 801e2c4:	e7e2      	b.n	801e28c <_dtoa_r+0x90c>
 801e2c6:	9b06      	ldr	r3, [sp, #24]
 801e2c8:	2b00      	cmp	r3, #0
 801e2ca:	db04      	blt.n	801e2d6 <_dtoa_r+0x956>
 801e2cc:	9907      	ldr	r1, [sp, #28]
 801e2ce:	430b      	orrs	r3, r1
 801e2d0:	9908      	ldr	r1, [sp, #32]
 801e2d2:	430b      	orrs	r3, r1
 801e2d4:	d120      	bne.n	801e318 <_dtoa_r+0x998>
 801e2d6:	2a00      	cmp	r2, #0
 801e2d8:	ddee      	ble.n	801e2b8 <_dtoa_r+0x938>
 801e2da:	9901      	ldr	r1, [sp, #4]
 801e2dc:	2201      	movs	r2, #1
 801e2de:	4648      	mov	r0, r9
 801e2e0:	f000 fbb2 	bl	801ea48 <__lshift>
 801e2e4:	4621      	mov	r1, r4
 801e2e6:	9001      	str	r0, [sp, #4]
 801e2e8:	f000 fc1a 	bl	801eb20 <__mcmp>
 801e2ec:	2800      	cmp	r0, #0
 801e2ee:	dc03      	bgt.n	801e2f8 <_dtoa_r+0x978>
 801e2f0:	d1e2      	bne.n	801e2b8 <_dtoa_r+0x938>
 801e2f2:	f01a 0f01 	tst.w	sl, #1
 801e2f6:	d0df      	beq.n	801e2b8 <_dtoa_r+0x938>
 801e2f8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801e2fc:	d1d9      	bne.n	801e2b2 <_dtoa_r+0x932>
 801e2fe:	2339      	movs	r3, #57	@ 0x39
 801e300:	f88b 3000 	strb.w	r3, [fp]
 801e304:	4633      	mov	r3, r6
 801e306:	461e      	mov	r6, r3
 801e308:	3b01      	subs	r3, #1
 801e30a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801e30e:	2a39      	cmp	r2, #57	@ 0x39
 801e310:	d053      	beq.n	801e3ba <_dtoa_r+0xa3a>
 801e312:	3201      	adds	r2, #1
 801e314:	701a      	strb	r2, [r3, #0]
 801e316:	e60c      	b.n	801df32 <_dtoa_r+0x5b2>
 801e318:	2a00      	cmp	r2, #0
 801e31a:	dd07      	ble.n	801e32c <_dtoa_r+0x9ac>
 801e31c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801e320:	d0ed      	beq.n	801e2fe <_dtoa_r+0x97e>
 801e322:	f10a 0301 	add.w	r3, sl, #1
 801e326:	f88b 3000 	strb.w	r3, [fp]
 801e32a:	e602      	b.n	801df32 <_dtoa_r+0x5b2>
 801e32c:	9b05      	ldr	r3, [sp, #20]
 801e32e:	9a05      	ldr	r2, [sp, #20]
 801e330:	f803 ac01 	strb.w	sl, [r3, #-1]
 801e334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e336:	4293      	cmp	r3, r2
 801e338:	d029      	beq.n	801e38e <_dtoa_r+0xa0e>
 801e33a:	9901      	ldr	r1, [sp, #4]
 801e33c:	2300      	movs	r3, #0
 801e33e:	220a      	movs	r2, #10
 801e340:	4648      	mov	r0, r9
 801e342:	f000 f9d5 	bl	801e6f0 <__multadd>
 801e346:	45a8      	cmp	r8, r5
 801e348:	9001      	str	r0, [sp, #4]
 801e34a:	f04f 0300 	mov.w	r3, #0
 801e34e:	f04f 020a 	mov.w	r2, #10
 801e352:	4641      	mov	r1, r8
 801e354:	4648      	mov	r0, r9
 801e356:	d107      	bne.n	801e368 <_dtoa_r+0x9e8>
 801e358:	f000 f9ca 	bl	801e6f0 <__multadd>
 801e35c:	4680      	mov	r8, r0
 801e35e:	4605      	mov	r5, r0
 801e360:	9b05      	ldr	r3, [sp, #20]
 801e362:	3301      	adds	r3, #1
 801e364:	9305      	str	r3, [sp, #20]
 801e366:	e775      	b.n	801e254 <_dtoa_r+0x8d4>
 801e368:	f000 f9c2 	bl	801e6f0 <__multadd>
 801e36c:	4629      	mov	r1, r5
 801e36e:	4680      	mov	r8, r0
 801e370:	2300      	movs	r3, #0
 801e372:	220a      	movs	r2, #10
 801e374:	4648      	mov	r0, r9
 801e376:	f000 f9bb 	bl	801e6f0 <__multadd>
 801e37a:	4605      	mov	r5, r0
 801e37c:	e7f0      	b.n	801e360 <_dtoa_r+0x9e0>
 801e37e:	f1bb 0f00 	cmp.w	fp, #0
 801e382:	bfcc      	ite	gt
 801e384:	465e      	movgt	r6, fp
 801e386:	2601      	movle	r6, #1
 801e388:	443e      	add	r6, r7
 801e38a:	f04f 0800 	mov.w	r8, #0
 801e38e:	9901      	ldr	r1, [sp, #4]
 801e390:	2201      	movs	r2, #1
 801e392:	4648      	mov	r0, r9
 801e394:	f000 fb58 	bl	801ea48 <__lshift>
 801e398:	4621      	mov	r1, r4
 801e39a:	9001      	str	r0, [sp, #4]
 801e39c:	f000 fbc0 	bl	801eb20 <__mcmp>
 801e3a0:	2800      	cmp	r0, #0
 801e3a2:	dcaf      	bgt.n	801e304 <_dtoa_r+0x984>
 801e3a4:	d102      	bne.n	801e3ac <_dtoa_r+0xa2c>
 801e3a6:	f01a 0f01 	tst.w	sl, #1
 801e3aa:	d1ab      	bne.n	801e304 <_dtoa_r+0x984>
 801e3ac:	4633      	mov	r3, r6
 801e3ae:	461e      	mov	r6, r3
 801e3b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e3b4:	2a30      	cmp	r2, #48	@ 0x30
 801e3b6:	d0fa      	beq.n	801e3ae <_dtoa_r+0xa2e>
 801e3b8:	e5bb      	b.n	801df32 <_dtoa_r+0x5b2>
 801e3ba:	429f      	cmp	r7, r3
 801e3bc:	d1a3      	bne.n	801e306 <_dtoa_r+0x986>
 801e3be:	9b04      	ldr	r3, [sp, #16]
 801e3c0:	3301      	adds	r3, #1
 801e3c2:	9304      	str	r3, [sp, #16]
 801e3c4:	2331      	movs	r3, #49	@ 0x31
 801e3c6:	703b      	strb	r3, [r7, #0]
 801e3c8:	e5b3      	b.n	801df32 <_dtoa_r+0x5b2>
 801e3ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e3cc:	4f16      	ldr	r7, [pc, #88]	@ (801e428 <_dtoa_r+0xaa8>)
 801e3ce:	b11b      	cbz	r3, 801e3d8 <_dtoa_r+0xa58>
 801e3d0:	f107 0308 	add.w	r3, r7, #8
 801e3d4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801e3d6:	6013      	str	r3, [r2, #0]
 801e3d8:	4638      	mov	r0, r7
 801e3da:	b011      	add	sp, #68	@ 0x44
 801e3dc:	ecbd 8b02 	vpop	{d8}
 801e3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3e4:	9b07      	ldr	r3, [sp, #28]
 801e3e6:	2b01      	cmp	r3, #1
 801e3e8:	f77f ae36 	ble.w	801e058 <_dtoa_r+0x6d8>
 801e3ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e3ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e3f0:	2001      	movs	r0, #1
 801e3f2:	e656      	b.n	801e0a2 <_dtoa_r+0x722>
 801e3f4:	f1bb 0f00 	cmp.w	fp, #0
 801e3f8:	f77f aed7 	ble.w	801e1aa <_dtoa_r+0x82a>
 801e3fc:	463e      	mov	r6, r7
 801e3fe:	9801      	ldr	r0, [sp, #4]
 801e400:	4621      	mov	r1, r4
 801e402:	f7ff fa33 	bl	801d86c <quorem>
 801e406:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801e40a:	f806 ab01 	strb.w	sl, [r6], #1
 801e40e:	1bf2      	subs	r2, r6, r7
 801e410:	4593      	cmp	fp, r2
 801e412:	ddb4      	ble.n	801e37e <_dtoa_r+0x9fe>
 801e414:	9901      	ldr	r1, [sp, #4]
 801e416:	2300      	movs	r3, #0
 801e418:	220a      	movs	r2, #10
 801e41a:	4648      	mov	r0, r9
 801e41c:	f000 f968 	bl	801e6f0 <__multadd>
 801e420:	9001      	str	r0, [sp, #4]
 801e422:	e7ec      	b.n	801e3fe <_dtoa_r+0xa7e>
 801e424:	0802286b 	.word	0x0802286b
 801e428:	08022806 	.word	0x08022806

0801e42c <_free_r>:
 801e42c:	b538      	push	{r3, r4, r5, lr}
 801e42e:	4605      	mov	r5, r0
 801e430:	2900      	cmp	r1, #0
 801e432:	d041      	beq.n	801e4b8 <_free_r+0x8c>
 801e434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e438:	1f0c      	subs	r4, r1, #4
 801e43a:	2b00      	cmp	r3, #0
 801e43c:	bfb8      	it	lt
 801e43e:	18e4      	addlt	r4, r4, r3
 801e440:	f000 f8e8 	bl	801e614 <__malloc_lock>
 801e444:	4a1d      	ldr	r2, [pc, #116]	@ (801e4bc <_free_r+0x90>)
 801e446:	6813      	ldr	r3, [r2, #0]
 801e448:	b933      	cbnz	r3, 801e458 <_free_r+0x2c>
 801e44a:	6063      	str	r3, [r4, #4]
 801e44c:	6014      	str	r4, [r2, #0]
 801e44e:	4628      	mov	r0, r5
 801e450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e454:	f000 b8e4 	b.w	801e620 <__malloc_unlock>
 801e458:	42a3      	cmp	r3, r4
 801e45a:	d908      	bls.n	801e46e <_free_r+0x42>
 801e45c:	6820      	ldr	r0, [r4, #0]
 801e45e:	1821      	adds	r1, r4, r0
 801e460:	428b      	cmp	r3, r1
 801e462:	bf01      	itttt	eq
 801e464:	6819      	ldreq	r1, [r3, #0]
 801e466:	685b      	ldreq	r3, [r3, #4]
 801e468:	1809      	addeq	r1, r1, r0
 801e46a:	6021      	streq	r1, [r4, #0]
 801e46c:	e7ed      	b.n	801e44a <_free_r+0x1e>
 801e46e:	461a      	mov	r2, r3
 801e470:	685b      	ldr	r3, [r3, #4]
 801e472:	b10b      	cbz	r3, 801e478 <_free_r+0x4c>
 801e474:	42a3      	cmp	r3, r4
 801e476:	d9fa      	bls.n	801e46e <_free_r+0x42>
 801e478:	6811      	ldr	r1, [r2, #0]
 801e47a:	1850      	adds	r0, r2, r1
 801e47c:	42a0      	cmp	r0, r4
 801e47e:	d10b      	bne.n	801e498 <_free_r+0x6c>
 801e480:	6820      	ldr	r0, [r4, #0]
 801e482:	4401      	add	r1, r0
 801e484:	1850      	adds	r0, r2, r1
 801e486:	4283      	cmp	r3, r0
 801e488:	6011      	str	r1, [r2, #0]
 801e48a:	d1e0      	bne.n	801e44e <_free_r+0x22>
 801e48c:	6818      	ldr	r0, [r3, #0]
 801e48e:	685b      	ldr	r3, [r3, #4]
 801e490:	6053      	str	r3, [r2, #4]
 801e492:	4408      	add	r0, r1
 801e494:	6010      	str	r0, [r2, #0]
 801e496:	e7da      	b.n	801e44e <_free_r+0x22>
 801e498:	d902      	bls.n	801e4a0 <_free_r+0x74>
 801e49a:	230c      	movs	r3, #12
 801e49c:	602b      	str	r3, [r5, #0]
 801e49e:	e7d6      	b.n	801e44e <_free_r+0x22>
 801e4a0:	6820      	ldr	r0, [r4, #0]
 801e4a2:	1821      	adds	r1, r4, r0
 801e4a4:	428b      	cmp	r3, r1
 801e4a6:	bf04      	itt	eq
 801e4a8:	6819      	ldreq	r1, [r3, #0]
 801e4aa:	685b      	ldreq	r3, [r3, #4]
 801e4ac:	6063      	str	r3, [r4, #4]
 801e4ae:	bf04      	itt	eq
 801e4b0:	1809      	addeq	r1, r1, r0
 801e4b2:	6021      	streq	r1, [r4, #0]
 801e4b4:	6054      	str	r4, [r2, #4]
 801e4b6:	e7ca      	b.n	801e44e <_free_r+0x22>
 801e4b8:	bd38      	pop	{r3, r4, r5, pc}
 801e4ba:	bf00      	nop
 801e4bc:	2400cf10 	.word	0x2400cf10

0801e4c0 <malloc>:
 801e4c0:	4b02      	ldr	r3, [pc, #8]	@ (801e4cc <malloc+0xc>)
 801e4c2:	4601      	mov	r1, r0
 801e4c4:	6818      	ldr	r0, [r3, #0]
 801e4c6:	f000 b825 	b.w	801e514 <_malloc_r>
 801e4ca:	bf00      	nop
 801e4cc:	24000044 	.word	0x24000044

0801e4d0 <sbrk_aligned>:
 801e4d0:	b570      	push	{r4, r5, r6, lr}
 801e4d2:	4e0f      	ldr	r6, [pc, #60]	@ (801e510 <sbrk_aligned+0x40>)
 801e4d4:	460c      	mov	r4, r1
 801e4d6:	6831      	ldr	r1, [r6, #0]
 801e4d8:	4605      	mov	r5, r0
 801e4da:	b911      	cbnz	r1, 801e4e2 <sbrk_aligned+0x12>
 801e4dc:	f000 feac 	bl	801f238 <_sbrk_r>
 801e4e0:	6030      	str	r0, [r6, #0]
 801e4e2:	4621      	mov	r1, r4
 801e4e4:	4628      	mov	r0, r5
 801e4e6:	f000 fea7 	bl	801f238 <_sbrk_r>
 801e4ea:	1c43      	adds	r3, r0, #1
 801e4ec:	d103      	bne.n	801e4f6 <sbrk_aligned+0x26>
 801e4ee:	f04f 34ff 	mov.w	r4, #4294967295
 801e4f2:	4620      	mov	r0, r4
 801e4f4:	bd70      	pop	{r4, r5, r6, pc}
 801e4f6:	1cc4      	adds	r4, r0, #3
 801e4f8:	f024 0403 	bic.w	r4, r4, #3
 801e4fc:	42a0      	cmp	r0, r4
 801e4fe:	d0f8      	beq.n	801e4f2 <sbrk_aligned+0x22>
 801e500:	1a21      	subs	r1, r4, r0
 801e502:	4628      	mov	r0, r5
 801e504:	f000 fe98 	bl	801f238 <_sbrk_r>
 801e508:	3001      	adds	r0, #1
 801e50a:	d1f2      	bne.n	801e4f2 <sbrk_aligned+0x22>
 801e50c:	e7ef      	b.n	801e4ee <sbrk_aligned+0x1e>
 801e50e:	bf00      	nop
 801e510:	2400cf0c 	.word	0x2400cf0c

0801e514 <_malloc_r>:
 801e514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e518:	1ccd      	adds	r5, r1, #3
 801e51a:	f025 0503 	bic.w	r5, r5, #3
 801e51e:	3508      	adds	r5, #8
 801e520:	2d0c      	cmp	r5, #12
 801e522:	bf38      	it	cc
 801e524:	250c      	movcc	r5, #12
 801e526:	2d00      	cmp	r5, #0
 801e528:	4606      	mov	r6, r0
 801e52a:	db01      	blt.n	801e530 <_malloc_r+0x1c>
 801e52c:	42a9      	cmp	r1, r5
 801e52e:	d904      	bls.n	801e53a <_malloc_r+0x26>
 801e530:	230c      	movs	r3, #12
 801e532:	6033      	str	r3, [r6, #0]
 801e534:	2000      	movs	r0, #0
 801e536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e53a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e610 <_malloc_r+0xfc>
 801e53e:	f000 f869 	bl	801e614 <__malloc_lock>
 801e542:	f8d8 3000 	ldr.w	r3, [r8]
 801e546:	461c      	mov	r4, r3
 801e548:	bb44      	cbnz	r4, 801e59c <_malloc_r+0x88>
 801e54a:	4629      	mov	r1, r5
 801e54c:	4630      	mov	r0, r6
 801e54e:	f7ff ffbf 	bl	801e4d0 <sbrk_aligned>
 801e552:	1c43      	adds	r3, r0, #1
 801e554:	4604      	mov	r4, r0
 801e556:	d158      	bne.n	801e60a <_malloc_r+0xf6>
 801e558:	f8d8 4000 	ldr.w	r4, [r8]
 801e55c:	4627      	mov	r7, r4
 801e55e:	2f00      	cmp	r7, #0
 801e560:	d143      	bne.n	801e5ea <_malloc_r+0xd6>
 801e562:	2c00      	cmp	r4, #0
 801e564:	d04b      	beq.n	801e5fe <_malloc_r+0xea>
 801e566:	6823      	ldr	r3, [r4, #0]
 801e568:	4639      	mov	r1, r7
 801e56a:	4630      	mov	r0, r6
 801e56c:	eb04 0903 	add.w	r9, r4, r3
 801e570:	f000 fe62 	bl	801f238 <_sbrk_r>
 801e574:	4581      	cmp	r9, r0
 801e576:	d142      	bne.n	801e5fe <_malloc_r+0xea>
 801e578:	6821      	ldr	r1, [r4, #0]
 801e57a:	1a6d      	subs	r5, r5, r1
 801e57c:	4629      	mov	r1, r5
 801e57e:	4630      	mov	r0, r6
 801e580:	f7ff ffa6 	bl	801e4d0 <sbrk_aligned>
 801e584:	3001      	adds	r0, #1
 801e586:	d03a      	beq.n	801e5fe <_malloc_r+0xea>
 801e588:	6823      	ldr	r3, [r4, #0]
 801e58a:	442b      	add	r3, r5
 801e58c:	6023      	str	r3, [r4, #0]
 801e58e:	f8d8 3000 	ldr.w	r3, [r8]
 801e592:	685a      	ldr	r2, [r3, #4]
 801e594:	bb62      	cbnz	r2, 801e5f0 <_malloc_r+0xdc>
 801e596:	f8c8 7000 	str.w	r7, [r8]
 801e59a:	e00f      	b.n	801e5bc <_malloc_r+0xa8>
 801e59c:	6822      	ldr	r2, [r4, #0]
 801e59e:	1b52      	subs	r2, r2, r5
 801e5a0:	d420      	bmi.n	801e5e4 <_malloc_r+0xd0>
 801e5a2:	2a0b      	cmp	r2, #11
 801e5a4:	d917      	bls.n	801e5d6 <_malloc_r+0xc2>
 801e5a6:	1961      	adds	r1, r4, r5
 801e5a8:	42a3      	cmp	r3, r4
 801e5aa:	6025      	str	r5, [r4, #0]
 801e5ac:	bf18      	it	ne
 801e5ae:	6059      	strne	r1, [r3, #4]
 801e5b0:	6863      	ldr	r3, [r4, #4]
 801e5b2:	bf08      	it	eq
 801e5b4:	f8c8 1000 	streq.w	r1, [r8]
 801e5b8:	5162      	str	r2, [r4, r5]
 801e5ba:	604b      	str	r3, [r1, #4]
 801e5bc:	4630      	mov	r0, r6
 801e5be:	f000 f82f 	bl	801e620 <__malloc_unlock>
 801e5c2:	f104 000b 	add.w	r0, r4, #11
 801e5c6:	1d23      	adds	r3, r4, #4
 801e5c8:	f020 0007 	bic.w	r0, r0, #7
 801e5cc:	1ac2      	subs	r2, r0, r3
 801e5ce:	bf1c      	itt	ne
 801e5d0:	1a1b      	subne	r3, r3, r0
 801e5d2:	50a3      	strne	r3, [r4, r2]
 801e5d4:	e7af      	b.n	801e536 <_malloc_r+0x22>
 801e5d6:	6862      	ldr	r2, [r4, #4]
 801e5d8:	42a3      	cmp	r3, r4
 801e5da:	bf0c      	ite	eq
 801e5dc:	f8c8 2000 	streq.w	r2, [r8]
 801e5e0:	605a      	strne	r2, [r3, #4]
 801e5e2:	e7eb      	b.n	801e5bc <_malloc_r+0xa8>
 801e5e4:	4623      	mov	r3, r4
 801e5e6:	6864      	ldr	r4, [r4, #4]
 801e5e8:	e7ae      	b.n	801e548 <_malloc_r+0x34>
 801e5ea:	463c      	mov	r4, r7
 801e5ec:	687f      	ldr	r7, [r7, #4]
 801e5ee:	e7b6      	b.n	801e55e <_malloc_r+0x4a>
 801e5f0:	461a      	mov	r2, r3
 801e5f2:	685b      	ldr	r3, [r3, #4]
 801e5f4:	42a3      	cmp	r3, r4
 801e5f6:	d1fb      	bne.n	801e5f0 <_malloc_r+0xdc>
 801e5f8:	2300      	movs	r3, #0
 801e5fa:	6053      	str	r3, [r2, #4]
 801e5fc:	e7de      	b.n	801e5bc <_malloc_r+0xa8>
 801e5fe:	230c      	movs	r3, #12
 801e600:	6033      	str	r3, [r6, #0]
 801e602:	4630      	mov	r0, r6
 801e604:	f000 f80c 	bl	801e620 <__malloc_unlock>
 801e608:	e794      	b.n	801e534 <_malloc_r+0x20>
 801e60a:	6005      	str	r5, [r0, #0]
 801e60c:	e7d6      	b.n	801e5bc <_malloc_r+0xa8>
 801e60e:	bf00      	nop
 801e610:	2400cf10 	.word	0x2400cf10

0801e614 <__malloc_lock>:
 801e614:	4801      	ldr	r0, [pc, #4]	@ (801e61c <__malloc_lock+0x8>)
 801e616:	f7ff b8fa 	b.w	801d80e <__retarget_lock_acquire_recursive>
 801e61a:	bf00      	nop
 801e61c:	2400cf08 	.word	0x2400cf08

0801e620 <__malloc_unlock>:
 801e620:	4801      	ldr	r0, [pc, #4]	@ (801e628 <__malloc_unlock+0x8>)
 801e622:	f7ff b8f5 	b.w	801d810 <__retarget_lock_release_recursive>
 801e626:	bf00      	nop
 801e628:	2400cf08 	.word	0x2400cf08

0801e62c <_Balloc>:
 801e62c:	b570      	push	{r4, r5, r6, lr}
 801e62e:	69c6      	ldr	r6, [r0, #28]
 801e630:	4604      	mov	r4, r0
 801e632:	460d      	mov	r5, r1
 801e634:	b976      	cbnz	r6, 801e654 <_Balloc+0x28>
 801e636:	2010      	movs	r0, #16
 801e638:	f7ff ff42 	bl	801e4c0 <malloc>
 801e63c:	4602      	mov	r2, r0
 801e63e:	61e0      	str	r0, [r4, #28]
 801e640:	b920      	cbnz	r0, 801e64c <_Balloc+0x20>
 801e642:	4b18      	ldr	r3, [pc, #96]	@ (801e6a4 <_Balloc+0x78>)
 801e644:	4818      	ldr	r0, [pc, #96]	@ (801e6a8 <_Balloc+0x7c>)
 801e646:	216b      	movs	r1, #107	@ 0x6b
 801e648:	f7ff f8f2 	bl	801d830 <__assert_func>
 801e64c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e650:	6006      	str	r6, [r0, #0]
 801e652:	60c6      	str	r6, [r0, #12]
 801e654:	69e6      	ldr	r6, [r4, #28]
 801e656:	68f3      	ldr	r3, [r6, #12]
 801e658:	b183      	cbz	r3, 801e67c <_Balloc+0x50>
 801e65a:	69e3      	ldr	r3, [r4, #28]
 801e65c:	68db      	ldr	r3, [r3, #12]
 801e65e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e662:	b9b8      	cbnz	r0, 801e694 <_Balloc+0x68>
 801e664:	2101      	movs	r1, #1
 801e666:	fa01 f605 	lsl.w	r6, r1, r5
 801e66a:	1d72      	adds	r2, r6, #5
 801e66c:	0092      	lsls	r2, r2, #2
 801e66e:	4620      	mov	r0, r4
 801e670:	f000 fdf9 	bl	801f266 <_calloc_r>
 801e674:	b160      	cbz	r0, 801e690 <_Balloc+0x64>
 801e676:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e67a:	e00e      	b.n	801e69a <_Balloc+0x6e>
 801e67c:	2221      	movs	r2, #33	@ 0x21
 801e67e:	2104      	movs	r1, #4
 801e680:	4620      	mov	r0, r4
 801e682:	f000 fdf0 	bl	801f266 <_calloc_r>
 801e686:	69e3      	ldr	r3, [r4, #28]
 801e688:	60f0      	str	r0, [r6, #12]
 801e68a:	68db      	ldr	r3, [r3, #12]
 801e68c:	2b00      	cmp	r3, #0
 801e68e:	d1e4      	bne.n	801e65a <_Balloc+0x2e>
 801e690:	2000      	movs	r0, #0
 801e692:	bd70      	pop	{r4, r5, r6, pc}
 801e694:	6802      	ldr	r2, [r0, #0]
 801e696:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e69a:	2300      	movs	r3, #0
 801e69c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e6a0:	e7f7      	b.n	801e692 <_Balloc+0x66>
 801e6a2:	bf00      	nop
 801e6a4:	08022626 	.word	0x08022626
 801e6a8:	0802287c 	.word	0x0802287c

0801e6ac <_Bfree>:
 801e6ac:	b570      	push	{r4, r5, r6, lr}
 801e6ae:	69c6      	ldr	r6, [r0, #28]
 801e6b0:	4605      	mov	r5, r0
 801e6b2:	460c      	mov	r4, r1
 801e6b4:	b976      	cbnz	r6, 801e6d4 <_Bfree+0x28>
 801e6b6:	2010      	movs	r0, #16
 801e6b8:	f7ff ff02 	bl	801e4c0 <malloc>
 801e6bc:	4602      	mov	r2, r0
 801e6be:	61e8      	str	r0, [r5, #28]
 801e6c0:	b920      	cbnz	r0, 801e6cc <_Bfree+0x20>
 801e6c2:	4b09      	ldr	r3, [pc, #36]	@ (801e6e8 <_Bfree+0x3c>)
 801e6c4:	4809      	ldr	r0, [pc, #36]	@ (801e6ec <_Bfree+0x40>)
 801e6c6:	218f      	movs	r1, #143	@ 0x8f
 801e6c8:	f7ff f8b2 	bl	801d830 <__assert_func>
 801e6cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e6d0:	6006      	str	r6, [r0, #0]
 801e6d2:	60c6      	str	r6, [r0, #12]
 801e6d4:	b13c      	cbz	r4, 801e6e6 <_Bfree+0x3a>
 801e6d6:	69eb      	ldr	r3, [r5, #28]
 801e6d8:	6862      	ldr	r2, [r4, #4]
 801e6da:	68db      	ldr	r3, [r3, #12]
 801e6dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e6e0:	6021      	str	r1, [r4, #0]
 801e6e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e6e6:	bd70      	pop	{r4, r5, r6, pc}
 801e6e8:	08022626 	.word	0x08022626
 801e6ec:	0802287c 	.word	0x0802287c

0801e6f0 <__multadd>:
 801e6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6f4:	690d      	ldr	r5, [r1, #16]
 801e6f6:	4607      	mov	r7, r0
 801e6f8:	460c      	mov	r4, r1
 801e6fa:	461e      	mov	r6, r3
 801e6fc:	f101 0c14 	add.w	ip, r1, #20
 801e700:	2000      	movs	r0, #0
 801e702:	f8dc 3000 	ldr.w	r3, [ip]
 801e706:	b299      	uxth	r1, r3
 801e708:	fb02 6101 	mla	r1, r2, r1, r6
 801e70c:	0c1e      	lsrs	r6, r3, #16
 801e70e:	0c0b      	lsrs	r3, r1, #16
 801e710:	fb02 3306 	mla	r3, r2, r6, r3
 801e714:	b289      	uxth	r1, r1
 801e716:	3001      	adds	r0, #1
 801e718:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e71c:	4285      	cmp	r5, r0
 801e71e:	f84c 1b04 	str.w	r1, [ip], #4
 801e722:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e726:	dcec      	bgt.n	801e702 <__multadd+0x12>
 801e728:	b30e      	cbz	r6, 801e76e <__multadd+0x7e>
 801e72a:	68a3      	ldr	r3, [r4, #8]
 801e72c:	42ab      	cmp	r3, r5
 801e72e:	dc19      	bgt.n	801e764 <__multadd+0x74>
 801e730:	6861      	ldr	r1, [r4, #4]
 801e732:	4638      	mov	r0, r7
 801e734:	3101      	adds	r1, #1
 801e736:	f7ff ff79 	bl	801e62c <_Balloc>
 801e73a:	4680      	mov	r8, r0
 801e73c:	b928      	cbnz	r0, 801e74a <__multadd+0x5a>
 801e73e:	4602      	mov	r2, r0
 801e740:	4b0c      	ldr	r3, [pc, #48]	@ (801e774 <__multadd+0x84>)
 801e742:	480d      	ldr	r0, [pc, #52]	@ (801e778 <__multadd+0x88>)
 801e744:	21ba      	movs	r1, #186	@ 0xba
 801e746:	f7ff f873 	bl	801d830 <__assert_func>
 801e74a:	6922      	ldr	r2, [r4, #16]
 801e74c:	3202      	adds	r2, #2
 801e74e:	f104 010c 	add.w	r1, r4, #12
 801e752:	0092      	lsls	r2, r2, #2
 801e754:	300c      	adds	r0, #12
 801e756:	f7ff f85c 	bl	801d812 <memcpy>
 801e75a:	4621      	mov	r1, r4
 801e75c:	4638      	mov	r0, r7
 801e75e:	f7ff ffa5 	bl	801e6ac <_Bfree>
 801e762:	4644      	mov	r4, r8
 801e764:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e768:	3501      	adds	r5, #1
 801e76a:	615e      	str	r6, [r3, #20]
 801e76c:	6125      	str	r5, [r4, #16]
 801e76e:	4620      	mov	r0, r4
 801e770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e774:	0802286b 	.word	0x0802286b
 801e778:	0802287c 	.word	0x0802287c

0801e77c <__hi0bits>:
 801e77c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801e780:	4603      	mov	r3, r0
 801e782:	bf36      	itet	cc
 801e784:	0403      	lslcc	r3, r0, #16
 801e786:	2000      	movcs	r0, #0
 801e788:	2010      	movcc	r0, #16
 801e78a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e78e:	bf3c      	itt	cc
 801e790:	021b      	lslcc	r3, r3, #8
 801e792:	3008      	addcc	r0, #8
 801e794:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e798:	bf3c      	itt	cc
 801e79a:	011b      	lslcc	r3, r3, #4
 801e79c:	3004      	addcc	r0, #4
 801e79e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e7a2:	bf3c      	itt	cc
 801e7a4:	009b      	lslcc	r3, r3, #2
 801e7a6:	3002      	addcc	r0, #2
 801e7a8:	2b00      	cmp	r3, #0
 801e7aa:	db05      	blt.n	801e7b8 <__hi0bits+0x3c>
 801e7ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801e7b0:	f100 0001 	add.w	r0, r0, #1
 801e7b4:	bf08      	it	eq
 801e7b6:	2020      	moveq	r0, #32
 801e7b8:	4770      	bx	lr

0801e7ba <__lo0bits>:
 801e7ba:	6803      	ldr	r3, [r0, #0]
 801e7bc:	4602      	mov	r2, r0
 801e7be:	f013 0007 	ands.w	r0, r3, #7
 801e7c2:	d00b      	beq.n	801e7dc <__lo0bits+0x22>
 801e7c4:	07d9      	lsls	r1, r3, #31
 801e7c6:	d421      	bmi.n	801e80c <__lo0bits+0x52>
 801e7c8:	0798      	lsls	r0, r3, #30
 801e7ca:	bf49      	itett	mi
 801e7cc:	085b      	lsrmi	r3, r3, #1
 801e7ce:	089b      	lsrpl	r3, r3, #2
 801e7d0:	2001      	movmi	r0, #1
 801e7d2:	6013      	strmi	r3, [r2, #0]
 801e7d4:	bf5c      	itt	pl
 801e7d6:	6013      	strpl	r3, [r2, #0]
 801e7d8:	2002      	movpl	r0, #2
 801e7da:	4770      	bx	lr
 801e7dc:	b299      	uxth	r1, r3
 801e7de:	b909      	cbnz	r1, 801e7e4 <__lo0bits+0x2a>
 801e7e0:	0c1b      	lsrs	r3, r3, #16
 801e7e2:	2010      	movs	r0, #16
 801e7e4:	b2d9      	uxtb	r1, r3
 801e7e6:	b909      	cbnz	r1, 801e7ec <__lo0bits+0x32>
 801e7e8:	3008      	adds	r0, #8
 801e7ea:	0a1b      	lsrs	r3, r3, #8
 801e7ec:	0719      	lsls	r1, r3, #28
 801e7ee:	bf04      	itt	eq
 801e7f0:	091b      	lsreq	r3, r3, #4
 801e7f2:	3004      	addeq	r0, #4
 801e7f4:	0799      	lsls	r1, r3, #30
 801e7f6:	bf04      	itt	eq
 801e7f8:	089b      	lsreq	r3, r3, #2
 801e7fa:	3002      	addeq	r0, #2
 801e7fc:	07d9      	lsls	r1, r3, #31
 801e7fe:	d403      	bmi.n	801e808 <__lo0bits+0x4e>
 801e800:	085b      	lsrs	r3, r3, #1
 801e802:	f100 0001 	add.w	r0, r0, #1
 801e806:	d003      	beq.n	801e810 <__lo0bits+0x56>
 801e808:	6013      	str	r3, [r2, #0]
 801e80a:	4770      	bx	lr
 801e80c:	2000      	movs	r0, #0
 801e80e:	4770      	bx	lr
 801e810:	2020      	movs	r0, #32
 801e812:	4770      	bx	lr

0801e814 <__i2b>:
 801e814:	b510      	push	{r4, lr}
 801e816:	460c      	mov	r4, r1
 801e818:	2101      	movs	r1, #1
 801e81a:	f7ff ff07 	bl	801e62c <_Balloc>
 801e81e:	4602      	mov	r2, r0
 801e820:	b928      	cbnz	r0, 801e82e <__i2b+0x1a>
 801e822:	4b05      	ldr	r3, [pc, #20]	@ (801e838 <__i2b+0x24>)
 801e824:	4805      	ldr	r0, [pc, #20]	@ (801e83c <__i2b+0x28>)
 801e826:	f240 1145 	movw	r1, #325	@ 0x145
 801e82a:	f7ff f801 	bl	801d830 <__assert_func>
 801e82e:	2301      	movs	r3, #1
 801e830:	6144      	str	r4, [r0, #20]
 801e832:	6103      	str	r3, [r0, #16]
 801e834:	bd10      	pop	{r4, pc}
 801e836:	bf00      	nop
 801e838:	0802286b 	.word	0x0802286b
 801e83c:	0802287c 	.word	0x0802287c

0801e840 <__multiply>:
 801e840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e844:	4614      	mov	r4, r2
 801e846:	690a      	ldr	r2, [r1, #16]
 801e848:	6923      	ldr	r3, [r4, #16]
 801e84a:	429a      	cmp	r2, r3
 801e84c:	bfa8      	it	ge
 801e84e:	4623      	movge	r3, r4
 801e850:	460f      	mov	r7, r1
 801e852:	bfa4      	itt	ge
 801e854:	460c      	movge	r4, r1
 801e856:	461f      	movge	r7, r3
 801e858:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801e85c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801e860:	68a3      	ldr	r3, [r4, #8]
 801e862:	6861      	ldr	r1, [r4, #4]
 801e864:	eb0a 0609 	add.w	r6, sl, r9
 801e868:	42b3      	cmp	r3, r6
 801e86a:	b085      	sub	sp, #20
 801e86c:	bfb8      	it	lt
 801e86e:	3101      	addlt	r1, #1
 801e870:	f7ff fedc 	bl	801e62c <_Balloc>
 801e874:	b930      	cbnz	r0, 801e884 <__multiply+0x44>
 801e876:	4602      	mov	r2, r0
 801e878:	4b44      	ldr	r3, [pc, #272]	@ (801e98c <__multiply+0x14c>)
 801e87a:	4845      	ldr	r0, [pc, #276]	@ (801e990 <__multiply+0x150>)
 801e87c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801e880:	f7fe ffd6 	bl	801d830 <__assert_func>
 801e884:	f100 0514 	add.w	r5, r0, #20
 801e888:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801e88c:	462b      	mov	r3, r5
 801e88e:	2200      	movs	r2, #0
 801e890:	4543      	cmp	r3, r8
 801e892:	d321      	bcc.n	801e8d8 <__multiply+0x98>
 801e894:	f107 0114 	add.w	r1, r7, #20
 801e898:	f104 0214 	add.w	r2, r4, #20
 801e89c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801e8a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801e8a4:	9302      	str	r3, [sp, #8]
 801e8a6:	1b13      	subs	r3, r2, r4
 801e8a8:	3b15      	subs	r3, #21
 801e8aa:	f023 0303 	bic.w	r3, r3, #3
 801e8ae:	3304      	adds	r3, #4
 801e8b0:	f104 0715 	add.w	r7, r4, #21
 801e8b4:	42ba      	cmp	r2, r7
 801e8b6:	bf38      	it	cc
 801e8b8:	2304      	movcc	r3, #4
 801e8ba:	9301      	str	r3, [sp, #4]
 801e8bc:	9b02      	ldr	r3, [sp, #8]
 801e8be:	9103      	str	r1, [sp, #12]
 801e8c0:	428b      	cmp	r3, r1
 801e8c2:	d80c      	bhi.n	801e8de <__multiply+0x9e>
 801e8c4:	2e00      	cmp	r6, #0
 801e8c6:	dd03      	ble.n	801e8d0 <__multiply+0x90>
 801e8c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e8cc:	2b00      	cmp	r3, #0
 801e8ce:	d05b      	beq.n	801e988 <__multiply+0x148>
 801e8d0:	6106      	str	r6, [r0, #16]
 801e8d2:	b005      	add	sp, #20
 801e8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8d8:	f843 2b04 	str.w	r2, [r3], #4
 801e8dc:	e7d8      	b.n	801e890 <__multiply+0x50>
 801e8de:	f8b1 a000 	ldrh.w	sl, [r1]
 801e8e2:	f1ba 0f00 	cmp.w	sl, #0
 801e8e6:	d024      	beq.n	801e932 <__multiply+0xf2>
 801e8e8:	f104 0e14 	add.w	lr, r4, #20
 801e8ec:	46a9      	mov	r9, r5
 801e8ee:	f04f 0c00 	mov.w	ip, #0
 801e8f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e8f6:	f8d9 3000 	ldr.w	r3, [r9]
 801e8fa:	fa1f fb87 	uxth.w	fp, r7
 801e8fe:	b29b      	uxth	r3, r3
 801e900:	fb0a 330b 	mla	r3, sl, fp, r3
 801e904:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801e908:	f8d9 7000 	ldr.w	r7, [r9]
 801e90c:	4463      	add	r3, ip
 801e90e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801e912:	fb0a c70b 	mla	r7, sl, fp, ip
 801e916:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801e91a:	b29b      	uxth	r3, r3
 801e91c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e920:	4572      	cmp	r2, lr
 801e922:	f849 3b04 	str.w	r3, [r9], #4
 801e926:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801e92a:	d8e2      	bhi.n	801e8f2 <__multiply+0xb2>
 801e92c:	9b01      	ldr	r3, [sp, #4]
 801e92e:	f845 c003 	str.w	ip, [r5, r3]
 801e932:	9b03      	ldr	r3, [sp, #12]
 801e934:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801e938:	3104      	adds	r1, #4
 801e93a:	f1b9 0f00 	cmp.w	r9, #0
 801e93e:	d021      	beq.n	801e984 <__multiply+0x144>
 801e940:	682b      	ldr	r3, [r5, #0]
 801e942:	f104 0c14 	add.w	ip, r4, #20
 801e946:	46ae      	mov	lr, r5
 801e948:	f04f 0a00 	mov.w	sl, #0
 801e94c:	f8bc b000 	ldrh.w	fp, [ip]
 801e950:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801e954:	fb09 770b 	mla	r7, r9, fp, r7
 801e958:	4457      	add	r7, sl
 801e95a:	b29b      	uxth	r3, r3
 801e95c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e960:	f84e 3b04 	str.w	r3, [lr], #4
 801e964:	f85c 3b04 	ldr.w	r3, [ip], #4
 801e968:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e96c:	f8be 3000 	ldrh.w	r3, [lr]
 801e970:	fb09 330a 	mla	r3, r9, sl, r3
 801e974:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801e978:	4562      	cmp	r2, ip
 801e97a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e97e:	d8e5      	bhi.n	801e94c <__multiply+0x10c>
 801e980:	9f01      	ldr	r7, [sp, #4]
 801e982:	51eb      	str	r3, [r5, r7]
 801e984:	3504      	adds	r5, #4
 801e986:	e799      	b.n	801e8bc <__multiply+0x7c>
 801e988:	3e01      	subs	r6, #1
 801e98a:	e79b      	b.n	801e8c4 <__multiply+0x84>
 801e98c:	0802286b 	.word	0x0802286b
 801e990:	0802287c 	.word	0x0802287c

0801e994 <__pow5mult>:
 801e994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e998:	4615      	mov	r5, r2
 801e99a:	f012 0203 	ands.w	r2, r2, #3
 801e99e:	4607      	mov	r7, r0
 801e9a0:	460e      	mov	r6, r1
 801e9a2:	d007      	beq.n	801e9b4 <__pow5mult+0x20>
 801e9a4:	4c25      	ldr	r4, [pc, #148]	@ (801ea3c <__pow5mult+0xa8>)
 801e9a6:	3a01      	subs	r2, #1
 801e9a8:	2300      	movs	r3, #0
 801e9aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e9ae:	f7ff fe9f 	bl	801e6f0 <__multadd>
 801e9b2:	4606      	mov	r6, r0
 801e9b4:	10ad      	asrs	r5, r5, #2
 801e9b6:	d03d      	beq.n	801ea34 <__pow5mult+0xa0>
 801e9b8:	69fc      	ldr	r4, [r7, #28]
 801e9ba:	b97c      	cbnz	r4, 801e9dc <__pow5mult+0x48>
 801e9bc:	2010      	movs	r0, #16
 801e9be:	f7ff fd7f 	bl	801e4c0 <malloc>
 801e9c2:	4602      	mov	r2, r0
 801e9c4:	61f8      	str	r0, [r7, #28]
 801e9c6:	b928      	cbnz	r0, 801e9d4 <__pow5mult+0x40>
 801e9c8:	4b1d      	ldr	r3, [pc, #116]	@ (801ea40 <__pow5mult+0xac>)
 801e9ca:	481e      	ldr	r0, [pc, #120]	@ (801ea44 <__pow5mult+0xb0>)
 801e9cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801e9d0:	f7fe ff2e 	bl	801d830 <__assert_func>
 801e9d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e9d8:	6004      	str	r4, [r0, #0]
 801e9da:	60c4      	str	r4, [r0, #12]
 801e9dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801e9e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e9e4:	b94c      	cbnz	r4, 801e9fa <__pow5mult+0x66>
 801e9e6:	f240 2171 	movw	r1, #625	@ 0x271
 801e9ea:	4638      	mov	r0, r7
 801e9ec:	f7ff ff12 	bl	801e814 <__i2b>
 801e9f0:	2300      	movs	r3, #0
 801e9f2:	f8c8 0008 	str.w	r0, [r8, #8]
 801e9f6:	4604      	mov	r4, r0
 801e9f8:	6003      	str	r3, [r0, #0]
 801e9fa:	f04f 0900 	mov.w	r9, #0
 801e9fe:	07eb      	lsls	r3, r5, #31
 801ea00:	d50a      	bpl.n	801ea18 <__pow5mult+0x84>
 801ea02:	4631      	mov	r1, r6
 801ea04:	4622      	mov	r2, r4
 801ea06:	4638      	mov	r0, r7
 801ea08:	f7ff ff1a 	bl	801e840 <__multiply>
 801ea0c:	4631      	mov	r1, r6
 801ea0e:	4680      	mov	r8, r0
 801ea10:	4638      	mov	r0, r7
 801ea12:	f7ff fe4b 	bl	801e6ac <_Bfree>
 801ea16:	4646      	mov	r6, r8
 801ea18:	106d      	asrs	r5, r5, #1
 801ea1a:	d00b      	beq.n	801ea34 <__pow5mult+0xa0>
 801ea1c:	6820      	ldr	r0, [r4, #0]
 801ea1e:	b938      	cbnz	r0, 801ea30 <__pow5mult+0x9c>
 801ea20:	4622      	mov	r2, r4
 801ea22:	4621      	mov	r1, r4
 801ea24:	4638      	mov	r0, r7
 801ea26:	f7ff ff0b 	bl	801e840 <__multiply>
 801ea2a:	6020      	str	r0, [r4, #0]
 801ea2c:	f8c0 9000 	str.w	r9, [r0]
 801ea30:	4604      	mov	r4, r0
 801ea32:	e7e4      	b.n	801e9fe <__pow5mult+0x6a>
 801ea34:	4630      	mov	r0, r6
 801ea36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ea3a:	bf00      	nop
 801ea3c:	080228d8 	.word	0x080228d8
 801ea40:	08022626 	.word	0x08022626
 801ea44:	0802287c 	.word	0x0802287c

0801ea48 <__lshift>:
 801ea48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea4c:	460c      	mov	r4, r1
 801ea4e:	6849      	ldr	r1, [r1, #4]
 801ea50:	6923      	ldr	r3, [r4, #16]
 801ea52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ea56:	68a3      	ldr	r3, [r4, #8]
 801ea58:	4607      	mov	r7, r0
 801ea5a:	4691      	mov	r9, r2
 801ea5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ea60:	f108 0601 	add.w	r6, r8, #1
 801ea64:	42b3      	cmp	r3, r6
 801ea66:	db0b      	blt.n	801ea80 <__lshift+0x38>
 801ea68:	4638      	mov	r0, r7
 801ea6a:	f7ff fddf 	bl	801e62c <_Balloc>
 801ea6e:	4605      	mov	r5, r0
 801ea70:	b948      	cbnz	r0, 801ea86 <__lshift+0x3e>
 801ea72:	4602      	mov	r2, r0
 801ea74:	4b28      	ldr	r3, [pc, #160]	@ (801eb18 <__lshift+0xd0>)
 801ea76:	4829      	ldr	r0, [pc, #164]	@ (801eb1c <__lshift+0xd4>)
 801ea78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801ea7c:	f7fe fed8 	bl	801d830 <__assert_func>
 801ea80:	3101      	adds	r1, #1
 801ea82:	005b      	lsls	r3, r3, #1
 801ea84:	e7ee      	b.n	801ea64 <__lshift+0x1c>
 801ea86:	2300      	movs	r3, #0
 801ea88:	f100 0114 	add.w	r1, r0, #20
 801ea8c:	f100 0210 	add.w	r2, r0, #16
 801ea90:	4618      	mov	r0, r3
 801ea92:	4553      	cmp	r3, sl
 801ea94:	db33      	blt.n	801eafe <__lshift+0xb6>
 801ea96:	6920      	ldr	r0, [r4, #16]
 801ea98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ea9c:	f104 0314 	add.w	r3, r4, #20
 801eaa0:	f019 091f 	ands.w	r9, r9, #31
 801eaa4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801eaa8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801eaac:	d02b      	beq.n	801eb06 <__lshift+0xbe>
 801eaae:	f1c9 0e20 	rsb	lr, r9, #32
 801eab2:	468a      	mov	sl, r1
 801eab4:	2200      	movs	r2, #0
 801eab6:	6818      	ldr	r0, [r3, #0]
 801eab8:	fa00 f009 	lsl.w	r0, r0, r9
 801eabc:	4310      	orrs	r0, r2
 801eabe:	f84a 0b04 	str.w	r0, [sl], #4
 801eac2:	f853 2b04 	ldr.w	r2, [r3], #4
 801eac6:	459c      	cmp	ip, r3
 801eac8:	fa22 f20e 	lsr.w	r2, r2, lr
 801eacc:	d8f3      	bhi.n	801eab6 <__lshift+0x6e>
 801eace:	ebac 0304 	sub.w	r3, ip, r4
 801ead2:	3b15      	subs	r3, #21
 801ead4:	f023 0303 	bic.w	r3, r3, #3
 801ead8:	3304      	adds	r3, #4
 801eada:	f104 0015 	add.w	r0, r4, #21
 801eade:	4584      	cmp	ip, r0
 801eae0:	bf38      	it	cc
 801eae2:	2304      	movcc	r3, #4
 801eae4:	50ca      	str	r2, [r1, r3]
 801eae6:	b10a      	cbz	r2, 801eaec <__lshift+0xa4>
 801eae8:	f108 0602 	add.w	r6, r8, #2
 801eaec:	3e01      	subs	r6, #1
 801eaee:	4638      	mov	r0, r7
 801eaf0:	612e      	str	r6, [r5, #16]
 801eaf2:	4621      	mov	r1, r4
 801eaf4:	f7ff fdda 	bl	801e6ac <_Bfree>
 801eaf8:	4628      	mov	r0, r5
 801eafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eafe:	f842 0f04 	str.w	r0, [r2, #4]!
 801eb02:	3301      	adds	r3, #1
 801eb04:	e7c5      	b.n	801ea92 <__lshift+0x4a>
 801eb06:	3904      	subs	r1, #4
 801eb08:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb0c:	f841 2f04 	str.w	r2, [r1, #4]!
 801eb10:	459c      	cmp	ip, r3
 801eb12:	d8f9      	bhi.n	801eb08 <__lshift+0xc0>
 801eb14:	e7ea      	b.n	801eaec <__lshift+0xa4>
 801eb16:	bf00      	nop
 801eb18:	0802286b 	.word	0x0802286b
 801eb1c:	0802287c 	.word	0x0802287c

0801eb20 <__mcmp>:
 801eb20:	690a      	ldr	r2, [r1, #16]
 801eb22:	4603      	mov	r3, r0
 801eb24:	6900      	ldr	r0, [r0, #16]
 801eb26:	1a80      	subs	r0, r0, r2
 801eb28:	b530      	push	{r4, r5, lr}
 801eb2a:	d10e      	bne.n	801eb4a <__mcmp+0x2a>
 801eb2c:	3314      	adds	r3, #20
 801eb2e:	3114      	adds	r1, #20
 801eb30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801eb34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801eb38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801eb3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801eb40:	4295      	cmp	r5, r2
 801eb42:	d003      	beq.n	801eb4c <__mcmp+0x2c>
 801eb44:	d205      	bcs.n	801eb52 <__mcmp+0x32>
 801eb46:	f04f 30ff 	mov.w	r0, #4294967295
 801eb4a:	bd30      	pop	{r4, r5, pc}
 801eb4c:	42a3      	cmp	r3, r4
 801eb4e:	d3f3      	bcc.n	801eb38 <__mcmp+0x18>
 801eb50:	e7fb      	b.n	801eb4a <__mcmp+0x2a>
 801eb52:	2001      	movs	r0, #1
 801eb54:	e7f9      	b.n	801eb4a <__mcmp+0x2a>
	...

0801eb58 <__mdiff>:
 801eb58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb5c:	4689      	mov	r9, r1
 801eb5e:	4606      	mov	r6, r0
 801eb60:	4611      	mov	r1, r2
 801eb62:	4648      	mov	r0, r9
 801eb64:	4614      	mov	r4, r2
 801eb66:	f7ff ffdb 	bl	801eb20 <__mcmp>
 801eb6a:	1e05      	subs	r5, r0, #0
 801eb6c:	d112      	bne.n	801eb94 <__mdiff+0x3c>
 801eb6e:	4629      	mov	r1, r5
 801eb70:	4630      	mov	r0, r6
 801eb72:	f7ff fd5b 	bl	801e62c <_Balloc>
 801eb76:	4602      	mov	r2, r0
 801eb78:	b928      	cbnz	r0, 801eb86 <__mdiff+0x2e>
 801eb7a:	4b3f      	ldr	r3, [pc, #252]	@ (801ec78 <__mdiff+0x120>)
 801eb7c:	f240 2137 	movw	r1, #567	@ 0x237
 801eb80:	483e      	ldr	r0, [pc, #248]	@ (801ec7c <__mdiff+0x124>)
 801eb82:	f7fe fe55 	bl	801d830 <__assert_func>
 801eb86:	2301      	movs	r3, #1
 801eb88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801eb8c:	4610      	mov	r0, r2
 801eb8e:	b003      	add	sp, #12
 801eb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb94:	bfbc      	itt	lt
 801eb96:	464b      	movlt	r3, r9
 801eb98:	46a1      	movlt	r9, r4
 801eb9a:	4630      	mov	r0, r6
 801eb9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801eba0:	bfba      	itte	lt
 801eba2:	461c      	movlt	r4, r3
 801eba4:	2501      	movlt	r5, #1
 801eba6:	2500      	movge	r5, #0
 801eba8:	f7ff fd40 	bl	801e62c <_Balloc>
 801ebac:	4602      	mov	r2, r0
 801ebae:	b918      	cbnz	r0, 801ebb8 <__mdiff+0x60>
 801ebb0:	4b31      	ldr	r3, [pc, #196]	@ (801ec78 <__mdiff+0x120>)
 801ebb2:	f240 2145 	movw	r1, #581	@ 0x245
 801ebb6:	e7e3      	b.n	801eb80 <__mdiff+0x28>
 801ebb8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801ebbc:	6926      	ldr	r6, [r4, #16]
 801ebbe:	60c5      	str	r5, [r0, #12]
 801ebc0:	f109 0310 	add.w	r3, r9, #16
 801ebc4:	f109 0514 	add.w	r5, r9, #20
 801ebc8:	f104 0e14 	add.w	lr, r4, #20
 801ebcc:	f100 0b14 	add.w	fp, r0, #20
 801ebd0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801ebd4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801ebd8:	9301      	str	r3, [sp, #4]
 801ebda:	46d9      	mov	r9, fp
 801ebdc:	f04f 0c00 	mov.w	ip, #0
 801ebe0:	9b01      	ldr	r3, [sp, #4]
 801ebe2:	f85e 0b04 	ldr.w	r0, [lr], #4
 801ebe6:	f853 af04 	ldr.w	sl, [r3, #4]!
 801ebea:	9301      	str	r3, [sp, #4]
 801ebec:	fa1f f38a 	uxth.w	r3, sl
 801ebf0:	4619      	mov	r1, r3
 801ebf2:	b283      	uxth	r3, r0
 801ebf4:	1acb      	subs	r3, r1, r3
 801ebf6:	0c00      	lsrs	r0, r0, #16
 801ebf8:	4463      	add	r3, ip
 801ebfa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801ebfe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801ec02:	b29b      	uxth	r3, r3
 801ec04:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801ec08:	4576      	cmp	r6, lr
 801ec0a:	f849 3b04 	str.w	r3, [r9], #4
 801ec0e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801ec12:	d8e5      	bhi.n	801ebe0 <__mdiff+0x88>
 801ec14:	1b33      	subs	r3, r6, r4
 801ec16:	3b15      	subs	r3, #21
 801ec18:	f023 0303 	bic.w	r3, r3, #3
 801ec1c:	3415      	adds	r4, #21
 801ec1e:	3304      	adds	r3, #4
 801ec20:	42a6      	cmp	r6, r4
 801ec22:	bf38      	it	cc
 801ec24:	2304      	movcc	r3, #4
 801ec26:	441d      	add	r5, r3
 801ec28:	445b      	add	r3, fp
 801ec2a:	461e      	mov	r6, r3
 801ec2c:	462c      	mov	r4, r5
 801ec2e:	4544      	cmp	r4, r8
 801ec30:	d30e      	bcc.n	801ec50 <__mdiff+0xf8>
 801ec32:	f108 0103 	add.w	r1, r8, #3
 801ec36:	1b49      	subs	r1, r1, r5
 801ec38:	f021 0103 	bic.w	r1, r1, #3
 801ec3c:	3d03      	subs	r5, #3
 801ec3e:	45a8      	cmp	r8, r5
 801ec40:	bf38      	it	cc
 801ec42:	2100      	movcc	r1, #0
 801ec44:	440b      	add	r3, r1
 801ec46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ec4a:	b191      	cbz	r1, 801ec72 <__mdiff+0x11a>
 801ec4c:	6117      	str	r7, [r2, #16]
 801ec4e:	e79d      	b.n	801eb8c <__mdiff+0x34>
 801ec50:	f854 1b04 	ldr.w	r1, [r4], #4
 801ec54:	46e6      	mov	lr, ip
 801ec56:	0c08      	lsrs	r0, r1, #16
 801ec58:	fa1c fc81 	uxtah	ip, ip, r1
 801ec5c:	4471      	add	r1, lr
 801ec5e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801ec62:	b289      	uxth	r1, r1
 801ec64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801ec68:	f846 1b04 	str.w	r1, [r6], #4
 801ec6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801ec70:	e7dd      	b.n	801ec2e <__mdiff+0xd6>
 801ec72:	3f01      	subs	r7, #1
 801ec74:	e7e7      	b.n	801ec46 <__mdiff+0xee>
 801ec76:	bf00      	nop
 801ec78:	0802286b 	.word	0x0802286b
 801ec7c:	0802287c 	.word	0x0802287c

0801ec80 <__d2b>:
 801ec80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ec84:	460f      	mov	r7, r1
 801ec86:	2101      	movs	r1, #1
 801ec88:	ec59 8b10 	vmov	r8, r9, d0
 801ec8c:	4616      	mov	r6, r2
 801ec8e:	f7ff fccd 	bl	801e62c <_Balloc>
 801ec92:	4604      	mov	r4, r0
 801ec94:	b930      	cbnz	r0, 801eca4 <__d2b+0x24>
 801ec96:	4602      	mov	r2, r0
 801ec98:	4b23      	ldr	r3, [pc, #140]	@ (801ed28 <__d2b+0xa8>)
 801ec9a:	4824      	ldr	r0, [pc, #144]	@ (801ed2c <__d2b+0xac>)
 801ec9c:	f240 310f 	movw	r1, #783	@ 0x30f
 801eca0:	f7fe fdc6 	bl	801d830 <__assert_func>
 801eca4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801eca8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ecac:	b10d      	cbz	r5, 801ecb2 <__d2b+0x32>
 801ecae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ecb2:	9301      	str	r3, [sp, #4]
 801ecb4:	f1b8 0300 	subs.w	r3, r8, #0
 801ecb8:	d023      	beq.n	801ed02 <__d2b+0x82>
 801ecba:	4668      	mov	r0, sp
 801ecbc:	9300      	str	r3, [sp, #0]
 801ecbe:	f7ff fd7c 	bl	801e7ba <__lo0bits>
 801ecc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 801ecc6:	b1d0      	cbz	r0, 801ecfe <__d2b+0x7e>
 801ecc8:	f1c0 0320 	rsb	r3, r0, #32
 801eccc:	fa02 f303 	lsl.w	r3, r2, r3
 801ecd0:	430b      	orrs	r3, r1
 801ecd2:	40c2      	lsrs	r2, r0
 801ecd4:	6163      	str	r3, [r4, #20]
 801ecd6:	9201      	str	r2, [sp, #4]
 801ecd8:	9b01      	ldr	r3, [sp, #4]
 801ecda:	61a3      	str	r3, [r4, #24]
 801ecdc:	2b00      	cmp	r3, #0
 801ecde:	bf0c      	ite	eq
 801ece0:	2201      	moveq	r2, #1
 801ece2:	2202      	movne	r2, #2
 801ece4:	6122      	str	r2, [r4, #16]
 801ece6:	b1a5      	cbz	r5, 801ed12 <__d2b+0x92>
 801ece8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801ecec:	4405      	add	r5, r0
 801ecee:	603d      	str	r5, [r7, #0]
 801ecf0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801ecf4:	6030      	str	r0, [r6, #0]
 801ecf6:	4620      	mov	r0, r4
 801ecf8:	b003      	add	sp, #12
 801ecfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ecfe:	6161      	str	r1, [r4, #20]
 801ed00:	e7ea      	b.n	801ecd8 <__d2b+0x58>
 801ed02:	a801      	add	r0, sp, #4
 801ed04:	f7ff fd59 	bl	801e7ba <__lo0bits>
 801ed08:	9b01      	ldr	r3, [sp, #4]
 801ed0a:	6163      	str	r3, [r4, #20]
 801ed0c:	3020      	adds	r0, #32
 801ed0e:	2201      	movs	r2, #1
 801ed10:	e7e8      	b.n	801ece4 <__d2b+0x64>
 801ed12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ed16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801ed1a:	6038      	str	r0, [r7, #0]
 801ed1c:	6918      	ldr	r0, [r3, #16]
 801ed1e:	f7ff fd2d 	bl	801e77c <__hi0bits>
 801ed22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ed26:	e7e5      	b.n	801ecf4 <__d2b+0x74>
 801ed28:	0802286b 	.word	0x0802286b
 801ed2c:	0802287c 	.word	0x0802287c

0801ed30 <__sfputc_r>:
 801ed30:	6893      	ldr	r3, [r2, #8]
 801ed32:	3b01      	subs	r3, #1
 801ed34:	2b00      	cmp	r3, #0
 801ed36:	b410      	push	{r4}
 801ed38:	6093      	str	r3, [r2, #8]
 801ed3a:	da08      	bge.n	801ed4e <__sfputc_r+0x1e>
 801ed3c:	6994      	ldr	r4, [r2, #24]
 801ed3e:	42a3      	cmp	r3, r4
 801ed40:	db01      	blt.n	801ed46 <__sfputc_r+0x16>
 801ed42:	290a      	cmp	r1, #10
 801ed44:	d103      	bne.n	801ed4e <__sfputc_r+0x1e>
 801ed46:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ed4a:	f7fe bbee 	b.w	801d52a <__swbuf_r>
 801ed4e:	6813      	ldr	r3, [r2, #0]
 801ed50:	1c58      	adds	r0, r3, #1
 801ed52:	6010      	str	r0, [r2, #0]
 801ed54:	7019      	strb	r1, [r3, #0]
 801ed56:	4608      	mov	r0, r1
 801ed58:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ed5c:	4770      	bx	lr

0801ed5e <__sfputs_r>:
 801ed5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed60:	4606      	mov	r6, r0
 801ed62:	460f      	mov	r7, r1
 801ed64:	4614      	mov	r4, r2
 801ed66:	18d5      	adds	r5, r2, r3
 801ed68:	42ac      	cmp	r4, r5
 801ed6a:	d101      	bne.n	801ed70 <__sfputs_r+0x12>
 801ed6c:	2000      	movs	r0, #0
 801ed6e:	e007      	b.n	801ed80 <__sfputs_r+0x22>
 801ed70:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ed74:	463a      	mov	r2, r7
 801ed76:	4630      	mov	r0, r6
 801ed78:	f7ff ffda 	bl	801ed30 <__sfputc_r>
 801ed7c:	1c43      	adds	r3, r0, #1
 801ed7e:	d1f3      	bne.n	801ed68 <__sfputs_r+0xa>
 801ed80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ed84 <_vfiprintf_r>:
 801ed84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed88:	460d      	mov	r5, r1
 801ed8a:	b09d      	sub	sp, #116	@ 0x74
 801ed8c:	4614      	mov	r4, r2
 801ed8e:	4698      	mov	r8, r3
 801ed90:	4606      	mov	r6, r0
 801ed92:	b118      	cbz	r0, 801ed9c <_vfiprintf_r+0x18>
 801ed94:	6a03      	ldr	r3, [r0, #32]
 801ed96:	b90b      	cbnz	r3, 801ed9c <_vfiprintf_r+0x18>
 801ed98:	f7fe fade 	bl	801d358 <__sinit>
 801ed9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ed9e:	07d9      	lsls	r1, r3, #31
 801eda0:	d405      	bmi.n	801edae <_vfiprintf_r+0x2a>
 801eda2:	89ab      	ldrh	r3, [r5, #12]
 801eda4:	059a      	lsls	r2, r3, #22
 801eda6:	d402      	bmi.n	801edae <_vfiprintf_r+0x2a>
 801eda8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801edaa:	f7fe fd30 	bl	801d80e <__retarget_lock_acquire_recursive>
 801edae:	89ab      	ldrh	r3, [r5, #12]
 801edb0:	071b      	lsls	r3, r3, #28
 801edb2:	d501      	bpl.n	801edb8 <_vfiprintf_r+0x34>
 801edb4:	692b      	ldr	r3, [r5, #16]
 801edb6:	b99b      	cbnz	r3, 801ede0 <_vfiprintf_r+0x5c>
 801edb8:	4629      	mov	r1, r5
 801edba:	4630      	mov	r0, r6
 801edbc:	f7fe fbf4 	bl	801d5a8 <__swsetup_r>
 801edc0:	b170      	cbz	r0, 801ede0 <_vfiprintf_r+0x5c>
 801edc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801edc4:	07dc      	lsls	r4, r3, #31
 801edc6:	d504      	bpl.n	801edd2 <_vfiprintf_r+0x4e>
 801edc8:	f04f 30ff 	mov.w	r0, #4294967295
 801edcc:	b01d      	add	sp, #116	@ 0x74
 801edce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edd2:	89ab      	ldrh	r3, [r5, #12]
 801edd4:	0598      	lsls	r0, r3, #22
 801edd6:	d4f7      	bmi.n	801edc8 <_vfiprintf_r+0x44>
 801edd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801edda:	f7fe fd19 	bl	801d810 <__retarget_lock_release_recursive>
 801edde:	e7f3      	b.n	801edc8 <_vfiprintf_r+0x44>
 801ede0:	2300      	movs	r3, #0
 801ede2:	9309      	str	r3, [sp, #36]	@ 0x24
 801ede4:	2320      	movs	r3, #32
 801ede6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801edea:	f8cd 800c 	str.w	r8, [sp, #12]
 801edee:	2330      	movs	r3, #48	@ 0x30
 801edf0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801efa0 <_vfiprintf_r+0x21c>
 801edf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801edf8:	f04f 0901 	mov.w	r9, #1
 801edfc:	4623      	mov	r3, r4
 801edfe:	469a      	mov	sl, r3
 801ee00:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ee04:	b10a      	cbz	r2, 801ee0a <_vfiprintf_r+0x86>
 801ee06:	2a25      	cmp	r2, #37	@ 0x25
 801ee08:	d1f9      	bne.n	801edfe <_vfiprintf_r+0x7a>
 801ee0a:	ebba 0b04 	subs.w	fp, sl, r4
 801ee0e:	d00b      	beq.n	801ee28 <_vfiprintf_r+0xa4>
 801ee10:	465b      	mov	r3, fp
 801ee12:	4622      	mov	r2, r4
 801ee14:	4629      	mov	r1, r5
 801ee16:	4630      	mov	r0, r6
 801ee18:	f7ff ffa1 	bl	801ed5e <__sfputs_r>
 801ee1c:	3001      	adds	r0, #1
 801ee1e:	f000 80a7 	beq.w	801ef70 <_vfiprintf_r+0x1ec>
 801ee22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ee24:	445a      	add	r2, fp
 801ee26:	9209      	str	r2, [sp, #36]	@ 0x24
 801ee28:	f89a 3000 	ldrb.w	r3, [sl]
 801ee2c:	2b00      	cmp	r3, #0
 801ee2e:	f000 809f 	beq.w	801ef70 <_vfiprintf_r+0x1ec>
 801ee32:	2300      	movs	r3, #0
 801ee34:	f04f 32ff 	mov.w	r2, #4294967295
 801ee38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ee3c:	f10a 0a01 	add.w	sl, sl, #1
 801ee40:	9304      	str	r3, [sp, #16]
 801ee42:	9307      	str	r3, [sp, #28]
 801ee44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ee48:	931a      	str	r3, [sp, #104]	@ 0x68
 801ee4a:	4654      	mov	r4, sl
 801ee4c:	2205      	movs	r2, #5
 801ee4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ee52:	4853      	ldr	r0, [pc, #332]	@ (801efa0 <_vfiprintf_r+0x21c>)
 801ee54:	f7e1 fa5c 	bl	8000310 <memchr>
 801ee58:	9a04      	ldr	r2, [sp, #16]
 801ee5a:	b9d8      	cbnz	r0, 801ee94 <_vfiprintf_r+0x110>
 801ee5c:	06d1      	lsls	r1, r2, #27
 801ee5e:	bf44      	itt	mi
 801ee60:	2320      	movmi	r3, #32
 801ee62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ee66:	0713      	lsls	r3, r2, #28
 801ee68:	bf44      	itt	mi
 801ee6a:	232b      	movmi	r3, #43	@ 0x2b
 801ee6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ee70:	f89a 3000 	ldrb.w	r3, [sl]
 801ee74:	2b2a      	cmp	r3, #42	@ 0x2a
 801ee76:	d015      	beq.n	801eea4 <_vfiprintf_r+0x120>
 801ee78:	9a07      	ldr	r2, [sp, #28]
 801ee7a:	4654      	mov	r4, sl
 801ee7c:	2000      	movs	r0, #0
 801ee7e:	f04f 0c0a 	mov.w	ip, #10
 801ee82:	4621      	mov	r1, r4
 801ee84:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ee88:	3b30      	subs	r3, #48	@ 0x30
 801ee8a:	2b09      	cmp	r3, #9
 801ee8c:	d94b      	bls.n	801ef26 <_vfiprintf_r+0x1a2>
 801ee8e:	b1b0      	cbz	r0, 801eebe <_vfiprintf_r+0x13a>
 801ee90:	9207      	str	r2, [sp, #28]
 801ee92:	e014      	b.n	801eebe <_vfiprintf_r+0x13a>
 801ee94:	eba0 0308 	sub.w	r3, r0, r8
 801ee98:	fa09 f303 	lsl.w	r3, r9, r3
 801ee9c:	4313      	orrs	r3, r2
 801ee9e:	9304      	str	r3, [sp, #16]
 801eea0:	46a2      	mov	sl, r4
 801eea2:	e7d2      	b.n	801ee4a <_vfiprintf_r+0xc6>
 801eea4:	9b03      	ldr	r3, [sp, #12]
 801eea6:	1d19      	adds	r1, r3, #4
 801eea8:	681b      	ldr	r3, [r3, #0]
 801eeaa:	9103      	str	r1, [sp, #12]
 801eeac:	2b00      	cmp	r3, #0
 801eeae:	bfbb      	ittet	lt
 801eeb0:	425b      	neglt	r3, r3
 801eeb2:	f042 0202 	orrlt.w	r2, r2, #2
 801eeb6:	9307      	strge	r3, [sp, #28]
 801eeb8:	9307      	strlt	r3, [sp, #28]
 801eeba:	bfb8      	it	lt
 801eebc:	9204      	strlt	r2, [sp, #16]
 801eebe:	7823      	ldrb	r3, [r4, #0]
 801eec0:	2b2e      	cmp	r3, #46	@ 0x2e
 801eec2:	d10a      	bne.n	801eeda <_vfiprintf_r+0x156>
 801eec4:	7863      	ldrb	r3, [r4, #1]
 801eec6:	2b2a      	cmp	r3, #42	@ 0x2a
 801eec8:	d132      	bne.n	801ef30 <_vfiprintf_r+0x1ac>
 801eeca:	9b03      	ldr	r3, [sp, #12]
 801eecc:	1d1a      	adds	r2, r3, #4
 801eece:	681b      	ldr	r3, [r3, #0]
 801eed0:	9203      	str	r2, [sp, #12]
 801eed2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801eed6:	3402      	adds	r4, #2
 801eed8:	9305      	str	r3, [sp, #20]
 801eeda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801efb0 <_vfiprintf_r+0x22c>
 801eede:	7821      	ldrb	r1, [r4, #0]
 801eee0:	2203      	movs	r2, #3
 801eee2:	4650      	mov	r0, sl
 801eee4:	f7e1 fa14 	bl	8000310 <memchr>
 801eee8:	b138      	cbz	r0, 801eefa <_vfiprintf_r+0x176>
 801eeea:	9b04      	ldr	r3, [sp, #16]
 801eeec:	eba0 000a 	sub.w	r0, r0, sl
 801eef0:	2240      	movs	r2, #64	@ 0x40
 801eef2:	4082      	lsls	r2, r0
 801eef4:	4313      	orrs	r3, r2
 801eef6:	3401      	adds	r4, #1
 801eef8:	9304      	str	r3, [sp, #16]
 801eefa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eefe:	4829      	ldr	r0, [pc, #164]	@ (801efa4 <_vfiprintf_r+0x220>)
 801ef00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ef04:	2206      	movs	r2, #6
 801ef06:	f7e1 fa03 	bl	8000310 <memchr>
 801ef0a:	2800      	cmp	r0, #0
 801ef0c:	d03f      	beq.n	801ef8e <_vfiprintf_r+0x20a>
 801ef0e:	4b26      	ldr	r3, [pc, #152]	@ (801efa8 <_vfiprintf_r+0x224>)
 801ef10:	bb1b      	cbnz	r3, 801ef5a <_vfiprintf_r+0x1d6>
 801ef12:	9b03      	ldr	r3, [sp, #12]
 801ef14:	3307      	adds	r3, #7
 801ef16:	f023 0307 	bic.w	r3, r3, #7
 801ef1a:	3308      	adds	r3, #8
 801ef1c:	9303      	str	r3, [sp, #12]
 801ef1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ef20:	443b      	add	r3, r7
 801ef22:	9309      	str	r3, [sp, #36]	@ 0x24
 801ef24:	e76a      	b.n	801edfc <_vfiprintf_r+0x78>
 801ef26:	fb0c 3202 	mla	r2, ip, r2, r3
 801ef2a:	460c      	mov	r4, r1
 801ef2c:	2001      	movs	r0, #1
 801ef2e:	e7a8      	b.n	801ee82 <_vfiprintf_r+0xfe>
 801ef30:	2300      	movs	r3, #0
 801ef32:	3401      	adds	r4, #1
 801ef34:	9305      	str	r3, [sp, #20]
 801ef36:	4619      	mov	r1, r3
 801ef38:	f04f 0c0a 	mov.w	ip, #10
 801ef3c:	4620      	mov	r0, r4
 801ef3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ef42:	3a30      	subs	r2, #48	@ 0x30
 801ef44:	2a09      	cmp	r2, #9
 801ef46:	d903      	bls.n	801ef50 <_vfiprintf_r+0x1cc>
 801ef48:	2b00      	cmp	r3, #0
 801ef4a:	d0c6      	beq.n	801eeda <_vfiprintf_r+0x156>
 801ef4c:	9105      	str	r1, [sp, #20]
 801ef4e:	e7c4      	b.n	801eeda <_vfiprintf_r+0x156>
 801ef50:	fb0c 2101 	mla	r1, ip, r1, r2
 801ef54:	4604      	mov	r4, r0
 801ef56:	2301      	movs	r3, #1
 801ef58:	e7f0      	b.n	801ef3c <_vfiprintf_r+0x1b8>
 801ef5a:	ab03      	add	r3, sp, #12
 801ef5c:	9300      	str	r3, [sp, #0]
 801ef5e:	462a      	mov	r2, r5
 801ef60:	4b12      	ldr	r3, [pc, #72]	@ (801efac <_vfiprintf_r+0x228>)
 801ef62:	a904      	add	r1, sp, #16
 801ef64:	4630      	mov	r0, r6
 801ef66:	f7fd fdc3 	bl	801caf0 <_printf_float>
 801ef6a:	4607      	mov	r7, r0
 801ef6c:	1c78      	adds	r0, r7, #1
 801ef6e:	d1d6      	bne.n	801ef1e <_vfiprintf_r+0x19a>
 801ef70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ef72:	07d9      	lsls	r1, r3, #31
 801ef74:	d405      	bmi.n	801ef82 <_vfiprintf_r+0x1fe>
 801ef76:	89ab      	ldrh	r3, [r5, #12]
 801ef78:	059a      	lsls	r2, r3, #22
 801ef7a:	d402      	bmi.n	801ef82 <_vfiprintf_r+0x1fe>
 801ef7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ef7e:	f7fe fc47 	bl	801d810 <__retarget_lock_release_recursive>
 801ef82:	89ab      	ldrh	r3, [r5, #12]
 801ef84:	065b      	lsls	r3, r3, #25
 801ef86:	f53f af1f 	bmi.w	801edc8 <_vfiprintf_r+0x44>
 801ef8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ef8c:	e71e      	b.n	801edcc <_vfiprintf_r+0x48>
 801ef8e:	ab03      	add	r3, sp, #12
 801ef90:	9300      	str	r3, [sp, #0]
 801ef92:	462a      	mov	r2, r5
 801ef94:	4b05      	ldr	r3, [pc, #20]	@ (801efac <_vfiprintf_r+0x228>)
 801ef96:	a904      	add	r1, sp, #16
 801ef98:	4630      	mov	r0, r6
 801ef9a:	f7fe f831 	bl	801d000 <_printf_i>
 801ef9e:	e7e4      	b.n	801ef6a <_vfiprintf_r+0x1e6>
 801efa0:	080229d8 	.word	0x080229d8
 801efa4:	080229e2 	.word	0x080229e2
 801efa8:	0801caf1 	.word	0x0801caf1
 801efac:	0801ed5f 	.word	0x0801ed5f
 801efb0:	080229de 	.word	0x080229de

0801efb4 <__sflush_r>:
 801efb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801efb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801efbc:	0716      	lsls	r6, r2, #28
 801efbe:	4605      	mov	r5, r0
 801efc0:	460c      	mov	r4, r1
 801efc2:	d454      	bmi.n	801f06e <__sflush_r+0xba>
 801efc4:	684b      	ldr	r3, [r1, #4]
 801efc6:	2b00      	cmp	r3, #0
 801efc8:	dc02      	bgt.n	801efd0 <__sflush_r+0x1c>
 801efca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801efcc:	2b00      	cmp	r3, #0
 801efce:	dd48      	ble.n	801f062 <__sflush_r+0xae>
 801efd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801efd2:	2e00      	cmp	r6, #0
 801efd4:	d045      	beq.n	801f062 <__sflush_r+0xae>
 801efd6:	2300      	movs	r3, #0
 801efd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801efdc:	682f      	ldr	r7, [r5, #0]
 801efde:	6a21      	ldr	r1, [r4, #32]
 801efe0:	602b      	str	r3, [r5, #0]
 801efe2:	d030      	beq.n	801f046 <__sflush_r+0x92>
 801efe4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801efe6:	89a3      	ldrh	r3, [r4, #12]
 801efe8:	0759      	lsls	r1, r3, #29
 801efea:	d505      	bpl.n	801eff8 <__sflush_r+0x44>
 801efec:	6863      	ldr	r3, [r4, #4]
 801efee:	1ad2      	subs	r2, r2, r3
 801eff0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801eff2:	b10b      	cbz	r3, 801eff8 <__sflush_r+0x44>
 801eff4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801eff6:	1ad2      	subs	r2, r2, r3
 801eff8:	2300      	movs	r3, #0
 801effa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801effc:	6a21      	ldr	r1, [r4, #32]
 801effe:	4628      	mov	r0, r5
 801f000:	47b0      	blx	r6
 801f002:	1c43      	adds	r3, r0, #1
 801f004:	89a3      	ldrh	r3, [r4, #12]
 801f006:	d106      	bne.n	801f016 <__sflush_r+0x62>
 801f008:	6829      	ldr	r1, [r5, #0]
 801f00a:	291d      	cmp	r1, #29
 801f00c:	d82b      	bhi.n	801f066 <__sflush_r+0xb2>
 801f00e:	4a2a      	ldr	r2, [pc, #168]	@ (801f0b8 <__sflush_r+0x104>)
 801f010:	410a      	asrs	r2, r1
 801f012:	07d6      	lsls	r6, r2, #31
 801f014:	d427      	bmi.n	801f066 <__sflush_r+0xb2>
 801f016:	2200      	movs	r2, #0
 801f018:	6062      	str	r2, [r4, #4]
 801f01a:	04d9      	lsls	r1, r3, #19
 801f01c:	6922      	ldr	r2, [r4, #16]
 801f01e:	6022      	str	r2, [r4, #0]
 801f020:	d504      	bpl.n	801f02c <__sflush_r+0x78>
 801f022:	1c42      	adds	r2, r0, #1
 801f024:	d101      	bne.n	801f02a <__sflush_r+0x76>
 801f026:	682b      	ldr	r3, [r5, #0]
 801f028:	b903      	cbnz	r3, 801f02c <__sflush_r+0x78>
 801f02a:	6560      	str	r0, [r4, #84]	@ 0x54
 801f02c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f02e:	602f      	str	r7, [r5, #0]
 801f030:	b1b9      	cbz	r1, 801f062 <__sflush_r+0xae>
 801f032:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f036:	4299      	cmp	r1, r3
 801f038:	d002      	beq.n	801f040 <__sflush_r+0x8c>
 801f03a:	4628      	mov	r0, r5
 801f03c:	f7ff f9f6 	bl	801e42c <_free_r>
 801f040:	2300      	movs	r3, #0
 801f042:	6363      	str	r3, [r4, #52]	@ 0x34
 801f044:	e00d      	b.n	801f062 <__sflush_r+0xae>
 801f046:	2301      	movs	r3, #1
 801f048:	4628      	mov	r0, r5
 801f04a:	47b0      	blx	r6
 801f04c:	4602      	mov	r2, r0
 801f04e:	1c50      	adds	r0, r2, #1
 801f050:	d1c9      	bne.n	801efe6 <__sflush_r+0x32>
 801f052:	682b      	ldr	r3, [r5, #0]
 801f054:	2b00      	cmp	r3, #0
 801f056:	d0c6      	beq.n	801efe6 <__sflush_r+0x32>
 801f058:	2b1d      	cmp	r3, #29
 801f05a:	d001      	beq.n	801f060 <__sflush_r+0xac>
 801f05c:	2b16      	cmp	r3, #22
 801f05e:	d11e      	bne.n	801f09e <__sflush_r+0xea>
 801f060:	602f      	str	r7, [r5, #0]
 801f062:	2000      	movs	r0, #0
 801f064:	e022      	b.n	801f0ac <__sflush_r+0xf8>
 801f066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f06a:	b21b      	sxth	r3, r3
 801f06c:	e01b      	b.n	801f0a6 <__sflush_r+0xf2>
 801f06e:	690f      	ldr	r7, [r1, #16]
 801f070:	2f00      	cmp	r7, #0
 801f072:	d0f6      	beq.n	801f062 <__sflush_r+0xae>
 801f074:	0793      	lsls	r3, r2, #30
 801f076:	680e      	ldr	r6, [r1, #0]
 801f078:	bf08      	it	eq
 801f07a:	694b      	ldreq	r3, [r1, #20]
 801f07c:	600f      	str	r7, [r1, #0]
 801f07e:	bf18      	it	ne
 801f080:	2300      	movne	r3, #0
 801f082:	eba6 0807 	sub.w	r8, r6, r7
 801f086:	608b      	str	r3, [r1, #8]
 801f088:	f1b8 0f00 	cmp.w	r8, #0
 801f08c:	dde9      	ble.n	801f062 <__sflush_r+0xae>
 801f08e:	6a21      	ldr	r1, [r4, #32]
 801f090:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801f092:	4643      	mov	r3, r8
 801f094:	463a      	mov	r2, r7
 801f096:	4628      	mov	r0, r5
 801f098:	47b0      	blx	r6
 801f09a:	2800      	cmp	r0, #0
 801f09c:	dc08      	bgt.n	801f0b0 <__sflush_r+0xfc>
 801f09e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f0a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f0a6:	81a3      	strh	r3, [r4, #12]
 801f0a8:	f04f 30ff 	mov.w	r0, #4294967295
 801f0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f0b0:	4407      	add	r7, r0
 801f0b2:	eba8 0800 	sub.w	r8, r8, r0
 801f0b6:	e7e7      	b.n	801f088 <__sflush_r+0xd4>
 801f0b8:	dfbffffe 	.word	0xdfbffffe

0801f0bc <_fflush_r>:
 801f0bc:	b538      	push	{r3, r4, r5, lr}
 801f0be:	690b      	ldr	r3, [r1, #16]
 801f0c0:	4605      	mov	r5, r0
 801f0c2:	460c      	mov	r4, r1
 801f0c4:	b913      	cbnz	r3, 801f0cc <_fflush_r+0x10>
 801f0c6:	2500      	movs	r5, #0
 801f0c8:	4628      	mov	r0, r5
 801f0ca:	bd38      	pop	{r3, r4, r5, pc}
 801f0cc:	b118      	cbz	r0, 801f0d6 <_fflush_r+0x1a>
 801f0ce:	6a03      	ldr	r3, [r0, #32]
 801f0d0:	b90b      	cbnz	r3, 801f0d6 <_fflush_r+0x1a>
 801f0d2:	f7fe f941 	bl	801d358 <__sinit>
 801f0d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f0da:	2b00      	cmp	r3, #0
 801f0dc:	d0f3      	beq.n	801f0c6 <_fflush_r+0xa>
 801f0de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801f0e0:	07d0      	lsls	r0, r2, #31
 801f0e2:	d404      	bmi.n	801f0ee <_fflush_r+0x32>
 801f0e4:	0599      	lsls	r1, r3, #22
 801f0e6:	d402      	bmi.n	801f0ee <_fflush_r+0x32>
 801f0e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f0ea:	f7fe fb90 	bl	801d80e <__retarget_lock_acquire_recursive>
 801f0ee:	4628      	mov	r0, r5
 801f0f0:	4621      	mov	r1, r4
 801f0f2:	f7ff ff5f 	bl	801efb4 <__sflush_r>
 801f0f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f0f8:	07da      	lsls	r2, r3, #31
 801f0fa:	4605      	mov	r5, r0
 801f0fc:	d4e4      	bmi.n	801f0c8 <_fflush_r+0xc>
 801f0fe:	89a3      	ldrh	r3, [r4, #12]
 801f100:	059b      	lsls	r3, r3, #22
 801f102:	d4e1      	bmi.n	801f0c8 <_fflush_r+0xc>
 801f104:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f106:	f7fe fb83 	bl	801d810 <__retarget_lock_release_recursive>
 801f10a:	e7dd      	b.n	801f0c8 <_fflush_r+0xc>

0801f10c <fiprintf>:
 801f10c:	b40e      	push	{r1, r2, r3}
 801f10e:	b503      	push	{r0, r1, lr}
 801f110:	4601      	mov	r1, r0
 801f112:	ab03      	add	r3, sp, #12
 801f114:	4805      	ldr	r0, [pc, #20]	@ (801f12c <fiprintf+0x20>)
 801f116:	f853 2b04 	ldr.w	r2, [r3], #4
 801f11a:	6800      	ldr	r0, [r0, #0]
 801f11c:	9301      	str	r3, [sp, #4]
 801f11e:	f7ff fe31 	bl	801ed84 <_vfiprintf_r>
 801f122:	b002      	add	sp, #8
 801f124:	f85d eb04 	ldr.w	lr, [sp], #4
 801f128:	b003      	add	sp, #12
 801f12a:	4770      	bx	lr
 801f12c:	24000044 	.word	0x24000044

0801f130 <__swhatbuf_r>:
 801f130:	b570      	push	{r4, r5, r6, lr}
 801f132:	460c      	mov	r4, r1
 801f134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f138:	2900      	cmp	r1, #0
 801f13a:	b096      	sub	sp, #88	@ 0x58
 801f13c:	4615      	mov	r5, r2
 801f13e:	461e      	mov	r6, r3
 801f140:	da0d      	bge.n	801f15e <__swhatbuf_r+0x2e>
 801f142:	89a3      	ldrh	r3, [r4, #12]
 801f144:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801f148:	f04f 0100 	mov.w	r1, #0
 801f14c:	bf14      	ite	ne
 801f14e:	2340      	movne	r3, #64	@ 0x40
 801f150:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801f154:	2000      	movs	r0, #0
 801f156:	6031      	str	r1, [r6, #0]
 801f158:	602b      	str	r3, [r5, #0]
 801f15a:	b016      	add	sp, #88	@ 0x58
 801f15c:	bd70      	pop	{r4, r5, r6, pc}
 801f15e:	466a      	mov	r2, sp
 801f160:	f000 f848 	bl	801f1f4 <_fstat_r>
 801f164:	2800      	cmp	r0, #0
 801f166:	dbec      	blt.n	801f142 <__swhatbuf_r+0x12>
 801f168:	9901      	ldr	r1, [sp, #4]
 801f16a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801f16e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801f172:	4259      	negs	r1, r3
 801f174:	4159      	adcs	r1, r3
 801f176:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f17a:	e7eb      	b.n	801f154 <__swhatbuf_r+0x24>

0801f17c <__smakebuf_r>:
 801f17c:	898b      	ldrh	r3, [r1, #12]
 801f17e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f180:	079d      	lsls	r5, r3, #30
 801f182:	4606      	mov	r6, r0
 801f184:	460c      	mov	r4, r1
 801f186:	d507      	bpl.n	801f198 <__smakebuf_r+0x1c>
 801f188:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801f18c:	6023      	str	r3, [r4, #0]
 801f18e:	6123      	str	r3, [r4, #16]
 801f190:	2301      	movs	r3, #1
 801f192:	6163      	str	r3, [r4, #20]
 801f194:	b003      	add	sp, #12
 801f196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f198:	ab01      	add	r3, sp, #4
 801f19a:	466a      	mov	r2, sp
 801f19c:	f7ff ffc8 	bl	801f130 <__swhatbuf_r>
 801f1a0:	9f00      	ldr	r7, [sp, #0]
 801f1a2:	4605      	mov	r5, r0
 801f1a4:	4639      	mov	r1, r7
 801f1a6:	4630      	mov	r0, r6
 801f1a8:	f7ff f9b4 	bl	801e514 <_malloc_r>
 801f1ac:	b948      	cbnz	r0, 801f1c2 <__smakebuf_r+0x46>
 801f1ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f1b2:	059a      	lsls	r2, r3, #22
 801f1b4:	d4ee      	bmi.n	801f194 <__smakebuf_r+0x18>
 801f1b6:	f023 0303 	bic.w	r3, r3, #3
 801f1ba:	f043 0302 	orr.w	r3, r3, #2
 801f1be:	81a3      	strh	r3, [r4, #12]
 801f1c0:	e7e2      	b.n	801f188 <__smakebuf_r+0xc>
 801f1c2:	89a3      	ldrh	r3, [r4, #12]
 801f1c4:	6020      	str	r0, [r4, #0]
 801f1c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f1ca:	81a3      	strh	r3, [r4, #12]
 801f1cc:	9b01      	ldr	r3, [sp, #4]
 801f1ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801f1d2:	b15b      	cbz	r3, 801f1ec <__smakebuf_r+0x70>
 801f1d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f1d8:	4630      	mov	r0, r6
 801f1da:	f000 f81d 	bl	801f218 <_isatty_r>
 801f1de:	b128      	cbz	r0, 801f1ec <__smakebuf_r+0x70>
 801f1e0:	89a3      	ldrh	r3, [r4, #12]
 801f1e2:	f023 0303 	bic.w	r3, r3, #3
 801f1e6:	f043 0301 	orr.w	r3, r3, #1
 801f1ea:	81a3      	strh	r3, [r4, #12]
 801f1ec:	89a3      	ldrh	r3, [r4, #12]
 801f1ee:	431d      	orrs	r5, r3
 801f1f0:	81a5      	strh	r5, [r4, #12]
 801f1f2:	e7cf      	b.n	801f194 <__smakebuf_r+0x18>

0801f1f4 <_fstat_r>:
 801f1f4:	b538      	push	{r3, r4, r5, lr}
 801f1f6:	4d07      	ldr	r5, [pc, #28]	@ (801f214 <_fstat_r+0x20>)
 801f1f8:	2300      	movs	r3, #0
 801f1fa:	4604      	mov	r4, r0
 801f1fc:	4608      	mov	r0, r1
 801f1fe:	4611      	mov	r1, r2
 801f200:	602b      	str	r3, [r5, #0]
 801f202:	f7e2 fb2b 	bl	800185c <_fstat>
 801f206:	1c43      	adds	r3, r0, #1
 801f208:	d102      	bne.n	801f210 <_fstat_r+0x1c>
 801f20a:	682b      	ldr	r3, [r5, #0]
 801f20c:	b103      	cbz	r3, 801f210 <_fstat_r+0x1c>
 801f20e:	6023      	str	r3, [r4, #0]
 801f210:	bd38      	pop	{r3, r4, r5, pc}
 801f212:	bf00      	nop
 801f214:	2400cf04 	.word	0x2400cf04

0801f218 <_isatty_r>:
 801f218:	b538      	push	{r3, r4, r5, lr}
 801f21a:	4d06      	ldr	r5, [pc, #24]	@ (801f234 <_isatty_r+0x1c>)
 801f21c:	2300      	movs	r3, #0
 801f21e:	4604      	mov	r4, r0
 801f220:	4608      	mov	r0, r1
 801f222:	602b      	str	r3, [r5, #0]
 801f224:	f7e2 fb2a 	bl	800187c <_isatty>
 801f228:	1c43      	adds	r3, r0, #1
 801f22a:	d102      	bne.n	801f232 <_isatty_r+0x1a>
 801f22c:	682b      	ldr	r3, [r5, #0]
 801f22e:	b103      	cbz	r3, 801f232 <_isatty_r+0x1a>
 801f230:	6023      	str	r3, [r4, #0]
 801f232:	bd38      	pop	{r3, r4, r5, pc}
 801f234:	2400cf04 	.word	0x2400cf04

0801f238 <_sbrk_r>:
 801f238:	b538      	push	{r3, r4, r5, lr}
 801f23a:	4d06      	ldr	r5, [pc, #24]	@ (801f254 <_sbrk_r+0x1c>)
 801f23c:	2300      	movs	r3, #0
 801f23e:	4604      	mov	r4, r0
 801f240:	4608      	mov	r0, r1
 801f242:	602b      	str	r3, [r5, #0]
 801f244:	f7e2 fb32 	bl	80018ac <_sbrk>
 801f248:	1c43      	adds	r3, r0, #1
 801f24a:	d102      	bne.n	801f252 <_sbrk_r+0x1a>
 801f24c:	682b      	ldr	r3, [r5, #0]
 801f24e:	b103      	cbz	r3, 801f252 <_sbrk_r+0x1a>
 801f250:	6023      	str	r3, [r4, #0]
 801f252:	bd38      	pop	{r3, r4, r5, pc}
 801f254:	2400cf04 	.word	0x2400cf04

0801f258 <abort>:
 801f258:	b508      	push	{r3, lr}
 801f25a:	2006      	movs	r0, #6
 801f25c:	f000 f85e 	bl	801f31c <raise>
 801f260:	2001      	movs	r0, #1
 801f262:	f7e2 fac7 	bl	80017f4 <_exit>

0801f266 <_calloc_r>:
 801f266:	b570      	push	{r4, r5, r6, lr}
 801f268:	fba1 5402 	umull	r5, r4, r1, r2
 801f26c:	b93c      	cbnz	r4, 801f27e <_calloc_r+0x18>
 801f26e:	4629      	mov	r1, r5
 801f270:	f7ff f950 	bl	801e514 <_malloc_r>
 801f274:	4606      	mov	r6, r0
 801f276:	b928      	cbnz	r0, 801f284 <_calloc_r+0x1e>
 801f278:	2600      	movs	r6, #0
 801f27a:	4630      	mov	r0, r6
 801f27c:	bd70      	pop	{r4, r5, r6, pc}
 801f27e:	220c      	movs	r2, #12
 801f280:	6002      	str	r2, [r0, #0]
 801f282:	e7f9      	b.n	801f278 <_calloc_r+0x12>
 801f284:	462a      	mov	r2, r5
 801f286:	4621      	mov	r1, r4
 801f288:	f7fe f9f4 	bl	801d674 <memset>
 801f28c:	e7f5      	b.n	801f27a <_calloc_r+0x14>

0801f28e <__ascii_mbtowc>:
 801f28e:	b082      	sub	sp, #8
 801f290:	b901      	cbnz	r1, 801f294 <__ascii_mbtowc+0x6>
 801f292:	a901      	add	r1, sp, #4
 801f294:	b142      	cbz	r2, 801f2a8 <__ascii_mbtowc+0x1a>
 801f296:	b14b      	cbz	r3, 801f2ac <__ascii_mbtowc+0x1e>
 801f298:	7813      	ldrb	r3, [r2, #0]
 801f29a:	600b      	str	r3, [r1, #0]
 801f29c:	7812      	ldrb	r2, [r2, #0]
 801f29e:	1e10      	subs	r0, r2, #0
 801f2a0:	bf18      	it	ne
 801f2a2:	2001      	movne	r0, #1
 801f2a4:	b002      	add	sp, #8
 801f2a6:	4770      	bx	lr
 801f2a8:	4610      	mov	r0, r2
 801f2aa:	e7fb      	b.n	801f2a4 <__ascii_mbtowc+0x16>
 801f2ac:	f06f 0001 	mvn.w	r0, #1
 801f2b0:	e7f8      	b.n	801f2a4 <__ascii_mbtowc+0x16>

0801f2b2 <__ascii_wctomb>:
 801f2b2:	4603      	mov	r3, r0
 801f2b4:	4608      	mov	r0, r1
 801f2b6:	b141      	cbz	r1, 801f2ca <__ascii_wctomb+0x18>
 801f2b8:	2aff      	cmp	r2, #255	@ 0xff
 801f2ba:	d904      	bls.n	801f2c6 <__ascii_wctomb+0x14>
 801f2bc:	228a      	movs	r2, #138	@ 0x8a
 801f2be:	601a      	str	r2, [r3, #0]
 801f2c0:	f04f 30ff 	mov.w	r0, #4294967295
 801f2c4:	4770      	bx	lr
 801f2c6:	700a      	strb	r2, [r1, #0]
 801f2c8:	2001      	movs	r0, #1
 801f2ca:	4770      	bx	lr

0801f2cc <_raise_r>:
 801f2cc:	291f      	cmp	r1, #31
 801f2ce:	b538      	push	{r3, r4, r5, lr}
 801f2d0:	4605      	mov	r5, r0
 801f2d2:	460c      	mov	r4, r1
 801f2d4:	d904      	bls.n	801f2e0 <_raise_r+0x14>
 801f2d6:	2316      	movs	r3, #22
 801f2d8:	6003      	str	r3, [r0, #0]
 801f2da:	f04f 30ff 	mov.w	r0, #4294967295
 801f2de:	bd38      	pop	{r3, r4, r5, pc}
 801f2e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801f2e2:	b112      	cbz	r2, 801f2ea <_raise_r+0x1e>
 801f2e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f2e8:	b94b      	cbnz	r3, 801f2fe <_raise_r+0x32>
 801f2ea:	4628      	mov	r0, r5
 801f2ec:	f000 f830 	bl	801f350 <_getpid_r>
 801f2f0:	4622      	mov	r2, r4
 801f2f2:	4601      	mov	r1, r0
 801f2f4:	4628      	mov	r0, r5
 801f2f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f2fa:	f000 b817 	b.w	801f32c <_kill_r>
 801f2fe:	2b01      	cmp	r3, #1
 801f300:	d00a      	beq.n	801f318 <_raise_r+0x4c>
 801f302:	1c59      	adds	r1, r3, #1
 801f304:	d103      	bne.n	801f30e <_raise_r+0x42>
 801f306:	2316      	movs	r3, #22
 801f308:	6003      	str	r3, [r0, #0]
 801f30a:	2001      	movs	r0, #1
 801f30c:	e7e7      	b.n	801f2de <_raise_r+0x12>
 801f30e:	2100      	movs	r1, #0
 801f310:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801f314:	4620      	mov	r0, r4
 801f316:	4798      	blx	r3
 801f318:	2000      	movs	r0, #0
 801f31a:	e7e0      	b.n	801f2de <_raise_r+0x12>

0801f31c <raise>:
 801f31c:	4b02      	ldr	r3, [pc, #8]	@ (801f328 <raise+0xc>)
 801f31e:	4601      	mov	r1, r0
 801f320:	6818      	ldr	r0, [r3, #0]
 801f322:	f7ff bfd3 	b.w	801f2cc <_raise_r>
 801f326:	bf00      	nop
 801f328:	24000044 	.word	0x24000044

0801f32c <_kill_r>:
 801f32c:	b538      	push	{r3, r4, r5, lr}
 801f32e:	4d07      	ldr	r5, [pc, #28]	@ (801f34c <_kill_r+0x20>)
 801f330:	2300      	movs	r3, #0
 801f332:	4604      	mov	r4, r0
 801f334:	4608      	mov	r0, r1
 801f336:	4611      	mov	r1, r2
 801f338:	602b      	str	r3, [r5, #0]
 801f33a:	f7e2 fa49 	bl	80017d0 <_kill>
 801f33e:	1c43      	adds	r3, r0, #1
 801f340:	d102      	bne.n	801f348 <_kill_r+0x1c>
 801f342:	682b      	ldr	r3, [r5, #0]
 801f344:	b103      	cbz	r3, 801f348 <_kill_r+0x1c>
 801f346:	6023      	str	r3, [r4, #0]
 801f348:	bd38      	pop	{r3, r4, r5, pc}
 801f34a:	bf00      	nop
 801f34c:	2400cf04 	.word	0x2400cf04

0801f350 <_getpid_r>:
 801f350:	f7e2 ba36 	b.w	80017c0 <_getpid>

0801f354 <_init>:
 801f354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f356:	bf00      	nop
 801f358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f35a:	bc08      	pop	{r3}
 801f35c:	469e      	mov	lr, r3
 801f35e:	4770      	bx	lr

0801f360 <_fini>:
 801f360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f362:	bf00      	nop
 801f364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f366:	bc08      	pop	{r3}
 801f368:	469e      	mov	lr, r3
 801f36a:	4770      	bx	lr
