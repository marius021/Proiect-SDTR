
Sistem_monitorizare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022a10  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000455c  08022ce0  08022ce0  00023ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802723c  0802723c  0002823c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08027244  08027244  00028244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08027248  08027248  00028248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000200  24000000  0802724c  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .Rx_PoolSection 00004983  24000200  0802744c  00029200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .RxDecripSection 00000060  24004b84  0802bdcf  0002db84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .TxDecripSection 00000060  24004be4  0802be2f  0002dbe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00008198  24004c44  0802be8f  0002dc44  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2400cddc  0802be8f  0002dddc  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0002dc44  2**0
                  CONTENTS, READONLY
 13 .debug_info   00047353  00000000  00000000  0002dc72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009685  00000000  00000000  00074fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003168  00000000  00000000  0007e650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000273f  00000000  00000000  000817b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004a4f3  00000000  00000000  00083ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004e266  00000000  00000000  000ce3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018c3ec  00000000  00000000  0011c650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  002a8a3c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000dfa8  00000000  00000000  002a8a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  002b6a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24004c44 	.word	0x24004c44
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08022cc8 	.word	0x08022cc8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24004c48 	.word	0x24004c48
 800030c:	08022cc8 	.word	0x08022cc8

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <Fan_ON>:
volatile float lm35_1_temp = 0.0f;
volatile float lm35_2_temp = 0.0f;
volatile float dust_density = 0.0f;

// Turn on the fan
void Fan_ON(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FAN_GPIO_PORT, FAN_GPIO_PIN, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2140      	movs	r1, #64	@ 0x40
 80006b8:	4802      	ldr	r0, [pc, #8]	@ (80006c4 <Fan_ON+0x14>)
 80006ba:	f005 f885 	bl	80057c8 <HAL_GPIO_WritePin>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	58020000 	.word	0x58020000

080006c8 <Fan_OFF>:

// Turn off the fan
void Fan_OFF(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FAN_GPIO_PORT, FAN_GPIO_PIN, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2140      	movs	r1, #64	@ 0x40
 80006d0:	4802      	ldr	r0, [pc, #8]	@ (80006dc <Fan_OFF+0x14>)
 80006d2:	f005 f879 	bl	80057c8 <HAL_GPIO_WritePin>
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	58020000 	.word	0x58020000

080006e0 <ReadSensors>:

// Read sensor values
void ReadSensors(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af04      	add	r7, sp, #16
	uint32_t raw_value;

	// Start ADC
	if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 80006e6:	4844      	ldr	r0, [pc, #272]	@ (80007f8 <ReadSensors+0x118>)
 80006e8:	f001 fed0 	bl	800248c <HAL_ADC_Start>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d003      	beq.n	80006fa <ReadSensors+0x1a>
		printf("Error: ADC Start failed!\r\n");
 80006f2:	4842      	ldr	r0, [pc, #264]	@ (80007fc <ReadSensors+0x11c>)
 80006f4:	f020 f9ae 	bl	8020a54 <puts>
		return;
 80006f8:	e07a      	b.n	80007f0 <ReadSensors+0x110>
	}

	// LM35_1 (Channel 10)
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80006fa:	f04f 31ff 	mov.w	r1, #4294967295
 80006fe:	483e      	ldr	r0, [pc, #248]	@ (80007f8 <ReadSensors+0x118>)
 8000700:	f001 ffc2 	bl	8002688 <HAL_ADC_PollForConversion>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d117      	bne.n	800073a <ReadSensors+0x5a>
		raw_value = HAL_ADC_GetValue(&hadc1);
 800070a:	483b      	ldr	r0, [pc, #236]	@ (80007f8 <ReadSensors+0x118>)
 800070c:	f002 f8b0 	bl	8002870 <HAL_ADC_GetValue>
 8000710:	6078      	str	r0, [r7, #4]
		lm35_1_temp = ((float)raw_value / ADC_RESOLUTION) * ADC_REF_VOLTAGE / LM35_VOLTAGE_TO_TEMP_CONV;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	ee07 3a90 	vmov	s15, r3
 8000718:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800071c:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8000800 <ReadSensors+0x120>
 8000720:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000724:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8000804 <ReadSensors+0x124>
 8000728:	ee27 7a87 	vmul.f32	s14, s15, s14
 800072c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8000808 <ReadSensors+0x128>
 8000730:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000734:	4b35      	ldr	r3, [pc, #212]	@ (800080c <ReadSensors+0x12c>)
 8000736:	edc3 7a00 	vstr	s15, [r3]
	}

	// LM35_2 (Channel 15)
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800073a:	f04f 31ff 	mov.w	r1, #4294967295
 800073e:	482e      	ldr	r0, [pc, #184]	@ (80007f8 <ReadSensors+0x118>)
 8000740:	f001 ffa2 	bl	8002688 <HAL_ADC_PollForConversion>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d117      	bne.n	800077a <ReadSensors+0x9a>
		raw_value = HAL_ADC_GetValue(&hadc1);
 800074a:	482b      	ldr	r0, [pc, #172]	@ (80007f8 <ReadSensors+0x118>)
 800074c:	f002 f890 	bl	8002870 <HAL_ADC_GetValue>
 8000750:	6078      	str	r0, [r7, #4]
		lm35_2_temp = ((float)raw_value / ADC_RESOLUTION) * ADC_REF_VOLTAGE / LM35_VOLTAGE_TO_TEMP_CONV;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	ee07 3a90 	vmov	s15, r3
 8000758:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800075c:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8000800 <ReadSensors+0x120>
 8000760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000764:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000804 <ReadSensors+0x124>
 8000768:	ee27 7a87 	vmul.f32	s14, s15, s14
 800076c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8000808 <ReadSensors+0x128>
 8000770:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000774:	4b26      	ldr	r3, [pc, #152]	@ (8000810 <ReadSensors+0x130>)
 8000776:	edc3 7a00 	vstr	s15, [r3]
	}

	// Dust Sensor (Channel 5)
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800077a:	f04f 31ff 	mov.w	r1, #4294967295
 800077e:	481e      	ldr	r0, [pc, #120]	@ (80007f8 <ReadSensors+0x118>)
 8000780:	f001 ff82 	bl	8002688 <HAL_ADC_PollForConversion>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d117      	bne.n	80007ba <ReadSensors+0xda>
		raw_value = HAL_ADC_GetValue(&hadc1);
 800078a:	481b      	ldr	r0, [pc, #108]	@ (80007f8 <ReadSensors+0x118>)
 800078c:	f002 f870 	bl	8002870 <HAL_ADC_GetValue>
 8000790:	6078      	str	r0, [r7, #4]
		dust_density = ((float)raw_value / ADC_RESOLUTION) * ADC_REF_VOLTAGE * 100.0f; // Adjust scaling factor if needed
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	ee07 3a90 	vmov	s15, r3
 8000798:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800079c:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000800 <ReadSensors+0x120>
 80007a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007a4:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000804 <ReadSensors+0x124>
 80007a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007ac:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000814 <ReadSensors+0x134>
 80007b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007b4:	4b18      	ldr	r3, [pc, #96]	@ (8000818 <ReadSensors+0x138>)
 80007b6:	edc3 7a00 	vstr	s15, [r3]
	}

	// Stop ADC
	HAL_ADC_Stop(&hadc1);
 80007ba:	480f      	ldr	r0, [pc, #60]	@ (80007f8 <ReadSensors+0x118>)
 80007bc:	f001 ff30 	bl	8002620 <HAL_ADC_Stop>

	// Display sensor readings
	printf("LM35_1: %.2f C | LM35_2: %.2f C | Dust: %.2f μg/m^3\r\n", lm35_1_temp, lm35_2_temp, dust_density);
 80007c0:	4b12      	ldr	r3, [pc, #72]	@ (800080c <ReadSensors+0x12c>)
 80007c2:	edd3 7a00 	vldr	s15, [r3]
 80007c6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <ReadSensors+0x130>)
 80007cc:	edd3 7a00 	vldr	s15, [r3]
 80007d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007d4:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <ReadSensors+0x138>)
 80007d6:	edd3 6a00 	vldr	s13, [r3]
 80007da:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80007de:	ed8d 6b02 	vstr	d6, [sp, #8]
 80007e2:	ed8d 7b00 	vstr	d7, [sp]
 80007e6:	ec53 2b15 	vmov	r2, r3, d5
 80007ea:	480c      	ldr	r0, [pc, #48]	@ (800081c <ReadSensors+0x13c>)
 80007ec:	f020 f8ca 	bl	8020984 <iprintf>
}
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	24004c6c 	.word	0x24004c6c
 80007fc:	08022ce0 	.word	0x08022ce0
 8000800:	457ff000 	.word	0x457ff000
 8000804:	40533333 	.word	0x40533333
 8000808:	3c23d70a 	.word	0x3c23d70a
 800080c:	24004c60 	.word	0x24004c60
 8000810:	24004c64 	.word	0x24004c64
 8000814:	42c80000 	.word	0x42c80000
 8000818:	24004c68 	.word	0x24004c68
 800081c:	08022cfc 	.word	0x08022cfc

08000820 <SendDustAlert>:

// Send alert if dust density exceeds threshold
void SendDustAlert(float dustDensity) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b0a2      	sub	sp, #136	@ 0x88
 8000824:	af02      	add	r7, sp, #8
 8000826:	ed87 0a01 	vstr	s0, [r7, #4]
	int sock;
	struct sockaddr_in server_addr;
	char message[100];

	snprintf(message, sizeof(message), "ALERT: Dust level exceeded! %.2f μg/m^3\n", dustDensity);
 800082a:	edd7 7a01 	vldr	s15, [r7, #4]
 800082e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000832:	f107 0308 	add.w	r3, r7, #8
 8000836:	ed8d 7b00 	vstr	d7, [sp]
 800083a:	4a2d      	ldr	r2, [pc, #180]	@ (80008f0 <SendDustAlert+0xd0>)
 800083c:	2164      	movs	r1, #100	@ 0x64
 800083e:	4618      	mov	r0, r3
 8000840:	f020 f910 	bl	8020a64 <sniprintf>

	sock = socket(AF_INET, SOCK_STREAM, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	2101      	movs	r1, #1
 8000848:	2002      	movs	r0, #2
 800084a:	f011 fcb3 	bl	80121b4 <lwip_socket>
 800084e:	67f8      	str	r0, [r7, #124]	@ 0x7c
	if (sock < 0) {
 8000850:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000852:	2b00      	cmp	r3, #0
 8000854:	da03      	bge.n	800085e <SendDustAlert+0x3e>
		printf("Error: Socket creation failed!\r\n");
 8000856:	4827      	ldr	r0, [pc, #156]	@ (80008f4 <SendDustAlert+0xd4>)
 8000858:	f020 f8fc 	bl	8020a54 <puts>
		return;
 800085c:	e044      	b.n	80008e8 <SendDustAlert+0xc8>
	}

	memset(&server_addr, 0, sizeof(server_addr));
 800085e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000862:	2210      	movs	r2, #16
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f020 fa32 	bl	8020cd0 <memset>
	server_addr.sin_family = AF_INET;
 800086c:	2302      	movs	r3, #2
 800086e:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
	server_addr.sin_port = htons(SERVER_PORT);
 8000872:	f641 7090 	movw	r0, #8080	@ 0x1f90
 8000876:	f012 f841 	bl	80128fc <lwip_htons>
 800087a:	4603      	mov	r3, r0
 800087c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	inet_aton(SERVER_IP, &server_addr.sin_addr);
 8000880:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000884:	3304      	adds	r3, #4
 8000886:	4619      	mov	r1, r3
 8000888:	481b      	ldr	r0, [pc, #108]	@ (80008f8 <SendDustAlert+0xd8>)
 800088a:	f01e f951 	bl	801eb30 <ip4addr_aton>

	if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
 800088e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000892:	2210      	movs	r2, #16
 8000894:	4619      	mov	r1, r3
 8000896:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8000898:	f011 fafc 	bl	8011e94 <lwip_connect>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	da06      	bge.n	80008b0 <SendDustAlert+0x90>
		printf("Error: Connection to server failed!\r\n");
 80008a2:	4816      	ldr	r0, [pc, #88]	@ (80008fc <SendDustAlert+0xdc>)
 80008a4:	f020 f8d6 	bl	8020a54 <puts>
		close(sock);
 80008a8:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80008aa:	f011 fa9d 	bl	8011de8 <lwip_close>
		return;
 80008ae:	e01b      	b.n	80008e8 <SendDustAlert+0xc8>
	}

	if (send(sock, message, strlen(message), 0) < 0) {
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fd7b 	bl	80003b0 <strlen>
 80008ba:	4602      	mov	r2, r0
 80008bc:	f107 0108 	add.w	r1, r7, #8
 80008c0:	2300      	movs	r3, #0
 80008c2:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80008c4:	f011 fb66 	bl	8011f94 <lwip_send>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	da03      	bge.n	80008d6 <SendDustAlert+0xb6>
		printf("Error: Message send failed!\r\n");
 80008ce:	480c      	ldr	r0, [pc, #48]	@ (8000900 <SendDustAlert+0xe0>)
 80008d0:	f020 f8c0 	bl	8020a54 <puts>
 80008d4:	e005      	b.n	80008e2 <SendDustAlert+0xc2>
	} else {
		printf("Message sent: %s\r\n", message);
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	4619      	mov	r1, r3
 80008dc:	4809      	ldr	r0, [pc, #36]	@ (8000904 <SendDustAlert+0xe4>)
 80008de:	f020 f851 	bl	8020984 <iprintf>
	}

	close(sock);
 80008e2:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80008e4:	f011 fa80 	bl	8011de8 <lwip_close>
}
 80008e8:	3780      	adds	r7, #128	@ 0x80
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	08022d34 	.word	0x08022d34
 80008f4:	08022d60 	.word	0x08022d60
 80008f8:	08022d80 	.word	0x08022d80
 80008fc:	08022d90 	.word	0x08022d90
 8000900:	08022db8 	.word	0x08022db8
 8000904:	08022dd8 	.word	0x08022dd8

08000908 <mainTask>:

// Task for reading sensors and controlling the fan
void mainTask(void *argument) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
    for (;;) {
        printf("Starting measurement cycle...\r\n");
 8000910:	4826      	ldr	r0, [pc, #152]	@ (80009ac <mainTask+0xa4>)
 8000912:	f020 f89f 	bl	8020a54 <puts>
        ReadSensors();  // Perform sensor measurements
 8000916:	f7ff fee3 	bl	80006e0 <ReadSensors>

        // Control fan based on average temperature
        float avg_temp = (lm35_1_temp + lm35_2_temp) / 2.0f;
 800091a:	4b25      	ldr	r3, [pc, #148]	@ (80009b0 <mainTask+0xa8>)
 800091c:	ed93 7a00 	vldr	s14, [r3]
 8000920:	4b24      	ldr	r3, [pc, #144]	@ (80009b4 <mainTask+0xac>)
 8000922:	edd3 7a00 	vldr	s15, [r3]
 8000926:	ee37 7a27 	vadd.f32	s14, s14, s15
 800092a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800092e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000932:	edc7 7a03 	vstr	s15, [r7, #12]
        if (avg_temp > FAN_THRESHOLD) {
 8000936:	edd7 7a03 	vldr	s15, [r7, #12]
 800093a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80009b8 <mainTask+0xb0>
 800093e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000946:	dd0b      	ble.n	8000960 <mainTask+0x58>
            Fan_ON();
 8000948:	f7ff feb2 	bl	80006b0 <Fan_ON>
            printf("Fan ON (Avg Temp: %.2f C)\r\n", avg_temp);
 800094c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000950:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000954:	ec53 2b17 	vmov	r2, r3, d7
 8000958:	4818      	ldr	r0, [pc, #96]	@ (80009bc <mainTask+0xb4>)
 800095a:	f020 f813 	bl	8020984 <iprintf>
 800095e:	e00a      	b.n	8000976 <mainTask+0x6e>
        } else {
            Fan_OFF();
 8000960:	f7ff feb2 	bl	80006c8 <Fan_OFF>
            printf("Fan OFF (Avg Temp: %.2f C)\r\n", avg_temp);
 8000964:	edd7 7a03 	vldr	s15, [r7, #12]
 8000968:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800096c:	ec53 2b17 	vmov	r2, r3, d7
 8000970:	4813      	ldr	r0, [pc, #76]	@ (80009c0 <mainTask+0xb8>)
 8000972:	f020 f807 	bl	8020984 <iprintf>
        }

        // Release semaphore if dust density exceeds threshold
        if (dust_density > DUST_THRESHOLD) {
 8000976:	4b13      	ldr	r3, [pc, #76]	@ (80009c4 <mainTask+0xbc>)
 8000978:	edd3 7a00 	vldr	s15, [r3]
 800097c:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80009c8 <mainTask+0xc0>
 8000980:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000988:	dd07      	ble.n	800099a <mainTask+0x92>
            printf("Dust density exceeded threshold! Releasing semaphore...\r\n");
 800098a:	4810      	ldr	r0, [pc, #64]	@ (80009cc <mainTask+0xc4>)
 800098c:	f020 f862 	bl	8020a54 <puts>
            osSemaphoreRelease(alertSemaphoreHandle);
 8000990:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <mainTask+0xc8>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f00b fedd 	bl	800c754 <osSemaphoreRelease>
        }

        printf("Delaying for 2 seconds...\r\n");
 800099a:	480e      	ldr	r0, [pc, #56]	@ (80009d4 <mainTask+0xcc>)
 800099c:	f020 f85a 	bl	8020a54 <puts>
        osDelay(2000);  // Delay for 2 seconds
 80009a0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009a4:	f00b fcd1 	bl	800c34a <osDelay>
    for (;;) {
 80009a8:	e7b2      	b.n	8000910 <mainTask+0x8>
 80009aa:	bf00      	nop
 80009ac:	08022dec 	.word	0x08022dec
 80009b0:	24004c60 	.word	0x24004c60
 80009b4:	24004c64 	.word	0x24004c64
 80009b8:	42200000 	.word	0x42200000
 80009bc:	08022e0c 	.word	0x08022e0c
 80009c0:	08022e28 	.word	0x08022e28
 80009c4:	24004c68 	.word	0x24004c68
 80009c8:	42480000 	.word	0x42480000
 80009cc:	08022e48 	.word	0x08022e48
 80009d0:	24004dc8 	.word	0x24004dc8
 80009d4:	08022e84 	.word	0x08022e84

080009d8 <secondTask>:
    }
}
// Task for sending alerts over Ethernet
void secondTask(void *argument) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	for (;;) {
		// Wait for semaphore to be released
		if (osSemaphoreAcquire(alertSemaphoreHandle, osWaitForever) == osOK) {
 80009e0:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <secondTask+0x2c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f04f 31ff 	mov.w	r1, #4294967295
 80009e8:	4618      	mov	r0, r3
 80009ea:	f00b fe61 	bl	800c6b0 <osSemaphoreAcquire>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d1f5      	bne.n	80009e0 <secondTask+0x8>
			SendDustAlert(dust_density);
 80009f4:	4b04      	ldr	r3, [pc, #16]	@ (8000a08 <secondTask+0x30>)
 80009f6:	edd3 7a00 	vldr	s15, [r3]
 80009fa:	eeb0 0a67 	vmov.f32	s0, s15
 80009fe:	f7ff ff0f 	bl	8000820 <SendDustAlert>
		if (osSemaphoreAcquire(alertSemaphoreHandle, osWaitForever) == osOK) {
 8000a02:	e7ed      	b.n	80009e0 <secondTask+0x8>
 8000a04:	24004dc8 	.word	0x24004dc8
 8000a08:	24004c68 	.word	0x24004c68

08000a0c <_write>:
/* USER CODE BEGIN 0 */
// Redirecționare printf -> UART3


int _write(int file, char *ptr, int len)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a20:	68b9      	ldr	r1, [r7, #8]
 8000a22:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <_write+0x28>)
 8000a24:	f009 fc0a 	bl	800a23c <HAL_UART_Transmit>
	return len;
 8000a28:	687b      	ldr	r3, [r7, #4]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	24004d28 	.word	0x24004d28

08000a38 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a3c:	f000 ffc2 	bl	80019c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a40:	f000 f85a 	bl	8000af8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a44:	f000 fa12 	bl	8000e6c <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000a48:	f000 f9bc 	bl	8000dc4 <MX_USART3_UART_Init>
	MX_USB_OTG_HS_USB_Init();
 8000a4c:	f000 fa06 	bl	8000e5c <MX_USB_OTG_HS_USB_Init>
	MX_ADC1_Init();
 8000a50:	f000 f8c2 	bl	8000bd8 <MX_ADC1_Init>
	MX_TIM2_Init();
 8000a54:	f000 f95a 	bl	8000d0c <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	printf("Sistem pornit. Începe monitorizarea..\r\n");
 8000a58:	481a      	ldr	r0, [pc, #104]	@ (8000ac4 <main+0x8c>)
 8000a5a:	f01f fffb 	bl	8020a54 <puts>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4819      	ldr	r0, [pc, #100]	@ (8000ac8 <main+0x90>)
 8000a62:	f008 fbd3 	bl	800920c <HAL_TIM_PWM_Start>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000a66:	f00b fb7f 	bl	800c168 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a6a:	4a18      	ldr	r2, [pc, #96]	@ (8000acc <main+0x94>)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4818      	ldr	r0, [pc, #96]	@ (8000ad0 <main+0x98>)
 8000a70:	f00b fbd9 	bl	800c226 <osThreadNew>
 8000a74:	4603      	mov	r3, r0
 8000a76:	4a17      	ldr	r2, [pc, #92]	@ (8000ad4 <main+0x9c>)
 8000a78:	6013      	str	r3, [r2, #0]

	/* creation of SensorTask */
	SensorTaskHandle = osThreadNew(mainTask, NULL, &SensorTask_attributes);
 8000a7a:	4a17      	ldr	r2, [pc, #92]	@ (8000ad8 <main+0xa0>)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4817      	ldr	r0, [pc, #92]	@ (8000adc <main+0xa4>)
 8000a80:	f00b fbd1 	bl	800c226 <osThreadNew>
 8000a84:	4603      	mov	r3, r0
 8000a86:	4a16      	ldr	r2, [pc, #88]	@ (8000ae0 <main+0xa8>)
 8000a88:	6013      	str	r3, [r2, #0]

	/* creation of CommTask */
	CommTaskHandle = osThreadNew(secondTask, NULL, &CommTask_attributes);
 8000a8a:	4a16      	ldr	r2, [pc, #88]	@ (8000ae4 <main+0xac>)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4816      	ldr	r0, [pc, #88]	@ (8000ae8 <main+0xb0>)
 8000a90:	f00b fbc9 	bl	800c226 <osThreadNew>
 8000a94:	4603      	mov	r3, r0
 8000a96:	4a15      	ldr	r2, [pc, #84]	@ (8000aec <main+0xb4>)
 8000a98:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	alertSemaphoreHandle = osSemaphoreNew(1, 0, NULL);  // Binary semaphore
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	f00b fd7c 	bl	800c59c <osSemaphoreNew>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	4a12      	ldr	r2, [pc, #72]	@ (8000af0 <main+0xb8>)
 8000aa8:	6013      	str	r3, [r2, #0]
	    if (alertSemaphoreHandle == NULL) {
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <main+0xb8>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d104      	bne.n	8000abc <main+0x84>
	        printf("Error: Semaphore initialization failed!\r\n");
 8000ab2:	4810      	ldr	r0, [pc, #64]	@ (8000af4 <main+0xbc>)
 8000ab4:	f01f ffce 	bl	8020a54 <puts>
	        while (1);  // Halt the program if semaphore initialization fails
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <main+0x80>
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000abc:	f00b fb78 	bl	800c1b0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <main+0x88>
 8000ac4:	08022ec4 	.word	0x08022ec4
 8000ac8:	24004cdc 	.word	0x24004cdc
 8000acc:	08026c44 	.word	0x08026c44
 8000ad0:	08001089 	.word	0x08001089
 8000ad4:	24004dbc 	.word	0x24004dbc
 8000ad8:	08026c68 	.word	0x08026c68
 8000adc:	08000909 	.word	0x08000909
 8000ae0:	24004dc0 	.word	0x24004dc0
 8000ae4:	08026c8c 	.word	0x08026c8c
 8000ae8:	080009d9 	.word	0x080009d9
 8000aec:	24004dc4 	.word	0x24004dc4
 8000af0:	24004dc8 	.word	0x24004dc8
 8000af4:	08022eec 	.word	0x08022eec

08000af8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b09c      	sub	sp, #112	@ 0x70
 8000afc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b02:	224c      	movs	r2, #76	@ 0x4c
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f020 f8e2 	bl	8020cd0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2220      	movs	r2, #32
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f020 f8dc 	bl	8020cd0 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b18:	2002      	movs	r0, #2
 8000b1a:	f004 fe6f 	bl	80057fc <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd4 <SystemClock_Config+0xdc>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	4a2b      	ldr	r2, [pc, #172]	@ (8000bd4 <SystemClock_Config+0xdc>)
 8000b28:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b2c:	6193      	str	r3, [r2, #24]
 8000b2e:	4b29      	ldr	r3, [pc, #164]	@ (8000bd4 <SystemClock_Config+0xdc>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b3a:	bf00      	nop
 8000b3c:	4b25      	ldr	r3, [pc, #148]	@ (8000bd4 <SystemClock_Config+0xdc>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b48:	d1f8      	bne.n	8000b3c <SystemClock_Config+0x44>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b4a:	2321      	movs	r3, #33	@ 0x21
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b4e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b52:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b54:	2301      	movs	r3, #1
 8000b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000b60:	2304      	movs	r3, #4
 8000b62:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 275;
 8000b64:	f240 1313 	movw	r3, #275	@ 0x113
 8000b68:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000b72:	2302      	movs	r3, #2
 8000b74:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000b76:	2304      	movs	r3, #4
 8000b78:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b86:	4618      	mov	r0, r3
 8000b88:	f004 fe72 	bl	8005870 <HAL_RCC_OscConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8000b92:	f000 fa95 	bl	80010c0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b96:	233f      	movs	r3, #63	@ 0x3f
 8000b98:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ba6:	2340      	movs	r3, #64	@ 0x40
 8000ba8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000baa:	2340      	movs	r3, #64	@ 0x40
 8000bac:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bb2:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bb4:	2340      	movs	r3, #64	@ 0x40
 8000bb6:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2103      	movs	r1, #3
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f005 fa31 	bl	8006024 <HAL_RCC_ClockConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0xd4>
	{
		Error_Handler();
 8000bc8:	f000 fa7a 	bl	80010c0 <Error_Handler>
	}
}
 8000bcc:	bf00      	nop
 8000bce:	3770      	adds	r7, #112	@ 0x70
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	58024800 	.word	0x58024800

08000bd8 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	@ 0x30
 8000bdc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 8000bde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000bea:	463b      	mov	r3, r7
 8000bec:	2224      	movs	r2, #36	@ 0x24
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f020 f86d 	bl	8020cd0 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000bf6:	4b40      	ldr	r3, [pc, #256]	@ (8000cf8 <MX_ADC1_Init+0x120>)
 8000bf8:	4a40      	ldr	r2, [pc, #256]	@ (8000cfc <MX_ADC1_Init+0x124>)
 8000bfa:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bfc:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf8 <MX_ADC1_Init+0x120>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c02:	4b3d      	ldr	r3, [pc, #244]	@ (8000cf8 <MX_ADC1_Init+0x120>)
 8000c04:	2208      	movs	r2, #8
 8000c06:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c08:	4b3b      	ldr	r3, [pc, #236]	@ (8000cf8 <MX_ADC1_Init+0x120>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c0e:	4b3a      	ldr	r3, [pc, #232]	@ (8000cf8 <MX_ADC1_Init+0x120>)
 8000c10:	2204      	movs	r2, #4
 8000c12:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c14:	4b38      	ldr	r3, [pc, #224]	@ (8000cf8 <MX_ADC1_Init+0x120>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000c1a:	4b37      	ldr	r3, [pc, #220]	@ (8000cf8 <MX_ADC1_Init+0x120>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 3;
 8000c20:	4b35      	ldr	r3, [pc, #212]	@ (8000cf8 <MX_ADC1_Init+0x120>)
 8000c22:	2203      	movs	r2, #3
 8000c24:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c26:	4b34      	ldr	r3, [pc, #208]	@ (8000cf8 <MX_ADC1_Init+0x120>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c2e:	4b32      	ldr	r3, [pc, #200]	@ (8000cf8 <MX_ADC1_Init+0x120>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c34:	4b30      	ldr	r3, [pc, #192]	@ (8000cf8 <MX_ADC1_Init+0x120>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf8 <MX_ADC1_Init+0x120>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c40:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf8 <MX_ADC1_Init+0x120>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c46:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf8 <MX_ADC1_Init+0x120>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc1.Init.OversamplingMode = DISABLE;
 8000c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf8 <MX_ADC1_Init+0x120>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	hadc1.Init.Oversampling.Ratio = 1;
 8000c54:	4b28      	ldr	r3, [pc, #160]	@ (8000cf8 <MX_ADC1_Init+0x120>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c5a:	4827      	ldr	r0, [pc, #156]	@ (8000cf8 <MX_ADC1_Init+0x120>)
 8000c5c:	f001 fa0e 	bl	800207c <HAL_ADC_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_ADC1_Init+0x92>
	{
		Error_Handler();
 8000c66:	f000 fa2b 	bl	80010c0 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	4820      	ldr	r0, [pc, #128]	@ (8000cf8 <MX_ADC1_Init+0x120>)
 8000c76:	f002 fdf3 	bl	8003860 <HAL_ADCEx_MultiModeConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 8000c80:	f000 fa1e 	bl	80010c0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8000c84:	4b1e      	ldr	r3, [pc, #120]	@ (8000d00 <MX_ADC1_Init+0x128>)
 8000c86:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c88:	2306      	movs	r3, #6
 8000c8a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000c8c:	2305      	movs	r3, #5
 8000c8e:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c90:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c94:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c96:	2304      	movs	r3, #4
 8000c98:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4813      	ldr	r0, [pc, #76]	@ (8000cf8 <MX_ADC1_Init+0x120>)
 8000caa:	f001 fdef 	bl	800288c <HAL_ADC_ConfigChannel>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_ADC1_Init+0xe0>
	{
		Error_Handler();
 8000cb4:	f000 fa04 	bl	80010c0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_15;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <MX_ADC1_Init+0x12c>)
 8000cba:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480c      	ldr	r0, [pc, #48]	@ (8000cf8 <MX_ADC1_Init+0x120>)
 8000cc6:	f001 fde1 	bl	800288c <HAL_ADC_ConfigChannel>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_ADC1_Init+0xfc>
	{
		Error_Handler();
 8000cd0:	f000 f9f6 	bl	80010c0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <MX_ADC1_Init+0x130>)
 8000cd6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8000cd8:	2312      	movs	r3, #18
 8000cda:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cdc:	463b      	mov	r3, r7
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <MX_ADC1_Init+0x120>)
 8000ce2:	f001 fdd3 	bl	800288c <HAL_ADC_ConfigChannel>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_ADC1_Init+0x118>
	{
		Error_Handler();
 8000cec:	f000 f9e8 	bl	80010c0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	3730      	adds	r7, #48	@ 0x30
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	24004c6c 	.word	0x24004c6c
 8000cfc:	40022000 	.word	0x40022000
 8000d00:	2a000400 	.word	0x2a000400
 8000d04:	3ef08000 	.word	0x3ef08000
 8000d08:	14f00020 	.word	0x14f00020

08000d0c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	@ 0x28
 8000d10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
 8000d2c:	615a      	str	r2, [r3, #20]
 8000d2e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000d30:	4b23      	ldr	r3, [pc, #140]	@ (8000dc0 <MX_TIM2_Init+0xb4>)
 8000d32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d36:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 839;
 8000d38:	4b21      	ldr	r3, [pc, #132]	@ (8000dc0 <MX_TIM2_Init+0xb4>)
 8000d3a:	f240 3247 	movw	r2, #839	@ 0x347
 8000d3e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d40:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc0 <MX_TIM2_Init+0xb4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8000d46:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc0 <MX_TIM2_Init+0xb4>)
 8000d48:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d4c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc0 <MX_TIM2_Init+0xb4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <MX_TIM2_Init+0xb4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d5a:	4819      	ldr	r0, [pc, #100]	@ (8000dc0 <MX_TIM2_Init+0xb4>)
 8000d5c:	f008 f9fe 	bl	800915c <HAL_TIM_PWM_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM2_Init+0x5e>
	{
		Error_Handler();
 8000d66:	f000 f9ab 	bl	80010c0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	4619      	mov	r1, r3
 8000d78:	4811      	ldr	r0, [pc, #68]	@ (8000dc0 <MX_TIM2_Init+0xb4>)
 8000d7a:	f009 f955 	bl	800a028 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM2_Init+0x7c>
	{
		Error_Handler();
 8000d84:	f000 f99c 	bl	80010c0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d88:	2360      	movs	r3, #96	@ 0x60
 8000d8a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 320;
 8000d8c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000d90:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4807      	ldr	r0, [pc, #28]	@ (8000dc0 <MX_TIM2_Init+0xb4>)
 8000da2:	f008 fc57 	bl	8009654 <HAL_TIM_PWM_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM2_Init+0xa4>
	{
		Error_Handler();
 8000dac:	f000 f988 	bl	80010c0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000db0:	4803      	ldr	r0, [pc, #12]	@ (8000dc0 <MX_TIM2_Init+0xb4>)
 8000db2:	f000 fa7d 	bl	80012b0 <HAL_TIM_MspPostInit>

}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	@ 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	24004cdc 	.word	0x24004cdc

08000dc4 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000dc8:	4b22      	ldr	r3, [pc, #136]	@ (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dca:	4a23      	ldr	r2, [pc, #140]	@ (8000e58 <MX_USART3_UART_Init+0x94>)
 8000dcc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000dce:	4b21      	ldr	r3, [pc, #132]	@ (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dd4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e54 <MX_USART3_UART_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <MX_USART3_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df4:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <MX_USART3_UART_Init+0x90>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfa:	4b16      	ldr	r3, [pc, #88]	@ (8000e54 <MX_USART3_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e00:	4b14      	ldr	r3, [pc, #80]	@ (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	625a      	str	r2, [r3, #36]	@ 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e06:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e0c:	4811      	ldr	r0, [pc, #68]	@ (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e0e:	f009 f9c5 	bl	800a19c <HAL_UART_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8000e18:	f000 f952 	bl	80010c0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	480d      	ldr	r0, [pc, #52]	@ (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e20:	f00a fb5f 	bl	800b4e2 <HAL_UARTEx_SetTxFifoThreshold>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_USART3_UART_Init+0x6a>
	{
		Error_Handler();
 8000e2a:	f000 f949 	bl	80010c0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4808      	ldr	r0, [pc, #32]	@ (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e32:	f00a fb94 	bl	800b55e <HAL_UARTEx_SetRxFifoThreshold>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_USART3_UART_Init+0x7c>
	{
		Error_Handler();
 8000e3c:	f000 f940 	bl	80010c0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	@ (8000e54 <MX_USART3_UART_Init+0x90>)
 8000e42:	f00a fb15 	bl	800b470 <HAL_UARTEx_DisableFifoMode>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 8000e4c:	f000 f938 	bl	80010c0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	24004d28 	.word	0x24004d28
 8000e58:	40004800 	.word	0x40004800

08000e5c <MX_USB_OTG_HS_USB_Init>:
 * @brief USB_OTG_HS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_HS_Init 1 */
	/* USER CODE BEGIN USB_OTG_HS_Init 2 */

	/* USER CODE END USB_OTG_HS_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08c      	sub	sp, #48	@ 0x30
 8000e70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e82:	4b7a      	ldr	r3, [pc, #488]	@ (800106c <MX_GPIO_Init+0x200>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e88:	4a78      	ldr	r2, [pc, #480]	@ (800106c <MX_GPIO_Init+0x200>)
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e92:	4b76      	ldr	r3, [pc, #472]	@ (800106c <MX_GPIO_Init+0x200>)
 8000e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
 8000e9e:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea0:	4b72      	ldr	r3, [pc, #456]	@ (800106c <MX_GPIO_Init+0x200>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea6:	4a71      	ldr	r2, [pc, #452]	@ (800106c <MX_GPIO_Init+0x200>)
 8000ea8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eb0:	4b6e      	ldr	r3, [pc, #440]	@ (800106c <MX_GPIO_Init+0x200>)
 8000eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	4b6b      	ldr	r3, [pc, #428]	@ (800106c <MX_GPIO_Init+0x200>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec4:	4a69      	ldr	r2, [pc, #420]	@ (800106c <MX_GPIO_Init+0x200>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ece:	4b67      	ldr	r3, [pc, #412]	@ (800106c <MX_GPIO_Init+0x200>)
 8000ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000edc:	4b63      	ldr	r3, [pc, #396]	@ (800106c <MX_GPIO_Init+0x200>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee2:	4a62      	ldr	r2, [pc, #392]	@ (800106c <MX_GPIO_Init+0x200>)
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eec:	4b5f      	ldr	r3, [pc, #380]	@ (800106c <MX_GPIO_Init+0x200>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000efa:	4b5c      	ldr	r3, [pc, #368]	@ (800106c <MX_GPIO_Init+0x200>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f00:	4a5a      	ldr	r2, [pc, #360]	@ (800106c <MX_GPIO_Init+0x200>)
 8000f02:	f043 0308 	orr.w	r3, r3, #8
 8000f06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f0a:	4b58      	ldr	r3, [pc, #352]	@ (800106c <MX_GPIO_Init+0x200>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f10:	f003 0308 	and.w	r3, r3, #8
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000f18:	4b54      	ldr	r3, [pc, #336]	@ (800106c <MX_GPIO_Init+0x200>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1e:	4a53      	ldr	r2, [pc, #332]	@ (800106c <MX_GPIO_Init+0x200>)
 8000f20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f28:	4b50      	ldr	r3, [pc, #320]	@ (800106c <MX_GPIO_Init+0x200>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000f36:	4b4d      	ldr	r3, [pc, #308]	@ (800106c <MX_GPIO_Init+0x200>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3c:	4a4b      	ldr	r2, [pc, #300]	@ (800106c <MX_GPIO_Init+0x200>)
 8000f3e:	f043 0310 	orr.w	r3, r3, #16
 8000f42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f46:	4b49      	ldr	r3, [pc, #292]	@ (800106c <MX_GPIO_Init+0x200>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4c:	f003 0310 	and.w	r3, r3, #16
 8000f50:	603b      	str	r3, [r7, #0]
 8000f52:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2140      	movs	r1, #64	@ 0x40
 8000f58:	4845      	ldr	r0, [pc, #276]	@ (8001070 <MX_GPIO_Init+0x204>)
 8000f5a:	f004 fc35 	bl	80057c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000f64:	4843      	ldr	r0, [pc, #268]	@ (8001074 <MX_GPIO_Init+0x208>)
 8000f66:	f004 fc2f 	bl	80057c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f70:	4841      	ldr	r0, [pc, #260]	@ (8001078 <MX_GPIO_Init+0x20c>)
 8000f72:	f004 fc29 	bl	80057c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2102      	movs	r1, #2
 8000f7a:	4840      	ldr	r0, [pc, #256]	@ (800107c <MX_GPIO_Init+0x210>)
 8000f7c:	f004 fc24 	bl	80057c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000f80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f84:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	483a      	ldr	r0, [pc, #232]	@ (8001080 <MX_GPIO_Init+0x214>)
 8000f96:	f004 fa6f 	bl	8005478 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f9a:	2340      	movs	r3, #64	@ 0x40
 8000f9c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	482f      	ldr	r0, [pc, #188]	@ (8001070 <MX_GPIO_Init+0x204>)
 8000fb2:	f004 fa61 	bl	8005478 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000fb6:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000fba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4829      	ldr	r0, [pc, #164]	@ (8001074 <MX_GPIO_Init+0x208>)
 8000fd0:	f004 fa52 	bl	8005478 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_PWR_EN_Pin */
	GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000fd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fd8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	4619      	mov	r1, r3
 8000fec:	4822      	ldr	r0, [pc, #136]	@ (8001078 <MX_GPIO_Init+0x20c>)
 8000fee:	f004 fa43 	bl	8005478 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_OVCR_Pin */
	GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000ff2:	2380      	movs	r3, #128	@ 0x80
 8000ff4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ffa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	481f      	ldr	r0, [pc, #124]	@ (8001084 <MX_GPIO_Init+0x218>)
 8001008:	f004 fa36 	bl	8005478 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800100c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001010:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	4813      	ldr	r0, [pc, #76]	@ (8001070 <MX_GPIO_Init+0x204>)
 8001022:	f004 fa29 	bl	8005478 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_ID_Pin */
	GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001026:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800102a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001038:	230a      	movs	r3, #10
 800103a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	480b      	ldr	r0, [pc, #44]	@ (8001070 <MX_GPIO_Init+0x204>)
 8001044:	f004 fa18 	bl	8005478 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_YELLOW_Pin */
	GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001048:	2302      	movs	r3, #2
 800104a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	4807      	ldr	r0, [pc, #28]	@ (800107c <MX_GPIO_Init+0x210>)
 8001060:	f004 fa0a 	bl	8005478 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001064:	bf00      	nop
 8001066:	3730      	adds	r7, #48	@ 0x30
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	58024400 	.word	0x58024400
 8001070:	58020000 	.word	0x58020000
 8001074:	58020400 	.word	0x58020400
 8001078:	58020c00 	.word	0x58020c00
 800107c:	58021000 	.word	0x58021000
 8001080:	58020800 	.word	0x58020800
 8001084:	58021800 	.word	0x58021800

08001088 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	/* init code for LWIP */
	MX_LWIP_Init();
 8001090:	f00a faf2 	bl	800b678 <MX_LWIP_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8001094:	2001      	movs	r0, #1
 8001096:	f00b f958 	bl	800c34a <osDelay>
 800109a:	e7fb      	b.n	8001094 <StartDefaultTask+0xc>

0800109c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d101      	bne.n	80010b2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80010ae:	f000 fcc5 	bl	8001a3c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40001000 	.word	0x40001000

080010c0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <Error_Handler+0x8>

080010cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <HAL_MspInit+0x38>)
 80010d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <HAL_MspInit+0x38>)
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010e2:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HAL_MspInit+0x38>)
 80010e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	210f      	movs	r1, #15
 80010f4:	f06f 0001 	mvn.w	r0, #1
 80010f8:	f002 fd4c 	bl	8003b94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	58024400 	.word	0x58024400

08001108 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b0ba      	sub	sp, #232	@ 0xe8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001120:	f107 0318 	add.w	r3, r7, #24
 8001124:	22b8      	movs	r2, #184	@ 0xb8
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f01f fdd1 	bl	8020cd0 <memset>
  if(hadc->Instance==ADC1)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a4a      	ldr	r2, [pc, #296]	@ (800125c <HAL_ADC_MspInit+0x154>)
 8001134:	4293      	cmp	r3, r2
 8001136:	f040 808c 	bne.w	8001252 <HAL_ADC_MspInit+0x14a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800113a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800113e:	f04f 0300 	mov.w	r3, #0
 8001142:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001146:	2301      	movs	r3, #1
 8001148:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 24;
 800114a:	2318      	movs	r3, #24
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800114e:	2302      	movs	r3, #2
 8001150:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001152:	2302      	movs	r3, #2
 8001154:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001156:	2302      	movs	r3, #2
 8001158:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800115a:	23c0      	movs	r3, #192	@ 0xc0
 800115c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800115e:	2300      	movs	r3, #0
 8001160:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001166:	2300      	movs	r3, #0
 8001168:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800116c:	f107 0318 	add.w	r3, r7, #24
 8001170:	4618      	mov	r0, r3
 8001172:	f005 fb25 	bl	80067c0 <HAL_RCCEx_PeriphCLKConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 800117c:	f7ff ffa0 	bl	80010c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001180:	4b37      	ldr	r3, [pc, #220]	@ (8001260 <HAL_ADC_MspInit+0x158>)
 8001182:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001186:	4a36      	ldr	r2, [pc, #216]	@ (8001260 <HAL_ADC_MspInit+0x158>)
 8001188:	f043 0320 	orr.w	r3, r3, #32
 800118c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001190:	4b33      	ldr	r3, [pc, #204]	@ (8001260 <HAL_ADC_MspInit+0x158>)
 8001192:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001196:	f003 0320 	and.w	r3, r3, #32
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <HAL_ADC_MspInit+0x158>)
 80011a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a4:	4a2e      	ldr	r2, [pc, #184]	@ (8001260 <HAL_ADC_MspInit+0x158>)
 80011a6:	f043 0304 	orr.w	r3, r3, #4
 80011aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001260 <HAL_ADC_MspInit+0x158>)
 80011b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b28      	ldr	r3, [pc, #160]	@ (8001260 <HAL_ADC_MspInit+0x158>)
 80011be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c2:	4a27      	ldr	r2, [pc, #156]	@ (8001260 <HAL_ADC_MspInit+0x158>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011cc:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <HAL_ADC_MspInit+0x158>)
 80011ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <HAL_ADC_MspInit+0x158>)
 80011dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001260 <HAL_ADC_MspInit+0x158>)
 80011e2:	f043 0302 	orr.w	r3, r3, #2
 80011e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <HAL_ADC_MspInit+0x158>)
 80011ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA3     ------> ADC1_INP15
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011f8:	2301      	movs	r3, #1
 80011fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011fe:	2303      	movs	r3, #3
 8001200:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800120e:	4619      	mov	r1, r3
 8001210:	4814      	ldr	r0, [pc, #80]	@ (8001264 <HAL_ADC_MspInit+0x15c>)
 8001212:	f004 f931 	bl	8005478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001216:	2308      	movs	r3, #8
 8001218:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121c:	2303      	movs	r3, #3
 800121e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800122c:	4619      	mov	r1, r3
 800122e:	480e      	ldr	r0, [pc, #56]	@ (8001268 <HAL_ADC_MspInit+0x160>)
 8001230:	f004 f922 	bl	8005478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001234:	2302      	movs	r3, #2
 8001236:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123a:	2303      	movs	r3, #3
 800123c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001246:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800124a:	4619      	mov	r1, r3
 800124c:	4807      	ldr	r0, [pc, #28]	@ (800126c <HAL_ADC_MspInit+0x164>)
 800124e:	f004 f913 	bl	8005478 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001252:	bf00      	nop
 8001254:	37e8      	adds	r7, #232	@ 0xe8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40022000 	.word	0x40022000
 8001260:	58024400 	.word	0x58024400
 8001264:	58020800 	.word	0x58020800
 8001268:	58020000 	.word	0x58020000
 800126c:	58020400 	.word	0x58020400

08001270 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001280:	d10e      	bne.n	80012a0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001282:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <HAL_TIM_PWM_MspInit+0x3c>)
 8001284:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001288:	4a08      	ldr	r2, [pc, #32]	@ (80012ac <HAL_TIM_PWM_MspInit+0x3c>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <HAL_TIM_PWM_MspInit+0x3c>)
 8001294:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	58024400 	.word	0x58024400

080012b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012d0:	d11e      	bne.n	8001310 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <HAL_TIM_MspPostInit+0x68>)
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001318 <HAL_TIM_MspPostInit+0x68>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001318 <HAL_TIM_MspPostInit+0x68>)
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012f0:	2301      	movs	r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001300:	2301      	movs	r3, #1
 8001302:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	4619      	mov	r1, r3
 800130a:	4804      	ldr	r0, [pc, #16]	@ (800131c <HAL_TIM_MspPostInit+0x6c>)
 800130c:	f004 f8b4 	bl	8005478 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001310:	bf00      	nop
 8001312:	3720      	adds	r7, #32
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	58024400 	.word	0x58024400
 800131c:	58020000 	.word	0x58020000

08001320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b0b8      	sub	sp, #224	@ 0xe0
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	22b8      	movs	r2, #184	@ 0xb8
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f01f fcc5 	bl	8020cd0 <memset>
  if(huart->Instance==USART3)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a27      	ldr	r2, [pc, #156]	@ (80013e8 <HAL_UART_MspInit+0xc8>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d146      	bne.n	80013de <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001350:	f04f 0202 	mov.w	r2, #2
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800135c:	2300      	movs	r3, #0
 800135e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	4618      	mov	r0, r3
 8001368:	f005 fa2a 	bl	80067c0 <HAL_RCCEx_PeriphCLKConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001372:	f7ff fea5 	bl	80010c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001376:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <HAL_UART_MspInit+0xcc>)
 8001378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800137c:	4a1b      	ldr	r2, [pc, #108]	@ (80013ec <HAL_UART_MspInit+0xcc>)
 800137e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001382:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001386:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <HAL_UART_MspInit+0xcc>)
 8001388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800138c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001394:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <HAL_UART_MspInit+0xcc>)
 8001396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139a:	4a14      	ldr	r2, [pc, #80]	@ (80013ec <HAL_UART_MspInit+0xcc>)
 800139c:	f043 0308 	orr.w	r3, r3, #8
 80013a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013a4:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <HAL_UART_MspInit+0xcc>)
 80013a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80013b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013cc:	2307      	movs	r3, #7
 80013ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	@ (80013f0 <HAL_UART_MspInit+0xd0>)
 80013da:	f004 f84d 	bl	8005478 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80013de:	bf00      	nop
 80013e0:	37e0      	adds	r7, #224	@ 0xe0
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40004800 	.word	0x40004800
 80013ec:	58024400 	.word	0x58024400
 80013f0:	58020c00 	.word	0x58020c00

080013f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b090      	sub	sp, #64	@ 0x40
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b0f      	cmp	r3, #15
 8001400:	d827      	bhi.n	8001452 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001402:	2200      	movs	r2, #0
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	2036      	movs	r0, #54	@ 0x36
 8001408:	f002 fbc4 	bl	8003b94 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800140c:	2036      	movs	r0, #54	@ 0x36
 800140e:	f002 fbdb 	bl	8003bc8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001412:	4a29      	ldr	r2, [pc, #164]	@ (80014b8 <HAL_InitTick+0xc4>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001418:	4b28      	ldr	r3, [pc, #160]	@ (80014bc <HAL_InitTick+0xc8>)
 800141a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800141e:	4a27      	ldr	r2, [pc, #156]	@ (80014bc <HAL_InitTick+0xc8>)
 8001420:	f043 0310 	orr.w	r3, r3, #16
 8001424:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001428:	4b24      	ldr	r3, [pc, #144]	@ (80014bc <HAL_InitTick+0xc8>)
 800142a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001436:	f107 0210 	add.w	r2, r7, #16
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f005 f97b 	bl	800673c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001448:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800144a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800144c:	2b00      	cmp	r3, #0
 800144e:	d106      	bne.n	800145e <HAL_InitTick+0x6a>
 8001450:	e001      	b.n	8001456 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e02b      	b.n	80014ae <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001456:	f005 f945 	bl	80066e4 <HAL_RCC_GetPCLK1Freq>
 800145a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800145c:	e004      	b.n	8001468 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800145e:	f005 f941 	bl	80066e4 <HAL_RCC_GetPCLK1Freq>
 8001462:	4603      	mov	r3, r0
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800146a:	4a15      	ldr	r2, [pc, #84]	@ (80014c0 <HAL_InitTick+0xcc>)
 800146c:	fba2 2303 	umull	r2, r3, r2, r3
 8001470:	0c9b      	lsrs	r3, r3, #18
 8001472:	3b01      	subs	r3, #1
 8001474:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001476:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <HAL_InitTick+0xd0>)
 8001478:	4a13      	ldr	r2, [pc, #76]	@ (80014c8 <HAL_InitTick+0xd4>)
 800147a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <HAL_InitTick+0xd0>)
 800147e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001482:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001484:	4a0f      	ldr	r2, [pc, #60]	@ (80014c4 <HAL_InitTick+0xd0>)
 8001486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001488:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <HAL_InitTick+0xd0>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <HAL_InitTick+0xd0>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001496:	480b      	ldr	r0, [pc, #44]	@ (80014c4 <HAL_InitTick+0xd0>)
 8001498:	f007 fd78 	bl	8008f8c <HAL_TIM_Base_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d104      	bne.n	80014ac <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80014a2:	4808      	ldr	r0, [pc, #32]	@ (80014c4 <HAL_InitTick+0xd0>)
 80014a4:	f007 fdd4 	bl	8009050 <HAL_TIM_Base_Start_IT>
 80014a8:	4603      	mov	r3, r0
 80014aa:	e000      	b.n	80014ae <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3740      	adds	r7, #64	@ 0x40
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	24000008 	.word	0x24000008
 80014bc:	58024400 	.word	0x58024400
 80014c0:	431bde83 	.word	0x431bde83
 80014c4:	24004dcc 	.word	0x24004dcc
 80014c8:	40001000 	.word	0x40001000

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <NMI_Handler+0x4>

080014d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <HardFault_Handler+0x4>

080014dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <MemManage_Handler+0x4>

080014e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <BusFault_Handler+0x4>

080014ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <UsageFault_Handler+0x4>

080014f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001508:	4802      	ldr	r0, [pc, #8]	@ (8001514 <TIM6_DAC_IRQHandler+0x10>)
 800150a:	f007 ff9b 	bl	8009444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	24004dcc 	.word	0x24004dcc

08001518 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return 1;
 800151c:	2301      	movs	r3, #1
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <_kill>:

int _kill(int pid, int sig)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001532:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <_kill+0x20>)
 8001534:	2216      	movs	r2, #22
 8001536:	601a      	str	r2, [r3, #0]
  return -1;
 8001538:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	2400cdcc 	.word	0x2400cdcc

0800154c <_exit>:

void _exit (int status)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ffe5 	bl	8001528 <_kill>
  while (1) {}    /* Make sure we hang here */
 800155e:	bf00      	nop
 8001560:	e7fd      	b.n	800155e <_exit+0x12>

08001562 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	e00a      	b.n	800158a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001574:	f3af 8000 	nop.w
 8001578:	4601      	mov	r1, r0
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	60ba      	str	r2, [r7, #8]
 8001580:	b2ca      	uxtb	r2, r1
 8001582:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	3301      	adds	r3, #1
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	429a      	cmp	r2, r3
 8001590:	dbf0      	blt.n	8001574 <_read+0x12>
  }

  return len;
 8001592:	687b      	ldr	r3, [r7, #4]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_close>:
  }
  return len;
}

int _close(int file)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015c4:	605a      	str	r2, [r3, #4]
  return 0;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <_isatty>:

int _isatty(int file)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015dc:	2301      	movs	r3, #1
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b085      	sub	sp, #20
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	60f8      	str	r0, [r7, #12]
 80015f2:	60b9      	str	r1, [r7, #8]
 80015f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001604:	b480      	push	{r7}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800160c:	4a14      	ldr	r2, [pc, #80]	@ (8001660 <_sbrk+0x5c>)
 800160e:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <_sbrk+0x60>)
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001618:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001620:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <_sbrk+0x64>)
 8001622:	4a12      	ldr	r2, [pc, #72]	@ (800166c <_sbrk+0x68>)
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d205      	bcs.n	8001640 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001634:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <_sbrk+0x6c>)
 8001636:	220c      	movs	r2, #12
 8001638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	e009      	b.n	8001654 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001640:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001646:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	4a06      	ldr	r2, [pc, #24]	@ (8001668 <_sbrk+0x64>)
 8001650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	4618      	mov	r0, r3
 8001656:	371c      	adds	r7, #28
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	24050000 	.word	0x24050000
 8001664:	00000400 	.word	0x00000400
 8001668:	24004e18 	.word	0x24004e18
 800166c:	2400cde0 	.word	0x2400cde0
 8001670:	2400cdcc 	.word	0x2400cdcc

08001674 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001678:	4b32      	ldr	r3, [pc, #200]	@ (8001744 <SystemInit+0xd0>)
 800167a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800167e:	4a31      	ldr	r2, [pc, #196]	@ (8001744 <SystemInit+0xd0>)
 8001680:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001684:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001688:	4b2f      	ldr	r3, [pc, #188]	@ (8001748 <SystemInit+0xd4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 030f 	and.w	r3, r3, #15
 8001690:	2b06      	cmp	r3, #6
 8001692:	d807      	bhi.n	80016a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001694:	4b2c      	ldr	r3, [pc, #176]	@ (8001748 <SystemInit+0xd4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f023 030f 	bic.w	r3, r3, #15
 800169c:	4a2a      	ldr	r2, [pc, #168]	@ (8001748 <SystemInit+0xd4>)
 800169e:	f043 0307 	orr.w	r3, r3, #7
 80016a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016a4:	4b29      	ldr	r3, [pc, #164]	@ (800174c <SystemInit+0xd8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a28      	ldr	r2, [pc, #160]	@ (800174c <SystemInit+0xd8>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016b0:	4b26      	ldr	r3, [pc, #152]	@ (800174c <SystemInit+0xd8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016b6:	4b25      	ldr	r3, [pc, #148]	@ (800174c <SystemInit+0xd8>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4924      	ldr	r1, [pc, #144]	@ (800174c <SystemInit+0xd8>)
 80016bc:	4b24      	ldr	r3, [pc, #144]	@ (8001750 <SystemInit+0xdc>)
 80016be:	4013      	ands	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016c2:	4b21      	ldr	r3, [pc, #132]	@ (8001748 <SystemInit+0xd4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001748 <SystemInit+0xd4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f023 030f 	bic.w	r3, r3, #15
 80016d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001748 <SystemInit+0xd4>)
 80016d8:	f043 0307 	orr.w	r3, r3, #7
 80016dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80016de:	4b1b      	ldr	r3, [pc, #108]	@ (800174c <SystemInit+0xd8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80016e4:	4b19      	ldr	r3, [pc, #100]	@ (800174c <SystemInit+0xd8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80016ea:	4b18      	ldr	r3, [pc, #96]	@ (800174c <SystemInit+0xd8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016f0:	4b16      	ldr	r3, [pc, #88]	@ (800174c <SystemInit+0xd8>)
 80016f2:	4a18      	ldr	r2, [pc, #96]	@ (8001754 <SystemInit+0xe0>)
 80016f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016f6:	4b15      	ldr	r3, [pc, #84]	@ (800174c <SystemInit+0xd8>)
 80016f8:	4a17      	ldr	r2, [pc, #92]	@ (8001758 <SystemInit+0xe4>)
 80016fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016fc:	4b13      	ldr	r3, [pc, #76]	@ (800174c <SystemInit+0xd8>)
 80016fe:	4a17      	ldr	r2, [pc, #92]	@ (800175c <SystemInit+0xe8>)
 8001700:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <SystemInit+0xd8>)
 8001704:	2200      	movs	r2, #0
 8001706:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001708:	4b10      	ldr	r3, [pc, #64]	@ (800174c <SystemInit+0xd8>)
 800170a:	4a14      	ldr	r2, [pc, #80]	@ (800175c <SystemInit+0xe8>)
 800170c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800170e:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <SystemInit+0xd8>)
 8001710:	2200      	movs	r2, #0
 8001712:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001714:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <SystemInit+0xd8>)
 8001716:	4a11      	ldr	r2, [pc, #68]	@ (800175c <SystemInit+0xe8>)
 8001718:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800171a:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <SystemInit+0xd8>)
 800171c:	2200      	movs	r2, #0
 800171e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001720:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <SystemInit+0xd8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a09      	ldr	r2, [pc, #36]	@ (800174c <SystemInit+0xd8>)
 8001726:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800172a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800172c:	4b07      	ldr	r3, [pc, #28]	@ (800174c <SystemInit+0xd8>)
 800172e:	2200      	movs	r2, #0
 8001730:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001732:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <SystemInit+0xec>)
 8001734:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001738:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00
 8001748:	52002000 	.word	0x52002000
 800174c:	58024400 	.word	0x58024400
 8001750:	eaf6ed7f 	.word	0xeaf6ed7f
 8001754:	02020200 	.word	0x02020200
 8001758:	01ff0000 	.word	0x01ff0000
 800175c:	01010280 	.word	0x01010280
 8001760:	52004000 	.word	0x52004000

08001764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001764:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800179c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001768:	f7ff ff84 	bl	8001674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800176c:	480c      	ldr	r0, [pc, #48]	@ (80017a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800176e:	490d      	ldr	r1, [pc, #52]	@ (80017a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001770:	4a0d      	ldr	r2, [pc, #52]	@ (80017a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001774:	e002      	b.n	800177c <LoopCopyDataInit>

08001776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177a:	3304      	adds	r3, #4

0800177c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800177c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001780:	d3f9      	bcc.n	8001776 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001782:	4a0a      	ldr	r2, [pc, #40]	@ (80017ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001784:	4c0a      	ldr	r4, [pc, #40]	@ (80017b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001788:	e001      	b.n	800178e <LoopFillZerobss>

0800178a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800178c:	3204      	adds	r2, #4

0800178e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001790:	d3fb      	bcc.n	800178a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001792:	f01f fb45 	bl	8020e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001796:	f7ff f94f 	bl	8000a38 <main>
  bx  lr
 800179a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800179c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80017a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017a4:	24000200 	.word	0x24000200
  ldr r2, =_sidata
 80017a8:	0802724c 	.word	0x0802724c
  ldr r2, =_sbss
 80017ac:	24004c44 	.word	0x24004c44
  ldr r4, =_ebss
 80017b0:	2400cddc 	.word	0x2400cddc

080017b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b4:	e7fe      	b.n	80017b4 <ADC3_IRQHandler>

080017b6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00b      	beq.n	80017de <LAN8742_RegisterBusIO+0x28>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d007      	beq.n	80017de <LAN8742_RegisterBusIO+0x28>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <LAN8742_RegisterBusIO+0x28>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d102      	bne.n	80017e4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	e014      	b.n	800180e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d139      	bne.n	80018aa <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d002      	beq.n	8001844 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2220      	movs	r2, #32
 8001848:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	e01c      	b.n	800188a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	f107 020c 	add.w	r2, r7, #12
 8001858:	2112      	movs	r1, #18
 800185a:	6978      	ldr	r0, [r7, #20]
 800185c:	4798      	blx	r3
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	da03      	bge.n	800186c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001864:	f06f 0304 	mvn.w	r3, #4
 8001868:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800186a:	e00b      	b.n	8001884 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 031f 	and.w	r3, r3, #31
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	429a      	cmp	r2, r3
 8001876:	d105      	bne.n	8001884 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
         break;
 8001882:	e005      	b.n	8001890 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	3301      	adds	r3, #1
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2b1f      	cmp	r3, #31
 800188e:	d9df      	bls.n	8001850 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b1f      	cmp	r3, #31
 8001896:	d902      	bls.n	800189e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001898:	f06f 0302 	mvn.w	r3, #2
 800189c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80018aa:	693b      	ldr	r3, [r7, #16]
 }
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6810      	ldr	r0, [r2, #0]
 80018c8:	f107 020c 	add.w	r2, r7, #12
 80018cc:	2101      	movs	r1, #1
 80018ce:	4798      	blx	r3
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	da02      	bge.n	80018dc <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018d6:	f06f 0304 	mvn.w	r3, #4
 80018da:	e06e      	b.n	80019ba <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6810      	ldr	r0, [r2, #0]
 80018e4:	f107 020c 	add.w	r2, r7, #12
 80018e8:	2101      	movs	r1, #1
 80018ea:	4798      	blx	r3
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	da02      	bge.n	80018f8 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018f2:	f06f 0304 	mvn.w	r3, #4
 80018f6:	e060      	b.n	80019ba <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001902:	2301      	movs	r3, #1
 8001904:	e059      	b.n	80019ba <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6810      	ldr	r0, [r2, #0]
 800190e:	f107 020c 	add.w	r2, r7, #12
 8001912:	2100      	movs	r1, #0
 8001914:	4798      	blx	r3
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	da02      	bge.n	8001922 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800191c:	f06f 0304 	mvn.w	r3, #4
 8001920:	e04b      	b.n	80019ba <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d11b      	bne.n	8001964 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d006      	beq.n	8001944 <LAN8742_GetLinkState+0x90>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001940:	2302      	movs	r3, #2
 8001942:	e03a      	b.n	80019ba <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800194e:	2303      	movs	r3, #3
 8001950:	e033      	b.n	80019ba <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800195c:	2304      	movs	r3, #4
 800195e:	e02c      	b.n	80019ba <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001960:	2305      	movs	r3, #5
 8001962:	e02a      	b.n	80019ba <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6810      	ldr	r0, [r2, #0]
 800196c:	f107 020c 	add.w	r2, r7, #12
 8001970:	211f      	movs	r1, #31
 8001972:	4798      	blx	r3
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	da02      	bge.n	8001980 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800197a:	f06f 0304 	mvn.w	r3, #4
 800197e:	e01c      	b.n	80019ba <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800198a:	2306      	movs	r3, #6
 800198c:	e015      	b.n	80019ba <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f003 031c 	and.w	r3, r3, #28
 8001994:	2b18      	cmp	r3, #24
 8001996:	d101      	bne.n	800199c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001998:	2302      	movs	r3, #2
 800199a:	e00e      	b.n	80019ba <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 031c 	and.w	r3, r3, #28
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d101      	bne.n	80019aa <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e007      	b.n	80019ba <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f003 031c 	and.w	r3, r3, #28
 80019b0:	2b14      	cmp	r3, #20
 80019b2:	d101      	bne.n	80019b8 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80019b4:	2304      	movs	r3, #4
 80019b6:	e000      	b.n	80019ba <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80019b8:	2305      	movs	r3, #5
    }
  }
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ca:	2003      	movs	r0, #3
 80019cc:	f002 f8d7 	bl	8003b7e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019d0:	f004 fcde 	bl	8006390 <HAL_RCC_GetSysClockFreq>
 80019d4:	4602      	mov	r2, r0
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <HAL_Init+0x68>)
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	0a1b      	lsrs	r3, r3, #8
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	4913      	ldr	r1, [pc, #76]	@ (8001a30 <HAL_Init+0x6c>)
 80019e2:	5ccb      	ldrb	r3, [r1, r3]
 80019e4:	f003 031f 	and.w	r3, r3, #31
 80019e8:	fa22 f303 	lsr.w	r3, r2, r3
 80019ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019ee:	4b0f      	ldr	r3, [pc, #60]	@ (8001a2c <HAL_Init+0x68>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a30 <HAL_Init+0x6c>)
 80019f8:	5cd3      	ldrb	r3, [r2, r3]
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	fa22 f303 	lsr.w	r3, r2, r3
 8001a04:	4a0b      	ldr	r2, [pc, #44]	@ (8001a34 <HAL_Init+0x70>)
 8001a06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a08:	4a0b      	ldr	r2, [pc, #44]	@ (8001a38 <HAL_Init+0x74>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a0e:	200f      	movs	r0, #15
 8001a10:	f7ff fcf0 	bl	80013f4 <HAL_InitTick>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e002      	b.n	8001a24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a1e:	f7ff fb55 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	58024400 	.word	0x58024400
 8001a30:	08026cb0 	.word	0x08026cb0
 8001a34:	24000004 	.word	0x24000004
 8001a38:	24000000 	.word	0x24000000

08001a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a40:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <HAL_IncTick+0x20>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <HAL_IncTick+0x24>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4a04      	ldr	r2, [pc, #16]	@ (8001a60 <HAL_IncTick+0x24>)
 8001a4e:	6013      	str	r3, [r2, #0]
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	2400000c 	.word	0x2400000c
 8001a60:	24004e1c 	.word	0x24004e1c

08001a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return uwTick;
 8001a68:	4b03      	ldr	r3, [pc, #12]	@ (8001a78 <HAL_GetTick+0x14>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	24004e1c 	.word	0x24004e1c

08001a7c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001a8c:	4904      	ldr	r1, [pc, #16]	@ (8001aa0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	58000400 	.word	0x58000400

08001aa4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	609a      	str	r2, [r3, #8]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3360      	adds	r3, #96	@ 0x60
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4a10      	ldr	r2, [pc, #64]	@ (8001b6c <LL_ADC_SetOffset+0x60>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d10b      	bne.n	8001b48 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001b46:	e00b      	b.n	8001b60 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	430b      	orrs	r3, r1
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	601a      	str	r2, [r3, #0]
}
 8001b60:	bf00      	nop
 8001b62:	371c      	adds	r7, #28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	58026000 	.word	0x58026000

08001b70 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3360      	adds	r3, #96	@ 0x60
 8001b7e:	461a      	mov	r2, r3
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f003 031f 	and.w	r3, r3, #31
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	611a      	str	r2, [r3, #16]
}
 8001bc2:	bf00      	nop
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4a0c      	ldr	r2, [pc, #48]	@ (8001c10 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d00e      	beq.n	8001c02 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	3360      	adds	r3, #96	@ 0x60
 8001be8:	461a      	mov	r2, r3
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	601a      	str	r2, [r3, #0]
  }
}
 8001c02:	bf00      	nop
 8001c04:	371c      	adds	r7, #28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	58026000 	.word	0x58026000

08001c14 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4a0c      	ldr	r2, [pc, #48]	@ (8001c54 <LL_ADC_SetOffsetSaturation+0x40>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d10e      	bne.n	8001c46 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	3360      	adds	r3, #96	@ 0x60
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001c46:	bf00      	nop
 8001c48:	371c      	adds	r7, #28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	58026000 	.word	0x58026000

08001c58 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4a0c      	ldr	r2, [pc, #48]	@ (8001c98 <LL_ADC_SetOffsetSign+0x40>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d10e      	bne.n	8001c8a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3360      	adds	r3, #96	@ 0x60
 8001c70:	461a      	mov	r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	431a      	orrs	r2, r3
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	371c      	adds	r7, #28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	58026000 	.word	0x58026000

08001c9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	3360      	adds	r3, #96	@ 0x60
 8001cac:	461a      	mov	r2, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4a0c      	ldr	r2, [pc, #48]	@ (8001cec <LL_ADC_SetOffsetState+0x50>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d108      	bne.n	8001cd0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001cce:	e007      	b.n	8001ce0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	601a      	str	r2, [r3, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	371c      	adds	r7, #28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	58026000 	.word	0x58026000

08001cf0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b087      	sub	sp, #28
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3330      	adds	r3, #48	@ 0x30
 8001d26:	461a      	mov	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	0a1b      	lsrs	r3, r3, #8
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	4413      	add	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	211f      	movs	r1, #31
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	401a      	ands	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	0e9b      	lsrs	r3, r3, #26
 8001d4e:	f003 011f 	and.w	r1, r3, #31
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d62:	bf00      	nop
 8001d64:	371c      	adds	r7, #28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b087      	sub	sp, #28
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3314      	adds	r3, #20
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	0e5b      	lsrs	r3, r3, #25
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	4413      	add	r3, r2
 8001d8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	0d1b      	lsrs	r3, r3, #20
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	2107      	movs	r1, #7
 8001d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	401a      	ands	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	0d1b      	lsrs	r3, r3, #20
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	431a      	orrs	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001db8:	bf00      	nop
 8001dba:	371c      	adds	r7, #28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4a1a      	ldr	r2, [pc, #104]	@ (8001e3c <LL_ADC_SetChannelSingleDiff+0x78>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d115      	bne.n	8001e04 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001de4:	43db      	mvns	r3, r3
 8001de6:	401a      	ands	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f003 0318 	and.w	r3, r3, #24
 8001dee:	4914      	ldr	r1, [pc, #80]	@ (8001e40 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001df0:	40d9      	lsrs	r1, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	400b      	ands	r3, r1
 8001df6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001e02:	e014      	b.n	8001e2e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e10:	43db      	mvns	r3, r3
 8001e12:	401a      	ands	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f003 0318 	and.w	r3, r3, #24
 8001e1a:	4909      	ldr	r1, [pc, #36]	@ (8001e40 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001e1c:	40d9      	lsrs	r1, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	400b      	ands	r3, r1
 8001e22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e26:	431a      	orrs	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	58026000 	.word	0x58026000
 8001e40:	000fffff 	.word	0x000fffff

08001e44 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 031f 	and.w	r3, r3, #31
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6093      	str	r3, [r2, #8]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	5fffffc0 	.word	0x5fffffc0

08001ea0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001eb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001eb4:	d101      	bne.n	8001eba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	4b05      	ldr	r3, [pc, #20]	@ (8001eec <LL_ADC_EnableInternalRegulator+0x24>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	6fffffc0 	.word	0x6fffffc0

08001ef0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f04:	d101      	bne.n	8001f0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <LL_ADC_Enable+0x24>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	f043 0201 	orr.w	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	7fffffc0 	.word	0x7fffffc0

08001f40 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <LL_ADC_Disable+0x24>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	f043 0202 	orr.w	r2, r3, #2
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	7fffffc0 	.word	0x7fffffc0

08001f68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <LL_ADC_IsEnabled+0x18>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <LL_ADC_IsEnabled+0x1a>
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d101      	bne.n	8001fa6 <LL_ADC_IsDisableOngoing+0x18>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <LL_ADC_IsDisableOngoing+0x1a>
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	4b05      	ldr	r3, [pc, #20]	@ (8001fd8 <LL_ADC_REG_StartConversion+0x24>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	f043 0204 	orr.w	r2, r3, #4
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	7fffffc0 	.word	0x7fffffc0

08001fdc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <LL_ADC_REG_StopConversion+0x24>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	f043 0210 	orr.w	r2, r3, #16
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	7fffffc0 	.word	0x7fffffc0

08002004 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b04      	cmp	r3, #4
 8002016:	d101      	bne.n	800201c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	4b05      	ldr	r3, [pc, #20]	@ (8002050 <LL_ADC_INJ_StopConversion+0x24>)
 800203a:	4013      	ands	r3, r2
 800203c:	f043 0220 	orr.w	r2, r3, #32
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	7fffffc0 	.word	0x7fffffc0

08002054 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b08      	cmp	r3, #8
 8002066:	d101      	bne.n	800206c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800207c:	b590      	push	{r4, r7, lr}
 800207e:	b089      	sub	sp, #36	@ 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002088:	2300      	movs	r3, #0
 800208a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e1ee      	b.n	8002474 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d109      	bne.n	80020b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff f82f 	bl	8001108 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff feef 	bl	8001ea0 <LL_ADC_IsDeepPowerDownEnabled>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d004      	beq.n	80020d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fed5 	bl	8001e7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff ff0a 	bl	8001ef0 <LL_ADC_IsInternalRegulatorEnabled>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d114      	bne.n	800210c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff feee 	bl	8001ec8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020ec:	4b8e      	ldr	r3, [pc, #568]	@ (8002328 <HAL_ADC_Init+0x2ac>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	099b      	lsrs	r3, r3, #6
 80020f2:	4a8e      	ldr	r2, [pc, #568]	@ (800232c <HAL_ADC_Init+0x2b0>)
 80020f4:	fba2 2303 	umull	r2, r3, r2, r3
 80020f8:	099b      	lsrs	r3, r3, #6
 80020fa:	3301      	adds	r3, #1
 80020fc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020fe:	e002      	b.n	8002106 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	3b01      	subs	r3, #1
 8002104:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f9      	bne.n	8002100 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff feed 	bl	8001ef0 <LL_ADC_IsInternalRegulatorEnabled>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10d      	bne.n	8002138 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002120:	f043 0210 	orr.w	r2, r3, #16
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800212c:	f043 0201 	orr.w	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff61 	bl	8002004 <LL_ADC_REG_IsConversionOngoing>
 8002142:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002148:	f003 0310 	and.w	r3, r3, #16
 800214c:	2b00      	cmp	r3, #0
 800214e:	f040 8188 	bne.w	8002462 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b00      	cmp	r3, #0
 8002156:	f040 8184 	bne.w	8002462 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800215e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002162:	f043 0202 	orr.w	r2, r3, #2
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fefa 	bl	8001f68 <LL_ADC_IsEnabled>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d136      	bne.n	80021e8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a6c      	ldr	r2, [pc, #432]	@ (8002330 <HAL_ADC_Init+0x2b4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d004      	beq.n	800218e <HAL_ADC_Init+0x112>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a6a      	ldr	r2, [pc, #424]	@ (8002334 <HAL_ADC_Init+0x2b8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d10e      	bne.n	80021ac <HAL_ADC_Init+0x130>
 800218e:	4868      	ldr	r0, [pc, #416]	@ (8002330 <HAL_ADC_Init+0x2b4>)
 8002190:	f7ff feea 	bl	8001f68 <LL_ADC_IsEnabled>
 8002194:	4604      	mov	r4, r0
 8002196:	4867      	ldr	r0, [pc, #412]	@ (8002334 <HAL_ADC_Init+0x2b8>)
 8002198:	f7ff fee6 	bl	8001f68 <LL_ADC_IsEnabled>
 800219c:	4603      	mov	r3, r0
 800219e:	4323      	orrs	r3, r4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	bf0c      	ite	eq
 80021a4:	2301      	moveq	r3, #1
 80021a6:	2300      	movne	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	e008      	b.n	80021be <HAL_ADC_Init+0x142>
 80021ac:	4862      	ldr	r0, [pc, #392]	@ (8002338 <HAL_ADC_Init+0x2bc>)
 80021ae:	f7ff fedb 	bl	8001f68 <LL_ADC_IsEnabled>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf0c      	ite	eq
 80021b8:	2301      	moveq	r3, #1
 80021ba:	2300      	movne	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d012      	beq.n	80021e8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a5a      	ldr	r2, [pc, #360]	@ (8002330 <HAL_ADC_Init+0x2b4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d004      	beq.n	80021d6 <HAL_ADC_Init+0x15a>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a58      	ldr	r2, [pc, #352]	@ (8002334 <HAL_ADC_Init+0x2b8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d101      	bne.n	80021da <HAL_ADC_Init+0x15e>
 80021d6:	4a59      	ldr	r2, [pc, #356]	@ (800233c <HAL_ADC_Init+0x2c0>)
 80021d8:	e000      	b.n	80021dc <HAL_ADC_Init+0x160>
 80021da:	4a59      	ldr	r2, [pc, #356]	@ (8002340 <HAL_ADC_Init+0x2c4>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	4619      	mov	r1, r3
 80021e2:	4610      	mov	r0, r2
 80021e4:	f7ff fc5e 	bl	8001aa4 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a52      	ldr	r2, [pc, #328]	@ (8002338 <HAL_ADC_Init+0x2bc>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d129      	bne.n	8002246 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7e5b      	ldrb	r3, [r3, #25]
 80021f6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80021fc:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002202:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b08      	cmp	r3, #8
 800220a:	d013      	beq.n	8002234 <HAL_ADC_Init+0x1b8>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2b0c      	cmp	r3, #12
 8002212:	d00d      	beq.n	8002230 <HAL_ADC_Init+0x1b4>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b1c      	cmp	r3, #28
 800221a:	d007      	beq.n	800222c <HAL_ADC_Init+0x1b0>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b18      	cmp	r3, #24
 8002222:	d101      	bne.n	8002228 <HAL_ADC_Init+0x1ac>
 8002224:	2318      	movs	r3, #24
 8002226:	e006      	b.n	8002236 <HAL_ADC_Init+0x1ba>
 8002228:	2300      	movs	r3, #0
 800222a:	e004      	b.n	8002236 <HAL_ADC_Init+0x1ba>
 800222c:	2310      	movs	r3, #16
 800222e:	e002      	b.n	8002236 <HAL_ADC_Init+0x1ba>
 8002230:	2308      	movs	r3, #8
 8002232:	e000      	b.n	8002236 <HAL_ADC_Init+0x1ba>
 8002234:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002236:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800223e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
 8002244:	e00e      	b.n	8002264 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7e5b      	ldrb	r3, [r3, #25]
 800224a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002250:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002256:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800225e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3020 	ldrb.w	r3, [r3, #32]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d106      	bne.n	800227c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002272:	3b01      	subs	r3, #1
 8002274:	045b      	lsls	r3, r3, #17
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002280:	2b00      	cmp	r3, #0
 8002282:	d009      	beq.n	8002298 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002288:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002290:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a26      	ldr	r2, [pc, #152]	@ (8002338 <HAL_ADC_Init+0x2bc>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d115      	bne.n	80022ce <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	4b26      	ldr	r3, [pc, #152]	@ (8002344 <HAL_ADC_Init+0x2c8>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	69b9      	ldr	r1, [r7, #24]
 80022b2:	430b      	orrs	r3, r1
 80022b4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	611a      	str	r2, [r3, #16]
 80022cc:	e009      	b.n	80022e2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002348 <HAL_ADC_Init+0x2cc>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	69b9      	ldr	r1, [r7, #24]
 80022de:	430b      	orrs	r3, r1
 80022e0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fe8c 	bl	8002004 <LL_ADC_REG_IsConversionOngoing>
 80022ec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff feae 	bl	8002054 <LL_ADC_INJ_IsConversionOngoing>
 80022f8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f040 808e 	bne.w	800241e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	f040 808a 	bne.w	800241e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a0a      	ldr	r2, [pc, #40]	@ (8002338 <HAL_ADC_Init+0x2bc>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d11b      	bne.n	800234c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	7e1b      	ldrb	r3, [r3, #24]
 8002318:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002320:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
 8002326:	e018      	b.n	800235a <HAL_ADC_Init+0x2de>
 8002328:	24000000 	.word	0x24000000
 800232c:	053e2d63 	.word	0x053e2d63
 8002330:	40022000 	.word	0x40022000
 8002334:	40022100 	.word	0x40022100
 8002338:	58026000 	.word	0x58026000
 800233c:	40022300 	.word	0x40022300
 8002340:	58026300 	.word	0x58026300
 8002344:	fff04007 	.word	0xfff04007
 8002348:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7e1b      	ldrb	r3, [r3, #24]
 8002350:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	4b46      	ldr	r3, [pc, #280]	@ (800247c <HAL_ADC_Init+0x400>)
 8002362:	4013      	ands	r3, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	69b9      	ldr	r1, [r7, #24]
 800236a:	430b      	orrs	r3, r1
 800236c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002374:	2b01      	cmp	r3, #1
 8002376:	d137      	bne.n	80023e8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a3f      	ldr	r2, [pc, #252]	@ (8002480 <HAL_ADC_Init+0x404>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d116      	bne.n	80023b6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	4b3d      	ldr	r3, [pc, #244]	@ (8002484 <HAL_ADC_Init+0x408>)
 8002390:	4013      	ands	r3, r2
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800239a:	4311      	orrs	r1, r2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023a0:	4311      	orrs	r1, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80023a6:	430a      	orrs	r2, r1
 80023a8:	431a      	orrs	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	611a      	str	r2, [r3, #16]
 80023b4:	e020      	b.n	80023f8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	4b32      	ldr	r3, [pc, #200]	@ (8002488 <HAL_ADC_Init+0x40c>)
 80023be:	4013      	ands	r3, r2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023c4:	3a01      	subs	r2, #1
 80023c6:	0411      	lsls	r1, r2, #16
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80023cc:	4311      	orrs	r1, r2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023d2:	4311      	orrs	r1, r2
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80023d8:	430a      	orrs	r2, r1
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 0201 	orr.w	r2, r2, #1
 80023e4:	611a      	str	r2, [r3, #16]
 80023e6:	e007      	b.n	80023f8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0201 	bic.w	r2, r2, #1
 80023f6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a1b      	ldr	r2, [pc, #108]	@ (8002480 <HAL_ADC_Init+0x404>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d002      	beq.n	800241e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f001 f90d 	bl	8003638 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d10c      	bne.n	8002440 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242c:	f023 010f 	bic.w	r1, r3, #15
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	1e5a      	subs	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	631a      	str	r2, [r3, #48]	@ 0x30
 800243e:	e007      	b.n	8002450 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 020f 	bic.w	r2, r2, #15
 800244e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002454:	f023 0303 	bic.w	r3, r3, #3
 8002458:	f043 0201 	orr.w	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	661a      	str	r2, [r3, #96]	@ 0x60
 8002460:	e007      	b.n	8002472 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002466:	f043 0210 	orr.w	r2, r3, #16
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002472:	7ffb      	ldrb	r3, [r7, #31]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3724      	adds	r7, #36	@ 0x24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd90      	pop	{r4, r7, pc}
 800247c:	ffffbffc 	.word	0xffffbffc
 8002480:	58026000 	.word	0x58026000
 8002484:	fc00f81f 	.word	0xfc00f81f
 8002488:	fc00f81e 	.word	0xfc00f81e

0800248c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a5c      	ldr	r2, [pc, #368]	@ (800260c <HAL_ADC_Start+0x180>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d004      	beq.n	80024a8 <HAL_ADC_Start+0x1c>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002610 <HAL_ADC_Start+0x184>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d101      	bne.n	80024ac <HAL_ADC_Start+0x20>
 80024a8:	4b5a      	ldr	r3, [pc, #360]	@ (8002614 <HAL_ADC_Start+0x188>)
 80024aa:	e000      	b.n	80024ae <HAL_ADC_Start+0x22>
 80024ac:	4b5a      	ldr	r3, [pc, #360]	@ (8002618 <HAL_ADC_Start+0x18c>)
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fcc8 	bl	8001e44 <LL_ADC_GetMultimode>
 80024b4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fda2 	bl	8002004 <LL_ADC_REG_IsConversionOngoing>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 809a 	bne.w	80025fc <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_ADC_Start+0x4a>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e095      	b.n	8002602 <HAL_ADC_Start+0x176>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 ffc0 	bl	8003464 <ADC_Enable>
 80024e4:	4603      	mov	r3, r0
 80024e6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f040 8081 	bne.w	80025f2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024f4:	4b49      	ldr	r3, [pc, #292]	@ (800261c <HAL_ADC_Start+0x190>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a42      	ldr	r2, [pc, #264]	@ (8002610 <HAL_ADC_Start+0x184>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d002      	beq.n	8002510 <HAL_ADC_Start+0x84>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	e000      	b.n	8002512 <HAL_ADC_Start+0x86>
 8002510:	4b3e      	ldr	r3, [pc, #248]	@ (800260c <HAL_ADC_Start+0x180>)
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6812      	ldr	r2, [r2, #0]
 8002516:	4293      	cmp	r3, r2
 8002518:	d002      	beq.n	8002520 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d105      	bne.n	800252c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002524:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002530:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002534:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002538:	d106      	bne.n	8002548 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800253e:	f023 0206 	bic.w	r2, r3, #6
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	665a      	str	r2, [r3, #100]	@ 0x64
 8002546:	e002      	b.n	800254e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	221c      	movs	r2, #28
 8002554:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a2b      	ldr	r2, [pc, #172]	@ (8002610 <HAL_ADC_Start+0x184>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d002      	beq.n	800256e <HAL_ADC_Start+0xe2>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	e000      	b.n	8002570 <HAL_ADC_Start+0xe4>
 800256e:	4b27      	ldr	r3, [pc, #156]	@ (800260c <HAL_ADC_Start+0x180>)
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	4293      	cmp	r3, r2
 8002576:	d008      	beq.n	800258a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d005      	beq.n	800258a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	2b05      	cmp	r3, #5
 8002582:	d002      	beq.n	800258a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	2b09      	cmp	r3, #9
 8002588:	d114      	bne.n	80025b4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d007      	beq.n	80025a8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800259c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fd01 	bl	8001fb4 <LL_ADC_REG_StartConversion>
 80025b2:	e025      	b.n	8002600 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a12      	ldr	r2, [pc, #72]	@ (8002610 <HAL_ADC_Start+0x184>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d002      	beq.n	80025d0 <HAL_ADC_Start+0x144>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	e000      	b.n	80025d2 <HAL_ADC_Start+0x146>
 80025d0:	4b0e      	ldr	r3, [pc, #56]	@ (800260c <HAL_ADC_Start+0x180>)
 80025d2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00f      	beq.n	8002600 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	661a      	str	r2, [r3, #96]	@ 0x60
 80025f0:	e006      	b.n	8002600 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80025fa:	e001      	b.n	8002600 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025fc:	2302      	movs	r3, #2
 80025fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002600:	7dfb      	ldrb	r3, [r7, #23]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40022000 	.word	0x40022000
 8002610:	40022100 	.word	0x40022100
 8002614:	40022300 	.word	0x40022300
 8002618:	58026300 	.word	0x58026300
 800261c:	fffff0fe 	.word	0xfffff0fe

08002620 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_ADC_Stop+0x16>
 8002632:	2302      	movs	r3, #2
 8002634:	e021      	b.n	800267a <HAL_ADC_Stop+0x5a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800263e:	2103      	movs	r1, #3
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fe53 	bl	80032ec <ADC_ConversionStop>
 8002646:	4603      	mov	r3, r0
 8002648:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10f      	bne.n	8002670 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 ff91 	bl	8003578 <ADC_Disable>
 8002656:	4603      	mov	r3, r0
 8002658:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d107      	bne.n	8002670 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002664:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <HAL_ADC_Stop+0x64>)
 8002666:	4013      	ands	r3, r2
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002678:	7bfb      	ldrb	r3, [r7, #15]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	ffffeefe 	.word	0xffffeefe

08002688 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a72      	ldr	r2, [pc, #456]	@ (8002860 <HAL_ADC_PollForConversion+0x1d8>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d004      	beq.n	80026a6 <HAL_ADC_PollForConversion+0x1e>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a70      	ldr	r2, [pc, #448]	@ (8002864 <HAL_ADC_PollForConversion+0x1dc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d101      	bne.n	80026aa <HAL_ADC_PollForConversion+0x22>
 80026a6:	4b70      	ldr	r3, [pc, #448]	@ (8002868 <HAL_ADC_PollForConversion+0x1e0>)
 80026a8:	e000      	b.n	80026ac <HAL_ADC_PollForConversion+0x24>
 80026aa:	4b70      	ldr	r3, [pc, #448]	@ (800286c <HAL_ADC_PollForConversion+0x1e4>)
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fbc9 	bl	8001e44 <LL_ADC_GetMultimode>
 80026b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d102      	bne.n	80026c2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80026bc:	2308      	movs	r3, #8
 80026be:	61fb      	str	r3, [r7, #28]
 80026c0:	e037      	b.n	8002732 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	d002      	beq.n	80026d4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b09      	cmp	r3, #9
 80026d2:	d111      	bne.n	80026f8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026e6:	f043 0220 	orr.w	r2, r3, #32
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e0b1      	b.n	8002856 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80026f2:	2304      	movs	r3, #4
 80026f4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80026f6:	e01c      	b.n	8002732 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a58      	ldr	r2, [pc, #352]	@ (8002860 <HAL_ADC_PollForConversion+0x1d8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d004      	beq.n	800270c <HAL_ADC_PollForConversion+0x84>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a57      	ldr	r2, [pc, #348]	@ (8002864 <HAL_ADC_PollForConversion+0x1dc>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d101      	bne.n	8002710 <HAL_ADC_PollForConversion+0x88>
 800270c:	4b56      	ldr	r3, [pc, #344]	@ (8002868 <HAL_ADC_PollForConversion+0x1e0>)
 800270e:	e000      	b.n	8002712 <HAL_ADC_PollForConversion+0x8a>
 8002710:	4b56      	ldr	r3, [pc, #344]	@ (800286c <HAL_ADC_PollForConversion+0x1e4>)
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fba4 	bl	8001e60 <LL_ADC_GetMultiDMATransfer>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002722:	f043 0220 	orr.w	r2, r3, #32
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e093      	b.n	8002856 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800272e:	2304      	movs	r3, #4
 8002730:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002732:	f7ff f997 	bl	8001a64 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002738:	e021      	b.n	800277e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d01d      	beq.n	800277e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002742:	f7ff f98f 	bl	8001a64 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d302      	bcc.n	8002758 <HAL_ADC_PollForConversion+0xd0>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d112      	bne.n	800277e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	4013      	ands	r3, r2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10b      	bne.n	800277e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800276a:	f043 0204 	orr.w	r2, r3, #4
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e06b      	b.n	8002856 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0d6      	beq.n	800273a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002790:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff faa7 	bl	8001cf0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d01c      	beq.n	80027e2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	7e5b      	ldrb	r3, [r3, #25]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d118      	bne.n	80027e2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d111      	bne.n	80027e2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d105      	bne.n	80027e2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027da:	f043 0201 	orr.w	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002864 <HAL_ADC_PollForConversion+0x1dc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d002      	beq.n	80027f2 <HAL_ADC_PollForConversion+0x16a>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	e000      	b.n	80027f4 <HAL_ADC_PollForConversion+0x16c>
 80027f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002860 <HAL_ADC_PollForConversion+0x1d8>)
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d008      	beq.n	800280e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2b05      	cmp	r3, #5
 8002806:	d002      	beq.n	800280e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2b09      	cmp	r3, #9
 800280c:	d104      	bne.n	8002818 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	e00c      	b.n	8002832 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a11      	ldr	r2, [pc, #68]	@ (8002864 <HAL_ADC_PollForConversion+0x1dc>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d002      	beq.n	8002828 <HAL_ADC_PollForConversion+0x1a0>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	e000      	b.n	800282a <HAL_ADC_PollForConversion+0x1a2>
 8002828:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <HAL_ADC_PollForConversion+0x1d8>)
 800282a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	2b08      	cmp	r3, #8
 8002836:	d104      	bne.n	8002842 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2208      	movs	r2, #8
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	e008      	b.n	8002854 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d103      	bne.n	8002854 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	220c      	movs	r2, #12
 8002852:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3720      	adds	r7, #32
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40022000 	.word	0x40022000
 8002864:	40022100 	.word	0x40022100
 8002868:	40022300 	.word	0x40022300
 800286c:	58026300 	.word	0x58026300

08002870 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800288c:	b590      	push	{r4, r7, lr}
 800288e:	b0b9      	sub	sp, #228	@ 0xe4
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80028a6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4aab      	ldr	r2, [pc, #684]	@ (8002b5c <HAL_ADC_ConfigChannel+0x2d0>)
 80028ae:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d102      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x34>
 80028ba:	2302      	movs	r3, #2
 80028bc:	f000 bcfe 	b.w	80032bc <HAL_ADC_ConfigChannel+0xa30>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fb99 	bl	8002004 <LL_ADC_REG_IsConversionOngoing>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f040 84e2 	bne.w	800329e <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	db38      	blt.n	8002954 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a9e      	ldr	r2, [pc, #632]	@ (8002b60 <HAL_ADC_ConfigChannel+0x2d4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d033      	beq.n	8002954 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d108      	bne.n	800290a <HAL_ADC_ConfigChannel+0x7e>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	0e9b      	lsrs	r3, r3, #26
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	2201      	movs	r2, #1
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	e01d      	b.n	8002946 <HAL_ADC_ConfigChannel+0xba>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002912:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002916:	fa93 f3a3 	rbit	r3, r3
 800291a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800291e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002922:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002926:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 800292e:	2320      	movs	r3, #32
 8002930:	e004      	b.n	800293c <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8002932:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	2201      	movs	r2, #1
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	69d1      	ldr	r1, [r2, #28]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	430b      	orrs	r3, r1
 8002952:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6818      	ldr	r0, [r3, #0]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	6859      	ldr	r1, [r3, #4]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	f7ff f9d8 	bl	8001d16 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fb4a 	bl	8002004 <LL_ADC_REG_IsConversionOngoing>
 8002970:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fb6b 	bl	8002054 <LL_ADC_INJ_IsConversionOngoing>
 800297e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002986:	2b00      	cmp	r3, #0
 8002988:	f040 8270 	bne.w	8002e6c <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800298c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002990:	2b00      	cmp	r3, #0
 8002992:	f040 826b 	bne.w	8002e6c <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6819      	ldr	r1, [r3, #0]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f7ff f9e3 	bl	8001d6e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a6c      	ldr	r2, [pc, #432]	@ (8002b60 <HAL_ADC_ConfigChannel+0x2d4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d10d      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	08db      	lsrs	r3, r3, #3
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80029cc:	e032      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80029ce:	4b65      	ldr	r3, [pc, #404]	@ (8002b64 <HAL_ADC_ConfigChannel+0x2d8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80029d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029da:	d10b      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x168>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	089b      	lsrs	r3, r3, #2
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	e01d      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x1a4>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10b      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x18e>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	e00a      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x1a4>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	089b      	lsrs	r3, r3, #2
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d048      	beq.n	8002ace <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	6919      	ldr	r1, [r3, #16]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a4c:	f7ff f85e 	bl	8001b0c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a42      	ldr	r2, [pc, #264]	@ (8002b60 <HAL_ADC_ConfigChannel+0x2d4>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d119      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	6919      	ldr	r1, [r3, #16]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	461a      	mov	r2, r3
 8002a68:	f7ff f8f6 	bl	8001c58 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	6919      	ldr	r1, [r3, #16]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d102      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x1f8>
 8002a7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a82:	e000      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x1fa>
 8002a84:	2300      	movs	r3, #0
 8002a86:	461a      	mov	r2, r3
 8002a88:	f7ff f8c4 	bl	8001c14 <LL_ADC_SetOffsetSaturation>
 8002a8c:	e1ee      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6919      	ldr	r1, [r3, #16]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d102      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x21a>
 8002aa0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002aa4:	e000      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x21c>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	f7ff f891 	bl	8001bd0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6919      	ldr	r1, [r3, #16]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	7e1b      	ldrb	r3, [r3, #24]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d102      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x238>
 8002abe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ac2:	e000      	b.n	8002ac6 <HAL_ADC_ConfigChannel+0x23a>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f7ff f868 	bl	8001b9c <LL_ADC_SetDataRightShift>
 8002acc:	e1ce      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a23      	ldr	r2, [pc, #140]	@ (8002b60 <HAL_ADC_ConfigChannel+0x2d4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	f040 8181 	bne.w	8002ddc <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff f845 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x27a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2100      	movs	r1, #0
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff f83a 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 8002afc:	4603      	mov	r3, r0
 8002afe:	0e9b      	lsrs	r3, r3, #26
 8002b00:	f003 021f 	and.w	r2, r3, #31
 8002b04:	e01e      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x2b8>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff f82f 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8002b24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b28:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8002b2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8002b34:	2320      	movs	r3, #32
 8002b36:	e004      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8002b38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b3c:	fab3 f383 	clz	r3, r3
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10b      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x2dc>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	0e9b      	lsrs	r3, r3, #26
 8002b56:	f003 031f 	and.w	r3, r3, #31
 8002b5a:	e01e      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x30e>
 8002b5c:	47ff0000 	.word	0x47ff0000
 8002b60:	58026000 	.word	0x58026000
 8002b64:	5c001000 	.word	0x5c001000
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b74:	fa93 f3a3 	rbit	r3, r3
 8002b78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002b7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002b84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8002b8c:	2320      	movs	r3, #32
 8002b8e:	e004      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8002b90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b94:	fab3 f383 	clz	r3, r3
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d106      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff f878 	bl	8001c9c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe ffdc 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10a      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x34c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe ffd1 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	0e9b      	lsrs	r3, r3, #26
 8002bd2:	f003 021f 	and.w	r2, r3, #31
 8002bd6:	e01e      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x38a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2101      	movs	r1, #1
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe ffc6 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002bf6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002bfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002c06:	2320      	movs	r3, #32
 8002c08:	e004      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8002c0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d105      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x3a2>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	0e9b      	lsrs	r3, r3, #26
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	e018      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x3d4>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002c42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c46:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002c4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8002c52:	2320      	movs	r3, #32
 8002c54:	e004      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8002c56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d106      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff f815 	bl	8001c9c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2102      	movs	r1, #2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe ff79 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10a      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x412>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2102      	movs	r1, #2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe ff6e 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 8002c94:	4603      	mov	r3, r0
 8002c96:	0e9b      	lsrs	r3, r3, #26
 8002c98:	f003 021f 	and.w	r2, r3, #31
 8002c9c:	e01e      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x450>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2102      	movs	r1, #2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe ff63 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 8002caa:	4603      	mov	r3, r0
 8002cac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002cb4:	fa93 f3a3 	rbit	r3, r3
 8002cb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002cbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002cc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8002ccc:	2320      	movs	r3, #32
 8002cce:	e004      	b.n	8002cda <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8002cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cd4:	fab3 f383 	clz	r3, r3
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d105      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x468>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	0e9b      	lsrs	r3, r3, #26
 8002cee:	f003 031f 	and.w	r3, r3, #31
 8002cf2:	e014      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x492>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cfc:	fa93 f3a3 	rbit	r3, r3
 8002d00:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002d02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002d08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002d10:	2320      	movs	r3, #32
 8002d12:	e004      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002d14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d18:	fab3 f383 	clz	r3, r3
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d106      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2200      	movs	r2, #0
 8002d28:	2102      	movs	r1, #2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe ffb6 	bl	8001c9c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2103      	movs	r1, #3
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe ff1a 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10a      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x4d0>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2103      	movs	r1, #3
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fe ff0f 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 8002d52:	4603      	mov	r3, r0
 8002d54:	0e9b      	lsrs	r3, r3, #26
 8002d56:	f003 021f 	and.w	r2, r3, #31
 8002d5a:	e017      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x500>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2103      	movs	r1, #3
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe ff04 	bl	8001b70 <LL_ADC_GetOffsetChannel>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002d74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d76:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002d78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8002d7e:	2320      	movs	r3, #32
 8002d80:	e003      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8002d82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d84:	fab3 f383 	clz	r3, r3
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d105      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x518>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	0e9b      	lsrs	r3, r3, #26
 8002d9e:	f003 031f 	and.w	r3, r3, #31
 8002da2:	e011      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x53c>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002db2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002db4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002db6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8002dbc:	2320      	movs	r3, #32
 8002dbe:	e003      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8002dc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d14f      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2103      	movs	r1, #3
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fe ff61 	bl	8001c9c <LL_ADC_SetOffsetState>
 8002dda:	e047      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	069b      	lsls	r3, r3, #26
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d107      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002dfe:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	069b      	lsls	r3, r3, #26
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d107      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e22:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	069b      	lsls	r3, r3, #26
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d107      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e46:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	069b      	lsls	r3, r3, #26
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d107      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e6a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff f879 	bl	8001f68 <LL_ADC_IsEnabled>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f040 8219 	bne.w	80032b0 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	6819      	ldr	r1, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f7fe ff9a 	bl	8001dc4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4aa1      	ldr	r2, [pc, #644]	@ (800311c <HAL_ADC_ConfigChannel+0x890>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	f040 812e 	bne.w	80030f8 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10b      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x638>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	0e9b      	lsrs	r3, r3, #26
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	2b09      	cmp	r3, #9
 8002eba:	bf94      	ite	ls
 8002ebc:	2301      	movls	r3, #1
 8002ebe:	2300      	movhi	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e019      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x66c>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002ed6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002edc:	2320      	movs	r3, #32
 8002ede:	e003      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002ee0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ee2:	fab3 f383 	clz	r3, r3
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	3301      	adds	r3, #1
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	2b09      	cmp	r3, #9
 8002ef0:	bf94      	ite	ls
 8002ef2:	2301      	movls	r3, #1
 8002ef4:	2300      	movhi	r3, #0
 8002ef6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d079      	beq.n	8002ff0 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d107      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x68c>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	0e9b      	lsrs	r3, r3, #26
 8002f0e:	3301      	adds	r3, #1
 8002f10:	069b      	lsls	r3, r3, #26
 8002f12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f16:	e015      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x6b8>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f20:	fa93 f3a3 	rbit	r3, r3
 8002f24:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002f26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f28:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002f2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8002f30:	2320      	movs	r3, #32
 8002f32:	e003      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8002f34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f36:	fab3 f383 	clz	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	069b      	lsls	r3, r3, #26
 8002f40:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d109      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x6d8>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	0e9b      	lsrs	r3, r3, #26
 8002f56:	3301      	adds	r3, #1
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f62:	e017      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x708>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f6c:	fa93 f3a3 	rbit	r3, r3
 8002f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f74:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002f76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8002f7c:	2320      	movs	r3, #32
 8002f7e:	e003      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8002f80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f82:	fab3 f383 	clz	r3, r3
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	2101      	movs	r1, #1
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	ea42 0103 	orr.w	r1, r2, r3
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x72e>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	0e9b      	lsrs	r3, r3, #26
 8002faa:	3301      	adds	r3, #1
 8002fac:	f003 021f 	and.w	r2, r3, #31
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	4413      	add	r3, r2
 8002fb6:	051b      	lsls	r3, r3, #20
 8002fb8:	e018      	b.n	8002fec <HAL_ADC_ConfigChannel+0x760>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fca:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	e003      	b.n	8002fde <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8002fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd8:	fab3 f383 	clz	r3, r3
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f003 021f 	and.w	r2, r3, #31
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4413      	add	r3, r2
 8002fea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fec:	430b      	orrs	r3, r1
 8002fee:	e07e      	b.n	80030ee <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d107      	bne.n	800300c <HAL_ADC_ConfigChannel+0x780>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	0e9b      	lsrs	r3, r3, #26
 8003002:	3301      	adds	r3, #1
 8003004:	069b      	lsls	r3, r3, #26
 8003006:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800300a:	e015      	b.n	8003038 <HAL_ADC_ConfigChannel+0x7ac>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003014:	fa93 f3a3 	rbit	r3, r3
 8003018:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800301e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8003024:	2320      	movs	r3, #32
 8003026:	e003      	b.n	8003030 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8003028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302a:	fab3 f383 	clz	r3, r3
 800302e:	b2db      	uxtb	r3, r3
 8003030:	3301      	adds	r3, #1
 8003032:	069b      	lsls	r3, r3, #26
 8003034:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003040:	2b00      	cmp	r3, #0
 8003042:	d109      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x7cc>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	0e9b      	lsrs	r3, r3, #26
 800304a:	3301      	adds	r3, #1
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	2101      	movs	r1, #1
 8003052:	fa01 f303 	lsl.w	r3, r1, r3
 8003056:	e017      	b.n	8003088 <HAL_ADC_ConfigChannel+0x7fc>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	fa93 f3a3 	rbit	r3, r3
 8003064:	61bb      	str	r3, [r7, #24]
  return result;
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8003070:	2320      	movs	r3, #32
 8003072:	e003      	b.n	800307c <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	fab3 f383 	clz	r3, r3
 800307a:	b2db      	uxtb	r3, r3
 800307c:	3301      	adds	r3, #1
 800307e:	f003 031f 	and.w	r3, r3, #31
 8003082:	2101      	movs	r1, #1
 8003084:	fa01 f303 	lsl.w	r3, r1, r3
 8003088:	ea42 0103 	orr.w	r1, r2, r3
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10d      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x828>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	0e9b      	lsrs	r3, r3, #26
 800309e:	3301      	adds	r3, #1
 80030a0:	f003 021f 	and.w	r2, r3, #31
 80030a4:	4613      	mov	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	4413      	add	r3, r2
 80030aa:	3b1e      	subs	r3, #30
 80030ac:	051b      	lsls	r3, r3, #20
 80030ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80030b2:	e01b      	b.n	80030ec <HAL_ADC_ConfigChannel+0x860>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	60fb      	str	r3, [r7, #12]
  return result;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80030cc:	2320      	movs	r3, #32
 80030ce:	e003      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	fab3 f383 	clz	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	3301      	adds	r3, #1
 80030da:	f003 021f 	and.w	r2, r3, #31
 80030de:	4613      	mov	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4413      	add	r3, r2
 80030e4:	3b1e      	subs	r3, #30
 80030e6:	051b      	lsls	r3, r3, #20
 80030e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030ec:	430b      	orrs	r3, r1
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	6892      	ldr	r2, [r2, #8]
 80030f2:	4619      	mov	r1, r3
 80030f4:	f7fe fe3b 	bl	8001d6e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f280 80d7 	bge.w	80032b0 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a06      	ldr	r2, [pc, #24]	@ (8003120 <HAL_ADC_ConfigChannel+0x894>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d004      	beq.n	8003116 <HAL_ADC_ConfigChannel+0x88a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a04      	ldr	r2, [pc, #16]	@ (8003124 <HAL_ADC_ConfigChannel+0x898>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d10a      	bne.n	800312c <HAL_ADC_ConfigChannel+0x8a0>
 8003116:	4b04      	ldr	r3, [pc, #16]	@ (8003128 <HAL_ADC_ConfigChannel+0x89c>)
 8003118:	e009      	b.n	800312e <HAL_ADC_ConfigChannel+0x8a2>
 800311a:	bf00      	nop
 800311c:	47ff0000 	.word	0x47ff0000
 8003120:	40022000 	.word	0x40022000
 8003124:	40022100 	.word	0x40022100
 8003128:	40022300 	.word	0x40022300
 800312c:	4b65      	ldr	r3, [pc, #404]	@ (80032c4 <HAL_ADC_ConfigChannel+0xa38>)
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe fcde 	bl	8001af0 <LL_ADC_GetCommonPathInternalCh>
 8003134:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a62      	ldr	r2, [pc, #392]	@ (80032c8 <HAL_ADC_ConfigChannel+0xa3c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d004      	beq.n	800314c <HAL_ADC_ConfigChannel+0x8c0>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a61      	ldr	r2, [pc, #388]	@ (80032cc <HAL_ADC_ConfigChannel+0xa40>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d10e      	bne.n	800316a <HAL_ADC_ConfigChannel+0x8de>
 800314c:	485e      	ldr	r0, [pc, #376]	@ (80032c8 <HAL_ADC_ConfigChannel+0xa3c>)
 800314e:	f7fe ff0b 	bl	8001f68 <LL_ADC_IsEnabled>
 8003152:	4604      	mov	r4, r0
 8003154:	485d      	ldr	r0, [pc, #372]	@ (80032cc <HAL_ADC_ConfigChannel+0xa40>)
 8003156:	f7fe ff07 	bl	8001f68 <LL_ADC_IsEnabled>
 800315a:	4603      	mov	r3, r0
 800315c:	4323      	orrs	r3, r4
 800315e:	2b00      	cmp	r3, #0
 8003160:	bf0c      	ite	eq
 8003162:	2301      	moveq	r3, #1
 8003164:	2300      	movne	r3, #0
 8003166:	b2db      	uxtb	r3, r3
 8003168:	e008      	b.n	800317c <HAL_ADC_ConfigChannel+0x8f0>
 800316a:	4859      	ldr	r0, [pc, #356]	@ (80032d0 <HAL_ADC_ConfigChannel+0xa44>)
 800316c:	f7fe fefc 	bl	8001f68 <LL_ADC_IsEnabled>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	bf0c      	ite	eq
 8003176:	2301      	moveq	r3, #1
 8003178:	2300      	movne	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 8084 	beq.w	800328a <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a53      	ldr	r2, [pc, #332]	@ (80032d4 <HAL_ADC_ConfigChannel+0xa48>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d132      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x966>
 800318c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003190:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d12c      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a4c      	ldr	r2, [pc, #304]	@ (80032d0 <HAL_ADC_ConfigChannel+0xa44>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	f040 8086 	bne.w	80032b0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a47      	ldr	r2, [pc, #284]	@ (80032c8 <HAL_ADC_ConfigChannel+0xa3c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d004      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0x92c>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a46      	ldr	r2, [pc, #280]	@ (80032cc <HAL_ADC_ConfigChannel+0xa40>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d101      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x930>
 80031b8:	4a47      	ldr	r2, [pc, #284]	@ (80032d8 <HAL_ADC_ConfigChannel+0xa4c>)
 80031ba:	e000      	b.n	80031be <HAL_ADC_ConfigChannel+0x932>
 80031bc:	4a41      	ldr	r2, [pc, #260]	@ (80032c4 <HAL_ADC_ConfigChannel+0xa38>)
 80031be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80031c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031c6:	4619      	mov	r1, r3
 80031c8:	4610      	mov	r0, r2
 80031ca:	f7fe fc7e 	bl	8001aca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031ce:	4b43      	ldr	r3, [pc, #268]	@ (80032dc <HAL_ADC_ConfigChannel+0xa50>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	099b      	lsrs	r3, r3, #6
 80031d4:	4a42      	ldr	r2, [pc, #264]	@ (80032e0 <HAL_ADC_ConfigChannel+0xa54>)
 80031d6:	fba2 2303 	umull	r2, r3, r2, r3
 80031da:	099b      	lsrs	r3, r3, #6
 80031dc:	3301      	adds	r3, #1
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80031e2:	e002      	b.n	80031ea <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f9      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031f0:	e05e      	b.n	80032b0 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a3b      	ldr	r2, [pc, #236]	@ (80032e4 <HAL_ADC_ConfigChannel+0xa58>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d120      	bne.n	800323e <HAL_ADC_ConfigChannel+0x9b2>
 80031fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003200:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d11a      	bne.n	800323e <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a30      	ldr	r2, [pc, #192]	@ (80032d0 <HAL_ADC_ConfigChannel+0xa44>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d14e      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a2c      	ldr	r2, [pc, #176]	@ (80032c8 <HAL_ADC_ConfigChannel+0xa3c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d004      	beq.n	8003226 <HAL_ADC_ConfigChannel+0x99a>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a2a      	ldr	r2, [pc, #168]	@ (80032cc <HAL_ADC_ConfigChannel+0xa40>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d101      	bne.n	800322a <HAL_ADC_ConfigChannel+0x99e>
 8003226:	4a2c      	ldr	r2, [pc, #176]	@ (80032d8 <HAL_ADC_ConfigChannel+0xa4c>)
 8003228:	e000      	b.n	800322c <HAL_ADC_ConfigChannel+0x9a0>
 800322a:	4a26      	ldr	r2, [pc, #152]	@ (80032c4 <HAL_ADC_ConfigChannel+0xa38>)
 800322c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003230:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003234:	4619      	mov	r1, r3
 8003236:	4610      	mov	r0, r2
 8003238:	f7fe fc47 	bl	8001aca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800323c:	e038      	b.n	80032b0 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a29      	ldr	r2, [pc, #164]	@ (80032e8 <HAL_ADC_ConfigChannel+0xa5c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d133      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0xa24>
 8003248:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800324c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d12d      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1d      	ldr	r2, [pc, #116]	@ (80032d0 <HAL_ADC_ConfigChannel+0xa44>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d128      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a19      	ldr	r2, [pc, #100]	@ (80032c8 <HAL_ADC_ConfigChannel+0xa3c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d004      	beq.n	8003272 <HAL_ADC_ConfigChannel+0x9e6>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a17      	ldr	r2, [pc, #92]	@ (80032cc <HAL_ADC_ConfigChannel+0xa40>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d101      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x9ea>
 8003272:	4a19      	ldr	r2, [pc, #100]	@ (80032d8 <HAL_ADC_ConfigChannel+0xa4c>)
 8003274:	e000      	b.n	8003278 <HAL_ADC_ConfigChannel+0x9ec>
 8003276:	4a13      	ldr	r2, [pc, #76]	@ (80032c4 <HAL_ADC_ConfigChannel+0xa38>)
 8003278:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800327c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003280:	4619      	mov	r1, r3
 8003282:	4610      	mov	r0, r2
 8003284:	f7fe fc21 	bl	8001aca <LL_ADC_SetCommonPathInternalCh>
 8003288:	e012      	b.n	80032b0 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800328e:	f043 0220 	orr.w	r2, r3, #32
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800329c:	e008      	b.n	80032b0 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a2:	f043 0220 	orr.w	r2, r3, #32
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80032b8:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80032bc:	4618      	mov	r0, r3
 80032be:	37e4      	adds	r7, #228	@ 0xe4
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd90      	pop	{r4, r7, pc}
 80032c4:	58026300 	.word	0x58026300
 80032c8:	40022000 	.word	0x40022000
 80032cc:	40022100 	.word	0x40022100
 80032d0:	58026000 	.word	0x58026000
 80032d4:	c7520000 	.word	0xc7520000
 80032d8:	40022300 	.word	0x40022300
 80032dc:	24000000 	.word	0x24000000
 80032e0:	053e2d63 	.word	0x053e2d63
 80032e4:	c3210000 	.word	0xc3210000
 80032e8:	cb840000 	.word	0xcb840000

080032ec <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe fe7e 	bl	8002004 <LL_ADC_REG_IsConversionOngoing>
 8003308:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe fea0 	bl	8002054 <LL_ADC_INJ_IsConversionOngoing>
 8003314:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d103      	bne.n	8003324 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 8098 	beq.w	8003454 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d02a      	beq.n	8003388 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	7e5b      	ldrb	r3, [r3, #25]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d126      	bne.n	8003388 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	7e1b      	ldrb	r3, [r3, #24]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d122      	bne.n	8003388 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003342:	2301      	movs	r3, #1
 8003344:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003346:	e014      	b.n	8003372 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	4a45      	ldr	r2, [pc, #276]	@ (8003460 <ADC_ConversionStop+0x174>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d90d      	bls.n	800336c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003354:	f043 0210 	orr.w	r2, r3, #16
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003360:	f043 0201 	orr.w	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e074      	b.n	8003456 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	3301      	adds	r3, #1
 8003370:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800337c:	2b40      	cmp	r3, #64	@ 0x40
 800337e:	d1e3      	bne.n	8003348 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2240      	movs	r2, #64	@ 0x40
 8003386:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d014      	beq.n	80033b8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7fe fe36 	bl	8002004 <LL_ADC_REG_IsConversionOngoing>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00c      	beq.n	80033b8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe fdf3 	bl	8001f8e <LL_ADC_IsDisableOngoing>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d104      	bne.n	80033b8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe fe12 	bl	8001fdc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d014      	beq.n	80033e8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe fe46 	bl	8002054 <LL_ADC_INJ_IsConversionOngoing>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00c      	beq.n	80033e8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe fddb 	bl	8001f8e <LL_ADC_IsDisableOngoing>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d104      	bne.n	80033e8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fe fe22 	bl	800202c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d005      	beq.n	80033fa <ADC_ConversionStop+0x10e>
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d105      	bne.n	8003400 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80033f4:	230c      	movs	r3, #12
 80033f6:	617b      	str	r3, [r7, #20]
        break;
 80033f8:	e005      	b.n	8003406 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80033fa:	2308      	movs	r3, #8
 80033fc:	617b      	str	r3, [r7, #20]
        break;
 80033fe:	e002      	b.n	8003406 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003400:	2304      	movs	r3, #4
 8003402:	617b      	str	r3, [r7, #20]
        break;
 8003404:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003406:	f7fe fb2d 	bl	8001a64 <HAL_GetTick>
 800340a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800340c:	e01b      	b.n	8003446 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800340e:	f7fe fb29 	bl	8001a64 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b05      	cmp	r3, #5
 800341a:	d914      	bls.n	8003446 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	4013      	ands	r3, r2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00d      	beq.n	8003446 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800342e:	f043 0210 	orr.w	r2, r3, #16
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800343a:	f043 0201 	orr.w	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e007      	b.n	8003456 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1dc      	bne.n	800340e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	000cdbff 	.word	0x000cdbff

08003464 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7fe fd79 	bl	8001f68 <LL_ADC_IsEnabled>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d16e      	bne.n	800355a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	4b38      	ldr	r3, [pc, #224]	@ (8003564 <ADC_Enable+0x100>)
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00d      	beq.n	80034a6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800348e:	f043 0210 	orr.w	r2, r3, #16
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800349a:	f043 0201 	orr.w	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e05a      	b.n	800355c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe fd34 	bl	8001f18 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80034b0:	f7fe fad8 	bl	8001a64 <HAL_GetTick>
 80034b4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a2b      	ldr	r2, [pc, #172]	@ (8003568 <ADC_Enable+0x104>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d004      	beq.n	80034ca <ADC_Enable+0x66>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a29      	ldr	r2, [pc, #164]	@ (800356c <ADC_Enable+0x108>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d101      	bne.n	80034ce <ADC_Enable+0x6a>
 80034ca:	4b29      	ldr	r3, [pc, #164]	@ (8003570 <ADC_Enable+0x10c>)
 80034cc:	e000      	b.n	80034d0 <ADC_Enable+0x6c>
 80034ce:	4b29      	ldr	r3, [pc, #164]	@ (8003574 <ADC_Enable+0x110>)
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fe fcb7 	bl	8001e44 <LL_ADC_GetMultimode>
 80034d6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a23      	ldr	r2, [pc, #140]	@ (800356c <ADC_Enable+0x108>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d002      	beq.n	80034e8 <ADC_Enable+0x84>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	e000      	b.n	80034ea <ADC_Enable+0x86>
 80034e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003568 <ADC_Enable+0x104>)
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d02c      	beq.n	800354c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d130      	bne.n	800355a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034f8:	e028      	b.n	800354c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fe fd32 	bl	8001f68 <LL_ADC_IsEnabled>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d104      	bne.n	8003514 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fe fd02 	bl	8001f18 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003514:	f7fe faa6 	bl	8001a64 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d914      	bls.n	800354c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b01      	cmp	r3, #1
 800352e:	d00d      	beq.n	800354c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003534:	f043 0210 	orr.w	r2, r3, #16
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003540:	f043 0201 	orr.w	r2, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e007      	b.n	800355c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b01      	cmp	r3, #1
 8003558:	d1cf      	bne.n	80034fa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	8000003f 	.word	0x8000003f
 8003568:	40022000 	.word	0x40022000
 800356c:	40022100 	.word	0x40022100
 8003570:	40022300 	.word	0x40022300
 8003574:	58026300 	.word	0x58026300

08003578 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f7fe fd02 	bl	8001f8e <LL_ADC_IsDisableOngoing>
 800358a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f7fe fce9 	bl	8001f68 <LL_ADC_IsEnabled>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d047      	beq.n	800362c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d144      	bne.n	800362c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 030d 	and.w	r3, r3, #13
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d10c      	bne.n	80035ca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fe fcc3 	bl	8001f40 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2203      	movs	r2, #3
 80035c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035c2:	f7fe fa4f 	bl	8001a64 <HAL_GetTick>
 80035c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035c8:	e029      	b.n	800361e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ce:	f043 0210 	orr.w	r2, r3, #16
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035da:	f043 0201 	orr.w	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e023      	b.n	800362e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035e6:	f7fe fa3d 	bl	8001a64 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d914      	bls.n	800361e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00d      	beq.n	800361e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003606:	f043 0210 	orr.w	r2, r3, #16
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003612:	f043 0201 	orr.w	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e007      	b.n	800362e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1dc      	bne.n	80035e6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a6c      	ldr	r2, [pc, #432]	@ (80037f8 <ADC_ConfigureBoostMode+0x1c0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d004      	beq.n	8003654 <ADC_ConfigureBoostMode+0x1c>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a6b      	ldr	r2, [pc, #428]	@ (80037fc <ADC_ConfigureBoostMode+0x1c4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d109      	bne.n	8003668 <ADC_ConfigureBoostMode+0x30>
 8003654:	4b6a      	ldr	r3, [pc, #424]	@ (8003800 <ADC_ConfigureBoostMode+0x1c8>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf14      	ite	ne
 8003660:	2301      	movne	r3, #1
 8003662:	2300      	moveq	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	e008      	b.n	800367a <ADC_ConfigureBoostMode+0x42>
 8003668:	4b66      	ldr	r3, [pc, #408]	@ (8003804 <ADC_ConfigureBoostMode+0x1cc>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf14      	ite	ne
 8003674:	2301      	movne	r3, #1
 8003676:	2300      	moveq	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d01c      	beq.n	80036b8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800367e:	f003 f801 	bl	8006684 <HAL_RCC_GetHCLKFreq>
 8003682:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800368c:	d010      	beq.n	80036b0 <ADC_ConfigureBoostMode+0x78>
 800368e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003692:	d873      	bhi.n	800377c <ADC_ConfigureBoostMode+0x144>
 8003694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003698:	d002      	beq.n	80036a0 <ADC_ConfigureBoostMode+0x68>
 800369a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800369e:	d16d      	bne.n	800377c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	0c1b      	lsrs	r3, r3, #16
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ac:	60fb      	str	r3, [r7, #12]
        break;
 80036ae:	e068      	b.n	8003782 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	089b      	lsrs	r3, r3, #2
 80036b4:	60fb      	str	r3, [r7, #12]
        break;
 80036b6:	e064      	b.n	8003782 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80036b8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80036bc:	f04f 0100 	mov.w	r1, #0
 80036c0:	f004 fa1e 	bl	8007b00 <HAL_RCCEx_GetPeriphCLKFreq>
 80036c4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80036ce:	d051      	beq.n	8003774 <ADC_ConfigureBoostMode+0x13c>
 80036d0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80036d4:	d854      	bhi.n	8003780 <ADC_ConfigureBoostMode+0x148>
 80036d6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80036da:	d047      	beq.n	800376c <ADC_ConfigureBoostMode+0x134>
 80036dc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80036e0:	d84e      	bhi.n	8003780 <ADC_ConfigureBoostMode+0x148>
 80036e2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80036e6:	d03d      	beq.n	8003764 <ADC_ConfigureBoostMode+0x12c>
 80036e8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80036ec:	d848      	bhi.n	8003780 <ADC_ConfigureBoostMode+0x148>
 80036ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036f2:	d033      	beq.n	800375c <ADC_ConfigureBoostMode+0x124>
 80036f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036f8:	d842      	bhi.n	8003780 <ADC_ConfigureBoostMode+0x148>
 80036fa:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80036fe:	d029      	beq.n	8003754 <ADC_ConfigureBoostMode+0x11c>
 8003700:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003704:	d83c      	bhi.n	8003780 <ADC_ConfigureBoostMode+0x148>
 8003706:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800370a:	d01a      	beq.n	8003742 <ADC_ConfigureBoostMode+0x10a>
 800370c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003710:	d836      	bhi.n	8003780 <ADC_ConfigureBoostMode+0x148>
 8003712:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003716:	d014      	beq.n	8003742 <ADC_ConfigureBoostMode+0x10a>
 8003718:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800371c:	d830      	bhi.n	8003780 <ADC_ConfigureBoostMode+0x148>
 800371e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003722:	d00e      	beq.n	8003742 <ADC_ConfigureBoostMode+0x10a>
 8003724:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003728:	d82a      	bhi.n	8003780 <ADC_ConfigureBoostMode+0x148>
 800372a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800372e:	d008      	beq.n	8003742 <ADC_ConfigureBoostMode+0x10a>
 8003730:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003734:	d824      	bhi.n	8003780 <ADC_ConfigureBoostMode+0x148>
 8003736:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800373a:	d002      	beq.n	8003742 <ADC_ConfigureBoostMode+0x10a>
 800373c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003740:	d11e      	bne.n	8003780 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	0c9b      	lsrs	r3, r3, #18
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003750:	60fb      	str	r3, [r7, #12]
        break;
 8003752:	e016      	b.n	8003782 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	091b      	lsrs	r3, r3, #4
 8003758:	60fb      	str	r3, [r7, #12]
        break;
 800375a:	e012      	b.n	8003782 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	60fb      	str	r3, [r7, #12]
        break;
 8003762:	e00e      	b.n	8003782 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	099b      	lsrs	r3, r3, #6
 8003768:	60fb      	str	r3, [r7, #12]
        break;
 800376a:	e00a      	b.n	8003782 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	09db      	lsrs	r3, r3, #7
 8003770:	60fb      	str	r3, [r7, #12]
        break;
 8003772:	e006      	b.n	8003782 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	0a1b      	lsrs	r3, r3, #8
 8003778:	60fb      	str	r3, [r7, #12]
        break;
 800377a:	e002      	b.n	8003782 <ADC_ConfigureBoostMode+0x14a>
        break;
 800377c:	bf00      	nop
 800377e:	e000      	b.n	8003782 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003780:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	085b      	lsrs	r3, r3, #1
 8003786:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4a1f      	ldr	r2, [pc, #124]	@ (8003808 <ADC_ConfigureBoostMode+0x1d0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d808      	bhi.n	80037a2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800379e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80037a0:	e025      	b.n	80037ee <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4a19      	ldr	r2, [pc, #100]	@ (800380c <ADC_ConfigureBoostMode+0x1d4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d80a      	bhi.n	80037c0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037bc:	609a      	str	r2, [r3, #8]
}
 80037be:	e016      	b.n	80037ee <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4a13      	ldr	r2, [pc, #76]	@ (8003810 <ADC_ConfigureBoostMode+0x1d8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d80a      	bhi.n	80037de <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037da:	609a      	str	r2, [r3, #8]
}
 80037dc:	e007      	b.n	80037ee <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80037ec:	609a      	str	r2, [r3, #8]
}
 80037ee:	bf00      	nop
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40022000 	.word	0x40022000
 80037fc:	40022100 	.word	0x40022100
 8003800:	40022300 	.word	0x40022300
 8003804:	58026300 	.word	0x58026300
 8003808:	005f5e10 	.word	0x005f5e10
 800380c:	00bebc20 	.word	0x00bebc20
 8003810:	017d7840 	.word	0x017d7840

08003814 <LL_ADC_IsEnabled>:
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <LL_ADC_IsEnabled+0x18>
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <LL_ADC_IsEnabled+0x1a>
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <LL_ADC_REG_IsConversionOngoing>:
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b04      	cmp	r3, #4
 800384c:	d101      	bne.n	8003852 <LL_ADC_REG_IsConversionOngoing+0x18>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b0a3      	sub	sp, #140	@ 0x8c
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800387a:	2302      	movs	r3, #2
 800387c:	e0c1      	b.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003886:	2300      	movs	r3, #0
 8003888:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800388a:	2300      	movs	r3, #0
 800388c:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a5e      	ldr	r2, [pc, #376]	@ (8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d102      	bne.n	800389e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003898:	4b5d      	ldr	r3, [pc, #372]	@ (8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	e001      	b.n	80038a2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ac:	f043 0220 	orr.w	r2, r3, #32
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0a0      	b.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff ffb9 	bl	800383a <LL_ADC_REG_IsConversionOngoing>
 80038c8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff ffb2 	bl	800383a <LL_ADC_REG_IsConversionOngoing>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f040 8081 	bne.w	80039e0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80038de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d17c      	bne.n	80039e0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a48      	ldr	r2, [pc, #288]	@ (8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d004      	beq.n	80038fa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a46      	ldr	r2, [pc, #280]	@ (8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80038fa:	4b46      	ldr	r3, [pc, #280]	@ (8003a14 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80038fc:	e000      	b.n	8003900 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80038fe:	4b46      	ldr	r3, [pc, #280]	@ (8003a18 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003900:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d039      	beq.n	800397e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800390a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	431a      	orrs	r2, r3
 8003918:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800391a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a3a      	ldr	r2, [pc, #232]	@ (8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d004      	beq.n	8003930 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a39      	ldr	r2, [pc, #228]	@ (8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d10e      	bne.n	800394e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003930:	4836      	ldr	r0, [pc, #216]	@ (8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003932:	f7ff ff6f 	bl	8003814 <LL_ADC_IsEnabled>
 8003936:	4604      	mov	r4, r0
 8003938:	4835      	ldr	r0, [pc, #212]	@ (8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800393a:	f7ff ff6b 	bl	8003814 <LL_ADC_IsEnabled>
 800393e:	4603      	mov	r3, r0
 8003940:	4323      	orrs	r3, r4
 8003942:	2b00      	cmp	r3, #0
 8003944:	bf0c      	ite	eq
 8003946:	2301      	moveq	r3, #1
 8003948:	2300      	movne	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	e008      	b.n	8003960 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800394e:	4833      	ldr	r0, [pc, #204]	@ (8003a1c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003950:	f7ff ff60 	bl	8003814 <LL_ADC_IsEnabled>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	bf0c      	ite	eq
 800395a:	2301      	moveq	r3, #1
 800395c:	2300      	movne	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d047      	beq.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003964:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	4b2d      	ldr	r3, [pc, #180]	@ (8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800396a:	4013      	ands	r3, r2
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	6811      	ldr	r1, [r2, #0]
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	6892      	ldr	r2, [r2, #8]
 8003974:	430a      	orrs	r2, r1
 8003976:	431a      	orrs	r2, r3
 8003978:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800397a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800397c:	e03a      	b.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800397e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003986:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003988:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1f      	ldr	r2, [pc, #124]	@ (8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d004      	beq.n	800399e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a1d      	ldr	r2, [pc, #116]	@ (8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d10e      	bne.n	80039bc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800399e:	481b      	ldr	r0, [pc, #108]	@ (8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80039a0:	f7ff ff38 	bl	8003814 <LL_ADC_IsEnabled>
 80039a4:	4604      	mov	r4, r0
 80039a6:	481a      	ldr	r0, [pc, #104]	@ (8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80039a8:	f7ff ff34 	bl	8003814 <LL_ADC_IsEnabled>
 80039ac:	4603      	mov	r3, r0
 80039ae:	4323      	orrs	r3, r4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf0c      	ite	eq
 80039b4:	2301      	moveq	r3, #1
 80039b6:	2300      	movne	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	e008      	b.n	80039ce <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80039bc:	4817      	ldr	r0, [pc, #92]	@ (8003a1c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80039be:	f7ff ff29 	bl	8003814 <LL_ADC_IsEnabled>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bf0c      	ite	eq
 80039c8:	2301      	moveq	r3, #1
 80039ca:	2300      	movne	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d010      	beq.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80039d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	4b12      	ldr	r3, [pc, #72]	@ (8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80039d8:	4013      	ands	r3, r2
 80039da:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80039dc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039de:	e009      	b.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e4:	f043 0220 	orr.w	r2, r3, #32
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80039f2:	e000      	b.n	80039f6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80039fe:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	378c      	adds	r7, #140	@ 0x8c
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd90      	pop	{r4, r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40022000 	.word	0x40022000
 8003a10:	40022100 	.word	0x40022100
 8003a14:	40022300 	.word	0x40022300
 8003a18:	58026300 	.word	0x58026300
 8003a1c:	58026000 	.word	0x58026000
 8003a20:	fffff0e0 	.word	0xfffff0e0

08003a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a34:	4b0b      	ldr	r3, [pc, #44]	@ (8003a64 <__NVIC_SetPriorityGrouping+0x40>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a40:	4013      	ands	r3, r2
 8003a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003a4c:	4b06      	ldr	r3, [pc, #24]	@ (8003a68 <__NVIC_SetPriorityGrouping+0x44>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a52:	4a04      	ldr	r2, [pc, #16]	@ (8003a64 <__NVIC_SetPriorityGrouping+0x40>)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	60d3      	str	r3, [r2, #12]
}
 8003a58:	bf00      	nop
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	e000ed00 	.word	0xe000ed00
 8003a68:	05fa0000 	.word	0x05fa0000

08003a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a70:	4b04      	ldr	r3, [pc, #16]	@ (8003a84 <__NVIC_GetPriorityGrouping+0x18>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	0a1b      	lsrs	r3, r3, #8
 8003a76:	f003 0307 	and.w	r3, r3, #7
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	e000ed00 	.word	0xe000ed00

08003a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	db0b      	blt.n	8003ab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	f003 021f 	and.w	r2, r3, #31
 8003aa0:	4907      	ldr	r1, [pc, #28]	@ (8003ac0 <__NVIC_EnableIRQ+0x38>)
 8003aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8003aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	e000e100 	.word	0xe000e100

08003ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	6039      	str	r1, [r7, #0]
 8003ace:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ad0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	db0a      	blt.n	8003aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	490c      	ldr	r1, [pc, #48]	@ (8003b10 <__NVIC_SetPriority+0x4c>)
 8003ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ae2:	0112      	lsls	r2, r2, #4
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003aec:	e00a      	b.n	8003b04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	4908      	ldr	r1, [pc, #32]	@ (8003b14 <__NVIC_SetPriority+0x50>)
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	3b04      	subs	r3, #4
 8003afc:	0112      	lsls	r2, r2, #4
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	440b      	add	r3, r1
 8003b02:	761a      	strb	r2, [r3, #24]
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	e000e100 	.word	0xe000e100
 8003b14:	e000ed00 	.word	0xe000ed00

08003b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b089      	sub	sp, #36	@ 0x24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f1c3 0307 	rsb	r3, r3, #7
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	bf28      	it	cs
 8003b36:	2304      	movcs	r3, #4
 8003b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	2b06      	cmp	r3, #6
 8003b40:	d902      	bls.n	8003b48 <NVIC_EncodePriority+0x30>
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	3b03      	subs	r3, #3
 8003b46:	e000      	b.n	8003b4a <NVIC_EncodePriority+0x32>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43da      	mvns	r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	401a      	ands	r2, r3
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b60:	f04f 31ff 	mov.w	r1, #4294967295
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6a:	43d9      	mvns	r1, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b70:	4313      	orrs	r3, r2
         );
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3724      	adds	r7, #36	@ 0x24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff ff4c 	bl	8003a24 <__NVIC_SetPriorityGrouping>
}
 8003b8c:	bf00      	nop
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ba2:	f7ff ff63 	bl	8003a6c <__NVIC_GetPriorityGrouping>
 8003ba6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	6978      	ldr	r0, [r7, #20]
 8003bae:	f7ff ffb3 	bl	8003b18 <NVIC_EncodePriority>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003bb8:	4611      	mov	r1, r2
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff ff82 	bl	8003ac4 <__NVIC_SetPriority>
}
 8003bc0:	bf00      	nop
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff ff56 	bl	8003a88 <__NVIC_EnableIRQ>
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e0e3      	b.n	8003dbe <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d106      	bne.n	8003c0e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2223      	movs	r2, #35	@ 0x23
 8003c04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f008 f81b 	bl	800bc44 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c0e:	4b6e      	ldr	r3, [pc, #440]	@ (8003dc8 <HAL_ETH_Init+0x1e4>)
 8003c10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003c14:	4a6c      	ldr	r2, [pc, #432]	@ (8003dc8 <HAL_ETH_Init+0x1e4>)
 8003c16:	f043 0302 	orr.w	r3, r3, #2
 8003c1a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003c1e:	4b6a      	ldr	r3, [pc, #424]	@ (8003dc8 <HAL_ETH_Init+0x1e4>)
 8003c20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	7a1b      	ldrb	r3, [r3, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d103      	bne.n	8003c3c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003c34:	2000      	movs	r0, #0
 8003c36:	f7fd ff21 	bl	8001a7c <HAL_SYSCFG_ETHInterfaceSelect>
 8003c3a:	e003      	b.n	8003c44 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003c3c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8003c40:	f7fd ff1c 	bl	8001a7c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003c44:	4b61      	ldr	r3, [pc, #388]	@ (8003dcc <HAL_ETH_Init+0x1e8>)
 8003c46:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6812      	ldr	r2, [r2, #0]
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c60:	f7fd ff00 	bl	8001a64 <HAL_GetTick>
 8003c64:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003c66:	e011      	b.n	8003c8c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003c68:	f7fd fefc 	bl	8001a64 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003c76:	d909      	bls.n	8003c8c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	22e0      	movs	r2, #224	@ 0xe0
 8003c84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e098      	b.n	8003dbe <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1e4      	bne.n	8003c68 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 fe0a 	bl	80048b8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003ca4:	f002 fcee 	bl	8006684 <HAL_RCC_GetHCLKFreq>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	4a49      	ldr	r2, [pc, #292]	@ (8003dd0 <HAL_ETH_Init+0x1ec>)
 8003cac:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb0:	0c9a      	lsrs	r2, r3, #18
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3a01      	subs	r2, #1
 8003cb8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fffb 	bl	8004cb8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cca:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003cce:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6812      	ldr	r2, [r2, #0]
 8003cd6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003cda:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003cde:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d009      	beq.n	8003d02 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	22e0      	movs	r2, #224	@ 0xe0
 8003cfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e05d      	b.n	8003dbe <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d0a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003d0e:	4b31      	ldr	r3, [pc, #196]	@ (8003dd4 <HAL_ETH_Init+0x1f0>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6952      	ldr	r2, [r2, #20]
 8003d16:	0051      	lsls	r1, r2, #1
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d22:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f001 f863 	bl	8004df2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f001 f8a9 	bl	8004e84 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	3305      	adds	r3, #5
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	021a      	lsls	r2, r3, #8
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	3304      	adds	r3, #4
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	4619      	mov	r1, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	3303      	adds	r3, #3
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	061a      	lsls	r2, r3, #24
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	3302      	adds	r3, #2
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	041b      	lsls	r3, r3, #16
 8003d64:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003d70:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003d7e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003d80:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	4b11      	ldr	r3, [pc, #68]	@ (8003dd8 <HAL_ETH_Init+0x1f4>)
 8003d92:	430b      	orrs	r3, r1
 8003d94:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4b0d      	ldr	r3, [pc, #52]	@ (8003ddc <HAL_ETH_Init+0x1f8>)
 8003da6:	430b      	orrs	r3, r1
 8003da8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2210      	movs	r2, #16
 8003db8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	58024400 	.word	0x58024400
 8003dcc:	58000400 	.word	0x58000400
 8003dd0:	431bde83 	.word	0x431bde83
 8003dd4:	ffff8001 	.word	0xffff8001
 8003dd8:	0c020060 	.word	0x0c020060
 8003ddc:	0c20c000 	.word	0x0c20c000

08003de0 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dee:	2b10      	cmp	r3, #16
 8003df0:	d165      	bne.n	8003ebe <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2223      	movs	r2, #35	@ 0x23
 8003df6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2204      	movs	r2, #4
 8003e04:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f9e4 	bl	80041d4 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e14:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	f043 0301 	orr.w	r3, r3, #1
 8003e20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e24:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e30:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e40:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e4c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8003e58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e5c:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f042 0201 	orr.w	r2, r2, #1
 8003e70:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0202 	orr.w	r2, r2, #2
 8003e82:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e9c:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8003ea8:	430b      	orrs	r3, r1
 8003eaa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003eae:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2223      	movs	r2, #35	@ 0x23
 8003eb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	e000      	b.n	8003ec0 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
  }
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ed6:	2b23      	cmp	r3, #35	@ 0x23
 8003ed8:	d165      	bne.n	8003fa6 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2223      	movs	r2, #35	@ 0x23
 8003ede:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eea:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	4b30      	ldr	r3, [pc, #192]	@ (8003fb4 <HAL_ETH_Stop_IT+0xec>)
 8003ef4:	400b      	ands	r3, r1
 8003ef6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003efa:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f06:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6812      	ldr	r2, [r2, #0]
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f16:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f22:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6812      	ldr	r2, [r2, #0]
 8003f2a:	f023 0301 	bic.w	r3, r3, #1
 8003f2e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f32:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0201 	bic.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0202 	bic.w	r2, r2, #2
 8003f68:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	e00e      	b.n	8003f8e <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	3212      	adds	r2, #18
 8003f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f7a:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b03      	cmp	r3, #3
 8003f92:	d9ed      	bls.n	8003f70 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2210      	movs	r2, #16
 8003f9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e000      	b.n	8003fa8 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
  }
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	ffff2f3e 	.word	0xffff2f3e

08003fb8 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d109      	bne.n	8003fdc <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fce:	f043 0201 	orr.w	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e03a      	b.n	8004052 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fe2:	2b23      	cmp	r3, #35	@ 0x23
 8003fe4:	d134      	bne.n	8004050 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003fee:	2201      	movs	r2, #1
 8003ff0:	6839      	ldr	r1, [r7, #0]
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 ffa4 	bl	8004f40 <ETH_Prepare_Tx_Descriptors>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d009      	beq.n	8004012 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004004:	f043 0202 	orr.w	r2, r3, #2
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e01f      	b.n	8004052 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8004012:	f3bf 8f4f 	dsb	sy
}
 8004016:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	629a      	str	r2, [r3, #40]	@ 0x28
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004026:	2b03      	cmp	r3, #3
 8004028:	d904      	bls.n	8004034 <HAL_ETH_Transmit_IT+0x7c>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402e:	1f1a      	subs	r2, r3, #4
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3106      	adds	r1, #6
 8004040:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004044:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004048:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	e000      	b.n	8004052 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
  }
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b088      	sub	sp, #32
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d109      	bne.n	8004086 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004078:	f043 0201 	orr.w	r2, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e0a2      	b.n	80041cc <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800408c:	2b23      	cmp	r3, #35	@ 0x23
 800408e:	d001      	beq.n	8004094 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e09b      	b.n	80041cc <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004098:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	3212      	adds	r2, #18
 80040a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040a4:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040aa:	f1c3 0304 	rsb	r3, r3, #4
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80040b0:	e064      	b.n	800417c <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d007      	beq.n	80040ce <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d103      	bne.n	80040e2 <HAL_ETH_ReadData+0x88>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d03a      	beq.n	8004158 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800411e:	2301      	movs	r3, #1
 8004120:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004132:	461a      	mov	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	b29b      	uxth	r3, r3
 8004138:	f007 ff5e 	bl	800bff8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	441a      	add	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	2200      	movs	r2, #0
 8004156:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	3301      	adds	r3, #1
 800415c:	61fb      	str	r3, [r7, #28]
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	2b03      	cmp	r3, #3
 8004162:	d902      	bls.n	800416a <HAL_ETH_ReadData+0x110>
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	3b04      	subs	r3, #4
 8004168:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69fa      	ldr	r2, [r7, #28]
 800416e:	3212      	adds	r2, #18
 8004170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004174:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	3301      	adds	r3, #1
 800417a:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8004180:	2b00      	cmp	r3, #0
 8004182:	db06      	blt.n	8004192 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	429a      	cmp	r2, r3
 800418a:	d202      	bcs.n	8004192 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 800418c:	7cfb      	ldrb	r3, [r7, #19]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d08f      	beq.n	80040b2 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	441a      	add	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f814 	bl	80041d4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69fa      	ldr	r2, [r7, #28]
 80041b0:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80041b2:	7cfb      	ldrb	r3, [r7, #19]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d108      	bne.n	80041ca <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	e000      	b.n	80041cc <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3720      	adds	r7, #32
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80041dc:	2300      	movs	r3, #0
 80041de:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80041e0:	2301      	movs	r3, #1
 80041e2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041e8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	3212      	adds	r2, #18
 80041f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041f4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041fa:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80041fc:	e038      	b.n	8004270 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d112      	bne.n	800422c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004206:	f107 0308 	add.w	r3, r7, #8
 800420a:	4618      	mov	r0, r3
 800420c:	f007 fec4 	bl	800bf98 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d102      	bne.n	800421c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	74fb      	strb	r3, [r7, #19]
 800421a:	e007      	b.n	800422c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	461a      	mov	r2, r3
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	461a      	mov	r2, r3
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 800422c:	7cfb      	ldrb	r3, [r7, #19]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d01e      	beq.n	8004270 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004236:	2b00      	cmp	r3, #0
 8004238:	d004      	beq.n	8004244 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	e003      	b.n	800424c <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 800424a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	3301      	adds	r3, #1
 8004250:	61fb      	str	r3, [r7, #28]
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	2b03      	cmp	r3, #3
 8004256:	d902      	bls.n	800425e <ETH_UpdateDescriptor+0x8a>
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	3b04      	subs	r3, #4
 800425c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69fa      	ldr	r2, [r7, #28]
 8004262:	3212      	adds	r2, #18
 8004264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004268:	617b      	str	r3, [r7, #20]
      desccount--;
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	3b01      	subs	r3, #1
 800426e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <ETH_UpdateDescriptor+0xa8>
 8004276:	7cfb      	ldrb	r3, [r7, #19]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1c0      	bne.n	80041fe <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	429a      	cmp	r2, r3
 8004284:	d01b      	beq.n	80042be <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	3301      	adds	r3, #1
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004290:	f3bf 8f5f 	dmb	sy
}
 8004294:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6919      	ldr	r1, [r3, #16]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4613      	mov	r3, r2
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	4413      	add	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	18ca      	adds	r2, r1, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042ae:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80042be:	bf00      	nop
 80042c0:	3720      	adds	r7, #32
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b086      	sub	sp, #24
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3318      	adds	r3, #24
 80042d2:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d8:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042de:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80042e0:	2301      	movs	r3, #1
 80042e2:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80042e4:	e047      	b.n	8004376 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80042e6:	2301      	movs	r3, #1
 80042e8:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	3304      	adds	r3, #4
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10a      	bne.n	8004316 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	3301      	adds	r3, #1
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	2b03      	cmp	r3, #3
 800430a:	d902      	bls.n	8004312 <HAL_ETH_ReleaseTxPacket+0x4c>
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	3b04      	subs	r3, #4
 8004310:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004316:	7bbb      	ldrb	r3, [r7, #14]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d02c      	beq.n	8004376 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68d9      	ldr	r1, [r3, #12]
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4613      	mov	r3, r2
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	4413      	add	r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	440b      	add	r3, r1
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	db1f      	blt.n	8004372 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	3304      	adds	r3, #4
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	4618      	mov	r0, r3
 8004340:	f007 fec2 	bl	800c0c8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	3304      	adds	r3, #4
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	2200      	movs	r2, #0
 8004350:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	3301      	adds	r3, #1
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	2b03      	cmp	r3, #3
 800435c:	d902      	bls.n	8004364 <HAL_ETH_ReleaseTxPacket+0x9e>
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	3b04      	subs	r3, #4
 8004362:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004370:	e001      	b.n	8004376 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <HAL_ETH_ReleaseTxPacket+0xbc>
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1b1      	bne.n	80042e6 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
 8004398:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e03e      	b.n	800442c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80043b6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	055b      	lsls	r3, r3, #21
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	041b      	lsls	r3, r3, #16
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f043 030c 	orr.w	r3, r3, #12
 80043da:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 80043ee:	f7fd fb39 	bl	8001a64 <HAL_GetTick>
 80043f2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80043f4:	e009      	b.n	800440a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80043f6:	f7fd fb35 	bl	8001a64 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004404:	d901      	bls.n	800440a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e010      	b.n	800442c <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1ed      	bne.n	80043f6 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004422:	b29b      	uxth	r3, r3
 8004424:	461a      	mov	r2, r3
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
 8004440:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e03c      	b.n	80044d0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800445e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	055b      	lsls	r3, r3, #21
 800446a:	4313      	orrs	r3, r2
 800446c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	041b      	lsls	r3, r3, #16
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f023 030c 	bic.w	r3, r3, #12
 8004482:	f043 0304 	orr.w	r3, r3, #4
 8004486:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f043 0301 	orr.w	r3, r3, #1
 800448e:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	b29a      	uxth	r2, r3
 8004494:	4b10      	ldr	r3, [pc, #64]	@ (80044d8 <HAL_ETH_WritePHYRegister+0xa4>)
 8004496:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800449a:	4a0f      	ldr	r2, [pc, #60]	@ (80044d8 <HAL_ETH_WritePHYRegister+0xa4>)
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 80044a2:	f7fd fadf 	bl	8001a64 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80044a8:	e009      	b.n	80044be <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80044aa:	f7fd fadb 	bl	8001a64 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044b8:	d901      	bls.n	80044be <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e008      	b.n	80044d0 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1ed      	bne.n	80044aa <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40028000 	.word	0x40028000

080044dc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e1c3      	b.n	8004878 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 020c 	and.w	r2, r3, #12
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2b00      	cmp	r3, #0
 800450a:	bf14      	ite	ne
 800450c:	2301      	movne	r3, #1
 800450e:	2300      	moveq	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	461a      	mov	r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004532:	2b00      	cmp	r3, #0
 8004534:	bf0c      	ite	eq
 8004536:	2301      	moveq	r3, #1
 8004538:	2300      	movne	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 800454e:	2b00      	cmp	r3, #0
 8004550:	bf14      	ite	ne
 8004552:	2301      	movne	r3, #1
 8004554:	2300      	moveq	r3, #0
 8004556:	b2db      	uxtb	r3, r3
 8004558:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004568:	2b00      	cmp	r3, #0
 800456a:	bf0c      	ite	eq
 800456c:	2301      	moveq	r3, #1
 800456e:	2300      	movne	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800457e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004582:	2b00      	cmp	r3, #0
 8004584:	bf14      	ite	ne
 8004586:	2301      	movne	r3, #1
 8004588:	2300      	moveq	r3, #0
 800458a:	b2db      	uxtb	r3, r3
 800458c:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800459c:	2b00      	cmp	r3, #0
 800459e:	bf14      	ite	ne
 80045a0:	2301      	movne	r3, #1
 80045a2:	2300      	moveq	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	461a      	mov	r2, r3
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	bf14      	ite	ne
 80045d6:	2301      	movne	r3, #1
 80045d8:	2300      	moveq	r3, #0
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bf0c      	ite	eq
 80045f0:	2301      	moveq	r3, #1
 80045f2:	2300      	movne	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	461a      	mov	r2, r3
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004606:	2b00      	cmp	r3, #0
 8004608:	bf0c      	ite	eq
 800460a:	2301      	moveq	r3, #1
 800460c:	2300      	movne	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	461a      	mov	r2, r3
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004620:	2b00      	cmp	r3, #0
 8004622:	bf14      	ite	ne
 8004624:	2301      	movne	r3, #1
 8004626:	2300      	moveq	r3, #0
 8004628:	b2db      	uxtb	r3, r3
 800462a:	461a      	mov	r2, r3
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800463a:	2b00      	cmp	r3, #0
 800463c:	bf14      	ite	ne
 800463e:	2301      	movne	r3, #1
 8004640:	2300      	moveq	r3, #0
 8004642:	b2db      	uxtb	r3, r3
 8004644:	461a      	mov	r2, r3
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004654:	2b00      	cmp	r3, #0
 8004656:	bf14      	ite	ne
 8004658:	2301      	movne	r3, #1
 800465a:	2300      	moveq	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	461a      	mov	r2, r3
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800466a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800466e:	2b00      	cmp	r3, #0
 8004670:	bf14      	ite	ne
 8004672:	2301      	movne	r3, #1
 8004674:	2300      	moveq	r3, #0
 8004676:	b2db      	uxtb	r3, r3
 8004678:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	bf14      	ite	ne
 800469a:	2301      	movne	r3, #1
 800469c:	2300      	moveq	r3, #0
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	bf0c      	ite	eq
 80046d0:	2301      	moveq	r3, #1
 80046d2:	2300      	movne	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	461a      	mov	r2, r3
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	bf14      	ite	ne
 80046ec:	2301      	movne	r3, #1
 80046ee:	2300      	moveq	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	461a      	mov	r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004700:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004704:	2b00      	cmp	r3, #0
 8004706:	bf14      	ite	ne
 8004708:	2301      	movne	r3, #1
 800470a:	2300      	moveq	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8004720:	2b00      	cmp	r3, #0
 8004722:	bf14      	ite	ne
 8004724:	2301      	movne	r3, #1
 8004726:	2300      	moveq	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	0e5b      	lsrs	r3, r3, #25
 800473a:	f003 021f 	and.w	r2, r3, #31
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800474c:	2b00      	cmp	r3, #0
 800474e:	bf14      	ite	ne
 8004750:	2301      	movne	r3, #1
 8004752:	2300      	moveq	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	461a      	mov	r2, r3
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f003 020f 	and.w	r2, r3, #15
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	bf14      	ite	ne
 800477a:	2301      	movne	r3, #1
 800477c:	2300      	moveq	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004792:	2b00      	cmp	r3, #0
 8004794:	bf0c      	ite	eq
 8004796:	2301      	moveq	r3, #1
 8004798:	2300      	movne	r3, #0
 800479a:	b2db      	uxtb	r3, r3
 800479c:	461a      	mov	r2, r3
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047aa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b8:	0c1b      	lsrs	r3, r3, #16
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	bf14      	ite	ne
 80047d0:	2301      	movne	r3, #1
 80047d2:	2300      	moveq	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	461a      	mov	r2, r3
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e6:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	bf14      	ite	ne
 80047ee:	2301      	movne	r3, #1
 80047f0:	2300      	moveq	r3, #0
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8004804:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004814:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	bf14      	ite	ne
 800482c:	2301      	movne	r3, #1
 800482e:	2300      	moveq	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	2b00      	cmp	r3, #0
 8004848:	bf14      	ite	ne
 800484a:	2301      	movne	r3, #1
 800484c:	2300      	moveq	r3, #0
 800484e:	b2db      	uxtb	r3, r3
 8004850:	461a      	mov	r2, r3
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004864:	2b00      	cmp	r3, #0
 8004866:	bf0c      	ite	eq
 8004868:	2301      	moveq	r3, #1
 800486a:	2300      	movne	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e00b      	b.n	80048b0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800489e:	2b10      	cmp	r3, #16
 80048a0:	d105      	bne.n	80048ae <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80048a2:	6839      	ldr	r1, [r7, #0]
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f865 	bl	8004974 <ETH_SetMACConfig>

    return HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	e000      	b.n	80048b0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
  }
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80048c8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80048d0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80048d2:	f001 fed7 	bl	8006684 <HAL_RCC_GetHCLKFreq>
 80048d6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4a1a      	ldr	r2, [pc, #104]	@ (8004944 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d804      	bhi.n	80048ea <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	e022      	b.n	8004930 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	4a16      	ldr	r2, [pc, #88]	@ (8004948 <HAL_ETH_SetMDIOClockRange+0x90>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d204      	bcs.n	80048fc <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	e019      	b.n	8004930 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	4a13      	ldr	r2, [pc, #76]	@ (800494c <HAL_ETH_SetMDIOClockRange+0x94>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d915      	bls.n	8004930 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4a12      	ldr	r2, [pc, #72]	@ (8004950 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d804      	bhi.n	8004916 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	e00c      	b.n	8004930 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	4a0e      	ldr	r2, [pc, #56]	@ (8004954 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d804      	bhi.n	8004928 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	e003      	b.n	8004930 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800492e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	02160ebf 	.word	0x02160ebf
 8004948:	03938700 	.word	0x03938700
 800494c:	05f5e0ff 	.word	0x05f5e0ff
 8004950:	08f0d17f 	.word	0x08f0d17f
 8004954:	0ee6b27f 	.word	0x0ee6b27f

08004958 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8004966:	4618      	mov	r0, r3
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
	...

08004974 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004986:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	791b      	ldrb	r3, [r3, #4]
 800498c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800498e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	7b1b      	ldrb	r3, [r3, #12]
 8004994:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004996:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	7b5b      	ldrb	r3, [r3, #13]
 800499c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800499e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	7b9b      	ldrb	r3, [r3, #14]
 80049a4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80049a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	7bdb      	ldrb	r3, [r3, #15]
 80049ac:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80049ae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	7c12      	ldrb	r2, [r2, #16]
 80049b4:	2a00      	cmp	r2, #0
 80049b6:	d102      	bne.n	80049be <ETH_SetMACConfig+0x4a>
 80049b8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80049bc:	e000      	b.n	80049c0 <ETH_SetMACConfig+0x4c>
 80049be:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80049c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	7c52      	ldrb	r2, [r2, #17]
 80049c6:	2a00      	cmp	r2, #0
 80049c8:	d102      	bne.n	80049d0 <ETH_SetMACConfig+0x5c>
 80049ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80049ce:	e000      	b.n	80049d2 <ETH_SetMACConfig+0x5e>
 80049d0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80049d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	7c9b      	ldrb	r3, [r3, #18]
 80049d8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80049da:	431a      	orrs	r2, r3
               macconf->Speed |
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80049e0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80049e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	7f1b      	ldrb	r3, [r3, #28]
 80049ec:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80049ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	7f5b      	ldrb	r3, [r3, #29]
 80049f4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80049f6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	7f92      	ldrb	r2, [r2, #30]
 80049fc:	2a00      	cmp	r2, #0
 80049fe:	d102      	bne.n	8004a06 <ETH_SetMACConfig+0x92>
 8004a00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a04:	e000      	b.n	8004a08 <ETH_SetMACConfig+0x94>
 8004a06:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004a08:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	7fdb      	ldrb	r3, [r3, #31]
 8004a0e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004a10:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004a18:	2a00      	cmp	r2, #0
 8004a1a:	d102      	bne.n	8004a22 <ETH_SetMACConfig+0xae>
 8004a1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a20:	e000      	b.n	8004a24 <ETH_SetMACConfig+0xb0>
 8004a22:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004a24:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004a2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a32:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004a34:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	4b56      	ldr	r3, [pc, #344]	@ (8004ba0 <ETH_SetMACConfig+0x22c>)
 8004a46:	4013      	ands	r3, r2
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6812      	ldr	r2, [r2, #0]
 8004a4c:	68f9      	ldr	r1, [r7, #12]
 8004a4e:	430b      	orrs	r3, r1
 8004a50:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a56:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004a5e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004a60:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a68:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004a6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004a72:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004a74:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8004a7c:	2a00      	cmp	r2, #0
 8004a7e:	d102      	bne.n	8004a86 <ETH_SetMACConfig+0x112>
 8004a80:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004a84:	e000      	b.n	8004a88 <ETH_SetMACConfig+0x114>
 8004a86:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004a88:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	4b42      	ldr	r3, [pc, #264]	@ (8004ba4 <ETH_SetMACConfig+0x230>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6812      	ldr	r2, [r2, #0]
 8004aa0:	68f9      	ldr	r1, [r7, #12]
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004aac:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	4b3a      	ldr	r3, [pc, #232]	@ (8004ba8 <ETH_SetMACConfig+0x234>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6812      	ldr	r2, [r2, #0]
 8004ac4:	68f9      	ldr	r1, [r7, #12]
 8004ac6:	430b      	orrs	r3, r1
 8004ac8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004ad0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004ad6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004ade:	2a00      	cmp	r2, #0
 8004ae0:	d101      	bne.n	8004ae6 <ETH_SetMACConfig+0x172>
 8004ae2:	2280      	movs	r2, #128	@ 0x80
 8004ae4:	e000      	b.n	8004ae8 <ETH_SetMACConfig+0x174>
 8004ae6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004ae8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aee:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004afa:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8004afe:	4013      	ands	r3, r2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	68f9      	ldr	r1, [r7, #12]
 8004b06:	430b      	orrs	r3, r1
 8004b08:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8004b10:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004b18:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b26:	f023 0103 	bic.w	r1, r3, #3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8004b3e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8004b5a:	2a00      	cmp	r2, #0
 8004b5c:	d101      	bne.n	8004b62 <ETH_SetMACConfig+0x1ee>
 8004b5e:	2240      	movs	r2, #64	@ 0x40
 8004b60:	e000      	b.n	8004b64 <ETH_SetMACConfig+0x1f0>
 8004b62:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004b64:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8004b6c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004b6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8004b76:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004b84:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8004b94:	bf00      	nop
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	00048083 	.word	0x00048083
 8004ba4:	c0f88000 	.word	0xc0f88000
 8004ba8:	fffffef0 	.word	0xfffffef0

08004bac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	4b38      	ldr	r3, [pc, #224]	@ (8004ca4 <ETH_SetDMAConfig+0xf8>)
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	6811      	ldr	r1, [r2, #0]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6812      	ldr	r2, [r2, #0]
 8004bcc:	430b      	orrs	r3, r1
 8004bce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004bd2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	791b      	ldrb	r3, [r3, #4]
 8004bd8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004bde:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	7b1b      	ldrb	r3, [r3, #12]
 8004be4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	4b2c      	ldr	r3, [pc, #176]	@ (8004ca8 <ETH_SetDMAConfig+0xfc>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	68f9      	ldr	r1, [r7, #12]
 8004bfe:	430b      	orrs	r3, r1
 8004c00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004c04:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	7b5b      	ldrb	r3, [r3, #13]
 8004c0a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c1c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8004c20:	4b22      	ldr	r3, [pc, #136]	@ (8004cac <ETH_SetDMAConfig+0x100>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6812      	ldr	r2, [r2, #0]
 8004c28:	68f9      	ldr	r1, [r7, #12]
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004c30:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	7d1b      	ldrb	r3, [r3, #20]
 8004c3c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004c3e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	7f5b      	ldrb	r3, [r3, #29]
 8004c44:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c52:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8004c56:	4b16      	ldr	r3, [pc, #88]	@ (8004cb0 <ETH_SetDMAConfig+0x104>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6812      	ldr	r2, [r2, #0]
 8004c5e:	68f9      	ldr	r1, [r7, #12]
 8004c60:	430b      	orrs	r3, r1
 8004c62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004c66:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	7f1b      	ldrb	r3, [r3, #28]
 8004c6e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c80:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004c84:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb4 <ETH_SetDMAConfig+0x108>)
 8004c86:	4013      	ands	r3, r2
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6812      	ldr	r2, [r2, #0]
 8004c8c:	68f9      	ldr	r1, [r7, #12]
 8004c8e:	430b      	orrs	r3, r1
 8004c90:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004c94:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8004c98:	bf00      	nop
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	ffff87fd 	.word	0xffff87fd
 8004ca8:	ffff2ffe 	.word	0xffff2ffe
 8004cac:	fffec000 	.word	0xfffec000
 8004cb0:	ffc0efef 	.word	0xffc0efef
 8004cb4:	7fc0ffff 	.word	0x7fc0ffff

08004cb8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b0a4      	sub	sp, #144	@ 0x90
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004cf4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004cf8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004d04:	2300      	movs	r3, #0
 8004d06:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8004d10:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8004d14:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004d16:	2300      	movs	r3, #0
 8004d18:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8004d20:	2301      	movs	r3, #1
 8004d22:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004d26:	2300      	movs	r3, #0
 8004d28:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004d32:	2300      	movs	r3, #0
 8004d34:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004d44:	2300      	movs	r3, #0
 8004d46:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004d50:	2320      	movs	r3, #32
 8004d52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004d56:	2301      	movs	r3, #1
 8004d58:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004d62:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8004d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004d68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004d6c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004d74:	2302      	movs	r3, #2
 8004d76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004d80:	2300      	movs	r3, #0
 8004d82:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004d86:	2300      	movs	r3, #0
 8004d88:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004d92:	2300      	movs	r3, #0
 8004d94:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004d96:	2301      	movs	r3, #1
 8004d98:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004d9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004da0:	4619      	mov	r1, r3
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff fde6 	bl	8004974 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004da8:	2301      	movs	r3, #1
 8004daa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004dac:	2301      	movs	r3, #1
 8004dae:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004db4:	2300      	movs	r3, #0
 8004db6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004dc2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004dc6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004dcc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004dd0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004dd8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8004ddc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004dde:	f107 0308 	add.w	r3, r7, #8
 8004de2:	4619      	mov	r1, r3
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7ff fee1 	bl	8004bac <ETH_SetDMAConfig>
}
 8004dea:	bf00      	nop
 8004dec:	3790      	adds	r7, #144	@ 0x90
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b085      	sub	sp, #20
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	e01d      	b.n	8004e3c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68d9      	ldr	r1, [r3, #12]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4613      	mov	r3, r2
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	4413      	add	r3, r2
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	440b      	add	r3, r1
 8004e10:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2200      	movs	r2, #0
 8004e22:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2200      	movs	r2, #0
 8004e28:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	3206      	adds	r2, #6
 8004e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d9de      	bls.n	8004e00 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e50:	461a      	mov	r2, r3
 8004e52:	2303      	movs	r3, #3
 8004e54:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68da      	ldr	r2, [r3, #12]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e64:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e74:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8004e78:	bf00      	nop
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	e023      	b.n	8004eda <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6919      	ldr	r1, [r3, #16]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	4413      	add	r3, r2
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	440b      	add	r3, r1
 8004ea2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	2200      	movs	r2, #0
 8004eae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	3212      	adds	r2, #18
 8004ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d9d8      	bls.n	8004e92 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f06:	461a      	mov	r2, r3
 8004f08:	2303      	movs	r3, #3
 8004f0a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691a      	ldr	r2, [r3, #16]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f1a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f2e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8004f32:	bf00      	nop
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
	...

08004f40 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b091      	sub	sp, #68	@ 0x44
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3318      	adds	r3, #24
 8004f50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f6a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8004f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f82:	d007      	beq.n	8004f94 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f88:	3304      	adds	r3, #4
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004f94:	2302      	movs	r3, #2
 8004f96:	e266      	b.n	8005466 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d044      	beq.n	800502e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	4b75      	ldr	r3, [pc, #468]	@ (8005180 <ETH_Prepare_Tx_Descriptors+0x240>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb4:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc0:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004fd0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d027      	beq.n	800502e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8004fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe8:	041b      	lsls	r3, r3, #16
 8004fea:	431a      	orrs	r2, r3
 8004fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fee:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffa:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005008:	431a      	orrs	r2, r3
 800500a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800501c:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800502c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0310 	and.w	r3, r3, #16
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00e      	beq.n	8005058 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800503a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	4b51      	ldr	r3, [pc, #324]	@ (8005184 <ETH_Prepare_Tx_Descriptors+0x244>)
 8005040:	4013      	ands	r3, r2
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	6992      	ldr	r2, [r2, #24]
 8005046:	431a      	orrs	r2, r3
 8005048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800504c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005056:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d105      	bne.n	8005070 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0310 	and.w	r3, r3, #16
 800506c:	2b00      	cmp	r3, #0
 800506e:	d036      	beq.n	80050de <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8005070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800507c:	f3bf 8f5f 	dmb	sy
}
 8005080:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800508a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800508c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800508e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005090:	3301      	adds	r3, #1
 8005092:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005096:	2b03      	cmp	r3, #3
 8005098:	d902      	bls.n	80050a0 <ETH_Prepare_Tx_Descriptors+0x160>
 800509a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800509c:	3b04      	subs	r3, #4
 800509e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80050a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a8:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 80050aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ac:	3301      	adds	r3, #1
 80050ae:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80050b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050bc:	d10f      	bne.n	80050de <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	6a3a      	ldr	r2, [r7, #32]
 80050c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80050c8:	f3bf 8f5f 	dmb	sy
}
 80050cc:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80050ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80050d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d8:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80050da:	2302      	movs	r3, #2
 80050dc:	e1c3      	b.n	8005466 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80050de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e0:	3301      	adds	r3, #1
 80050e2:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80050e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	461a      	mov	r2, r3
 80050ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ec:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80050ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f0:	689a      	ldr	r2, [r3, #8]
 80050f2:	4b24      	ldr	r3, [pc, #144]	@ (8005184 <ETH_Prepare_Tx_Descriptors+0x244>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050f8:	6852      	ldr	r2, [r2, #4]
 80050fa:	431a      	orrs	r2, r3
 80050fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fe:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8005100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d012      	beq.n	800512e <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8005108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800510e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005116:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	4b1a      	ldr	r3, [pc, #104]	@ (8005188 <ETH_Prepare_Tx_Descriptors+0x248>)
 800511e:	4013      	ands	r3, r2
 8005120:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005122:	6852      	ldr	r2, [r2, #4]
 8005124:	0412      	lsls	r2, r2, #16
 8005126:	431a      	orrs	r2, r3
 8005128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512a:	609a      	str	r2, [r3, #8]
 800512c:	e008      	b.n	8005140 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800512e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005130:	2200      	movs	r2, #0
 8005132:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	4b13      	ldr	r3, [pc, #76]	@ (8005188 <ETH_Prepare_Tx_Descriptors+0x248>)
 800513a:	4013      	ands	r3, r2
 800513c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800513e:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0310 	and.w	r3, r3, #16
 8005148:	2b00      	cmp	r3, #0
 800514a:	d021      	beq.n	8005190 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800514c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	04db      	lsls	r3, r3, #19
 800515a:	431a      	orrs	r2, r3
 800515c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	4b09      	ldr	r3, [pc, #36]	@ (800518c <ETH_Prepare_Tx_Descriptors+0x24c>)
 8005166:	4013      	ands	r3, r2
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	69d2      	ldr	r2, [r2, #28]
 800516c:	431a      	orrs	r2, r3
 800516e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005170:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800517a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517c:	60da      	str	r2, [r3, #12]
 800517e:	e02e      	b.n	80051de <ETH_Prepare_Tx_Descriptors+0x29e>
 8005180:	ffff0000 	.word	0xffff0000
 8005184:	ffffc000 	.word	0xffffc000
 8005188:	c000ffff 	.word	0xc000ffff
 800518c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	4b7b      	ldr	r3, [pc, #492]	@ (8005384 <ETH_Prepare_Tx_Descriptors+0x444>)
 8005196:	4013      	ands	r3, r2
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	6852      	ldr	r2, [r2, #4]
 800519c:	431a      	orrs	r2, r3
 800519e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a0:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d008      	beq.n	80051c0 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80051ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051be:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0320 	and.w	r3, r3, #32
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80051cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	431a      	orrs	r2, r3
 80051da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051dc:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d008      	beq.n	80051fc <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80051ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f6:	431a      	orrs	r2, r3
 80051f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fa:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80051fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005206:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005212:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005214:	f3bf 8f5f 	dmb	sy
}
 8005218:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800521a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005224:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 80da 	beq.w	80053e8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8005234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	431a      	orrs	r2, r3
 8005242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005244:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005246:	e0cf      	b.n	80053e8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005252:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005256:	3301      	adds	r3, #1
 8005258:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800525a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800525c:	2b03      	cmp	r3, #3
 800525e:	d902      	bls.n	8005266 <ETH_Prepare_Tx_Descriptors+0x326>
 8005260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005262:	3b04      	subs	r3, #4
 8005264:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800526a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800526e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527a:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800527c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005284:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005288:	d007      	beq.n	800529a <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800528a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800528c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800528e:	3304      	adds	r3, #4
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d029      	beq.n	80052ee <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80052a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052a6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80052a8:	2300      	movs	r3, #0
 80052aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052ac:	e019      	b.n	80052e2 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80052ae:	f3bf 8f5f 	dmb	sy
}
 80052b2:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80052b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80052bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052be:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80052c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052c2:	3301      	adds	r3, #1
 80052c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d902      	bls.n	80052d2 <ETH_Prepare_Tx_Descriptors+0x392>
 80052cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052ce:	3b04      	subs	r3, #4
 80052d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80052d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80052d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052da:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80052dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052de:	3301      	adds	r3, #1
 80052e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80052e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d3e1      	bcc.n	80052ae <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80052ea:	2302      	movs	r3, #2
 80052ec:	e0bb      	b.n	8005466 <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 80052ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052f0:	3301      	adds	r3, #1
 80052f2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80052f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80052fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005302:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	4b1f      	ldr	r3, [pc, #124]	@ (8005388 <ETH_Prepare_Tx_Descriptors+0x448>)
 800530a:	4013      	ands	r3, r2
 800530c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800530e:	6852      	ldr	r2, [r2, #4]
 8005310:	431a      	orrs	r2, r3
 8005312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005314:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8005316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d012      	beq.n	8005344 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800531e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800532e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	4b16      	ldr	r3, [pc, #88]	@ (800538c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8005334:	4013      	ands	r3, r2
 8005336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005338:	6852      	ldr	r2, [r2, #4]
 800533a:	0412      	lsls	r2, r2, #16
 800533c:	431a      	orrs	r2, r3
 800533e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005340:	609a      	str	r2, [r3, #8]
 8005342:	e008      	b.n	8005356 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005346:	2200      	movs	r2, #0
 8005348:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800534a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	4b0f      	ldr	r3, [pc, #60]	@ (800538c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8005350:	4013      	ands	r3, r2
 8005352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005354:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0310 	and.w	r3, r3, #16
 800535e:	2b00      	cmp	r3, #0
 8005360:	d018      	beq.n	8005394 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	4b0a      	ldr	r3, [pc, #40]	@ (8005390 <ETH_Prepare_Tx_Descriptors+0x450>)
 8005368:	4013      	ands	r3, r2
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	69d2      	ldr	r2, [r2, #28]
 800536e:	431a      	orrs	r2, r3
 8005370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005372:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800537c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537e:	60da      	str	r2, [r3, #12]
 8005380:	e020      	b.n	80053c4 <ETH_Prepare_Tx_Descriptors+0x484>
 8005382:	bf00      	nop
 8005384:	ffff8000 	.word	0xffff8000
 8005388:	ffffc000 	.word	0xffffc000
 800538c:	c000ffff 	.word	0xc000ffff
 8005390:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	4b36      	ldr	r3, [pc, #216]	@ (8005474 <ETH_Prepare_Tx_Descriptors+0x534>)
 800539a:	4013      	ands	r3, r2
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	6852      	ldr	r2, [r2, #4]
 80053a0:	431a      	orrs	r2, r3
 80053a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a4:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d008      	beq.n	80053c4 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80053b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	431a      	orrs	r2, r3
 80053c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c2:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80053c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c6:	3301      	adds	r3, #1
 80053c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80053ca:	f3bf 8f5f 	dmb	sy
}
 80053ce:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80053d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80053d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053da:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80053dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80053e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e6:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80053e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f47f af2b 	bne.w	8005248 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d006      	beq.n	8005406 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80053f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005402:	609a      	str	r2, [r3, #8]
 8005404:	e005      	b.n	8005412 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800540e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005410:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800541a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541c:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800541e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005420:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005422:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005426:	3304      	adds	r3, #4
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	440b      	add	r3, r1
 800542c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800542e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005430:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005432:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005434:	f3ef 8310 	mrs	r3, PRIMASK
 8005438:	613b      	str	r3, [r7, #16]
  return(result);
 800543a:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800543c:	61fb      	str	r3, [r7, #28]
 800543e:	2301      	movs	r3, #1
 8005440:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f383 8810 	msr	PRIMASK, r3
}
 8005448:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800544a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800544e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005450:	4413      	add	r3, r2
 8005452:	1c5a      	adds	r2, r3, #1
 8005454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005456:	629a      	str	r2, [r3, #40]	@ 0x28
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	f383 8810 	msr	PRIMASK, r3
}
 8005462:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3744      	adds	r7, #68	@ 0x44
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	ffff8000 	.word	0xffff8000

08005478 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005478:	b480      	push	{r7}
 800547a:	b089      	sub	sp, #36	@ 0x24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005482:	2300      	movs	r3, #0
 8005484:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005486:	4b86      	ldr	r3, [pc, #536]	@ (80056a0 <HAL_GPIO_Init+0x228>)
 8005488:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800548a:	e18c      	b.n	80057a6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	2101      	movs	r1, #1
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	fa01 f303 	lsl.w	r3, r1, r3
 8005498:	4013      	ands	r3, r2
 800549a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 817e 	beq.w	80057a0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f003 0303 	and.w	r3, r3, #3
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d005      	beq.n	80054bc <HAL_GPIO_Init+0x44>
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f003 0303 	and.w	r3, r3, #3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d130      	bne.n	800551e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	2203      	movs	r2, #3
 80054c8:	fa02 f303 	lsl.w	r3, r2, r3
 80054cc:	43db      	mvns	r3, r3
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	4013      	ands	r3, r2
 80054d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	fa02 f303 	lsl.w	r3, r2, r3
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054f2:	2201      	movs	r2, #1
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	43db      	mvns	r3, r3
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	4013      	ands	r3, r2
 8005500:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	091b      	lsrs	r3, r3, #4
 8005508:	f003 0201 	and.w	r2, r3, #1
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	fa02 f303 	lsl.w	r3, r2, r3
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	4313      	orrs	r3, r2
 8005516:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	2b03      	cmp	r3, #3
 8005528:	d017      	beq.n	800555a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	2203      	movs	r2, #3
 8005536:	fa02 f303 	lsl.w	r3, r2, r3
 800553a:	43db      	mvns	r3, r3
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	4013      	ands	r3, r2
 8005540:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	fa02 f303 	lsl.w	r3, r2, r3
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	4313      	orrs	r3, r2
 8005552:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d123      	bne.n	80055ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	08da      	lsrs	r2, r3, #3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3208      	adds	r2, #8
 800556e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	220f      	movs	r2, #15
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	43db      	mvns	r3, r3
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	4013      	ands	r3, r2
 8005588:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	691a      	ldr	r2, [r3, #16]
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	fa02 f303 	lsl.w	r3, r2, r3
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	4313      	orrs	r3, r2
 800559e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	08da      	lsrs	r2, r3, #3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	3208      	adds	r2, #8
 80055a8:	69b9      	ldr	r1, [r7, #24]
 80055aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	2203      	movs	r2, #3
 80055ba:	fa02 f303 	lsl.w	r3, r2, r3
 80055be:	43db      	mvns	r3, r3
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	4013      	ands	r3, r2
 80055c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f003 0203 	and.w	r2, r3, #3
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	4313      	orrs	r3, r2
 80055da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 80d8 	beq.w	80057a0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055f0:	4b2c      	ldr	r3, [pc, #176]	@ (80056a4 <HAL_GPIO_Init+0x22c>)
 80055f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80055f6:	4a2b      	ldr	r2, [pc, #172]	@ (80056a4 <HAL_GPIO_Init+0x22c>)
 80055f8:	f043 0302 	orr.w	r3, r3, #2
 80055fc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005600:	4b28      	ldr	r3, [pc, #160]	@ (80056a4 <HAL_GPIO_Init+0x22c>)
 8005602:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800560e:	4a26      	ldr	r2, [pc, #152]	@ (80056a8 <HAL_GPIO_Init+0x230>)
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	089b      	lsrs	r3, r3, #2
 8005614:	3302      	adds	r3, #2
 8005616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800561a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	220f      	movs	r2, #15
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	43db      	mvns	r3, r3
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	4013      	ands	r3, r2
 8005630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a1d      	ldr	r2, [pc, #116]	@ (80056ac <HAL_GPIO_Init+0x234>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d04a      	beq.n	80056d0 <HAL_GPIO_Init+0x258>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a1c      	ldr	r2, [pc, #112]	@ (80056b0 <HAL_GPIO_Init+0x238>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d02b      	beq.n	800569a <HAL_GPIO_Init+0x222>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a1b      	ldr	r2, [pc, #108]	@ (80056b4 <HAL_GPIO_Init+0x23c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d025      	beq.n	8005696 <HAL_GPIO_Init+0x21e>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a1a      	ldr	r2, [pc, #104]	@ (80056b8 <HAL_GPIO_Init+0x240>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d01f      	beq.n	8005692 <HAL_GPIO_Init+0x21a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a19      	ldr	r2, [pc, #100]	@ (80056bc <HAL_GPIO_Init+0x244>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d019      	beq.n	800568e <HAL_GPIO_Init+0x216>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a18      	ldr	r2, [pc, #96]	@ (80056c0 <HAL_GPIO_Init+0x248>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d013      	beq.n	800568a <HAL_GPIO_Init+0x212>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a17      	ldr	r2, [pc, #92]	@ (80056c4 <HAL_GPIO_Init+0x24c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d00d      	beq.n	8005686 <HAL_GPIO_Init+0x20e>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a16      	ldr	r2, [pc, #88]	@ (80056c8 <HAL_GPIO_Init+0x250>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d007      	beq.n	8005682 <HAL_GPIO_Init+0x20a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a15      	ldr	r2, [pc, #84]	@ (80056cc <HAL_GPIO_Init+0x254>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d101      	bne.n	800567e <HAL_GPIO_Init+0x206>
 800567a:	2309      	movs	r3, #9
 800567c:	e029      	b.n	80056d2 <HAL_GPIO_Init+0x25a>
 800567e:	230a      	movs	r3, #10
 8005680:	e027      	b.n	80056d2 <HAL_GPIO_Init+0x25a>
 8005682:	2307      	movs	r3, #7
 8005684:	e025      	b.n	80056d2 <HAL_GPIO_Init+0x25a>
 8005686:	2306      	movs	r3, #6
 8005688:	e023      	b.n	80056d2 <HAL_GPIO_Init+0x25a>
 800568a:	2305      	movs	r3, #5
 800568c:	e021      	b.n	80056d2 <HAL_GPIO_Init+0x25a>
 800568e:	2304      	movs	r3, #4
 8005690:	e01f      	b.n	80056d2 <HAL_GPIO_Init+0x25a>
 8005692:	2303      	movs	r3, #3
 8005694:	e01d      	b.n	80056d2 <HAL_GPIO_Init+0x25a>
 8005696:	2302      	movs	r3, #2
 8005698:	e01b      	b.n	80056d2 <HAL_GPIO_Init+0x25a>
 800569a:	2301      	movs	r3, #1
 800569c:	e019      	b.n	80056d2 <HAL_GPIO_Init+0x25a>
 800569e:	bf00      	nop
 80056a0:	58000080 	.word	0x58000080
 80056a4:	58024400 	.word	0x58024400
 80056a8:	58000400 	.word	0x58000400
 80056ac:	58020000 	.word	0x58020000
 80056b0:	58020400 	.word	0x58020400
 80056b4:	58020800 	.word	0x58020800
 80056b8:	58020c00 	.word	0x58020c00
 80056bc:	58021000 	.word	0x58021000
 80056c0:	58021400 	.word	0x58021400
 80056c4:	58021800 	.word	0x58021800
 80056c8:	58021c00 	.word	0x58021c00
 80056cc:	58022400 	.word	0x58022400
 80056d0:	2300      	movs	r3, #0
 80056d2:	69fa      	ldr	r2, [r7, #28]
 80056d4:	f002 0203 	and.w	r2, r2, #3
 80056d8:	0092      	lsls	r2, r2, #2
 80056da:	4093      	lsls	r3, r2
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	4313      	orrs	r3, r2
 80056e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056e2:	4938      	ldr	r1, [pc, #224]	@ (80057c4 <HAL_GPIO_Init+0x34c>)
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	089b      	lsrs	r3, r3, #2
 80056e8:	3302      	adds	r3, #2
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	43db      	mvns	r3, r3
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	4013      	ands	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005716:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800571e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	43db      	mvns	r3, r3
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	4013      	ands	r3, r2
 800572e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	4313      	orrs	r3, r2
 8005742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005744:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	43db      	mvns	r3, r3
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	4013      	ands	r3, r2
 800575a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d003      	beq.n	8005770 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	4313      	orrs	r3, r2
 800576e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	43db      	mvns	r3, r3
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	4013      	ands	r3, r2
 8005784:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	4313      	orrs	r3, r2
 8005798:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	3301      	adds	r3, #1
 80057a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	fa22 f303 	lsr.w	r3, r2, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f47f ae6b 	bne.w	800548c <HAL_GPIO_Init+0x14>
  }
}
 80057b6:	bf00      	nop
 80057b8:	bf00      	nop
 80057ba:	3724      	adds	r7, #36	@ 0x24
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	58000400 	.word	0x58000400

080057c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	807b      	strh	r3, [r7, #2]
 80057d4:	4613      	mov	r3, r2
 80057d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057d8:	787b      	ldrb	r3, [r7, #1]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057de:	887a      	ldrh	r2, [r7, #2]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80057e4:	e003      	b.n	80057ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80057e6:	887b      	ldrh	r3, [r7, #2]
 80057e8:	041a      	lsls	r2, r3, #16
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	619a      	str	r2, [r3, #24]
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
	...

080057fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005804:	4b19      	ldr	r3, [pc, #100]	@ (800586c <HAL_PWREx_ConfigSupply+0x70>)
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b04      	cmp	r3, #4
 800580e:	d00a      	beq.n	8005826 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005810:	4b16      	ldr	r3, [pc, #88]	@ (800586c <HAL_PWREx_ConfigSupply+0x70>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f003 0307 	and.w	r3, r3, #7
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	429a      	cmp	r2, r3
 800581c:	d001      	beq.n	8005822 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e01f      	b.n	8005862 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	e01d      	b.n	8005862 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005826:	4b11      	ldr	r3, [pc, #68]	@ (800586c <HAL_PWREx_ConfigSupply+0x70>)
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f023 0207 	bic.w	r2, r3, #7
 800582e:	490f      	ldr	r1, [pc, #60]	@ (800586c <HAL_PWREx_ConfigSupply+0x70>)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4313      	orrs	r3, r2
 8005834:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005836:	f7fc f915 	bl	8001a64 <HAL_GetTick>
 800583a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800583c:	e009      	b.n	8005852 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800583e:	f7fc f911 	bl	8001a64 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800584c:	d901      	bls.n	8005852 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e007      	b.n	8005862 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005852:	4b06      	ldr	r3, [pc, #24]	@ (800586c <HAL_PWREx_ConfigSupply+0x70>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800585a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800585e:	d1ee      	bne.n	800583e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	58024800 	.word	0x58024800

08005870 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b08c      	sub	sp, #48	@ 0x30
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e3c8      	b.n	8006014 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 8087 	beq.w	800599e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005890:	4b88      	ldr	r3, [pc, #544]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005898:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800589a:	4b86      	ldr	r3, [pc, #536]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 800589c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80058a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a2:	2b10      	cmp	r3, #16
 80058a4:	d007      	beq.n	80058b6 <HAL_RCC_OscConfig+0x46>
 80058a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a8:	2b18      	cmp	r3, #24
 80058aa:	d110      	bne.n	80058ce <HAL_RCC_OscConfig+0x5e>
 80058ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d10b      	bne.n	80058ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b6:	4b7f      	ldr	r3, [pc, #508]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d06c      	beq.n	800599c <HAL_RCC_OscConfig+0x12c>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d168      	bne.n	800599c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e3a2      	b.n	8006014 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058d6:	d106      	bne.n	80058e6 <HAL_RCC_OscConfig+0x76>
 80058d8:	4b76      	ldr	r3, [pc, #472]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a75      	ldr	r2, [pc, #468]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 80058de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058e2:	6013      	str	r3, [r2, #0]
 80058e4:	e02e      	b.n	8005944 <HAL_RCC_OscConfig+0xd4>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10c      	bne.n	8005908 <HAL_RCC_OscConfig+0x98>
 80058ee:	4b71      	ldr	r3, [pc, #452]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a70      	ldr	r2, [pc, #448]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 80058f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058f8:	6013      	str	r3, [r2, #0]
 80058fa:	4b6e      	ldr	r3, [pc, #440]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a6d      	ldr	r2, [pc, #436]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 8005900:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	e01d      	b.n	8005944 <HAL_RCC_OscConfig+0xd4>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005910:	d10c      	bne.n	800592c <HAL_RCC_OscConfig+0xbc>
 8005912:	4b68      	ldr	r3, [pc, #416]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a67      	ldr	r2, [pc, #412]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 8005918:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	4b65      	ldr	r3, [pc, #404]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a64      	ldr	r2, [pc, #400]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 8005924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	e00b      	b.n	8005944 <HAL_RCC_OscConfig+0xd4>
 800592c:	4b61      	ldr	r3, [pc, #388]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a60      	ldr	r2, [pc, #384]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 8005932:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	4b5e      	ldr	r3, [pc, #376]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a5d      	ldr	r2, [pc, #372]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 800593e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d013      	beq.n	8005974 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594c:	f7fc f88a 	bl	8001a64 <HAL_GetTick>
 8005950:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005954:	f7fc f886 	bl	8001a64 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b64      	cmp	r3, #100	@ 0x64
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e356      	b.n	8006014 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005966:	4b53      	ldr	r3, [pc, #332]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0f0      	beq.n	8005954 <HAL_RCC_OscConfig+0xe4>
 8005972:	e014      	b.n	800599e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005974:	f7fc f876 	bl	8001a64 <HAL_GetTick>
 8005978:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800597a:	e008      	b.n	800598e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800597c:	f7fc f872 	bl	8001a64 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b64      	cmp	r3, #100	@ 0x64
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e342      	b.n	8006014 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800598e:	4b49      	ldr	r3, [pc, #292]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1f0      	bne.n	800597c <HAL_RCC_OscConfig+0x10c>
 800599a:	e000      	b.n	800599e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800599c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 808c 	beq.w	8005ac4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ac:	4b41      	ldr	r3, [pc, #260]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80059b6:	4b3f      	ldr	r3, [pc, #252]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 80059b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d007      	beq.n	80059d2 <HAL_RCC_OscConfig+0x162>
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	2b18      	cmp	r3, #24
 80059c6:	d137      	bne.n	8005a38 <HAL_RCC_OscConfig+0x1c8>
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	f003 0303 	and.w	r3, r3, #3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d132      	bne.n	8005a38 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059d2:	4b38      	ldr	r3, [pc, #224]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d005      	beq.n	80059ea <HAL_RCC_OscConfig+0x17a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e314      	b.n	8006014 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80059ea:	4b32      	ldr	r3, [pc, #200]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f023 0219 	bic.w	r2, r3, #25
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	492f      	ldr	r1, [pc, #188]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fc:	f7fc f832 	bl	8001a64 <HAL_GetTick>
 8005a00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a04:	f7fc f82e 	bl	8001a64 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e2fe      	b.n	8006014 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a16:	4b27      	ldr	r3, [pc, #156]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0304 	and.w	r3, r3, #4
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0f0      	beq.n	8005a04 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a22:	4b24      	ldr	r3, [pc, #144]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	061b      	lsls	r3, r3, #24
 8005a30:	4920      	ldr	r1, [pc, #128]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a36:	e045      	b.n	8005ac4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d026      	beq.n	8005a8e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005a40:	4b1c      	ldr	r3, [pc, #112]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f023 0219 	bic.w	r2, r3, #25
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	4919      	ldr	r1, [pc, #100]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a52:	f7fc f807 	bl	8001a64 <HAL_GetTick>
 8005a56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a58:	e008      	b.n	8005a6c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a5a:	f7fc f803 	bl	8001a64 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e2d3      	b.n	8006014 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a6c:	4b11      	ldr	r3, [pc, #68]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d0f0      	beq.n	8005a5a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a78:	4b0e      	ldr	r3, [pc, #56]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	061b      	lsls	r3, r3, #24
 8005a86:	490b      	ldr	r1, [pc, #44]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	604b      	str	r3, [r1, #4]
 8005a8c:	e01a      	b.n	8005ac4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a8e:	4b09      	ldr	r3, [pc, #36]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a08      	ldr	r2, [pc, #32]	@ (8005ab4 <HAL_RCC_OscConfig+0x244>)
 8005a94:	f023 0301 	bic.w	r3, r3, #1
 8005a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a9a:	f7fb ffe3 	bl	8001a64 <HAL_GetTick>
 8005a9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005aa0:	e00a      	b.n	8005ab8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aa2:	f7fb ffdf 	bl	8001a64 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d903      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e2af      	b.n	8006014 <HAL_RCC_OscConfig+0x7a4>
 8005ab4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ab8:	4b96      	ldr	r3, [pc, #600]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1ee      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0310 	and.w	r3, r3, #16
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d06a      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ad0:	4b90      	ldr	r3, [pc, #576]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ad8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ada:	4b8e      	ldr	r3, [pc, #568]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ade:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	2b08      	cmp	r3, #8
 8005ae4:	d007      	beq.n	8005af6 <HAL_RCC_OscConfig+0x286>
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	2b18      	cmp	r3, #24
 8005aea:	d11b      	bne.n	8005b24 <HAL_RCC_OscConfig+0x2b4>
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d116      	bne.n	8005b24 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005af6:	4b87      	ldr	r3, [pc, #540]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d005      	beq.n	8005b0e <HAL_RCC_OscConfig+0x29e>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	2b80      	cmp	r3, #128	@ 0x80
 8005b08:	d001      	beq.n	8005b0e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e282      	b.n	8006014 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b0e:	4b81      	ldr	r3, [pc, #516]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	061b      	lsls	r3, r3, #24
 8005b1c:	497d      	ldr	r1, [pc, #500]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b22:	e040      	b.n	8005ba6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d023      	beq.n	8005b74 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005b2c:	4b79      	ldr	r3, [pc, #484]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a78      	ldr	r2, [pc, #480]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b38:	f7fb ff94 	bl	8001a64 <HAL_GetTick>
 8005b3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b40:	f7fb ff90 	bl	8001a64 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e260      	b.n	8006014 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b52:	4b70      	ldr	r3, [pc, #448]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0f0      	beq.n	8005b40 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	061b      	lsls	r3, r3, #24
 8005b6c:	4969      	ldr	r1, [pc, #420]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60cb      	str	r3, [r1, #12]
 8005b72:	e018      	b.n	8005ba6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b74:	4b67      	ldr	r3, [pc, #412]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a66      	ldr	r2, [pc, #408]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005b7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b80:	f7fb ff70 	bl	8001a64 <HAL_GetTick>
 8005b84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b88:	f7fb ff6c 	bl	8001a64 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e23c      	b.n	8006014 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b9a:	4b5e      	ldr	r3, [pc, #376]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f0      	bne.n	8005b88 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d036      	beq.n	8005c20 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d019      	beq.n	8005bee <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bba:	4b56      	ldr	r3, [pc, #344]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bbe:	4a55      	ldr	r2, [pc, #340]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005bc0:	f043 0301 	orr.w	r3, r3, #1
 8005bc4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc6:	f7fb ff4d 	bl	8001a64 <HAL_GetTick>
 8005bca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bcc:	e008      	b.n	8005be0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bce:	f7fb ff49 	bl	8001a64 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e219      	b.n	8006014 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005be0:	4b4c      	ldr	r3, [pc, #304]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005be2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d0f0      	beq.n	8005bce <HAL_RCC_OscConfig+0x35e>
 8005bec:	e018      	b.n	8005c20 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bee:	4b49      	ldr	r3, [pc, #292]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bf2:	4a48      	ldr	r2, [pc, #288]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005bf4:	f023 0301 	bic.w	r3, r3, #1
 8005bf8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bfa:	f7fb ff33 	bl	8001a64 <HAL_GetTick>
 8005bfe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c00:	e008      	b.n	8005c14 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c02:	f7fb ff2f 	bl	8001a64 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d901      	bls.n	8005c14 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e1ff      	b.n	8006014 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c14:	4b3f      	ldr	r3, [pc, #252]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005c16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1f0      	bne.n	8005c02 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0320 	and.w	r3, r3, #32
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d036      	beq.n	8005c9a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d019      	beq.n	8005c68 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c34:	4b37      	ldr	r3, [pc, #220]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a36      	ldr	r2, [pc, #216]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005c3a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005c3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c40:	f7fb ff10 	bl	8001a64 <HAL_GetTick>
 8005c44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c46:	e008      	b.n	8005c5a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c48:	f7fb ff0c 	bl	8001a64 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d901      	bls.n	8005c5a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e1dc      	b.n	8006014 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c5a:	4b2e      	ldr	r3, [pc, #184]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0f0      	beq.n	8005c48 <HAL_RCC_OscConfig+0x3d8>
 8005c66:	e018      	b.n	8005c9a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c68:	4b2a      	ldr	r3, [pc, #168]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a29      	ldr	r2, [pc, #164]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005c6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c74:	f7fb fef6 	bl	8001a64 <HAL_GetTick>
 8005c78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c7c:	f7fb fef2 	bl	8001a64 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e1c2      	b.n	8006014 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c8e:	4b21      	ldr	r3, [pc, #132]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1f0      	bne.n	8005c7c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0304 	and.w	r3, r3, #4
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f000 8086 	beq.w	8005db4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8005d18 <HAL_RCC_OscConfig+0x4a8>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1a      	ldr	r2, [pc, #104]	@ (8005d18 <HAL_RCC_OscConfig+0x4a8>)
 8005cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cb4:	f7fb fed6 	bl	8001a64 <HAL_GetTick>
 8005cb8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cbc:	f7fb fed2 	bl	8001a64 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b64      	cmp	r3, #100	@ 0x64
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e1a2      	b.n	8006014 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cce:	4b12      	ldr	r3, [pc, #72]	@ (8005d18 <HAL_RCC_OscConfig+0x4a8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d0f0      	beq.n	8005cbc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d106      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x480>
 8005ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce6:	4a0b      	ldr	r2, [pc, #44]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005ce8:	f043 0301 	orr.w	r3, r3, #1
 8005cec:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cee:	e032      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e6>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d111      	bne.n	8005d1c <HAL_RCC_OscConfig+0x4ac>
 8005cf8:	4b06      	ldr	r3, [pc, #24]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cfc:	4a05      	ldr	r2, [pc, #20]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005cfe:	f023 0301 	bic.w	r3, r3, #1
 8005d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d04:	4b03      	ldr	r3, [pc, #12]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d08:	4a02      	ldr	r2, [pc, #8]	@ (8005d14 <HAL_RCC_OscConfig+0x4a4>)
 8005d0a:	f023 0304 	bic.w	r3, r3, #4
 8005d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d10:	e021      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e6>
 8005d12:	bf00      	nop
 8005d14:	58024400 	.word	0x58024400
 8005d18:	58024800 	.word	0x58024800
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	2b05      	cmp	r3, #5
 8005d22:	d10c      	bne.n	8005d3e <HAL_RCC_OscConfig+0x4ce>
 8005d24:	4b83      	ldr	r3, [pc, #524]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d28:	4a82      	ldr	r2, [pc, #520]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005d2a:	f043 0304 	orr.w	r3, r3, #4
 8005d2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d30:	4b80      	ldr	r3, [pc, #512]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d34:	4a7f      	ldr	r2, [pc, #508]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005d36:	f043 0301 	orr.w	r3, r3, #1
 8005d3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d3c:	e00b      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e6>
 8005d3e:	4b7d      	ldr	r3, [pc, #500]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d42:	4a7c      	ldr	r2, [pc, #496]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005d44:	f023 0301 	bic.w	r3, r3, #1
 8005d48:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d4a:	4b7a      	ldr	r3, [pc, #488]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d4e:	4a79      	ldr	r2, [pc, #484]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005d50:	f023 0304 	bic.w	r3, r3, #4
 8005d54:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d015      	beq.n	8005d8a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5e:	f7fb fe81 	bl	8001a64 <HAL_GetTick>
 8005d62:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d64:	e00a      	b.n	8005d7c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d66:	f7fb fe7d 	bl	8001a64 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d901      	bls.n	8005d7c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e14b      	b.n	8006014 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d7c:	4b6d      	ldr	r3, [pc, #436]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0ee      	beq.n	8005d66 <HAL_RCC_OscConfig+0x4f6>
 8005d88:	e014      	b.n	8005db4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d8a:	f7fb fe6b 	bl	8001a64 <HAL_GetTick>
 8005d8e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d90:	e00a      	b.n	8005da8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d92:	f7fb fe67 	bl	8001a64 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e135      	b.n	8006014 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005da8:	4b62      	ldr	r3, [pc, #392]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1ee      	bne.n	8005d92 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 812a 	beq.w	8006012 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005dbe:	4b5d      	ldr	r3, [pc, #372]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dc6:	2b18      	cmp	r3, #24
 8005dc8:	f000 80ba 	beq.w	8005f40 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	f040 8095 	bne.w	8005f00 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dd6:	4b57      	ldr	r3, [pc, #348]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a56      	ldr	r2, [pc, #344]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005ddc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de2:	f7fb fe3f 	bl	8001a64 <HAL_GetTick>
 8005de6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005de8:	e008      	b.n	8005dfc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dea:	f7fb fe3b 	bl	8001a64 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e10b      	b.n	8006014 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1f0      	bne.n	8005dea <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e08:	4b4a      	ldr	r3, [pc, #296]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005e0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e0c:	4b4a      	ldr	r3, [pc, #296]	@ (8005f38 <HAL_RCC_OscConfig+0x6c8>)
 8005e0e:	4013      	ands	r3, r2
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005e18:	0112      	lsls	r2, r2, #4
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	4945      	ldr	r1, [pc, #276]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	628b      	str	r3, [r1, #40]	@ 0x28
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e26:	3b01      	subs	r3, #1
 8005e28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e30:	3b01      	subs	r3, #1
 8005e32:	025b      	lsls	r3, r3, #9
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	041b      	lsls	r3, r3, #16
 8005e40:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005e44:	431a      	orrs	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	061b      	lsls	r3, r3, #24
 8005e4e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005e52:	4938      	ldr	r1, [pc, #224]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005e58:	4b36      	ldr	r3, [pc, #216]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e5c:	4a35      	ldr	r2, [pc, #212]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005e5e:	f023 0301 	bic.w	r3, r3, #1
 8005e62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e64:	4b33      	ldr	r3, [pc, #204]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005e66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e68:	4b34      	ldr	r3, [pc, #208]	@ (8005f3c <HAL_RCC_OscConfig+0x6cc>)
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005e70:	00d2      	lsls	r2, r2, #3
 8005e72:	4930      	ldr	r1, [pc, #192]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e78:	4b2e      	ldr	r3, [pc, #184]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7c:	f023 020c 	bic.w	r2, r3, #12
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e84:	492b      	ldr	r1, [pc, #172]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e8a:	4b2a      	ldr	r3, [pc, #168]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e8e:	f023 0202 	bic.w	r2, r3, #2
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e96:	4927      	ldr	r1, [pc, #156]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e9c:	4b25      	ldr	r3, [pc, #148]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea0:	4a24      	ldr	r2, [pc, #144]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005ea2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ea8:	4b22      	ldr	r3, [pc, #136]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eac:	4a21      	ldr	r2, [pc, #132]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb8:	4a1e      	ldr	r2, [pc, #120]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005eba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ebe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005ec0:	4b1c      	ldr	r3, [pc, #112]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005ec6:	f043 0301 	orr.w	r3, r3, #1
 8005eca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ecc:	4b19      	ldr	r3, [pc, #100]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a18      	ldr	r2, [pc, #96]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005ed2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed8:	f7fb fdc4 	bl	8001a64 <HAL_GetTick>
 8005edc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee0:	f7fb fdc0 	bl	8001a64 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e090      	b.n	8006014 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ef2:	4b10      	ldr	r3, [pc, #64]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0f0      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x670>
 8005efe:	e088      	b.n	8006012 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f00:	4b0c      	ldr	r3, [pc, #48]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a0b      	ldr	r2, [pc, #44]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005f06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0c:	f7fb fdaa 	bl	8001a64 <HAL_GetTick>
 8005f10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f14:	f7fb fda6 	bl	8001a64 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e076      	b.n	8006014 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f26:	4b03      	ldr	r3, [pc, #12]	@ (8005f34 <HAL_RCC_OscConfig+0x6c4>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1f0      	bne.n	8005f14 <HAL_RCC_OscConfig+0x6a4>
 8005f32:	e06e      	b.n	8006012 <HAL_RCC_OscConfig+0x7a2>
 8005f34:	58024400 	.word	0x58024400
 8005f38:	fffffc0c 	.word	0xfffffc0c
 8005f3c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005f40:	4b36      	ldr	r3, [pc, #216]	@ (800601c <HAL_RCC_OscConfig+0x7ac>)
 8005f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f44:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005f46:	4b35      	ldr	r3, [pc, #212]	@ (800601c <HAL_RCC_OscConfig+0x7ac>)
 8005f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f4a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d031      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f003 0203 	and.w	r2, r3, #3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d12a      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	091b      	lsrs	r3, r3, #4
 8005f66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d122      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d11a      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	0a5b      	lsrs	r3, r3, #9
 8005f86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f8e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d111      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	0c1b      	lsrs	r3, r3, #16
 8005f98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d108      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	0e1b      	lsrs	r3, r3, #24
 8005faa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fb2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d001      	beq.n	8005fbc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e02b      	b.n	8006014 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005fbc:	4b17      	ldr	r3, [pc, #92]	@ (800601c <HAL_RCC_OscConfig+0x7ac>)
 8005fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fc0:	08db      	lsrs	r3, r3, #3
 8005fc2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fc6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d01f      	beq.n	8006012 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005fd2:	4b12      	ldr	r3, [pc, #72]	@ (800601c <HAL_RCC_OscConfig+0x7ac>)
 8005fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd6:	4a11      	ldr	r2, [pc, #68]	@ (800601c <HAL_RCC_OscConfig+0x7ac>)
 8005fd8:	f023 0301 	bic.w	r3, r3, #1
 8005fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005fde:	f7fb fd41 	bl	8001a64 <HAL_GetTick>
 8005fe2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005fe4:	bf00      	nop
 8005fe6:	f7fb fd3d 	bl	8001a64 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d0f9      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800601c <HAL_RCC_OscConfig+0x7ac>)
 8005ff4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8006020 <HAL_RCC_OscConfig+0x7b0>)
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005ffe:	00d2      	lsls	r2, r2, #3
 8006000:	4906      	ldr	r1, [pc, #24]	@ (800601c <HAL_RCC_OscConfig+0x7ac>)
 8006002:	4313      	orrs	r3, r2
 8006004:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006006:	4b05      	ldr	r3, [pc, #20]	@ (800601c <HAL_RCC_OscConfig+0x7ac>)
 8006008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600a:	4a04      	ldr	r2, [pc, #16]	@ (800601c <HAL_RCC_OscConfig+0x7ac>)
 800600c:	f043 0301 	orr.w	r3, r3, #1
 8006010:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3730      	adds	r7, #48	@ 0x30
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	58024400 	.word	0x58024400
 8006020:	ffff0007 	.word	0xffff0007

08006024 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e19c      	b.n	8006372 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006038:	4b8a      	ldr	r3, [pc, #552]	@ (8006264 <HAL_RCC_ClockConfig+0x240>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 030f 	and.w	r3, r3, #15
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d910      	bls.n	8006068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006046:	4b87      	ldr	r3, [pc, #540]	@ (8006264 <HAL_RCC_ClockConfig+0x240>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f023 020f 	bic.w	r2, r3, #15
 800604e:	4985      	ldr	r1, [pc, #532]	@ (8006264 <HAL_RCC_ClockConfig+0x240>)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	4313      	orrs	r3, r2
 8006054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006056:	4b83      	ldr	r3, [pc, #524]	@ (8006264 <HAL_RCC_ClockConfig+0x240>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 030f 	and.w	r3, r3, #15
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	429a      	cmp	r2, r3
 8006062:	d001      	beq.n	8006068 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e184      	b.n	8006372 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	2b00      	cmp	r3, #0
 8006072:	d010      	beq.n	8006096 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691a      	ldr	r2, [r3, #16]
 8006078:	4b7b      	ldr	r3, [pc, #492]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006080:	429a      	cmp	r2, r3
 8006082:	d908      	bls.n	8006096 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006084:	4b78      	ldr	r3, [pc, #480]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	4975      	ldr	r1, [pc, #468]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 8006092:	4313      	orrs	r3, r2
 8006094:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0308 	and.w	r3, r3, #8
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d010      	beq.n	80060c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	695a      	ldr	r2, [r3, #20]
 80060a6:	4b70      	ldr	r3, [pc, #448]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d908      	bls.n	80060c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80060b2:	4b6d      	ldr	r3, [pc, #436]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	496a      	ldr	r1, [pc, #424]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0310 	and.w	r3, r3, #16
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d010      	beq.n	80060f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	699a      	ldr	r2, [r3, #24]
 80060d4:	4b64      	ldr	r3, [pc, #400]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80060dc:	429a      	cmp	r2, r3
 80060de:	d908      	bls.n	80060f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060e0:	4b61      	ldr	r3, [pc, #388]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	495e      	ldr	r1, [pc, #376]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0320 	and.w	r3, r3, #32
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d010      	beq.n	8006120 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69da      	ldr	r2, [r3, #28]
 8006102:	4b59      	ldr	r3, [pc, #356]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800610a:	429a      	cmp	r2, r3
 800610c:	d908      	bls.n	8006120 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800610e:	4b56      	ldr	r3, [pc, #344]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	4953      	ldr	r1, [pc, #332]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 800611c:	4313      	orrs	r3, r2
 800611e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d010      	beq.n	800614e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68da      	ldr	r2, [r3, #12]
 8006130:	4b4d      	ldr	r3, [pc, #308]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	f003 030f 	and.w	r3, r3, #15
 8006138:	429a      	cmp	r2, r3
 800613a:	d908      	bls.n	800614e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800613c:	4b4a      	ldr	r3, [pc, #296]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	f023 020f 	bic.w	r2, r3, #15
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	4947      	ldr	r1, [pc, #284]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 800614a:	4313      	orrs	r3, r2
 800614c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d055      	beq.n	8006206 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800615a:	4b43      	ldr	r3, [pc, #268]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	4940      	ldr	r1, [pc, #256]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 8006168:	4313      	orrs	r3, r2
 800616a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	2b02      	cmp	r3, #2
 8006172:	d107      	bne.n	8006184 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006174:	4b3c      	ldr	r3, [pc, #240]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d121      	bne.n	80061c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e0f6      	b.n	8006372 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2b03      	cmp	r3, #3
 800618a:	d107      	bne.n	800619c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800618c:	4b36      	ldr	r3, [pc, #216]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d115      	bne.n	80061c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e0ea      	b.n	8006372 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d107      	bne.n	80061b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061a4:	4b30      	ldr	r3, [pc, #192]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d109      	bne.n	80061c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e0de      	b.n	8006372 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061b4:	4b2c      	ldr	r3, [pc, #176]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e0d6      	b.n	8006372 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061c4:	4b28      	ldr	r3, [pc, #160]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	f023 0207 	bic.w	r2, r3, #7
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	4925      	ldr	r1, [pc, #148]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061d6:	f7fb fc45 	bl	8001a64 <HAL_GetTick>
 80061da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061dc:	e00a      	b.n	80061f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061de:	f7fb fc41 	bl	8001a64 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d901      	bls.n	80061f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e0be      	b.n	8006372 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061f4:	4b1c      	ldr	r3, [pc, #112]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	00db      	lsls	r3, r3, #3
 8006202:	429a      	cmp	r2, r3
 8006204:	d1eb      	bne.n	80061de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d010      	beq.n	8006234 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68da      	ldr	r2, [r3, #12]
 8006216:	4b14      	ldr	r3, [pc, #80]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	f003 030f 	and.w	r3, r3, #15
 800621e:	429a      	cmp	r2, r3
 8006220:	d208      	bcs.n	8006234 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006222:	4b11      	ldr	r3, [pc, #68]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	f023 020f 	bic.w	r2, r3, #15
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	490e      	ldr	r1, [pc, #56]	@ (8006268 <HAL_RCC_ClockConfig+0x244>)
 8006230:	4313      	orrs	r3, r2
 8006232:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006234:	4b0b      	ldr	r3, [pc, #44]	@ (8006264 <HAL_RCC_ClockConfig+0x240>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 030f 	and.w	r3, r3, #15
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	429a      	cmp	r2, r3
 8006240:	d214      	bcs.n	800626c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006242:	4b08      	ldr	r3, [pc, #32]	@ (8006264 <HAL_RCC_ClockConfig+0x240>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f023 020f 	bic.w	r2, r3, #15
 800624a:	4906      	ldr	r1, [pc, #24]	@ (8006264 <HAL_RCC_ClockConfig+0x240>)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	4313      	orrs	r3, r2
 8006250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006252:	4b04      	ldr	r3, [pc, #16]	@ (8006264 <HAL_RCC_ClockConfig+0x240>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 030f 	and.w	r3, r3, #15
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	429a      	cmp	r2, r3
 800625e:	d005      	beq.n	800626c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e086      	b.n	8006372 <HAL_RCC_ClockConfig+0x34e>
 8006264:	52002000 	.word	0x52002000
 8006268:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	d010      	beq.n	800629a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	691a      	ldr	r2, [r3, #16]
 800627c:	4b3f      	ldr	r3, [pc, #252]	@ (800637c <HAL_RCC_ClockConfig+0x358>)
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006284:	429a      	cmp	r2, r3
 8006286:	d208      	bcs.n	800629a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006288:	4b3c      	ldr	r3, [pc, #240]	@ (800637c <HAL_RCC_ClockConfig+0x358>)
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	4939      	ldr	r1, [pc, #228]	@ (800637c <HAL_RCC_ClockConfig+0x358>)
 8006296:	4313      	orrs	r3, r2
 8006298:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0308 	and.w	r3, r3, #8
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d010      	beq.n	80062c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	695a      	ldr	r2, [r3, #20]
 80062aa:	4b34      	ldr	r3, [pc, #208]	@ (800637c <HAL_RCC_ClockConfig+0x358>)
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d208      	bcs.n	80062c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80062b6:	4b31      	ldr	r3, [pc, #196]	@ (800637c <HAL_RCC_ClockConfig+0x358>)
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	492e      	ldr	r1, [pc, #184]	@ (800637c <HAL_RCC_ClockConfig+0x358>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0310 	and.w	r3, r3, #16
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d010      	beq.n	80062f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	699a      	ldr	r2, [r3, #24]
 80062d8:	4b28      	ldr	r3, [pc, #160]	@ (800637c <HAL_RCC_ClockConfig+0x358>)
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d208      	bcs.n	80062f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062e4:	4b25      	ldr	r3, [pc, #148]	@ (800637c <HAL_RCC_ClockConfig+0x358>)
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	4922      	ldr	r1, [pc, #136]	@ (800637c <HAL_RCC_ClockConfig+0x358>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0320 	and.w	r3, r3, #32
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d010      	beq.n	8006324 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	69da      	ldr	r2, [r3, #28]
 8006306:	4b1d      	ldr	r3, [pc, #116]	@ (800637c <HAL_RCC_ClockConfig+0x358>)
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800630e:	429a      	cmp	r2, r3
 8006310:	d208      	bcs.n	8006324 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006312:	4b1a      	ldr	r3, [pc, #104]	@ (800637c <HAL_RCC_ClockConfig+0x358>)
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	4917      	ldr	r1, [pc, #92]	@ (800637c <HAL_RCC_ClockConfig+0x358>)
 8006320:	4313      	orrs	r3, r2
 8006322:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006324:	f000 f834 	bl	8006390 <HAL_RCC_GetSysClockFreq>
 8006328:	4602      	mov	r2, r0
 800632a:	4b14      	ldr	r3, [pc, #80]	@ (800637c <HAL_RCC_ClockConfig+0x358>)
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	0a1b      	lsrs	r3, r3, #8
 8006330:	f003 030f 	and.w	r3, r3, #15
 8006334:	4912      	ldr	r1, [pc, #72]	@ (8006380 <HAL_RCC_ClockConfig+0x35c>)
 8006336:	5ccb      	ldrb	r3, [r1, r3]
 8006338:	f003 031f 	and.w	r3, r3, #31
 800633c:	fa22 f303 	lsr.w	r3, r2, r3
 8006340:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006342:	4b0e      	ldr	r3, [pc, #56]	@ (800637c <HAL_RCC_ClockConfig+0x358>)
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	f003 030f 	and.w	r3, r3, #15
 800634a:	4a0d      	ldr	r2, [pc, #52]	@ (8006380 <HAL_RCC_ClockConfig+0x35c>)
 800634c:	5cd3      	ldrb	r3, [r2, r3]
 800634e:	f003 031f 	and.w	r3, r3, #31
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	fa22 f303 	lsr.w	r3, r2, r3
 8006358:	4a0a      	ldr	r2, [pc, #40]	@ (8006384 <HAL_RCC_ClockConfig+0x360>)
 800635a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800635c:	4a0a      	ldr	r2, [pc, #40]	@ (8006388 <HAL_RCC_ClockConfig+0x364>)
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006362:	4b0a      	ldr	r3, [pc, #40]	@ (800638c <HAL_RCC_ClockConfig+0x368>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4618      	mov	r0, r3
 8006368:	f7fb f844 	bl	80013f4 <HAL_InitTick>
 800636c:	4603      	mov	r3, r0
 800636e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006370:	7bfb      	ldrb	r3, [r7, #15]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	58024400 	.word	0x58024400
 8006380:	08026cb0 	.word	0x08026cb0
 8006384:	24000004 	.word	0x24000004
 8006388:	24000000 	.word	0x24000000
 800638c:	24000008 	.word	0x24000008

08006390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006390:	b480      	push	{r7}
 8006392:	b089      	sub	sp, #36	@ 0x24
 8006394:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006396:	4bb3      	ldr	r3, [pc, #716]	@ (8006664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800639e:	2b18      	cmp	r3, #24
 80063a0:	f200 8155 	bhi.w	800664e <HAL_RCC_GetSysClockFreq+0x2be>
 80063a4:	a201      	add	r2, pc, #4	@ (adr r2, 80063ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80063a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063aa:	bf00      	nop
 80063ac:	08006411 	.word	0x08006411
 80063b0:	0800664f 	.word	0x0800664f
 80063b4:	0800664f 	.word	0x0800664f
 80063b8:	0800664f 	.word	0x0800664f
 80063bc:	0800664f 	.word	0x0800664f
 80063c0:	0800664f 	.word	0x0800664f
 80063c4:	0800664f 	.word	0x0800664f
 80063c8:	0800664f 	.word	0x0800664f
 80063cc:	08006437 	.word	0x08006437
 80063d0:	0800664f 	.word	0x0800664f
 80063d4:	0800664f 	.word	0x0800664f
 80063d8:	0800664f 	.word	0x0800664f
 80063dc:	0800664f 	.word	0x0800664f
 80063e0:	0800664f 	.word	0x0800664f
 80063e4:	0800664f 	.word	0x0800664f
 80063e8:	0800664f 	.word	0x0800664f
 80063ec:	0800643d 	.word	0x0800643d
 80063f0:	0800664f 	.word	0x0800664f
 80063f4:	0800664f 	.word	0x0800664f
 80063f8:	0800664f 	.word	0x0800664f
 80063fc:	0800664f 	.word	0x0800664f
 8006400:	0800664f 	.word	0x0800664f
 8006404:	0800664f 	.word	0x0800664f
 8006408:	0800664f 	.word	0x0800664f
 800640c:	08006443 	.word	0x08006443
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006410:	4b94      	ldr	r3, [pc, #592]	@ (8006664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0320 	and.w	r3, r3, #32
 8006418:	2b00      	cmp	r3, #0
 800641a:	d009      	beq.n	8006430 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800641c:	4b91      	ldr	r3, [pc, #580]	@ (8006664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	08db      	lsrs	r3, r3, #3
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	4a90      	ldr	r2, [pc, #576]	@ (8006668 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006428:	fa22 f303 	lsr.w	r3, r2, r3
 800642c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800642e:	e111      	b.n	8006654 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006430:	4b8d      	ldr	r3, [pc, #564]	@ (8006668 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006432:	61bb      	str	r3, [r7, #24]
      break;
 8006434:	e10e      	b.n	8006654 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006436:	4b8d      	ldr	r3, [pc, #564]	@ (800666c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006438:	61bb      	str	r3, [r7, #24]
      break;
 800643a:	e10b      	b.n	8006654 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800643c:	4b8c      	ldr	r3, [pc, #560]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800643e:	61bb      	str	r3, [r7, #24]
      break;
 8006440:	e108      	b.n	8006654 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006442:	4b88      	ldr	r3, [pc, #544]	@ (8006664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006446:	f003 0303 	and.w	r3, r3, #3
 800644a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800644c:	4b85      	ldr	r3, [pc, #532]	@ (8006664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800644e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006450:	091b      	lsrs	r3, r3, #4
 8006452:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006456:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006458:	4b82      	ldr	r3, [pc, #520]	@ (8006664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800645a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006462:	4b80      	ldr	r3, [pc, #512]	@ (8006664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006466:	08db      	lsrs	r3, r3, #3
 8006468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	fb02 f303 	mul.w	r3, r2, r3
 8006472:	ee07 3a90 	vmov	s15, r3
 8006476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 80e1 	beq.w	8006648 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	2b02      	cmp	r3, #2
 800648a:	f000 8083 	beq.w	8006594 <HAL_RCC_GetSysClockFreq+0x204>
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2b02      	cmp	r3, #2
 8006492:	f200 80a1 	bhi.w	80065d8 <HAL_RCC_GetSysClockFreq+0x248>
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <HAL_RCC_GetSysClockFreq+0x114>
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d056      	beq.n	8006550 <HAL_RCC_GetSysClockFreq+0x1c0>
 80064a2:	e099      	b.n	80065d8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064a4:	4b6f      	ldr	r3, [pc, #444]	@ (8006664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0320 	and.w	r3, r3, #32
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d02d      	beq.n	800650c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064b0:	4b6c      	ldr	r3, [pc, #432]	@ (8006664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	08db      	lsrs	r3, r3, #3
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	4a6b      	ldr	r2, [pc, #428]	@ (8006668 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064bc:	fa22 f303 	lsr.w	r3, r2, r3
 80064c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	ee07 3a90 	vmov	s15, r3
 80064c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	ee07 3a90 	vmov	s15, r3
 80064d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064da:	4b62      	ldr	r3, [pc, #392]	@ (8006664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064e2:	ee07 3a90 	vmov	s15, r3
 80064e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80064ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006674 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006506:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800650a:	e087      	b.n	800661c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	ee07 3a90 	vmov	s15, r3
 8006512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006516:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006678 <HAL_RCC_GetSysClockFreq+0x2e8>
 800651a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800651e:	4b51      	ldr	r3, [pc, #324]	@ (8006664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006526:	ee07 3a90 	vmov	s15, r3
 800652a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800652e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006532:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006674 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800653a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800653e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800654a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800654e:	e065      	b.n	800661c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	ee07 3a90 	vmov	s15, r3
 8006556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800655a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800667c <HAL_RCC_GetSysClockFreq+0x2ec>
 800655e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006562:	4b40      	ldr	r3, [pc, #256]	@ (8006664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800656a:	ee07 3a90 	vmov	s15, r3
 800656e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006572:	ed97 6a02 	vldr	s12, [r7, #8]
 8006576:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006674 <HAL_RCC_GetSysClockFreq+0x2e4>
 800657a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800657e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006582:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800658a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800658e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006592:	e043      	b.n	800661c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	ee07 3a90 	vmov	s15, r3
 800659a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006680 <HAL_RCC_GetSysClockFreq+0x2f0>
 80065a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065a6:	4b2f      	ldr	r3, [pc, #188]	@ (8006664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ae:	ee07 3a90 	vmov	s15, r3
 80065b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80065ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006674 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065d6:	e021      	b.n	800661c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	ee07 3a90 	vmov	s15, r3
 80065de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800667c <HAL_RCC_GetSysClockFreq+0x2ec>
 80065e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ea:	4b1e      	ldr	r3, [pc, #120]	@ (8006664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f2:	ee07 3a90 	vmov	s15, r3
 80065f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80065fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006674 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800660a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800660e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006616:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800661a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800661c:	4b11      	ldr	r3, [pc, #68]	@ (8006664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800661e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006620:	0a5b      	lsrs	r3, r3, #9
 8006622:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006626:	3301      	adds	r3, #1
 8006628:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	ee07 3a90 	vmov	s15, r3
 8006630:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006634:	edd7 6a07 	vldr	s13, [r7, #28]
 8006638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800663c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006640:	ee17 3a90 	vmov	r3, s15
 8006644:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006646:	e005      	b.n	8006654 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	61bb      	str	r3, [r7, #24]
      break;
 800664c:	e002      	b.n	8006654 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800664e:	4b07      	ldr	r3, [pc, #28]	@ (800666c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006650:	61bb      	str	r3, [r7, #24]
      break;
 8006652:	bf00      	nop
  }

  return sysclockfreq;
 8006654:	69bb      	ldr	r3, [r7, #24]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3724      	adds	r7, #36	@ 0x24
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	58024400 	.word	0x58024400
 8006668:	03d09000 	.word	0x03d09000
 800666c:	003d0900 	.word	0x003d0900
 8006670:	007a1200 	.word	0x007a1200
 8006674:	46000000 	.word	0x46000000
 8006678:	4c742400 	.word	0x4c742400
 800667c:	4a742400 	.word	0x4a742400
 8006680:	4af42400 	.word	0x4af42400

08006684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800668a:	f7ff fe81 	bl	8006390 <HAL_RCC_GetSysClockFreq>
 800668e:	4602      	mov	r2, r0
 8006690:	4b10      	ldr	r3, [pc, #64]	@ (80066d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	0a1b      	lsrs	r3, r3, #8
 8006696:	f003 030f 	and.w	r3, r3, #15
 800669a:	490f      	ldr	r1, [pc, #60]	@ (80066d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800669c:	5ccb      	ldrb	r3, [r1, r3]
 800669e:	f003 031f 	and.w	r3, r3, #31
 80066a2:	fa22 f303 	lsr.w	r3, r2, r3
 80066a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066a8:	4b0a      	ldr	r3, [pc, #40]	@ (80066d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	f003 030f 	and.w	r3, r3, #15
 80066b0:	4a09      	ldr	r2, [pc, #36]	@ (80066d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80066b2:	5cd3      	ldrb	r3, [r2, r3]
 80066b4:	f003 031f 	and.w	r3, r3, #31
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	fa22 f303 	lsr.w	r3, r2, r3
 80066be:	4a07      	ldr	r2, [pc, #28]	@ (80066dc <HAL_RCC_GetHCLKFreq+0x58>)
 80066c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066c2:	4a07      	ldr	r2, [pc, #28]	@ (80066e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80066c8:	4b04      	ldr	r3, [pc, #16]	@ (80066dc <HAL_RCC_GetHCLKFreq+0x58>)
 80066ca:	681b      	ldr	r3, [r3, #0]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	58024400 	.word	0x58024400
 80066d8:	08026cb0 	.word	0x08026cb0
 80066dc:	24000004 	.word	0x24000004
 80066e0:	24000000 	.word	0x24000000

080066e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80066e8:	f7ff ffcc 	bl	8006684 <HAL_RCC_GetHCLKFreq>
 80066ec:	4602      	mov	r2, r0
 80066ee:	4b06      	ldr	r3, [pc, #24]	@ (8006708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	091b      	lsrs	r3, r3, #4
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	4904      	ldr	r1, [pc, #16]	@ (800670c <HAL_RCC_GetPCLK1Freq+0x28>)
 80066fa:	5ccb      	ldrb	r3, [r1, r3]
 80066fc:	f003 031f 	and.w	r3, r3, #31
 8006700:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006704:	4618      	mov	r0, r3
 8006706:	bd80      	pop	{r7, pc}
 8006708:	58024400 	.word	0x58024400
 800670c:	08026cb0 	.word	0x08026cb0

08006710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006714:	f7ff ffb6 	bl	8006684 <HAL_RCC_GetHCLKFreq>
 8006718:	4602      	mov	r2, r0
 800671a:	4b06      	ldr	r3, [pc, #24]	@ (8006734 <HAL_RCC_GetPCLK2Freq+0x24>)
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	0a1b      	lsrs	r3, r3, #8
 8006720:	f003 0307 	and.w	r3, r3, #7
 8006724:	4904      	ldr	r1, [pc, #16]	@ (8006738 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006726:	5ccb      	ldrb	r3, [r1, r3]
 8006728:	f003 031f 	and.w	r3, r3, #31
 800672c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006730:	4618      	mov	r0, r3
 8006732:	bd80      	pop	{r7, pc}
 8006734:	58024400 	.word	0x58024400
 8006738:	08026cb0 	.word	0x08026cb0

0800673c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	223f      	movs	r2, #63	@ 0x3f
 800674a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800674c:	4b1a      	ldr	r3, [pc, #104]	@ (80067b8 <HAL_RCC_GetClockConfig+0x7c>)
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	f003 0207 	and.w	r2, r3, #7
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006758:	4b17      	ldr	r3, [pc, #92]	@ (80067b8 <HAL_RCC_GetClockConfig+0x7c>)
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006764:	4b14      	ldr	r3, [pc, #80]	@ (80067b8 <HAL_RCC_GetClockConfig+0x7c>)
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	f003 020f 	and.w	r2, r3, #15
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006770:	4b11      	ldr	r3, [pc, #68]	@ (80067b8 <HAL_RCC_GetClockConfig+0x7c>)
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800677c:	4b0e      	ldr	r3, [pc, #56]	@ (80067b8 <HAL_RCC_GetClockConfig+0x7c>)
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006788:	4b0b      	ldr	r3, [pc, #44]	@ (80067b8 <HAL_RCC_GetClockConfig+0x7c>)
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006794:	4b08      	ldr	r3, [pc, #32]	@ (80067b8 <HAL_RCC_GetClockConfig+0x7c>)
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80067a0:	4b06      	ldr	r3, [pc, #24]	@ (80067bc <HAL_RCC_GetClockConfig+0x80>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 020f 	and.w	r2, r3, #15
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	601a      	str	r2, [r3, #0]
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	58024400 	.word	0x58024400
 80067bc:	52002000 	.word	0x52002000

080067c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067c4:	b0c6      	sub	sp, #280	@ 0x118
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80067cc:	2300      	movs	r3, #0
 80067ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80067d2:	2300      	movs	r3, #0
 80067d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80067d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80067e4:	2500      	movs	r5, #0
 80067e6:	ea54 0305 	orrs.w	r3, r4, r5
 80067ea:	d049      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80067ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80067f6:	d02f      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80067f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80067fc:	d828      	bhi.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80067fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006802:	d01a      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006804:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006808:	d822      	bhi.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800680e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006812:	d007      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006814:	e01c      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006816:	4bab      	ldr	r3, [pc, #684]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681a:	4aaa      	ldr	r2, [pc, #680]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800681c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006820:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006822:	e01a      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006828:	3308      	adds	r3, #8
 800682a:	2102      	movs	r1, #2
 800682c:	4618      	mov	r0, r3
 800682e:	f002 fa49 	bl	8008cc4 <RCCEx_PLL2_Config>
 8006832:	4603      	mov	r3, r0
 8006834:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006838:	e00f      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800683a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800683e:	3328      	adds	r3, #40	@ 0x28
 8006840:	2102      	movs	r1, #2
 8006842:	4618      	mov	r0, r3
 8006844:	f002 faf0 	bl	8008e28 <RCCEx_PLL3_Config>
 8006848:	4603      	mov	r3, r0
 800684a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800684e:	e004      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006856:	e000      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800685a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10a      	bne.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006862:	4b98      	ldr	r3, [pc, #608]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006866:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800686a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006870:	4a94      	ldr	r2, [pc, #592]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006872:	430b      	orrs	r3, r1
 8006874:	6513      	str	r3, [r2, #80]	@ 0x50
 8006876:	e003      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006878:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800687c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006888:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800688c:	f04f 0900 	mov.w	r9, #0
 8006890:	ea58 0309 	orrs.w	r3, r8, r9
 8006894:	d047      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800689c:	2b04      	cmp	r3, #4
 800689e:	d82a      	bhi.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80068a0:	a201      	add	r2, pc, #4	@ (adr r2, 80068a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80068a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a6:	bf00      	nop
 80068a8:	080068bd 	.word	0x080068bd
 80068ac:	080068cb 	.word	0x080068cb
 80068b0:	080068e1 	.word	0x080068e1
 80068b4:	080068ff 	.word	0x080068ff
 80068b8:	080068ff 	.word	0x080068ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068bc:	4b81      	ldr	r3, [pc, #516]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80068be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c0:	4a80      	ldr	r2, [pc, #512]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80068c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068c8:	e01a      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ce:	3308      	adds	r3, #8
 80068d0:	2100      	movs	r1, #0
 80068d2:	4618      	mov	r0, r3
 80068d4:	f002 f9f6 	bl	8008cc4 <RCCEx_PLL2_Config>
 80068d8:	4603      	mov	r3, r0
 80068da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068de:	e00f      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e4:	3328      	adds	r3, #40	@ 0x28
 80068e6:	2100      	movs	r1, #0
 80068e8:	4618      	mov	r0, r3
 80068ea:	f002 fa9d 	bl	8008e28 <RCCEx_PLL3_Config>
 80068ee:	4603      	mov	r3, r0
 80068f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068f4:	e004      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068fc:	e000      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80068fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006900:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006908:	4b6e      	ldr	r3, [pc, #440]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800690a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800690c:	f023 0107 	bic.w	r1, r3, #7
 8006910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006916:	4a6b      	ldr	r2, [pc, #428]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006918:	430b      	orrs	r3, r1
 800691a:	6513      	str	r3, [r2, #80]	@ 0x50
 800691c:	e003      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800691e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006922:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800692a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006932:	f04f 0b00 	mov.w	fp, #0
 8006936:	ea5a 030b 	orrs.w	r3, sl, fp
 800693a:	d05b      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800693c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006940:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006944:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006948:	d03b      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800694a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800694e:	d834      	bhi.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006950:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006954:	d037      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006956:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800695a:	d82e      	bhi.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800695c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006960:	d033      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006962:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006966:	d828      	bhi.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006968:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800696c:	d01a      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800696e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006972:	d822      	bhi.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006978:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800697c:	d007      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800697e:	e01c      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006980:	4b50      	ldr	r3, [pc, #320]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006984:	4a4f      	ldr	r2, [pc, #316]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800698a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800698c:	e01e      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800698e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006992:	3308      	adds	r3, #8
 8006994:	2100      	movs	r1, #0
 8006996:	4618      	mov	r0, r3
 8006998:	f002 f994 	bl	8008cc4 <RCCEx_PLL2_Config>
 800699c:	4603      	mov	r3, r0
 800699e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80069a2:	e013      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a8:	3328      	adds	r3, #40	@ 0x28
 80069aa:	2100      	movs	r1, #0
 80069ac:	4618      	mov	r0, r3
 80069ae:	f002 fa3b 	bl	8008e28 <RCCEx_PLL3_Config>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069b8:	e008      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069c0:	e004      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80069c2:	bf00      	nop
 80069c4:	e002      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80069c6:	bf00      	nop
 80069c8:	e000      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80069ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10b      	bne.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80069d4:	4b3b      	ldr	r3, [pc, #236]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069d8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80069dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80069e4:	4a37      	ldr	r2, [pc, #220]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069e6:	430b      	orrs	r3, r1
 80069e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80069ea:	e003      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80069f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006a00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006a04:	2300      	movs	r3, #0
 8006a06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006a0a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006a0e:	460b      	mov	r3, r1
 8006a10:	4313      	orrs	r3, r2
 8006a12:	d05d      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006a1c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006a20:	d03b      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006a22:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006a26:	d834      	bhi.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006a28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a2c:	d037      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006a2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a32:	d82e      	bhi.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006a34:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a38:	d033      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006a3a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a3e:	d828      	bhi.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006a40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a44:	d01a      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006a46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a4a:	d822      	bhi.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006a50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a54:	d007      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006a56:	e01c      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a58:	4b1a      	ldr	r3, [pc, #104]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5c:	4a19      	ldr	r2, [pc, #100]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a64:	e01e      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a6a:	3308      	adds	r3, #8
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f002 f928 	bl	8008cc4 <RCCEx_PLL2_Config>
 8006a74:	4603      	mov	r3, r0
 8006a76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006a7a:	e013      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a80:	3328      	adds	r3, #40	@ 0x28
 8006a82:	2100      	movs	r1, #0
 8006a84:	4618      	mov	r0, r3
 8006a86:	f002 f9cf 	bl	8008e28 <RCCEx_PLL3_Config>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a90:	e008      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a98:	e004      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006a9a:	bf00      	nop
 8006a9c:	e002      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006a9e:	bf00      	nop
 8006aa0:	e000      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10d      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006aac:	4b05      	ldr	r3, [pc, #20]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ab0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006abc:	4a01      	ldr	r2, [pc, #4]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006abe:	430b      	orrs	r3, r1
 8006ac0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ac2:	e005      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006ac4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006acc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006adc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006ae6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006aea:	460b      	mov	r3, r1
 8006aec:	4313      	orrs	r3, r2
 8006aee:	d03a      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006af6:	2b30      	cmp	r3, #48	@ 0x30
 8006af8:	d01f      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006afa:	2b30      	cmp	r3, #48	@ 0x30
 8006afc:	d819      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d00c      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006b02:	2b20      	cmp	r3, #32
 8006b04:	d815      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d019      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006b0a:	2b10      	cmp	r3, #16
 8006b0c:	d111      	bne.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b0e:	4baa      	ldr	r3, [pc, #680]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b12:	4aa9      	ldr	r2, [pc, #676]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006b1a:	e011      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b20:	3308      	adds	r3, #8
 8006b22:	2102      	movs	r1, #2
 8006b24:	4618      	mov	r0, r3
 8006b26:	f002 f8cd 	bl	8008cc4 <RCCEx_PLL2_Config>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006b30:	e006      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b38:	e002      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006b3a:	bf00      	nop
 8006b3c:	e000      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10a      	bne.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006b48:	4b9b      	ldr	r3, [pc, #620]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b4c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b56:	4a98      	ldr	r2, [pc, #608]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b58:	430b      	orrs	r3, r1
 8006b5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006b5c:	e003      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006b72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006b76:	2300      	movs	r3, #0
 8006b78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006b7c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006b80:	460b      	mov	r3, r1
 8006b82:	4313      	orrs	r3, r2
 8006b84:	d051      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b90:	d035      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006b92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b96:	d82e      	bhi.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006b98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b9c:	d031      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006b9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ba2:	d828      	bhi.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006ba4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ba8:	d01a      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bae:	d822      	bhi.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006bb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bb8:	d007      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006bba:	e01c      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bbc:	4b7e      	ldr	r3, [pc, #504]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc0:	4a7d      	ldr	r2, [pc, #500]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006bc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006bc8:	e01c      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bce:	3308      	adds	r3, #8
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f002 f876 	bl	8008cc4 <RCCEx_PLL2_Config>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006bde:	e011      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be4:	3328      	adds	r3, #40	@ 0x28
 8006be6:	2100      	movs	r1, #0
 8006be8:	4618      	mov	r0, r3
 8006bea:	f002 f91d 	bl	8008e28 <RCCEx_PLL3_Config>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006bf4:	e006      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006bfc:	e002      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006bfe:	bf00      	nop
 8006c00:	e000      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006c02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10a      	bne.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006c0c:	4b6a      	ldr	r3, [pc, #424]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c10:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c1a:	4a67      	ldr	r2, [pc, #412]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c1c:	430b      	orrs	r3, r1
 8006c1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c20:	e003      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c32:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006c36:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c40:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006c44:	460b      	mov	r3, r1
 8006c46:	4313      	orrs	r3, r2
 8006c48:	d053      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c54:	d033      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006c56:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c5a:	d82c      	bhi.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006c5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c60:	d02f      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006c62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c66:	d826      	bhi.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006c68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c6c:	d02b      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006c6e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c72:	d820      	bhi.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006c74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c78:	d012      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006c7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c7e:	d81a      	bhi.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d022      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c88:	d115      	bne.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8e:	3308      	adds	r3, #8
 8006c90:	2101      	movs	r1, #1
 8006c92:	4618      	mov	r0, r3
 8006c94:	f002 f816 	bl	8008cc4 <RCCEx_PLL2_Config>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006c9e:	e015      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca4:	3328      	adds	r3, #40	@ 0x28
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f002 f8bd 	bl	8008e28 <RCCEx_PLL3_Config>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006cb4:	e00a      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cbc:	e006      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006cbe:	bf00      	nop
 8006cc0:	e004      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006cc2:	bf00      	nop
 8006cc4:	e002      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006cc6:	bf00      	nop
 8006cc8:	e000      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ccc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10a      	bne.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006cd4:	4b38      	ldr	r3, [pc, #224]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cd8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ce2:	4a35      	ldr	r2, [pc, #212]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ce4:	430b      	orrs	r3, r1
 8006ce6:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ce8:	e003      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d02:	2300      	movs	r3, #0
 8006d04:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006d08:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	d058      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006d1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d1e:	d033      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d24:	d82c      	bhi.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d2a:	d02f      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d30:	d826      	bhi.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006d32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d36:	d02b      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006d38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d3c:	d820      	bhi.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006d3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d42:	d012      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006d44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d48:	d81a      	bhi.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d022      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006d4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d52:	d115      	bne.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d58:	3308      	adds	r3, #8
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f001 ffb1 	bl	8008cc4 <RCCEx_PLL2_Config>
 8006d62:	4603      	mov	r3, r0
 8006d64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006d68:	e015      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d6e:	3328      	adds	r3, #40	@ 0x28
 8006d70:	2101      	movs	r1, #1
 8006d72:	4618      	mov	r0, r3
 8006d74:	f002 f858 	bl	8008e28 <RCCEx_PLL3_Config>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006d7e:	e00a      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d86:	e006      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006d88:	bf00      	nop
 8006d8a:	e004      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006d8c:	bf00      	nop
 8006d8e:	e002      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006d90:	bf00      	nop
 8006d92:	e000      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10e      	bne.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006d9e:	4b06      	ldr	r3, [pc, #24]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006da2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006daa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006dae:	4a02      	ldr	r2, [pc, #8]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006db0:	430b      	orrs	r3, r1
 8006db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006db4:	e006      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006db6:	bf00      	nop
 8006db8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dcc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006dda:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006dde:	460b      	mov	r3, r1
 8006de0:	4313      	orrs	r3, r2
 8006de2:	d037      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dee:	d00e      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006df0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006df4:	d816      	bhi.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d018      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006dfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dfe:	d111      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e00:	4bc4      	ldr	r3, [pc, #784]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e04:	4ac3      	ldr	r2, [pc, #780]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e0c:	e00f      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e12:	3308      	adds	r3, #8
 8006e14:	2101      	movs	r1, #1
 8006e16:	4618      	mov	r0, r3
 8006e18:	f001 ff54 	bl	8008cc4 <RCCEx_PLL2_Config>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e22:	e004      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e2a:	e000      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10a      	bne.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e36:	4bb7      	ldr	r3, [pc, #732]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e3a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e44:	4ab3      	ldr	r2, [pc, #716]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e46:	430b      	orrs	r3, r1
 8006e48:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e4a:	e003      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006e60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e64:	2300      	movs	r3, #0
 8006e66:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e6a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4313      	orrs	r3, r2
 8006e72:	d039      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	d81c      	bhi.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e84 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e84:	08006ec1 	.word	0x08006ec1
 8006e88:	08006e95 	.word	0x08006e95
 8006e8c:	08006ea3 	.word	0x08006ea3
 8006e90:	08006ec1 	.word	0x08006ec1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e94:	4b9f      	ldr	r3, [pc, #636]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e98:	4a9e      	ldr	r2, [pc, #632]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006ea0:	e00f      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	2102      	movs	r1, #2
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f001 ff0a 	bl	8008cc4 <RCCEx_PLL2_Config>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006eb6:	e004      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ebe:	e000      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ec2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10a      	bne.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006eca:	4b92      	ldr	r3, [pc, #584]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ece:	f023 0103 	bic.w	r1, r3, #3
 8006ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ed8:	4a8e      	ldr	r2, [pc, #568]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006eda:	430b      	orrs	r3, r1
 8006edc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ede:	e003      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ee4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006ef4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006efe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f02:	460b      	mov	r3, r1
 8006f04:	4313      	orrs	r3, r2
 8006f06:	f000 8099 	beq.w	800703c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f0a:	4b83      	ldr	r3, [pc, #524]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a82      	ldr	r2, [pc, #520]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f16:	f7fa fda5 	bl	8001a64 <HAL_GetTick>
 8006f1a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f1e:	e00b      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f20:	f7fa fda0 	bl	8001a64 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b64      	cmp	r3, #100	@ 0x64
 8006f2e:	d903      	bls.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f36:	e005      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f38:	4b77      	ldr	r3, [pc, #476]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d0ed      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006f44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d173      	bne.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006f4c:	4b71      	ldr	r3, [pc, #452]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f4e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006f58:	4053      	eors	r3, r2
 8006f5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d015      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f62:	4b6c      	ldr	r3, [pc, #432]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f6a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f6e:	4b69      	ldr	r3, [pc, #420]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f72:	4a68      	ldr	r2, [pc, #416]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f78:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f7a:	4b66      	ldr	r3, [pc, #408]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f7e:	4a65      	ldr	r2, [pc, #404]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f84:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006f86:	4a63      	ldr	r2, [pc, #396]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f8c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006f96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f9a:	d118      	bne.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f9c:	f7fa fd62 	bl	8001a64 <HAL_GetTick>
 8006fa0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fa4:	e00d      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fa6:	f7fa fd5d 	bl	8001a64 <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006fb0:	1ad2      	subs	r2, r2, r3
 8006fb2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d903      	bls.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006fc0:	e005      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fc2:	4b54      	ldr	r3, [pc, #336]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc6:	f003 0302 	and.w	r3, r3, #2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d0eb      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006fce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d129      	bne.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fe2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fe6:	d10e      	bne.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006fe8:	4b4a      	ldr	r3, [pc, #296]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006ff8:	091a      	lsrs	r2, r3, #4
 8006ffa:	4b48      	ldr	r3, [pc, #288]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	4a45      	ldr	r2, [pc, #276]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007000:	430b      	orrs	r3, r1
 8007002:	6113      	str	r3, [r2, #16]
 8007004:	e005      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007006:	4b43      	ldr	r3, [pc, #268]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	4a42      	ldr	r2, [pc, #264]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800700c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007010:	6113      	str	r3, [r2, #16]
 8007012:	4b40      	ldr	r3, [pc, #256]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007014:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800701a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800701e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007022:	4a3c      	ldr	r2, [pc, #240]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007024:	430b      	orrs	r3, r1
 8007026:	6713      	str	r3, [r2, #112]	@ 0x70
 8007028:	e008      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800702a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800702e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007032:	e003      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007034:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007038:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800703c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007044:	f002 0301 	and.w	r3, r2, #1
 8007048:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800704c:	2300      	movs	r3, #0
 800704e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007052:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007056:	460b      	mov	r3, r1
 8007058:	4313      	orrs	r3, r2
 800705a:	f000 808f 	beq.w	800717c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800705e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007062:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007064:	2b28      	cmp	r3, #40	@ 0x28
 8007066:	d871      	bhi.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007068:	a201      	add	r2, pc, #4	@ (adr r2, 8007070 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800706a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706e:	bf00      	nop
 8007070:	08007155 	.word	0x08007155
 8007074:	0800714d 	.word	0x0800714d
 8007078:	0800714d 	.word	0x0800714d
 800707c:	0800714d 	.word	0x0800714d
 8007080:	0800714d 	.word	0x0800714d
 8007084:	0800714d 	.word	0x0800714d
 8007088:	0800714d 	.word	0x0800714d
 800708c:	0800714d 	.word	0x0800714d
 8007090:	08007121 	.word	0x08007121
 8007094:	0800714d 	.word	0x0800714d
 8007098:	0800714d 	.word	0x0800714d
 800709c:	0800714d 	.word	0x0800714d
 80070a0:	0800714d 	.word	0x0800714d
 80070a4:	0800714d 	.word	0x0800714d
 80070a8:	0800714d 	.word	0x0800714d
 80070ac:	0800714d 	.word	0x0800714d
 80070b0:	08007137 	.word	0x08007137
 80070b4:	0800714d 	.word	0x0800714d
 80070b8:	0800714d 	.word	0x0800714d
 80070bc:	0800714d 	.word	0x0800714d
 80070c0:	0800714d 	.word	0x0800714d
 80070c4:	0800714d 	.word	0x0800714d
 80070c8:	0800714d 	.word	0x0800714d
 80070cc:	0800714d 	.word	0x0800714d
 80070d0:	08007155 	.word	0x08007155
 80070d4:	0800714d 	.word	0x0800714d
 80070d8:	0800714d 	.word	0x0800714d
 80070dc:	0800714d 	.word	0x0800714d
 80070e0:	0800714d 	.word	0x0800714d
 80070e4:	0800714d 	.word	0x0800714d
 80070e8:	0800714d 	.word	0x0800714d
 80070ec:	0800714d 	.word	0x0800714d
 80070f0:	08007155 	.word	0x08007155
 80070f4:	0800714d 	.word	0x0800714d
 80070f8:	0800714d 	.word	0x0800714d
 80070fc:	0800714d 	.word	0x0800714d
 8007100:	0800714d 	.word	0x0800714d
 8007104:	0800714d 	.word	0x0800714d
 8007108:	0800714d 	.word	0x0800714d
 800710c:	0800714d 	.word	0x0800714d
 8007110:	08007155 	.word	0x08007155
 8007114:	58024400 	.word	0x58024400
 8007118:	58024800 	.word	0x58024800
 800711c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007124:	3308      	adds	r3, #8
 8007126:	2101      	movs	r1, #1
 8007128:	4618      	mov	r0, r3
 800712a:	f001 fdcb 	bl	8008cc4 <RCCEx_PLL2_Config>
 800712e:	4603      	mov	r3, r0
 8007130:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007134:	e00f      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800713a:	3328      	adds	r3, #40	@ 0x28
 800713c:	2101      	movs	r1, #1
 800713e:	4618      	mov	r0, r3
 8007140:	f001 fe72 	bl	8008e28 <RCCEx_PLL3_Config>
 8007144:	4603      	mov	r3, r0
 8007146:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800714a:	e004      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007152:	e000      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007156:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10a      	bne.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800715e:	4bbf      	ldr	r3, [pc, #764]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007162:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800716a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800716c:	4abb      	ldr	r2, [pc, #748]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800716e:	430b      	orrs	r3, r1
 8007170:	6553      	str	r3, [r2, #84]	@ 0x54
 8007172:	e003      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007174:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007178:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800717c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007184:	f002 0302 	and.w	r3, r2, #2
 8007188:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800718c:	2300      	movs	r3, #0
 800718e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007192:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007196:	460b      	mov	r3, r1
 8007198:	4313      	orrs	r3, r2
 800719a:	d041      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800719c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071a2:	2b05      	cmp	r3, #5
 80071a4:	d824      	bhi.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80071a6:	a201      	add	r2, pc, #4	@ (adr r2, 80071ac <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80071a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ac:	080071f9 	.word	0x080071f9
 80071b0:	080071c5 	.word	0x080071c5
 80071b4:	080071db 	.word	0x080071db
 80071b8:	080071f9 	.word	0x080071f9
 80071bc:	080071f9 	.word	0x080071f9
 80071c0:	080071f9 	.word	0x080071f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c8:	3308      	adds	r3, #8
 80071ca:	2101      	movs	r1, #1
 80071cc:	4618      	mov	r0, r3
 80071ce:	f001 fd79 	bl	8008cc4 <RCCEx_PLL2_Config>
 80071d2:	4603      	mov	r3, r0
 80071d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80071d8:	e00f      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071de:	3328      	adds	r3, #40	@ 0x28
 80071e0:	2101      	movs	r1, #1
 80071e2:	4618      	mov	r0, r3
 80071e4:	f001 fe20 	bl	8008e28 <RCCEx_PLL3_Config>
 80071e8:	4603      	mov	r3, r0
 80071ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80071ee:	e004      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071f6:	e000      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80071f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10a      	bne.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007202:	4b96      	ldr	r3, [pc, #600]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007206:	f023 0107 	bic.w	r1, r3, #7
 800720a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007210:	4a92      	ldr	r2, [pc, #584]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007212:	430b      	orrs	r3, r1
 8007214:	6553      	str	r3, [r2, #84]	@ 0x54
 8007216:	e003      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007218:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800721c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	f002 0304 	and.w	r3, r2, #4
 800722c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007230:	2300      	movs	r3, #0
 8007232:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007236:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800723a:	460b      	mov	r3, r1
 800723c:	4313      	orrs	r3, r2
 800723e:	d044      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007248:	2b05      	cmp	r3, #5
 800724a:	d825      	bhi.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800724c:	a201      	add	r2, pc, #4	@ (adr r2, 8007254 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800724e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007252:	bf00      	nop
 8007254:	080072a1 	.word	0x080072a1
 8007258:	0800726d 	.word	0x0800726d
 800725c:	08007283 	.word	0x08007283
 8007260:	080072a1 	.word	0x080072a1
 8007264:	080072a1 	.word	0x080072a1
 8007268:	080072a1 	.word	0x080072a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800726c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007270:	3308      	adds	r3, #8
 8007272:	2101      	movs	r1, #1
 8007274:	4618      	mov	r0, r3
 8007276:	f001 fd25 	bl	8008cc4 <RCCEx_PLL2_Config>
 800727a:	4603      	mov	r3, r0
 800727c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007280:	e00f      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007286:	3328      	adds	r3, #40	@ 0x28
 8007288:	2101      	movs	r1, #1
 800728a:	4618      	mov	r0, r3
 800728c:	f001 fdcc 	bl	8008e28 <RCCEx_PLL3_Config>
 8007290:	4603      	mov	r3, r0
 8007292:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007296:	e004      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800729e:	e000      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80072a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10b      	bne.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072aa:	4b6c      	ldr	r3, [pc, #432]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80072ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ae:	f023 0107 	bic.w	r1, r3, #7
 80072b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ba:	4a68      	ldr	r2, [pc, #416]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80072bc:	430b      	orrs	r3, r1
 80072be:	6593      	str	r3, [r2, #88]	@ 0x58
 80072c0:	e003      	b.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d2:	f002 0320 	and.w	r3, r2, #32
 80072d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80072da:	2300      	movs	r3, #0
 80072dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80072e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80072e4:	460b      	mov	r3, r1
 80072e6:	4313      	orrs	r3, r2
 80072e8:	d055      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80072ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072f6:	d033      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80072f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072fc:	d82c      	bhi.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80072fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007302:	d02f      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007308:	d826      	bhi.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800730a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800730e:	d02b      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007310:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007314:	d820      	bhi.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007316:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800731a:	d012      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800731c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007320:	d81a      	bhi.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007322:	2b00      	cmp	r3, #0
 8007324:	d022      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007326:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800732a:	d115      	bne.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800732c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007330:	3308      	adds	r3, #8
 8007332:	2100      	movs	r1, #0
 8007334:	4618      	mov	r0, r3
 8007336:	f001 fcc5 	bl	8008cc4 <RCCEx_PLL2_Config>
 800733a:	4603      	mov	r3, r0
 800733c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007340:	e015      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007346:	3328      	adds	r3, #40	@ 0x28
 8007348:	2102      	movs	r1, #2
 800734a:	4618      	mov	r0, r3
 800734c:	f001 fd6c 	bl	8008e28 <RCCEx_PLL3_Config>
 8007350:	4603      	mov	r3, r0
 8007352:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007356:	e00a      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800735e:	e006      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007360:	bf00      	nop
 8007362:	e004      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007364:	bf00      	nop
 8007366:	e002      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007368:	bf00      	nop
 800736a:	e000      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800736c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800736e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10b      	bne.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007376:	4b39      	ldr	r3, [pc, #228]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800737a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800737e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007382:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007386:	4a35      	ldr	r2, [pc, #212]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007388:	430b      	orrs	r3, r1
 800738a:	6553      	str	r3, [r2, #84]	@ 0x54
 800738c:	e003      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800738e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007392:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800739a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80073a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073a6:	2300      	movs	r3, #0
 80073a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073ac:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80073b0:	460b      	mov	r3, r1
 80073b2:	4313      	orrs	r3, r2
 80073b4:	d058      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80073b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80073c2:	d033      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80073c4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80073c8:	d82c      	bhi.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80073ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073ce:	d02f      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80073d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073d4:	d826      	bhi.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80073d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073da:	d02b      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80073dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073e0:	d820      	bhi.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80073e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073e6:	d012      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80073e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073ec:	d81a      	bhi.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d022      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80073f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073f6:	d115      	bne.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fc:	3308      	adds	r3, #8
 80073fe:	2100      	movs	r1, #0
 8007400:	4618      	mov	r0, r3
 8007402:	f001 fc5f 	bl	8008cc4 <RCCEx_PLL2_Config>
 8007406:	4603      	mov	r3, r0
 8007408:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800740c:	e015      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800740e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007412:	3328      	adds	r3, #40	@ 0x28
 8007414:	2102      	movs	r1, #2
 8007416:	4618      	mov	r0, r3
 8007418:	f001 fd06 	bl	8008e28 <RCCEx_PLL3_Config>
 800741c:	4603      	mov	r3, r0
 800741e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007422:	e00a      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800742a:	e006      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800742c:	bf00      	nop
 800742e:	e004      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007430:	bf00      	nop
 8007432:	e002      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007434:	bf00      	nop
 8007436:	e000      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800743a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10e      	bne.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007442:	4b06      	ldr	r3, [pc, #24]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007446:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800744a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800744e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007452:	4a02      	ldr	r2, [pc, #8]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007454:	430b      	orrs	r3, r1
 8007456:	6593      	str	r3, [r2, #88]	@ 0x58
 8007458:	e006      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800745a:	bf00      	nop
 800745c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007460:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007464:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800746c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007470:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007474:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007478:	2300      	movs	r3, #0
 800747a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800747e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007482:	460b      	mov	r3, r1
 8007484:	4313      	orrs	r3, r2
 8007486:	d055      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800748c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007490:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007494:	d033      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007496:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800749a:	d82c      	bhi.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800749c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074a0:	d02f      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80074a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074a6:	d826      	bhi.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80074a8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80074ac:	d02b      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80074ae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80074b2:	d820      	bhi.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80074b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074b8:	d012      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80074ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074be:	d81a      	bhi.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d022      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80074c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074c8:	d115      	bne.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ce:	3308      	adds	r3, #8
 80074d0:	2100      	movs	r1, #0
 80074d2:	4618      	mov	r0, r3
 80074d4:	f001 fbf6 	bl	8008cc4 <RCCEx_PLL2_Config>
 80074d8:	4603      	mov	r3, r0
 80074da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80074de:	e015      	b.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e4:	3328      	adds	r3, #40	@ 0x28
 80074e6:	2102      	movs	r1, #2
 80074e8:	4618      	mov	r0, r3
 80074ea:	f001 fc9d 	bl	8008e28 <RCCEx_PLL3_Config>
 80074ee:	4603      	mov	r3, r0
 80074f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80074f4:	e00a      	b.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074fc:	e006      	b.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80074fe:	bf00      	nop
 8007500:	e004      	b.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007502:	bf00      	nop
 8007504:	e002      	b.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007506:	bf00      	nop
 8007508:	e000      	b.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800750a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800750c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10b      	bne.n	800752c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007514:	4ba0      	ldr	r3, [pc, #640]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007518:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800751c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007520:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007524:	4a9c      	ldr	r2, [pc, #624]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007526:	430b      	orrs	r3, r1
 8007528:	6593      	str	r3, [r2, #88]	@ 0x58
 800752a:	e003      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800752c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007530:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753c:	f002 0308 	and.w	r3, r2, #8
 8007540:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007544:	2300      	movs	r3, #0
 8007546:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800754a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800754e:	460b      	mov	r3, r1
 8007550:	4313      	orrs	r3, r2
 8007552:	d01e      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007558:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800755c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007560:	d10c      	bne.n	800757c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007566:	3328      	adds	r3, #40	@ 0x28
 8007568:	2102      	movs	r1, #2
 800756a:	4618      	mov	r0, r3
 800756c:	f001 fc5c 	bl	8008e28 <RCCEx_PLL3_Config>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d002      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800757c:	4b86      	ldr	r3, [pc, #536]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800757e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007580:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800758c:	4a82      	ldr	r2, [pc, #520]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800758e:	430b      	orrs	r3, r1
 8007590:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759a:	f002 0310 	and.w	r3, r2, #16
 800759e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075a2:	2300      	movs	r3, #0
 80075a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075a8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80075ac:	460b      	mov	r3, r1
 80075ae:	4313      	orrs	r3, r2
 80075b0:	d01e      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80075b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075be:	d10c      	bne.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80075c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c4:	3328      	adds	r3, #40	@ 0x28
 80075c6:	2102      	movs	r1, #2
 80075c8:	4618      	mov	r0, r3
 80075ca:	f001 fc2d 	bl	8008e28 <RCCEx_PLL3_Config>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075da:	4b6f      	ldr	r3, [pc, #444]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80075dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80075e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075ea:	4a6b      	ldr	r2, [pc, #428]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80075ec:	430b      	orrs	r3, r1
 80075ee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80075fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075fe:	2300      	movs	r3, #0
 8007600:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007602:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007606:	460b      	mov	r3, r1
 8007608:	4313      	orrs	r3, r2
 800760a:	d03e      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800760c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007610:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007618:	d022      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800761a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800761e:	d81b      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007620:	2b00      	cmp	r3, #0
 8007622:	d003      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007628:	d00b      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800762a:	e015      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800762c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007630:	3308      	adds	r3, #8
 8007632:	2100      	movs	r1, #0
 8007634:	4618      	mov	r0, r3
 8007636:	f001 fb45 	bl	8008cc4 <RCCEx_PLL2_Config>
 800763a:	4603      	mov	r3, r0
 800763c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007640:	e00f      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007646:	3328      	adds	r3, #40	@ 0x28
 8007648:	2102      	movs	r1, #2
 800764a:	4618      	mov	r0, r3
 800764c:	f001 fbec 	bl	8008e28 <RCCEx_PLL3_Config>
 8007650:	4603      	mov	r3, r0
 8007652:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007656:	e004      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800765e:	e000      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007662:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10b      	bne.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800766a:	4b4b      	ldr	r3, [pc, #300]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800766c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800766e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007676:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800767a:	4a47      	ldr	r2, [pc, #284]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800767c:	430b      	orrs	r3, r1
 800767e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007680:	e003      	b.n	800768a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007682:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007686:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800768a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007692:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007696:	673b      	str	r3, [r7, #112]	@ 0x70
 8007698:	2300      	movs	r3, #0
 800769a:	677b      	str	r3, [r7, #116]	@ 0x74
 800769c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80076a0:	460b      	mov	r3, r1
 80076a2:	4313      	orrs	r3, r2
 80076a4:	d03b      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80076a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80076b2:	d01f      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80076b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80076b8:	d818      	bhi.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80076ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076be:	d003      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80076c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076c4:	d007      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80076c6:	e011      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076c8:	4b33      	ldr	r3, [pc, #204]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076cc:	4a32      	ldr	r2, [pc, #200]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80076d4:	e00f      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076da:	3328      	adds	r3, #40	@ 0x28
 80076dc:	2101      	movs	r1, #1
 80076de:	4618      	mov	r0, r3
 80076e0:	f001 fba2 	bl	8008e28 <RCCEx_PLL3_Config>
 80076e4:	4603      	mov	r3, r0
 80076e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80076ea:	e004      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076f2:	e000      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80076f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10b      	bne.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076fe:	4b26      	ldr	r3, [pc, #152]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007702:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800770a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800770e:	4a22      	ldr	r2, [pc, #136]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007710:	430b      	orrs	r3, r1
 8007712:	6553      	str	r3, [r2, #84]	@ 0x54
 8007714:	e003      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007716:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800771a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800771e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007726:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800772a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800772c:	2300      	movs	r3, #0
 800772e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007730:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007734:	460b      	mov	r3, r1
 8007736:	4313      	orrs	r3, r2
 8007738:	d034      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800773a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800773e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007740:	2b00      	cmp	r3, #0
 8007742:	d003      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007748:	d007      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800774a:	e011      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800774c:	4b12      	ldr	r3, [pc, #72]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800774e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007750:	4a11      	ldr	r2, [pc, #68]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007756:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007758:	e00e      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800775a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800775e:	3308      	adds	r3, #8
 8007760:	2102      	movs	r1, #2
 8007762:	4618      	mov	r0, r3
 8007764:	f001 faae 	bl	8008cc4 <RCCEx_PLL2_Config>
 8007768:	4603      	mov	r3, r0
 800776a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800776e:	e003      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007778:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10d      	bne.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007780:	4b05      	ldr	r3, [pc, #20]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007784:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800778c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800778e:	4a02      	ldr	r2, [pc, #8]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007790:	430b      	orrs	r3, r1
 8007792:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007794:	e006      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007796:	bf00      	nop
 8007798:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800779c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80077a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80077b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80077b2:	2300      	movs	r3, #0
 80077b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80077b6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80077ba:	460b      	mov	r3, r1
 80077bc:	4313      	orrs	r3, r2
 80077be:	d00c      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80077c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c4:	3328      	adds	r3, #40	@ 0x28
 80077c6:	2102      	movs	r1, #2
 80077c8:	4618      	mov	r0, r3
 80077ca:	f001 fb2d 	bl	8008e28 <RCCEx_PLL3_Config>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d002      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80077da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80077e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077e8:	2300      	movs	r3, #0
 80077ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077ec:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80077f0:	460b      	mov	r3, r1
 80077f2:	4313      	orrs	r3, r2
 80077f4:	d036      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80077f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007800:	d018      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007802:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007806:	d811      	bhi.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800780c:	d014      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800780e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007812:	d80b      	bhi.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007814:	2b00      	cmp	r3, #0
 8007816:	d011      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007818:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800781c:	d106      	bne.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800781e:	4bb7      	ldr	r3, [pc, #732]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007822:	4ab6      	ldr	r2, [pc, #728]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007828:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800782a:	e008      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007832:	e004      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007834:	bf00      	nop
 8007836:	e002      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007838:	bf00      	nop
 800783a:	e000      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800783c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800783e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10a      	bne.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007846:	4bad      	ldr	r3, [pc, #692]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800784a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800784e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007852:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007854:	4aa9      	ldr	r2, [pc, #676]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007856:	430b      	orrs	r3, r1
 8007858:	6553      	str	r3, [r2, #84]	@ 0x54
 800785a:	e003      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800785c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007860:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007870:	653b      	str	r3, [r7, #80]	@ 0x50
 8007872:	2300      	movs	r3, #0
 8007874:	657b      	str	r3, [r7, #84]	@ 0x54
 8007876:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800787a:	460b      	mov	r3, r1
 800787c:	4313      	orrs	r3, r2
 800787e:	d009      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007880:	4b9e      	ldr	r3, [pc, #632]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007884:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800788c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800788e:	4a9b      	ldr	r2, [pc, #620]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007890:	430b      	orrs	r3, r1
 8007892:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80078a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078a2:	2300      	movs	r3, #0
 80078a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078a6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80078aa:	460b      	mov	r3, r1
 80078ac:	4313      	orrs	r3, r2
 80078ae:	d009      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80078b0:	4b92      	ldr	r3, [pc, #584]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078b4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80078b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80078be:	4a8f      	ldr	r2, [pc, #572]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078c0:	430b      	orrs	r3, r1
 80078c2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80078c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078cc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80078d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80078d2:	2300      	movs	r3, #0
 80078d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80078d6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80078da:	460b      	mov	r3, r1
 80078dc:	4313      	orrs	r3, r2
 80078de:	d00e      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80078e0:	4b86      	ldr	r3, [pc, #536]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	4a85      	ldr	r2, [pc, #532]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80078ea:	6113      	str	r3, [r2, #16]
 80078ec:	4b83      	ldr	r3, [pc, #524]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078ee:	6919      	ldr	r1, [r3, #16]
 80078f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80078f8:	4a80      	ldr	r2, [pc, #512]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078fa:	430b      	orrs	r3, r1
 80078fc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80078fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800790a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800790c:	2300      	movs	r3, #0
 800790e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007910:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007914:	460b      	mov	r3, r1
 8007916:	4313      	orrs	r3, r2
 8007918:	d009      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800791a:	4b78      	ldr	r3, [pc, #480]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800791c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800791e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007928:	4a74      	ldr	r2, [pc, #464]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800792a:	430b      	orrs	r3, r1
 800792c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800792e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800793a:	633b      	str	r3, [r7, #48]	@ 0x30
 800793c:	2300      	movs	r3, #0
 800793e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007940:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007944:	460b      	mov	r3, r1
 8007946:	4313      	orrs	r3, r2
 8007948:	d00a      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800794a:	4b6c      	ldr	r3, [pc, #432]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800794c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800794e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800795a:	4a68      	ldr	r2, [pc, #416]	@ (8007afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800795c:	430b      	orrs	r3, r1
 800795e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007968:	2100      	movs	r1, #0
 800796a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007972:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007976:	460b      	mov	r3, r1
 8007978:	4313      	orrs	r3, r2
 800797a:	d011      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800797c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007980:	3308      	adds	r3, #8
 8007982:	2100      	movs	r1, #0
 8007984:	4618      	mov	r0, r3
 8007986:	f001 f99d 	bl	8008cc4 <RCCEx_PLL2_Config>
 800798a:	4603      	mov	r3, r0
 800798c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007990:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007994:	2b00      	cmp	r3, #0
 8007996:	d003      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007998:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800799c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80079a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a8:	2100      	movs	r1, #0
 80079aa:	6239      	str	r1, [r7, #32]
 80079ac:	f003 0302 	and.w	r3, r3, #2
 80079b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80079b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80079b6:	460b      	mov	r3, r1
 80079b8:	4313      	orrs	r3, r2
 80079ba:	d011      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c0:	3308      	adds	r3, #8
 80079c2:	2101      	movs	r1, #1
 80079c4:	4618      	mov	r0, r3
 80079c6:	f001 f97d 	bl	8008cc4 <RCCEx_PLL2_Config>
 80079ca:	4603      	mov	r3, r0
 80079cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80079d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80079e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	2100      	movs	r1, #0
 80079ea:	61b9      	str	r1, [r7, #24]
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	61fb      	str	r3, [r7, #28]
 80079f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80079f6:	460b      	mov	r3, r1
 80079f8:	4313      	orrs	r3, r2
 80079fa:	d011      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a00:	3308      	adds	r3, #8
 8007a02:	2102      	movs	r1, #2
 8007a04:	4618      	mov	r0, r3
 8007a06:	f001 f95d 	bl	8008cc4 <RCCEx_PLL2_Config>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007a10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d003      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a28:	2100      	movs	r1, #0
 8007a2a:	6139      	str	r1, [r7, #16]
 8007a2c:	f003 0308 	and.w	r3, r3, #8
 8007a30:	617b      	str	r3, [r7, #20]
 8007a32:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007a36:	460b      	mov	r3, r1
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	d011      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a40:	3328      	adds	r3, #40	@ 0x28
 8007a42:	2100      	movs	r1, #0
 8007a44:	4618      	mov	r0, r3
 8007a46:	f001 f9ef 	bl	8008e28 <RCCEx_PLL3_Config>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007a50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a68:	2100      	movs	r1, #0
 8007a6a:	60b9      	str	r1, [r7, #8]
 8007a6c:	f003 0310 	and.w	r3, r3, #16
 8007a70:	60fb      	str	r3, [r7, #12]
 8007a72:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007a76:	460b      	mov	r3, r1
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	d011      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a80:	3328      	adds	r3, #40	@ 0x28
 8007a82:	2101      	movs	r1, #1
 8007a84:	4618      	mov	r0, r3
 8007a86:	f001 f9cf 	bl	8008e28 <RCCEx_PLL3_Config>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007a90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d003      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	6039      	str	r1, [r7, #0]
 8007aac:	f003 0320 	and.w	r3, r3, #32
 8007ab0:	607b      	str	r3, [r7, #4]
 8007ab2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	d011      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ac0:	3328      	adds	r3, #40	@ 0x28
 8007ac2:	2102      	movs	r1, #2
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f001 f9af 	bl	8008e28 <RCCEx_PLL3_Config>
 8007aca:	4603      	mov	r3, r0
 8007acc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007ad0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d003      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007adc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007ae0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d101      	bne.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	e000      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007af4:	46bd      	mov	sp, r7
 8007af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007afa:	bf00      	nop
 8007afc:	58024400 	.word	0x58024400

08007b00 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b090      	sub	sp, #64	@ 0x40
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b0e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007b12:	430b      	orrs	r3, r1
 8007b14:	f040 8094 	bne.w	8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007b18:	4b9b      	ldr	r3, [pc, #620]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b1c:	f003 0307 	and.w	r3, r3, #7
 8007b20:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b24:	2b04      	cmp	r3, #4
 8007b26:	f200 8087 	bhi.w	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b30:	08007b45 	.word	0x08007b45
 8007b34:	08007b6d 	.word	0x08007b6d
 8007b38:	08007b95 	.word	0x08007b95
 8007b3c:	08007c31 	.word	0x08007c31
 8007b40:	08007bbd 	.word	0x08007bbd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b44:	4b90      	ldr	r3, [pc, #576]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b50:	d108      	bne.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 ff62 	bl	8008a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b60:	f000 bc93 	b.w	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b64:	2300      	movs	r3, #0
 8007b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b68:	f000 bc8f 	b.w	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b6c:	4b86      	ldr	r3, [pc, #536]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b78:	d108      	bne.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b7a:	f107 0318 	add.w	r3, r7, #24
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 fca6 	bl	80084d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b88:	f000 bc7f 	b.w	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b90:	f000 bc7b 	b.w	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b94:	4b7c      	ldr	r3, [pc, #496]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ba0:	d108      	bne.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ba2:	f107 030c 	add.w	r3, r7, #12
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 fde6 	bl	8008778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bb0:	f000 bc6b 	b.w	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bb8:	f000 bc67 	b.w	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007bbc:	4b72      	ldr	r3, [pc, #456]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007bc4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007bc6:	4b70      	ldr	r3, [pc, #448]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0304 	and.w	r3, r3, #4
 8007bce:	2b04      	cmp	r3, #4
 8007bd0:	d10c      	bne.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d109      	bne.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bd8:	4b6b      	ldr	r3, [pc, #428]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	08db      	lsrs	r3, r3, #3
 8007bde:	f003 0303 	and.w	r3, r3, #3
 8007be2:	4a6a      	ldr	r2, [pc, #424]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007be4:	fa22 f303 	lsr.w	r3, r2, r3
 8007be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bea:	e01f      	b.n	8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007bec:	4b66      	ldr	r3, [pc, #408]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bf8:	d106      	bne.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c00:	d102      	bne.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c02:	4b63      	ldr	r3, [pc, #396]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c06:	e011      	b.n	8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c08:	4b5f      	ldr	r3, [pc, #380]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c14:	d106      	bne.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c1c:	d102      	bne.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c1e:	4b5d      	ldr	r3, [pc, #372]	@ (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c22:	e003      	b.n	8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c24:	2300      	movs	r3, #0
 8007c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007c28:	f000 bc2f 	b.w	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007c2c:	f000 bc2d 	b.w	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c30:	4b59      	ldr	r3, [pc, #356]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c34:	f000 bc29 	b.w	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c3c:	f000 bc25 	b.w	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c44:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007c48:	430b      	orrs	r3, r1
 8007c4a:	f040 80a7 	bne.w	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007c4e:	4b4e      	ldr	r3, [pc, #312]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c52:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007c56:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c5e:	d054      	beq.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c66:	f200 808b 	bhi.w	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007c70:	f000 8083 	beq.w	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c76:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007c7a:	f200 8081 	bhi.w	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c84:	d02f      	beq.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c8c:	d878      	bhi.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d004      	beq.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c9a:	d012      	beq.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007c9c:	e070      	b.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c9e:	4b3a      	ldr	r3, [pc, #232]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ca6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007caa:	d107      	bne.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f000 feb5 	bl	8008a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cba:	e3e6      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cc0:	e3e3      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cc2:	4b31      	ldr	r3, [pc, #196]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cce:	d107      	bne.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cd0:	f107 0318 	add.w	r3, r7, #24
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f000 fbfb 	bl	80084d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cde:	e3d4      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ce4:	e3d1      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ce6:	4b28      	ldr	r3, [pc, #160]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007cee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cf2:	d107      	bne.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cf4:	f107 030c 	add.w	r3, r7, #12
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 fd3d 	bl	8008778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d02:	e3c2      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d04:	2300      	movs	r3, #0
 8007d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d08:	e3bf      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007d12:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d14:	4b1c      	ldr	r3, [pc, #112]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0304 	and.w	r3, r3, #4
 8007d1c:	2b04      	cmp	r3, #4
 8007d1e:	d10c      	bne.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8007d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d109      	bne.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d26:	4b18      	ldr	r3, [pc, #96]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	08db      	lsrs	r3, r3, #3
 8007d2c:	f003 0303 	and.w	r3, r3, #3
 8007d30:	4a16      	ldr	r2, [pc, #88]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007d32:	fa22 f303 	lsr.w	r3, r2, r3
 8007d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d38:	e01e      	b.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d3a:	4b13      	ldr	r3, [pc, #76]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d46:	d106      	bne.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d4e:	d102      	bne.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d50:	4b0f      	ldr	r3, [pc, #60]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d54:	e010      	b.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d56:	4b0c      	ldr	r3, [pc, #48]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d62:	d106      	bne.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d6a:	d102      	bne.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007d6c:	4b09      	ldr	r3, [pc, #36]	@ (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d70:	e002      	b.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007d72:	2300      	movs	r3, #0
 8007d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007d76:	e388      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007d78:	e387      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007d7a:	4b07      	ldr	r3, [pc, #28]	@ (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d7e:	e384      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007d80:	2300      	movs	r3, #0
 8007d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d84:	e381      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007d86:	bf00      	nop
 8007d88:	58024400 	.word	0x58024400
 8007d8c:	03d09000 	.word	0x03d09000
 8007d90:	003d0900 	.word	0x003d0900
 8007d94:	007a1200 	.word	0x007a1200
 8007d98:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007d9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007da0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007da4:	430b      	orrs	r3, r1
 8007da6:	f040 809c 	bne.w	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007daa:	4b9e      	ldr	r3, [pc, #632]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dae:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007db2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007dba:	d054      	beq.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dbe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007dc2:	f200 808b 	bhi.w	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007dcc:	f000 8083 	beq.w	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007dd6:	f200 8081 	bhi.w	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ddc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007de0:	d02f      	beq.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007de8:	d878      	bhi.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d004      	beq.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007df6:	d012      	beq.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007df8:	e070      	b.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007dfa:	4b8a      	ldr	r3, [pc, #552]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e06:	d107      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 fe07 	bl	8008a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e16:	e338      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e1c:	e335      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e1e:	4b81      	ldr	r3, [pc, #516]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e2a:	d107      	bne.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e2c:	f107 0318 	add.w	r3, r7, #24
 8007e30:	4618      	mov	r0, r3
 8007e32:	f000 fb4d 	bl	80084d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e3a:	e326      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e40:	e323      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e42:	4b78      	ldr	r3, [pc, #480]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e4e:	d107      	bne.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e50:	f107 030c 	add.w	r3, r7, #12
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 fc8f 	bl	8008778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e5e:	e314      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e60:	2300      	movs	r3, #0
 8007e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e64:	e311      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e66:	4b6f      	ldr	r3, [pc, #444]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e6e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e70:	4b6c      	ldr	r3, [pc, #432]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0304 	and.w	r3, r3, #4
 8007e78:	2b04      	cmp	r3, #4
 8007e7a:	d10c      	bne.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d109      	bne.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e82:	4b68      	ldr	r3, [pc, #416]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	08db      	lsrs	r3, r3, #3
 8007e88:	f003 0303 	and.w	r3, r3, #3
 8007e8c:	4a66      	ldr	r2, [pc, #408]	@ (8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e94:	e01e      	b.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e96:	4b63      	ldr	r3, [pc, #396]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ea2:	d106      	bne.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ea6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007eaa:	d102      	bne.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007eac:	4b5f      	ldr	r3, [pc, #380]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007eb0:	e010      	b.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007eb2:	4b5c      	ldr	r3, [pc, #368]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ebe:	d106      	bne.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8007ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ec2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ec6:	d102      	bne.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007ec8:	4b59      	ldr	r3, [pc, #356]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ecc:	e002      	b.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007ed2:	e2da      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007ed4:	e2d9      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ed6:	4b57      	ldr	r3, [pc, #348]	@ (8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eda:	e2d6      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007edc:	2300      	movs	r3, #0
 8007ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ee0:	e2d3      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ee6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007eea:	430b      	orrs	r3, r1
 8007eec:	f040 80a7 	bne.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007ef0:	4b4c      	ldr	r3, [pc, #304]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ef4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007ef8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f00:	d055      	beq.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8007f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f08:	f200 8096 	bhi.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f12:	f000 8084 	beq.w	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8007f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f1c:	f200 808c 	bhi.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f26:	d030      	beq.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f2e:	f200 8083 	bhi.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d004      	beq.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8007f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f3e:	d012      	beq.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007f40:	e07a      	b.n	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f42:	4b38      	ldr	r3, [pc, #224]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f4e:	d107      	bne.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 fd63 	bl	8008a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f5e:	e294      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f64:	e291      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f66:	4b2f      	ldr	r3, [pc, #188]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f72:	d107      	bne.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f74:	f107 0318 	add.w	r3, r7, #24
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 faa9 	bl	80084d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f82:	e282      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f84:	2300      	movs	r3, #0
 8007f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f88:	e27f      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f8a:	4b26      	ldr	r3, [pc, #152]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f96:	d107      	bne.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f98:	f107 030c 	add.w	r3, r7, #12
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 fbeb 	bl	8008778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fa6:	e270      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fac:	e26d      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fae:	4b1d      	ldr	r3, [pc, #116]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007fb6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0304 	and.w	r3, r3, #4
 8007fc0:	2b04      	cmp	r3, #4
 8007fc2:	d10c      	bne.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8007fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d109      	bne.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fca:	4b16      	ldr	r3, [pc, #88]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	08db      	lsrs	r3, r3, #3
 8007fd0:	f003 0303 	and.w	r3, r3, #3
 8007fd4:	4a14      	ldr	r2, [pc, #80]	@ (8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8007fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fdc:	e01e      	b.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fde:	4b11      	ldr	r3, [pc, #68]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fea:	d106      	bne.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ff2:	d102      	bne.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ff8:	e010      	b.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008002:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008006:	d106      	bne.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800800a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800800e:	d102      	bne.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008010:	4b07      	ldr	r3, [pc, #28]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008012:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008014:	e002      	b.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008016:	2300      	movs	r3, #0
 8008018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800801a:	e236      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800801c:	e235      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800801e:	4b05      	ldr	r3, [pc, #20]	@ (8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008022:	e232      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008024:	58024400 	.word	0x58024400
 8008028:	03d09000 	.word	0x03d09000
 800802c:	003d0900 	.word	0x003d0900
 8008030:	007a1200 	.word	0x007a1200
 8008034:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008038:	2300      	movs	r3, #0
 800803a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800803c:	e225      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800803e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008042:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008046:	430b      	orrs	r3, r1
 8008048:	f040 8085 	bne.w	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800804c:	4b9c      	ldr	r3, [pc, #624]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800804e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008050:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008054:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008058:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800805c:	d06b      	beq.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800805e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008060:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008064:	d874      	bhi.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008068:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800806c:	d056      	beq.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800806e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008070:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008074:	d86c      	bhi.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008078:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800807c:	d03b      	beq.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800807e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008080:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008084:	d864      	bhi.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008088:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800808c:	d021      	beq.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800808e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008090:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008094:	d85c      	bhi.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008098:	2b00      	cmp	r3, #0
 800809a:	d004      	beq.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800809c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080a2:	d004      	beq.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80080a4:	e054      	b.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80080a6:	f7fe fb1d 	bl	80066e4 <HAL_RCC_GetPCLK1Freq>
 80080aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80080ac:	e1ed      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080ae:	4b84      	ldr	r3, [pc, #528]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080ba:	d107      	bne.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080bc:	f107 0318 	add.w	r3, r7, #24
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 fa05 	bl	80084d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080ca:	e1de      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080cc:	2300      	movs	r3, #0
 80080ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080d0:	e1db      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080d2:	4b7b      	ldr	r3, [pc, #492]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080de:	d107      	bne.n	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080e0:	f107 030c 	add.w	r3, r7, #12
 80080e4:	4618      	mov	r0, r3
 80080e6:	f000 fb47 	bl	8008778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080ee:	e1cc      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080f0:	2300      	movs	r3, #0
 80080f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080f4:	e1c9      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080f6:	4b72      	ldr	r3, [pc, #456]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 0304 	and.w	r3, r3, #4
 80080fe:	2b04      	cmp	r3, #4
 8008100:	d109      	bne.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008102:	4b6f      	ldr	r3, [pc, #444]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	08db      	lsrs	r3, r3, #3
 8008108:	f003 0303 	and.w	r3, r3, #3
 800810c:	4a6d      	ldr	r2, [pc, #436]	@ (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800810e:	fa22 f303 	lsr.w	r3, r2, r3
 8008112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008114:	e1b9      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008116:	2300      	movs	r3, #0
 8008118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800811a:	e1b6      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800811c:	4b68      	ldr	r3, [pc, #416]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008128:	d102      	bne.n	8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800812a:	4b67      	ldr	r3, [pc, #412]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800812c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800812e:	e1ac      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008130:	2300      	movs	r3, #0
 8008132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008134:	e1a9      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008136:	4b62      	ldr	r3, [pc, #392]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800813e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008142:	d102      	bne.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008144:	4b61      	ldr	r3, [pc, #388]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008148:	e19f      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800814a:	2300      	movs	r3, #0
 800814c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800814e:	e19c      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008150:	2300      	movs	r3, #0
 8008152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008154:	e199      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008156:	e9d7 2300 	ldrd	r2, r3, [r7]
 800815a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800815e:	430b      	orrs	r3, r1
 8008160:	d173      	bne.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008162:	4b57      	ldr	r3, [pc, #348]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008166:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800816a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800816c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800816e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008172:	d02f      	beq.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008176:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800817a:	d863      	bhi.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800817c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800817e:	2b00      	cmp	r3, #0
 8008180:	d004      	beq.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008188:	d012      	beq.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800818a:	e05b      	b.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800818c:	4b4c      	ldr	r3, [pc, #304]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008194:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008198:	d107      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800819a:	f107 0318 	add.w	r3, r7, #24
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 f996 	bl	80084d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081a8:	e16f      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081aa:	2300      	movs	r3, #0
 80081ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081ae:	e16c      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081b0:	4b43      	ldr	r3, [pc, #268]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081bc:	d107      	bne.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081be:	f107 030c 	add.w	r3, r7, #12
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 fad8 	bl	8008778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081cc:	e15d      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081ce:	2300      	movs	r3, #0
 80081d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081d2:	e15a      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80081d4:	4b3a      	ldr	r3, [pc, #232]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80081d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80081dc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081de:	4b38      	ldr	r3, [pc, #224]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0304 	and.w	r3, r3, #4
 80081e6:	2b04      	cmp	r3, #4
 80081e8:	d10c      	bne.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80081ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d109      	bne.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081f0:	4b33      	ldr	r3, [pc, #204]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	08db      	lsrs	r3, r3, #3
 80081f6:	f003 0303 	and.w	r3, r3, #3
 80081fa:	4a32      	ldr	r2, [pc, #200]	@ (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80081fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008200:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008202:	e01e      	b.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008204:	4b2e      	ldr	r3, [pc, #184]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800820c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008210:	d106      	bne.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008214:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008218:	d102      	bne.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800821a:	4b2b      	ldr	r3, [pc, #172]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800821c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800821e:	e010      	b.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008220:	4b27      	ldr	r3, [pc, #156]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008228:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800822c:	d106      	bne.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800822e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008234:	d102      	bne.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008236:	4b25      	ldr	r3, [pc, #148]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008238:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800823a:	e002      	b.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800823c:	2300      	movs	r3, #0
 800823e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008240:	e123      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008242:	e122      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008248:	e11f      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800824a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800824e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008252:	430b      	orrs	r3, r1
 8008254:	d13c      	bne.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008256:	4b1a      	ldr	r3, [pc, #104]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800825a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800825e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008262:	2b00      	cmp	r3, #0
 8008264:	d004      	beq.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800826c:	d012      	beq.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800826e:	e023      	b.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008270:	4b13      	ldr	r3, [pc, #76]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008278:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800827c:	d107      	bne.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800827e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008282:	4618      	mov	r0, r3
 8008284:	f000 fbcc 	bl	8008a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800828c:	e0fd      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800828e:	2300      	movs	r3, #0
 8008290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008292:	e0fa      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008294:	4b0a      	ldr	r3, [pc, #40]	@ (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800829c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082a0:	d107      	bne.n	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082a2:	f107 0318 	add.w	r3, r7, #24
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 f912 	bl	80084d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082b0:	e0eb      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80082b2:	2300      	movs	r3, #0
 80082b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082b6:	e0e8      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082bc:	e0e5      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80082be:	bf00      	nop
 80082c0:	58024400 	.word	0x58024400
 80082c4:	03d09000 	.word	0x03d09000
 80082c8:	003d0900 	.word	0x003d0900
 80082cc:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80082d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082d4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80082d8:	430b      	orrs	r3, r1
 80082da:	f040 8085 	bne.w	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80082de:	4b6d      	ldr	r3, [pc, #436]	@ (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80082e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082e2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80082e6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80082e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80082ee:	d06b      	beq.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80082f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80082f6:	d874      	bhi.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80082f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082fe:	d056      	beq.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008306:	d86c      	bhi.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800830a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800830e:	d03b      	beq.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008312:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008316:	d864      	bhi.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800831e:	d021      	beq.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008322:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008326:	d85c      	bhi.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800832a:	2b00      	cmp	r3, #0
 800832c:	d004      	beq.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800832e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008330:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008334:	d004      	beq.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008336:	e054      	b.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008338:	f000 f8b4 	bl	80084a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800833c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800833e:	e0a4      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008340:	4b54      	ldr	r3, [pc, #336]	@ (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008348:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800834c:	d107      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800834e:	f107 0318 	add.w	r3, r7, #24
 8008352:	4618      	mov	r0, r3
 8008354:	f000 f8bc 	bl	80084d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800835c:	e095      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008362:	e092      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008364:	4b4b      	ldr	r3, [pc, #300]	@ (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800836c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008370:	d107      	bne.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008372:	f107 030c 	add.w	r3, r7, #12
 8008376:	4618      	mov	r0, r3
 8008378:	f000 f9fe 	bl	8008778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008380:	e083      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008382:	2300      	movs	r3, #0
 8008384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008386:	e080      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008388:	4b42      	ldr	r3, [pc, #264]	@ (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0304 	and.w	r3, r3, #4
 8008390:	2b04      	cmp	r3, #4
 8008392:	d109      	bne.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008394:	4b3f      	ldr	r3, [pc, #252]	@ (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	08db      	lsrs	r3, r3, #3
 800839a:	f003 0303 	and.w	r3, r3, #3
 800839e:	4a3e      	ldr	r2, [pc, #248]	@ (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80083a0:	fa22 f303 	lsr.w	r3, r2, r3
 80083a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083a6:	e070      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083a8:	2300      	movs	r3, #0
 80083aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ac:	e06d      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80083ae:	4b39      	ldr	r3, [pc, #228]	@ (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083ba:	d102      	bne.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80083bc:	4b37      	ldr	r3, [pc, #220]	@ (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80083be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083c0:	e063      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083c2:	2300      	movs	r3, #0
 80083c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083c6:	e060      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80083c8:	4b32      	ldr	r3, [pc, #200]	@ (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083d4:	d102      	bne.n	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 80083d6:	4b32      	ldr	r3, [pc, #200]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80083d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083da:	e056      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083dc:	2300      	movs	r3, #0
 80083de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083e0:	e053      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083e6:	e050      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80083e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083ec:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80083f0:	430b      	orrs	r3, r1
 80083f2:	d148      	bne.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80083f4:	4b27      	ldr	r3, [pc, #156]	@ (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80083f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80083fc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80083fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008400:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008404:	d02a      	beq.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008408:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800840c:	d838      	bhi.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800840e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008410:	2b00      	cmp	r3, #0
 8008412:	d004      	beq.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008416:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800841a:	d00d      	beq.n	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800841c:	e030      	b.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800841e:	4b1d      	ldr	r3, [pc, #116]	@ (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008426:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800842a:	d102      	bne.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800842c:	4b1c      	ldr	r3, [pc, #112]	@ (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800842e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008430:	e02b      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008432:	2300      	movs	r3, #0
 8008434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008436:	e028      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008438:	4b16      	ldr	r3, [pc, #88]	@ (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008440:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008444:	d107      	bne.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008446:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800844a:	4618      	mov	r0, r3
 800844c:	f000 fae8 	bl	8008a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008454:	e019      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008456:	2300      	movs	r3, #0
 8008458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800845a:	e016      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800845c:	4b0d      	ldr	r3, [pc, #52]	@ (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008464:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008468:	d107      	bne.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800846a:	f107 0318 	add.w	r3, r7, #24
 800846e:	4618      	mov	r0, r3
 8008470:	f000 f82e 	bl	80084d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008478:	e007      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800847a:	2300      	movs	r3, #0
 800847c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800847e:	e004      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008480:	2300      	movs	r3, #0
 8008482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008484:	e001      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800848a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800848c:	4618      	mov	r0, r3
 800848e:	3740      	adds	r7, #64	@ 0x40
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	58024400 	.word	0x58024400
 8008498:	03d09000 	.word	0x03d09000
 800849c:	003d0900 	.word	0x003d0900
 80084a0:	007a1200 	.word	0x007a1200

080084a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80084a8:	f7fe f8ec 	bl	8006684 <HAL_RCC_GetHCLKFreq>
 80084ac:	4602      	mov	r2, r0
 80084ae:	4b06      	ldr	r3, [pc, #24]	@ (80084c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	091b      	lsrs	r3, r3, #4
 80084b4:	f003 0307 	and.w	r3, r3, #7
 80084b8:	4904      	ldr	r1, [pc, #16]	@ (80084cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80084ba:	5ccb      	ldrb	r3, [r1, r3]
 80084bc:	f003 031f 	and.w	r3, r3, #31
 80084c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	58024400 	.word	0x58024400
 80084cc:	08026cb0 	.word	0x08026cb0

080084d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b089      	sub	sp, #36	@ 0x24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084d8:	4ba1      	ldr	r3, [pc, #644]	@ (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084dc:	f003 0303 	and.w	r3, r3, #3
 80084e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80084e2:	4b9f      	ldr	r3, [pc, #636]	@ (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e6:	0b1b      	lsrs	r3, r3, #12
 80084e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80084ee:	4b9c      	ldr	r3, [pc, #624]	@ (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f2:	091b      	lsrs	r3, r3, #4
 80084f4:	f003 0301 	and.w	r3, r3, #1
 80084f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80084fa:	4b99      	ldr	r3, [pc, #612]	@ (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084fe:	08db      	lsrs	r3, r3, #3
 8008500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	fb02 f303 	mul.w	r3, r2, r3
 800850a:	ee07 3a90 	vmov	s15, r3
 800850e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008512:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 8111 	beq.w	8008740 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	2b02      	cmp	r3, #2
 8008522:	f000 8083 	beq.w	800862c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	2b02      	cmp	r3, #2
 800852a:	f200 80a1 	bhi.w	8008670 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d003      	beq.n	800853c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d056      	beq.n	80085e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800853a:	e099      	b.n	8008670 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800853c:	4b88      	ldr	r3, [pc, #544]	@ (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 0320 	and.w	r3, r3, #32
 8008544:	2b00      	cmp	r3, #0
 8008546:	d02d      	beq.n	80085a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008548:	4b85      	ldr	r3, [pc, #532]	@ (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	08db      	lsrs	r3, r3, #3
 800854e:	f003 0303 	and.w	r3, r3, #3
 8008552:	4a84      	ldr	r2, [pc, #528]	@ (8008764 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008554:	fa22 f303 	lsr.w	r3, r2, r3
 8008558:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	ee07 3a90 	vmov	s15, r3
 8008560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	ee07 3a90 	vmov	s15, r3
 800856a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800856e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008572:	4b7b      	ldr	r3, [pc, #492]	@ (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800857a:	ee07 3a90 	vmov	s15, r3
 800857e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008582:	ed97 6a03 	vldr	s12, [r7, #12]
 8008586:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800858a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800858e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800859a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800859e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80085a2:	e087      	b.n	80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	ee07 3a90 	vmov	s15, r3
 80085aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800876c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80085b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085b6:	4b6a      	ldr	r3, [pc, #424]	@ (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085be:	ee07 3a90 	vmov	s15, r3
 80085c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80085ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085e6:	e065      	b.n	80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	ee07 3a90 	vmov	s15, r3
 80085ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80085f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085fa:	4b59      	ldr	r3, [pc, #356]	@ (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008602:	ee07 3a90 	vmov	s15, r3
 8008606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800860a:	ed97 6a03 	vldr	s12, [r7, #12]
 800860e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800861a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800861e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800862a:	e043      	b.n	80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	ee07 3a90 	vmov	s15, r3
 8008632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008636:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008774 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800863a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800863e:	4b48      	ldr	r3, [pc, #288]	@ (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008646:	ee07 3a90 	vmov	s15, r3
 800864a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800864e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008652:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800865a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800865e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800866a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800866e:	e021      	b.n	80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	ee07 3a90 	vmov	s15, r3
 8008676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800867e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008682:	4b37      	ldr	r3, [pc, #220]	@ (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800868a:	ee07 3a90 	vmov	s15, r3
 800868e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008692:	ed97 6a03 	vldr	s12, [r7, #12]
 8008696:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800869a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800869e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80086b4:	4b2a      	ldr	r3, [pc, #168]	@ (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086b8:	0a5b      	lsrs	r3, r3, #9
 80086ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80086d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086da:	ee17 2a90 	vmov	r2, s15
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80086e2:	4b1f      	ldr	r3, [pc, #124]	@ (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086e6:	0c1b      	lsrs	r3, r3, #16
 80086e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086ec:	ee07 3a90 	vmov	s15, r3
 80086f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008708:	ee17 2a90 	vmov	r2, s15
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008710:	4b13      	ldr	r3, [pc, #76]	@ (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008714:	0e1b      	lsrs	r3, r3, #24
 8008716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800871a:	ee07 3a90 	vmov	s15, r3
 800871e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008722:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800872a:	edd7 6a07 	vldr	s13, [r7, #28]
 800872e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008736:	ee17 2a90 	vmov	r2, s15
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800873e:	e008      	b.n	8008752 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	609a      	str	r2, [r3, #8]
}
 8008752:	bf00      	nop
 8008754:	3724      	adds	r7, #36	@ 0x24
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	58024400 	.word	0x58024400
 8008764:	03d09000 	.word	0x03d09000
 8008768:	46000000 	.word	0x46000000
 800876c:	4c742400 	.word	0x4c742400
 8008770:	4a742400 	.word	0x4a742400
 8008774:	4af42400 	.word	0x4af42400

08008778 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008778:	b480      	push	{r7}
 800877a:	b089      	sub	sp, #36	@ 0x24
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008780:	4ba1      	ldr	r3, [pc, #644]	@ (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008784:	f003 0303 	and.w	r3, r3, #3
 8008788:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800878a:	4b9f      	ldr	r3, [pc, #636]	@ (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800878c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800878e:	0d1b      	lsrs	r3, r3, #20
 8008790:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008794:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008796:	4b9c      	ldr	r3, [pc, #624]	@ (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800879a:	0a1b      	lsrs	r3, r3, #8
 800879c:	f003 0301 	and.w	r3, r3, #1
 80087a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80087a2:	4b99      	ldr	r3, [pc, #612]	@ (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087a6:	08db      	lsrs	r3, r3, #3
 80087a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	fb02 f303 	mul.w	r3, r2, r3
 80087b2:	ee07 3a90 	vmov	s15, r3
 80087b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 8111 	beq.w	80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	f000 8083 	beq.w	80088d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	f200 80a1 	bhi.w	8008918 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d003      	beq.n	80087e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d056      	beq.n	8008890 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80087e2:	e099      	b.n	8008918 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087e4:	4b88      	ldr	r3, [pc, #544]	@ (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0320 	and.w	r3, r3, #32
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d02d      	beq.n	800884c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087f0:	4b85      	ldr	r3, [pc, #532]	@ (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	08db      	lsrs	r3, r3, #3
 80087f6:	f003 0303 	and.w	r3, r3, #3
 80087fa:	4a84      	ldr	r2, [pc, #528]	@ (8008a0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80087fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008800:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	ee07 3a90 	vmov	s15, r3
 8008808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	ee07 3a90 	vmov	s15, r3
 8008812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800881a:	4b7b      	ldr	r3, [pc, #492]	@ (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800881c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800881e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008822:	ee07 3a90 	vmov	s15, r3
 8008826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800882a:	ed97 6a03 	vldr	s12, [r7, #12]
 800882e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800883a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800883e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008846:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800884a:	e087      	b.n	800895c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	ee07 3a90 	vmov	s15, r3
 8008852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008856:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008a14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800885a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800885e:	4b6a      	ldr	r3, [pc, #424]	@ (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008866:	ee07 3a90 	vmov	s15, r3
 800886a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800886e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008872:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800887a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800887e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800888a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800888e:	e065      	b.n	800895c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	ee07 3a90 	vmov	s15, r3
 8008896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800889a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800889e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088a2:	4b59      	ldr	r3, [pc, #356]	@ (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088aa:	ee07 3a90 	vmov	s15, r3
 80088ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088b6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80088ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088d2:	e043      	b.n	800895c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	ee07 3a90 	vmov	s15, r3
 80088da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088de:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008a1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80088e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088e6:	4b48      	ldr	r3, [pc, #288]	@ (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ee:	ee07 3a90 	vmov	s15, r3
 80088f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80088fa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80088fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800890a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800890e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008916:	e021      	b.n	800895c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	ee07 3a90 	vmov	s15, r3
 800891e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008922:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800892a:	4b37      	ldr	r3, [pc, #220]	@ (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800892c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800892e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008932:	ee07 3a90 	vmov	s15, r3
 8008936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800893a:	ed97 6a03 	vldr	s12, [r7, #12]
 800893e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800894a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800894e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008956:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800895a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800895c:	4b2a      	ldr	r3, [pc, #168]	@ (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800895e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008960:	0a5b      	lsrs	r3, r3, #9
 8008962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008966:	ee07 3a90 	vmov	s15, r3
 800896a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800896e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008972:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008976:	edd7 6a07 	vldr	s13, [r7, #28]
 800897a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800897e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008982:	ee17 2a90 	vmov	r2, s15
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800898a:	4b1f      	ldr	r3, [pc, #124]	@ (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800898c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800898e:	0c1b      	lsrs	r3, r3, #16
 8008990:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008994:	ee07 3a90 	vmov	s15, r3
 8008998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800899c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80089a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089b0:	ee17 2a90 	vmov	r2, s15
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80089b8:	4b13      	ldr	r3, [pc, #76]	@ (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089bc:	0e1b      	lsrs	r3, r3, #24
 80089be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80089d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089de:	ee17 2a90 	vmov	r2, s15
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80089e6:	e008      	b.n	80089fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	609a      	str	r2, [r3, #8]
}
 80089fa:	bf00      	nop
 80089fc:	3724      	adds	r7, #36	@ 0x24
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	58024400 	.word	0x58024400
 8008a0c:	03d09000 	.word	0x03d09000
 8008a10:	46000000 	.word	0x46000000
 8008a14:	4c742400 	.word	0x4c742400
 8008a18:	4a742400 	.word	0x4a742400
 8008a1c:	4af42400 	.word	0x4af42400

08008a20 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b089      	sub	sp, #36	@ 0x24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a28:	4ba0      	ldr	r3, [pc, #640]	@ (8008cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a2c:	f003 0303 	and.w	r3, r3, #3
 8008a30:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008a32:	4b9e      	ldr	r3, [pc, #632]	@ (8008cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a36:	091b      	lsrs	r3, r3, #4
 8008a38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a3c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008a3e:	4b9b      	ldr	r3, [pc, #620]	@ (8008cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008a48:	4b98      	ldr	r3, [pc, #608]	@ (8008cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a4c:	08db      	lsrs	r3, r3, #3
 8008a4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a52:	693a      	ldr	r2, [r7, #16]
 8008a54:	fb02 f303 	mul.w	r3, r2, r3
 8008a58:	ee07 3a90 	vmov	s15, r3
 8008a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a60:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f000 8111 	beq.w	8008c8e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	f000 8083 	beq.w	8008b7a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	f200 80a1 	bhi.w	8008bbe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d056      	beq.n	8008b36 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008a88:	e099      	b.n	8008bbe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a8a:	4b88      	ldr	r3, [pc, #544]	@ (8008cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 0320 	and.w	r3, r3, #32
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d02d      	beq.n	8008af2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a96:	4b85      	ldr	r3, [pc, #532]	@ (8008cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	08db      	lsrs	r3, r3, #3
 8008a9c:	f003 0303 	and.w	r3, r3, #3
 8008aa0:	4a83      	ldr	r2, [pc, #524]	@ (8008cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	ee07 3a90 	vmov	s15, r3
 8008aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	ee07 3a90 	vmov	s15, r3
 8008ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008abc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ac0:	4b7a      	ldr	r3, [pc, #488]	@ (8008cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac8:	ee07 3a90 	vmov	s15, r3
 8008acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ad0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ad4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ad8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008adc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ae0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ae4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aec:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008af0:	e087      	b.n	8008c02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	ee07 3a90 	vmov	s15, r3
 8008af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008afc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008b00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b04:	4b69      	ldr	r3, [pc, #420]	@ (8008cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b0c:	ee07 3a90 	vmov	s15, r3
 8008b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b14:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b18:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008b1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b34:	e065      	b.n	8008c02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	ee07 3a90 	vmov	s15, r3
 8008b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b40:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008cbc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008b44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b48:	4b58      	ldr	r3, [pc, #352]	@ (8008cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b50:	ee07 3a90 	vmov	s15, r3
 8008b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b58:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b5c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008b60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b78:	e043      	b.n	8008c02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	ee07 3a90 	vmov	s15, r3
 8008b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b84:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008b88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b8c:	4b47      	ldr	r3, [pc, #284]	@ (8008cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b94:	ee07 3a90 	vmov	s15, r3
 8008b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ba0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ba4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ba8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bbc:	e021      	b.n	8008c02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	ee07 3a90 	vmov	s15, r3
 8008bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008bcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bd0:	4b36      	ldr	r3, [pc, #216]	@ (8008cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bd8:	ee07 3a90 	vmov	s15, r3
 8008bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008be0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008be4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008be8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bf0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bfc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c00:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008c02:	4b2a      	ldr	r3, [pc, #168]	@ (8008cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c06:	0a5b      	lsrs	r3, r3, #9
 8008c08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c0c:	ee07 3a90 	vmov	s15, r3
 8008c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c28:	ee17 2a90 	vmov	r2, s15
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008c30:	4b1e      	ldr	r3, [pc, #120]	@ (8008cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c34:	0c1b      	lsrs	r3, r3, #16
 8008c36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c3a:	ee07 3a90 	vmov	s15, r3
 8008c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c56:	ee17 2a90 	vmov	r2, s15
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008c5e:	4b13      	ldr	r3, [pc, #76]	@ (8008cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c62:	0e1b      	lsrs	r3, r3, #24
 8008c64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c68:	ee07 3a90 	vmov	s15, r3
 8008c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c78:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c84:	ee17 2a90 	vmov	r2, s15
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008c8c:	e008      	b.n	8008ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	609a      	str	r2, [r3, #8]
}
 8008ca0:	bf00      	nop
 8008ca2:	3724      	adds	r7, #36	@ 0x24
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	58024400 	.word	0x58024400
 8008cb0:	03d09000 	.word	0x03d09000
 8008cb4:	46000000 	.word	0x46000000
 8008cb8:	4c742400 	.word	0x4c742400
 8008cbc:	4a742400 	.word	0x4a742400
 8008cc0:	4af42400 	.word	0x4af42400

08008cc4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008cd2:	4b53      	ldr	r3, [pc, #332]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd6:	f003 0303 	and.w	r3, r3, #3
 8008cda:	2b03      	cmp	r3, #3
 8008cdc:	d101      	bne.n	8008ce2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e099      	b.n	8008e16 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a4e      	ldr	r2, [pc, #312]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008ce8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008cec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cee:	f7f8 feb9 	bl	8001a64 <HAL_GetTick>
 8008cf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008cf4:	e008      	b.n	8008d08 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008cf6:	f7f8 feb5 	bl	8001a64 <HAL_GetTick>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	d901      	bls.n	8008d08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e086      	b.n	8008e16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d08:	4b45      	ldr	r3, [pc, #276]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d1f0      	bne.n	8008cf6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008d14:	4b42      	ldr	r3, [pc, #264]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d18:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	031b      	lsls	r3, r3, #12
 8008d22:	493f      	ldr	r1, [pc, #252]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008d24:	4313      	orrs	r3, r2
 8008d26:	628b      	str	r3, [r1, #40]	@ 0x28
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	3b01      	subs	r3, #1
 8008d38:	025b      	lsls	r3, r3, #9
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	431a      	orrs	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	3b01      	subs	r3, #1
 8008d44:	041b      	lsls	r3, r3, #16
 8008d46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008d4a:	431a      	orrs	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	3b01      	subs	r3, #1
 8008d52:	061b      	lsls	r3, r3, #24
 8008d54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008d58:	4931      	ldr	r1, [pc, #196]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008d5e:	4b30      	ldr	r3, [pc, #192]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	695b      	ldr	r3, [r3, #20]
 8008d6a:	492d      	ldr	r1, [pc, #180]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008d70:	4b2b      	ldr	r3, [pc, #172]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d74:	f023 0220 	bic.w	r2, r3, #32
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	4928      	ldr	r1, [pc, #160]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008d82:	4b27      	ldr	r3, [pc, #156]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d86:	4a26      	ldr	r2, [pc, #152]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008d88:	f023 0310 	bic.w	r3, r3, #16
 8008d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008d8e:	4b24      	ldr	r3, [pc, #144]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008d90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d92:	4b24      	ldr	r3, [pc, #144]	@ (8008e24 <RCCEx_PLL2_Config+0x160>)
 8008d94:	4013      	ands	r3, r2
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	69d2      	ldr	r2, [r2, #28]
 8008d9a:	00d2      	lsls	r2, r2, #3
 8008d9c:	4920      	ldr	r1, [pc, #128]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008da2:	4b1f      	ldr	r3, [pc, #124]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da6:	4a1e      	ldr	r2, [pc, #120]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008da8:	f043 0310 	orr.w	r3, r3, #16
 8008dac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d106      	bne.n	8008dc2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008db4:	4b1a      	ldr	r3, [pc, #104]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db8:	4a19      	ldr	r2, [pc, #100]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008dba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008dbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008dc0:	e00f      	b.n	8008de2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d106      	bne.n	8008dd6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008dc8:	4b15      	ldr	r3, [pc, #84]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dcc:	4a14      	ldr	r2, [pc, #80]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008dce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008dd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008dd4:	e005      	b.n	8008de2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008dd6:	4b12      	ldr	r3, [pc, #72]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dda:	4a11      	ldr	r2, [pc, #68]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008ddc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008de0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008de2:	4b0f      	ldr	r3, [pc, #60]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a0e      	ldr	r2, [pc, #56]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008de8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008dec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dee:	f7f8 fe39 	bl	8001a64 <HAL_GetTick>
 8008df2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008df4:	e008      	b.n	8008e08 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008df6:	f7f8 fe35 	bl	8001a64 <HAL_GetTick>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d901      	bls.n	8008e08 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008e04:	2303      	movs	r3, #3
 8008e06:	e006      	b.n	8008e16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e08:	4b05      	ldr	r3, [pc, #20]	@ (8008e20 <RCCEx_PLL2_Config+0x15c>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d0f0      	beq.n	8008df6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	58024400 	.word	0x58024400
 8008e24:	ffff0007 	.word	0xffff0007

08008e28 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e32:	2300      	movs	r3, #0
 8008e34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e36:	4b53      	ldr	r3, [pc, #332]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e3a:	f003 0303 	and.w	r3, r3, #3
 8008e3e:	2b03      	cmp	r3, #3
 8008e40:	d101      	bne.n	8008e46 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e099      	b.n	8008f7a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008e46:	4b4f      	ldr	r3, [pc, #316]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a4e      	ldr	r2, [pc, #312]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008e4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e52:	f7f8 fe07 	bl	8001a64 <HAL_GetTick>
 8008e56:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e58:	e008      	b.n	8008e6c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008e5a:	f7f8 fe03 	bl	8001a64 <HAL_GetTick>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	1ad3      	subs	r3, r2, r3
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d901      	bls.n	8008e6c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e68:	2303      	movs	r3, #3
 8008e6a:	e086      	b.n	8008f7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e6c:	4b45      	ldr	r3, [pc, #276]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1f0      	bne.n	8008e5a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008e78:	4b42      	ldr	r3, [pc, #264]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e7c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	051b      	lsls	r3, r3, #20
 8008e86:	493f      	ldr	r1, [pc, #252]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	628b      	str	r3, [r1, #40]	@ 0x28
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	3b01      	subs	r3, #1
 8008e92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	025b      	lsls	r3, r3, #9
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	431a      	orrs	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	041b      	lsls	r3, r3, #16
 8008eaa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	061b      	lsls	r3, r3, #24
 8008eb8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008ebc:	4931      	ldr	r1, [pc, #196]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008ec2:	4b30      	ldr	r3, [pc, #192]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	695b      	ldr	r3, [r3, #20]
 8008ece:	492d      	ldr	r1, [pc, #180]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	4928      	ldr	r1, [pc, #160]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008ee6:	4b27      	ldr	r3, [pc, #156]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eea:	4a26      	ldr	r2, [pc, #152]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ef0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008ef2:	4b24      	ldr	r3, [pc, #144]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ef6:	4b24      	ldr	r3, [pc, #144]	@ (8008f88 <RCCEx_PLL3_Config+0x160>)
 8008ef8:	4013      	ands	r3, r2
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	69d2      	ldr	r2, [r2, #28]
 8008efe:	00d2      	lsls	r2, r2, #3
 8008f00:	4920      	ldr	r1, [pc, #128]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008f02:	4313      	orrs	r3, r2
 8008f04:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008f06:	4b1f      	ldr	r3, [pc, #124]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d106      	bne.n	8008f26 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008f18:	4b1a      	ldr	r3, [pc, #104]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f1c:	4a19      	ldr	r2, [pc, #100]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008f1e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008f22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f24:	e00f      	b.n	8008f46 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d106      	bne.n	8008f3a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008f2c:	4b15      	ldr	r3, [pc, #84]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f30:	4a14      	ldr	r2, [pc, #80]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008f32:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008f36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f38:	e005      	b.n	8008f46 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008f3a:	4b12      	ldr	r3, [pc, #72]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f3e:	4a11      	ldr	r2, [pc, #68]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008f40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f44:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008f46:	4b0f      	ldr	r3, [pc, #60]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f52:	f7f8 fd87 	bl	8001a64 <HAL_GetTick>
 8008f56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f58:	e008      	b.n	8008f6c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008f5a:	f7f8 fd83 	bl	8001a64 <HAL_GetTick>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	1ad3      	subs	r3, r2, r3
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d901      	bls.n	8008f6c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e006      	b.n	8008f7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f6c:	4b05      	ldr	r3, [pc, #20]	@ (8008f84 <RCCEx_PLL3_Config+0x15c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d0f0      	beq.n	8008f5a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	58024400 	.word	0x58024400
 8008f88:	ffff0007 	.word	0xffff0007

08008f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d101      	bne.n	8008f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e049      	b.n	8009032 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d106      	bne.n	8008fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f841 	bl	800903a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	4619      	mov	r1, r3
 8008fca:	4610      	mov	r0, r2
 8008fcc:	f000 fc7e 	bl	80098cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800903a:	b480      	push	{r7}
 800903c:	b083      	sub	sp, #12
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009042:	bf00      	nop
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
	...

08009050 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b01      	cmp	r3, #1
 8009062:	d001      	beq.n	8009068 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e05e      	b.n	8009126 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2202      	movs	r2, #2
 800906c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68da      	ldr	r2, [r3, #12]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f042 0201 	orr.w	r2, r2, #1
 800907e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a2b      	ldr	r2, [pc, #172]	@ (8009134 <HAL_TIM_Base_Start_IT+0xe4>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d02c      	beq.n	80090e4 <HAL_TIM_Base_Start_IT+0x94>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009092:	d027      	beq.n	80090e4 <HAL_TIM_Base_Start_IT+0x94>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a27      	ldr	r2, [pc, #156]	@ (8009138 <HAL_TIM_Base_Start_IT+0xe8>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d022      	beq.n	80090e4 <HAL_TIM_Base_Start_IT+0x94>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a26      	ldr	r2, [pc, #152]	@ (800913c <HAL_TIM_Base_Start_IT+0xec>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d01d      	beq.n	80090e4 <HAL_TIM_Base_Start_IT+0x94>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a24      	ldr	r2, [pc, #144]	@ (8009140 <HAL_TIM_Base_Start_IT+0xf0>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d018      	beq.n	80090e4 <HAL_TIM_Base_Start_IT+0x94>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a23      	ldr	r2, [pc, #140]	@ (8009144 <HAL_TIM_Base_Start_IT+0xf4>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d013      	beq.n	80090e4 <HAL_TIM_Base_Start_IT+0x94>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a21      	ldr	r2, [pc, #132]	@ (8009148 <HAL_TIM_Base_Start_IT+0xf8>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d00e      	beq.n	80090e4 <HAL_TIM_Base_Start_IT+0x94>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a20      	ldr	r2, [pc, #128]	@ (800914c <HAL_TIM_Base_Start_IT+0xfc>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d009      	beq.n	80090e4 <HAL_TIM_Base_Start_IT+0x94>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a1e      	ldr	r2, [pc, #120]	@ (8009150 <HAL_TIM_Base_Start_IT+0x100>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d004      	beq.n	80090e4 <HAL_TIM_Base_Start_IT+0x94>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a1d      	ldr	r2, [pc, #116]	@ (8009154 <HAL_TIM_Base_Start_IT+0x104>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d115      	bne.n	8009110 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	689a      	ldr	r2, [r3, #8]
 80090ea:	4b1b      	ldr	r3, [pc, #108]	@ (8009158 <HAL_TIM_Base_Start_IT+0x108>)
 80090ec:	4013      	ands	r3, r2
 80090ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2b06      	cmp	r3, #6
 80090f4:	d015      	beq.n	8009122 <HAL_TIM_Base_Start_IT+0xd2>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090fc:	d011      	beq.n	8009122 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f042 0201 	orr.w	r2, r2, #1
 800910c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800910e:	e008      	b.n	8009122 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f042 0201 	orr.w	r2, r2, #1
 800911e:	601a      	str	r2, [r3, #0]
 8009120:	e000      	b.n	8009124 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009122:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	40010000 	.word	0x40010000
 8009138:	40000400 	.word	0x40000400
 800913c:	40000800 	.word	0x40000800
 8009140:	40000c00 	.word	0x40000c00
 8009144:	40010400 	.word	0x40010400
 8009148:	40001800 	.word	0x40001800
 800914c:	40014000 	.word	0x40014000
 8009150:	4000e000 	.word	0x4000e000
 8009154:	4000e400 	.word	0x4000e400
 8009158:	00010007 	.word	0x00010007

0800915c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d101      	bne.n	800916e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e049      	b.n	8009202 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d106      	bne.n	8009188 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7f8 f874 	bl	8001270 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2202      	movs	r2, #2
 800918c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	3304      	adds	r3, #4
 8009198:	4619      	mov	r1, r3
 800919a:	4610      	mov	r0, r2
 800919c:	f000 fb96 	bl	80098cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
	...

0800920c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d109      	bne.n	8009230 <HAL_TIM_PWM_Start+0x24>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2b01      	cmp	r3, #1
 8009226:	bf14      	ite	ne
 8009228:	2301      	movne	r3, #1
 800922a:	2300      	moveq	r3, #0
 800922c:	b2db      	uxtb	r3, r3
 800922e:	e03c      	b.n	80092aa <HAL_TIM_PWM_Start+0x9e>
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	2b04      	cmp	r3, #4
 8009234:	d109      	bne.n	800924a <HAL_TIM_PWM_Start+0x3e>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800923c:	b2db      	uxtb	r3, r3
 800923e:	2b01      	cmp	r3, #1
 8009240:	bf14      	ite	ne
 8009242:	2301      	movne	r3, #1
 8009244:	2300      	moveq	r3, #0
 8009246:	b2db      	uxtb	r3, r3
 8009248:	e02f      	b.n	80092aa <HAL_TIM_PWM_Start+0x9e>
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	2b08      	cmp	r3, #8
 800924e:	d109      	bne.n	8009264 <HAL_TIM_PWM_Start+0x58>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009256:	b2db      	uxtb	r3, r3
 8009258:	2b01      	cmp	r3, #1
 800925a:	bf14      	ite	ne
 800925c:	2301      	movne	r3, #1
 800925e:	2300      	moveq	r3, #0
 8009260:	b2db      	uxtb	r3, r3
 8009262:	e022      	b.n	80092aa <HAL_TIM_PWM_Start+0x9e>
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	2b0c      	cmp	r3, #12
 8009268:	d109      	bne.n	800927e <HAL_TIM_PWM_Start+0x72>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b01      	cmp	r3, #1
 8009274:	bf14      	ite	ne
 8009276:	2301      	movne	r3, #1
 8009278:	2300      	moveq	r3, #0
 800927a:	b2db      	uxtb	r3, r3
 800927c:	e015      	b.n	80092aa <HAL_TIM_PWM_Start+0x9e>
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	2b10      	cmp	r3, #16
 8009282:	d109      	bne.n	8009298 <HAL_TIM_PWM_Start+0x8c>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800928a:	b2db      	uxtb	r3, r3
 800928c:	2b01      	cmp	r3, #1
 800928e:	bf14      	ite	ne
 8009290:	2301      	movne	r3, #1
 8009292:	2300      	moveq	r3, #0
 8009294:	b2db      	uxtb	r3, r3
 8009296:	e008      	b.n	80092aa <HAL_TIM_PWM_Start+0x9e>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	bf14      	ite	ne
 80092a4:	2301      	movne	r3, #1
 80092a6:	2300      	moveq	r3, #0
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d001      	beq.n	80092b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e0ab      	b.n	800940a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d104      	bne.n	80092c2 <HAL_TIM_PWM_Start+0xb6>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2202      	movs	r2, #2
 80092bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80092c0:	e023      	b.n	800930a <HAL_TIM_PWM_Start+0xfe>
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	2b04      	cmp	r3, #4
 80092c6:	d104      	bne.n	80092d2 <HAL_TIM_PWM_Start+0xc6>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2202      	movs	r2, #2
 80092cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80092d0:	e01b      	b.n	800930a <HAL_TIM_PWM_Start+0xfe>
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	2b08      	cmp	r3, #8
 80092d6:	d104      	bne.n	80092e2 <HAL_TIM_PWM_Start+0xd6>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2202      	movs	r2, #2
 80092dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80092e0:	e013      	b.n	800930a <HAL_TIM_PWM_Start+0xfe>
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	2b0c      	cmp	r3, #12
 80092e6:	d104      	bne.n	80092f2 <HAL_TIM_PWM_Start+0xe6>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2202      	movs	r2, #2
 80092ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80092f0:	e00b      	b.n	800930a <HAL_TIM_PWM_Start+0xfe>
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	2b10      	cmp	r3, #16
 80092f6:	d104      	bne.n	8009302 <HAL_TIM_PWM_Start+0xf6>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2202      	movs	r2, #2
 80092fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009300:	e003      	b.n	800930a <HAL_TIM_PWM_Start+0xfe>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2202      	movs	r2, #2
 8009306:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2201      	movs	r2, #1
 8009310:	6839      	ldr	r1, [r7, #0]
 8009312:	4618      	mov	r0, r3
 8009314:	f000 fe62 	bl	8009fdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a3d      	ldr	r2, [pc, #244]	@ (8009414 <HAL_TIM_PWM_Start+0x208>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d013      	beq.n	800934a <HAL_TIM_PWM_Start+0x13e>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a3c      	ldr	r2, [pc, #240]	@ (8009418 <HAL_TIM_PWM_Start+0x20c>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d00e      	beq.n	800934a <HAL_TIM_PWM_Start+0x13e>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a3a      	ldr	r2, [pc, #232]	@ (800941c <HAL_TIM_PWM_Start+0x210>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d009      	beq.n	800934a <HAL_TIM_PWM_Start+0x13e>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a39      	ldr	r2, [pc, #228]	@ (8009420 <HAL_TIM_PWM_Start+0x214>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d004      	beq.n	800934a <HAL_TIM_PWM_Start+0x13e>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a37      	ldr	r2, [pc, #220]	@ (8009424 <HAL_TIM_PWM_Start+0x218>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d101      	bne.n	800934e <HAL_TIM_PWM_Start+0x142>
 800934a:	2301      	movs	r3, #1
 800934c:	e000      	b.n	8009350 <HAL_TIM_PWM_Start+0x144>
 800934e:	2300      	movs	r3, #0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d007      	beq.n	8009364 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009362:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a2a      	ldr	r2, [pc, #168]	@ (8009414 <HAL_TIM_PWM_Start+0x208>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d02c      	beq.n	80093c8 <HAL_TIM_PWM_Start+0x1bc>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009376:	d027      	beq.n	80093c8 <HAL_TIM_PWM_Start+0x1bc>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a2a      	ldr	r2, [pc, #168]	@ (8009428 <HAL_TIM_PWM_Start+0x21c>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d022      	beq.n	80093c8 <HAL_TIM_PWM_Start+0x1bc>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a29      	ldr	r2, [pc, #164]	@ (800942c <HAL_TIM_PWM_Start+0x220>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d01d      	beq.n	80093c8 <HAL_TIM_PWM_Start+0x1bc>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a27      	ldr	r2, [pc, #156]	@ (8009430 <HAL_TIM_PWM_Start+0x224>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d018      	beq.n	80093c8 <HAL_TIM_PWM_Start+0x1bc>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a1f      	ldr	r2, [pc, #124]	@ (8009418 <HAL_TIM_PWM_Start+0x20c>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d013      	beq.n	80093c8 <HAL_TIM_PWM_Start+0x1bc>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a23      	ldr	r2, [pc, #140]	@ (8009434 <HAL_TIM_PWM_Start+0x228>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d00e      	beq.n	80093c8 <HAL_TIM_PWM_Start+0x1bc>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a1b      	ldr	r2, [pc, #108]	@ (800941c <HAL_TIM_PWM_Start+0x210>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d009      	beq.n	80093c8 <HAL_TIM_PWM_Start+0x1bc>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a1f      	ldr	r2, [pc, #124]	@ (8009438 <HAL_TIM_PWM_Start+0x22c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d004      	beq.n	80093c8 <HAL_TIM_PWM_Start+0x1bc>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a1e      	ldr	r2, [pc, #120]	@ (800943c <HAL_TIM_PWM_Start+0x230>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d115      	bne.n	80093f4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	689a      	ldr	r2, [r3, #8]
 80093ce:	4b1c      	ldr	r3, [pc, #112]	@ (8009440 <HAL_TIM_PWM_Start+0x234>)
 80093d0:	4013      	ands	r3, r2
 80093d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2b06      	cmp	r3, #6
 80093d8:	d015      	beq.n	8009406 <HAL_TIM_PWM_Start+0x1fa>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093e0:	d011      	beq.n	8009406 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f042 0201 	orr.w	r2, r2, #1
 80093f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093f2:	e008      	b.n	8009406 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f042 0201 	orr.w	r2, r2, #1
 8009402:	601a      	str	r2, [r3, #0]
 8009404:	e000      	b.n	8009408 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009406:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	40010000 	.word	0x40010000
 8009418:	40010400 	.word	0x40010400
 800941c:	40014000 	.word	0x40014000
 8009420:	40014400 	.word	0x40014400
 8009424:	40014800 	.word	0x40014800
 8009428:	40000400 	.word	0x40000400
 800942c:	40000800 	.word	0x40000800
 8009430:	40000c00 	.word	0x40000c00
 8009434:	40001800 	.word	0x40001800
 8009438:	4000e000 	.word	0x4000e000
 800943c:	4000e400 	.word	0x4000e400
 8009440:	00010007 	.word	0x00010007

08009444 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	f003 0302 	and.w	r3, r3, #2
 8009462:	2b00      	cmp	r3, #0
 8009464:	d020      	beq.n	80094a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f003 0302 	and.w	r3, r3, #2
 800946c:	2b00      	cmp	r3, #0
 800946e:	d01b      	beq.n	80094a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f06f 0202 	mvn.w	r2, #2
 8009478:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2201      	movs	r2, #1
 800947e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	699b      	ldr	r3, [r3, #24]
 8009486:	f003 0303 	and.w	r3, r3, #3
 800948a:	2b00      	cmp	r3, #0
 800948c:	d003      	beq.n	8009496 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f9fe 	bl	8009890 <HAL_TIM_IC_CaptureCallback>
 8009494:	e005      	b.n	80094a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f9f0 	bl	800987c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 fa01 	bl	80098a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	f003 0304 	and.w	r3, r3, #4
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d020      	beq.n	80094f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f003 0304 	and.w	r3, r3, #4
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d01b      	beq.n	80094f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f06f 0204 	mvn.w	r2, #4
 80094c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2202      	movs	r2, #2
 80094ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d003      	beq.n	80094e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f9d8 	bl	8009890 <HAL_TIM_IC_CaptureCallback>
 80094e0:	e005      	b.n	80094ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f9ca 	bl	800987c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f9db 	bl	80098a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	f003 0308 	and.w	r3, r3, #8
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d020      	beq.n	8009540 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f003 0308 	and.w	r3, r3, #8
 8009504:	2b00      	cmp	r3, #0
 8009506:	d01b      	beq.n	8009540 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f06f 0208 	mvn.w	r2, #8
 8009510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2204      	movs	r2, #4
 8009516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	69db      	ldr	r3, [r3, #28]
 800951e:	f003 0303 	and.w	r3, r3, #3
 8009522:	2b00      	cmp	r3, #0
 8009524:	d003      	beq.n	800952e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f9b2 	bl	8009890 <HAL_TIM_IC_CaptureCallback>
 800952c:	e005      	b.n	800953a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f9a4 	bl	800987c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f9b5 	bl	80098a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	f003 0310 	and.w	r3, r3, #16
 8009546:	2b00      	cmp	r3, #0
 8009548:	d020      	beq.n	800958c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f003 0310 	and.w	r3, r3, #16
 8009550:	2b00      	cmp	r3, #0
 8009552:	d01b      	beq.n	800958c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f06f 0210 	mvn.w	r2, #16
 800955c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2208      	movs	r2, #8
 8009562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	69db      	ldr	r3, [r3, #28]
 800956a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800956e:	2b00      	cmp	r3, #0
 8009570:	d003      	beq.n	800957a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f98c 	bl	8009890 <HAL_TIM_IC_CaptureCallback>
 8009578:	e005      	b.n	8009586 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f97e 	bl	800987c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f98f 	bl	80098a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	f003 0301 	and.w	r3, r3, #1
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00c      	beq.n	80095b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	2b00      	cmp	r3, #0
 800959e:	d007      	beq.n	80095b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f06f 0201 	mvn.w	r2, #1
 80095a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7f7 fd76 	bl	800109c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d104      	bne.n	80095c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00c      	beq.n	80095de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d007      	beq.n	80095de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80095d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fdcb 	bl	800a174 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00c      	beq.n	8009602 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d007      	beq.n	8009602 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80095fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 fdc3 	bl	800a188 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00c      	beq.n	8009626 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009612:	2b00      	cmp	r3, #0
 8009614:	d007      	beq.n	8009626 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800961e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f949 	bl	80098b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	f003 0320 	and.w	r3, r3, #32
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00c      	beq.n	800964a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f003 0320 	and.w	r3, r3, #32
 8009636:	2b00      	cmp	r3, #0
 8009638:	d007      	beq.n	800964a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f06f 0220 	mvn.w	r2, #32
 8009642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fd8b 	bl	800a160 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800964a:	bf00      	nop
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
	...

08009654 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b086      	sub	sp, #24
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800966a:	2b01      	cmp	r3, #1
 800966c:	d101      	bne.n	8009672 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800966e:	2302      	movs	r3, #2
 8009670:	e0ff      	b.n	8009872 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2b14      	cmp	r3, #20
 800967e:	f200 80f0 	bhi.w	8009862 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009682:	a201      	add	r2, pc, #4	@ (adr r2, 8009688 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009688:	080096dd 	.word	0x080096dd
 800968c:	08009863 	.word	0x08009863
 8009690:	08009863 	.word	0x08009863
 8009694:	08009863 	.word	0x08009863
 8009698:	0800971d 	.word	0x0800971d
 800969c:	08009863 	.word	0x08009863
 80096a0:	08009863 	.word	0x08009863
 80096a4:	08009863 	.word	0x08009863
 80096a8:	0800975f 	.word	0x0800975f
 80096ac:	08009863 	.word	0x08009863
 80096b0:	08009863 	.word	0x08009863
 80096b4:	08009863 	.word	0x08009863
 80096b8:	0800979f 	.word	0x0800979f
 80096bc:	08009863 	.word	0x08009863
 80096c0:	08009863 	.word	0x08009863
 80096c4:	08009863 	.word	0x08009863
 80096c8:	080097e1 	.word	0x080097e1
 80096cc:	08009863 	.word	0x08009863
 80096d0:	08009863 	.word	0x08009863
 80096d4:	08009863 	.word	0x08009863
 80096d8:	08009821 	.word	0x08009821
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68b9      	ldr	r1, [r7, #8]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 f9a4 	bl	8009a30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	699a      	ldr	r2, [r3, #24]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f042 0208 	orr.w	r2, r2, #8
 80096f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	699a      	ldr	r2, [r3, #24]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f022 0204 	bic.w	r2, r2, #4
 8009706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	6999      	ldr	r1, [r3, #24]
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	691a      	ldr	r2, [r3, #16]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	430a      	orrs	r2, r1
 8009718:	619a      	str	r2, [r3, #24]
      break;
 800971a:	e0a5      	b.n	8009868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68b9      	ldr	r1, [r7, #8]
 8009722:	4618      	mov	r0, r3
 8009724:	f000 fa14 	bl	8009b50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	699a      	ldr	r2, [r3, #24]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	699a      	ldr	r2, [r3, #24]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	6999      	ldr	r1, [r3, #24]
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	021a      	lsls	r2, r3, #8
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	430a      	orrs	r2, r1
 800975a:	619a      	str	r2, [r3, #24]
      break;
 800975c:	e084      	b.n	8009868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	68b9      	ldr	r1, [r7, #8]
 8009764:	4618      	mov	r0, r3
 8009766:	f000 fa7d 	bl	8009c64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	69da      	ldr	r2, [r3, #28]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f042 0208 	orr.w	r2, r2, #8
 8009778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	69da      	ldr	r2, [r3, #28]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f022 0204 	bic.w	r2, r2, #4
 8009788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	69d9      	ldr	r1, [r3, #28]
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	691a      	ldr	r2, [r3, #16]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	430a      	orrs	r2, r1
 800979a:	61da      	str	r2, [r3, #28]
      break;
 800979c:	e064      	b.n	8009868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	68b9      	ldr	r1, [r7, #8]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 fae5 	bl	8009d74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	69da      	ldr	r2, [r3, #28]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80097b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	69da      	ldr	r2, [r3, #28]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80097c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	69d9      	ldr	r1, [r3, #28]
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	021a      	lsls	r2, r3, #8
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	430a      	orrs	r2, r1
 80097dc:	61da      	str	r2, [r3, #28]
      break;
 80097de:	e043      	b.n	8009868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68b9      	ldr	r1, [r7, #8]
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 fb2e 	bl	8009e48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f042 0208 	orr.w	r2, r2, #8
 80097fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f022 0204 	bic.w	r2, r2, #4
 800980a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	691a      	ldr	r2, [r3, #16]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	430a      	orrs	r2, r1
 800981c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800981e:	e023      	b.n	8009868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68b9      	ldr	r1, [r7, #8]
 8009826:	4618      	mov	r0, r3
 8009828:	f000 fb72 	bl	8009f10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800983a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800984a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	021a      	lsls	r2, r3, #8
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	430a      	orrs	r2, r1
 800985e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009860:	e002      	b.n	8009868 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	75fb      	strb	r3, [r7, #23]
      break;
 8009866:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009870:	7dfb      	ldrb	r3, [r7, #23]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3718      	adds	r7, #24
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop

0800987c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4a4a      	ldr	r2, [pc, #296]	@ (8009a08 <TIM_Base_SetConfig+0x13c>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d013      	beq.n	800990c <TIM_Base_SetConfig+0x40>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098ea:	d00f      	beq.n	800990c <TIM_Base_SetConfig+0x40>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4a47      	ldr	r2, [pc, #284]	@ (8009a0c <TIM_Base_SetConfig+0x140>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d00b      	beq.n	800990c <TIM_Base_SetConfig+0x40>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a46      	ldr	r2, [pc, #280]	@ (8009a10 <TIM_Base_SetConfig+0x144>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d007      	beq.n	800990c <TIM_Base_SetConfig+0x40>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4a45      	ldr	r2, [pc, #276]	@ (8009a14 <TIM_Base_SetConfig+0x148>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d003      	beq.n	800990c <TIM_Base_SetConfig+0x40>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	4a44      	ldr	r2, [pc, #272]	@ (8009a18 <TIM_Base_SetConfig+0x14c>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d108      	bne.n	800991e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	4313      	orrs	r3, r2
 800991c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4a39      	ldr	r2, [pc, #228]	@ (8009a08 <TIM_Base_SetConfig+0x13c>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d027      	beq.n	8009976 <TIM_Base_SetConfig+0xaa>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800992c:	d023      	beq.n	8009976 <TIM_Base_SetConfig+0xaa>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a36      	ldr	r2, [pc, #216]	@ (8009a0c <TIM_Base_SetConfig+0x140>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d01f      	beq.n	8009976 <TIM_Base_SetConfig+0xaa>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a35      	ldr	r2, [pc, #212]	@ (8009a10 <TIM_Base_SetConfig+0x144>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d01b      	beq.n	8009976 <TIM_Base_SetConfig+0xaa>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4a34      	ldr	r2, [pc, #208]	@ (8009a14 <TIM_Base_SetConfig+0x148>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d017      	beq.n	8009976 <TIM_Base_SetConfig+0xaa>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4a33      	ldr	r2, [pc, #204]	@ (8009a18 <TIM_Base_SetConfig+0x14c>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d013      	beq.n	8009976 <TIM_Base_SetConfig+0xaa>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a32      	ldr	r2, [pc, #200]	@ (8009a1c <TIM_Base_SetConfig+0x150>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d00f      	beq.n	8009976 <TIM_Base_SetConfig+0xaa>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4a31      	ldr	r2, [pc, #196]	@ (8009a20 <TIM_Base_SetConfig+0x154>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d00b      	beq.n	8009976 <TIM_Base_SetConfig+0xaa>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4a30      	ldr	r2, [pc, #192]	@ (8009a24 <TIM_Base_SetConfig+0x158>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d007      	beq.n	8009976 <TIM_Base_SetConfig+0xaa>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4a2f      	ldr	r2, [pc, #188]	@ (8009a28 <TIM_Base_SetConfig+0x15c>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d003      	beq.n	8009976 <TIM_Base_SetConfig+0xaa>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a2e      	ldr	r2, [pc, #184]	@ (8009a2c <TIM_Base_SetConfig+0x160>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d108      	bne.n	8009988 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800997c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	4313      	orrs	r3, r2
 8009986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	695b      	ldr	r3, [r3, #20]
 8009992:	4313      	orrs	r3, r2
 8009994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	689a      	ldr	r2, [r3, #8]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4a16      	ldr	r2, [pc, #88]	@ (8009a08 <TIM_Base_SetConfig+0x13c>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d00f      	beq.n	80099d4 <TIM_Base_SetConfig+0x108>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a18      	ldr	r2, [pc, #96]	@ (8009a18 <TIM_Base_SetConfig+0x14c>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d00b      	beq.n	80099d4 <TIM_Base_SetConfig+0x108>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a17      	ldr	r2, [pc, #92]	@ (8009a1c <TIM_Base_SetConfig+0x150>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d007      	beq.n	80099d4 <TIM_Base_SetConfig+0x108>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a16      	ldr	r2, [pc, #88]	@ (8009a20 <TIM_Base_SetConfig+0x154>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d003      	beq.n	80099d4 <TIM_Base_SetConfig+0x108>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4a15      	ldr	r2, [pc, #84]	@ (8009a24 <TIM_Base_SetConfig+0x158>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d103      	bne.n	80099dc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	691a      	ldr	r2, [r3, #16]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	f003 0301 	and.w	r3, r3, #1
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d105      	bne.n	80099fa <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	f023 0201 	bic.w	r2, r3, #1
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	611a      	str	r2, [r3, #16]
  }
}
 80099fa:	bf00      	nop
 80099fc:	3714      	adds	r7, #20
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	40010000 	.word	0x40010000
 8009a0c:	40000400 	.word	0x40000400
 8009a10:	40000800 	.word	0x40000800
 8009a14:	40000c00 	.word	0x40000c00
 8009a18:	40010400 	.word	0x40010400
 8009a1c:	40014000 	.word	0x40014000
 8009a20:	40014400 	.word	0x40014400
 8009a24:	40014800 	.word	0x40014800
 8009a28:	4000e000 	.word	0x4000e000
 8009a2c:	4000e400 	.word	0x4000e400

08009a30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b087      	sub	sp, #28
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a1b      	ldr	r3, [r3, #32]
 8009a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a1b      	ldr	r3, [r3, #32]
 8009a44:	f023 0201 	bic.w	r2, r3, #1
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	699b      	ldr	r3, [r3, #24]
 8009a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	4b37      	ldr	r3, [pc, #220]	@ (8009b38 <TIM_OC1_SetConfig+0x108>)
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f023 0303 	bic.w	r3, r3, #3
 8009a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	f023 0302 	bic.w	r3, r3, #2
 8009a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a2d      	ldr	r2, [pc, #180]	@ (8009b3c <TIM_OC1_SetConfig+0x10c>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d00f      	beq.n	8009aac <TIM_OC1_SetConfig+0x7c>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8009b40 <TIM_OC1_SetConfig+0x110>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d00b      	beq.n	8009aac <TIM_OC1_SetConfig+0x7c>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a2b      	ldr	r2, [pc, #172]	@ (8009b44 <TIM_OC1_SetConfig+0x114>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d007      	beq.n	8009aac <TIM_OC1_SetConfig+0x7c>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a2a      	ldr	r2, [pc, #168]	@ (8009b48 <TIM_OC1_SetConfig+0x118>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d003      	beq.n	8009aac <TIM_OC1_SetConfig+0x7c>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a29      	ldr	r2, [pc, #164]	@ (8009b4c <TIM_OC1_SetConfig+0x11c>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d10c      	bne.n	8009ac6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	f023 0308 	bic.w	r3, r3, #8
 8009ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	697a      	ldr	r2, [r7, #20]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	f023 0304 	bic.w	r3, r3, #4
 8009ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8009b3c <TIM_OC1_SetConfig+0x10c>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d00f      	beq.n	8009aee <TIM_OC1_SetConfig+0xbe>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8009b40 <TIM_OC1_SetConfig+0x110>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d00b      	beq.n	8009aee <TIM_OC1_SetConfig+0xbe>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a1a      	ldr	r2, [pc, #104]	@ (8009b44 <TIM_OC1_SetConfig+0x114>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d007      	beq.n	8009aee <TIM_OC1_SetConfig+0xbe>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a19      	ldr	r2, [pc, #100]	@ (8009b48 <TIM_OC1_SetConfig+0x118>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d003      	beq.n	8009aee <TIM_OC1_SetConfig+0xbe>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a18      	ldr	r2, [pc, #96]	@ (8009b4c <TIM_OC1_SetConfig+0x11c>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d111      	bne.n	8009b12 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	695b      	ldr	r3, [r3, #20]
 8009b02:	693a      	ldr	r2, [r7, #16]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	699b      	ldr	r3, [r3, #24]
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	693a      	ldr	r2, [r7, #16]
 8009b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	685a      	ldr	r2, [r3, #4]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	697a      	ldr	r2, [r7, #20]
 8009b2a:	621a      	str	r2, [r3, #32]
}
 8009b2c:	bf00      	nop
 8009b2e:	371c      	adds	r7, #28
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr
 8009b38:	fffeff8f 	.word	0xfffeff8f
 8009b3c:	40010000 	.word	0x40010000
 8009b40:	40010400 	.word	0x40010400
 8009b44:	40014000 	.word	0x40014000
 8009b48:	40014400 	.word	0x40014400
 8009b4c:	40014800 	.word	0x40014800

08009b50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b087      	sub	sp, #28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a1b      	ldr	r3, [r3, #32]
 8009b64:	f023 0210 	bic.w	r2, r3, #16
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	4b34      	ldr	r3, [pc, #208]	@ (8009c4c <TIM_OC2_SetConfig+0xfc>)
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	021b      	lsls	r3, r3, #8
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	f023 0320 	bic.w	r3, r3, #32
 8009b9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	011b      	lsls	r3, r3, #4
 8009ba2:	697a      	ldr	r2, [r7, #20]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a29      	ldr	r2, [pc, #164]	@ (8009c50 <TIM_OC2_SetConfig+0x100>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d003      	beq.n	8009bb8 <TIM_OC2_SetConfig+0x68>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a28      	ldr	r2, [pc, #160]	@ (8009c54 <TIM_OC2_SetConfig+0x104>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d10d      	bne.n	8009bd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	011b      	lsls	r3, r3, #4
 8009bc6:	697a      	ldr	r2, [r7, #20]
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8009c50 <TIM_OC2_SetConfig+0x100>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d00f      	beq.n	8009bfc <TIM_OC2_SetConfig+0xac>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4a1d      	ldr	r2, [pc, #116]	@ (8009c54 <TIM_OC2_SetConfig+0x104>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d00b      	beq.n	8009bfc <TIM_OC2_SetConfig+0xac>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a1c      	ldr	r2, [pc, #112]	@ (8009c58 <TIM_OC2_SetConfig+0x108>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d007      	beq.n	8009bfc <TIM_OC2_SetConfig+0xac>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a1b      	ldr	r2, [pc, #108]	@ (8009c5c <TIM_OC2_SetConfig+0x10c>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d003      	beq.n	8009bfc <TIM_OC2_SetConfig+0xac>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8009c60 <TIM_OC2_SetConfig+0x110>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d113      	bne.n	8009c24 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009c02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	695b      	ldr	r3, [r3, #20]
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	693a      	ldr	r2, [r7, #16]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	699b      	ldr	r3, [r3, #24]
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	693a      	ldr	r2, [r7, #16]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	693a      	ldr	r2, [r7, #16]
 8009c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	685a      	ldr	r2, [r3, #4]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	621a      	str	r2, [r3, #32]
}
 8009c3e:	bf00      	nop
 8009c40:	371c      	adds	r7, #28
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	feff8fff 	.word	0xfeff8fff
 8009c50:	40010000 	.word	0x40010000
 8009c54:	40010400 	.word	0x40010400
 8009c58:	40014000 	.word	0x40014000
 8009c5c:	40014400 	.word	0x40014400
 8009c60:	40014800 	.word	0x40014800

08009c64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b087      	sub	sp, #28
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a1b      	ldr	r3, [r3, #32]
 8009c72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a1b      	ldr	r3, [r3, #32]
 8009c78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	69db      	ldr	r3, [r3, #28]
 8009c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	4b33      	ldr	r3, [pc, #204]	@ (8009d5c <TIM_OC3_SetConfig+0xf8>)
 8009c90:	4013      	ands	r3, r2
 8009c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f023 0303 	bic.w	r3, r3, #3
 8009c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	021b      	lsls	r3, r3, #8
 8009cb4:	697a      	ldr	r2, [r7, #20]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a28      	ldr	r2, [pc, #160]	@ (8009d60 <TIM_OC3_SetConfig+0xfc>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d003      	beq.n	8009cca <TIM_OC3_SetConfig+0x66>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4a27      	ldr	r2, [pc, #156]	@ (8009d64 <TIM_OC3_SetConfig+0x100>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d10d      	bne.n	8009ce6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009cd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	021b      	lsls	r3, r3, #8
 8009cd8:	697a      	ldr	r2, [r7, #20]
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8009d60 <TIM_OC3_SetConfig+0xfc>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d00f      	beq.n	8009d0e <TIM_OC3_SetConfig+0xaa>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8009d64 <TIM_OC3_SetConfig+0x100>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d00b      	beq.n	8009d0e <TIM_OC3_SetConfig+0xaa>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8009d68 <TIM_OC3_SetConfig+0x104>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d007      	beq.n	8009d0e <TIM_OC3_SetConfig+0xaa>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a1a      	ldr	r2, [pc, #104]	@ (8009d6c <TIM_OC3_SetConfig+0x108>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d003      	beq.n	8009d0e <TIM_OC3_SetConfig+0xaa>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4a19      	ldr	r2, [pc, #100]	@ (8009d70 <TIM_OC3_SetConfig+0x10c>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d113      	bne.n	8009d36 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	011b      	lsls	r3, r3, #4
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	699b      	ldr	r3, [r3, #24]
 8009d2e:	011b      	lsls	r3, r3, #4
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	685a      	ldr	r2, [r3, #4]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	621a      	str	r2, [r3, #32]
}
 8009d50:	bf00      	nop
 8009d52:	371c      	adds	r7, #28
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	fffeff8f 	.word	0xfffeff8f
 8009d60:	40010000 	.word	0x40010000
 8009d64:	40010400 	.word	0x40010400
 8009d68:	40014000 	.word	0x40014000
 8009d6c:	40014400 	.word	0x40014400
 8009d70:	40014800 	.word	0x40014800

08009d74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b087      	sub	sp, #28
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a1b      	ldr	r3, [r3, #32]
 8009d82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a1b      	ldr	r3, [r3, #32]
 8009d88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	69db      	ldr	r3, [r3, #28]
 8009d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	4b24      	ldr	r3, [pc, #144]	@ (8009e30 <TIM_OC4_SetConfig+0xbc>)
 8009da0:	4013      	ands	r3, r2
 8009da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	021b      	lsls	r3, r3, #8
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	031b      	lsls	r3, r3, #12
 8009dc6:	693a      	ldr	r2, [r7, #16]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a19      	ldr	r2, [pc, #100]	@ (8009e34 <TIM_OC4_SetConfig+0xc0>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d00f      	beq.n	8009df4 <TIM_OC4_SetConfig+0x80>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a18      	ldr	r2, [pc, #96]	@ (8009e38 <TIM_OC4_SetConfig+0xc4>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d00b      	beq.n	8009df4 <TIM_OC4_SetConfig+0x80>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4a17      	ldr	r2, [pc, #92]	@ (8009e3c <TIM_OC4_SetConfig+0xc8>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d007      	beq.n	8009df4 <TIM_OC4_SetConfig+0x80>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a16      	ldr	r2, [pc, #88]	@ (8009e40 <TIM_OC4_SetConfig+0xcc>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d003      	beq.n	8009df4 <TIM_OC4_SetConfig+0x80>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a15      	ldr	r2, [pc, #84]	@ (8009e44 <TIM_OC4_SetConfig+0xd0>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d109      	bne.n	8009e08 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009dfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	695b      	ldr	r3, [r3, #20]
 8009e00:	019b      	lsls	r3, r3, #6
 8009e02:	697a      	ldr	r2, [r7, #20]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	697a      	ldr	r2, [r7, #20]
 8009e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	68fa      	ldr	r2, [r7, #12]
 8009e12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	685a      	ldr	r2, [r3, #4]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	693a      	ldr	r2, [r7, #16]
 8009e20:	621a      	str	r2, [r3, #32]
}
 8009e22:	bf00      	nop
 8009e24:	371c      	adds	r7, #28
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop
 8009e30:	feff8fff 	.word	0xfeff8fff
 8009e34:	40010000 	.word	0x40010000
 8009e38:	40010400 	.word	0x40010400
 8009e3c:	40014000 	.word	0x40014000
 8009e40:	40014400 	.word	0x40014400
 8009e44:	40014800 	.word	0x40014800

08009e48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b087      	sub	sp, #28
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6a1b      	ldr	r3, [r3, #32]
 8009e5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	4b21      	ldr	r3, [pc, #132]	@ (8009ef8 <TIM_OC5_SetConfig+0xb0>)
 8009e74:	4013      	ands	r3, r2
 8009e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009e88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	041b      	lsls	r3, r3, #16
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4a18      	ldr	r2, [pc, #96]	@ (8009efc <TIM_OC5_SetConfig+0xb4>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d00f      	beq.n	8009ebe <TIM_OC5_SetConfig+0x76>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a17      	ldr	r2, [pc, #92]	@ (8009f00 <TIM_OC5_SetConfig+0xb8>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d00b      	beq.n	8009ebe <TIM_OC5_SetConfig+0x76>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a16      	ldr	r2, [pc, #88]	@ (8009f04 <TIM_OC5_SetConfig+0xbc>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d007      	beq.n	8009ebe <TIM_OC5_SetConfig+0x76>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a15      	ldr	r2, [pc, #84]	@ (8009f08 <TIM_OC5_SetConfig+0xc0>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d003      	beq.n	8009ebe <TIM_OC5_SetConfig+0x76>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a14      	ldr	r2, [pc, #80]	@ (8009f0c <TIM_OC5_SetConfig+0xc4>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d109      	bne.n	8009ed2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	695b      	ldr	r3, [r3, #20]
 8009eca:	021b      	lsls	r3, r3, #8
 8009ecc:	697a      	ldr	r2, [r7, #20]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	697a      	ldr	r2, [r7, #20]
 8009ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	685a      	ldr	r2, [r3, #4]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	693a      	ldr	r2, [r7, #16]
 8009eea:	621a      	str	r2, [r3, #32]
}
 8009eec:	bf00      	nop
 8009eee:	371c      	adds	r7, #28
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr
 8009ef8:	fffeff8f 	.word	0xfffeff8f
 8009efc:	40010000 	.word	0x40010000
 8009f00:	40010400 	.word	0x40010400
 8009f04:	40014000 	.word	0x40014000
 8009f08:	40014400 	.word	0x40014400
 8009f0c:	40014800 	.word	0x40014800

08009f10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b087      	sub	sp, #28
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a1b      	ldr	r3, [r3, #32]
 8009f1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a1b      	ldr	r3, [r3, #32]
 8009f24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	4b22      	ldr	r3, [pc, #136]	@ (8009fc4 <TIM_OC6_SetConfig+0xb4>)
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	021b      	lsls	r3, r3, #8
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009f52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	051b      	lsls	r3, r3, #20
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a19      	ldr	r2, [pc, #100]	@ (8009fc8 <TIM_OC6_SetConfig+0xb8>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d00f      	beq.n	8009f88 <TIM_OC6_SetConfig+0x78>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a18      	ldr	r2, [pc, #96]	@ (8009fcc <TIM_OC6_SetConfig+0xbc>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d00b      	beq.n	8009f88 <TIM_OC6_SetConfig+0x78>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a17      	ldr	r2, [pc, #92]	@ (8009fd0 <TIM_OC6_SetConfig+0xc0>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d007      	beq.n	8009f88 <TIM_OC6_SetConfig+0x78>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a16      	ldr	r2, [pc, #88]	@ (8009fd4 <TIM_OC6_SetConfig+0xc4>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d003      	beq.n	8009f88 <TIM_OC6_SetConfig+0x78>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a15      	ldr	r2, [pc, #84]	@ (8009fd8 <TIM_OC6_SetConfig+0xc8>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d109      	bne.n	8009f9c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	695b      	ldr	r3, [r3, #20]
 8009f94:	029b      	lsls	r3, r3, #10
 8009f96:	697a      	ldr	r2, [r7, #20]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	693a      	ldr	r2, [r7, #16]
 8009fb4:	621a      	str	r2, [r3, #32]
}
 8009fb6:	bf00      	nop
 8009fb8:	371c      	adds	r7, #28
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	feff8fff 	.word	0xfeff8fff
 8009fc8:	40010000 	.word	0x40010000
 8009fcc:	40010400 	.word	0x40010400
 8009fd0:	40014000 	.word	0x40014000
 8009fd4:	40014400 	.word	0x40014400
 8009fd8:	40014800 	.word	0x40014800

08009fdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b087      	sub	sp, #28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	f003 031f 	and.w	r3, r3, #31
 8009fee:	2201      	movs	r2, #1
 8009ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ff4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	6a1a      	ldr	r2, [r3, #32]
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	43db      	mvns	r3, r3
 8009ffe:	401a      	ands	r2, r3
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6a1a      	ldr	r2, [r3, #32]
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	f003 031f 	and.w	r3, r3, #31
 800a00e:	6879      	ldr	r1, [r7, #4]
 800a010:	fa01 f303 	lsl.w	r3, r1, r3
 800a014:	431a      	orrs	r2, r3
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	621a      	str	r2, [r3, #32]
}
 800a01a:	bf00      	nop
 800a01c:	371c      	adds	r7, #28
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr
	...

0800a028 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d101      	bne.n	800a040 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a03c:	2302      	movs	r3, #2
 800a03e:	e077      	b.n	800a130 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2201      	movs	r2, #1
 800a044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2202      	movs	r2, #2
 800a04c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a35      	ldr	r2, [pc, #212]	@ (800a13c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d004      	beq.n	800a074 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a34      	ldr	r2, [pc, #208]	@ (800a140 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d108      	bne.n	800a086 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a07a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	4313      	orrs	r3, r2
 800a084:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a08c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	4313      	orrs	r3, r2
 800a096:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a25      	ldr	r2, [pc, #148]	@ (800a13c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d02c      	beq.n	800a104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0b2:	d027      	beq.n	800a104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a22      	ldr	r2, [pc, #136]	@ (800a144 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d022      	beq.n	800a104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a21      	ldr	r2, [pc, #132]	@ (800a148 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d01d      	beq.n	800a104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a1f      	ldr	r2, [pc, #124]	@ (800a14c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d018      	beq.n	800a104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a1a      	ldr	r2, [pc, #104]	@ (800a140 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d013      	beq.n	800a104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a1b      	ldr	r2, [pc, #108]	@ (800a150 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d00e      	beq.n	800a104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a1a      	ldr	r2, [pc, #104]	@ (800a154 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d009      	beq.n	800a104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a18      	ldr	r2, [pc, #96]	@ (800a158 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d004      	beq.n	800a104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a17      	ldr	r2, [pc, #92]	@ (800a15c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d10c      	bne.n	800a11e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a10a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	4313      	orrs	r3, r2
 800a114:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68ba      	ldr	r2, [r7, #8]
 800a11c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3714      	adds	r7, #20
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr
 800a13c:	40010000 	.word	0x40010000
 800a140:	40010400 	.word	0x40010400
 800a144:	40000400 	.word	0x40000400
 800a148:	40000800 	.word	0x40000800
 800a14c:	40000c00 	.word	0x40000c00
 800a150:	40001800 	.word	0x40001800
 800a154:	40014000 	.word	0x40014000
 800a158:	4000e000 	.word	0x4000e000
 800a15c:	4000e400 	.word	0x4000e400

0800a160 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a17c:	bf00      	nop
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a190:	bf00      	nop
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d101      	bne.n	800a1ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e042      	b.n	800a234 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d106      	bne.n	800a1c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f7f7 f8ad 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2224      	movs	r2, #36	@ 0x24
 800a1ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f022 0201 	bic.w	r2, r2, #1
 800a1dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d002      	beq.n	800a1ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 ff22 	bl	800b030 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 f8b3 	bl	800a358 <UART_SetConfig>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d101      	bne.n	800a1fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e01b      	b.n	800a234 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	685a      	ldr	r2, [r3, #4]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a20a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	689a      	ldr	r2, [r3, #8]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a21a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f042 0201 	orr.w	r2, r2, #1
 800a22a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 ffa1 	bl	800b174 <UART_CheckIdleState>
 800a232:	4603      	mov	r3, r0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3708      	adds	r7, #8
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b08a      	sub	sp, #40	@ 0x28
 800a240:	af02      	add	r7, sp, #8
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	603b      	str	r3, [r7, #0]
 800a248:	4613      	mov	r3, r2
 800a24a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a252:	2b20      	cmp	r3, #32
 800a254:	d17b      	bne.n	800a34e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d002      	beq.n	800a262 <HAL_UART_Transmit+0x26>
 800a25c:	88fb      	ldrh	r3, [r7, #6]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d101      	bne.n	800a266 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	e074      	b.n	800a350 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2200      	movs	r2, #0
 800a26a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2221      	movs	r2, #33	@ 0x21
 800a272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a276:	f7f7 fbf5 	bl	8001a64 <HAL_GetTick>
 800a27a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	88fa      	ldrh	r2, [r7, #6]
 800a280:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	88fa      	ldrh	r2, [r7, #6]
 800a288:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a294:	d108      	bne.n	800a2a8 <HAL_UART_Transmit+0x6c>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d104      	bne.n	800a2a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	61bb      	str	r3, [r7, #24]
 800a2a6:	e003      	b.n	800a2b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a2b0:	e030      	b.n	800a314 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	2180      	movs	r1, #128	@ 0x80
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f001 f803 	bl	800b2c8 <UART_WaitOnFlagUntilTimeout>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d005      	beq.n	800a2d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2220      	movs	r2, #32
 800a2cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	e03d      	b.n	800a350 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10b      	bne.n	800a2f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	881b      	ldrh	r3, [r3, #0]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	3302      	adds	r3, #2
 800a2ee:	61bb      	str	r3, [r7, #24]
 800a2f0:	e007      	b.n	800a302 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	781a      	ldrb	r2, [r3, #0]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	3301      	adds	r3, #1
 800a300:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a308:	b29b      	uxth	r3, r3
 800a30a:	3b01      	subs	r3, #1
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1c8      	bne.n	800a2b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	2200      	movs	r2, #0
 800a328:	2140      	movs	r1, #64	@ 0x40
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f000 ffcc 	bl	800b2c8 <UART_WaitOnFlagUntilTimeout>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d005      	beq.n	800a342 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2220      	movs	r2, #32
 800a33a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a33e:	2303      	movs	r3, #3
 800a340:	e006      	b.n	800a350 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2220      	movs	r2, #32
 800a346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a34a:	2300      	movs	r3, #0
 800a34c:	e000      	b.n	800a350 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a34e:	2302      	movs	r3, #2
  }
}
 800a350:	4618      	mov	r0, r3
 800a352:	3720      	adds	r7, #32
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a35c:	b092      	sub	sp, #72	@ 0x48
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a362:	2300      	movs	r3, #0
 800a364:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	689a      	ldr	r2, [r3, #8]
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	431a      	orrs	r2, r3
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	695b      	ldr	r3, [r3, #20]
 800a376:	431a      	orrs	r2, r3
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	69db      	ldr	r3, [r3, #28]
 800a37c:	4313      	orrs	r3, r2
 800a37e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	4bbe      	ldr	r3, [pc, #760]	@ (800a680 <UART_SetConfig+0x328>)
 800a388:	4013      	ands	r3, r2
 800a38a:	697a      	ldr	r2, [r7, #20]
 800a38c:	6812      	ldr	r2, [r2, #0]
 800a38e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a390:	430b      	orrs	r3, r1
 800a392:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	68da      	ldr	r2, [r3, #12]
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	430a      	orrs	r2, r1
 800a3a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	699b      	ldr	r3, [r3, #24]
 800a3ae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4ab3      	ldr	r2, [pc, #716]	@ (800a684 <UART_SetConfig+0x32c>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d004      	beq.n	800a3c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	6a1b      	ldr	r3, [r3, #32]
 800a3be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	689a      	ldr	r2, [r3, #8]
 800a3ca:	4baf      	ldr	r3, [pc, #700]	@ (800a688 <UART_SetConfig+0x330>)
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	6812      	ldr	r2, [r2, #0]
 800a3d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a3d4:	430b      	orrs	r3, r1
 800a3d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3de:	f023 010f 	bic.w	r1, r3, #15
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4aa6      	ldr	r2, [pc, #664]	@ (800a68c <UART_SetConfig+0x334>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d177      	bne.n	800a4e8 <UART_SetConfig+0x190>
 800a3f8:	4ba5      	ldr	r3, [pc, #660]	@ (800a690 <UART_SetConfig+0x338>)
 800a3fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a400:	2b28      	cmp	r3, #40	@ 0x28
 800a402:	d86d      	bhi.n	800a4e0 <UART_SetConfig+0x188>
 800a404:	a201      	add	r2, pc, #4	@ (adr r2, 800a40c <UART_SetConfig+0xb4>)
 800a406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a40a:	bf00      	nop
 800a40c:	0800a4b1 	.word	0x0800a4b1
 800a410:	0800a4e1 	.word	0x0800a4e1
 800a414:	0800a4e1 	.word	0x0800a4e1
 800a418:	0800a4e1 	.word	0x0800a4e1
 800a41c:	0800a4e1 	.word	0x0800a4e1
 800a420:	0800a4e1 	.word	0x0800a4e1
 800a424:	0800a4e1 	.word	0x0800a4e1
 800a428:	0800a4e1 	.word	0x0800a4e1
 800a42c:	0800a4b9 	.word	0x0800a4b9
 800a430:	0800a4e1 	.word	0x0800a4e1
 800a434:	0800a4e1 	.word	0x0800a4e1
 800a438:	0800a4e1 	.word	0x0800a4e1
 800a43c:	0800a4e1 	.word	0x0800a4e1
 800a440:	0800a4e1 	.word	0x0800a4e1
 800a444:	0800a4e1 	.word	0x0800a4e1
 800a448:	0800a4e1 	.word	0x0800a4e1
 800a44c:	0800a4c1 	.word	0x0800a4c1
 800a450:	0800a4e1 	.word	0x0800a4e1
 800a454:	0800a4e1 	.word	0x0800a4e1
 800a458:	0800a4e1 	.word	0x0800a4e1
 800a45c:	0800a4e1 	.word	0x0800a4e1
 800a460:	0800a4e1 	.word	0x0800a4e1
 800a464:	0800a4e1 	.word	0x0800a4e1
 800a468:	0800a4e1 	.word	0x0800a4e1
 800a46c:	0800a4c9 	.word	0x0800a4c9
 800a470:	0800a4e1 	.word	0x0800a4e1
 800a474:	0800a4e1 	.word	0x0800a4e1
 800a478:	0800a4e1 	.word	0x0800a4e1
 800a47c:	0800a4e1 	.word	0x0800a4e1
 800a480:	0800a4e1 	.word	0x0800a4e1
 800a484:	0800a4e1 	.word	0x0800a4e1
 800a488:	0800a4e1 	.word	0x0800a4e1
 800a48c:	0800a4d1 	.word	0x0800a4d1
 800a490:	0800a4e1 	.word	0x0800a4e1
 800a494:	0800a4e1 	.word	0x0800a4e1
 800a498:	0800a4e1 	.word	0x0800a4e1
 800a49c:	0800a4e1 	.word	0x0800a4e1
 800a4a0:	0800a4e1 	.word	0x0800a4e1
 800a4a4:	0800a4e1 	.word	0x0800a4e1
 800a4a8:	0800a4e1 	.word	0x0800a4e1
 800a4ac:	0800a4d9 	.word	0x0800a4d9
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4b6:	e326      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a4b8:	2304      	movs	r3, #4
 800a4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4be:	e322      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a4c0:	2308      	movs	r3, #8
 800a4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4c6:	e31e      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a4c8:	2310      	movs	r3, #16
 800a4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ce:	e31a      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a4d0:	2320      	movs	r3, #32
 800a4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4d6:	e316      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a4d8:	2340      	movs	r3, #64	@ 0x40
 800a4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4de:	e312      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a4e0:	2380      	movs	r3, #128	@ 0x80
 800a4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4e6:	e30e      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a69      	ldr	r2, [pc, #420]	@ (800a694 <UART_SetConfig+0x33c>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d130      	bne.n	800a554 <UART_SetConfig+0x1fc>
 800a4f2:	4b67      	ldr	r3, [pc, #412]	@ (800a690 <UART_SetConfig+0x338>)
 800a4f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4f6:	f003 0307 	and.w	r3, r3, #7
 800a4fa:	2b05      	cmp	r3, #5
 800a4fc:	d826      	bhi.n	800a54c <UART_SetConfig+0x1f4>
 800a4fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a504 <UART_SetConfig+0x1ac>)
 800a500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a504:	0800a51d 	.word	0x0800a51d
 800a508:	0800a525 	.word	0x0800a525
 800a50c:	0800a52d 	.word	0x0800a52d
 800a510:	0800a535 	.word	0x0800a535
 800a514:	0800a53d 	.word	0x0800a53d
 800a518:	0800a545 	.word	0x0800a545
 800a51c:	2300      	movs	r3, #0
 800a51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a522:	e2f0      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a524:	2304      	movs	r3, #4
 800a526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a52a:	e2ec      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a52c:	2308      	movs	r3, #8
 800a52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a532:	e2e8      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a534:	2310      	movs	r3, #16
 800a536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a53a:	e2e4      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a53c:	2320      	movs	r3, #32
 800a53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a542:	e2e0      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a544:	2340      	movs	r3, #64	@ 0x40
 800a546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a54a:	e2dc      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a54c:	2380      	movs	r3, #128	@ 0x80
 800a54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a552:	e2d8      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a4f      	ldr	r2, [pc, #316]	@ (800a698 <UART_SetConfig+0x340>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d130      	bne.n	800a5c0 <UART_SetConfig+0x268>
 800a55e:	4b4c      	ldr	r3, [pc, #304]	@ (800a690 <UART_SetConfig+0x338>)
 800a560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a562:	f003 0307 	and.w	r3, r3, #7
 800a566:	2b05      	cmp	r3, #5
 800a568:	d826      	bhi.n	800a5b8 <UART_SetConfig+0x260>
 800a56a:	a201      	add	r2, pc, #4	@ (adr r2, 800a570 <UART_SetConfig+0x218>)
 800a56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a570:	0800a589 	.word	0x0800a589
 800a574:	0800a591 	.word	0x0800a591
 800a578:	0800a599 	.word	0x0800a599
 800a57c:	0800a5a1 	.word	0x0800a5a1
 800a580:	0800a5a9 	.word	0x0800a5a9
 800a584:	0800a5b1 	.word	0x0800a5b1
 800a588:	2300      	movs	r3, #0
 800a58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a58e:	e2ba      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a590:	2304      	movs	r3, #4
 800a592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a596:	e2b6      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a598:	2308      	movs	r3, #8
 800a59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a59e:	e2b2      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a5a0:	2310      	movs	r3, #16
 800a5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5a6:	e2ae      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a5a8:	2320      	movs	r3, #32
 800a5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ae:	e2aa      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a5b0:	2340      	movs	r3, #64	@ 0x40
 800a5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5b6:	e2a6      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a5b8:	2380      	movs	r3, #128	@ 0x80
 800a5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5be:	e2a2      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a35      	ldr	r2, [pc, #212]	@ (800a69c <UART_SetConfig+0x344>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d130      	bne.n	800a62c <UART_SetConfig+0x2d4>
 800a5ca:	4b31      	ldr	r3, [pc, #196]	@ (800a690 <UART_SetConfig+0x338>)
 800a5cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ce:	f003 0307 	and.w	r3, r3, #7
 800a5d2:	2b05      	cmp	r3, #5
 800a5d4:	d826      	bhi.n	800a624 <UART_SetConfig+0x2cc>
 800a5d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5dc <UART_SetConfig+0x284>)
 800a5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5dc:	0800a5f5 	.word	0x0800a5f5
 800a5e0:	0800a5fd 	.word	0x0800a5fd
 800a5e4:	0800a605 	.word	0x0800a605
 800a5e8:	0800a60d 	.word	0x0800a60d
 800a5ec:	0800a615 	.word	0x0800a615
 800a5f0:	0800a61d 	.word	0x0800a61d
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5fa:	e284      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a5fc:	2304      	movs	r3, #4
 800a5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a602:	e280      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a604:	2308      	movs	r3, #8
 800a606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a60a:	e27c      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a60c:	2310      	movs	r3, #16
 800a60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a612:	e278      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a614:	2320      	movs	r3, #32
 800a616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a61a:	e274      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a61c:	2340      	movs	r3, #64	@ 0x40
 800a61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a622:	e270      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a624:	2380      	movs	r3, #128	@ 0x80
 800a626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a62a:	e26c      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a1b      	ldr	r2, [pc, #108]	@ (800a6a0 <UART_SetConfig+0x348>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d142      	bne.n	800a6bc <UART_SetConfig+0x364>
 800a636:	4b16      	ldr	r3, [pc, #88]	@ (800a690 <UART_SetConfig+0x338>)
 800a638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a63a:	f003 0307 	and.w	r3, r3, #7
 800a63e:	2b05      	cmp	r3, #5
 800a640:	d838      	bhi.n	800a6b4 <UART_SetConfig+0x35c>
 800a642:	a201      	add	r2, pc, #4	@ (adr r2, 800a648 <UART_SetConfig+0x2f0>)
 800a644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a648:	0800a661 	.word	0x0800a661
 800a64c:	0800a669 	.word	0x0800a669
 800a650:	0800a671 	.word	0x0800a671
 800a654:	0800a679 	.word	0x0800a679
 800a658:	0800a6a5 	.word	0x0800a6a5
 800a65c:	0800a6ad 	.word	0x0800a6ad
 800a660:	2300      	movs	r3, #0
 800a662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a666:	e24e      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a668:	2304      	movs	r3, #4
 800a66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a66e:	e24a      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a670:	2308      	movs	r3, #8
 800a672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a676:	e246      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a678:	2310      	movs	r3, #16
 800a67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a67e:	e242      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a680:	cfff69f3 	.word	0xcfff69f3
 800a684:	58000c00 	.word	0x58000c00
 800a688:	11fff4ff 	.word	0x11fff4ff
 800a68c:	40011000 	.word	0x40011000
 800a690:	58024400 	.word	0x58024400
 800a694:	40004400 	.word	0x40004400
 800a698:	40004800 	.word	0x40004800
 800a69c:	40004c00 	.word	0x40004c00
 800a6a0:	40005000 	.word	0x40005000
 800a6a4:	2320      	movs	r3, #32
 800a6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6aa:	e22c      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a6ac:	2340      	movs	r3, #64	@ 0x40
 800a6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6b2:	e228      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a6b4:	2380      	movs	r3, #128	@ 0x80
 800a6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ba:	e224      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4ab1      	ldr	r2, [pc, #708]	@ (800a988 <UART_SetConfig+0x630>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d176      	bne.n	800a7b4 <UART_SetConfig+0x45c>
 800a6c6:	4bb1      	ldr	r3, [pc, #708]	@ (800a98c <UART_SetConfig+0x634>)
 800a6c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a6ce:	2b28      	cmp	r3, #40	@ 0x28
 800a6d0:	d86c      	bhi.n	800a7ac <UART_SetConfig+0x454>
 800a6d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a6d8 <UART_SetConfig+0x380>)
 800a6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d8:	0800a77d 	.word	0x0800a77d
 800a6dc:	0800a7ad 	.word	0x0800a7ad
 800a6e0:	0800a7ad 	.word	0x0800a7ad
 800a6e4:	0800a7ad 	.word	0x0800a7ad
 800a6e8:	0800a7ad 	.word	0x0800a7ad
 800a6ec:	0800a7ad 	.word	0x0800a7ad
 800a6f0:	0800a7ad 	.word	0x0800a7ad
 800a6f4:	0800a7ad 	.word	0x0800a7ad
 800a6f8:	0800a785 	.word	0x0800a785
 800a6fc:	0800a7ad 	.word	0x0800a7ad
 800a700:	0800a7ad 	.word	0x0800a7ad
 800a704:	0800a7ad 	.word	0x0800a7ad
 800a708:	0800a7ad 	.word	0x0800a7ad
 800a70c:	0800a7ad 	.word	0x0800a7ad
 800a710:	0800a7ad 	.word	0x0800a7ad
 800a714:	0800a7ad 	.word	0x0800a7ad
 800a718:	0800a78d 	.word	0x0800a78d
 800a71c:	0800a7ad 	.word	0x0800a7ad
 800a720:	0800a7ad 	.word	0x0800a7ad
 800a724:	0800a7ad 	.word	0x0800a7ad
 800a728:	0800a7ad 	.word	0x0800a7ad
 800a72c:	0800a7ad 	.word	0x0800a7ad
 800a730:	0800a7ad 	.word	0x0800a7ad
 800a734:	0800a7ad 	.word	0x0800a7ad
 800a738:	0800a795 	.word	0x0800a795
 800a73c:	0800a7ad 	.word	0x0800a7ad
 800a740:	0800a7ad 	.word	0x0800a7ad
 800a744:	0800a7ad 	.word	0x0800a7ad
 800a748:	0800a7ad 	.word	0x0800a7ad
 800a74c:	0800a7ad 	.word	0x0800a7ad
 800a750:	0800a7ad 	.word	0x0800a7ad
 800a754:	0800a7ad 	.word	0x0800a7ad
 800a758:	0800a79d 	.word	0x0800a79d
 800a75c:	0800a7ad 	.word	0x0800a7ad
 800a760:	0800a7ad 	.word	0x0800a7ad
 800a764:	0800a7ad 	.word	0x0800a7ad
 800a768:	0800a7ad 	.word	0x0800a7ad
 800a76c:	0800a7ad 	.word	0x0800a7ad
 800a770:	0800a7ad 	.word	0x0800a7ad
 800a774:	0800a7ad 	.word	0x0800a7ad
 800a778:	0800a7a5 	.word	0x0800a7a5
 800a77c:	2301      	movs	r3, #1
 800a77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a782:	e1c0      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a784:	2304      	movs	r3, #4
 800a786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a78a:	e1bc      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a78c:	2308      	movs	r3, #8
 800a78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a792:	e1b8      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a794:	2310      	movs	r3, #16
 800a796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a79a:	e1b4      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a79c:	2320      	movs	r3, #32
 800a79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7a2:	e1b0      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a7a4:	2340      	movs	r3, #64	@ 0x40
 800a7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7aa:	e1ac      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a7ac:	2380      	movs	r3, #128	@ 0x80
 800a7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7b2:	e1a8      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a75      	ldr	r2, [pc, #468]	@ (800a990 <UART_SetConfig+0x638>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d130      	bne.n	800a820 <UART_SetConfig+0x4c8>
 800a7be:	4b73      	ldr	r3, [pc, #460]	@ (800a98c <UART_SetConfig+0x634>)
 800a7c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7c2:	f003 0307 	and.w	r3, r3, #7
 800a7c6:	2b05      	cmp	r3, #5
 800a7c8:	d826      	bhi.n	800a818 <UART_SetConfig+0x4c0>
 800a7ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a7d0 <UART_SetConfig+0x478>)
 800a7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d0:	0800a7e9 	.word	0x0800a7e9
 800a7d4:	0800a7f1 	.word	0x0800a7f1
 800a7d8:	0800a7f9 	.word	0x0800a7f9
 800a7dc:	0800a801 	.word	0x0800a801
 800a7e0:	0800a809 	.word	0x0800a809
 800a7e4:	0800a811 	.word	0x0800a811
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ee:	e18a      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a7f0:	2304      	movs	r3, #4
 800a7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7f6:	e186      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a7f8:	2308      	movs	r3, #8
 800a7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7fe:	e182      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a800:	2310      	movs	r3, #16
 800a802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a806:	e17e      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a808:	2320      	movs	r3, #32
 800a80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a80e:	e17a      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a810:	2340      	movs	r3, #64	@ 0x40
 800a812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a816:	e176      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a818:	2380      	movs	r3, #128	@ 0x80
 800a81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a81e:	e172      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a5b      	ldr	r2, [pc, #364]	@ (800a994 <UART_SetConfig+0x63c>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d130      	bne.n	800a88c <UART_SetConfig+0x534>
 800a82a:	4b58      	ldr	r3, [pc, #352]	@ (800a98c <UART_SetConfig+0x634>)
 800a82c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a82e:	f003 0307 	and.w	r3, r3, #7
 800a832:	2b05      	cmp	r3, #5
 800a834:	d826      	bhi.n	800a884 <UART_SetConfig+0x52c>
 800a836:	a201      	add	r2, pc, #4	@ (adr r2, 800a83c <UART_SetConfig+0x4e4>)
 800a838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83c:	0800a855 	.word	0x0800a855
 800a840:	0800a85d 	.word	0x0800a85d
 800a844:	0800a865 	.word	0x0800a865
 800a848:	0800a86d 	.word	0x0800a86d
 800a84c:	0800a875 	.word	0x0800a875
 800a850:	0800a87d 	.word	0x0800a87d
 800a854:	2300      	movs	r3, #0
 800a856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a85a:	e154      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a85c:	2304      	movs	r3, #4
 800a85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a862:	e150      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a864:	2308      	movs	r3, #8
 800a866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a86a:	e14c      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a86c:	2310      	movs	r3, #16
 800a86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a872:	e148      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a874:	2320      	movs	r3, #32
 800a876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a87a:	e144      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a87c:	2340      	movs	r3, #64	@ 0x40
 800a87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a882:	e140      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a884:	2380      	movs	r3, #128	@ 0x80
 800a886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a88a:	e13c      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a41      	ldr	r2, [pc, #260]	@ (800a998 <UART_SetConfig+0x640>)
 800a892:	4293      	cmp	r3, r2
 800a894:	f040 8082 	bne.w	800a99c <UART_SetConfig+0x644>
 800a898:	4b3c      	ldr	r3, [pc, #240]	@ (800a98c <UART_SetConfig+0x634>)
 800a89a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a89c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a8a0:	2b28      	cmp	r3, #40	@ 0x28
 800a8a2:	d86d      	bhi.n	800a980 <UART_SetConfig+0x628>
 800a8a4:	a201      	add	r2, pc, #4	@ (adr r2, 800a8ac <UART_SetConfig+0x554>)
 800a8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8aa:	bf00      	nop
 800a8ac:	0800a951 	.word	0x0800a951
 800a8b0:	0800a981 	.word	0x0800a981
 800a8b4:	0800a981 	.word	0x0800a981
 800a8b8:	0800a981 	.word	0x0800a981
 800a8bc:	0800a981 	.word	0x0800a981
 800a8c0:	0800a981 	.word	0x0800a981
 800a8c4:	0800a981 	.word	0x0800a981
 800a8c8:	0800a981 	.word	0x0800a981
 800a8cc:	0800a959 	.word	0x0800a959
 800a8d0:	0800a981 	.word	0x0800a981
 800a8d4:	0800a981 	.word	0x0800a981
 800a8d8:	0800a981 	.word	0x0800a981
 800a8dc:	0800a981 	.word	0x0800a981
 800a8e0:	0800a981 	.word	0x0800a981
 800a8e4:	0800a981 	.word	0x0800a981
 800a8e8:	0800a981 	.word	0x0800a981
 800a8ec:	0800a961 	.word	0x0800a961
 800a8f0:	0800a981 	.word	0x0800a981
 800a8f4:	0800a981 	.word	0x0800a981
 800a8f8:	0800a981 	.word	0x0800a981
 800a8fc:	0800a981 	.word	0x0800a981
 800a900:	0800a981 	.word	0x0800a981
 800a904:	0800a981 	.word	0x0800a981
 800a908:	0800a981 	.word	0x0800a981
 800a90c:	0800a969 	.word	0x0800a969
 800a910:	0800a981 	.word	0x0800a981
 800a914:	0800a981 	.word	0x0800a981
 800a918:	0800a981 	.word	0x0800a981
 800a91c:	0800a981 	.word	0x0800a981
 800a920:	0800a981 	.word	0x0800a981
 800a924:	0800a981 	.word	0x0800a981
 800a928:	0800a981 	.word	0x0800a981
 800a92c:	0800a971 	.word	0x0800a971
 800a930:	0800a981 	.word	0x0800a981
 800a934:	0800a981 	.word	0x0800a981
 800a938:	0800a981 	.word	0x0800a981
 800a93c:	0800a981 	.word	0x0800a981
 800a940:	0800a981 	.word	0x0800a981
 800a944:	0800a981 	.word	0x0800a981
 800a948:	0800a981 	.word	0x0800a981
 800a94c:	0800a979 	.word	0x0800a979
 800a950:	2301      	movs	r3, #1
 800a952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a956:	e0d6      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a958:	2304      	movs	r3, #4
 800a95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a95e:	e0d2      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a960:	2308      	movs	r3, #8
 800a962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a966:	e0ce      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a968:	2310      	movs	r3, #16
 800a96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a96e:	e0ca      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a970:	2320      	movs	r3, #32
 800a972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a976:	e0c6      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a978:	2340      	movs	r3, #64	@ 0x40
 800a97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a97e:	e0c2      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a980:	2380      	movs	r3, #128	@ 0x80
 800a982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a986:	e0be      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800a988:	40011400 	.word	0x40011400
 800a98c:	58024400 	.word	0x58024400
 800a990:	40007800 	.word	0x40007800
 800a994:	40007c00 	.word	0x40007c00
 800a998:	40011800 	.word	0x40011800
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4aad      	ldr	r2, [pc, #692]	@ (800ac58 <UART_SetConfig+0x900>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d176      	bne.n	800aa94 <UART_SetConfig+0x73c>
 800a9a6:	4bad      	ldr	r3, [pc, #692]	@ (800ac5c <UART_SetConfig+0x904>)
 800a9a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a9ae:	2b28      	cmp	r3, #40	@ 0x28
 800a9b0:	d86c      	bhi.n	800aa8c <UART_SetConfig+0x734>
 800a9b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a9b8 <UART_SetConfig+0x660>)
 800a9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b8:	0800aa5d 	.word	0x0800aa5d
 800a9bc:	0800aa8d 	.word	0x0800aa8d
 800a9c0:	0800aa8d 	.word	0x0800aa8d
 800a9c4:	0800aa8d 	.word	0x0800aa8d
 800a9c8:	0800aa8d 	.word	0x0800aa8d
 800a9cc:	0800aa8d 	.word	0x0800aa8d
 800a9d0:	0800aa8d 	.word	0x0800aa8d
 800a9d4:	0800aa8d 	.word	0x0800aa8d
 800a9d8:	0800aa65 	.word	0x0800aa65
 800a9dc:	0800aa8d 	.word	0x0800aa8d
 800a9e0:	0800aa8d 	.word	0x0800aa8d
 800a9e4:	0800aa8d 	.word	0x0800aa8d
 800a9e8:	0800aa8d 	.word	0x0800aa8d
 800a9ec:	0800aa8d 	.word	0x0800aa8d
 800a9f0:	0800aa8d 	.word	0x0800aa8d
 800a9f4:	0800aa8d 	.word	0x0800aa8d
 800a9f8:	0800aa6d 	.word	0x0800aa6d
 800a9fc:	0800aa8d 	.word	0x0800aa8d
 800aa00:	0800aa8d 	.word	0x0800aa8d
 800aa04:	0800aa8d 	.word	0x0800aa8d
 800aa08:	0800aa8d 	.word	0x0800aa8d
 800aa0c:	0800aa8d 	.word	0x0800aa8d
 800aa10:	0800aa8d 	.word	0x0800aa8d
 800aa14:	0800aa8d 	.word	0x0800aa8d
 800aa18:	0800aa75 	.word	0x0800aa75
 800aa1c:	0800aa8d 	.word	0x0800aa8d
 800aa20:	0800aa8d 	.word	0x0800aa8d
 800aa24:	0800aa8d 	.word	0x0800aa8d
 800aa28:	0800aa8d 	.word	0x0800aa8d
 800aa2c:	0800aa8d 	.word	0x0800aa8d
 800aa30:	0800aa8d 	.word	0x0800aa8d
 800aa34:	0800aa8d 	.word	0x0800aa8d
 800aa38:	0800aa7d 	.word	0x0800aa7d
 800aa3c:	0800aa8d 	.word	0x0800aa8d
 800aa40:	0800aa8d 	.word	0x0800aa8d
 800aa44:	0800aa8d 	.word	0x0800aa8d
 800aa48:	0800aa8d 	.word	0x0800aa8d
 800aa4c:	0800aa8d 	.word	0x0800aa8d
 800aa50:	0800aa8d 	.word	0x0800aa8d
 800aa54:	0800aa8d 	.word	0x0800aa8d
 800aa58:	0800aa85 	.word	0x0800aa85
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa62:	e050      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800aa64:	2304      	movs	r3, #4
 800aa66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa6a:	e04c      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800aa6c:	2308      	movs	r3, #8
 800aa6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa72:	e048      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800aa74:	2310      	movs	r3, #16
 800aa76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa7a:	e044      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800aa7c:	2320      	movs	r3, #32
 800aa7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa82:	e040      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800aa84:	2340      	movs	r3, #64	@ 0x40
 800aa86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa8a:	e03c      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800aa8c:	2380      	movs	r3, #128	@ 0x80
 800aa8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa92:	e038      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a71      	ldr	r2, [pc, #452]	@ (800ac60 <UART_SetConfig+0x908>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d130      	bne.n	800ab00 <UART_SetConfig+0x7a8>
 800aa9e:	4b6f      	ldr	r3, [pc, #444]	@ (800ac5c <UART_SetConfig+0x904>)
 800aaa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaa2:	f003 0307 	and.w	r3, r3, #7
 800aaa6:	2b05      	cmp	r3, #5
 800aaa8:	d826      	bhi.n	800aaf8 <UART_SetConfig+0x7a0>
 800aaaa:	a201      	add	r2, pc, #4	@ (adr r2, 800aab0 <UART_SetConfig+0x758>)
 800aaac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab0:	0800aac9 	.word	0x0800aac9
 800aab4:	0800aad1 	.word	0x0800aad1
 800aab8:	0800aad9 	.word	0x0800aad9
 800aabc:	0800aae1 	.word	0x0800aae1
 800aac0:	0800aae9 	.word	0x0800aae9
 800aac4:	0800aaf1 	.word	0x0800aaf1
 800aac8:	2302      	movs	r3, #2
 800aaca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aace:	e01a      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800aad0:	2304      	movs	r3, #4
 800aad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aad6:	e016      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800aad8:	2308      	movs	r3, #8
 800aada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aade:	e012      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800aae0:	2310      	movs	r3, #16
 800aae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aae6:	e00e      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800aae8:	2320      	movs	r3, #32
 800aaea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaee:	e00a      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800aaf0:	2340      	movs	r3, #64	@ 0x40
 800aaf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaf6:	e006      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800aaf8:	2380      	movs	r3, #128	@ 0x80
 800aafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aafe:	e002      	b.n	800ab06 <UART_SetConfig+0x7ae>
 800ab00:	2380      	movs	r3, #128	@ 0x80
 800ab02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a55      	ldr	r2, [pc, #340]	@ (800ac60 <UART_SetConfig+0x908>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	f040 80f8 	bne.w	800ad02 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ab12:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ab16:	2b20      	cmp	r3, #32
 800ab18:	dc46      	bgt.n	800aba8 <UART_SetConfig+0x850>
 800ab1a:	2b02      	cmp	r3, #2
 800ab1c:	db75      	blt.n	800ac0a <UART_SetConfig+0x8b2>
 800ab1e:	3b02      	subs	r3, #2
 800ab20:	2b1e      	cmp	r3, #30
 800ab22:	d872      	bhi.n	800ac0a <UART_SetConfig+0x8b2>
 800ab24:	a201      	add	r2, pc, #4	@ (adr r2, 800ab2c <UART_SetConfig+0x7d4>)
 800ab26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab2a:	bf00      	nop
 800ab2c:	0800abaf 	.word	0x0800abaf
 800ab30:	0800ac0b 	.word	0x0800ac0b
 800ab34:	0800abb7 	.word	0x0800abb7
 800ab38:	0800ac0b 	.word	0x0800ac0b
 800ab3c:	0800ac0b 	.word	0x0800ac0b
 800ab40:	0800ac0b 	.word	0x0800ac0b
 800ab44:	0800abc7 	.word	0x0800abc7
 800ab48:	0800ac0b 	.word	0x0800ac0b
 800ab4c:	0800ac0b 	.word	0x0800ac0b
 800ab50:	0800ac0b 	.word	0x0800ac0b
 800ab54:	0800ac0b 	.word	0x0800ac0b
 800ab58:	0800ac0b 	.word	0x0800ac0b
 800ab5c:	0800ac0b 	.word	0x0800ac0b
 800ab60:	0800ac0b 	.word	0x0800ac0b
 800ab64:	0800abd7 	.word	0x0800abd7
 800ab68:	0800ac0b 	.word	0x0800ac0b
 800ab6c:	0800ac0b 	.word	0x0800ac0b
 800ab70:	0800ac0b 	.word	0x0800ac0b
 800ab74:	0800ac0b 	.word	0x0800ac0b
 800ab78:	0800ac0b 	.word	0x0800ac0b
 800ab7c:	0800ac0b 	.word	0x0800ac0b
 800ab80:	0800ac0b 	.word	0x0800ac0b
 800ab84:	0800ac0b 	.word	0x0800ac0b
 800ab88:	0800ac0b 	.word	0x0800ac0b
 800ab8c:	0800ac0b 	.word	0x0800ac0b
 800ab90:	0800ac0b 	.word	0x0800ac0b
 800ab94:	0800ac0b 	.word	0x0800ac0b
 800ab98:	0800ac0b 	.word	0x0800ac0b
 800ab9c:	0800ac0b 	.word	0x0800ac0b
 800aba0:	0800ac0b 	.word	0x0800ac0b
 800aba4:	0800abfd 	.word	0x0800abfd
 800aba8:	2b40      	cmp	r3, #64	@ 0x40
 800abaa:	d02a      	beq.n	800ac02 <UART_SetConfig+0x8aa>
 800abac:	e02d      	b.n	800ac0a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800abae:	f7fd fc79 	bl	80084a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800abb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800abb4:	e02f      	b.n	800ac16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800abba:	4618      	mov	r0, r3
 800abbc:	f7fd fc88 	bl	80084d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800abc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abc4:	e027      	b.n	800ac16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abc6:	f107 0318 	add.w	r3, r7, #24
 800abca:	4618      	mov	r0, r3
 800abcc:	f7fd fdd4 	bl	8008778 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd4:	e01f      	b.n	800ac16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abd6:	4b21      	ldr	r3, [pc, #132]	@ (800ac5c <UART_SetConfig+0x904>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f003 0320 	and.w	r3, r3, #32
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d009      	beq.n	800abf6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800abe2:	4b1e      	ldr	r3, [pc, #120]	@ (800ac5c <UART_SetConfig+0x904>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	08db      	lsrs	r3, r3, #3
 800abe8:	f003 0303 	and.w	r3, r3, #3
 800abec:	4a1d      	ldr	r2, [pc, #116]	@ (800ac64 <UART_SetConfig+0x90c>)
 800abee:	fa22 f303 	lsr.w	r3, r2, r3
 800abf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800abf4:	e00f      	b.n	800ac16 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800abf6:	4b1b      	ldr	r3, [pc, #108]	@ (800ac64 <UART_SetConfig+0x90c>)
 800abf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abfa:	e00c      	b.n	800ac16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800abfc:	4b1a      	ldr	r3, [pc, #104]	@ (800ac68 <UART_SetConfig+0x910>)
 800abfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac00:	e009      	b.n	800ac16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac08:	e005      	b.n	800ac16 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ac14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f000 81ee 	beq.w	800affa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac22:	4a12      	ldr	r2, [pc, #72]	@ (800ac6c <UART_SetConfig+0x914>)
 800ac24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac28:	461a      	mov	r2, r3
 800ac2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac30:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	685a      	ldr	r2, [r3, #4]
 800ac36:	4613      	mov	r3, r2
 800ac38:	005b      	lsls	r3, r3, #1
 800ac3a:	4413      	add	r3, r2
 800ac3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d305      	bcc.n	800ac4e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d910      	bls.n	800ac70 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ac54:	e1d1      	b.n	800affa <UART_SetConfig+0xca2>
 800ac56:	bf00      	nop
 800ac58:	40011c00 	.word	0x40011c00
 800ac5c:	58024400 	.word	0x58024400
 800ac60:	58000c00 	.word	0x58000c00
 800ac64:	03d09000 	.word	0x03d09000
 800ac68:	003d0900 	.word	0x003d0900
 800ac6c:	08026cc0 	.word	0x08026cc0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac72:	2200      	movs	r2, #0
 800ac74:	60bb      	str	r3, [r7, #8]
 800ac76:	60fa      	str	r2, [r7, #12]
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac7c:	4ac0      	ldr	r2, [pc, #768]	@ (800af80 <UART_SetConfig+0xc28>)
 800ac7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	2200      	movs	r2, #0
 800ac86:	603b      	str	r3, [r7, #0]
 800ac88:	607a      	str	r2, [r7, #4]
 800ac8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ac92:	f7f5 fb95 	bl	80003c0 <__aeabi_uldivmod>
 800ac96:	4602      	mov	r2, r0
 800ac98:	460b      	mov	r3, r1
 800ac9a:	4610      	mov	r0, r2
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	f04f 0200 	mov.w	r2, #0
 800aca2:	f04f 0300 	mov.w	r3, #0
 800aca6:	020b      	lsls	r3, r1, #8
 800aca8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800acac:	0202      	lsls	r2, r0, #8
 800acae:	6979      	ldr	r1, [r7, #20]
 800acb0:	6849      	ldr	r1, [r1, #4]
 800acb2:	0849      	lsrs	r1, r1, #1
 800acb4:	2000      	movs	r0, #0
 800acb6:	460c      	mov	r4, r1
 800acb8:	4605      	mov	r5, r0
 800acba:	eb12 0804 	adds.w	r8, r2, r4
 800acbe:	eb43 0905 	adc.w	r9, r3, r5
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	469a      	mov	sl, r3
 800acca:	4693      	mov	fp, r2
 800accc:	4652      	mov	r2, sl
 800acce:	465b      	mov	r3, fp
 800acd0:	4640      	mov	r0, r8
 800acd2:	4649      	mov	r1, r9
 800acd4:	f7f5 fb74 	bl	80003c0 <__aeabi_uldivmod>
 800acd8:	4602      	mov	r2, r0
 800acda:	460b      	mov	r3, r1
 800acdc:	4613      	mov	r3, r2
 800acde:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ace0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ace6:	d308      	bcc.n	800acfa <UART_SetConfig+0x9a2>
 800ace8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800acee:	d204      	bcs.n	800acfa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800acf6:	60da      	str	r2, [r3, #12]
 800acf8:	e17f      	b.n	800affa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800acfa:	2301      	movs	r3, #1
 800acfc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ad00:	e17b      	b.n	800affa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	69db      	ldr	r3, [r3, #28]
 800ad06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad0a:	f040 80bd 	bne.w	800ae88 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ad0e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ad12:	2b20      	cmp	r3, #32
 800ad14:	dc48      	bgt.n	800ada8 <UART_SetConfig+0xa50>
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	db7b      	blt.n	800ae12 <UART_SetConfig+0xaba>
 800ad1a:	2b20      	cmp	r3, #32
 800ad1c:	d879      	bhi.n	800ae12 <UART_SetConfig+0xaba>
 800ad1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad24 <UART_SetConfig+0x9cc>)
 800ad20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad24:	0800adaf 	.word	0x0800adaf
 800ad28:	0800adb7 	.word	0x0800adb7
 800ad2c:	0800ae13 	.word	0x0800ae13
 800ad30:	0800ae13 	.word	0x0800ae13
 800ad34:	0800adbf 	.word	0x0800adbf
 800ad38:	0800ae13 	.word	0x0800ae13
 800ad3c:	0800ae13 	.word	0x0800ae13
 800ad40:	0800ae13 	.word	0x0800ae13
 800ad44:	0800adcf 	.word	0x0800adcf
 800ad48:	0800ae13 	.word	0x0800ae13
 800ad4c:	0800ae13 	.word	0x0800ae13
 800ad50:	0800ae13 	.word	0x0800ae13
 800ad54:	0800ae13 	.word	0x0800ae13
 800ad58:	0800ae13 	.word	0x0800ae13
 800ad5c:	0800ae13 	.word	0x0800ae13
 800ad60:	0800ae13 	.word	0x0800ae13
 800ad64:	0800addf 	.word	0x0800addf
 800ad68:	0800ae13 	.word	0x0800ae13
 800ad6c:	0800ae13 	.word	0x0800ae13
 800ad70:	0800ae13 	.word	0x0800ae13
 800ad74:	0800ae13 	.word	0x0800ae13
 800ad78:	0800ae13 	.word	0x0800ae13
 800ad7c:	0800ae13 	.word	0x0800ae13
 800ad80:	0800ae13 	.word	0x0800ae13
 800ad84:	0800ae13 	.word	0x0800ae13
 800ad88:	0800ae13 	.word	0x0800ae13
 800ad8c:	0800ae13 	.word	0x0800ae13
 800ad90:	0800ae13 	.word	0x0800ae13
 800ad94:	0800ae13 	.word	0x0800ae13
 800ad98:	0800ae13 	.word	0x0800ae13
 800ad9c:	0800ae13 	.word	0x0800ae13
 800ada0:	0800ae13 	.word	0x0800ae13
 800ada4:	0800ae05 	.word	0x0800ae05
 800ada8:	2b40      	cmp	r3, #64	@ 0x40
 800adaa:	d02e      	beq.n	800ae0a <UART_SetConfig+0xab2>
 800adac:	e031      	b.n	800ae12 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adae:	f7fb fc99 	bl	80066e4 <HAL_RCC_GetPCLK1Freq>
 800adb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800adb4:	e033      	b.n	800ae1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800adb6:	f7fb fcab 	bl	8006710 <HAL_RCC_GetPCLK2Freq>
 800adba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800adbc:	e02f      	b.n	800ae1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fd fb84 	bl	80084d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800adc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adcc:	e027      	b.n	800ae1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adce:	f107 0318 	add.w	r3, r7, #24
 800add2:	4618      	mov	r0, r3
 800add4:	f7fd fcd0 	bl	8008778 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800addc:	e01f      	b.n	800ae1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adde:	4b69      	ldr	r3, [pc, #420]	@ (800af84 <UART_SetConfig+0xc2c>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f003 0320 	and.w	r3, r3, #32
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d009      	beq.n	800adfe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800adea:	4b66      	ldr	r3, [pc, #408]	@ (800af84 <UART_SetConfig+0xc2c>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	08db      	lsrs	r3, r3, #3
 800adf0:	f003 0303 	and.w	r3, r3, #3
 800adf4:	4a64      	ldr	r2, [pc, #400]	@ (800af88 <UART_SetConfig+0xc30>)
 800adf6:	fa22 f303 	lsr.w	r3, r2, r3
 800adfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800adfc:	e00f      	b.n	800ae1e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800adfe:	4b62      	ldr	r3, [pc, #392]	@ (800af88 <UART_SetConfig+0xc30>)
 800ae00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae02:	e00c      	b.n	800ae1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae04:	4b61      	ldr	r3, [pc, #388]	@ (800af8c <UART_SetConfig+0xc34>)
 800ae06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae08:	e009      	b.n	800ae1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae10:	e005      	b.n	800ae1e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ae12:	2300      	movs	r3, #0
 800ae14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ae1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f000 80ea 	beq.w	800affa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae2a:	4a55      	ldr	r2, [pc, #340]	@ (800af80 <UART_SetConfig+0xc28>)
 800ae2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae30:	461a      	mov	r2, r3
 800ae32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae34:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae38:	005a      	lsls	r2, r3, #1
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	085b      	lsrs	r3, r3, #1
 800ae40:	441a      	add	r2, r3
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae4e:	2b0f      	cmp	r3, #15
 800ae50:	d916      	bls.n	800ae80 <UART_SetConfig+0xb28>
 800ae52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae58:	d212      	bcs.n	800ae80 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	f023 030f 	bic.w	r3, r3, #15
 800ae62:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae66:	085b      	lsrs	r3, r3, #1
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	f003 0307 	and.w	r3, r3, #7
 800ae6e:	b29a      	uxth	r2, r3
 800ae70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ae72:	4313      	orrs	r3, r2
 800ae74:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ae7c:	60da      	str	r2, [r3, #12]
 800ae7e:	e0bc      	b.n	800affa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ae86:	e0b8      	b.n	800affa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae88:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ae8c:	2b20      	cmp	r3, #32
 800ae8e:	dc4b      	bgt.n	800af28 <UART_SetConfig+0xbd0>
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	f2c0 8087 	blt.w	800afa4 <UART_SetConfig+0xc4c>
 800ae96:	2b20      	cmp	r3, #32
 800ae98:	f200 8084 	bhi.w	800afa4 <UART_SetConfig+0xc4c>
 800ae9c:	a201      	add	r2, pc, #4	@ (adr r2, 800aea4 <UART_SetConfig+0xb4c>)
 800ae9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea2:	bf00      	nop
 800aea4:	0800af2f 	.word	0x0800af2f
 800aea8:	0800af37 	.word	0x0800af37
 800aeac:	0800afa5 	.word	0x0800afa5
 800aeb0:	0800afa5 	.word	0x0800afa5
 800aeb4:	0800af3f 	.word	0x0800af3f
 800aeb8:	0800afa5 	.word	0x0800afa5
 800aebc:	0800afa5 	.word	0x0800afa5
 800aec0:	0800afa5 	.word	0x0800afa5
 800aec4:	0800af4f 	.word	0x0800af4f
 800aec8:	0800afa5 	.word	0x0800afa5
 800aecc:	0800afa5 	.word	0x0800afa5
 800aed0:	0800afa5 	.word	0x0800afa5
 800aed4:	0800afa5 	.word	0x0800afa5
 800aed8:	0800afa5 	.word	0x0800afa5
 800aedc:	0800afa5 	.word	0x0800afa5
 800aee0:	0800afa5 	.word	0x0800afa5
 800aee4:	0800af5f 	.word	0x0800af5f
 800aee8:	0800afa5 	.word	0x0800afa5
 800aeec:	0800afa5 	.word	0x0800afa5
 800aef0:	0800afa5 	.word	0x0800afa5
 800aef4:	0800afa5 	.word	0x0800afa5
 800aef8:	0800afa5 	.word	0x0800afa5
 800aefc:	0800afa5 	.word	0x0800afa5
 800af00:	0800afa5 	.word	0x0800afa5
 800af04:	0800afa5 	.word	0x0800afa5
 800af08:	0800afa5 	.word	0x0800afa5
 800af0c:	0800afa5 	.word	0x0800afa5
 800af10:	0800afa5 	.word	0x0800afa5
 800af14:	0800afa5 	.word	0x0800afa5
 800af18:	0800afa5 	.word	0x0800afa5
 800af1c:	0800afa5 	.word	0x0800afa5
 800af20:	0800afa5 	.word	0x0800afa5
 800af24:	0800af97 	.word	0x0800af97
 800af28:	2b40      	cmp	r3, #64	@ 0x40
 800af2a:	d037      	beq.n	800af9c <UART_SetConfig+0xc44>
 800af2c:	e03a      	b.n	800afa4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af2e:	f7fb fbd9 	bl	80066e4 <HAL_RCC_GetPCLK1Freq>
 800af32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af34:	e03c      	b.n	800afb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af36:	f7fb fbeb 	bl	8006710 <HAL_RCC_GetPCLK2Freq>
 800af3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af3c:	e038      	b.n	800afb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af42:	4618      	mov	r0, r3
 800af44:	f7fd fac4 	bl	80084d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af4c:	e030      	b.n	800afb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af4e:	f107 0318 	add.w	r3, r7, #24
 800af52:	4618      	mov	r0, r3
 800af54:	f7fd fc10 	bl	8008778 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af5c:	e028      	b.n	800afb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af5e:	4b09      	ldr	r3, [pc, #36]	@ (800af84 <UART_SetConfig+0xc2c>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f003 0320 	and.w	r3, r3, #32
 800af66:	2b00      	cmp	r3, #0
 800af68:	d012      	beq.n	800af90 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af6a:	4b06      	ldr	r3, [pc, #24]	@ (800af84 <UART_SetConfig+0xc2c>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	08db      	lsrs	r3, r3, #3
 800af70:	f003 0303 	and.w	r3, r3, #3
 800af74:	4a04      	ldr	r2, [pc, #16]	@ (800af88 <UART_SetConfig+0xc30>)
 800af76:	fa22 f303 	lsr.w	r3, r2, r3
 800af7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af7c:	e018      	b.n	800afb0 <UART_SetConfig+0xc58>
 800af7e:	bf00      	nop
 800af80:	08026cc0 	.word	0x08026cc0
 800af84:	58024400 	.word	0x58024400
 800af88:	03d09000 	.word	0x03d09000
 800af8c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800af90:	4b24      	ldr	r3, [pc, #144]	@ (800b024 <UART_SetConfig+0xccc>)
 800af92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af94:	e00c      	b.n	800afb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af96:	4b24      	ldr	r3, [pc, #144]	@ (800b028 <UART_SetConfig+0xcd0>)
 800af98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af9a:	e009      	b.n	800afb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afa2:	e005      	b.n	800afb0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800afa4:	2300      	movs	r3, #0
 800afa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800afa8:	2301      	movs	r3, #1
 800afaa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800afae:	bf00      	nop
    }

    if (pclk != 0U)
 800afb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d021      	beq.n	800affa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afba:	4a1c      	ldr	r2, [pc, #112]	@ (800b02c <UART_SetConfig+0xcd4>)
 800afbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afc0:	461a      	mov	r2, r3
 800afc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afc4:	fbb3 f2f2 	udiv	r2, r3, r2
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	085b      	lsrs	r3, r3, #1
 800afce:	441a      	add	r2, r3
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800afd8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afdc:	2b0f      	cmp	r3, #15
 800afde:	d909      	bls.n	800aff4 <UART_SetConfig+0xc9c>
 800afe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afe6:	d205      	bcs.n	800aff4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800afe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afea:	b29a      	uxth	r2, r3
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	60da      	str	r2, [r3, #12]
 800aff2:	e002      	b.n	800affa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800aff4:	2301      	movs	r3, #1
 800aff6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	2201      	movs	r2, #1
 800affe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	2201      	movs	r2, #1
 800b006:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	2200      	movs	r2, #0
 800b00e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	2200      	movs	r2, #0
 800b014:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b016:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3748      	adds	r7, #72	@ 0x48
 800b01e:	46bd      	mov	sp, r7
 800b020:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b024:	03d09000 	.word	0x03d09000
 800b028:	003d0900 	.word	0x003d0900
 800b02c:	08026cc0 	.word	0x08026cc0

0800b030 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b03c:	f003 0308 	and.w	r3, r3, #8
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00a      	beq.n	800b05a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	430a      	orrs	r2, r1
 800b058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b05e:	f003 0301 	and.w	r3, r3, #1
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00a      	beq.n	800b07c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	430a      	orrs	r2, r1
 800b07a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b080:	f003 0302 	and.w	r3, r3, #2
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00a      	beq.n	800b09e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	430a      	orrs	r2, r1
 800b09c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0a2:	f003 0304 	and.w	r3, r3, #4
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00a      	beq.n	800b0c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	430a      	orrs	r2, r1
 800b0be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0c4:	f003 0310 	and.w	r3, r3, #16
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d00a      	beq.n	800b0e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	430a      	orrs	r2, r1
 800b0e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0e6:	f003 0320 	and.w	r3, r3, #32
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d00a      	beq.n	800b104 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	689b      	ldr	r3, [r3, #8]
 800b0f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	430a      	orrs	r2, r1
 800b102:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d01a      	beq.n	800b146 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	430a      	orrs	r2, r1
 800b124:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b12a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b12e:	d10a      	bne.n	800b146 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	430a      	orrs	r2, r1
 800b144:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b14a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00a      	beq.n	800b168 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	430a      	orrs	r2, r1
 800b166:	605a      	str	r2, [r3, #4]
  }
}
 800b168:	bf00      	nop
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b098      	sub	sp, #96	@ 0x60
 800b178:	af02      	add	r7, sp, #8
 800b17a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b184:	f7f6 fc6e 	bl	8001a64 <HAL_GetTick>
 800b188:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f003 0308 	and.w	r3, r3, #8
 800b194:	2b08      	cmp	r3, #8
 800b196:	d12f      	bne.n	800b1f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b198:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b19c:	9300      	str	r3, [sp, #0]
 800b19e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 f88e 	bl	800b2c8 <UART_WaitOnFlagUntilTimeout>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d022      	beq.n	800b1f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ba:	e853 3f00 	ldrex	r3, [r3]
 800b1be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b1c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b1c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b1d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b1d8:	e841 2300 	strex	r3, r2, [r1]
 800b1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b1de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1e6      	bne.n	800b1b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2220      	movs	r2, #32
 800b1e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1f4:	2303      	movs	r3, #3
 800b1f6:	e063      	b.n	800b2c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f003 0304 	and.w	r3, r3, #4
 800b202:	2b04      	cmp	r3, #4
 800b204:	d149      	bne.n	800b29a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b206:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b20a:	9300      	str	r3, [sp, #0]
 800b20c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b20e:	2200      	movs	r2, #0
 800b210:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 f857 	bl	800b2c8 <UART_WaitOnFlagUntilTimeout>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d03c      	beq.n	800b29a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b228:	e853 3f00 	ldrex	r3, [r3]
 800b22c:	623b      	str	r3, [r7, #32]
   return(result);
 800b22e:	6a3b      	ldr	r3, [r7, #32]
 800b230:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b234:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	461a      	mov	r2, r3
 800b23c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b23e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b240:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b242:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b246:	e841 2300 	strex	r3, r2, [r1]
 800b24a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1e6      	bne.n	800b220 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	3308      	adds	r3, #8
 800b258:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	e853 3f00 	ldrex	r3, [r3]
 800b260:	60fb      	str	r3, [r7, #12]
   return(result);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f023 0301 	bic.w	r3, r3, #1
 800b268:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	3308      	adds	r3, #8
 800b270:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b272:	61fa      	str	r2, [r7, #28]
 800b274:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b276:	69b9      	ldr	r1, [r7, #24]
 800b278:	69fa      	ldr	r2, [r7, #28]
 800b27a:	e841 2300 	strex	r3, r2, [r1]
 800b27e:	617b      	str	r3, [r7, #20]
   return(result);
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d1e5      	bne.n	800b252 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2220      	movs	r2, #32
 800b28a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b296:	2303      	movs	r3, #3
 800b298:	e012      	b.n	800b2c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2220      	movs	r2, #32
 800b29e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2220      	movs	r2, #32
 800b2a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3758      	adds	r7, #88	@ 0x58
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	603b      	str	r3, [r7, #0]
 800b2d4:	4613      	mov	r3, r2
 800b2d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2d8:	e04f      	b.n	800b37a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e0:	d04b      	beq.n	800b37a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2e2:	f7f6 fbbf 	bl	8001a64 <HAL_GetTick>
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	1ad3      	subs	r3, r2, r3
 800b2ec:	69ba      	ldr	r2, [r7, #24]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d302      	bcc.n	800b2f8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b2f2:	69bb      	ldr	r3, [r7, #24]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d101      	bne.n	800b2fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b2f8:	2303      	movs	r3, #3
 800b2fa:	e04e      	b.n	800b39a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f003 0304 	and.w	r3, r3, #4
 800b306:	2b00      	cmp	r3, #0
 800b308:	d037      	beq.n	800b37a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	2b80      	cmp	r3, #128	@ 0x80
 800b30e:	d034      	beq.n	800b37a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	2b40      	cmp	r3, #64	@ 0x40
 800b314:	d031      	beq.n	800b37a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	69db      	ldr	r3, [r3, #28]
 800b31c:	f003 0308 	and.w	r3, r3, #8
 800b320:	2b08      	cmp	r3, #8
 800b322:	d110      	bne.n	800b346 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2208      	movs	r2, #8
 800b32a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	f000 f839 	bl	800b3a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2208      	movs	r2, #8
 800b336:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2200      	movs	r2, #0
 800b33e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	e029      	b.n	800b39a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	69db      	ldr	r3, [r3, #28]
 800b34c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b350:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b354:	d111      	bne.n	800b37a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b35e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b360:	68f8      	ldr	r0, [r7, #12]
 800b362:	f000 f81f 	bl	800b3a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2220      	movs	r2, #32
 800b36a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2200      	movs	r2, #0
 800b372:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b376:	2303      	movs	r3, #3
 800b378:	e00f      	b.n	800b39a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	69da      	ldr	r2, [r3, #28]
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	4013      	ands	r3, r2
 800b384:	68ba      	ldr	r2, [r7, #8]
 800b386:	429a      	cmp	r2, r3
 800b388:	bf0c      	ite	eq
 800b38a:	2301      	moveq	r3, #1
 800b38c:	2300      	movne	r3, #0
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	461a      	mov	r2, r3
 800b392:	79fb      	ldrb	r3, [r7, #7]
 800b394:	429a      	cmp	r2, r3
 800b396:	d0a0      	beq.n	800b2da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
	...

0800b3a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b095      	sub	sp, #84	@ 0x54
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3b4:	e853 3f00 	ldrex	r3, [r3]
 800b3b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b3d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b3d2:	e841 2300 	strex	r3, r2, [r1]
 800b3d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1e6      	bne.n	800b3ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	3308      	adds	r3, #8
 800b3e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e6:	6a3b      	ldr	r3, [r7, #32]
 800b3e8:	e853 3f00 	ldrex	r3, [r3]
 800b3ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3ee:	69fa      	ldr	r2, [r7, #28]
 800b3f0:	4b1e      	ldr	r3, [pc, #120]	@ (800b46c <UART_EndRxTransfer+0xc8>)
 800b3f2:	4013      	ands	r3, r2
 800b3f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	3308      	adds	r3, #8
 800b3fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b400:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b402:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b404:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b406:	e841 2300 	strex	r3, r2, [r1]
 800b40a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1e5      	bne.n	800b3de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b416:	2b01      	cmp	r3, #1
 800b418:	d118      	bne.n	800b44c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	e853 3f00 	ldrex	r3, [r3]
 800b426:	60bb      	str	r3, [r7, #8]
   return(result);
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	f023 0310 	bic.w	r3, r3, #16
 800b42e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	461a      	mov	r2, r3
 800b436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b438:	61bb      	str	r3, [r7, #24]
 800b43a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b43c:	6979      	ldr	r1, [r7, #20]
 800b43e:	69ba      	ldr	r2, [r7, #24]
 800b440:	e841 2300 	strex	r3, r2, [r1]
 800b444:	613b      	str	r3, [r7, #16]
   return(result);
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d1e6      	bne.n	800b41a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2220      	movs	r2, #32
 800b450:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2200      	movs	r2, #0
 800b45e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b460:	bf00      	nop
 800b462:	3754      	adds	r7, #84	@ 0x54
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr
 800b46c:	effffffe 	.word	0xeffffffe

0800b470 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d101      	bne.n	800b486 <HAL_UARTEx_DisableFifoMode+0x16>
 800b482:	2302      	movs	r3, #2
 800b484:	e027      	b.n	800b4d6 <HAL_UARTEx_DisableFifoMode+0x66>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2201      	movs	r2, #1
 800b48a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2224      	movs	r2, #36	@ 0x24
 800b492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	681a      	ldr	r2, [r3, #0]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f022 0201 	bic.w	r2, r2, #1
 800b4ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b4b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	68fa      	ldr	r2, [r7, #12]
 800b4c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2220      	movs	r2, #32
 800b4c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3714      	adds	r7, #20
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr

0800b4e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b4e2:	b580      	push	{r7, lr}
 800b4e4:	b084      	sub	sp, #16
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
 800b4ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d101      	bne.n	800b4fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b4f6:	2302      	movs	r3, #2
 800b4f8:	e02d      	b.n	800b556 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2224      	movs	r2, #36	@ 0x24
 800b506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f022 0201 	bic.w	r2, r2, #1
 800b520:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	689b      	ldr	r3, [r3, #8]
 800b528:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	683a      	ldr	r2, [r7, #0]
 800b532:	430a      	orrs	r2, r1
 800b534:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f850 	bl	800b5dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	68fa      	ldr	r2, [r7, #12]
 800b542:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2220      	movs	r2, #32
 800b548:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2200      	movs	r2, #0
 800b550:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	3710      	adds	r7, #16
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b55e:	b580      	push	{r7, lr}
 800b560:	b084      	sub	sp, #16
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d101      	bne.n	800b576 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b572:	2302      	movs	r3, #2
 800b574:	e02d      	b.n	800b5d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2201      	movs	r2, #1
 800b57a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2224      	movs	r2, #36	@ 0x24
 800b582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f022 0201 	bic.w	r2, r2, #1
 800b59c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	683a      	ldr	r2, [r7, #0]
 800b5ae:	430a      	orrs	r2, r1
 800b5b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 f812 	bl	800b5dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2220      	movs	r2, #32
 800b5c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3710      	adds	r7, #16
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
	...

0800b5dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d108      	bne.n	800b5fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b5fc:	e031      	b.n	800b662 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b5fe:	2310      	movs	r3, #16
 800b600:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b602:	2310      	movs	r3, #16
 800b604:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	0e5b      	lsrs	r3, r3, #25
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	f003 0307 	and.w	r3, r3, #7
 800b614:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	0f5b      	lsrs	r3, r3, #29
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	f003 0307 	and.w	r3, r3, #7
 800b624:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b626:	7bbb      	ldrb	r3, [r7, #14]
 800b628:	7b3a      	ldrb	r2, [r7, #12]
 800b62a:	4911      	ldr	r1, [pc, #68]	@ (800b670 <UARTEx_SetNbDataToProcess+0x94>)
 800b62c:	5c8a      	ldrb	r2, [r1, r2]
 800b62e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b632:	7b3a      	ldrb	r2, [r7, #12]
 800b634:	490f      	ldr	r1, [pc, #60]	@ (800b674 <UARTEx_SetNbDataToProcess+0x98>)
 800b636:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b638:	fb93 f3f2 	sdiv	r3, r3, r2
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b644:	7bfb      	ldrb	r3, [r7, #15]
 800b646:	7b7a      	ldrb	r2, [r7, #13]
 800b648:	4909      	ldr	r1, [pc, #36]	@ (800b670 <UARTEx_SetNbDataToProcess+0x94>)
 800b64a:	5c8a      	ldrb	r2, [r1, r2]
 800b64c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b650:	7b7a      	ldrb	r2, [r7, #13]
 800b652:	4908      	ldr	r1, [pc, #32]	@ (800b674 <UARTEx_SetNbDataToProcess+0x98>)
 800b654:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b656:	fb93 f3f2 	sdiv	r3, r3, r2
 800b65a:	b29a      	uxth	r2, r3
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b662:	bf00      	nop
 800b664:	3714      	adds	r7, #20
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	08026cd8 	.word	0x08026cd8
 800b674:	08026ce0 	.word	0x08026ce0

0800b678 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b67e:	2100      	movs	r1, #0
 800b680:	2000      	movs	r0, #0
 800b682:	f007 f8f1 	bl	8012868 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800b686:	4b1c      	ldr	r3, [pc, #112]	@ (800b6f8 <MX_LWIP_Init+0x80>)
 800b688:	2200      	movs	r2, #0
 800b68a:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800b68c:	4b1b      	ldr	r3, [pc, #108]	@ (800b6fc <MX_LWIP_Init+0x84>)
 800b68e:	2200      	movs	r2, #0
 800b690:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800b692:	4b1b      	ldr	r3, [pc, #108]	@ (800b700 <MX_LWIP_Init+0x88>)
 800b694:	2200      	movs	r2, #0
 800b696:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b698:	4b1a      	ldr	r3, [pc, #104]	@ (800b704 <MX_LWIP_Init+0x8c>)
 800b69a:	9302      	str	r3, [sp, #8]
 800b69c:	4b1a      	ldr	r3, [pc, #104]	@ (800b708 <MX_LWIP_Init+0x90>)
 800b69e:	9301      	str	r3, [sp, #4]
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	9300      	str	r3, [sp, #0]
 800b6a4:	4b16      	ldr	r3, [pc, #88]	@ (800b700 <MX_LWIP_Init+0x88>)
 800b6a6:	4a15      	ldr	r2, [pc, #84]	@ (800b6fc <MX_LWIP_Init+0x84>)
 800b6a8:	4913      	ldr	r1, [pc, #76]	@ (800b6f8 <MX_LWIP_Init+0x80>)
 800b6aa:	4818      	ldr	r0, [pc, #96]	@ (800b70c <MX_LWIP_Init+0x94>)
 800b6ac:	f007 ff5e 	bl	801356c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b6b0:	4816      	ldr	r0, [pc, #88]	@ (800b70c <MX_LWIP_Init+0x94>)
 800b6b2:	f008 f915 	bl	80138e0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800b6b6:	4815      	ldr	r0, [pc, #84]	@ (800b70c <MX_LWIP_Init+0x94>)
 800b6b8:	f008 f922 	bl	8013900 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800b6bc:	4914      	ldr	r1, [pc, #80]	@ (800b710 <MX_LWIP_Init+0x98>)
 800b6be:	4813      	ldr	r0, [pc, #76]	@ (800b70c <MX_LWIP_Init+0x94>)
 800b6c0:	f008 fa24 	bl	8013b0c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800b6c4:	2224      	movs	r2, #36	@ 0x24
 800b6c6:	2100      	movs	r1, #0
 800b6c8:	4812      	ldr	r0, [pc, #72]	@ (800b714 <MX_LWIP_Init+0x9c>)
 800b6ca:	f015 fb01 	bl	8020cd0 <memset>
  attributes.name = "EthLink";
 800b6ce:	4b11      	ldr	r3, [pc, #68]	@ (800b714 <MX_LWIP_Init+0x9c>)
 800b6d0:	4a11      	ldr	r2, [pc, #68]	@ (800b718 <MX_LWIP_Init+0xa0>)
 800b6d2:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800b6d4:	4b0f      	ldr	r3, [pc, #60]	@ (800b714 <MX_LWIP_Init+0x9c>)
 800b6d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b6da:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800b6dc:	4b0d      	ldr	r3, [pc, #52]	@ (800b714 <MX_LWIP_Init+0x9c>)
 800b6de:	2210      	movs	r2, #16
 800b6e0:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800b6e2:	4a0c      	ldr	r2, [pc, #48]	@ (800b714 <MX_LWIP_Init+0x9c>)
 800b6e4:	4909      	ldr	r1, [pc, #36]	@ (800b70c <MX_LWIP_Init+0x94>)
 800b6e6:	480d      	ldr	r0, [pc, #52]	@ (800b71c <MX_LWIP_Init+0xa4>)
 800b6e8:	f000 fd9d 	bl	800c226 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800b6ec:	4807      	ldr	r0, [pc, #28]	@ (800b70c <MX_LWIP_Init+0x94>)
 800b6ee:	f010 fb15 	bl	801bd1c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b6f2:	bf00      	nop
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	24004e58 	.word	0x24004e58
 800b6fc:	24004e5c 	.word	0x24004e5c
 800b700:	24004e60 	.word	0x24004e60
 800b704:	08012779 	.word	0x08012779
 800b708:	0800bb99 	.word	0x0800bb99
 800b70c:	24004e20 	.word	0x24004e20
 800b710:	0800b721 	.word	0x0800b721
 800b714:	24004e64 	.word	0x24004e64
 800b718:	08022f18 	.word	0x08022f18
 800b71c:	0800be7d 	.word	0x0800be7d

0800b720 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800b728:	bf00      	nop
 800b72a:	370c      	adds	r7, #12
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b0aa      	sub	sp, #168	@ 0xa8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800b73c:	2300      	movs	r3, #0
 800b73e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800b742:	2300      	movs	r3, #0
 800b744:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800b748:	2300      	movs	r3, #0
 800b74a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800b74e:	f107 0310 	add.w	r3, r7, #16
 800b752:	2264      	movs	r2, #100	@ 0x64
 800b754:	2100      	movs	r1, #0
 800b756:	4618      	mov	r0, r3
 800b758:	f015 faba 	bl	8020cd0 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b75c:	4b89      	ldr	r3, [pc, #548]	@ (800b984 <low_level_init+0x250>)
 800b75e:	4a8a      	ldr	r2, [pc, #552]	@ (800b988 <low_level_init+0x254>)
 800b760:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800b762:	2300      	movs	r3, #0
 800b764:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800b766:	2380      	movs	r3, #128	@ 0x80
 800b768:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800b76a:	23e1      	movs	r3, #225	@ 0xe1
 800b76c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800b76e:	2300      	movs	r3, #0
 800b770:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800b772:	2300      	movs	r3, #0
 800b774:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800b776:	2300      	movs	r3, #0
 800b778:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800b77a:	4a82      	ldr	r2, [pc, #520]	@ (800b984 <low_level_init+0x250>)
 800b77c:	f107 0308 	add.w	r3, r7, #8
 800b780:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800b782:	4b80      	ldr	r3, [pc, #512]	@ (800b984 <low_level_init+0x250>)
 800b784:	2201      	movs	r2, #1
 800b786:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b788:	4b7e      	ldr	r3, [pc, #504]	@ (800b984 <low_level_init+0x250>)
 800b78a:	4a80      	ldr	r2, [pc, #512]	@ (800b98c <low_level_init+0x258>)
 800b78c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b78e:	4b7d      	ldr	r3, [pc, #500]	@ (800b984 <low_level_init+0x250>)
 800b790:	4a7f      	ldr	r2, [pc, #508]	@ (800b990 <low_level_init+0x25c>)
 800b792:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800b794:	4b7b      	ldr	r3, [pc, #492]	@ (800b984 <low_level_init+0x250>)
 800b796:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800b79a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b79c:	4879      	ldr	r0, [pc, #484]	@ (800b984 <low_level_init+0x250>)
 800b79e:	f7f8 fa21 	bl	8003be4 <HAL_ETH_Init>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b7a8:	2238      	movs	r2, #56	@ 0x38
 800b7aa:	2100      	movs	r1, #0
 800b7ac:	4879      	ldr	r0, [pc, #484]	@ (800b994 <low_level_init+0x260>)
 800b7ae:	f015 fa8f 	bl	8020cd0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b7b2:	4b78      	ldr	r3, [pc, #480]	@ (800b994 <low_level_init+0x260>)
 800b7b4:	2221      	movs	r2, #33	@ 0x21
 800b7b6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b7b8:	4b76      	ldr	r3, [pc, #472]	@ (800b994 <low_level_init+0x260>)
 800b7ba:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800b7be:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b7c0:	4b74      	ldr	r3, [pc, #464]	@ (800b994 <low_level_init+0x260>)
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b7c6:	4874      	ldr	r0, [pc, #464]	@ (800b998 <low_level_init+0x264>)
 800b7c8:	f007 fd8a 	bl	80132e0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2206      	movs	r2, #6
 800b7d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b7d4:	4b6b      	ldr	r3, [pc, #428]	@ (800b984 <low_level_init+0x250>)
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	781a      	ldrb	r2, [r3, #0]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b7e0:	4b68      	ldr	r3, [pc, #416]	@ (800b984 <low_level_init+0x250>)
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	785a      	ldrb	r2, [r3, #1]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b7ec:	4b65      	ldr	r3, [pc, #404]	@ (800b984 <low_level_init+0x250>)
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	789a      	ldrb	r2, [r3, #2]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b7f8:	4b62      	ldr	r3, [pc, #392]	@ (800b984 <low_level_init+0x250>)
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	78da      	ldrb	r2, [r3, #3]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b804:	4b5f      	ldr	r3, [pc, #380]	@ (800b984 <low_level_init+0x250>)
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	791a      	ldrb	r2, [r3, #4]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b810:	4b5c      	ldr	r3, [pc, #368]	@ (800b984 <low_level_init+0x250>)
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	795a      	ldrb	r2, [r3, #5]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800b822:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b82a:	f043 030a 	orr.w	r3, r3, #10
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800b836:	2200      	movs	r2, #0
 800b838:	2100      	movs	r1, #0
 800b83a:	2001      	movs	r0, #1
 800b83c:	f000 feae 	bl	800c59c <osSemaphoreNew>
 800b840:	4603      	mov	r3, r0
 800b842:	4a56      	ldr	r2, [pc, #344]	@ (800b99c <low_level_init+0x268>)
 800b844:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800b846:	2200      	movs	r2, #0
 800b848:	2100      	movs	r1, #0
 800b84a:	2001      	movs	r0, #1
 800b84c:	f000 fea6 	bl	800c59c <osSemaphoreNew>
 800b850:	4603      	mov	r3, r0
 800b852:	4a53      	ldr	r2, [pc, #332]	@ (800b9a0 <low_level_init+0x26c>)
 800b854:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800b856:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b85a:	2224      	movs	r2, #36	@ 0x24
 800b85c:	2100      	movs	r1, #0
 800b85e:	4618      	mov	r0, r3
 800b860:	f015 fa36 	bl	8020cd0 <memset>
  attributes.name = "EthIf";
 800b864:	4b4f      	ldr	r3, [pc, #316]	@ (800b9a4 <low_level_init+0x270>)
 800b866:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800b868:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 800b86c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800b870:	2330      	movs	r3, #48	@ 0x30
 800b872:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800b876:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b87a:	461a      	mov	r2, r3
 800b87c:	6879      	ldr	r1, [r7, #4]
 800b87e:	484a      	ldr	r0, [pc, #296]	@ (800b9a8 <low_level_init+0x274>)
 800b880:	f000 fcd1 	bl	800c226 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b884:	4949      	ldr	r1, [pc, #292]	@ (800b9ac <low_level_init+0x278>)
 800b886:	484a      	ldr	r0, [pc, #296]	@ (800b9b0 <low_level_init+0x27c>)
 800b888:	f7f5 ff95 	bl	80017b6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800b88c:	4848      	ldr	r0, [pc, #288]	@ (800b9b0 <low_level_init+0x27c>)
 800b88e:	f7f5 ffc4 	bl	800181a <LAN8742_Init>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d006      	beq.n	800b8a6 <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f008 f907 	bl	8013aac <netif_set_link_down>
    netif_set_down(netif);
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f008 f89a 	bl	80139d8 <netif_set_down>
 800b8a4:	e06b      	b.n	800b97e <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800b8a6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d165      	bne.n	800b97a <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b8ae:	4840      	ldr	r0, [pc, #256]	@ (800b9b0 <low_level_init+0x27c>)
 800b8b0:	f7f6 f800 	bl	80018b4 <LAN8742_GetLinkState>
 800b8b4:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800b8b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	dc06      	bgt.n	800b8ce <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f008 f8f3 	bl	8013aac <netif_set_link_down>
      netif_set_down(netif);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f008 f886 	bl	80139d8 <netif_set_down>
 800b8cc:	e057      	b.n	800b97e <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800b8ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b8d2:	3b02      	subs	r3, #2
 800b8d4:	2b03      	cmp	r3, #3
 800b8d6:	d82b      	bhi.n	800b930 <low_level_init+0x1fc>
 800b8d8:	a201      	add	r2, pc, #4	@ (adr r2, 800b8e0 <low_level_init+0x1ac>)
 800b8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8de:	bf00      	nop
 800b8e0:	0800b8f1 	.word	0x0800b8f1
 800b8e4:	0800b903 	.word	0x0800b903
 800b8e8:	0800b913 	.word	0x0800b913
 800b8ec:	0800b923 	.word	0x0800b923
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800b8f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b8f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800b8f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b8fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b900:	e01f      	b.n	800b942 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800b902:	2300      	movs	r3, #0
 800b904:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800b908:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b90c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b910:	e017      	b.n	800b942 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800b912:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b916:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800b91a:	2300      	movs	r3, #0
 800b91c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b920:	e00f      	b.n	800b942 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800b922:	2300      	movs	r3, #0
 800b924:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800b928:	2300      	movs	r3, #0
 800b92a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b92e:	e008      	b.n	800b942 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800b930:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b934:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800b938:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b93c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800b940:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b942:	f107 0310 	add.w	r3, r7, #16
 800b946:	4619      	mov	r1, r3
 800b948:	480e      	ldr	r0, [pc, #56]	@ (800b984 <low_level_init+0x250>)
 800b94a:	f7f8 fdc7 	bl	80044dc <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800b94e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b952:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800b954:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b958:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b95a:	f107 0310 	add.w	r3, r7, #16
 800b95e:	4619      	mov	r1, r3
 800b960:	4808      	ldr	r0, [pc, #32]	@ (800b984 <low_level_init+0x250>)
 800b962:	f7f8 ff8f 	bl	8004884 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800b966:	4807      	ldr	r0, [pc, #28]	@ (800b984 <low_level_init+0x250>)
 800b968:	f7f8 fa3a 	bl	8003de0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f007 ffc7 	bl	8013900 <netif_set_up>
    netif_set_link_up(netif);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f008 f862 	bl	8013a3c <netif_set_link_up>
 800b978:	e001      	b.n	800b97e <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800b97a:	f7f5 fba1 	bl	80010c0 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b97e:	37a8      	adds	r7, #168	@ 0xa8
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	24004e98 	.word	0x24004e98
 800b988:	40028000 	.word	0x40028000
 800b98c:	24004be4 	.word	0x24004be4
 800b990:	24004b84 	.word	0x24004b84
 800b994:	24004f48 	.word	0x24004f48
 800b998:	08026ce8 	.word	0x08026ce8
 800b99c:	24004e90 	.word	0x24004e90
 800b9a0:	24004e94 	.word	0x24004e94
 800b9a4:	08022f20 	.word	0x08022f20
 800b9a8:	0800bb45 	.word	0x0800bb45
 800b9ac:	24000010 	.word	0x24000010
 800b9b0:	24004f80 	.word	0x24004f80

0800b9b4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b092      	sub	sp, #72	@ 0x48
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800b9cc:	f107 030c 	add.w	r3, r7, #12
 800b9d0:	2230      	movs	r2, #48	@ 0x30
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f015 f97b 	bl	8020cd0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b9da:	f107 030c 	add.w	r3, r7, #12
 800b9de:	2230      	movs	r2, #48	@ 0x30
 800b9e0:	2100      	movs	r1, #0
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f015 f974 	bl	8020cd0 <memset>

  for(q = p; q != NULL; q = q->next)
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9ec:	e045      	b.n	800ba7a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b9ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9f0:	2b03      	cmp	r3, #3
 800b9f2:	d902      	bls.n	800b9fa <low_level_output+0x46>
      return ERR_IF;
 800b9f4:	f06f 030b 	mvn.w	r3, #11
 800b9f8:	e07f      	b.n	800bafa <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800b9fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9fc:	6859      	ldr	r1, [r3, #4]
 800b9fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba00:	4613      	mov	r3, r2
 800ba02:	005b      	lsls	r3, r3, #1
 800ba04:	4413      	add	r3, r2
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	3348      	adds	r3, #72	@ 0x48
 800ba0a:	443b      	add	r3, r7
 800ba0c:	3b3c      	subs	r3, #60	@ 0x3c
 800ba0e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800ba10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba12:	895b      	ldrh	r3, [r3, #10]
 800ba14:	4619      	mov	r1, r3
 800ba16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba18:	4613      	mov	r3, r2
 800ba1a:	005b      	lsls	r3, r3, #1
 800ba1c:	4413      	add	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	3348      	adds	r3, #72	@ 0x48
 800ba22:	443b      	add	r3, r7
 800ba24:	3b38      	subs	r3, #56	@ 0x38
 800ba26:	6019      	str	r1, [r3, #0]

    if(i>0)
 800ba28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d011      	beq.n	800ba52 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800ba2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba30:	1e5a      	subs	r2, r3, #1
 800ba32:	f107 000c 	add.w	r0, r7, #12
 800ba36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ba38:	460b      	mov	r3, r1
 800ba3a:	005b      	lsls	r3, r3, #1
 800ba3c:	440b      	add	r3, r1
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	18c1      	adds	r1, r0, r3
 800ba42:	4613      	mov	r3, r2
 800ba44:	005b      	lsls	r3, r3, #1
 800ba46:	4413      	add	r3, r2
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	3348      	adds	r3, #72	@ 0x48
 800ba4c:	443b      	add	r3, r7
 800ba4e:	3b34      	subs	r3, #52	@ 0x34
 800ba50:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800ba52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d109      	bne.n	800ba6e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800ba5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba5c:	4613      	mov	r3, r2
 800ba5e:	005b      	lsls	r3, r3, #1
 800ba60:	4413      	add	r3, r2
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	3348      	adds	r3, #72	@ 0x48
 800ba66:	443b      	add	r3, r7
 800ba68:	3b34      	subs	r3, #52	@ 0x34
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800ba6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba70:	3301      	adds	r3, #1
 800ba72:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800ba74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d1b6      	bne.n	800b9ee <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	891b      	ldrh	r3, [r3, #8]
 800ba84:	461a      	mov	r2, r3
 800ba86:	4b1f      	ldr	r3, [pc, #124]	@ (800bb04 <low_level_output+0x150>)
 800ba88:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800ba8a:	4a1e      	ldr	r2, [pc, #120]	@ (800bb04 <low_level_output+0x150>)
 800ba8c:	f107 030c 	add.w	r3, r7, #12
 800ba90:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800ba92:	4a1c      	ldr	r2, [pc, #112]	@ (800bb04 <low_level_output+0x150>)
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800ba98:	6838      	ldr	r0, [r7, #0]
 800ba9a:	f008 fc8b 	bl	80143b4 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800ba9e:	4919      	ldr	r1, [pc, #100]	@ (800bb04 <low_level_output+0x150>)
 800baa0:	4819      	ldr	r0, [pc, #100]	@ (800bb08 <low_level_output+0x154>)
 800baa2:	f7f8 fa89 	bl	8003fb8 <HAL_ETH_Transmit_IT>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d103      	bne.n	800bab4 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800baac:	2300      	movs	r3, #0
 800baae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bab2:	e01b      	b.n	800baec <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800bab4:	4814      	ldr	r0, [pc, #80]	@ (800bb08 <low_level_output+0x154>)
 800bab6:	f7f8 ff4f 	bl	8004958 <HAL_ETH_GetError>
 800baba:	4603      	mov	r3, r0
 800babc:	f003 0302 	and.w	r3, r3, #2
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d00d      	beq.n	800bae0 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800bac4:	4b11      	ldr	r3, [pc, #68]	@ (800bb0c <low_level_output+0x158>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800bacc:	4618      	mov	r0, r3
 800bace:	f000 fdef 	bl	800c6b0 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800bad2:	480d      	ldr	r0, [pc, #52]	@ (800bb08 <low_level_output+0x154>)
 800bad4:	f7f8 fbf7 	bl	80042c6 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800bad8:	23fe      	movs	r3, #254	@ 0xfe
 800bada:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bade:	e005      	b.n	800baec <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800bae0:	6838      	ldr	r0, [r7, #0]
 800bae2:	f008 fbc1 	bl	8014268 <pbuf_free>
        errval =  ERR_IF;
 800bae6:	23f4      	movs	r3, #244	@ 0xf4
 800bae8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800baec:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800baf0:	f113 0f02 	cmn.w	r3, #2
 800baf4:	d0d3      	beq.n	800ba9e <low_level_output+0xea>

  return errval;
 800baf6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3748      	adds	r7, #72	@ 0x48
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	24004f48 	.word	0x24004f48
 800bb08:	24004e98 	.word	0x24004e98
 800bb0c:	24004e94 	.word	0x24004e94

0800bb10 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800bb1c:	4b07      	ldr	r3, [pc, #28]	@ (800bb3c <low_level_input+0x2c>)
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d105      	bne.n	800bb30 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800bb24:	f107 030c 	add.w	r3, r7, #12
 800bb28:	4619      	mov	r1, r3
 800bb2a:	4805      	ldr	r0, [pc, #20]	@ (800bb40 <low_level_input+0x30>)
 800bb2c:	f7f8 fa95 	bl	800405a <HAL_ETH_ReadData>
  }

  return p;
 800bb30:	68fb      	ldr	r3, [r7, #12]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	24004e8c 	.word	0x24004e8c
 800bb40:	24004e98 	.word	0x24004e98

0800bb44 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800bb54:	4b0f      	ldr	r3, [pc, #60]	@ (800bb94 <ethernetif_input+0x50>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f04f 31ff 	mov.w	r1, #4294967295
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f000 fda7 	bl	800c6b0 <osSemaphoreAcquire>
 800bb62:	4603      	mov	r3, r0
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d1f5      	bne.n	800bb54 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800bb68:	68b8      	ldr	r0, [r7, #8]
 800bb6a:	f7ff ffd1 	bl	800bb10 <low_level_input>
 800bb6e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d00a      	beq.n	800bb8c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	691b      	ldr	r3, [r3, #16]
 800bb7a:	68b9      	ldr	r1, [r7, #8]
 800bb7c:	68f8      	ldr	r0, [r7, #12]
 800bb7e:	4798      	blx	r3
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d002      	beq.n	800bb8c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800bb86:	68f8      	ldr	r0, [r7, #12]
 800bb88:	f008 fb6e 	bl	8014268 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d1ea      	bne.n	800bb68 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800bb92:	e7df      	b.n	800bb54 <ethernetif_input+0x10>
 800bb94:	24004e90 	.word	0x24004e90

0800bb98 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d106      	bne.n	800bbb4 <ethernetif_init+0x1c>
 800bba6:	4b0e      	ldr	r3, [pc, #56]	@ (800bbe0 <ethernetif_init+0x48>)
 800bba8:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800bbac:	490d      	ldr	r1, [pc, #52]	@ (800bbe4 <ethernetif_init+0x4c>)
 800bbae:	480e      	ldr	r0, [pc, #56]	@ (800bbe8 <ethernetif_init+0x50>)
 800bbb0:	f014 fee8 	bl	8020984 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2273      	movs	r2, #115	@ 0x73
 800bbb8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2274      	movs	r2, #116	@ 0x74
 800bbc0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	4a09      	ldr	r2, [pc, #36]	@ (800bbec <ethernetif_init+0x54>)
 800bbc8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	4a08      	ldr	r2, [pc, #32]	@ (800bbf0 <ethernetif_init+0x58>)
 800bbce:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f7ff fdaf 	bl	800b734 <low_level_init>

  return ERR_OK;
 800bbd6:	2300      	movs	r3, #0
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3708      	adds	r7, #8
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}
 800bbe0:	08022f28 	.word	0x08022f28
 800bbe4:	08022f44 	.word	0x08022f44
 800bbe8:	08022f54 	.word	0x08022f54
 800bbec:	0801dbdd 	.word	0x0801dbdd
 800bbf0:	0800b9b5 	.word	0x0800b9b5

0800bbf4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800bc00:	68f9      	ldr	r1, [r7, #12]
 800bc02:	4809      	ldr	r0, [pc, #36]	@ (800bc28 <pbuf_free_custom+0x34>)
 800bc04:	f007 fc5c 	bl	80134c0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800bc08:	4b08      	ldr	r3, [pc, #32]	@ (800bc2c <pbuf_free_custom+0x38>)
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d107      	bne.n	800bc20 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800bc10:	4b06      	ldr	r3, [pc, #24]	@ (800bc2c <pbuf_free_custom+0x38>)
 800bc12:	2200      	movs	r2, #0
 800bc14:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800bc16:	4b06      	ldr	r3, [pc, #24]	@ (800bc30 <pbuf_free_custom+0x3c>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f000 fd9a 	bl	800c754 <osSemaphoreRelease>
  }
}
 800bc20:	bf00      	nop
 800bc22:	3710      	adds	r7, #16
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	08026ce8 	.word	0x08026ce8
 800bc2c:	24004e8c 	.word	0x24004e8c
 800bc30:	24004e90 	.word	0x24004e90

0800bc34 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800bc38:	f7f5 ff14 	bl	8001a64 <HAL_GetTick>
 800bc3c:	4603      	mov	r3, r0
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	bd80      	pop	{r7, pc}
	...

0800bc44 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b08e      	sub	sp, #56	@ 0x38
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc50:	2200      	movs	r2, #0
 800bc52:	601a      	str	r2, [r3, #0]
 800bc54:	605a      	str	r2, [r3, #4]
 800bc56:	609a      	str	r2, [r3, #8]
 800bc58:	60da      	str	r2, [r3, #12]
 800bc5a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4a59      	ldr	r2, [pc, #356]	@ (800bdc8 <HAL_ETH_MspInit+0x184>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	f040 80ab 	bne.w	800bdbe <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800bc68:	4b58      	ldr	r3, [pc, #352]	@ (800bdcc <HAL_ETH_MspInit+0x188>)
 800bc6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc6e:	4a57      	ldr	r2, [pc, #348]	@ (800bdcc <HAL_ETH_MspInit+0x188>)
 800bc70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc74:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800bc78:	4b54      	ldr	r3, [pc, #336]	@ (800bdcc <HAL_ETH_MspInit+0x188>)
 800bc7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc82:	623b      	str	r3, [r7, #32]
 800bc84:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800bc86:	4b51      	ldr	r3, [pc, #324]	@ (800bdcc <HAL_ETH_MspInit+0x188>)
 800bc88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc8c:	4a4f      	ldr	r2, [pc, #316]	@ (800bdcc <HAL_ETH_MspInit+0x188>)
 800bc8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc92:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800bc96:	4b4d      	ldr	r3, [pc, #308]	@ (800bdcc <HAL_ETH_MspInit+0x188>)
 800bc98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bca0:	61fb      	str	r3, [r7, #28]
 800bca2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800bca4:	4b49      	ldr	r3, [pc, #292]	@ (800bdcc <HAL_ETH_MspInit+0x188>)
 800bca6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bcaa:	4a48      	ldr	r2, [pc, #288]	@ (800bdcc <HAL_ETH_MspInit+0x188>)
 800bcac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bcb0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800bcb4:	4b45      	ldr	r3, [pc, #276]	@ (800bdcc <HAL_ETH_MspInit+0x188>)
 800bcb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bcba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bcbe:	61bb      	str	r3, [r7, #24]
 800bcc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bcc2:	4b42      	ldr	r3, [pc, #264]	@ (800bdcc <HAL_ETH_MspInit+0x188>)
 800bcc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bcc8:	4a40      	ldr	r2, [pc, #256]	@ (800bdcc <HAL_ETH_MspInit+0x188>)
 800bcca:	f043 0304 	orr.w	r3, r3, #4
 800bcce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bcd2:	4b3e      	ldr	r3, [pc, #248]	@ (800bdcc <HAL_ETH_MspInit+0x188>)
 800bcd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bcd8:	f003 0304 	and.w	r3, r3, #4
 800bcdc:	617b      	str	r3, [r7, #20]
 800bcde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bce0:	4b3a      	ldr	r3, [pc, #232]	@ (800bdcc <HAL_ETH_MspInit+0x188>)
 800bce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bce6:	4a39      	ldr	r2, [pc, #228]	@ (800bdcc <HAL_ETH_MspInit+0x188>)
 800bce8:	f043 0301 	orr.w	r3, r3, #1
 800bcec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bcf0:	4b36      	ldr	r3, [pc, #216]	@ (800bdcc <HAL_ETH_MspInit+0x188>)
 800bcf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bcf6:	f003 0301 	and.w	r3, r3, #1
 800bcfa:	613b      	str	r3, [r7, #16]
 800bcfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bcfe:	4b33      	ldr	r3, [pc, #204]	@ (800bdcc <HAL_ETH_MspInit+0x188>)
 800bd00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bd04:	4a31      	ldr	r2, [pc, #196]	@ (800bdcc <HAL_ETH_MspInit+0x188>)
 800bd06:	f043 0302 	orr.w	r3, r3, #2
 800bd0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bd0e:	4b2f      	ldr	r3, [pc, #188]	@ (800bdcc <HAL_ETH_MspInit+0x188>)
 800bd10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bd14:	f003 0302 	and.w	r3, r3, #2
 800bd18:	60fb      	str	r3, [r7, #12]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800bd1c:	4b2b      	ldr	r3, [pc, #172]	@ (800bdcc <HAL_ETH_MspInit+0x188>)
 800bd1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bd22:	4a2a      	ldr	r2, [pc, #168]	@ (800bdcc <HAL_ETH_MspInit+0x188>)
 800bd24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bd2c:	4b27      	ldr	r3, [pc, #156]	@ (800bdcc <HAL_ETH_MspInit+0x188>)
 800bd2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bd32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd36:	60bb      	str	r3, [r7, #8]
 800bd38:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800bd3a:	2332      	movs	r3, #50	@ 0x32
 800bd3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd3e:	2302      	movs	r3, #2
 800bd40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd42:	2300      	movs	r3, #0
 800bd44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd46:	2300      	movs	r3, #0
 800bd48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd4a:	230b      	movs	r3, #11
 800bd4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bd4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd52:	4619      	mov	r1, r3
 800bd54:	481e      	ldr	r0, [pc, #120]	@ (800bdd0 <HAL_ETH_MspInit+0x18c>)
 800bd56:	f7f9 fb8f 	bl	8005478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800bd5a:	2386      	movs	r3, #134	@ 0x86
 800bd5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd5e:	2302      	movs	r3, #2
 800bd60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd62:	2300      	movs	r3, #0
 800bd64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd66:	2300      	movs	r3, #0
 800bd68:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd6a:	230b      	movs	r3, #11
 800bd6c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd72:	4619      	mov	r1, r3
 800bd74:	4817      	ldr	r0, [pc, #92]	@ (800bdd4 <HAL_ETH_MspInit+0x190>)
 800bd76:	f7f9 fb7f 	bl	8005478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800bd7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bd7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd80:	2302      	movs	r3, #2
 800bd82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd84:	2300      	movs	r3, #0
 800bd86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd8c:	230b      	movs	r3, #11
 800bd8e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800bd90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd94:	4619      	mov	r1, r3
 800bd96:	4810      	ldr	r0, [pc, #64]	@ (800bdd8 <HAL_ETH_MspInit+0x194>)
 800bd98:	f7f9 fb6e 	bl	8005478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800bd9c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800bda0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bda2:	2302      	movs	r3, #2
 800bda4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bda6:	2300      	movs	r3, #0
 800bda8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bdae:	230b      	movs	r3, #11
 800bdb0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bdb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	4808      	ldr	r0, [pc, #32]	@ (800bddc <HAL_ETH_MspInit+0x198>)
 800bdba:	f7f9 fb5d 	bl	8005478 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800bdbe:	bf00      	nop
 800bdc0:	3738      	adds	r7, #56	@ 0x38
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	40028000 	.word	0x40028000
 800bdcc:	58024400 	.word	0x58024400
 800bdd0:	58020800 	.word	0x58020800
 800bdd4:	58020000 	.word	0x58020000
 800bdd8:	58020400 	.word	0x58020400
 800bddc:	58021800 	.word	0x58021800

0800bde0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800bde4:	4802      	ldr	r0, [pc, #8]	@ (800bdf0 <ETH_PHY_IO_Init+0x10>)
 800bde6:	f7f8 fd67 	bl	80048b8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800bdea:	2300      	movs	r3, #0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	24004e98 	.word	0x24004e98

0800bdf4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	af00      	add	r7, sp, #0
  return 0;
 800bdf8:	2300      	movs	r3, #0
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr

0800be04 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	68ba      	ldr	r2, [r7, #8]
 800be14:	68f9      	ldr	r1, [r7, #12]
 800be16:	4807      	ldr	r0, [pc, #28]	@ (800be34 <ETH_PHY_IO_ReadReg+0x30>)
 800be18:	f7f8 fab8 	bl	800438c <HAL_ETH_ReadPHYRegister>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d002      	beq.n	800be28 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800be22:	f04f 33ff 	mov.w	r3, #4294967295
 800be26:	e000      	b.n	800be2a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800be28:	2300      	movs	r3, #0
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3710      	adds	r7, #16
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	24004e98 	.word	0x24004e98

0800be38 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	68ba      	ldr	r2, [r7, #8]
 800be48:	68f9      	ldr	r1, [r7, #12]
 800be4a:	4807      	ldr	r0, [pc, #28]	@ (800be68 <ETH_PHY_IO_WriteReg+0x30>)
 800be4c:	f7f8 faf2 	bl	8004434 <HAL_ETH_WritePHYRegister>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d002      	beq.n	800be5c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800be56:	f04f 33ff 	mov.w	r3, #4294967295
 800be5a:	e000      	b.n	800be5e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3710      	adds	r7, #16
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	24004e98 	.word	0x24004e98

0800be6c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800be70:	f7f5 fdf8 	bl	8001a64 <HAL_GetTick>
 800be74:	4603      	mov	r3, r0
}
 800be76:	4618      	mov	r0, r3
 800be78:	bd80      	pop	{r7, pc}
	...

0800be7c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b0a0      	sub	sp, #128	@ 0x80
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800be84:	f107 0308 	add.w	r3, r7, #8
 800be88:	2264      	movs	r2, #100	@ 0x64
 800be8a:	2100      	movs	r1, #0
 800be8c:	4618      	mov	r0, r3
 800be8e:	f014 ff1f 	bl	8020cd0 <memset>
  int32_t PHYLinkState = 0;
 800be92:	2300      	movs	r3, #0
 800be94:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800be96:	2300      	movs	r3, #0
 800be98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800be9a:	2300      	movs	r3, #0
 800be9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800be9e:	2300      	movs	r3, #0
 800bea0:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800bea6:	483a      	ldr	r0, [pc, #232]	@ (800bf90 <ethernet_link_thread+0x114>)
 800bea8:	f7f5 fd04 	bl	80018b4 <LAN8742_GetLinkState>
 800beac:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800beae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800beb0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800beb4:	089b      	lsrs	r3, r3, #2
 800beb6:	f003 0301 	and.w	r3, r3, #1
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d00c      	beq.n	800beda <ethernet_link_thread+0x5e>
 800bec0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	dc09      	bgt.n	800beda <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800bec6:	4833      	ldr	r0, [pc, #204]	@ (800bf94 <ethernet_link_thread+0x118>)
 800bec8:	f7f7 fffe 	bl	8003ec8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800becc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bece:	f007 fd83 	bl	80139d8 <netif_set_down>
    netif_set_link_down(netif);
 800bed2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bed4:	f007 fdea 	bl	8013aac <netif_set_link_down>
 800bed8:	e055      	b.n	800bf86 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800beda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bedc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bee0:	f003 0304 	and.w	r3, r3, #4
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d14e      	bne.n	800bf86 <ethernet_link_thread+0x10a>
 800bee8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800beea:	2b01      	cmp	r3, #1
 800beec:	dd4b      	ble.n	800bf86 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800beee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bef0:	3b02      	subs	r3, #2
 800bef2:	2b03      	cmp	r3, #3
 800bef4:	d82a      	bhi.n	800bf4c <ethernet_link_thread+0xd0>
 800bef6:	a201      	add	r2, pc, #4	@ (adr r2, 800befc <ethernet_link_thread+0x80>)
 800bef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800befc:	0800bf0d 	.word	0x0800bf0d
 800bf00:	0800bf1f 	.word	0x0800bf1f
 800bf04:	0800bf2f 	.word	0x0800bf2f
 800bf08:	0800bf3f 	.word	0x0800bf3f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800bf0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bf10:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800bf12:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bf16:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800bf1c:	e017      	b.n	800bf4e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800bf22:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bf26:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800bf2c:	e00f      	b.n	800bf4e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800bf2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bf32:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800bf34:	2300      	movs	r3, #0
 800bf36:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800bf3c:	e007      	b.n	800bf4e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800bf42:	2300      	movs	r3, #0
 800bf44:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800bf46:	2301      	movs	r3, #1
 800bf48:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800bf4a:	e000      	b.n	800bf4e <ethernet_link_thread+0xd2>
    default:
      break;
 800bf4c:	bf00      	nop
    }

    if(linkchanged)
 800bf4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d018      	beq.n	800bf86 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800bf54:	f107 0308 	add.w	r3, r7, #8
 800bf58:	4619      	mov	r1, r3
 800bf5a:	480e      	ldr	r0, [pc, #56]	@ (800bf94 <ethernet_link_thread+0x118>)
 800bf5c:	f7f8 fabe 	bl	80044dc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800bf60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bf62:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800bf64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf66:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800bf68:	f107 0308 	add.w	r3, r7, #8
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	4809      	ldr	r0, [pc, #36]	@ (800bf94 <ethernet_link_thread+0x118>)
 800bf70:	f7f8 fc88 	bl	8004884 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800bf74:	4807      	ldr	r0, [pc, #28]	@ (800bf94 <ethernet_link_thread+0x118>)
 800bf76:	f7f7 ff33 	bl	8003de0 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800bf7a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bf7c:	f007 fcc0 	bl	8013900 <netif_set_up>
      netif_set_link_up(netif);
 800bf80:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bf82:	f007 fd5b 	bl	8013a3c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800bf86:	2064      	movs	r0, #100	@ 0x64
 800bf88:	f000 f9df 	bl	800c34a <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800bf8c:	e78b      	b.n	800bea6 <ethernet_link_thread+0x2a>
 800bf8e:	bf00      	nop
 800bf90:	24004f80 	.word	0x24004f80
 800bf94:	24004e98 	.word	0x24004e98

0800bf98 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b086      	sub	sp, #24
 800bf9c:	af02      	add	r7, sp, #8
 800bf9e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800bfa0:	4812      	ldr	r0, [pc, #72]	@ (800bfec <HAL_ETH_RxAllocateCallback+0x54>)
 800bfa2:	f007 fa19 	bl	80133d8 <memp_malloc_pool>
 800bfa6:	60f8      	str	r0, [r7, #12]
  if (p)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d014      	beq.n	800bfd8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f103 0220 	add.w	r2, r3, #32
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	4a0d      	ldr	r2, [pc, #52]	@ (800bff0 <HAL_ETH_RxAllocateCallback+0x58>)
 800bfbc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800bfc6:	9201      	str	r2, [sp, #4]
 800bfc8:	9300      	str	r3, [sp, #0]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2241      	movs	r2, #65	@ 0x41
 800bfce:	2100      	movs	r1, #0
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	f007 ff8f 	bl	8013ef4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800bfd6:	e005      	b.n	800bfe4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800bfd8:	4b06      	ldr	r3, [pc, #24]	@ (800bff4 <HAL_ETH_RxAllocateCallback+0x5c>)
 800bfda:	2201      	movs	r2, #1
 800bfdc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	601a      	str	r2, [r3, #0]
}
 800bfe4:	bf00      	nop
 800bfe6:	3710      	adds	r7, #16
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	08026ce8 	.word	0x08026ce8
 800bff0:	0800bbf5 	.word	0x0800bbf5
 800bff4:	24004e8c 	.word	0x24004e8c

0800bff8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b08d      	sub	sp, #52	@ 0x34
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	607a      	str	r2, [r7, #4]
 800c004:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 800c00e:	2300      	movs	r3, #0
 800c010:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	3b20      	subs	r3, #32
 800c016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 800c018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c01a:	2200      	movs	r2, #0
 800c01c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800c01e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c020:	2200      	movs	r2, #0
 800c022:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800c024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c026:	887a      	ldrh	r2, [r7, #2]
 800c028:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800c02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d103      	bne.n	800c03a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800c032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c034:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c036:	601a      	str	r2, [r3, #0]
 800c038:	e003      	b.n	800c042 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800c03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c040:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800c042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c044:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c046:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800c048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c04e:	e009      	b.n	800c064 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800c050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c052:	891a      	ldrh	r2, [r3, #8]
 800c054:	887b      	ldrh	r3, [r7, #2]
 800c056:	4413      	add	r3, r2
 800c058:	b29a      	uxth	r2, r3
 800c05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c05c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800c05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c066:	2b00      	cmp	r3, #0
 800c068:	d1f2      	bne.n	800c050 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800c06a:	887b      	ldrh	r3, [r7, #2]
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	623a      	str	r2, [r7, #32]
 800c070:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800c072:	69fb      	ldr	r3, [r7, #28]
 800c074:	2b00      	cmp	r3, #0
 800c076:	dd1d      	ble.n	800c0b4 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800c078:	6a3b      	ldr	r3, [r7, #32]
 800c07a:	f003 021f 	and.w	r2, r3, #31
 800c07e:	69fb      	ldr	r3, [r7, #28]
 800c080:	4413      	add	r3, r2
 800c082:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800c084:	6a3b      	ldr	r3, [r7, #32]
 800c086:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c088:	f3bf 8f4f 	dsb	sy
}
 800c08c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800c08e:	4a0d      	ldr	r2, [pc, #52]	@ (800c0c4 <HAL_ETH_RxLinkCallback+0xcc>)
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	3320      	adds	r3, #32
 800c09a:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800c09c:	69bb      	ldr	r3, [r7, #24]
 800c09e:	3b20      	subs	r3, #32
 800c0a0:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	dcf2      	bgt.n	800c08e <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800c0a8:	f3bf 8f4f 	dsb	sy
}
 800c0ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c0ae:	f3bf 8f6f 	isb	sy
}
 800c0b2:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800c0b4:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800c0b6:	bf00      	nop
 800c0b8:	3734      	adds	r7, #52	@ 0x34
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr
 800c0c2:	bf00      	nop
 800c0c4:	e000ed00 	.word	0xe000ed00

0800c0c8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f008 f8c9 	bl	8014268 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800c0d6:	bf00      	nop
 800c0d8:	3708      	adds	r7, #8
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
	...

0800c0e0 <__NVIC_SetPriority>:
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	6039      	str	r1, [r7, #0]
 800c0ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c0ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	db0a      	blt.n	800c10a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	b2da      	uxtb	r2, r3
 800c0f8:	490c      	ldr	r1, [pc, #48]	@ (800c12c <__NVIC_SetPriority+0x4c>)
 800c0fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0fe:	0112      	lsls	r2, r2, #4
 800c100:	b2d2      	uxtb	r2, r2
 800c102:	440b      	add	r3, r1
 800c104:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c108:	e00a      	b.n	800c120 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	b2da      	uxtb	r2, r3
 800c10e:	4908      	ldr	r1, [pc, #32]	@ (800c130 <__NVIC_SetPriority+0x50>)
 800c110:	88fb      	ldrh	r3, [r7, #6]
 800c112:	f003 030f 	and.w	r3, r3, #15
 800c116:	3b04      	subs	r3, #4
 800c118:	0112      	lsls	r2, r2, #4
 800c11a:	b2d2      	uxtb	r2, r2
 800c11c:	440b      	add	r3, r1
 800c11e:	761a      	strb	r2, [r3, #24]
}
 800c120:	bf00      	nop
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr
 800c12c:	e000e100 	.word	0xe000e100
 800c130:	e000ed00 	.word	0xe000ed00

0800c134 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c134:	b580      	push	{r7, lr}
 800c136:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c138:	4b05      	ldr	r3, [pc, #20]	@ (800c150 <SysTick_Handler+0x1c>)
 800c13a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c13c:	f002 fd6c 	bl	800ec18 <xTaskGetSchedulerState>
 800c140:	4603      	mov	r3, r0
 800c142:	2b01      	cmp	r3, #1
 800c144:	d001      	beq.n	800c14a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c146:	f003 fc67 	bl	800fa18 <xPortSysTickHandler>
  }
}
 800c14a:	bf00      	nop
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	e000e010 	.word	0xe000e010

0800c154 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c154:	b580      	push	{r7, lr}
 800c156:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c158:	2100      	movs	r1, #0
 800c15a:	f06f 0004 	mvn.w	r0, #4
 800c15e:	f7ff ffbf 	bl	800c0e0 <__NVIC_SetPriority>
#endif
}
 800c162:	bf00      	nop
 800c164:	bd80      	pop	{r7, pc}
	...

0800c168 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c168:	b480      	push	{r7}
 800c16a:	b083      	sub	sp, #12
 800c16c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c16e:	f3ef 8305 	mrs	r3, IPSR
 800c172:	603b      	str	r3, [r7, #0]
  return(result);
 800c174:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c176:	2b00      	cmp	r3, #0
 800c178:	d003      	beq.n	800c182 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c17a:	f06f 0305 	mvn.w	r3, #5
 800c17e:	607b      	str	r3, [r7, #4]
 800c180:	e00c      	b.n	800c19c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c182:	4b0a      	ldr	r3, [pc, #40]	@ (800c1ac <osKernelInitialize+0x44>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d105      	bne.n	800c196 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c18a:	4b08      	ldr	r3, [pc, #32]	@ (800c1ac <osKernelInitialize+0x44>)
 800c18c:	2201      	movs	r2, #1
 800c18e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c190:	2300      	movs	r3, #0
 800c192:	607b      	str	r3, [r7, #4]
 800c194:	e002      	b.n	800c19c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c196:	f04f 33ff 	mov.w	r3, #4294967295
 800c19a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c19c:	687b      	ldr	r3, [r7, #4]
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	370c      	adds	r7, #12
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr
 800c1aa:	bf00      	nop
 800c1ac:	24004fa0 	.word	0x24004fa0

0800c1b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1b6:	f3ef 8305 	mrs	r3, IPSR
 800c1ba:	603b      	str	r3, [r7, #0]
  return(result);
 800c1bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d003      	beq.n	800c1ca <osKernelStart+0x1a>
    stat = osErrorISR;
 800c1c2:	f06f 0305 	mvn.w	r3, #5
 800c1c6:	607b      	str	r3, [r7, #4]
 800c1c8:	e010      	b.n	800c1ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c1ca:	4b0b      	ldr	r3, [pc, #44]	@ (800c1f8 <osKernelStart+0x48>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d109      	bne.n	800c1e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c1d2:	f7ff ffbf 	bl	800c154 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c1d6:	4b08      	ldr	r3, [pc, #32]	@ (800c1f8 <osKernelStart+0x48>)
 800c1d8:	2202      	movs	r2, #2
 800c1da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c1dc:	f002 f896 	bl	800e30c <vTaskStartScheduler>
      stat = osOK;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	607b      	str	r3, [r7, #4]
 800c1e4:	e002      	b.n	800c1ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c1e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c1ec:	687b      	ldr	r3, [r7, #4]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3708      	adds	r7, #8
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	24004fa0 	.word	0x24004fa0

0800c1fc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c202:	f3ef 8305 	mrs	r3, IPSR
 800c206:	603b      	str	r3, [r7, #0]
  return(result);
 800c208:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d003      	beq.n	800c216 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c20e:	f002 f9a9 	bl	800e564 <xTaskGetTickCountFromISR>
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	e002      	b.n	800c21c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c216:	f002 f995 	bl	800e544 <xTaskGetTickCount>
 800c21a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c21c:	687b      	ldr	r3, [r7, #4]
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3708      	adds	r7, #8
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c226:	b580      	push	{r7, lr}
 800c228:	b08e      	sub	sp, #56	@ 0x38
 800c22a:	af04      	add	r7, sp, #16
 800c22c:	60f8      	str	r0, [r7, #12]
 800c22e:	60b9      	str	r1, [r7, #8]
 800c230:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c232:	2300      	movs	r3, #0
 800c234:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c236:	f3ef 8305 	mrs	r3, IPSR
 800c23a:	617b      	str	r3, [r7, #20]
  return(result);
 800c23c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d17e      	bne.n	800c340 <osThreadNew+0x11a>
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d07b      	beq.n	800c340 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c248:	2380      	movs	r3, #128	@ 0x80
 800c24a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c24c:	2318      	movs	r3, #24
 800c24e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c250:	2300      	movs	r3, #0
 800c252:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c254:	f04f 33ff 	mov.w	r3, #4294967295
 800c258:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d045      	beq.n	800c2ec <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d002      	beq.n	800c26e <osThreadNew+0x48>
        name = attr->name;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	699b      	ldr	r3, [r3, #24]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d002      	beq.n	800c27c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	699b      	ldr	r3, [r3, #24]
 800c27a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d008      	beq.n	800c294 <osThreadNew+0x6e>
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	2b38      	cmp	r3, #56	@ 0x38
 800c286:	d805      	bhi.n	800c294 <osThreadNew+0x6e>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	685b      	ldr	r3, [r3, #4]
 800c28c:	f003 0301 	and.w	r3, r3, #1
 800c290:	2b00      	cmp	r3, #0
 800c292:	d001      	beq.n	800c298 <osThreadNew+0x72>
        return (NULL);
 800c294:	2300      	movs	r3, #0
 800c296:	e054      	b.n	800c342 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	695b      	ldr	r3, [r3, #20]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d003      	beq.n	800c2a8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	695b      	ldr	r3, [r3, #20]
 800c2a4:	089b      	lsrs	r3, r3, #2
 800c2a6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	689b      	ldr	r3, [r3, #8]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d00e      	beq.n	800c2ce <osThreadNew+0xa8>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	2ba7      	cmp	r3, #167	@ 0xa7
 800c2b6:	d90a      	bls.n	800c2ce <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d006      	beq.n	800c2ce <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	695b      	ldr	r3, [r3, #20]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d002      	beq.n	800c2ce <osThreadNew+0xa8>
        mem = 1;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	61bb      	str	r3, [r7, #24]
 800c2cc:	e010      	b.n	800c2f0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d10c      	bne.n	800c2f0 <osThreadNew+0xca>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d108      	bne.n	800c2f0 <osThreadNew+0xca>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	691b      	ldr	r3, [r3, #16]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d104      	bne.n	800c2f0 <osThreadNew+0xca>
          mem = 0;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	61bb      	str	r3, [r7, #24]
 800c2ea:	e001      	b.n	800c2f0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c2f0:	69bb      	ldr	r3, [r7, #24]
 800c2f2:	2b01      	cmp	r3, #1
 800c2f4:	d110      	bne.n	800c318 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c2fe:	9202      	str	r2, [sp, #8]
 800c300:	9301      	str	r3, [sp, #4]
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	9300      	str	r3, [sp, #0]
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	6a3a      	ldr	r2, [r7, #32]
 800c30a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c30c:	68f8      	ldr	r0, [r7, #12]
 800c30e:	f001 fe09 	bl	800df24 <xTaskCreateStatic>
 800c312:	4603      	mov	r3, r0
 800c314:	613b      	str	r3, [r7, #16]
 800c316:	e013      	b.n	800c340 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d110      	bne.n	800c340 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c31e:	6a3b      	ldr	r3, [r7, #32]
 800c320:	b29a      	uxth	r2, r3
 800c322:	f107 0310 	add.w	r3, r7, #16
 800c326:	9301      	str	r3, [sp, #4]
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	9300      	str	r3, [sp, #0]
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	f001 fe57 	bl	800dfe4 <xTaskCreate>
 800c336:	4603      	mov	r3, r0
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d001      	beq.n	800c340 <osThreadNew+0x11a>
            hTask = NULL;
 800c33c:	2300      	movs	r3, #0
 800c33e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c340:	693b      	ldr	r3, [r7, #16]
}
 800c342:	4618      	mov	r0, r3
 800c344:	3728      	adds	r7, #40	@ 0x28
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b084      	sub	sp, #16
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c352:	f3ef 8305 	mrs	r3, IPSR
 800c356:	60bb      	str	r3, [r7, #8]
  return(result);
 800c358:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d003      	beq.n	800c366 <osDelay+0x1c>
    stat = osErrorISR;
 800c35e:	f06f 0305 	mvn.w	r3, #5
 800c362:	60fb      	str	r3, [r7, #12]
 800c364:	e007      	b.n	800c376 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c366:	2300      	movs	r3, #0
 800c368:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d002      	beq.n	800c376 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f001 ff95 	bl	800e2a0 <vTaskDelay>
    }
  }

  return (stat);
 800c376:	68fb      	ldr	r3, [r7, #12]
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3710      	adds	r7, #16
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c380:	b580      	push	{r7, lr}
 800c382:	b088      	sub	sp, #32
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c388:	2300      	movs	r3, #0
 800c38a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c38c:	f3ef 8305 	mrs	r3, IPSR
 800c390:	60bb      	str	r3, [r7, #8]
  return(result);
 800c392:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c394:	2b00      	cmp	r3, #0
 800c396:	d174      	bne.n	800c482 <osMutexNew+0x102>
    if (attr != NULL) {
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d003      	beq.n	800c3a6 <osMutexNew+0x26>
      type = attr->attr_bits;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	61bb      	str	r3, [r7, #24]
 800c3a4:	e001      	b.n	800c3aa <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	f003 0301 	and.w	r3, r3, #1
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d002      	beq.n	800c3ba <osMutexNew+0x3a>
      rmtx = 1U;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	617b      	str	r3, [r7, #20]
 800c3b8:	e001      	b.n	800c3be <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	f003 0308 	and.w	r3, r3, #8
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d15c      	bne.n	800c482 <osMutexNew+0x102>
      mem = -1;
 800c3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c3cc:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d015      	beq.n	800c400 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d006      	beq.n	800c3ea <osMutexNew+0x6a>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	68db      	ldr	r3, [r3, #12]
 800c3e0:	2b4f      	cmp	r3, #79	@ 0x4f
 800c3e2:	d902      	bls.n	800c3ea <osMutexNew+0x6a>
          mem = 1;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	613b      	str	r3, [r7, #16]
 800c3e8:	e00c      	b.n	800c404 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	689b      	ldr	r3, [r3, #8]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d108      	bne.n	800c404 <osMutexNew+0x84>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d104      	bne.n	800c404 <osMutexNew+0x84>
            mem = 0;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	613b      	str	r3, [r7, #16]
 800c3fe:	e001      	b.n	800c404 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c400:	2300      	movs	r3, #0
 800c402:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	2b01      	cmp	r3, #1
 800c408:	d112      	bne.n	800c430 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d007      	beq.n	800c420 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	4619      	mov	r1, r3
 800c416:	2004      	movs	r0, #4
 800c418:	f000 fdd9 	bl	800cfce <xQueueCreateMutexStatic>
 800c41c:	61f8      	str	r0, [r7, #28]
 800c41e:	e016      	b.n	800c44e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	689b      	ldr	r3, [r3, #8]
 800c424:	4619      	mov	r1, r3
 800c426:	2001      	movs	r0, #1
 800c428:	f000 fdd1 	bl	800cfce <xQueueCreateMutexStatic>
 800c42c:	61f8      	str	r0, [r7, #28]
 800c42e:	e00e      	b.n	800c44e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d10b      	bne.n	800c44e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d004      	beq.n	800c446 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c43c:	2004      	movs	r0, #4
 800c43e:	f000 fdae 	bl	800cf9e <xQueueCreateMutex>
 800c442:	61f8      	str	r0, [r7, #28]
 800c444:	e003      	b.n	800c44e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c446:	2001      	movs	r0, #1
 800c448:	f000 fda9 	bl	800cf9e <xQueueCreateMutex>
 800c44c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c44e:	69fb      	ldr	r3, [r7, #28]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d00c      	beq.n	800c46e <osMutexNew+0xee>
        if (attr != NULL) {
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d003      	beq.n	800c462 <osMutexNew+0xe2>
          name = attr->name;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	60fb      	str	r3, [r7, #12]
 800c460:	e001      	b.n	800c466 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c462:	2300      	movs	r3, #0
 800c464:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c466:	68f9      	ldr	r1, [r7, #12]
 800c468:	69f8      	ldr	r0, [r7, #28]
 800c46a:	f001 fcd3 	bl	800de14 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c46e:	69fb      	ldr	r3, [r7, #28]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d006      	beq.n	800c482 <osMutexNew+0x102>
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d003      	beq.n	800c482 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c47a:	69fb      	ldr	r3, [r7, #28]
 800c47c:	f043 0301 	orr.w	r3, r3, #1
 800c480:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c482:	69fb      	ldr	r3, [r7, #28]
}
 800c484:	4618      	mov	r0, r3
 800c486:	3720      	adds	r7, #32
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b086      	sub	sp, #24
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f023 0301 	bic.w	r3, r3, #1
 800c49c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f003 0301 	and.w	r3, r3, #1
 800c4a4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4aa:	f3ef 8305 	mrs	r3, IPSR
 800c4ae:	60bb      	str	r3, [r7, #8]
  return(result);
 800c4b0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d003      	beq.n	800c4be <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c4b6:	f06f 0305 	mvn.w	r3, #5
 800c4ba:	617b      	str	r3, [r7, #20]
 800c4bc:	e02c      	b.n	800c518 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d103      	bne.n	800c4cc <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c4c4:	f06f 0303 	mvn.w	r3, #3
 800c4c8:	617b      	str	r3, [r7, #20]
 800c4ca:	e025      	b.n	800c518 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d011      	beq.n	800c4f6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c4d2:	6839      	ldr	r1, [r7, #0]
 800c4d4:	6938      	ldr	r0, [r7, #16]
 800c4d6:	f000 fdca 	bl	800d06e <xQueueTakeMutexRecursive>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d01b      	beq.n	800c518 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d003      	beq.n	800c4ee <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c4e6:	f06f 0301 	mvn.w	r3, #1
 800c4ea:	617b      	str	r3, [r7, #20]
 800c4ec:	e014      	b.n	800c518 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c4ee:	f06f 0302 	mvn.w	r3, #2
 800c4f2:	617b      	str	r3, [r7, #20]
 800c4f4:	e010      	b.n	800c518 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c4f6:	6839      	ldr	r1, [r7, #0]
 800c4f8:	6938      	ldr	r0, [r7, #16]
 800c4fa:	f001 f96f 	bl	800d7dc <xQueueSemaphoreTake>
 800c4fe:	4603      	mov	r3, r0
 800c500:	2b01      	cmp	r3, #1
 800c502:	d009      	beq.n	800c518 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d003      	beq.n	800c512 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c50a:	f06f 0301 	mvn.w	r3, #1
 800c50e:	617b      	str	r3, [r7, #20]
 800c510:	e002      	b.n	800c518 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c512:	f06f 0302 	mvn.w	r3, #2
 800c516:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c518:	697b      	ldr	r3, [r7, #20]
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3718      	adds	r7, #24
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}

0800c522 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c522:	b580      	push	{r7, lr}
 800c524:	b086      	sub	sp, #24
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f023 0301 	bic.w	r3, r3, #1
 800c530:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f003 0301 	and.w	r3, r3, #1
 800c538:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c53a:	2300      	movs	r3, #0
 800c53c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c53e:	f3ef 8305 	mrs	r3, IPSR
 800c542:	60bb      	str	r3, [r7, #8]
  return(result);
 800c544:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c546:	2b00      	cmp	r3, #0
 800c548:	d003      	beq.n	800c552 <osMutexRelease+0x30>
    stat = osErrorISR;
 800c54a:	f06f 0305 	mvn.w	r3, #5
 800c54e:	617b      	str	r3, [r7, #20]
 800c550:	e01f      	b.n	800c592 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d103      	bne.n	800c560 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c558:	f06f 0303 	mvn.w	r3, #3
 800c55c:	617b      	str	r3, [r7, #20]
 800c55e:	e018      	b.n	800c592 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d009      	beq.n	800c57a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c566:	6938      	ldr	r0, [r7, #16]
 800c568:	f000 fd4c 	bl	800d004 <xQueueGiveMutexRecursive>
 800c56c:	4603      	mov	r3, r0
 800c56e:	2b01      	cmp	r3, #1
 800c570:	d00f      	beq.n	800c592 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c572:	f06f 0302 	mvn.w	r3, #2
 800c576:	617b      	str	r3, [r7, #20]
 800c578:	e00b      	b.n	800c592 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c57a:	2300      	movs	r3, #0
 800c57c:	2200      	movs	r2, #0
 800c57e:	2100      	movs	r1, #0
 800c580:	6938      	ldr	r0, [r7, #16]
 800c582:	f000 fe19 	bl	800d1b8 <xQueueGenericSend>
 800c586:	4603      	mov	r3, r0
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d002      	beq.n	800c592 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c58c:	f06f 0302 	mvn.w	r3, #2
 800c590:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c592:	697b      	ldr	r3, [r7, #20]
}
 800c594:	4618      	mov	r0, r3
 800c596:	3718      	adds	r7, #24
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b08a      	sub	sp, #40	@ 0x28
 800c5a0:	af02      	add	r7, sp, #8
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5ac:	f3ef 8305 	mrs	r3, IPSR
 800c5b0:	613b      	str	r3, [r7, #16]
  return(result);
 800c5b2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d175      	bne.n	800c6a4 <osSemaphoreNew+0x108>
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d072      	beq.n	800c6a4 <osSemaphoreNew+0x108>
 800c5be:	68ba      	ldr	r2, [r7, #8]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d86e      	bhi.n	800c6a4 <osSemaphoreNew+0x108>
    mem = -1;
 800c5c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d015      	beq.n	800c5fe <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d006      	beq.n	800c5e8 <osSemaphoreNew+0x4c>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	68db      	ldr	r3, [r3, #12]
 800c5de:	2b4f      	cmp	r3, #79	@ 0x4f
 800c5e0:	d902      	bls.n	800c5e8 <osSemaphoreNew+0x4c>
        mem = 1;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	61bb      	str	r3, [r7, #24]
 800c5e6:	e00c      	b.n	800c602 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	689b      	ldr	r3, [r3, #8]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d108      	bne.n	800c602 <osSemaphoreNew+0x66>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	68db      	ldr	r3, [r3, #12]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d104      	bne.n	800c602 <osSemaphoreNew+0x66>
          mem = 0;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	61bb      	str	r3, [r7, #24]
 800c5fc:	e001      	b.n	800c602 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c5fe:	2300      	movs	r3, #0
 800c600:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c602:	69bb      	ldr	r3, [r7, #24]
 800c604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c608:	d04c      	beq.n	800c6a4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d128      	bne.n	800c662 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c610:	69bb      	ldr	r3, [r7, #24]
 800c612:	2b01      	cmp	r3, #1
 800c614:	d10a      	bne.n	800c62c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	2203      	movs	r2, #3
 800c61c:	9200      	str	r2, [sp, #0]
 800c61e:	2200      	movs	r2, #0
 800c620:	2100      	movs	r1, #0
 800c622:	2001      	movs	r0, #1
 800c624:	f000 fbc6 	bl	800cdb4 <xQueueGenericCreateStatic>
 800c628:	61f8      	str	r0, [r7, #28]
 800c62a:	e005      	b.n	800c638 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c62c:	2203      	movs	r2, #3
 800c62e:	2100      	movs	r1, #0
 800c630:	2001      	movs	r0, #1
 800c632:	f000 fc3c 	bl	800ceae <xQueueGenericCreate>
 800c636:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d022      	beq.n	800c684 <osSemaphoreNew+0xe8>
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d01f      	beq.n	800c684 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c644:	2300      	movs	r3, #0
 800c646:	2200      	movs	r2, #0
 800c648:	2100      	movs	r1, #0
 800c64a:	69f8      	ldr	r0, [r7, #28]
 800c64c:	f000 fdb4 	bl	800d1b8 <xQueueGenericSend>
 800c650:	4603      	mov	r3, r0
 800c652:	2b01      	cmp	r3, #1
 800c654:	d016      	beq.n	800c684 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c656:	69f8      	ldr	r0, [r7, #28]
 800c658:	f001 fa90 	bl	800db7c <vQueueDelete>
            hSemaphore = NULL;
 800c65c:	2300      	movs	r3, #0
 800c65e:	61fb      	str	r3, [r7, #28]
 800c660:	e010      	b.n	800c684 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c662:	69bb      	ldr	r3, [r7, #24]
 800c664:	2b01      	cmp	r3, #1
 800c666:	d108      	bne.n	800c67a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	689b      	ldr	r3, [r3, #8]
 800c66c:	461a      	mov	r2, r3
 800c66e:	68b9      	ldr	r1, [r7, #8]
 800c670:	68f8      	ldr	r0, [r7, #12]
 800c672:	f000 fd33 	bl	800d0dc <xQueueCreateCountingSemaphoreStatic>
 800c676:	61f8      	str	r0, [r7, #28]
 800c678:	e004      	b.n	800c684 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c67a:	68b9      	ldr	r1, [r7, #8]
 800c67c:	68f8      	ldr	r0, [r7, #12]
 800c67e:	f000 fd66 	bl	800d14e <xQueueCreateCountingSemaphore>
 800c682:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d00c      	beq.n	800c6a4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d003      	beq.n	800c698 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	617b      	str	r3, [r7, #20]
 800c696:	e001      	b.n	800c69c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c698:	2300      	movs	r3, #0
 800c69a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c69c:	6979      	ldr	r1, [r7, #20]
 800c69e:	69f8      	ldr	r0, [r7, #28]
 800c6a0:	f001 fbb8 	bl	800de14 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c6a4:	69fb      	ldr	r3, [r7, #28]
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3720      	adds	r7, #32
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
	...

0800c6b0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b086      	sub	sp, #24
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d103      	bne.n	800c6d0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c6c8:	f06f 0303 	mvn.w	r3, #3
 800c6cc:	617b      	str	r3, [r7, #20]
 800c6ce:	e039      	b.n	800c744 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6d0:	f3ef 8305 	mrs	r3, IPSR
 800c6d4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c6d6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d022      	beq.n	800c722 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d003      	beq.n	800c6ea <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c6e2:	f06f 0303 	mvn.w	r3, #3
 800c6e6:	617b      	str	r3, [r7, #20]
 800c6e8:	e02c      	b.n	800c744 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c6ee:	f107 0308 	add.w	r3, r7, #8
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	6938      	ldr	r0, [r7, #16]
 800c6f8:	f001 f980 	bl	800d9fc <xQueueReceiveFromISR>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	d003      	beq.n	800c70a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c702:	f06f 0302 	mvn.w	r3, #2
 800c706:	617b      	str	r3, [r7, #20]
 800c708:	e01c      	b.n	800c744 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d019      	beq.n	800c744 <osSemaphoreAcquire+0x94>
 800c710:	4b0f      	ldr	r3, [pc, #60]	@ (800c750 <osSemaphoreAcquire+0xa0>)
 800c712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c716:	601a      	str	r2, [r3, #0]
 800c718:	f3bf 8f4f 	dsb	sy
 800c71c:	f3bf 8f6f 	isb	sy
 800c720:	e010      	b.n	800c744 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c722:	6839      	ldr	r1, [r7, #0]
 800c724:	6938      	ldr	r0, [r7, #16]
 800c726:	f001 f859 	bl	800d7dc <xQueueSemaphoreTake>
 800c72a:	4603      	mov	r3, r0
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d009      	beq.n	800c744 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d003      	beq.n	800c73e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c736:	f06f 0301 	mvn.w	r3, #1
 800c73a:	617b      	str	r3, [r7, #20]
 800c73c:	e002      	b.n	800c744 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c73e:	f06f 0302 	mvn.w	r3, #2
 800c742:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c744:	697b      	ldr	r3, [r7, #20]
}
 800c746:	4618      	mov	r0, r3
 800c748:	3718      	adds	r7, #24
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	e000ed04 	.word	0xe000ed04

0800c754 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c754:	b580      	push	{r7, lr}
 800c756:	b086      	sub	sp, #24
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c760:	2300      	movs	r3, #0
 800c762:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d103      	bne.n	800c772 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c76a:	f06f 0303 	mvn.w	r3, #3
 800c76e:	617b      	str	r3, [r7, #20]
 800c770:	e02c      	b.n	800c7cc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c772:	f3ef 8305 	mrs	r3, IPSR
 800c776:	60fb      	str	r3, [r7, #12]
  return(result);
 800c778:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d01a      	beq.n	800c7b4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c77e:	2300      	movs	r3, #0
 800c780:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c782:	f107 0308 	add.w	r3, r7, #8
 800c786:	4619      	mov	r1, r3
 800c788:	6938      	ldr	r0, [r7, #16]
 800c78a:	f000 feb5 	bl	800d4f8 <xQueueGiveFromISR>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b01      	cmp	r3, #1
 800c792:	d003      	beq.n	800c79c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c794:	f06f 0302 	mvn.w	r3, #2
 800c798:	617b      	str	r3, [r7, #20]
 800c79a:	e017      	b.n	800c7cc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d014      	beq.n	800c7cc <osSemaphoreRelease+0x78>
 800c7a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c7d8 <osSemaphoreRelease+0x84>)
 800c7a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7a8:	601a      	str	r2, [r3, #0]
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	f3bf 8f6f 	isb	sy
 800c7b2:	e00b      	b.n	800c7cc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	2100      	movs	r1, #0
 800c7ba:	6938      	ldr	r0, [r7, #16]
 800c7bc:	f000 fcfc 	bl	800d1b8 <xQueueGenericSend>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d002      	beq.n	800c7cc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c7c6:	f06f 0302 	mvn.w	r3, #2
 800c7ca:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c7cc:	697b      	ldr	r3, [r7, #20]
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3718      	adds	r7, #24
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	e000ed04 	.word	0xe000ed04

0800c7dc <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b086      	sub	sp, #24
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7e8:	f3ef 8305 	mrs	r3, IPSR
 800c7ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d003      	beq.n	800c7fc <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800c7f4:	f06f 0305 	mvn.w	r3, #5
 800c7f8:	617b      	str	r3, [r7, #20]
 800c7fa:	e00e      	b.n	800c81a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d103      	bne.n	800c80a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800c802:	f06f 0303 	mvn.w	r3, #3
 800c806:	617b      	str	r3, [r7, #20]
 800c808:	e007      	b.n	800c81a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800c80a:	6938      	ldr	r0, [r7, #16]
 800c80c:	f001 fb2c 	bl	800de68 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800c810:	2300      	movs	r3, #0
 800c812:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800c814:	6938      	ldr	r0, [r7, #16]
 800c816:	f001 f9b1 	bl	800db7c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800c81a:	697b      	ldr	r3, [r7, #20]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3718      	adds	r7, #24
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c824:	b580      	push	{r7, lr}
 800c826:	b08a      	sub	sp, #40	@ 0x28
 800c828:	af02      	add	r7, sp, #8
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c830:	2300      	movs	r3, #0
 800c832:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c834:	f3ef 8305 	mrs	r3, IPSR
 800c838:	613b      	str	r3, [r7, #16]
  return(result);
 800c83a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d15f      	bne.n	800c900 <osMessageQueueNew+0xdc>
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d05c      	beq.n	800c900 <osMessageQueueNew+0xdc>
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d059      	beq.n	800c900 <osMessageQueueNew+0xdc>
    mem = -1;
 800c84c:	f04f 33ff 	mov.w	r3, #4294967295
 800c850:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d029      	beq.n	800c8ac <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d012      	beq.n	800c886 <osMessageQueueNew+0x62>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	2b4f      	cmp	r3, #79	@ 0x4f
 800c866:	d90e      	bls.n	800c886 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d00a      	beq.n	800c886 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	695a      	ldr	r2, [r3, #20]
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	68b9      	ldr	r1, [r7, #8]
 800c878:	fb01 f303 	mul.w	r3, r1, r3
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d302      	bcc.n	800c886 <osMessageQueueNew+0x62>
        mem = 1;
 800c880:	2301      	movs	r3, #1
 800c882:	61bb      	str	r3, [r7, #24]
 800c884:	e014      	b.n	800c8b0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	689b      	ldr	r3, [r3, #8]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d110      	bne.n	800c8b0 <osMessageQueueNew+0x8c>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d10c      	bne.n	800c8b0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d108      	bne.n	800c8b0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	695b      	ldr	r3, [r3, #20]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d104      	bne.n	800c8b0 <osMessageQueueNew+0x8c>
          mem = 0;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	61bb      	str	r3, [r7, #24]
 800c8aa:	e001      	b.n	800c8b0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	2b01      	cmp	r3, #1
 800c8b4:	d10b      	bne.n	800c8ce <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	691a      	ldr	r2, [r3, #16]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	689b      	ldr	r3, [r3, #8]
 800c8be:	2100      	movs	r1, #0
 800c8c0:	9100      	str	r1, [sp, #0]
 800c8c2:	68b9      	ldr	r1, [r7, #8]
 800c8c4:	68f8      	ldr	r0, [r7, #12]
 800c8c6:	f000 fa75 	bl	800cdb4 <xQueueGenericCreateStatic>
 800c8ca:	61f8      	str	r0, [r7, #28]
 800c8cc:	e008      	b.n	800c8e0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d105      	bne.n	800c8e0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	68b9      	ldr	r1, [r7, #8]
 800c8d8:	68f8      	ldr	r0, [r7, #12]
 800c8da:	f000 fae8 	bl	800ceae <xQueueGenericCreate>
 800c8de:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c8e0:	69fb      	ldr	r3, [r7, #28]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d00c      	beq.n	800c900 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d003      	beq.n	800c8f4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	617b      	str	r3, [r7, #20]
 800c8f2:	e001      	b.n	800c8f8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c8f8:	6979      	ldr	r1, [r7, #20]
 800c8fa:	69f8      	ldr	r0, [r7, #28]
 800c8fc:	f001 fa8a 	bl	800de14 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c900:	69fb      	ldr	r3, [r7, #28]
}
 800c902:	4618      	mov	r0, r3
 800c904:	3720      	adds	r7, #32
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
	...

0800c90c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b088      	sub	sp, #32
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	603b      	str	r3, [r7, #0]
 800c918:	4613      	mov	r3, r2
 800c91a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c920:	2300      	movs	r3, #0
 800c922:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c924:	f3ef 8305 	mrs	r3, IPSR
 800c928:	617b      	str	r3, [r7, #20]
  return(result);
 800c92a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d028      	beq.n	800c982 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c930:	69bb      	ldr	r3, [r7, #24]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d005      	beq.n	800c942 <osMessageQueuePut+0x36>
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d002      	beq.n	800c942 <osMessageQueuePut+0x36>
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d003      	beq.n	800c94a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c942:	f06f 0303 	mvn.w	r3, #3
 800c946:	61fb      	str	r3, [r7, #28]
 800c948:	e038      	b.n	800c9bc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c94a:	2300      	movs	r3, #0
 800c94c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c94e:	f107 0210 	add.w	r2, r7, #16
 800c952:	2300      	movs	r3, #0
 800c954:	68b9      	ldr	r1, [r7, #8]
 800c956:	69b8      	ldr	r0, [r7, #24]
 800c958:	f000 fd30 	bl	800d3bc <xQueueGenericSendFromISR>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b01      	cmp	r3, #1
 800c960:	d003      	beq.n	800c96a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c962:	f06f 0302 	mvn.w	r3, #2
 800c966:	61fb      	str	r3, [r7, #28]
 800c968:	e028      	b.n	800c9bc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d025      	beq.n	800c9bc <osMessageQueuePut+0xb0>
 800c970:	4b15      	ldr	r3, [pc, #84]	@ (800c9c8 <osMessageQueuePut+0xbc>)
 800c972:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c976:	601a      	str	r2, [r3, #0]
 800c978:	f3bf 8f4f 	dsb	sy
 800c97c:	f3bf 8f6f 	isb	sy
 800c980:	e01c      	b.n	800c9bc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c982:	69bb      	ldr	r3, [r7, #24]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d002      	beq.n	800c98e <osMessageQueuePut+0x82>
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d103      	bne.n	800c996 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c98e:	f06f 0303 	mvn.w	r3, #3
 800c992:	61fb      	str	r3, [r7, #28]
 800c994:	e012      	b.n	800c9bc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c996:	2300      	movs	r3, #0
 800c998:	683a      	ldr	r2, [r7, #0]
 800c99a:	68b9      	ldr	r1, [r7, #8]
 800c99c:	69b8      	ldr	r0, [r7, #24]
 800c99e:	f000 fc0b 	bl	800d1b8 <xQueueGenericSend>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d009      	beq.n	800c9bc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d003      	beq.n	800c9b6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c9ae:	f06f 0301 	mvn.w	r3, #1
 800c9b2:	61fb      	str	r3, [r7, #28]
 800c9b4:	e002      	b.n	800c9bc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c9b6:	f06f 0302 	mvn.w	r3, #2
 800c9ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c9bc:	69fb      	ldr	r3, [r7, #28]
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3720      	adds	r7, #32
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	e000ed04 	.word	0xe000ed04

0800c9cc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b088      	sub	sp, #32
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	60f8      	str	r0, [r7, #12]
 800c9d4:	60b9      	str	r1, [r7, #8]
 800c9d6:	607a      	str	r2, [r7, #4]
 800c9d8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9e2:	f3ef 8305 	mrs	r3, IPSR
 800c9e6:	617b      	str	r3, [r7, #20]
  return(result);
 800c9e8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d028      	beq.n	800ca40 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c9ee:	69bb      	ldr	r3, [r7, #24]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d005      	beq.n	800ca00 <osMessageQueueGet+0x34>
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d002      	beq.n	800ca00 <osMessageQueueGet+0x34>
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d003      	beq.n	800ca08 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ca00:	f06f 0303 	mvn.w	r3, #3
 800ca04:	61fb      	str	r3, [r7, #28]
 800ca06:	e037      	b.n	800ca78 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ca0c:	f107 0310 	add.w	r3, r7, #16
 800ca10:	461a      	mov	r2, r3
 800ca12:	68b9      	ldr	r1, [r7, #8]
 800ca14:	69b8      	ldr	r0, [r7, #24]
 800ca16:	f000 fff1 	bl	800d9fc <xQueueReceiveFromISR>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d003      	beq.n	800ca28 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ca20:	f06f 0302 	mvn.w	r3, #2
 800ca24:	61fb      	str	r3, [r7, #28]
 800ca26:	e027      	b.n	800ca78 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d024      	beq.n	800ca78 <osMessageQueueGet+0xac>
 800ca2e:	4b15      	ldr	r3, [pc, #84]	@ (800ca84 <osMessageQueueGet+0xb8>)
 800ca30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca34:	601a      	str	r2, [r3, #0]
 800ca36:	f3bf 8f4f 	dsb	sy
 800ca3a:	f3bf 8f6f 	isb	sy
 800ca3e:	e01b      	b.n	800ca78 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ca40:	69bb      	ldr	r3, [r7, #24]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d002      	beq.n	800ca4c <osMessageQueueGet+0x80>
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d103      	bne.n	800ca54 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ca4c:	f06f 0303 	mvn.w	r3, #3
 800ca50:	61fb      	str	r3, [r7, #28]
 800ca52:	e011      	b.n	800ca78 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ca54:	683a      	ldr	r2, [r7, #0]
 800ca56:	68b9      	ldr	r1, [r7, #8]
 800ca58:	69b8      	ldr	r0, [r7, #24]
 800ca5a:	f000 fddd 	bl	800d618 <xQueueReceive>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d009      	beq.n	800ca78 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d003      	beq.n	800ca72 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ca6a:	f06f 0301 	mvn.w	r3, #1
 800ca6e:	61fb      	str	r3, [r7, #28]
 800ca70:	e002      	b.n	800ca78 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ca72:	f06f 0302 	mvn.w	r3, #2
 800ca76:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ca78:	69fb      	ldr	r3, [r7, #28]
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3720      	adds	r7, #32
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	e000ed04 	.word	0xe000ed04

0800ca88 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b086      	sub	sp, #24
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d102      	bne.n	800caa0 <osMessageQueueGetCount+0x18>
    count = 0U;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	617b      	str	r3, [r7, #20]
 800ca9e:	e00e      	b.n	800cabe <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800caa0:	f3ef 8305 	mrs	r3, IPSR
 800caa4:	60fb      	str	r3, [r7, #12]
  return(result);
 800caa6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d004      	beq.n	800cab6 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800caac:	6938      	ldr	r0, [r7, #16]
 800caae:	f001 f846 	bl	800db3e <uxQueueMessagesWaitingFromISR>
 800cab2:	6178      	str	r0, [r7, #20]
 800cab4:	e003      	b.n	800cabe <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800cab6:	6938      	ldr	r0, [r7, #16]
 800cab8:	f001 f822 	bl	800db00 <uxQueueMessagesWaiting>
 800cabc:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800cabe:	697b      	ldr	r3, [r7, #20]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3718      	adds	r7, #24
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800cac8:	b580      	push	{r7, lr}
 800caca:	b086      	sub	sp, #24
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cad4:	f3ef 8305 	mrs	r3, IPSR
 800cad8:	60fb      	str	r3, [r7, #12]
  return(result);
 800cada:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d003      	beq.n	800cae8 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 800cae0:	f06f 0305 	mvn.w	r3, #5
 800cae4:	617b      	str	r3, [r7, #20]
 800cae6:	e00e      	b.n	800cb06 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d103      	bne.n	800caf6 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800caee:	f06f 0303 	mvn.w	r3, #3
 800caf2:	617b      	str	r3, [r7, #20]
 800caf4:	e007      	b.n	800cb06 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800caf6:	6938      	ldr	r0, [r7, #16]
 800caf8:	f001 f9b6 	bl	800de68 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800cafc:	2300      	movs	r3, #0
 800cafe:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 800cb00:	6938      	ldr	r0, [r7, #16]
 800cb02:	f001 f83b 	bl	800db7c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800cb06:	697b      	ldr	r3, [r7, #20]
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3718      	adds	r7, #24
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cb10:	b480      	push	{r7}
 800cb12:	b085      	sub	sp, #20
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	4a07      	ldr	r2, [pc, #28]	@ (800cb3c <vApplicationGetIdleTaskMemory+0x2c>)
 800cb20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	4a06      	ldr	r2, [pc, #24]	@ (800cb40 <vApplicationGetIdleTaskMemory+0x30>)
 800cb26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2280      	movs	r2, #128	@ 0x80
 800cb2c:	601a      	str	r2, [r3, #0]
}
 800cb2e:	bf00      	nop
 800cb30:	3714      	adds	r7, #20
 800cb32:	46bd      	mov	sp, r7
 800cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb38:	4770      	bx	lr
 800cb3a:	bf00      	nop
 800cb3c:	24004fa4 	.word	0x24004fa4
 800cb40:	2400504c 	.word	0x2400504c

0800cb44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cb44:	b480      	push	{r7}
 800cb46:	b085      	sub	sp, #20
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	4a07      	ldr	r2, [pc, #28]	@ (800cb70 <vApplicationGetTimerTaskMemory+0x2c>)
 800cb54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	4a06      	ldr	r2, [pc, #24]	@ (800cb74 <vApplicationGetTimerTaskMemory+0x30>)
 800cb5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cb62:	601a      	str	r2, [r3, #0]
}
 800cb64:	bf00      	nop
 800cb66:	3714      	adds	r7, #20
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr
 800cb70:	2400524c 	.word	0x2400524c
 800cb74:	240052f4 	.word	0x240052f4

0800cb78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f103 0208 	add.w	r2, r3, #8
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f103 0208 	add.w	r2, r3, #8
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f103 0208 	add.w	r2, r3, #8
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cbac:	bf00      	nop
 800cbae:	370c      	adds	r7, #12
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr

0800cbb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b083      	sub	sp, #12
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cbc6:	bf00      	nop
 800cbc8:	370c      	adds	r7, #12
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr

0800cbd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cbd2:	b480      	push	{r7}
 800cbd4:	b085      	sub	sp, #20
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
 800cbda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	68fa      	ldr	r2, [r7, #12]
 800cbe6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	689a      	ldr	r2, [r3, #8]
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	683a      	ldr	r2, [r7, #0]
 800cbf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	683a      	ldr	r2, [r7, #0]
 800cbfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	1c5a      	adds	r2, r3, #1
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	601a      	str	r2, [r3, #0]
}
 800cc0e:	bf00      	nop
 800cc10:	3714      	adds	r7, #20
 800cc12:	46bd      	mov	sp, r7
 800cc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc18:	4770      	bx	lr

0800cc1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cc1a:	b480      	push	{r7}
 800cc1c:	b085      	sub	sp, #20
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	6078      	str	r0, [r7, #4]
 800cc22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc30:	d103      	bne.n	800cc3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	691b      	ldr	r3, [r3, #16]
 800cc36:	60fb      	str	r3, [r7, #12]
 800cc38:	e00c      	b.n	800cc54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	3308      	adds	r3, #8
 800cc3e:	60fb      	str	r3, [r7, #12]
 800cc40:	e002      	b.n	800cc48 <vListInsert+0x2e>
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	60fb      	str	r3, [r7, #12]
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	68ba      	ldr	r2, [r7, #8]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d2f6      	bcs.n	800cc42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	685a      	ldr	r2, [r3, #4]
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	683a      	ldr	r2, [r7, #0]
 800cc62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	68fa      	ldr	r2, [r7, #12]
 800cc68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	683a      	ldr	r2, [r7, #0]
 800cc6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	1c5a      	adds	r2, r3, #1
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	601a      	str	r2, [r3, #0]
}
 800cc80:	bf00      	nop
 800cc82:	3714      	adds	r7, #20
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b085      	sub	sp, #20
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	691b      	ldr	r3, [r3, #16]
 800cc98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	6892      	ldr	r2, [r2, #8]
 800cca2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	6852      	ldr	r2, [r2, #4]
 800ccac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d103      	bne.n	800ccc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	689a      	ldr	r2, [r3, #8]
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	1e5a      	subs	r2, r3, #1
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3714      	adds	r7, #20
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d10b      	bne.n	800cd0c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ccf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccf8:	f383 8811 	msr	BASEPRI, r3
 800ccfc:	f3bf 8f6f 	isb	sy
 800cd00:	f3bf 8f4f 	dsb	sy
 800cd04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cd06:	bf00      	nop
 800cd08:	bf00      	nop
 800cd0a:	e7fd      	b.n	800cd08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cd0c:	f002 fdf4 	bl	800f8f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd18:	68f9      	ldr	r1, [r7, #12]
 800cd1a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cd1c:	fb01 f303 	mul.w	r3, r1, r3
 800cd20:	441a      	add	r2, r3
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd3c:	3b01      	subs	r3, #1
 800cd3e:	68f9      	ldr	r1, [r7, #12]
 800cd40:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cd42:	fb01 f303 	mul.w	r3, r1, r3
 800cd46:	441a      	add	r2, r3
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	22ff      	movs	r2, #255	@ 0xff
 800cd50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	22ff      	movs	r2, #255	@ 0xff
 800cd58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d114      	bne.n	800cd8c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	691b      	ldr	r3, [r3, #16]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d01a      	beq.n	800cda0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	3310      	adds	r3, #16
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f001 fd7c 	bl	800e86c <xTaskRemoveFromEventList>
 800cd74:	4603      	mov	r3, r0
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d012      	beq.n	800cda0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cd7a:	4b0d      	ldr	r3, [pc, #52]	@ (800cdb0 <xQueueGenericReset+0xd0>)
 800cd7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd80:	601a      	str	r2, [r3, #0]
 800cd82:	f3bf 8f4f 	dsb	sy
 800cd86:	f3bf 8f6f 	isb	sy
 800cd8a:	e009      	b.n	800cda0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	3310      	adds	r3, #16
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7ff fef1 	bl	800cb78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	3324      	adds	r3, #36	@ 0x24
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7ff feec 	bl	800cb78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cda0:	f002 fddc 	bl	800f95c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cda4:	2301      	movs	r3, #1
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3710      	adds	r7, #16
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
 800cdae:	bf00      	nop
 800cdb0:	e000ed04 	.word	0xe000ed04

0800cdb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b08e      	sub	sp, #56	@ 0x38
 800cdb8:	af02      	add	r7, sp, #8
 800cdba:	60f8      	str	r0, [r7, #12]
 800cdbc:	60b9      	str	r1, [r7, #8]
 800cdbe:	607a      	str	r2, [r7, #4]
 800cdc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d10b      	bne.n	800cde0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cdc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdcc:	f383 8811 	msr	BASEPRI, r3
 800cdd0:	f3bf 8f6f 	isb	sy
 800cdd4:	f3bf 8f4f 	dsb	sy
 800cdd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cdda:	bf00      	nop
 800cddc:	bf00      	nop
 800cdde:	e7fd      	b.n	800cddc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d10b      	bne.n	800cdfe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cde6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdea:	f383 8811 	msr	BASEPRI, r3
 800cdee:	f3bf 8f6f 	isb	sy
 800cdf2:	f3bf 8f4f 	dsb	sy
 800cdf6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cdf8:	bf00      	nop
 800cdfa:	bf00      	nop
 800cdfc:	e7fd      	b.n	800cdfa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d002      	beq.n	800ce0a <xQueueGenericCreateStatic+0x56>
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d001      	beq.n	800ce0e <xQueueGenericCreateStatic+0x5a>
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	e000      	b.n	800ce10 <xQueueGenericCreateStatic+0x5c>
 800ce0e:	2300      	movs	r3, #0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d10b      	bne.n	800ce2c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ce14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce18:	f383 8811 	msr	BASEPRI, r3
 800ce1c:	f3bf 8f6f 	isb	sy
 800ce20:	f3bf 8f4f 	dsb	sy
 800ce24:	623b      	str	r3, [r7, #32]
}
 800ce26:	bf00      	nop
 800ce28:	bf00      	nop
 800ce2a:	e7fd      	b.n	800ce28 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d102      	bne.n	800ce38 <xQueueGenericCreateStatic+0x84>
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d101      	bne.n	800ce3c <xQueueGenericCreateStatic+0x88>
 800ce38:	2301      	movs	r3, #1
 800ce3a:	e000      	b.n	800ce3e <xQueueGenericCreateStatic+0x8a>
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d10b      	bne.n	800ce5a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ce42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce46:	f383 8811 	msr	BASEPRI, r3
 800ce4a:	f3bf 8f6f 	isb	sy
 800ce4e:	f3bf 8f4f 	dsb	sy
 800ce52:	61fb      	str	r3, [r7, #28]
}
 800ce54:	bf00      	nop
 800ce56:	bf00      	nop
 800ce58:	e7fd      	b.n	800ce56 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ce5a:	2350      	movs	r3, #80	@ 0x50
 800ce5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	2b50      	cmp	r3, #80	@ 0x50
 800ce62:	d00b      	beq.n	800ce7c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ce64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce68:	f383 8811 	msr	BASEPRI, r3
 800ce6c:	f3bf 8f6f 	isb	sy
 800ce70:	f3bf 8f4f 	dsb	sy
 800ce74:	61bb      	str	r3, [r7, #24]
}
 800ce76:	bf00      	nop
 800ce78:	bf00      	nop
 800ce7a:	e7fd      	b.n	800ce78 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ce7c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ce82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d00d      	beq.n	800cea4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ce88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce90:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ce94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce96:	9300      	str	r3, [sp, #0]
 800ce98:	4613      	mov	r3, r2
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	68b9      	ldr	r1, [r7, #8]
 800ce9e:	68f8      	ldr	r0, [r7, #12]
 800cea0:	f000 f840 	bl	800cf24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3730      	adds	r7, #48	@ 0x30
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}

0800ceae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ceae:	b580      	push	{r7, lr}
 800ceb0:	b08a      	sub	sp, #40	@ 0x28
 800ceb2:	af02      	add	r7, sp, #8
 800ceb4:	60f8      	str	r0, [r7, #12]
 800ceb6:	60b9      	str	r1, [r7, #8]
 800ceb8:	4613      	mov	r3, r2
 800ceba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d10b      	bne.n	800ceda <xQueueGenericCreate+0x2c>
	__asm volatile
 800cec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cec6:	f383 8811 	msr	BASEPRI, r3
 800ceca:	f3bf 8f6f 	isb	sy
 800cece:	f3bf 8f4f 	dsb	sy
 800ced2:	613b      	str	r3, [r7, #16]
}
 800ced4:	bf00      	nop
 800ced6:	bf00      	nop
 800ced8:	e7fd      	b.n	800ced6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	68ba      	ldr	r2, [r7, #8]
 800cede:	fb02 f303 	mul.w	r3, r2, r3
 800cee2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cee4:	69fb      	ldr	r3, [r7, #28]
 800cee6:	3350      	adds	r3, #80	@ 0x50
 800cee8:	4618      	mov	r0, r3
 800ceea:	f002 fe27 	bl	800fb3c <pvPortMalloc>
 800ceee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d011      	beq.n	800cf1a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	3350      	adds	r3, #80	@ 0x50
 800cefe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cf00:	69bb      	ldr	r3, [r7, #24]
 800cf02:	2200      	movs	r2, #0
 800cf04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cf08:	79fa      	ldrb	r2, [r7, #7]
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	9300      	str	r3, [sp, #0]
 800cf0e:	4613      	mov	r3, r2
 800cf10:	697a      	ldr	r2, [r7, #20]
 800cf12:	68b9      	ldr	r1, [r7, #8]
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	f000 f805 	bl	800cf24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cf1a:	69bb      	ldr	r3, [r7, #24]
	}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3720      	adds	r7, #32
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	607a      	str	r2, [r7, #4]
 800cf30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d103      	bne.n	800cf40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	69ba      	ldr	r2, [r7, #24]
 800cf3c:	601a      	str	r2, [r3, #0]
 800cf3e:	e002      	b.n	800cf46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cf40:	69bb      	ldr	r3, [r7, #24]
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cf46:	69bb      	ldr	r3, [r7, #24]
 800cf48:	68fa      	ldr	r2, [r7, #12]
 800cf4a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cf4c:	69bb      	ldr	r3, [r7, #24]
 800cf4e:	68ba      	ldr	r2, [r7, #8]
 800cf50:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cf52:	2101      	movs	r1, #1
 800cf54:	69b8      	ldr	r0, [r7, #24]
 800cf56:	f7ff fec3 	bl	800cce0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	78fa      	ldrb	r2, [r7, #3]
 800cf5e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cf62:	bf00      	nop
 800cf64:	3710      	adds	r7, #16
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b082      	sub	sp, #8
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d00e      	beq.n	800cf96 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2200      	movs	r2, #0
 800cf88:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	2100      	movs	r1, #0
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f000 f911 	bl	800d1b8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cf96:	bf00      	nop
 800cf98:	3708      	adds	r7, #8
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}

0800cf9e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cf9e:	b580      	push	{r7, lr}
 800cfa0:	b086      	sub	sp, #24
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	617b      	str	r3, [r7, #20]
 800cfac:	2300      	movs	r3, #0
 800cfae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cfb0:	79fb      	ldrb	r3, [r7, #7]
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	6939      	ldr	r1, [r7, #16]
 800cfb6:	6978      	ldr	r0, [r7, #20]
 800cfb8:	f7ff ff79 	bl	800ceae <xQueueGenericCreate>
 800cfbc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cfbe:	68f8      	ldr	r0, [r7, #12]
 800cfc0:	f7ff ffd3 	bl	800cf6a <prvInitialiseMutex>

		return xNewQueue;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
	}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3718      	adds	r7, #24
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}

0800cfce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800cfce:	b580      	push	{r7, lr}
 800cfd0:	b088      	sub	sp, #32
 800cfd2:	af02      	add	r7, sp, #8
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	6039      	str	r1, [r7, #0]
 800cfd8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cfda:	2301      	movs	r3, #1
 800cfdc:	617b      	str	r3, [r7, #20]
 800cfde:	2300      	movs	r3, #0
 800cfe0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cfe2:	79fb      	ldrb	r3, [r7, #7]
 800cfe4:	9300      	str	r3, [sp, #0]
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	6939      	ldr	r1, [r7, #16]
 800cfec:	6978      	ldr	r0, [r7, #20]
 800cfee:	f7ff fee1 	bl	800cdb4 <xQueueGenericCreateStatic>
 800cff2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f7ff ffb8 	bl	800cf6a <prvInitialiseMutex>

		return xNewQueue;
 800cffa:	68fb      	ldr	r3, [r7, #12]
	}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3718      	adds	r7, #24
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}

0800d004 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d004:	b590      	push	{r4, r7, lr}
 800d006:	b087      	sub	sp, #28
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d10b      	bne.n	800d02e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800d016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d01a:	f383 8811 	msr	BASEPRI, r3
 800d01e:	f3bf 8f6f 	isb	sy
 800d022:	f3bf 8f4f 	dsb	sy
 800d026:	60fb      	str	r3, [r7, #12]
}
 800d028:	bf00      	nop
 800d02a:	bf00      	nop
 800d02c:	e7fd      	b.n	800d02a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	689c      	ldr	r4, [r3, #8]
 800d032:	f001 fde1 	bl	800ebf8 <xTaskGetCurrentTaskHandle>
 800d036:	4603      	mov	r3, r0
 800d038:	429c      	cmp	r4, r3
 800d03a:	d111      	bne.n	800d060 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	68db      	ldr	r3, [r3, #12]
 800d040:	1e5a      	subs	r2, r3, #1
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	68db      	ldr	r3, [r3, #12]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d105      	bne.n	800d05a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d04e:	2300      	movs	r3, #0
 800d050:	2200      	movs	r2, #0
 800d052:	2100      	movs	r1, #0
 800d054:	6938      	ldr	r0, [r7, #16]
 800d056:	f000 f8af 	bl	800d1b8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d05a:	2301      	movs	r3, #1
 800d05c:	617b      	str	r3, [r7, #20]
 800d05e:	e001      	b.n	800d064 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d060:	2300      	movs	r3, #0
 800d062:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d064:	697b      	ldr	r3, [r7, #20]
	}
 800d066:	4618      	mov	r0, r3
 800d068:	371c      	adds	r7, #28
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd90      	pop	{r4, r7, pc}

0800d06e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d06e:	b590      	push	{r4, r7, lr}
 800d070:	b087      	sub	sp, #28
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
 800d076:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d10b      	bne.n	800d09a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800d082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d086:	f383 8811 	msr	BASEPRI, r3
 800d08a:	f3bf 8f6f 	isb	sy
 800d08e:	f3bf 8f4f 	dsb	sy
 800d092:	60fb      	str	r3, [r7, #12]
}
 800d094:	bf00      	nop
 800d096:	bf00      	nop
 800d098:	e7fd      	b.n	800d096 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	689c      	ldr	r4, [r3, #8]
 800d09e:	f001 fdab 	bl	800ebf8 <xTaskGetCurrentTaskHandle>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	429c      	cmp	r4, r3
 800d0a6:	d107      	bne.n	800d0b8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	1c5a      	adds	r2, r3, #1
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	617b      	str	r3, [r7, #20]
 800d0b6:	e00c      	b.n	800d0d2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d0b8:	6839      	ldr	r1, [r7, #0]
 800d0ba:	6938      	ldr	r0, [r7, #16]
 800d0bc:	f000 fb8e 	bl	800d7dc <xQueueSemaphoreTake>
 800d0c0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d004      	beq.n	800d0d2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	68db      	ldr	r3, [r3, #12]
 800d0cc:	1c5a      	adds	r2, r3, #1
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d0d2:	697b      	ldr	r3, [r7, #20]
	}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	371c      	adds	r7, #28
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd90      	pop	{r4, r7, pc}

0800d0dc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b08a      	sub	sp, #40	@ 0x28
 800d0e0:	af02      	add	r7, sp, #8
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d10b      	bne.n	800d106 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800d0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0f2:	f383 8811 	msr	BASEPRI, r3
 800d0f6:	f3bf 8f6f 	isb	sy
 800d0fa:	f3bf 8f4f 	dsb	sy
 800d0fe:	61bb      	str	r3, [r7, #24]
}
 800d100:	bf00      	nop
 800d102:	bf00      	nop
 800d104:	e7fd      	b.n	800d102 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d106:	68ba      	ldr	r2, [r7, #8]
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d90b      	bls.n	800d126 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800d10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d112:	f383 8811 	msr	BASEPRI, r3
 800d116:	f3bf 8f6f 	isb	sy
 800d11a:	f3bf 8f4f 	dsb	sy
 800d11e:	617b      	str	r3, [r7, #20]
}
 800d120:	bf00      	nop
 800d122:	bf00      	nop
 800d124:	e7fd      	b.n	800d122 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d126:	2302      	movs	r3, #2
 800d128:	9300      	str	r3, [sp, #0]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2200      	movs	r2, #0
 800d12e:	2100      	movs	r1, #0
 800d130:	68f8      	ldr	r0, [r7, #12]
 800d132:	f7ff fe3f 	bl	800cdb4 <xQueueGenericCreateStatic>
 800d136:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d002      	beq.n	800d144 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d13e:	69fb      	ldr	r3, [r7, #28]
 800d140:	68ba      	ldr	r2, [r7, #8]
 800d142:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d144:	69fb      	ldr	r3, [r7, #28]
	}
 800d146:	4618      	mov	r0, r3
 800d148:	3720      	adds	r7, #32
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d14e:	b580      	push	{r7, lr}
 800d150:	b086      	sub	sp, #24
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
 800d156:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d10b      	bne.n	800d176 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800d15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d162:	f383 8811 	msr	BASEPRI, r3
 800d166:	f3bf 8f6f 	isb	sy
 800d16a:	f3bf 8f4f 	dsb	sy
 800d16e:	613b      	str	r3, [r7, #16]
}
 800d170:	bf00      	nop
 800d172:	bf00      	nop
 800d174:	e7fd      	b.n	800d172 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d176:	683a      	ldr	r2, [r7, #0]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d90b      	bls.n	800d196 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800d17e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d182:	f383 8811 	msr	BASEPRI, r3
 800d186:	f3bf 8f6f 	isb	sy
 800d18a:	f3bf 8f4f 	dsb	sy
 800d18e:	60fb      	str	r3, [r7, #12]
}
 800d190:	bf00      	nop
 800d192:	bf00      	nop
 800d194:	e7fd      	b.n	800d192 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d196:	2202      	movs	r2, #2
 800d198:	2100      	movs	r1, #0
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f7ff fe87 	bl	800ceae <xQueueGenericCreate>
 800d1a0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d002      	beq.n	800d1ae <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	683a      	ldr	r2, [r7, #0]
 800d1ac:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d1ae:	697b      	ldr	r3, [r7, #20]
	}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3718      	adds	r7, #24
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b08e      	sub	sp, #56	@ 0x38
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	60b9      	str	r1, [r7, #8]
 800d1c2:	607a      	str	r2, [r7, #4]
 800d1c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d10b      	bne.n	800d1ec <xQueueGenericSend+0x34>
	__asm volatile
 800d1d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1d8:	f383 8811 	msr	BASEPRI, r3
 800d1dc:	f3bf 8f6f 	isb	sy
 800d1e0:	f3bf 8f4f 	dsb	sy
 800d1e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d1e6:	bf00      	nop
 800d1e8:	bf00      	nop
 800d1ea:	e7fd      	b.n	800d1e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d103      	bne.n	800d1fa <xQueueGenericSend+0x42>
 800d1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d101      	bne.n	800d1fe <xQueueGenericSend+0x46>
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	e000      	b.n	800d200 <xQueueGenericSend+0x48>
 800d1fe:	2300      	movs	r3, #0
 800d200:	2b00      	cmp	r3, #0
 800d202:	d10b      	bne.n	800d21c <xQueueGenericSend+0x64>
	__asm volatile
 800d204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d208:	f383 8811 	msr	BASEPRI, r3
 800d20c:	f3bf 8f6f 	isb	sy
 800d210:	f3bf 8f4f 	dsb	sy
 800d214:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d216:	bf00      	nop
 800d218:	bf00      	nop
 800d21a:	e7fd      	b.n	800d218 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	2b02      	cmp	r3, #2
 800d220:	d103      	bne.n	800d22a <xQueueGenericSend+0x72>
 800d222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d226:	2b01      	cmp	r3, #1
 800d228:	d101      	bne.n	800d22e <xQueueGenericSend+0x76>
 800d22a:	2301      	movs	r3, #1
 800d22c:	e000      	b.n	800d230 <xQueueGenericSend+0x78>
 800d22e:	2300      	movs	r3, #0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d10b      	bne.n	800d24c <xQueueGenericSend+0x94>
	__asm volatile
 800d234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d238:	f383 8811 	msr	BASEPRI, r3
 800d23c:	f3bf 8f6f 	isb	sy
 800d240:	f3bf 8f4f 	dsb	sy
 800d244:	623b      	str	r3, [r7, #32]
}
 800d246:	bf00      	nop
 800d248:	bf00      	nop
 800d24a:	e7fd      	b.n	800d248 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d24c:	f001 fce4 	bl	800ec18 <xTaskGetSchedulerState>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d102      	bne.n	800d25c <xQueueGenericSend+0xa4>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d101      	bne.n	800d260 <xQueueGenericSend+0xa8>
 800d25c:	2301      	movs	r3, #1
 800d25e:	e000      	b.n	800d262 <xQueueGenericSend+0xaa>
 800d260:	2300      	movs	r3, #0
 800d262:	2b00      	cmp	r3, #0
 800d264:	d10b      	bne.n	800d27e <xQueueGenericSend+0xc6>
	__asm volatile
 800d266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d26a:	f383 8811 	msr	BASEPRI, r3
 800d26e:	f3bf 8f6f 	isb	sy
 800d272:	f3bf 8f4f 	dsb	sy
 800d276:	61fb      	str	r3, [r7, #28]
}
 800d278:	bf00      	nop
 800d27a:	bf00      	nop
 800d27c:	e7fd      	b.n	800d27a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d27e:	f002 fb3b 	bl	800f8f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d284:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d302      	bcc.n	800d294 <xQueueGenericSend+0xdc>
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	2b02      	cmp	r3, #2
 800d292:	d129      	bne.n	800d2e8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d294:	683a      	ldr	r2, [r7, #0]
 800d296:	68b9      	ldr	r1, [r7, #8]
 800d298:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d29a:	f000 fcab 	bl	800dbf4 <prvCopyDataToQueue>
 800d29e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d010      	beq.n	800d2ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2aa:	3324      	adds	r3, #36	@ 0x24
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f001 fadd 	bl	800e86c <xTaskRemoveFromEventList>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d013      	beq.n	800d2e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d2b8:	4b3f      	ldr	r3, [pc, #252]	@ (800d3b8 <xQueueGenericSend+0x200>)
 800d2ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2be:	601a      	str	r2, [r3, #0]
 800d2c0:	f3bf 8f4f 	dsb	sy
 800d2c4:	f3bf 8f6f 	isb	sy
 800d2c8:	e00a      	b.n	800d2e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d2ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d007      	beq.n	800d2e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d2d0:	4b39      	ldr	r3, [pc, #228]	@ (800d3b8 <xQueueGenericSend+0x200>)
 800d2d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2d6:	601a      	str	r2, [r3, #0]
 800d2d8:	f3bf 8f4f 	dsb	sy
 800d2dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d2e0:	f002 fb3c 	bl	800f95c <vPortExitCritical>
				return pdPASS;
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	e063      	b.n	800d3b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d103      	bne.n	800d2f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d2ee:	f002 fb35 	bl	800f95c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	e05c      	b.n	800d3b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d2f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d106      	bne.n	800d30a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d2fc:	f107 0314 	add.w	r3, r7, #20
 800d300:	4618      	mov	r0, r3
 800d302:	f001 fb17 	bl	800e934 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d306:	2301      	movs	r3, #1
 800d308:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d30a:	f002 fb27 	bl	800f95c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d30e:	f001 f86d 	bl	800e3ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d312:	f002 faf1 	bl	800f8f8 <vPortEnterCritical>
 800d316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d318:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d31c:	b25b      	sxtb	r3, r3
 800d31e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d322:	d103      	bne.n	800d32c <xQueueGenericSend+0x174>
 800d324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d326:	2200      	movs	r2, #0
 800d328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d32e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d332:	b25b      	sxtb	r3, r3
 800d334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d338:	d103      	bne.n	800d342 <xQueueGenericSend+0x18a>
 800d33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d33c:	2200      	movs	r2, #0
 800d33e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d342:	f002 fb0b 	bl	800f95c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d346:	1d3a      	adds	r2, r7, #4
 800d348:	f107 0314 	add.w	r3, r7, #20
 800d34c:	4611      	mov	r1, r2
 800d34e:	4618      	mov	r0, r3
 800d350:	f001 fb06 	bl	800e960 <xTaskCheckForTimeOut>
 800d354:	4603      	mov	r3, r0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d124      	bne.n	800d3a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d35a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d35c:	f000 fd42 	bl	800dde4 <prvIsQueueFull>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d018      	beq.n	800d398 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d368:	3310      	adds	r3, #16
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	4611      	mov	r1, r2
 800d36e:	4618      	mov	r0, r3
 800d370:	f001 fa2a 	bl	800e7c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d374:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d376:	f000 fccd 	bl	800dd14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d37a:	f001 f845 	bl	800e408 <xTaskResumeAll>
 800d37e:	4603      	mov	r3, r0
 800d380:	2b00      	cmp	r3, #0
 800d382:	f47f af7c 	bne.w	800d27e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d386:	4b0c      	ldr	r3, [pc, #48]	@ (800d3b8 <xQueueGenericSend+0x200>)
 800d388:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d38c:	601a      	str	r2, [r3, #0]
 800d38e:	f3bf 8f4f 	dsb	sy
 800d392:	f3bf 8f6f 	isb	sy
 800d396:	e772      	b.n	800d27e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d398:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d39a:	f000 fcbb 	bl	800dd14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d39e:	f001 f833 	bl	800e408 <xTaskResumeAll>
 800d3a2:	e76c      	b.n	800d27e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d3a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d3a6:	f000 fcb5 	bl	800dd14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d3aa:	f001 f82d 	bl	800e408 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d3ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3738      	adds	r7, #56	@ 0x38
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	e000ed04 	.word	0xe000ed04

0800d3bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b090      	sub	sp, #64	@ 0x40
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	60b9      	str	r1, [r7, #8]
 800d3c6:	607a      	str	r2, [r7, #4]
 800d3c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d10b      	bne.n	800d3ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d3d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3d8:	f383 8811 	msr	BASEPRI, r3
 800d3dc:	f3bf 8f6f 	isb	sy
 800d3e0:	f3bf 8f4f 	dsb	sy
 800d3e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d3e6:	bf00      	nop
 800d3e8:	bf00      	nop
 800d3ea:	e7fd      	b.n	800d3e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d103      	bne.n	800d3fa <xQueueGenericSendFromISR+0x3e>
 800d3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d101      	bne.n	800d3fe <xQueueGenericSendFromISR+0x42>
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	e000      	b.n	800d400 <xQueueGenericSendFromISR+0x44>
 800d3fe:	2300      	movs	r3, #0
 800d400:	2b00      	cmp	r3, #0
 800d402:	d10b      	bne.n	800d41c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d408:	f383 8811 	msr	BASEPRI, r3
 800d40c:	f3bf 8f6f 	isb	sy
 800d410:	f3bf 8f4f 	dsb	sy
 800d414:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d416:	bf00      	nop
 800d418:	bf00      	nop
 800d41a:	e7fd      	b.n	800d418 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	2b02      	cmp	r3, #2
 800d420:	d103      	bne.n	800d42a <xQueueGenericSendFromISR+0x6e>
 800d422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d426:	2b01      	cmp	r3, #1
 800d428:	d101      	bne.n	800d42e <xQueueGenericSendFromISR+0x72>
 800d42a:	2301      	movs	r3, #1
 800d42c:	e000      	b.n	800d430 <xQueueGenericSendFromISR+0x74>
 800d42e:	2300      	movs	r3, #0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d10b      	bne.n	800d44c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d438:	f383 8811 	msr	BASEPRI, r3
 800d43c:	f3bf 8f6f 	isb	sy
 800d440:	f3bf 8f4f 	dsb	sy
 800d444:	623b      	str	r3, [r7, #32]
}
 800d446:	bf00      	nop
 800d448:	bf00      	nop
 800d44a:	e7fd      	b.n	800d448 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d44c:	f002 fb34 	bl	800fab8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d450:	f3ef 8211 	mrs	r2, BASEPRI
 800d454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d458:	f383 8811 	msr	BASEPRI, r3
 800d45c:	f3bf 8f6f 	isb	sy
 800d460:	f3bf 8f4f 	dsb	sy
 800d464:	61fa      	str	r2, [r7, #28]
 800d466:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d468:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d46a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d46e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d474:	429a      	cmp	r2, r3
 800d476:	d302      	bcc.n	800d47e <xQueueGenericSendFromISR+0xc2>
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	2b02      	cmp	r3, #2
 800d47c:	d12f      	bne.n	800d4de <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d47e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d480:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d484:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d48a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d48c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d48e:	683a      	ldr	r2, [r7, #0]
 800d490:	68b9      	ldr	r1, [r7, #8]
 800d492:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d494:	f000 fbae 	bl	800dbf4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d498:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d49c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4a0:	d112      	bne.n	800d4c8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d016      	beq.n	800d4d8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ac:	3324      	adds	r3, #36	@ 0x24
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f001 f9dc 	bl	800e86c <xTaskRemoveFromEventList>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00e      	beq.n	800d4d8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d00b      	beq.n	800d4d8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	601a      	str	r2, [r3, #0]
 800d4c6:	e007      	b.n	800d4d8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d4c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	b25a      	sxtb	r2, r3
 800d4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d4dc:	e001      	b.n	800d4e2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d4e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4e4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d4ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d4ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3740      	adds	r7, #64	@ 0x40
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b08e      	sub	sp, #56	@ 0x38
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d10b      	bne.n	800d524 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d50c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d510:	f383 8811 	msr	BASEPRI, r3
 800d514:	f3bf 8f6f 	isb	sy
 800d518:	f3bf 8f4f 	dsb	sy
 800d51c:	623b      	str	r3, [r7, #32]
}
 800d51e:	bf00      	nop
 800d520:	bf00      	nop
 800d522:	e7fd      	b.n	800d520 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d00b      	beq.n	800d544 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800d52c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d530:	f383 8811 	msr	BASEPRI, r3
 800d534:	f3bf 8f6f 	isb	sy
 800d538:	f3bf 8f4f 	dsb	sy
 800d53c:	61fb      	str	r3, [r7, #28]
}
 800d53e:	bf00      	nop
 800d540:	bf00      	nop
 800d542:	e7fd      	b.n	800d540 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d103      	bne.n	800d554 <xQueueGiveFromISR+0x5c>
 800d54c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d54e:	689b      	ldr	r3, [r3, #8]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d101      	bne.n	800d558 <xQueueGiveFromISR+0x60>
 800d554:	2301      	movs	r3, #1
 800d556:	e000      	b.n	800d55a <xQueueGiveFromISR+0x62>
 800d558:	2300      	movs	r3, #0
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d10b      	bne.n	800d576 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800d55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d562:	f383 8811 	msr	BASEPRI, r3
 800d566:	f3bf 8f6f 	isb	sy
 800d56a:	f3bf 8f4f 	dsb	sy
 800d56e:	61bb      	str	r3, [r7, #24]
}
 800d570:	bf00      	nop
 800d572:	bf00      	nop
 800d574:	e7fd      	b.n	800d572 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d576:	f002 fa9f 	bl	800fab8 <vPortValidateInterruptPriority>
	__asm volatile
 800d57a:	f3ef 8211 	mrs	r2, BASEPRI
 800d57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d582:	f383 8811 	msr	BASEPRI, r3
 800d586:	f3bf 8f6f 	isb	sy
 800d58a:	f3bf 8f4f 	dsb	sy
 800d58e:	617a      	str	r2, [r7, #20]
 800d590:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d592:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d594:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d59a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d59e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d22b      	bcs.n	800d5fe <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d5ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5b2:	1c5a      	adds	r2, r3, #1
 800d5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d5b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5c0:	d112      	bne.n	800d5e8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d016      	beq.n	800d5f8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5cc:	3324      	adds	r3, #36	@ 0x24
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f001 f94c 	bl	800e86c <xTaskRemoveFromEventList>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d00e      	beq.n	800d5f8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d00b      	beq.n	800d5f8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	601a      	str	r2, [r3, #0]
 800d5e6:	e007      	b.n	800d5f8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d5e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d5ec:	3301      	adds	r3, #1
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	b25a      	sxtb	r2, r3
 800d5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5fc:	e001      	b.n	800d602 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d5fe:	2300      	movs	r3, #0
 800d600:	637b      	str	r3, [r7, #52]	@ 0x34
 800d602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d604:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f383 8811 	msr	BASEPRI, r3
}
 800d60c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d60e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d610:	4618      	mov	r0, r3
 800d612:	3738      	adds	r7, #56	@ 0x38
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b08c      	sub	sp, #48	@ 0x30
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	60f8      	str	r0, [r7, #12]
 800d620:	60b9      	str	r1, [r7, #8]
 800d622:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d624:	2300      	movs	r3, #0
 800d626:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d10b      	bne.n	800d64a <xQueueReceive+0x32>
	__asm volatile
 800d632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d636:	f383 8811 	msr	BASEPRI, r3
 800d63a:	f3bf 8f6f 	isb	sy
 800d63e:	f3bf 8f4f 	dsb	sy
 800d642:	623b      	str	r3, [r7, #32]
}
 800d644:	bf00      	nop
 800d646:	bf00      	nop
 800d648:	e7fd      	b.n	800d646 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d103      	bne.n	800d658 <xQueueReceive+0x40>
 800d650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d654:	2b00      	cmp	r3, #0
 800d656:	d101      	bne.n	800d65c <xQueueReceive+0x44>
 800d658:	2301      	movs	r3, #1
 800d65a:	e000      	b.n	800d65e <xQueueReceive+0x46>
 800d65c:	2300      	movs	r3, #0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d10b      	bne.n	800d67a <xQueueReceive+0x62>
	__asm volatile
 800d662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d666:	f383 8811 	msr	BASEPRI, r3
 800d66a:	f3bf 8f6f 	isb	sy
 800d66e:	f3bf 8f4f 	dsb	sy
 800d672:	61fb      	str	r3, [r7, #28]
}
 800d674:	bf00      	nop
 800d676:	bf00      	nop
 800d678:	e7fd      	b.n	800d676 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d67a:	f001 facd 	bl	800ec18 <xTaskGetSchedulerState>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d102      	bne.n	800d68a <xQueueReceive+0x72>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d101      	bne.n	800d68e <xQueueReceive+0x76>
 800d68a:	2301      	movs	r3, #1
 800d68c:	e000      	b.n	800d690 <xQueueReceive+0x78>
 800d68e:	2300      	movs	r3, #0
 800d690:	2b00      	cmp	r3, #0
 800d692:	d10b      	bne.n	800d6ac <xQueueReceive+0x94>
	__asm volatile
 800d694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d698:	f383 8811 	msr	BASEPRI, r3
 800d69c:	f3bf 8f6f 	isb	sy
 800d6a0:	f3bf 8f4f 	dsb	sy
 800d6a4:	61bb      	str	r3, [r7, #24]
}
 800d6a6:	bf00      	nop
 800d6a8:	bf00      	nop
 800d6aa:	e7fd      	b.n	800d6a8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d6ac:	f002 f924 	bl	800f8f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d01f      	beq.n	800d6fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d6bc:	68b9      	ldr	r1, [r7, #8]
 800d6be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6c0:	f000 fb02 	bl	800dcc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c6:	1e5a      	subs	r2, r3, #1
 800d6c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6ce:	691b      	ldr	r3, [r3, #16]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d00f      	beq.n	800d6f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6d6:	3310      	adds	r3, #16
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f001 f8c7 	bl	800e86c <xTaskRemoveFromEventList>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d007      	beq.n	800d6f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d6e4:	4b3c      	ldr	r3, [pc, #240]	@ (800d7d8 <xQueueReceive+0x1c0>)
 800d6e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6ea:	601a      	str	r2, [r3, #0]
 800d6ec:	f3bf 8f4f 	dsb	sy
 800d6f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d6f4:	f002 f932 	bl	800f95c <vPortExitCritical>
				return pdPASS;
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	e069      	b.n	800d7d0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d103      	bne.n	800d70a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d702:	f002 f92b 	bl	800f95c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d706:	2300      	movs	r3, #0
 800d708:	e062      	b.n	800d7d0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d70a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d106      	bne.n	800d71e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d710:	f107 0310 	add.w	r3, r7, #16
 800d714:	4618      	mov	r0, r3
 800d716:	f001 f90d 	bl	800e934 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d71a:	2301      	movs	r3, #1
 800d71c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d71e:	f002 f91d 	bl	800f95c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d722:	f000 fe63 	bl	800e3ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d726:	f002 f8e7 	bl	800f8f8 <vPortEnterCritical>
 800d72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d72c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d730:	b25b      	sxtb	r3, r3
 800d732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d736:	d103      	bne.n	800d740 <xQueueReceive+0x128>
 800d738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d73a:	2200      	movs	r2, #0
 800d73c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d742:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d746:	b25b      	sxtb	r3, r3
 800d748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d74c:	d103      	bne.n	800d756 <xQueueReceive+0x13e>
 800d74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d750:	2200      	movs	r2, #0
 800d752:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d756:	f002 f901 	bl	800f95c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d75a:	1d3a      	adds	r2, r7, #4
 800d75c:	f107 0310 	add.w	r3, r7, #16
 800d760:	4611      	mov	r1, r2
 800d762:	4618      	mov	r0, r3
 800d764:	f001 f8fc 	bl	800e960 <xTaskCheckForTimeOut>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d123      	bne.n	800d7b6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d76e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d770:	f000 fb22 	bl	800ddb8 <prvIsQueueEmpty>
 800d774:	4603      	mov	r3, r0
 800d776:	2b00      	cmp	r3, #0
 800d778:	d017      	beq.n	800d7aa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d77a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d77c:	3324      	adds	r3, #36	@ 0x24
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	4611      	mov	r1, r2
 800d782:	4618      	mov	r0, r3
 800d784:	f001 f820 	bl	800e7c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d788:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d78a:	f000 fac3 	bl	800dd14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d78e:	f000 fe3b 	bl	800e408 <xTaskResumeAll>
 800d792:	4603      	mov	r3, r0
 800d794:	2b00      	cmp	r3, #0
 800d796:	d189      	bne.n	800d6ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d798:	4b0f      	ldr	r3, [pc, #60]	@ (800d7d8 <xQueueReceive+0x1c0>)
 800d79a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d79e:	601a      	str	r2, [r3, #0]
 800d7a0:	f3bf 8f4f 	dsb	sy
 800d7a4:	f3bf 8f6f 	isb	sy
 800d7a8:	e780      	b.n	800d6ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d7aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d7ac:	f000 fab2 	bl	800dd14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d7b0:	f000 fe2a 	bl	800e408 <xTaskResumeAll>
 800d7b4:	e77a      	b.n	800d6ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d7b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d7b8:	f000 faac 	bl	800dd14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d7bc:	f000 fe24 	bl	800e408 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d7c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d7c2:	f000 faf9 	bl	800ddb8 <prvIsQueueEmpty>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	f43f af6f 	beq.w	800d6ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d7ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3730      	adds	r7, #48	@ 0x30
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}
 800d7d8:	e000ed04 	.word	0xe000ed04

0800d7dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b08e      	sub	sp, #56	@ 0x38
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d7f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d10b      	bne.n	800d810 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7fc:	f383 8811 	msr	BASEPRI, r3
 800d800:	f3bf 8f6f 	isb	sy
 800d804:	f3bf 8f4f 	dsb	sy
 800d808:	623b      	str	r3, [r7, #32]
}
 800d80a:	bf00      	nop
 800d80c:	bf00      	nop
 800d80e:	e7fd      	b.n	800d80c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d814:	2b00      	cmp	r3, #0
 800d816:	d00b      	beq.n	800d830 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d81c:	f383 8811 	msr	BASEPRI, r3
 800d820:	f3bf 8f6f 	isb	sy
 800d824:	f3bf 8f4f 	dsb	sy
 800d828:	61fb      	str	r3, [r7, #28]
}
 800d82a:	bf00      	nop
 800d82c:	bf00      	nop
 800d82e:	e7fd      	b.n	800d82c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d830:	f001 f9f2 	bl	800ec18 <xTaskGetSchedulerState>
 800d834:	4603      	mov	r3, r0
 800d836:	2b00      	cmp	r3, #0
 800d838:	d102      	bne.n	800d840 <xQueueSemaphoreTake+0x64>
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d101      	bne.n	800d844 <xQueueSemaphoreTake+0x68>
 800d840:	2301      	movs	r3, #1
 800d842:	e000      	b.n	800d846 <xQueueSemaphoreTake+0x6a>
 800d844:	2300      	movs	r3, #0
 800d846:	2b00      	cmp	r3, #0
 800d848:	d10b      	bne.n	800d862 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d84a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d84e:	f383 8811 	msr	BASEPRI, r3
 800d852:	f3bf 8f6f 	isb	sy
 800d856:	f3bf 8f4f 	dsb	sy
 800d85a:	61bb      	str	r3, [r7, #24]
}
 800d85c:	bf00      	nop
 800d85e:	bf00      	nop
 800d860:	e7fd      	b.n	800d85e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d862:	f002 f849 	bl	800f8f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d86a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d024      	beq.n	800d8bc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d874:	1e5a      	subs	r2, r3, #1
 800d876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d878:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d87a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d104      	bne.n	800d88c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d882:	f001 fb43 	bl	800ef0c <pvTaskIncrementMutexHeldCount>
 800d886:	4602      	mov	r2, r0
 800d888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d88a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d88e:	691b      	ldr	r3, [r3, #16]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d00f      	beq.n	800d8b4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d896:	3310      	adds	r3, #16
 800d898:	4618      	mov	r0, r3
 800d89a:	f000 ffe7 	bl	800e86c <xTaskRemoveFromEventList>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d007      	beq.n	800d8b4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d8a4:	4b54      	ldr	r3, [pc, #336]	@ (800d9f8 <xQueueSemaphoreTake+0x21c>)
 800d8a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8aa:	601a      	str	r2, [r3, #0]
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d8b4:	f002 f852 	bl	800f95c <vPortExitCritical>
				return pdPASS;
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	e098      	b.n	800d9ee <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d112      	bne.n	800d8e8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d00b      	beq.n	800d8e0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d8c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8cc:	f383 8811 	msr	BASEPRI, r3
 800d8d0:	f3bf 8f6f 	isb	sy
 800d8d4:	f3bf 8f4f 	dsb	sy
 800d8d8:	617b      	str	r3, [r7, #20]
}
 800d8da:	bf00      	nop
 800d8dc:	bf00      	nop
 800d8de:	e7fd      	b.n	800d8dc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d8e0:	f002 f83c 	bl	800f95c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	e082      	b.n	800d9ee <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d8e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d106      	bne.n	800d8fc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d8ee:	f107 030c 	add.w	r3, r7, #12
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f001 f81e 	bl	800e934 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d8fc:	f002 f82e 	bl	800f95c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d900:	f000 fd74 	bl	800e3ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d904:	f001 fff8 	bl	800f8f8 <vPortEnterCritical>
 800d908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d90a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d90e:	b25b      	sxtb	r3, r3
 800d910:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d914:	d103      	bne.n	800d91e <xQueueSemaphoreTake+0x142>
 800d916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d918:	2200      	movs	r2, #0
 800d91a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d91e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d920:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d924:	b25b      	sxtb	r3, r3
 800d926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d92a:	d103      	bne.n	800d934 <xQueueSemaphoreTake+0x158>
 800d92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d92e:	2200      	movs	r2, #0
 800d930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d934:	f002 f812 	bl	800f95c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d938:	463a      	mov	r2, r7
 800d93a:	f107 030c 	add.w	r3, r7, #12
 800d93e:	4611      	mov	r1, r2
 800d940:	4618      	mov	r0, r3
 800d942:	f001 f80d 	bl	800e960 <xTaskCheckForTimeOut>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d132      	bne.n	800d9b2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d94c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d94e:	f000 fa33 	bl	800ddb8 <prvIsQueueEmpty>
 800d952:	4603      	mov	r3, r0
 800d954:	2b00      	cmp	r3, #0
 800d956:	d026      	beq.n	800d9a6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d109      	bne.n	800d974 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d960:	f001 ffca 	bl	800f8f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d966:	689b      	ldr	r3, [r3, #8]
 800d968:	4618      	mov	r0, r3
 800d96a:	f001 f973 	bl	800ec54 <xTaskPriorityInherit>
 800d96e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d970:	f001 fff4 	bl	800f95c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d976:	3324      	adds	r3, #36	@ 0x24
 800d978:	683a      	ldr	r2, [r7, #0]
 800d97a:	4611      	mov	r1, r2
 800d97c:	4618      	mov	r0, r3
 800d97e:	f000 ff23 	bl	800e7c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d982:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d984:	f000 f9c6 	bl	800dd14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d988:	f000 fd3e 	bl	800e408 <xTaskResumeAll>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	f47f af67 	bne.w	800d862 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d994:	4b18      	ldr	r3, [pc, #96]	@ (800d9f8 <xQueueSemaphoreTake+0x21c>)
 800d996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d99a:	601a      	str	r2, [r3, #0]
 800d99c:	f3bf 8f4f 	dsb	sy
 800d9a0:	f3bf 8f6f 	isb	sy
 800d9a4:	e75d      	b.n	800d862 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d9a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d9a8:	f000 f9b4 	bl	800dd14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d9ac:	f000 fd2c 	bl	800e408 <xTaskResumeAll>
 800d9b0:	e757      	b.n	800d862 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d9b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d9b4:	f000 f9ae 	bl	800dd14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d9b8:	f000 fd26 	bl	800e408 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d9be:	f000 f9fb 	bl	800ddb8 <prvIsQueueEmpty>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	f43f af4c 	beq.w	800d862 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d00d      	beq.n	800d9ec <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d9d0:	f001 ff92 	bl	800f8f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d9d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d9d6:	f000 f8f5 	bl	800dbc4 <prvGetDisinheritPriorityAfterTimeout>
 800d9da:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9de:	689b      	ldr	r3, [r3, #8]
 800d9e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f001 fa0e 	bl	800ee04 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d9e8:	f001 ffb8 	bl	800f95c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d9ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3738      	adds	r7, #56	@ 0x38
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	e000ed04 	.word	0xe000ed04

0800d9fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b08e      	sub	sp, #56	@ 0x38
 800da00:	af00      	add	r7, sp, #0
 800da02:	60f8      	str	r0, [r7, #12]
 800da04:	60b9      	str	r1, [r7, #8]
 800da06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800da0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d10b      	bne.n	800da2a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800da12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da16:	f383 8811 	msr	BASEPRI, r3
 800da1a:	f3bf 8f6f 	isb	sy
 800da1e:	f3bf 8f4f 	dsb	sy
 800da22:	623b      	str	r3, [r7, #32]
}
 800da24:	bf00      	nop
 800da26:	bf00      	nop
 800da28:	e7fd      	b.n	800da26 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d103      	bne.n	800da38 <xQueueReceiveFromISR+0x3c>
 800da30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da34:	2b00      	cmp	r3, #0
 800da36:	d101      	bne.n	800da3c <xQueueReceiveFromISR+0x40>
 800da38:	2301      	movs	r3, #1
 800da3a:	e000      	b.n	800da3e <xQueueReceiveFromISR+0x42>
 800da3c:	2300      	movs	r3, #0
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d10b      	bne.n	800da5a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800da42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da46:	f383 8811 	msr	BASEPRI, r3
 800da4a:	f3bf 8f6f 	isb	sy
 800da4e:	f3bf 8f4f 	dsb	sy
 800da52:	61fb      	str	r3, [r7, #28]
}
 800da54:	bf00      	nop
 800da56:	bf00      	nop
 800da58:	e7fd      	b.n	800da56 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da5a:	f002 f82d 	bl	800fab8 <vPortValidateInterruptPriority>
	__asm volatile
 800da5e:	f3ef 8211 	mrs	r2, BASEPRI
 800da62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da66:	f383 8811 	msr	BASEPRI, r3
 800da6a:	f3bf 8f6f 	isb	sy
 800da6e:	f3bf 8f4f 	dsb	sy
 800da72:	61ba      	str	r2, [r7, #24]
 800da74:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800da76:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800da78:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da7e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da82:	2b00      	cmp	r3, #0
 800da84:	d02f      	beq.n	800dae6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800da86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800da8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800da90:	68b9      	ldr	r1, [r7, #8]
 800da92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da94:	f000 f918 	bl	800dcc8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800da98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da9a:	1e5a      	subs	r2, r3, #1
 800da9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da9e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800daa0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800daa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daa8:	d112      	bne.n	800dad0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800daaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daac:	691b      	ldr	r3, [r3, #16]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d016      	beq.n	800dae0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dab4:	3310      	adds	r3, #16
 800dab6:	4618      	mov	r0, r3
 800dab8:	f000 fed8 	bl	800e86c <xTaskRemoveFromEventList>
 800dabc:	4603      	mov	r3, r0
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d00e      	beq.n	800dae0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d00b      	beq.n	800dae0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2201      	movs	r2, #1
 800dacc:	601a      	str	r2, [r3, #0]
 800dace:	e007      	b.n	800dae0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dad0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dad4:	3301      	adds	r3, #1
 800dad6:	b2db      	uxtb	r3, r3
 800dad8:	b25a      	sxtb	r2, r3
 800dada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dadc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800dae0:	2301      	movs	r3, #1
 800dae2:	637b      	str	r3, [r7, #52]	@ 0x34
 800dae4:	e001      	b.n	800daea <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800dae6:	2300      	movs	r3, #0
 800dae8:	637b      	str	r3, [r7, #52]	@ 0x34
 800daea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800daee:	693b      	ldr	r3, [r7, #16]
 800daf0:	f383 8811 	msr	BASEPRI, r3
}
 800daf4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800daf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3738      	adds	r7, #56	@ 0x38
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}

0800db00 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b084      	sub	sp, #16
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d10b      	bne.n	800db26 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800db0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db12:	f383 8811 	msr	BASEPRI, r3
 800db16:	f3bf 8f6f 	isb	sy
 800db1a:	f3bf 8f4f 	dsb	sy
 800db1e:	60bb      	str	r3, [r7, #8]
}
 800db20:	bf00      	nop
 800db22:	bf00      	nop
 800db24:	e7fd      	b.n	800db22 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800db26:	f001 fee7 	bl	800f8f8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db2e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800db30:	f001 ff14 	bl	800f95c <vPortExitCritical>

	return uxReturn;
 800db34:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800db36:	4618      	mov	r0, r3
 800db38:	3710      	adds	r7, #16
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}

0800db3e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800db3e:	b480      	push	{r7}
 800db40:	b087      	sub	sp, #28
 800db42:	af00      	add	r7, sp, #0
 800db44:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d10b      	bne.n	800db68 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800db50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db54:	f383 8811 	msr	BASEPRI, r3
 800db58:	f3bf 8f6f 	isb	sy
 800db5c:	f3bf 8f4f 	dsb	sy
 800db60:	60fb      	str	r3, [r7, #12]
}
 800db62:	bf00      	nop
 800db64:	bf00      	nop
 800db66:	e7fd      	b.n	800db64 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db6c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800db6e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800db70:	4618      	mov	r0, r3
 800db72:	371c      	adds	r7, #28
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr

0800db7c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b084      	sub	sp, #16
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d10b      	bne.n	800dba6 <vQueueDelete+0x2a>
	__asm volatile
 800db8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db92:	f383 8811 	msr	BASEPRI, r3
 800db96:	f3bf 8f6f 	isb	sy
 800db9a:	f3bf 8f4f 	dsb	sy
 800db9e:	60bb      	str	r3, [r7, #8]
}
 800dba0:	bf00      	nop
 800dba2:	bf00      	nop
 800dba4:	e7fd      	b.n	800dba2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800dba6:	68f8      	ldr	r0, [r7, #12]
 800dba8:	f000 f95e 	bl	800de68 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d102      	bne.n	800dbbc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800dbb6:	68f8      	ldr	r0, [r7, #12]
 800dbb8:	f002 f88e 	bl	800fcd8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800dbbc:	bf00      	nop
 800dbbe:	3710      	adds	r7, #16
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b085      	sub	sp, #20
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d006      	beq.n	800dbe2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800dbde:	60fb      	str	r3, [r7, #12]
 800dbe0:	e001      	b.n	800dbe6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
	}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3714      	adds	r7, #20
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr

0800dbf4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b086      	sub	sp, #24
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dc00:	2300      	movs	r3, #0
 800dc02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d10d      	bne.n	800dc2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d14d      	bne.n	800dcb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	689b      	ldr	r3, [r3, #8]
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f001 f880 	bl	800ed24 <xTaskPriorityDisinherit>
 800dc24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	609a      	str	r2, [r3, #8]
 800dc2c:	e043      	b.n	800dcb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d119      	bne.n	800dc68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	6858      	ldr	r0, [r3, #4]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	68b9      	ldr	r1, [r7, #8]
 800dc40:	f013 f915 	bl	8020e6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	685a      	ldr	r2, [r3, #4]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc4c:	441a      	add	r2, r3
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	685a      	ldr	r2, [r3, #4]
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	689b      	ldr	r3, [r3, #8]
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d32b      	bcc.n	800dcb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681a      	ldr	r2, [r3, #0]
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	605a      	str	r2, [r3, #4]
 800dc66:	e026      	b.n	800dcb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	68d8      	ldr	r0, [r3, #12]
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc70:	461a      	mov	r2, r3
 800dc72:	68b9      	ldr	r1, [r7, #8]
 800dc74:	f013 f8fb 	bl	8020e6e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	68da      	ldr	r2, [r3, #12]
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc80:	425b      	negs	r3, r3
 800dc82:	441a      	add	r2, r3
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	68da      	ldr	r2, [r3, #12]
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d207      	bcs.n	800dca4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	689a      	ldr	r2, [r3, #8]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc9c:	425b      	negs	r3, r3
 800dc9e:	441a      	add	r2, r3
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2b02      	cmp	r3, #2
 800dca8:	d105      	bne.n	800dcb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d002      	beq.n	800dcb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	3b01      	subs	r3, #1
 800dcb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	1c5a      	adds	r2, r3, #1
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dcbe:	697b      	ldr	r3, [r7, #20]
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3718      	adds	r7, #24
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d018      	beq.n	800dd0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	68da      	ldr	r2, [r3, #12]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dce2:	441a      	add	r2, r3
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	68da      	ldr	r2, [r3, #12]
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	689b      	ldr	r3, [r3, #8]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d303      	bcc.n	800dcfc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681a      	ldr	r2, [r3, #0]
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	68d9      	ldr	r1, [r3, #12]
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd04:	461a      	mov	r2, r3
 800dd06:	6838      	ldr	r0, [r7, #0]
 800dd08:	f013 f8b1 	bl	8020e6e <memcpy>
	}
}
 800dd0c:	bf00      	nop
 800dd0e:	3708      	adds	r7, #8
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dd1c:	f001 fdec 	bl	800f8f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd28:	e011      	b.n	800dd4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d012      	beq.n	800dd58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	3324      	adds	r3, #36	@ 0x24
 800dd36:	4618      	mov	r0, r3
 800dd38:	f000 fd98 	bl	800e86c <xTaskRemoveFromEventList>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d001      	beq.n	800dd46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dd42:	f000 fe71 	bl	800ea28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dd46:	7bfb      	ldrb	r3, [r7, #15]
 800dd48:	3b01      	subs	r3, #1
 800dd4a:	b2db      	uxtb	r3, r3
 800dd4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	dce9      	bgt.n	800dd2a <prvUnlockQueue+0x16>
 800dd56:	e000      	b.n	800dd5a <prvUnlockQueue+0x46>
					break;
 800dd58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	22ff      	movs	r2, #255	@ 0xff
 800dd5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800dd62:	f001 fdfb 	bl	800f95c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dd66:	f001 fdc7 	bl	800f8f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dd70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd72:	e011      	b.n	800dd98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	691b      	ldr	r3, [r3, #16]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d012      	beq.n	800dda2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	3310      	adds	r3, #16
 800dd80:	4618      	mov	r0, r3
 800dd82:	f000 fd73 	bl	800e86c <xTaskRemoveFromEventList>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d001      	beq.n	800dd90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dd8c:	f000 fe4c 	bl	800ea28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dd90:	7bbb      	ldrb	r3, [r7, #14]
 800dd92:	3b01      	subs	r3, #1
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	dce9      	bgt.n	800dd74 <prvUnlockQueue+0x60>
 800dda0:	e000      	b.n	800dda4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dda2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	22ff      	movs	r2, #255	@ 0xff
 800dda8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ddac:	f001 fdd6 	bl	800f95c <vPortExitCritical>
}
 800ddb0:	bf00      	nop
 800ddb2:	3710      	adds	r7, #16
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b084      	sub	sp, #16
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ddc0:	f001 fd9a 	bl	800f8f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d102      	bne.n	800ddd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ddcc:	2301      	movs	r3, #1
 800ddce:	60fb      	str	r3, [r7, #12]
 800ddd0:	e001      	b.n	800ddd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ddd6:	f001 fdc1 	bl	800f95c <vPortExitCritical>

	return xReturn;
 800ddda:	68fb      	ldr	r3, [r7, #12]
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3710      	adds	r7, #16
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ddec:	f001 fd84 	bl	800f8f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d102      	bne.n	800de02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	60fb      	str	r3, [r7, #12]
 800de00:	e001      	b.n	800de06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800de02:	2300      	movs	r3, #0
 800de04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de06:	f001 fda9 	bl	800f95c <vPortExitCritical>

	return xReturn;
 800de0a:	68fb      	ldr	r3, [r7, #12]
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3710      	adds	r7, #16
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800de14:	b480      	push	{r7}
 800de16:	b085      	sub	sp, #20
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de1e:	2300      	movs	r3, #0
 800de20:	60fb      	str	r3, [r7, #12]
 800de22:	e014      	b.n	800de4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800de24:	4a0f      	ldr	r2, [pc, #60]	@ (800de64 <vQueueAddToRegistry+0x50>)
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d10b      	bne.n	800de48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800de30:	490c      	ldr	r1, [pc, #48]	@ (800de64 <vQueueAddToRegistry+0x50>)
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	683a      	ldr	r2, [r7, #0]
 800de36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800de3a:	4a0a      	ldr	r2, [pc, #40]	@ (800de64 <vQueueAddToRegistry+0x50>)
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	00db      	lsls	r3, r3, #3
 800de40:	4413      	add	r3, r2
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800de46:	e006      	b.n	800de56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	3301      	adds	r3, #1
 800de4c:	60fb      	str	r3, [r7, #12]
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2b07      	cmp	r3, #7
 800de52:	d9e7      	bls.n	800de24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800de54:	bf00      	nop
 800de56:	bf00      	nop
 800de58:	3714      	adds	r7, #20
 800de5a:	46bd      	mov	sp, r7
 800de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop
 800de64:	240056f4 	.word	0x240056f4

0800de68 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800de68:	b480      	push	{r7}
 800de6a:	b085      	sub	sp, #20
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de70:	2300      	movs	r3, #0
 800de72:	60fb      	str	r3, [r7, #12]
 800de74:	e016      	b.n	800dea4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800de76:	4a10      	ldr	r2, [pc, #64]	@ (800deb8 <vQueueUnregisterQueue+0x50>)
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	00db      	lsls	r3, r3, #3
 800de7c:	4413      	add	r3, r2
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	687a      	ldr	r2, [r7, #4]
 800de82:	429a      	cmp	r2, r3
 800de84:	d10b      	bne.n	800de9e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800de86:	4a0c      	ldr	r2, [pc, #48]	@ (800deb8 <vQueueUnregisterQueue+0x50>)
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2100      	movs	r1, #0
 800de8c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800de90:	4a09      	ldr	r2, [pc, #36]	@ (800deb8 <vQueueUnregisterQueue+0x50>)
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	00db      	lsls	r3, r3, #3
 800de96:	4413      	add	r3, r2
 800de98:	2200      	movs	r2, #0
 800de9a:	605a      	str	r2, [r3, #4]
				break;
 800de9c:	e006      	b.n	800deac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	3301      	adds	r3, #1
 800dea2:	60fb      	str	r3, [r7, #12]
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2b07      	cmp	r3, #7
 800dea8:	d9e5      	bls.n	800de76 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800deaa:	bf00      	nop
 800deac:	bf00      	nop
 800deae:	3714      	adds	r7, #20
 800deb0:	46bd      	mov	sp, r7
 800deb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb6:	4770      	bx	lr
 800deb8:	240056f4 	.word	0x240056f4

0800debc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800debc:	b580      	push	{r7, lr}
 800debe:	b086      	sub	sp, #24
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	60b9      	str	r1, [r7, #8]
 800dec6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800decc:	f001 fd14 	bl	800f8f8 <vPortEnterCritical>
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ded6:	b25b      	sxtb	r3, r3
 800ded8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dedc:	d103      	bne.n	800dee6 <vQueueWaitForMessageRestricted+0x2a>
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	2200      	movs	r2, #0
 800dee2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800deec:	b25b      	sxtb	r3, r3
 800deee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800def2:	d103      	bne.n	800defc <vQueueWaitForMessageRestricted+0x40>
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	2200      	movs	r2, #0
 800def8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800defc:	f001 fd2e 	bl	800f95c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df04:	2b00      	cmp	r3, #0
 800df06:	d106      	bne.n	800df16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	3324      	adds	r3, #36	@ 0x24
 800df0c:	687a      	ldr	r2, [r7, #4]
 800df0e:	68b9      	ldr	r1, [r7, #8]
 800df10:	4618      	mov	r0, r3
 800df12:	f000 fc7f 	bl	800e814 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800df16:	6978      	ldr	r0, [r7, #20]
 800df18:	f7ff fefc 	bl	800dd14 <prvUnlockQueue>
	}
 800df1c:	bf00      	nop
 800df1e:	3718      	adds	r7, #24
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800df24:	b580      	push	{r7, lr}
 800df26:	b08e      	sub	sp, #56	@ 0x38
 800df28:	af04      	add	r7, sp, #16
 800df2a:	60f8      	str	r0, [r7, #12]
 800df2c:	60b9      	str	r1, [r7, #8]
 800df2e:	607a      	str	r2, [r7, #4]
 800df30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800df32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df34:	2b00      	cmp	r3, #0
 800df36:	d10b      	bne.n	800df50 <xTaskCreateStatic+0x2c>
	__asm volatile
 800df38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df3c:	f383 8811 	msr	BASEPRI, r3
 800df40:	f3bf 8f6f 	isb	sy
 800df44:	f3bf 8f4f 	dsb	sy
 800df48:	623b      	str	r3, [r7, #32]
}
 800df4a:	bf00      	nop
 800df4c:	bf00      	nop
 800df4e:	e7fd      	b.n	800df4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800df50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df52:	2b00      	cmp	r3, #0
 800df54:	d10b      	bne.n	800df6e <xTaskCreateStatic+0x4a>
	__asm volatile
 800df56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df5a:	f383 8811 	msr	BASEPRI, r3
 800df5e:	f3bf 8f6f 	isb	sy
 800df62:	f3bf 8f4f 	dsb	sy
 800df66:	61fb      	str	r3, [r7, #28]
}
 800df68:	bf00      	nop
 800df6a:	bf00      	nop
 800df6c:	e7fd      	b.n	800df6a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800df6e:	23a8      	movs	r3, #168	@ 0xa8
 800df70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	2ba8      	cmp	r3, #168	@ 0xa8
 800df76:	d00b      	beq.n	800df90 <xTaskCreateStatic+0x6c>
	__asm volatile
 800df78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df7c:	f383 8811 	msr	BASEPRI, r3
 800df80:	f3bf 8f6f 	isb	sy
 800df84:	f3bf 8f4f 	dsb	sy
 800df88:	61bb      	str	r3, [r7, #24]
}
 800df8a:	bf00      	nop
 800df8c:	bf00      	nop
 800df8e:	e7fd      	b.n	800df8c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800df90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800df92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df94:	2b00      	cmp	r3, #0
 800df96:	d01e      	beq.n	800dfd6 <xTaskCreateStatic+0xb2>
 800df98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d01b      	beq.n	800dfd6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfa0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dfa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfa4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dfa6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dfa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfaa:	2202      	movs	r2, #2
 800dfac:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	9303      	str	r3, [sp, #12]
 800dfb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfb6:	9302      	str	r3, [sp, #8]
 800dfb8:	f107 0314 	add.w	r3, r7, #20
 800dfbc:	9301      	str	r3, [sp, #4]
 800dfbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfc0:	9300      	str	r3, [sp, #0]
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	68b9      	ldr	r1, [r7, #8]
 800dfc8:	68f8      	ldr	r0, [r7, #12]
 800dfca:	f000 f851 	bl	800e070 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dfce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dfd0:	f000 f8f6 	bl	800e1c0 <prvAddNewTaskToReadyList>
 800dfd4:	e001      	b.n	800dfda <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dfda:	697b      	ldr	r3, [r7, #20]
	}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3728      	adds	r7, #40	@ 0x28
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b08c      	sub	sp, #48	@ 0x30
 800dfe8:	af04      	add	r7, sp, #16
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	603b      	str	r3, [r7, #0]
 800dff0:	4613      	mov	r3, r2
 800dff2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dff4:	88fb      	ldrh	r3, [r7, #6]
 800dff6:	009b      	lsls	r3, r3, #2
 800dff8:	4618      	mov	r0, r3
 800dffa:	f001 fd9f 	bl	800fb3c <pvPortMalloc>
 800dffe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d00e      	beq.n	800e024 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e006:	20a8      	movs	r0, #168	@ 0xa8
 800e008:	f001 fd98 	bl	800fb3c <pvPortMalloc>
 800e00c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e00e:	69fb      	ldr	r3, [r7, #28]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d003      	beq.n	800e01c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e014:	69fb      	ldr	r3, [r7, #28]
 800e016:	697a      	ldr	r2, [r7, #20]
 800e018:	631a      	str	r2, [r3, #48]	@ 0x30
 800e01a:	e005      	b.n	800e028 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e01c:	6978      	ldr	r0, [r7, #20]
 800e01e:	f001 fe5b 	bl	800fcd8 <vPortFree>
 800e022:	e001      	b.n	800e028 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e024:	2300      	movs	r3, #0
 800e026:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d017      	beq.n	800e05e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e02e:	69fb      	ldr	r3, [r7, #28]
 800e030:	2200      	movs	r2, #0
 800e032:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e036:	88fa      	ldrh	r2, [r7, #6]
 800e038:	2300      	movs	r3, #0
 800e03a:	9303      	str	r3, [sp, #12]
 800e03c:	69fb      	ldr	r3, [r7, #28]
 800e03e:	9302      	str	r3, [sp, #8]
 800e040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e042:	9301      	str	r3, [sp, #4]
 800e044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e046:	9300      	str	r3, [sp, #0]
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	68b9      	ldr	r1, [r7, #8]
 800e04c:	68f8      	ldr	r0, [r7, #12]
 800e04e:	f000 f80f 	bl	800e070 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e052:	69f8      	ldr	r0, [r7, #28]
 800e054:	f000 f8b4 	bl	800e1c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e058:	2301      	movs	r3, #1
 800e05a:	61bb      	str	r3, [r7, #24]
 800e05c:	e002      	b.n	800e064 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e05e:	f04f 33ff 	mov.w	r3, #4294967295
 800e062:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e064:	69bb      	ldr	r3, [r7, #24]
	}
 800e066:	4618      	mov	r0, r3
 800e068:	3720      	adds	r7, #32
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
	...

0800e070 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b088      	sub	sp, #32
 800e074:	af00      	add	r7, sp, #0
 800e076:	60f8      	str	r0, [r7, #12]
 800e078:	60b9      	str	r1, [r7, #8]
 800e07a:	607a      	str	r2, [r7, #4]
 800e07c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e080:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	009b      	lsls	r3, r3, #2
 800e086:	461a      	mov	r2, r3
 800e088:	21a5      	movs	r1, #165	@ 0xa5
 800e08a:	f012 fe21 	bl	8020cd0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e090:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e092:	6879      	ldr	r1, [r7, #4]
 800e094:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e098:	440b      	add	r3, r1
 800e09a:	009b      	lsls	r3, r3, #2
 800e09c:	4413      	add	r3, r2
 800e09e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e0a0:	69bb      	ldr	r3, [r7, #24]
 800e0a2:	f023 0307 	bic.w	r3, r3, #7
 800e0a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e0a8:	69bb      	ldr	r3, [r7, #24]
 800e0aa:	f003 0307 	and.w	r3, r3, #7
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d00b      	beq.n	800e0ca <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0b6:	f383 8811 	msr	BASEPRI, r3
 800e0ba:	f3bf 8f6f 	isb	sy
 800e0be:	f3bf 8f4f 	dsb	sy
 800e0c2:	617b      	str	r3, [r7, #20]
}
 800e0c4:	bf00      	nop
 800e0c6:	bf00      	nop
 800e0c8:	e7fd      	b.n	800e0c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d01f      	beq.n	800e110 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	61fb      	str	r3, [r7, #28]
 800e0d4:	e012      	b.n	800e0fc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e0d6:	68ba      	ldr	r2, [r7, #8]
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	4413      	add	r3, r2
 800e0dc:	7819      	ldrb	r1, [r3, #0]
 800e0de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	4413      	add	r3, r2
 800e0e4:	3334      	adds	r3, #52	@ 0x34
 800e0e6:	460a      	mov	r2, r1
 800e0e8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e0ea:	68ba      	ldr	r2, [r7, #8]
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	4413      	add	r3, r2
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d006      	beq.n	800e104 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e0f6:	69fb      	ldr	r3, [r7, #28]
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	61fb      	str	r3, [r7, #28]
 800e0fc:	69fb      	ldr	r3, [r7, #28]
 800e0fe:	2b0f      	cmp	r3, #15
 800e100:	d9e9      	bls.n	800e0d6 <prvInitialiseNewTask+0x66>
 800e102:	e000      	b.n	800e106 <prvInitialiseNewTask+0x96>
			{
				break;
 800e104:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e108:	2200      	movs	r2, #0
 800e10a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e10e:	e003      	b.n	800e118 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e112:	2200      	movs	r2, #0
 800e114:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e11a:	2b37      	cmp	r3, #55	@ 0x37
 800e11c:	d901      	bls.n	800e122 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e11e:	2337      	movs	r3, #55	@ 0x37
 800e120:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e124:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e126:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e12a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e12c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e130:	2200      	movs	r2, #0
 800e132:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e136:	3304      	adds	r3, #4
 800e138:	4618      	mov	r0, r3
 800e13a:	f7fe fd3d 	bl	800cbb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e140:	3318      	adds	r3, #24
 800e142:	4618      	mov	r0, r3
 800e144:	f7fe fd38 	bl	800cbb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e14a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e14c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e150:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e156:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e15a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e15c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e160:	2200      	movs	r2, #0
 800e162:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e168:	2200      	movs	r2, #0
 800e16a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e170:	3354      	adds	r3, #84	@ 0x54
 800e172:	224c      	movs	r2, #76	@ 0x4c
 800e174:	2100      	movs	r1, #0
 800e176:	4618      	mov	r0, r3
 800e178:	f012 fdaa 	bl	8020cd0 <memset>
 800e17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e17e:	4a0d      	ldr	r2, [pc, #52]	@ (800e1b4 <prvInitialiseNewTask+0x144>)
 800e180:	659a      	str	r2, [r3, #88]	@ 0x58
 800e182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e184:	4a0c      	ldr	r2, [pc, #48]	@ (800e1b8 <prvInitialiseNewTask+0x148>)
 800e186:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e18a:	4a0c      	ldr	r2, [pc, #48]	@ (800e1bc <prvInitialiseNewTask+0x14c>)
 800e18c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e18e:	683a      	ldr	r2, [r7, #0]
 800e190:	68f9      	ldr	r1, [r7, #12]
 800e192:	69b8      	ldr	r0, [r7, #24]
 800e194:	f001 fa7c 	bl	800f690 <pxPortInitialiseStack>
 800e198:	4602      	mov	r2, r0
 800e19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e19c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e19e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d002      	beq.n	800e1aa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e1a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1aa:	bf00      	nop
 800e1ac:	3720      	adds	r7, #32
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	2400cc90 	.word	0x2400cc90
 800e1b8:	2400ccf8 	.word	0x2400ccf8
 800e1bc:	2400cd60 	.word	0x2400cd60

0800e1c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b082      	sub	sp, #8
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e1c8:	f001 fb96 	bl	800f8f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e1cc:	4b2d      	ldr	r3, [pc, #180]	@ (800e284 <prvAddNewTaskToReadyList+0xc4>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	3301      	adds	r3, #1
 800e1d2:	4a2c      	ldr	r2, [pc, #176]	@ (800e284 <prvAddNewTaskToReadyList+0xc4>)
 800e1d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e1d6:	4b2c      	ldr	r3, [pc, #176]	@ (800e288 <prvAddNewTaskToReadyList+0xc8>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d109      	bne.n	800e1f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e1de:	4a2a      	ldr	r2, [pc, #168]	@ (800e288 <prvAddNewTaskToReadyList+0xc8>)
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e1e4:	4b27      	ldr	r3, [pc, #156]	@ (800e284 <prvAddNewTaskToReadyList+0xc4>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	2b01      	cmp	r3, #1
 800e1ea:	d110      	bne.n	800e20e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e1ec:	f000 fc40 	bl	800ea70 <prvInitialiseTaskLists>
 800e1f0:	e00d      	b.n	800e20e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e1f2:	4b26      	ldr	r3, [pc, #152]	@ (800e28c <prvAddNewTaskToReadyList+0xcc>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d109      	bne.n	800e20e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e1fa:	4b23      	ldr	r3, [pc, #140]	@ (800e288 <prvAddNewTaskToReadyList+0xc8>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e204:	429a      	cmp	r2, r3
 800e206:	d802      	bhi.n	800e20e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e208:	4a1f      	ldr	r2, [pc, #124]	@ (800e288 <prvAddNewTaskToReadyList+0xc8>)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e20e:	4b20      	ldr	r3, [pc, #128]	@ (800e290 <prvAddNewTaskToReadyList+0xd0>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	3301      	adds	r3, #1
 800e214:	4a1e      	ldr	r2, [pc, #120]	@ (800e290 <prvAddNewTaskToReadyList+0xd0>)
 800e216:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e218:	4b1d      	ldr	r3, [pc, #116]	@ (800e290 <prvAddNewTaskToReadyList+0xd0>)
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e224:	4b1b      	ldr	r3, [pc, #108]	@ (800e294 <prvAddNewTaskToReadyList+0xd4>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	429a      	cmp	r2, r3
 800e22a:	d903      	bls.n	800e234 <prvAddNewTaskToReadyList+0x74>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e230:	4a18      	ldr	r2, [pc, #96]	@ (800e294 <prvAddNewTaskToReadyList+0xd4>)
 800e232:	6013      	str	r3, [r2, #0]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e238:	4613      	mov	r3, r2
 800e23a:	009b      	lsls	r3, r3, #2
 800e23c:	4413      	add	r3, r2
 800e23e:	009b      	lsls	r3, r3, #2
 800e240:	4a15      	ldr	r2, [pc, #84]	@ (800e298 <prvAddNewTaskToReadyList+0xd8>)
 800e242:	441a      	add	r2, r3
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	3304      	adds	r3, #4
 800e248:	4619      	mov	r1, r3
 800e24a:	4610      	mov	r0, r2
 800e24c:	f7fe fcc1 	bl	800cbd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e250:	f001 fb84 	bl	800f95c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e254:	4b0d      	ldr	r3, [pc, #52]	@ (800e28c <prvAddNewTaskToReadyList+0xcc>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d00e      	beq.n	800e27a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e25c:	4b0a      	ldr	r3, [pc, #40]	@ (800e288 <prvAddNewTaskToReadyList+0xc8>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e266:	429a      	cmp	r2, r3
 800e268:	d207      	bcs.n	800e27a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e26a:	4b0c      	ldr	r3, [pc, #48]	@ (800e29c <prvAddNewTaskToReadyList+0xdc>)
 800e26c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e270:	601a      	str	r2, [r3, #0]
 800e272:	f3bf 8f4f 	dsb	sy
 800e276:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e27a:	bf00      	nop
 800e27c:	3708      	adds	r7, #8
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop
 800e284:	24005c08 	.word	0x24005c08
 800e288:	24005734 	.word	0x24005734
 800e28c:	24005c14 	.word	0x24005c14
 800e290:	24005c24 	.word	0x24005c24
 800e294:	24005c10 	.word	0x24005c10
 800e298:	24005738 	.word	0x24005738
 800e29c:	e000ed04 	.word	0xe000ed04

0800e2a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d018      	beq.n	800e2e4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e2b2:	4b14      	ldr	r3, [pc, #80]	@ (800e304 <vTaskDelay+0x64>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d00b      	beq.n	800e2d2 <vTaskDelay+0x32>
	__asm volatile
 800e2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2be:	f383 8811 	msr	BASEPRI, r3
 800e2c2:	f3bf 8f6f 	isb	sy
 800e2c6:	f3bf 8f4f 	dsb	sy
 800e2ca:	60bb      	str	r3, [r7, #8]
}
 800e2cc:	bf00      	nop
 800e2ce:	bf00      	nop
 800e2d0:	e7fd      	b.n	800e2ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e2d2:	f000 f88b 	bl	800e3ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e2d6:	2100      	movs	r1, #0
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f000 fe2b 	bl	800ef34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e2de:	f000 f893 	bl	800e408 <xTaskResumeAll>
 800e2e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d107      	bne.n	800e2fa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e2ea:	4b07      	ldr	r3, [pc, #28]	@ (800e308 <vTaskDelay+0x68>)
 800e2ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2f0:	601a      	str	r2, [r3, #0]
 800e2f2:	f3bf 8f4f 	dsb	sy
 800e2f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e2fa:	bf00      	nop
 800e2fc:	3710      	adds	r7, #16
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	24005c30 	.word	0x24005c30
 800e308:	e000ed04 	.word	0xe000ed04

0800e30c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b08a      	sub	sp, #40	@ 0x28
 800e310:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e312:	2300      	movs	r3, #0
 800e314:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e316:	2300      	movs	r3, #0
 800e318:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e31a:	463a      	mov	r2, r7
 800e31c:	1d39      	adds	r1, r7, #4
 800e31e:	f107 0308 	add.w	r3, r7, #8
 800e322:	4618      	mov	r0, r3
 800e324:	f7fe fbf4 	bl	800cb10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e328:	6839      	ldr	r1, [r7, #0]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	68ba      	ldr	r2, [r7, #8]
 800e32e:	9202      	str	r2, [sp, #8]
 800e330:	9301      	str	r3, [sp, #4]
 800e332:	2300      	movs	r3, #0
 800e334:	9300      	str	r3, [sp, #0]
 800e336:	2300      	movs	r3, #0
 800e338:	460a      	mov	r2, r1
 800e33a:	4924      	ldr	r1, [pc, #144]	@ (800e3cc <vTaskStartScheduler+0xc0>)
 800e33c:	4824      	ldr	r0, [pc, #144]	@ (800e3d0 <vTaskStartScheduler+0xc4>)
 800e33e:	f7ff fdf1 	bl	800df24 <xTaskCreateStatic>
 800e342:	4603      	mov	r3, r0
 800e344:	4a23      	ldr	r2, [pc, #140]	@ (800e3d4 <vTaskStartScheduler+0xc8>)
 800e346:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e348:	4b22      	ldr	r3, [pc, #136]	@ (800e3d4 <vTaskStartScheduler+0xc8>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d002      	beq.n	800e356 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e350:	2301      	movs	r3, #1
 800e352:	617b      	str	r3, [r7, #20]
 800e354:	e001      	b.n	800e35a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e356:	2300      	movs	r3, #0
 800e358:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d102      	bne.n	800e366 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e360:	f000 fe3c 	bl	800efdc <xTimerCreateTimerTask>
 800e364:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	2b01      	cmp	r3, #1
 800e36a:	d11b      	bne.n	800e3a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800e36c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e370:	f383 8811 	msr	BASEPRI, r3
 800e374:	f3bf 8f6f 	isb	sy
 800e378:	f3bf 8f4f 	dsb	sy
 800e37c:	613b      	str	r3, [r7, #16]
}
 800e37e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e380:	4b15      	ldr	r3, [pc, #84]	@ (800e3d8 <vTaskStartScheduler+0xcc>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	3354      	adds	r3, #84	@ 0x54
 800e386:	4a15      	ldr	r2, [pc, #84]	@ (800e3dc <vTaskStartScheduler+0xd0>)
 800e388:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e38a:	4b15      	ldr	r3, [pc, #84]	@ (800e3e0 <vTaskStartScheduler+0xd4>)
 800e38c:	f04f 32ff 	mov.w	r2, #4294967295
 800e390:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e392:	4b14      	ldr	r3, [pc, #80]	@ (800e3e4 <vTaskStartScheduler+0xd8>)
 800e394:	2201      	movs	r2, #1
 800e396:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e398:	4b13      	ldr	r3, [pc, #76]	@ (800e3e8 <vTaskStartScheduler+0xdc>)
 800e39a:	2200      	movs	r2, #0
 800e39c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e39e:	f001 fa07 	bl	800f7b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e3a2:	e00f      	b.n	800e3c4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3aa:	d10b      	bne.n	800e3c4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800e3ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3b0:	f383 8811 	msr	BASEPRI, r3
 800e3b4:	f3bf 8f6f 	isb	sy
 800e3b8:	f3bf 8f4f 	dsb	sy
 800e3bc:	60fb      	str	r3, [r7, #12]
}
 800e3be:	bf00      	nop
 800e3c0:	bf00      	nop
 800e3c2:	e7fd      	b.n	800e3c0 <vTaskStartScheduler+0xb4>
}
 800e3c4:	bf00      	nop
 800e3c6:	3718      	adds	r7, #24
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	08022f7c 	.word	0x08022f7c
 800e3d0:	0800ea41 	.word	0x0800ea41
 800e3d4:	24005c2c 	.word	0x24005c2c
 800e3d8:	24005734 	.word	0x24005734
 800e3dc:	24000044 	.word	0x24000044
 800e3e0:	24005c28 	.word	0x24005c28
 800e3e4:	24005c14 	.word	0x24005c14
 800e3e8:	24005c0c 	.word	0x24005c0c

0800e3ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e3ec:	b480      	push	{r7}
 800e3ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e3f0:	4b04      	ldr	r3, [pc, #16]	@ (800e404 <vTaskSuspendAll+0x18>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	4a03      	ldr	r2, [pc, #12]	@ (800e404 <vTaskSuspendAll+0x18>)
 800e3f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e3fa:	bf00      	nop
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr
 800e404:	24005c30 	.word	0x24005c30

0800e408 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b084      	sub	sp, #16
 800e40c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e40e:	2300      	movs	r3, #0
 800e410:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e412:	2300      	movs	r3, #0
 800e414:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e416:	4b42      	ldr	r3, [pc, #264]	@ (800e520 <xTaskResumeAll+0x118>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d10b      	bne.n	800e436 <xTaskResumeAll+0x2e>
	__asm volatile
 800e41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e422:	f383 8811 	msr	BASEPRI, r3
 800e426:	f3bf 8f6f 	isb	sy
 800e42a:	f3bf 8f4f 	dsb	sy
 800e42e:	603b      	str	r3, [r7, #0]
}
 800e430:	bf00      	nop
 800e432:	bf00      	nop
 800e434:	e7fd      	b.n	800e432 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e436:	f001 fa5f 	bl	800f8f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e43a:	4b39      	ldr	r3, [pc, #228]	@ (800e520 <xTaskResumeAll+0x118>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	3b01      	subs	r3, #1
 800e440:	4a37      	ldr	r2, [pc, #220]	@ (800e520 <xTaskResumeAll+0x118>)
 800e442:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e444:	4b36      	ldr	r3, [pc, #216]	@ (800e520 <xTaskResumeAll+0x118>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d162      	bne.n	800e512 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e44c:	4b35      	ldr	r3, [pc, #212]	@ (800e524 <xTaskResumeAll+0x11c>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d05e      	beq.n	800e512 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e454:	e02f      	b.n	800e4b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e456:	4b34      	ldr	r3, [pc, #208]	@ (800e528 <xTaskResumeAll+0x120>)
 800e458:	68db      	ldr	r3, [r3, #12]
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	3318      	adds	r3, #24
 800e462:	4618      	mov	r0, r3
 800e464:	f7fe fc12 	bl	800cc8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	3304      	adds	r3, #4
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7fe fc0d 	bl	800cc8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e476:	4b2d      	ldr	r3, [pc, #180]	@ (800e52c <xTaskResumeAll+0x124>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d903      	bls.n	800e486 <xTaskResumeAll+0x7e>
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e482:	4a2a      	ldr	r2, [pc, #168]	@ (800e52c <xTaskResumeAll+0x124>)
 800e484:	6013      	str	r3, [r2, #0]
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e48a:	4613      	mov	r3, r2
 800e48c:	009b      	lsls	r3, r3, #2
 800e48e:	4413      	add	r3, r2
 800e490:	009b      	lsls	r3, r3, #2
 800e492:	4a27      	ldr	r2, [pc, #156]	@ (800e530 <xTaskResumeAll+0x128>)
 800e494:	441a      	add	r2, r3
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	3304      	adds	r3, #4
 800e49a:	4619      	mov	r1, r3
 800e49c:	4610      	mov	r0, r2
 800e49e:	f7fe fb98 	bl	800cbd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4a6:	4b23      	ldr	r3, [pc, #140]	@ (800e534 <xTaskResumeAll+0x12c>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d302      	bcc.n	800e4b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e4b0:	4b21      	ldr	r3, [pc, #132]	@ (800e538 <xTaskResumeAll+0x130>)
 800e4b2:	2201      	movs	r2, #1
 800e4b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e4b6:	4b1c      	ldr	r3, [pc, #112]	@ (800e528 <xTaskResumeAll+0x120>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d1cb      	bne.n	800e456 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d001      	beq.n	800e4c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e4c4:	f000 fb78 	bl	800ebb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e4c8:	4b1c      	ldr	r3, [pc, #112]	@ (800e53c <xTaskResumeAll+0x134>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d010      	beq.n	800e4f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e4d4:	f000 f858 	bl	800e588 <xTaskIncrementTick>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d002      	beq.n	800e4e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e4de:	4b16      	ldr	r3, [pc, #88]	@ (800e538 <xTaskResumeAll+0x130>)
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	3b01      	subs	r3, #1
 800e4e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d1f1      	bne.n	800e4d4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e4f0:	4b12      	ldr	r3, [pc, #72]	@ (800e53c <xTaskResumeAll+0x134>)
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e4f6:	4b10      	ldr	r3, [pc, #64]	@ (800e538 <xTaskResumeAll+0x130>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d009      	beq.n	800e512 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e4fe:	2301      	movs	r3, #1
 800e500:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e502:	4b0f      	ldr	r3, [pc, #60]	@ (800e540 <xTaskResumeAll+0x138>)
 800e504:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e508:	601a      	str	r2, [r3, #0]
 800e50a:	f3bf 8f4f 	dsb	sy
 800e50e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e512:	f001 fa23 	bl	800f95c <vPortExitCritical>

	return xAlreadyYielded;
 800e516:	68bb      	ldr	r3, [r7, #8]
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3710      	adds	r7, #16
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}
 800e520:	24005c30 	.word	0x24005c30
 800e524:	24005c08 	.word	0x24005c08
 800e528:	24005bc8 	.word	0x24005bc8
 800e52c:	24005c10 	.word	0x24005c10
 800e530:	24005738 	.word	0x24005738
 800e534:	24005734 	.word	0x24005734
 800e538:	24005c1c 	.word	0x24005c1c
 800e53c:	24005c18 	.word	0x24005c18
 800e540:	e000ed04 	.word	0xe000ed04

0800e544 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e544:	b480      	push	{r7}
 800e546:	b083      	sub	sp, #12
 800e548:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e54a:	4b05      	ldr	r3, [pc, #20]	@ (800e560 <xTaskGetTickCount+0x1c>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e550:	687b      	ldr	r3, [r7, #4]
}
 800e552:	4618      	mov	r0, r3
 800e554:	370c      	adds	r7, #12
 800e556:	46bd      	mov	sp, r7
 800e558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55c:	4770      	bx	lr
 800e55e:	bf00      	nop
 800e560:	24005c0c 	.word	0x24005c0c

0800e564 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e56a:	f001 faa5 	bl	800fab8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e56e:	2300      	movs	r3, #0
 800e570:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e572:	4b04      	ldr	r3, [pc, #16]	@ (800e584 <xTaskGetTickCountFromISR+0x20>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e578:	683b      	ldr	r3, [r7, #0]
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3708      	adds	r7, #8
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	24005c0c 	.word	0x24005c0c

0800e588 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b086      	sub	sp, #24
 800e58c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e58e:	2300      	movs	r3, #0
 800e590:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e592:	4b4f      	ldr	r3, [pc, #316]	@ (800e6d0 <xTaskIncrementTick+0x148>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	2b00      	cmp	r3, #0
 800e598:	f040 8090 	bne.w	800e6bc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e59c:	4b4d      	ldr	r3, [pc, #308]	@ (800e6d4 <xTaskIncrementTick+0x14c>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e5a4:	4a4b      	ldr	r2, [pc, #300]	@ (800e6d4 <xTaskIncrementTick+0x14c>)
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e5aa:	693b      	ldr	r3, [r7, #16]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d121      	bne.n	800e5f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e5b0:	4b49      	ldr	r3, [pc, #292]	@ (800e6d8 <xTaskIncrementTick+0x150>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d00b      	beq.n	800e5d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5be:	f383 8811 	msr	BASEPRI, r3
 800e5c2:	f3bf 8f6f 	isb	sy
 800e5c6:	f3bf 8f4f 	dsb	sy
 800e5ca:	603b      	str	r3, [r7, #0]
}
 800e5cc:	bf00      	nop
 800e5ce:	bf00      	nop
 800e5d0:	e7fd      	b.n	800e5ce <xTaskIncrementTick+0x46>
 800e5d2:	4b41      	ldr	r3, [pc, #260]	@ (800e6d8 <xTaskIncrementTick+0x150>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	60fb      	str	r3, [r7, #12]
 800e5d8:	4b40      	ldr	r3, [pc, #256]	@ (800e6dc <xTaskIncrementTick+0x154>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4a3e      	ldr	r2, [pc, #248]	@ (800e6d8 <xTaskIncrementTick+0x150>)
 800e5de:	6013      	str	r3, [r2, #0]
 800e5e0:	4a3e      	ldr	r2, [pc, #248]	@ (800e6dc <xTaskIncrementTick+0x154>)
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	6013      	str	r3, [r2, #0]
 800e5e6:	4b3e      	ldr	r3, [pc, #248]	@ (800e6e0 <xTaskIncrementTick+0x158>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	4a3c      	ldr	r2, [pc, #240]	@ (800e6e0 <xTaskIncrementTick+0x158>)
 800e5ee:	6013      	str	r3, [r2, #0]
 800e5f0:	f000 fae2 	bl	800ebb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e5f4:	4b3b      	ldr	r3, [pc, #236]	@ (800e6e4 <xTaskIncrementTick+0x15c>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	693a      	ldr	r2, [r7, #16]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d349      	bcc.n	800e692 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5fe:	4b36      	ldr	r3, [pc, #216]	@ (800e6d8 <xTaskIncrementTick+0x150>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d104      	bne.n	800e612 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e608:	4b36      	ldr	r3, [pc, #216]	@ (800e6e4 <xTaskIncrementTick+0x15c>)
 800e60a:	f04f 32ff 	mov.w	r2, #4294967295
 800e60e:	601a      	str	r2, [r3, #0]
					break;
 800e610:	e03f      	b.n	800e692 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e612:	4b31      	ldr	r3, [pc, #196]	@ (800e6d8 <xTaskIncrementTick+0x150>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	68db      	ldr	r3, [r3, #12]
 800e618:	68db      	ldr	r3, [r3, #12]
 800e61a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	685b      	ldr	r3, [r3, #4]
 800e620:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e622:	693a      	ldr	r2, [r7, #16]
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	429a      	cmp	r2, r3
 800e628:	d203      	bcs.n	800e632 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e62a:	4a2e      	ldr	r2, [pc, #184]	@ (800e6e4 <xTaskIncrementTick+0x15c>)
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e630:	e02f      	b.n	800e692 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	3304      	adds	r3, #4
 800e636:	4618      	mov	r0, r3
 800e638:	f7fe fb28 	bl	800cc8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e640:	2b00      	cmp	r3, #0
 800e642:	d004      	beq.n	800e64e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	3318      	adds	r3, #24
 800e648:	4618      	mov	r0, r3
 800e64a:	f7fe fb1f 	bl	800cc8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e652:	4b25      	ldr	r3, [pc, #148]	@ (800e6e8 <xTaskIncrementTick+0x160>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	429a      	cmp	r2, r3
 800e658:	d903      	bls.n	800e662 <xTaskIncrementTick+0xda>
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e65e:	4a22      	ldr	r2, [pc, #136]	@ (800e6e8 <xTaskIncrementTick+0x160>)
 800e660:	6013      	str	r3, [r2, #0]
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e666:	4613      	mov	r3, r2
 800e668:	009b      	lsls	r3, r3, #2
 800e66a:	4413      	add	r3, r2
 800e66c:	009b      	lsls	r3, r3, #2
 800e66e:	4a1f      	ldr	r2, [pc, #124]	@ (800e6ec <xTaskIncrementTick+0x164>)
 800e670:	441a      	add	r2, r3
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	3304      	adds	r3, #4
 800e676:	4619      	mov	r1, r3
 800e678:	4610      	mov	r0, r2
 800e67a:	f7fe faaa 	bl	800cbd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e682:	4b1b      	ldr	r3, [pc, #108]	@ (800e6f0 <xTaskIncrementTick+0x168>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e688:	429a      	cmp	r2, r3
 800e68a:	d3b8      	bcc.n	800e5fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e68c:	2301      	movs	r3, #1
 800e68e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e690:	e7b5      	b.n	800e5fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e692:	4b17      	ldr	r3, [pc, #92]	@ (800e6f0 <xTaskIncrementTick+0x168>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e698:	4914      	ldr	r1, [pc, #80]	@ (800e6ec <xTaskIncrementTick+0x164>)
 800e69a:	4613      	mov	r3, r2
 800e69c:	009b      	lsls	r3, r3, #2
 800e69e:	4413      	add	r3, r2
 800e6a0:	009b      	lsls	r3, r3, #2
 800e6a2:	440b      	add	r3, r1
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	2b01      	cmp	r3, #1
 800e6a8:	d901      	bls.n	800e6ae <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e6ae:	4b11      	ldr	r3, [pc, #68]	@ (800e6f4 <xTaskIncrementTick+0x16c>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d007      	beq.n	800e6c6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	617b      	str	r3, [r7, #20]
 800e6ba:	e004      	b.n	800e6c6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e6bc:	4b0e      	ldr	r3, [pc, #56]	@ (800e6f8 <xTaskIncrementTick+0x170>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	4a0d      	ldr	r2, [pc, #52]	@ (800e6f8 <xTaskIncrementTick+0x170>)
 800e6c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e6c6:	697b      	ldr	r3, [r7, #20]
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3718      	adds	r7, #24
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	24005c30 	.word	0x24005c30
 800e6d4:	24005c0c 	.word	0x24005c0c
 800e6d8:	24005bc0 	.word	0x24005bc0
 800e6dc:	24005bc4 	.word	0x24005bc4
 800e6e0:	24005c20 	.word	0x24005c20
 800e6e4:	24005c28 	.word	0x24005c28
 800e6e8:	24005c10 	.word	0x24005c10
 800e6ec:	24005738 	.word	0x24005738
 800e6f0:	24005734 	.word	0x24005734
 800e6f4:	24005c1c 	.word	0x24005c1c
 800e6f8:	24005c18 	.word	0x24005c18

0800e6fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b085      	sub	sp, #20
 800e700:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e702:	4b2b      	ldr	r3, [pc, #172]	@ (800e7b0 <vTaskSwitchContext+0xb4>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d003      	beq.n	800e712 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e70a:	4b2a      	ldr	r3, [pc, #168]	@ (800e7b4 <vTaskSwitchContext+0xb8>)
 800e70c:	2201      	movs	r2, #1
 800e70e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e710:	e047      	b.n	800e7a2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e712:	4b28      	ldr	r3, [pc, #160]	@ (800e7b4 <vTaskSwitchContext+0xb8>)
 800e714:	2200      	movs	r2, #0
 800e716:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e718:	4b27      	ldr	r3, [pc, #156]	@ (800e7b8 <vTaskSwitchContext+0xbc>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	60fb      	str	r3, [r7, #12]
 800e71e:	e011      	b.n	800e744 <vTaskSwitchContext+0x48>
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d10b      	bne.n	800e73e <vTaskSwitchContext+0x42>
	__asm volatile
 800e726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e72a:	f383 8811 	msr	BASEPRI, r3
 800e72e:	f3bf 8f6f 	isb	sy
 800e732:	f3bf 8f4f 	dsb	sy
 800e736:	607b      	str	r3, [r7, #4]
}
 800e738:	bf00      	nop
 800e73a:	bf00      	nop
 800e73c:	e7fd      	b.n	800e73a <vTaskSwitchContext+0x3e>
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	3b01      	subs	r3, #1
 800e742:	60fb      	str	r3, [r7, #12]
 800e744:	491d      	ldr	r1, [pc, #116]	@ (800e7bc <vTaskSwitchContext+0xc0>)
 800e746:	68fa      	ldr	r2, [r7, #12]
 800e748:	4613      	mov	r3, r2
 800e74a:	009b      	lsls	r3, r3, #2
 800e74c:	4413      	add	r3, r2
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	440b      	add	r3, r1
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d0e3      	beq.n	800e720 <vTaskSwitchContext+0x24>
 800e758:	68fa      	ldr	r2, [r7, #12]
 800e75a:	4613      	mov	r3, r2
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	4413      	add	r3, r2
 800e760:	009b      	lsls	r3, r3, #2
 800e762:	4a16      	ldr	r2, [pc, #88]	@ (800e7bc <vTaskSwitchContext+0xc0>)
 800e764:	4413      	add	r3, r2
 800e766:	60bb      	str	r3, [r7, #8]
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	685a      	ldr	r2, [r3, #4]
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	605a      	str	r2, [r3, #4]
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	685a      	ldr	r2, [r3, #4]
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	3308      	adds	r3, #8
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d104      	bne.n	800e788 <vTaskSwitchContext+0x8c>
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	685a      	ldr	r2, [r3, #4]
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	605a      	str	r2, [r3, #4]
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	685b      	ldr	r3, [r3, #4]
 800e78c:	68db      	ldr	r3, [r3, #12]
 800e78e:	4a0c      	ldr	r2, [pc, #48]	@ (800e7c0 <vTaskSwitchContext+0xc4>)
 800e790:	6013      	str	r3, [r2, #0]
 800e792:	4a09      	ldr	r2, [pc, #36]	@ (800e7b8 <vTaskSwitchContext+0xbc>)
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e798:	4b09      	ldr	r3, [pc, #36]	@ (800e7c0 <vTaskSwitchContext+0xc4>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	3354      	adds	r3, #84	@ 0x54
 800e79e:	4a09      	ldr	r2, [pc, #36]	@ (800e7c4 <vTaskSwitchContext+0xc8>)
 800e7a0:	6013      	str	r3, [r2, #0]
}
 800e7a2:	bf00      	nop
 800e7a4:	3714      	adds	r7, #20
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ac:	4770      	bx	lr
 800e7ae:	bf00      	nop
 800e7b0:	24005c30 	.word	0x24005c30
 800e7b4:	24005c1c 	.word	0x24005c1c
 800e7b8:	24005c10 	.word	0x24005c10
 800e7bc:	24005738 	.word	0x24005738
 800e7c0:	24005734 	.word	0x24005734
 800e7c4:	24000044 	.word	0x24000044

0800e7c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b084      	sub	sp, #16
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d10b      	bne.n	800e7f0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7dc:	f383 8811 	msr	BASEPRI, r3
 800e7e0:	f3bf 8f6f 	isb	sy
 800e7e4:	f3bf 8f4f 	dsb	sy
 800e7e8:	60fb      	str	r3, [r7, #12]
}
 800e7ea:	bf00      	nop
 800e7ec:	bf00      	nop
 800e7ee:	e7fd      	b.n	800e7ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e7f0:	4b07      	ldr	r3, [pc, #28]	@ (800e810 <vTaskPlaceOnEventList+0x48>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	3318      	adds	r3, #24
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f7fe fa0e 	bl	800cc1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e7fe:	2101      	movs	r1, #1
 800e800:	6838      	ldr	r0, [r7, #0]
 800e802:	f000 fb97 	bl	800ef34 <prvAddCurrentTaskToDelayedList>
}
 800e806:	bf00      	nop
 800e808:	3710      	adds	r7, #16
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}
 800e80e:	bf00      	nop
 800e810:	24005734 	.word	0x24005734

0800e814 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e814:	b580      	push	{r7, lr}
 800e816:	b086      	sub	sp, #24
 800e818:	af00      	add	r7, sp, #0
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	60b9      	str	r1, [r7, #8]
 800e81e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d10b      	bne.n	800e83e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e82a:	f383 8811 	msr	BASEPRI, r3
 800e82e:	f3bf 8f6f 	isb	sy
 800e832:	f3bf 8f4f 	dsb	sy
 800e836:	617b      	str	r3, [r7, #20]
}
 800e838:	bf00      	nop
 800e83a:	bf00      	nop
 800e83c:	e7fd      	b.n	800e83a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e83e:	4b0a      	ldr	r3, [pc, #40]	@ (800e868 <vTaskPlaceOnEventListRestricted+0x54>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	3318      	adds	r3, #24
 800e844:	4619      	mov	r1, r3
 800e846:	68f8      	ldr	r0, [r7, #12]
 800e848:	f7fe f9c3 	bl	800cbd2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d002      	beq.n	800e858 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e852:	f04f 33ff 	mov.w	r3, #4294967295
 800e856:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e858:	6879      	ldr	r1, [r7, #4]
 800e85a:	68b8      	ldr	r0, [r7, #8]
 800e85c:	f000 fb6a 	bl	800ef34 <prvAddCurrentTaskToDelayedList>
	}
 800e860:	bf00      	nop
 800e862:	3718      	adds	r7, #24
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}
 800e868:	24005734 	.word	0x24005734

0800e86c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b086      	sub	sp, #24
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	68db      	ldr	r3, [r3, #12]
 800e878:	68db      	ldr	r3, [r3, #12]
 800e87a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d10b      	bne.n	800e89a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e886:	f383 8811 	msr	BASEPRI, r3
 800e88a:	f3bf 8f6f 	isb	sy
 800e88e:	f3bf 8f4f 	dsb	sy
 800e892:	60fb      	str	r3, [r7, #12]
}
 800e894:	bf00      	nop
 800e896:	bf00      	nop
 800e898:	e7fd      	b.n	800e896 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e89a:	693b      	ldr	r3, [r7, #16]
 800e89c:	3318      	adds	r3, #24
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7fe f9f4 	bl	800cc8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8a4:	4b1d      	ldr	r3, [pc, #116]	@ (800e91c <xTaskRemoveFromEventList+0xb0>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d11d      	bne.n	800e8e8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	3304      	adds	r3, #4
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7fe f9eb 	bl	800cc8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8ba:	4b19      	ldr	r3, [pc, #100]	@ (800e920 <xTaskRemoveFromEventList+0xb4>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d903      	bls.n	800e8ca <xTaskRemoveFromEventList+0x5e>
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8c6:	4a16      	ldr	r2, [pc, #88]	@ (800e920 <xTaskRemoveFromEventList+0xb4>)
 800e8c8:	6013      	str	r3, [r2, #0]
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8ce:	4613      	mov	r3, r2
 800e8d0:	009b      	lsls	r3, r3, #2
 800e8d2:	4413      	add	r3, r2
 800e8d4:	009b      	lsls	r3, r3, #2
 800e8d6:	4a13      	ldr	r2, [pc, #76]	@ (800e924 <xTaskRemoveFromEventList+0xb8>)
 800e8d8:	441a      	add	r2, r3
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	3304      	adds	r3, #4
 800e8de:	4619      	mov	r1, r3
 800e8e0:	4610      	mov	r0, r2
 800e8e2:	f7fe f976 	bl	800cbd2 <vListInsertEnd>
 800e8e6:	e005      	b.n	800e8f4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	3318      	adds	r3, #24
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	480e      	ldr	r0, [pc, #56]	@ (800e928 <xTaskRemoveFromEventList+0xbc>)
 800e8f0:	f7fe f96f 	bl	800cbd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8f8:	4b0c      	ldr	r3, [pc, #48]	@ (800e92c <xTaskRemoveFromEventList+0xc0>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d905      	bls.n	800e90e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e902:	2301      	movs	r3, #1
 800e904:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e906:	4b0a      	ldr	r3, [pc, #40]	@ (800e930 <xTaskRemoveFromEventList+0xc4>)
 800e908:	2201      	movs	r2, #1
 800e90a:	601a      	str	r2, [r3, #0]
 800e90c:	e001      	b.n	800e912 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e90e:	2300      	movs	r3, #0
 800e910:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e912:	697b      	ldr	r3, [r7, #20]
}
 800e914:	4618      	mov	r0, r3
 800e916:	3718      	adds	r7, #24
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	24005c30 	.word	0x24005c30
 800e920:	24005c10 	.word	0x24005c10
 800e924:	24005738 	.word	0x24005738
 800e928:	24005bc8 	.word	0x24005bc8
 800e92c:	24005734 	.word	0x24005734
 800e930:	24005c1c 	.word	0x24005c1c

0800e934 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e934:	b480      	push	{r7}
 800e936:	b083      	sub	sp, #12
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e93c:	4b06      	ldr	r3, [pc, #24]	@ (800e958 <vTaskInternalSetTimeOutState+0x24>)
 800e93e:	681a      	ldr	r2, [r3, #0]
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e944:	4b05      	ldr	r3, [pc, #20]	@ (800e95c <vTaskInternalSetTimeOutState+0x28>)
 800e946:	681a      	ldr	r2, [r3, #0]
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	605a      	str	r2, [r3, #4]
}
 800e94c:	bf00      	nop
 800e94e:	370c      	adds	r7, #12
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr
 800e958:	24005c20 	.word	0x24005c20
 800e95c:	24005c0c 	.word	0x24005c0c

0800e960 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b088      	sub	sp, #32
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d10b      	bne.n	800e988 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e974:	f383 8811 	msr	BASEPRI, r3
 800e978:	f3bf 8f6f 	isb	sy
 800e97c:	f3bf 8f4f 	dsb	sy
 800e980:	613b      	str	r3, [r7, #16]
}
 800e982:	bf00      	nop
 800e984:	bf00      	nop
 800e986:	e7fd      	b.n	800e984 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d10b      	bne.n	800e9a6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e992:	f383 8811 	msr	BASEPRI, r3
 800e996:	f3bf 8f6f 	isb	sy
 800e99a:	f3bf 8f4f 	dsb	sy
 800e99e:	60fb      	str	r3, [r7, #12]
}
 800e9a0:	bf00      	nop
 800e9a2:	bf00      	nop
 800e9a4:	e7fd      	b.n	800e9a2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e9a6:	f000 ffa7 	bl	800f8f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e9aa:	4b1d      	ldr	r3, [pc, #116]	@ (800ea20 <xTaskCheckForTimeOut+0xc0>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	685b      	ldr	r3, [r3, #4]
 800e9b4:	69ba      	ldr	r2, [r7, #24]
 800e9b6:	1ad3      	subs	r3, r2, r3
 800e9b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9c2:	d102      	bne.n	800e9ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	61fb      	str	r3, [r7, #28]
 800e9c8:	e023      	b.n	800ea12 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681a      	ldr	r2, [r3, #0]
 800e9ce:	4b15      	ldr	r3, [pc, #84]	@ (800ea24 <xTaskCheckForTimeOut+0xc4>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d007      	beq.n	800e9e6 <xTaskCheckForTimeOut+0x86>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	69ba      	ldr	r2, [r7, #24]
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d302      	bcc.n	800e9e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	61fb      	str	r3, [r7, #28]
 800e9e4:	e015      	b.n	800ea12 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	697a      	ldr	r2, [r7, #20]
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d20b      	bcs.n	800ea08 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	1ad2      	subs	r2, r2, r3
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f7ff ff99 	bl	800e934 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ea02:	2300      	movs	r3, #0
 800ea04:	61fb      	str	r3, [r7, #28]
 800ea06:	e004      	b.n	800ea12 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ea0e:	2301      	movs	r3, #1
 800ea10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ea12:	f000 ffa3 	bl	800f95c <vPortExitCritical>

	return xReturn;
 800ea16:	69fb      	ldr	r3, [r7, #28]
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3720      	adds	r7, #32
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}
 800ea20:	24005c0c 	.word	0x24005c0c
 800ea24:	24005c20 	.word	0x24005c20

0800ea28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ea28:	b480      	push	{r7}
 800ea2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ea2c:	4b03      	ldr	r3, [pc, #12]	@ (800ea3c <vTaskMissedYield+0x14>)
 800ea2e:	2201      	movs	r2, #1
 800ea30:	601a      	str	r2, [r3, #0]
}
 800ea32:	bf00      	nop
 800ea34:	46bd      	mov	sp, r7
 800ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3a:	4770      	bx	lr
 800ea3c:	24005c1c 	.word	0x24005c1c

0800ea40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b082      	sub	sp, #8
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ea48:	f000 f852 	bl	800eaf0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ea4c:	4b06      	ldr	r3, [pc, #24]	@ (800ea68 <prvIdleTask+0x28>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	d9f9      	bls.n	800ea48 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ea54:	4b05      	ldr	r3, [pc, #20]	@ (800ea6c <prvIdleTask+0x2c>)
 800ea56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea5a:	601a      	str	r2, [r3, #0]
 800ea5c:	f3bf 8f4f 	dsb	sy
 800ea60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ea64:	e7f0      	b.n	800ea48 <prvIdleTask+0x8>
 800ea66:	bf00      	nop
 800ea68:	24005738 	.word	0x24005738
 800ea6c:	e000ed04 	.word	0xe000ed04

0800ea70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea76:	2300      	movs	r3, #0
 800ea78:	607b      	str	r3, [r7, #4]
 800ea7a:	e00c      	b.n	800ea96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ea7c:	687a      	ldr	r2, [r7, #4]
 800ea7e:	4613      	mov	r3, r2
 800ea80:	009b      	lsls	r3, r3, #2
 800ea82:	4413      	add	r3, r2
 800ea84:	009b      	lsls	r3, r3, #2
 800ea86:	4a12      	ldr	r2, [pc, #72]	@ (800ead0 <prvInitialiseTaskLists+0x60>)
 800ea88:	4413      	add	r3, r2
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7fe f874 	bl	800cb78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	3301      	adds	r3, #1
 800ea94:	607b      	str	r3, [r7, #4]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2b37      	cmp	r3, #55	@ 0x37
 800ea9a:	d9ef      	bls.n	800ea7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ea9c:	480d      	ldr	r0, [pc, #52]	@ (800ead4 <prvInitialiseTaskLists+0x64>)
 800ea9e:	f7fe f86b 	bl	800cb78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eaa2:	480d      	ldr	r0, [pc, #52]	@ (800ead8 <prvInitialiseTaskLists+0x68>)
 800eaa4:	f7fe f868 	bl	800cb78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eaa8:	480c      	ldr	r0, [pc, #48]	@ (800eadc <prvInitialiseTaskLists+0x6c>)
 800eaaa:	f7fe f865 	bl	800cb78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eaae:	480c      	ldr	r0, [pc, #48]	@ (800eae0 <prvInitialiseTaskLists+0x70>)
 800eab0:	f7fe f862 	bl	800cb78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eab4:	480b      	ldr	r0, [pc, #44]	@ (800eae4 <prvInitialiseTaskLists+0x74>)
 800eab6:	f7fe f85f 	bl	800cb78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eaba:	4b0b      	ldr	r3, [pc, #44]	@ (800eae8 <prvInitialiseTaskLists+0x78>)
 800eabc:	4a05      	ldr	r2, [pc, #20]	@ (800ead4 <prvInitialiseTaskLists+0x64>)
 800eabe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eac0:	4b0a      	ldr	r3, [pc, #40]	@ (800eaec <prvInitialiseTaskLists+0x7c>)
 800eac2:	4a05      	ldr	r2, [pc, #20]	@ (800ead8 <prvInitialiseTaskLists+0x68>)
 800eac4:	601a      	str	r2, [r3, #0]
}
 800eac6:	bf00      	nop
 800eac8:	3708      	adds	r7, #8
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}
 800eace:	bf00      	nop
 800ead0:	24005738 	.word	0x24005738
 800ead4:	24005b98 	.word	0x24005b98
 800ead8:	24005bac 	.word	0x24005bac
 800eadc:	24005bc8 	.word	0x24005bc8
 800eae0:	24005bdc 	.word	0x24005bdc
 800eae4:	24005bf4 	.word	0x24005bf4
 800eae8:	24005bc0 	.word	0x24005bc0
 800eaec:	24005bc4 	.word	0x24005bc4

0800eaf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eaf6:	e019      	b.n	800eb2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eaf8:	f000 fefe 	bl	800f8f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eafc:	4b10      	ldr	r3, [pc, #64]	@ (800eb40 <prvCheckTasksWaitingTermination+0x50>)
 800eafe:	68db      	ldr	r3, [r3, #12]
 800eb00:	68db      	ldr	r3, [r3, #12]
 800eb02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	3304      	adds	r3, #4
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7fe f8bf 	bl	800cc8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eb0e:	4b0d      	ldr	r3, [pc, #52]	@ (800eb44 <prvCheckTasksWaitingTermination+0x54>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	3b01      	subs	r3, #1
 800eb14:	4a0b      	ldr	r2, [pc, #44]	@ (800eb44 <prvCheckTasksWaitingTermination+0x54>)
 800eb16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eb18:	4b0b      	ldr	r3, [pc, #44]	@ (800eb48 <prvCheckTasksWaitingTermination+0x58>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	3b01      	subs	r3, #1
 800eb1e:	4a0a      	ldr	r2, [pc, #40]	@ (800eb48 <prvCheckTasksWaitingTermination+0x58>)
 800eb20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eb22:	f000 ff1b 	bl	800f95c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f000 f810 	bl	800eb4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb2c:	4b06      	ldr	r3, [pc, #24]	@ (800eb48 <prvCheckTasksWaitingTermination+0x58>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d1e1      	bne.n	800eaf8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eb34:	bf00      	nop
 800eb36:	bf00      	nop
 800eb38:	3708      	adds	r7, #8
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}
 800eb3e:	bf00      	nop
 800eb40:	24005bdc 	.word	0x24005bdc
 800eb44:	24005c08 	.word	0x24005c08
 800eb48:	24005bf0 	.word	0x24005bf0

0800eb4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b084      	sub	sp, #16
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	3354      	adds	r3, #84	@ 0x54
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f012 f8d5 	bl	8020d08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d108      	bne.n	800eb7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f001 f8b3 	bl	800fcd8 <vPortFree>
				vPortFree( pxTCB );
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f001 f8b0 	bl	800fcd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eb78:	e019      	b.n	800ebae <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800eb80:	2b01      	cmp	r3, #1
 800eb82:	d103      	bne.n	800eb8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f001 f8a7 	bl	800fcd8 <vPortFree>
	}
 800eb8a:	e010      	b.n	800ebae <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800eb92:	2b02      	cmp	r3, #2
 800eb94:	d00b      	beq.n	800ebae <prvDeleteTCB+0x62>
	__asm volatile
 800eb96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb9a:	f383 8811 	msr	BASEPRI, r3
 800eb9e:	f3bf 8f6f 	isb	sy
 800eba2:	f3bf 8f4f 	dsb	sy
 800eba6:	60fb      	str	r3, [r7, #12]
}
 800eba8:	bf00      	nop
 800ebaa:	bf00      	nop
 800ebac:	e7fd      	b.n	800ebaa <prvDeleteTCB+0x5e>
	}
 800ebae:	bf00      	nop
 800ebb0:	3710      	adds	r7, #16
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}
	...

0800ebb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b083      	sub	sp, #12
 800ebbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ebbe:	4b0c      	ldr	r3, [pc, #48]	@ (800ebf0 <prvResetNextTaskUnblockTime+0x38>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d104      	bne.n	800ebd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ebc8:	4b0a      	ldr	r3, [pc, #40]	@ (800ebf4 <prvResetNextTaskUnblockTime+0x3c>)
 800ebca:	f04f 32ff 	mov.w	r2, #4294967295
 800ebce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ebd0:	e008      	b.n	800ebe4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebd2:	4b07      	ldr	r3, [pc, #28]	@ (800ebf0 <prvResetNextTaskUnblockTime+0x38>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	68db      	ldr	r3, [r3, #12]
 800ebd8:	68db      	ldr	r3, [r3, #12]
 800ebda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	685b      	ldr	r3, [r3, #4]
 800ebe0:	4a04      	ldr	r2, [pc, #16]	@ (800ebf4 <prvResetNextTaskUnblockTime+0x3c>)
 800ebe2:	6013      	str	r3, [r2, #0]
}
 800ebe4:	bf00      	nop
 800ebe6:	370c      	adds	r7, #12
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr
 800ebf0:	24005bc0 	.word	0x24005bc0
 800ebf4:	24005c28 	.word	0x24005c28

0800ebf8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b083      	sub	sp, #12
 800ebfc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ebfe:	4b05      	ldr	r3, [pc, #20]	@ (800ec14 <xTaskGetCurrentTaskHandle+0x1c>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ec04:	687b      	ldr	r3, [r7, #4]
	}
 800ec06:	4618      	mov	r0, r3
 800ec08:	370c      	adds	r7, #12
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec10:	4770      	bx	lr
 800ec12:	bf00      	nop
 800ec14:	24005734 	.word	0x24005734

0800ec18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ec18:	b480      	push	{r7}
 800ec1a:	b083      	sub	sp, #12
 800ec1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ec1e:	4b0b      	ldr	r3, [pc, #44]	@ (800ec4c <xTaskGetSchedulerState+0x34>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d102      	bne.n	800ec2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ec26:	2301      	movs	r3, #1
 800ec28:	607b      	str	r3, [r7, #4]
 800ec2a:	e008      	b.n	800ec3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec2c:	4b08      	ldr	r3, [pc, #32]	@ (800ec50 <xTaskGetSchedulerState+0x38>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d102      	bne.n	800ec3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ec34:	2302      	movs	r3, #2
 800ec36:	607b      	str	r3, [r7, #4]
 800ec38:	e001      	b.n	800ec3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ec3e:	687b      	ldr	r3, [r7, #4]
	}
 800ec40:	4618      	mov	r0, r3
 800ec42:	370c      	adds	r7, #12
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr
 800ec4c:	24005c14 	.word	0x24005c14
 800ec50:	24005c30 	.word	0x24005c30

0800ec54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b084      	sub	sp, #16
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ec60:	2300      	movs	r3, #0
 800ec62:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d051      	beq.n	800ed0e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec6e:	4b2a      	ldr	r3, [pc, #168]	@ (800ed18 <xTaskPriorityInherit+0xc4>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d241      	bcs.n	800ecfc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	699b      	ldr	r3, [r3, #24]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	db06      	blt.n	800ec8e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec80:	4b25      	ldr	r3, [pc, #148]	@ (800ed18 <xTaskPriorityInherit+0xc4>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec86:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	6959      	ldr	r1, [r3, #20]
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec96:	4613      	mov	r3, r2
 800ec98:	009b      	lsls	r3, r3, #2
 800ec9a:	4413      	add	r3, r2
 800ec9c:	009b      	lsls	r3, r3, #2
 800ec9e:	4a1f      	ldr	r2, [pc, #124]	@ (800ed1c <xTaskPriorityInherit+0xc8>)
 800eca0:	4413      	add	r3, r2
 800eca2:	4299      	cmp	r1, r3
 800eca4:	d122      	bne.n	800ecec <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	3304      	adds	r3, #4
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7fd ffee 	bl	800cc8c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ecb0:	4b19      	ldr	r3, [pc, #100]	@ (800ed18 <xTaskPriorityInherit+0xc4>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecbe:	4b18      	ldr	r3, [pc, #96]	@ (800ed20 <xTaskPriorityInherit+0xcc>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d903      	bls.n	800ecce <xTaskPriorityInherit+0x7a>
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecca:	4a15      	ldr	r2, [pc, #84]	@ (800ed20 <xTaskPriorityInherit+0xcc>)
 800eccc:	6013      	str	r3, [r2, #0]
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecd2:	4613      	mov	r3, r2
 800ecd4:	009b      	lsls	r3, r3, #2
 800ecd6:	4413      	add	r3, r2
 800ecd8:	009b      	lsls	r3, r3, #2
 800ecda:	4a10      	ldr	r2, [pc, #64]	@ (800ed1c <xTaskPriorityInherit+0xc8>)
 800ecdc:	441a      	add	r2, r3
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	3304      	adds	r3, #4
 800ece2:	4619      	mov	r1, r3
 800ece4:	4610      	mov	r0, r2
 800ece6:	f7fd ff74 	bl	800cbd2 <vListInsertEnd>
 800ecea:	e004      	b.n	800ecf6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ecec:	4b0a      	ldr	r3, [pc, #40]	@ (800ed18 <xTaskPriorityInherit+0xc4>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	60fb      	str	r3, [r7, #12]
 800ecfa:	e008      	b.n	800ed0e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ed00:	4b05      	ldr	r3, [pc, #20]	@ (800ed18 <xTaskPriorityInherit+0xc4>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed06:	429a      	cmp	r2, r3
 800ed08:	d201      	bcs.n	800ed0e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
	}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3710      	adds	r7, #16
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}
 800ed18:	24005734 	.word	0x24005734
 800ed1c:	24005738 	.word	0x24005738
 800ed20:	24005c10 	.word	0x24005c10

0800ed24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b086      	sub	sp, #24
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ed30:	2300      	movs	r3, #0
 800ed32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d058      	beq.n	800edec <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ed3a:	4b2f      	ldr	r3, [pc, #188]	@ (800edf8 <xTaskPriorityDisinherit+0xd4>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	693a      	ldr	r2, [r7, #16]
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d00b      	beq.n	800ed5c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ed44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed48:	f383 8811 	msr	BASEPRI, r3
 800ed4c:	f3bf 8f6f 	isb	sy
 800ed50:	f3bf 8f4f 	dsb	sy
 800ed54:	60fb      	str	r3, [r7, #12]
}
 800ed56:	bf00      	nop
 800ed58:	bf00      	nop
 800ed5a:	e7fd      	b.n	800ed58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d10b      	bne.n	800ed7c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ed64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed68:	f383 8811 	msr	BASEPRI, r3
 800ed6c:	f3bf 8f6f 	isb	sy
 800ed70:	f3bf 8f4f 	dsb	sy
 800ed74:	60bb      	str	r3, [r7, #8]
}
 800ed76:	bf00      	nop
 800ed78:	bf00      	nop
 800ed7a:	e7fd      	b.n	800ed78 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed80:	1e5a      	subs	r2, r3, #1
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed86:	693b      	ldr	r3, [r7, #16]
 800ed88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d02c      	beq.n	800edec <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d128      	bne.n	800edec <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	3304      	adds	r3, #4
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7fd ff74 	bl	800cc8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edac:	693b      	ldr	r3, [r7, #16]
 800edae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edb0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800edb4:	693b      	ldr	r3, [r7, #16]
 800edb6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edbc:	4b0f      	ldr	r3, [pc, #60]	@ (800edfc <xTaskPriorityDisinherit+0xd8>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	429a      	cmp	r2, r3
 800edc2:	d903      	bls.n	800edcc <xTaskPriorityDisinherit+0xa8>
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edc8:	4a0c      	ldr	r2, [pc, #48]	@ (800edfc <xTaskPriorityDisinherit+0xd8>)
 800edca:	6013      	str	r3, [r2, #0]
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edd0:	4613      	mov	r3, r2
 800edd2:	009b      	lsls	r3, r3, #2
 800edd4:	4413      	add	r3, r2
 800edd6:	009b      	lsls	r3, r3, #2
 800edd8:	4a09      	ldr	r2, [pc, #36]	@ (800ee00 <xTaskPriorityDisinherit+0xdc>)
 800edda:	441a      	add	r2, r3
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	3304      	adds	r3, #4
 800ede0:	4619      	mov	r1, r3
 800ede2:	4610      	mov	r0, r2
 800ede4:	f7fd fef5 	bl	800cbd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ede8:	2301      	movs	r3, #1
 800edea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800edec:	697b      	ldr	r3, [r7, #20]
	}
 800edee:	4618      	mov	r0, r3
 800edf0:	3718      	adds	r7, #24
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
 800edf6:	bf00      	nop
 800edf8:	24005734 	.word	0x24005734
 800edfc:	24005c10 	.word	0x24005c10
 800ee00:	24005738 	.word	0x24005738

0800ee04 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b088      	sub	sp, #32
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ee12:	2301      	movs	r3, #1
 800ee14:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d06c      	beq.n	800eef6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ee1c:	69bb      	ldr	r3, [r7, #24]
 800ee1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d10b      	bne.n	800ee3c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ee24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee28:	f383 8811 	msr	BASEPRI, r3
 800ee2c:	f3bf 8f6f 	isb	sy
 800ee30:	f3bf 8f4f 	dsb	sy
 800ee34:	60fb      	str	r3, [r7, #12]
}
 800ee36:	bf00      	nop
 800ee38:	bf00      	nop
 800ee3a:	e7fd      	b.n	800ee38 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ee3c:	69bb      	ldr	r3, [r7, #24]
 800ee3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee40:	683a      	ldr	r2, [r7, #0]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d902      	bls.n	800ee4c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	61fb      	str	r3, [r7, #28]
 800ee4a:	e002      	b.n	800ee52 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ee4c:	69bb      	ldr	r3, [r7, #24]
 800ee4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee50:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee56:	69fa      	ldr	r2, [r7, #28]
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d04c      	beq.n	800eef6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ee5c:	69bb      	ldr	r3, [r7, #24]
 800ee5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee60:	697a      	ldr	r2, [r7, #20]
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d147      	bne.n	800eef6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ee66:	4b26      	ldr	r3, [pc, #152]	@ (800ef00 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	69ba      	ldr	r2, [r7, #24]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d10b      	bne.n	800ee88 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ee70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee74:	f383 8811 	msr	BASEPRI, r3
 800ee78:	f3bf 8f6f 	isb	sy
 800ee7c:	f3bf 8f4f 	dsb	sy
 800ee80:	60bb      	str	r3, [r7, #8]
}
 800ee82:	bf00      	nop
 800ee84:	bf00      	nop
 800ee86:	e7fd      	b.n	800ee84 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ee88:	69bb      	ldr	r3, [r7, #24]
 800ee8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee8c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ee8e:	69bb      	ldr	r3, [r7, #24]
 800ee90:	69fa      	ldr	r2, [r7, #28]
 800ee92:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee94:	69bb      	ldr	r3, [r7, #24]
 800ee96:	699b      	ldr	r3, [r3, #24]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	db04      	blt.n	800eea6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee9c:	69fb      	ldr	r3, [r7, #28]
 800ee9e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eea6:	69bb      	ldr	r3, [r7, #24]
 800eea8:	6959      	ldr	r1, [r3, #20]
 800eeaa:	693a      	ldr	r2, [r7, #16]
 800eeac:	4613      	mov	r3, r2
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	4413      	add	r3, r2
 800eeb2:	009b      	lsls	r3, r3, #2
 800eeb4:	4a13      	ldr	r2, [pc, #76]	@ (800ef04 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eeb6:	4413      	add	r3, r2
 800eeb8:	4299      	cmp	r1, r3
 800eeba:	d11c      	bne.n	800eef6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eebc:	69bb      	ldr	r3, [r7, #24]
 800eebe:	3304      	adds	r3, #4
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7fd fee3 	bl	800cc8c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eec6:	69bb      	ldr	r3, [r7, #24]
 800eec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeca:	4b0f      	ldr	r3, [pc, #60]	@ (800ef08 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	429a      	cmp	r2, r3
 800eed0:	d903      	bls.n	800eeda <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800eed2:	69bb      	ldr	r3, [r7, #24]
 800eed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eed6:	4a0c      	ldr	r2, [pc, #48]	@ (800ef08 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800eed8:	6013      	str	r3, [r2, #0]
 800eeda:	69bb      	ldr	r3, [r7, #24]
 800eedc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eede:	4613      	mov	r3, r2
 800eee0:	009b      	lsls	r3, r3, #2
 800eee2:	4413      	add	r3, r2
 800eee4:	009b      	lsls	r3, r3, #2
 800eee6:	4a07      	ldr	r2, [pc, #28]	@ (800ef04 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eee8:	441a      	add	r2, r3
 800eeea:	69bb      	ldr	r3, [r7, #24]
 800eeec:	3304      	adds	r3, #4
 800eeee:	4619      	mov	r1, r3
 800eef0:	4610      	mov	r0, r2
 800eef2:	f7fd fe6e 	bl	800cbd2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eef6:	bf00      	nop
 800eef8:	3720      	adds	r7, #32
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	24005734 	.word	0x24005734
 800ef04:	24005738 	.word	0x24005738
 800ef08:	24005c10 	.word	0x24005c10

0800ef0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ef0c:	b480      	push	{r7}
 800ef0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ef10:	4b07      	ldr	r3, [pc, #28]	@ (800ef30 <pvTaskIncrementMutexHeldCount+0x24>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d004      	beq.n	800ef22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ef18:	4b05      	ldr	r3, [pc, #20]	@ (800ef30 <pvTaskIncrementMutexHeldCount+0x24>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef1e:	3201      	adds	r2, #1
 800ef20:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ef22:	4b03      	ldr	r3, [pc, #12]	@ (800ef30 <pvTaskIncrementMutexHeldCount+0x24>)
 800ef24:	681b      	ldr	r3, [r3, #0]
	}
 800ef26:	4618      	mov	r0, r3
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2e:	4770      	bx	lr
 800ef30:	24005734 	.word	0x24005734

0800ef34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b084      	sub	sp, #16
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ef3e:	4b21      	ldr	r3, [pc, #132]	@ (800efc4 <prvAddCurrentTaskToDelayedList+0x90>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef44:	4b20      	ldr	r3, [pc, #128]	@ (800efc8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	3304      	adds	r3, #4
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7fd fe9e 	bl	800cc8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef56:	d10a      	bne.n	800ef6e <prvAddCurrentTaskToDelayedList+0x3a>
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d007      	beq.n	800ef6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef5e:	4b1a      	ldr	r3, [pc, #104]	@ (800efc8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	3304      	adds	r3, #4
 800ef64:	4619      	mov	r1, r3
 800ef66:	4819      	ldr	r0, [pc, #100]	@ (800efcc <prvAddCurrentTaskToDelayedList+0x98>)
 800ef68:	f7fd fe33 	bl	800cbd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ef6c:	e026      	b.n	800efbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ef6e:	68fa      	ldr	r2, [r7, #12]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	4413      	add	r3, r2
 800ef74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ef76:	4b14      	ldr	r3, [pc, #80]	@ (800efc8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	68ba      	ldr	r2, [r7, #8]
 800ef7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ef7e:	68ba      	ldr	r2, [r7, #8]
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d209      	bcs.n	800ef9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef86:	4b12      	ldr	r3, [pc, #72]	@ (800efd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ef88:	681a      	ldr	r2, [r3, #0]
 800ef8a:	4b0f      	ldr	r3, [pc, #60]	@ (800efc8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	3304      	adds	r3, #4
 800ef90:	4619      	mov	r1, r3
 800ef92:	4610      	mov	r0, r2
 800ef94:	f7fd fe41 	bl	800cc1a <vListInsert>
}
 800ef98:	e010      	b.n	800efbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef9a:	4b0e      	ldr	r3, [pc, #56]	@ (800efd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ef9c:	681a      	ldr	r2, [r3, #0]
 800ef9e:	4b0a      	ldr	r3, [pc, #40]	@ (800efc8 <prvAddCurrentTaskToDelayedList+0x94>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	3304      	adds	r3, #4
 800efa4:	4619      	mov	r1, r3
 800efa6:	4610      	mov	r0, r2
 800efa8:	f7fd fe37 	bl	800cc1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800efac:	4b0a      	ldr	r3, [pc, #40]	@ (800efd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	68ba      	ldr	r2, [r7, #8]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d202      	bcs.n	800efbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800efb6:	4a08      	ldr	r2, [pc, #32]	@ (800efd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	6013      	str	r3, [r2, #0]
}
 800efbc:	bf00      	nop
 800efbe:	3710      	adds	r7, #16
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	24005c0c 	.word	0x24005c0c
 800efc8:	24005734 	.word	0x24005734
 800efcc:	24005bf4 	.word	0x24005bf4
 800efd0:	24005bc4 	.word	0x24005bc4
 800efd4:	24005bc0 	.word	0x24005bc0
 800efd8:	24005c28 	.word	0x24005c28

0800efdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b08a      	sub	sp, #40	@ 0x28
 800efe0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800efe2:	2300      	movs	r3, #0
 800efe4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800efe6:	f000 fb13 	bl	800f610 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800efea:	4b1d      	ldr	r3, [pc, #116]	@ (800f060 <xTimerCreateTimerTask+0x84>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d021      	beq.n	800f036 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800eff2:	2300      	movs	r3, #0
 800eff4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800eff6:	2300      	movs	r3, #0
 800eff8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800effa:	1d3a      	adds	r2, r7, #4
 800effc:	f107 0108 	add.w	r1, r7, #8
 800f000:	f107 030c 	add.w	r3, r7, #12
 800f004:	4618      	mov	r0, r3
 800f006:	f7fd fd9d 	bl	800cb44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f00a:	6879      	ldr	r1, [r7, #4]
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	68fa      	ldr	r2, [r7, #12]
 800f010:	9202      	str	r2, [sp, #8]
 800f012:	9301      	str	r3, [sp, #4]
 800f014:	2302      	movs	r3, #2
 800f016:	9300      	str	r3, [sp, #0]
 800f018:	2300      	movs	r3, #0
 800f01a:	460a      	mov	r2, r1
 800f01c:	4911      	ldr	r1, [pc, #68]	@ (800f064 <xTimerCreateTimerTask+0x88>)
 800f01e:	4812      	ldr	r0, [pc, #72]	@ (800f068 <xTimerCreateTimerTask+0x8c>)
 800f020:	f7fe ff80 	bl	800df24 <xTaskCreateStatic>
 800f024:	4603      	mov	r3, r0
 800f026:	4a11      	ldr	r2, [pc, #68]	@ (800f06c <xTimerCreateTimerTask+0x90>)
 800f028:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f02a:	4b10      	ldr	r3, [pc, #64]	@ (800f06c <xTimerCreateTimerTask+0x90>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d001      	beq.n	800f036 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f032:	2301      	movs	r3, #1
 800f034:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d10b      	bne.n	800f054 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f03c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f040:	f383 8811 	msr	BASEPRI, r3
 800f044:	f3bf 8f6f 	isb	sy
 800f048:	f3bf 8f4f 	dsb	sy
 800f04c:	613b      	str	r3, [r7, #16]
}
 800f04e:	bf00      	nop
 800f050:	bf00      	nop
 800f052:	e7fd      	b.n	800f050 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f054:	697b      	ldr	r3, [r7, #20]
}
 800f056:	4618      	mov	r0, r3
 800f058:	3718      	adds	r7, #24
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
 800f05e:	bf00      	nop
 800f060:	24005c64 	.word	0x24005c64
 800f064:	08022f84 	.word	0x08022f84
 800f068:	0800f1a9 	.word	0x0800f1a9
 800f06c:	24005c68 	.word	0x24005c68

0800f070 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b08a      	sub	sp, #40	@ 0x28
 800f074:	af00      	add	r7, sp, #0
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	60b9      	str	r1, [r7, #8]
 800f07a:	607a      	str	r2, [r7, #4]
 800f07c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f07e:	2300      	movs	r3, #0
 800f080:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d10b      	bne.n	800f0a0 <xTimerGenericCommand+0x30>
	__asm volatile
 800f088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f08c:	f383 8811 	msr	BASEPRI, r3
 800f090:	f3bf 8f6f 	isb	sy
 800f094:	f3bf 8f4f 	dsb	sy
 800f098:	623b      	str	r3, [r7, #32]
}
 800f09a:	bf00      	nop
 800f09c:	bf00      	nop
 800f09e:	e7fd      	b.n	800f09c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f0a0:	4b19      	ldr	r3, [pc, #100]	@ (800f108 <xTimerGenericCommand+0x98>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d02a      	beq.n	800f0fe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	2b05      	cmp	r3, #5
 800f0b8:	dc18      	bgt.n	800f0ec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f0ba:	f7ff fdad 	bl	800ec18 <xTaskGetSchedulerState>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	2b02      	cmp	r3, #2
 800f0c2:	d109      	bne.n	800f0d8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f0c4:	4b10      	ldr	r3, [pc, #64]	@ (800f108 <xTimerGenericCommand+0x98>)
 800f0c6:	6818      	ldr	r0, [r3, #0]
 800f0c8:	f107 0110 	add.w	r1, r7, #16
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0d0:	f7fe f872 	bl	800d1b8 <xQueueGenericSend>
 800f0d4:	6278      	str	r0, [r7, #36]	@ 0x24
 800f0d6:	e012      	b.n	800f0fe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f0d8:	4b0b      	ldr	r3, [pc, #44]	@ (800f108 <xTimerGenericCommand+0x98>)
 800f0da:	6818      	ldr	r0, [r3, #0]
 800f0dc:	f107 0110 	add.w	r1, r7, #16
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	f7fe f868 	bl	800d1b8 <xQueueGenericSend>
 800f0e8:	6278      	str	r0, [r7, #36]	@ 0x24
 800f0ea:	e008      	b.n	800f0fe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f0ec:	4b06      	ldr	r3, [pc, #24]	@ (800f108 <xTimerGenericCommand+0x98>)
 800f0ee:	6818      	ldr	r0, [r3, #0]
 800f0f0:	f107 0110 	add.w	r1, r7, #16
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	683a      	ldr	r2, [r7, #0]
 800f0f8:	f7fe f960 	bl	800d3bc <xQueueGenericSendFromISR>
 800f0fc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f100:	4618      	mov	r0, r3
 800f102:	3728      	adds	r7, #40	@ 0x28
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}
 800f108:	24005c64 	.word	0x24005c64

0800f10c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b088      	sub	sp, #32
 800f110:	af02      	add	r7, sp, #8
 800f112:	6078      	str	r0, [r7, #4]
 800f114:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f116:	4b23      	ldr	r3, [pc, #140]	@ (800f1a4 <prvProcessExpiredTimer+0x98>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	68db      	ldr	r3, [r3, #12]
 800f11c:	68db      	ldr	r3, [r3, #12]
 800f11e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	3304      	adds	r3, #4
 800f124:	4618      	mov	r0, r3
 800f126:	f7fd fdb1 	bl	800cc8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f130:	f003 0304 	and.w	r3, r3, #4
 800f134:	2b00      	cmp	r3, #0
 800f136:	d023      	beq.n	800f180 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	699a      	ldr	r2, [r3, #24]
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	18d1      	adds	r1, r2, r3
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	683a      	ldr	r2, [r7, #0]
 800f144:	6978      	ldr	r0, [r7, #20]
 800f146:	f000 f8d5 	bl	800f2f4 <prvInsertTimerInActiveList>
 800f14a:	4603      	mov	r3, r0
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d020      	beq.n	800f192 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f150:	2300      	movs	r3, #0
 800f152:	9300      	str	r3, [sp, #0]
 800f154:	2300      	movs	r3, #0
 800f156:	687a      	ldr	r2, [r7, #4]
 800f158:	2100      	movs	r1, #0
 800f15a:	6978      	ldr	r0, [r7, #20]
 800f15c:	f7ff ff88 	bl	800f070 <xTimerGenericCommand>
 800f160:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d114      	bne.n	800f192 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f16c:	f383 8811 	msr	BASEPRI, r3
 800f170:	f3bf 8f6f 	isb	sy
 800f174:	f3bf 8f4f 	dsb	sy
 800f178:	60fb      	str	r3, [r7, #12]
}
 800f17a:	bf00      	nop
 800f17c:	bf00      	nop
 800f17e:	e7fd      	b.n	800f17c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f186:	f023 0301 	bic.w	r3, r3, #1
 800f18a:	b2da      	uxtb	r2, r3
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	6a1b      	ldr	r3, [r3, #32]
 800f196:	6978      	ldr	r0, [r7, #20]
 800f198:	4798      	blx	r3
}
 800f19a:	bf00      	nop
 800f19c:	3718      	adds	r7, #24
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}
 800f1a2:	bf00      	nop
 800f1a4:	24005c5c 	.word	0x24005c5c

0800f1a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b084      	sub	sp, #16
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f1b0:	f107 0308 	add.w	r3, r7, #8
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f000 f859 	bl	800f26c <prvGetNextExpireTime>
 800f1ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	4619      	mov	r1, r3
 800f1c0:	68f8      	ldr	r0, [r7, #12]
 800f1c2:	f000 f805 	bl	800f1d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f1c6:	f000 f8d7 	bl	800f378 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f1ca:	bf00      	nop
 800f1cc:	e7f0      	b.n	800f1b0 <prvTimerTask+0x8>
	...

0800f1d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b084      	sub	sp, #16
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
 800f1d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f1da:	f7ff f907 	bl	800e3ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f1de:	f107 0308 	add.w	r3, r7, #8
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f000 f866 	bl	800f2b4 <prvSampleTimeNow>
 800f1e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d130      	bne.n	800f252 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d10a      	bne.n	800f20c <prvProcessTimerOrBlockTask+0x3c>
 800f1f6:	687a      	ldr	r2, [r7, #4]
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d806      	bhi.n	800f20c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f1fe:	f7ff f903 	bl	800e408 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f202:	68f9      	ldr	r1, [r7, #12]
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f7ff ff81 	bl	800f10c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f20a:	e024      	b.n	800f256 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d008      	beq.n	800f224 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f212:	4b13      	ldr	r3, [pc, #76]	@ (800f260 <prvProcessTimerOrBlockTask+0x90>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d101      	bne.n	800f220 <prvProcessTimerOrBlockTask+0x50>
 800f21c:	2301      	movs	r3, #1
 800f21e:	e000      	b.n	800f222 <prvProcessTimerOrBlockTask+0x52>
 800f220:	2300      	movs	r3, #0
 800f222:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f224:	4b0f      	ldr	r3, [pc, #60]	@ (800f264 <prvProcessTimerOrBlockTask+0x94>)
 800f226:	6818      	ldr	r0, [r3, #0]
 800f228:	687a      	ldr	r2, [r7, #4]
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	1ad3      	subs	r3, r2, r3
 800f22e:	683a      	ldr	r2, [r7, #0]
 800f230:	4619      	mov	r1, r3
 800f232:	f7fe fe43 	bl	800debc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f236:	f7ff f8e7 	bl	800e408 <xTaskResumeAll>
 800f23a:	4603      	mov	r3, r0
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d10a      	bne.n	800f256 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f240:	4b09      	ldr	r3, [pc, #36]	@ (800f268 <prvProcessTimerOrBlockTask+0x98>)
 800f242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f246:	601a      	str	r2, [r3, #0]
 800f248:	f3bf 8f4f 	dsb	sy
 800f24c:	f3bf 8f6f 	isb	sy
}
 800f250:	e001      	b.n	800f256 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f252:	f7ff f8d9 	bl	800e408 <xTaskResumeAll>
}
 800f256:	bf00      	nop
 800f258:	3710      	adds	r7, #16
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
 800f25e:	bf00      	nop
 800f260:	24005c60 	.word	0x24005c60
 800f264:	24005c64 	.word	0x24005c64
 800f268:	e000ed04 	.word	0xe000ed04

0800f26c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f26c:	b480      	push	{r7}
 800f26e:	b085      	sub	sp, #20
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f274:	4b0e      	ldr	r3, [pc, #56]	@ (800f2b0 <prvGetNextExpireTime+0x44>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d101      	bne.n	800f282 <prvGetNextExpireTime+0x16>
 800f27e:	2201      	movs	r2, #1
 800f280:	e000      	b.n	800f284 <prvGetNextExpireTime+0x18>
 800f282:	2200      	movs	r2, #0
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d105      	bne.n	800f29c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f290:	4b07      	ldr	r3, [pc, #28]	@ (800f2b0 <prvGetNextExpireTime+0x44>)
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	68db      	ldr	r3, [r3, #12]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	60fb      	str	r3, [r7, #12]
 800f29a:	e001      	b.n	800f2a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f29c:	2300      	movs	r3, #0
 800f29e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3714      	adds	r7, #20
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ac:	4770      	bx	lr
 800f2ae:	bf00      	nop
 800f2b0:	24005c5c 	.word	0x24005c5c

0800f2b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b084      	sub	sp, #16
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f2bc:	f7ff f942 	bl	800e544 <xTaskGetTickCount>
 800f2c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f2c2:	4b0b      	ldr	r3, [pc, #44]	@ (800f2f0 <prvSampleTimeNow+0x3c>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	68fa      	ldr	r2, [r7, #12]
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d205      	bcs.n	800f2d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f2cc:	f000 f93a 	bl	800f544 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2201      	movs	r2, #1
 800f2d4:	601a      	str	r2, [r3, #0]
 800f2d6:	e002      	b.n	800f2de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f2de:	4a04      	ldr	r2, [pc, #16]	@ (800f2f0 <prvSampleTimeNow+0x3c>)
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3710      	adds	r7, #16
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	24005c6c 	.word	0x24005c6c

0800f2f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b086      	sub	sp, #24
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	60f8      	str	r0, [r7, #12]
 800f2fc:	60b9      	str	r1, [r7, #8]
 800f2fe:	607a      	str	r2, [r7, #4]
 800f300:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f302:	2300      	movs	r3, #0
 800f304:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	68ba      	ldr	r2, [r7, #8]
 800f30a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	68fa      	ldr	r2, [r7, #12]
 800f310:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f312:	68ba      	ldr	r2, [r7, #8]
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	429a      	cmp	r2, r3
 800f318:	d812      	bhi.n	800f340 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f31a:	687a      	ldr	r2, [r7, #4]
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	1ad2      	subs	r2, r2, r3
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	699b      	ldr	r3, [r3, #24]
 800f324:	429a      	cmp	r2, r3
 800f326:	d302      	bcc.n	800f32e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f328:	2301      	movs	r3, #1
 800f32a:	617b      	str	r3, [r7, #20]
 800f32c:	e01b      	b.n	800f366 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f32e:	4b10      	ldr	r3, [pc, #64]	@ (800f370 <prvInsertTimerInActiveList+0x7c>)
 800f330:	681a      	ldr	r2, [r3, #0]
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	3304      	adds	r3, #4
 800f336:	4619      	mov	r1, r3
 800f338:	4610      	mov	r0, r2
 800f33a:	f7fd fc6e 	bl	800cc1a <vListInsert>
 800f33e:	e012      	b.n	800f366 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f340:	687a      	ldr	r2, [r7, #4]
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	429a      	cmp	r2, r3
 800f346:	d206      	bcs.n	800f356 <prvInsertTimerInActiveList+0x62>
 800f348:	68ba      	ldr	r2, [r7, #8]
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d302      	bcc.n	800f356 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f350:	2301      	movs	r3, #1
 800f352:	617b      	str	r3, [r7, #20]
 800f354:	e007      	b.n	800f366 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f356:	4b07      	ldr	r3, [pc, #28]	@ (800f374 <prvInsertTimerInActiveList+0x80>)
 800f358:	681a      	ldr	r2, [r3, #0]
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	3304      	adds	r3, #4
 800f35e:	4619      	mov	r1, r3
 800f360:	4610      	mov	r0, r2
 800f362:	f7fd fc5a 	bl	800cc1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f366:	697b      	ldr	r3, [r7, #20]
}
 800f368:	4618      	mov	r0, r3
 800f36a:	3718      	adds	r7, #24
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}
 800f370:	24005c60 	.word	0x24005c60
 800f374:	24005c5c 	.word	0x24005c5c

0800f378 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b08e      	sub	sp, #56	@ 0x38
 800f37c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f37e:	e0ce      	b.n	800f51e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2b00      	cmp	r3, #0
 800f384:	da19      	bge.n	800f3ba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f386:	1d3b      	adds	r3, r7, #4
 800f388:	3304      	adds	r3, #4
 800f38a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d10b      	bne.n	800f3aa <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f396:	f383 8811 	msr	BASEPRI, r3
 800f39a:	f3bf 8f6f 	isb	sy
 800f39e:	f3bf 8f4f 	dsb	sy
 800f3a2:	61fb      	str	r3, [r7, #28]
}
 800f3a4:	bf00      	nop
 800f3a6:	bf00      	nop
 800f3a8:	e7fd      	b.n	800f3a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f3aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f3b0:	6850      	ldr	r0, [r2, #4]
 800f3b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f3b4:	6892      	ldr	r2, [r2, #8]
 800f3b6:	4611      	mov	r1, r2
 800f3b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	f2c0 80ae 	blt.w	800f51e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3c8:	695b      	ldr	r3, [r3, #20]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d004      	beq.n	800f3d8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3d0:	3304      	adds	r3, #4
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f7fd fc5a 	bl	800cc8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f3d8:	463b      	mov	r3, r7
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7ff ff6a 	bl	800f2b4 <prvSampleTimeNow>
 800f3e0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2b09      	cmp	r3, #9
 800f3e6:	f200 8097 	bhi.w	800f518 <prvProcessReceivedCommands+0x1a0>
 800f3ea:	a201      	add	r2, pc, #4	@ (adr r2, 800f3f0 <prvProcessReceivedCommands+0x78>)
 800f3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3f0:	0800f419 	.word	0x0800f419
 800f3f4:	0800f419 	.word	0x0800f419
 800f3f8:	0800f419 	.word	0x0800f419
 800f3fc:	0800f48f 	.word	0x0800f48f
 800f400:	0800f4a3 	.word	0x0800f4a3
 800f404:	0800f4ef 	.word	0x0800f4ef
 800f408:	0800f419 	.word	0x0800f419
 800f40c:	0800f419 	.word	0x0800f419
 800f410:	0800f48f 	.word	0x0800f48f
 800f414:	0800f4a3 	.word	0x0800f4a3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f41a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f41e:	f043 0301 	orr.w	r3, r3, #1
 800f422:	b2da      	uxtb	r2, r3
 800f424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f426:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f42a:	68ba      	ldr	r2, [r7, #8]
 800f42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f42e:	699b      	ldr	r3, [r3, #24]
 800f430:	18d1      	adds	r1, r2, r3
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f436:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f438:	f7ff ff5c 	bl	800f2f4 <prvInsertTimerInActiveList>
 800f43c:	4603      	mov	r3, r0
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d06c      	beq.n	800f51c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f444:	6a1b      	ldr	r3, [r3, #32]
 800f446:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f448:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f44c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f450:	f003 0304 	and.w	r3, r3, #4
 800f454:	2b00      	cmp	r3, #0
 800f456:	d061      	beq.n	800f51c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f458:	68ba      	ldr	r2, [r7, #8]
 800f45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f45c:	699b      	ldr	r3, [r3, #24]
 800f45e:	441a      	add	r2, r3
 800f460:	2300      	movs	r3, #0
 800f462:	9300      	str	r3, [sp, #0]
 800f464:	2300      	movs	r3, #0
 800f466:	2100      	movs	r1, #0
 800f468:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f46a:	f7ff fe01 	bl	800f070 <xTimerGenericCommand>
 800f46e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f470:	6a3b      	ldr	r3, [r7, #32]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d152      	bne.n	800f51c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f47a:	f383 8811 	msr	BASEPRI, r3
 800f47e:	f3bf 8f6f 	isb	sy
 800f482:	f3bf 8f4f 	dsb	sy
 800f486:	61bb      	str	r3, [r7, #24]
}
 800f488:	bf00      	nop
 800f48a:	bf00      	nop
 800f48c:	e7fd      	b.n	800f48a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f490:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f494:	f023 0301 	bic.w	r3, r3, #1
 800f498:	b2da      	uxtb	r2, r3
 800f49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f49c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f4a0:	e03d      	b.n	800f51e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f4a8:	f043 0301 	orr.w	r3, r3, #1
 800f4ac:	b2da      	uxtb	r2, r3
 800f4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f4b4:	68ba      	ldr	r2, [r7, #8]
 800f4b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4b8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f4ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4bc:	699b      	ldr	r3, [r3, #24]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d10b      	bne.n	800f4da <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f4c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4c6:	f383 8811 	msr	BASEPRI, r3
 800f4ca:	f3bf 8f6f 	isb	sy
 800f4ce:	f3bf 8f4f 	dsb	sy
 800f4d2:	617b      	str	r3, [r7, #20]
}
 800f4d4:	bf00      	nop
 800f4d6:	bf00      	nop
 800f4d8:	e7fd      	b.n	800f4d6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4dc:	699a      	ldr	r2, [r3, #24]
 800f4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4e0:	18d1      	adds	r1, r2, r3
 800f4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f4e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f4e8:	f7ff ff04 	bl	800f2f4 <prvInsertTimerInActiveList>
					break;
 800f4ec:	e017      	b.n	800f51e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f4f4:	f003 0302 	and.w	r3, r3, #2
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d103      	bne.n	800f504 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f4fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f4fe:	f000 fbeb 	bl	800fcd8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f502:	e00c      	b.n	800f51e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f506:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f50a:	f023 0301 	bic.w	r3, r3, #1
 800f50e:	b2da      	uxtb	r2, r3
 800f510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f512:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f516:	e002      	b.n	800f51e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f518:	bf00      	nop
 800f51a:	e000      	b.n	800f51e <prvProcessReceivedCommands+0x1a6>
					break;
 800f51c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f51e:	4b08      	ldr	r3, [pc, #32]	@ (800f540 <prvProcessReceivedCommands+0x1c8>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	1d39      	adds	r1, r7, #4
 800f524:	2200      	movs	r2, #0
 800f526:	4618      	mov	r0, r3
 800f528:	f7fe f876 	bl	800d618 <xQueueReceive>
 800f52c:	4603      	mov	r3, r0
 800f52e:	2b00      	cmp	r3, #0
 800f530:	f47f af26 	bne.w	800f380 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f534:	bf00      	nop
 800f536:	bf00      	nop
 800f538:	3730      	adds	r7, #48	@ 0x30
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
 800f53e:	bf00      	nop
 800f540:	24005c64 	.word	0x24005c64

0800f544 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b088      	sub	sp, #32
 800f548:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f54a:	e049      	b.n	800f5e0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f54c:	4b2e      	ldr	r3, [pc, #184]	@ (800f608 <prvSwitchTimerLists+0xc4>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	68db      	ldr	r3, [r3, #12]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f556:	4b2c      	ldr	r3, [pc, #176]	@ (800f608 <prvSwitchTimerLists+0xc4>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	68db      	ldr	r3, [r3, #12]
 800f55c:	68db      	ldr	r3, [r3, #12]
 800f55e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	3304      	adds	r3, #4
 800f564:	4618      	mov	r0, r3
 800f566:	f7fd fb91 	bl	800cc8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	6a1b      	ldr	r3, [r3, #32]
 800f56e:	68f8      	ldr	r0, [r7, #12]
 800f570:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f578:	f003 0304 	and.w	r3, r3, #4
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d02f      	beq.n	800f5e0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	699b      	ldr	r3, [r3, #24]
 800f584:	693a      	ldr	r2, [r7, #16]
 800f586:	4413      	add	r3, r2
 800f588:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f58a:	68ba      	ldr	r2, [r7, #8]
 800f58c:	693b      	ldr	r3, [r7, #16]
 800f58e:	429a      	cmp	r2, r3
 800f590:	d90e      	bls.n	800f5b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	68ba      	ldr	r2, [r7, #8]
 800f596:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	68fa      	ldr	r2, [r7, #12]
 800f59c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f59e:	4b1a      	ldr	r3, [pc, #104]	@ (800f608 <prvSwitchTimerLists+0xc4>)
 800f5a0:	681a      	ldr	r2, [r3, #0]
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	3304      	adds	r3, #4
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	4610      	mov	r0, r2
 800f5aa:	f7fd fb36 	bl	800cc1a <vListInsert>
 800f5ae:	e017      	b.n	800f5e0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	9300      	str	r3, [sp, #0]
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	693a      	ldr	r2, [r7, #16]
 800f5b8:	2100      	movs	r1, #0
 800f5ba:	68f8      	ldr	r0, [r7, #12]
 800f5bc:	f7ff fd58 	bl	800f070 <xTimerGenericCommand>
 800f5c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d10b      	bne.n	800f5e0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f5c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5cc:	f383 8811 	msr	BASEPRI, r3
 800f5d0:	f3bf 8f6f 	isb	sy
 800f5d4:	f3bf 8f4f 	dsb	sy
 800f5d8:	603b      	str	r3, [r7, #0]
}
 800f5da:	bf00      	nop
 800f5dc:	bf00      	nop
 800f5de:	e7fd      	b.n	800f5dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f5e0:	4b09      	ldr	r3, [pc, #36]	@ (800f608 <prvSwitchTimerLists+0xc4>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d1b0      	bne.n	800f54c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f5ea:	4b07      	ldr	r3, [pc, #28]	@ (800f608 <prvSwitchTimerLists+0xc4>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f5f0:	4b06      	ldr	r3, [pc, #24]	@ (800f60c <prvSwitchTimerLists+0xc8>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	4a04      	ldr	r2, [pc, #16]	@ (800f608 <prvSwitchTimerLists+0xc4>)
 800f5f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f5f8:	4a04      	ldr	r2, [pc, #16]	@ (800f60c <prvSwitchTimerLists+0xc8>)
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	6013      	str	r3, [r2, #0]
}
 800f5fe:	bf00      	nop
 800f600:	3718      	adds	r7, #24
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}
 800f606:	bf00      	nop
 800f608:	24005c5c 	.word	0x24005c5c
 800f60c:	24005c60 	.word	0x24005c60

0800f610 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b082      	sub	sp, #8
 800f614:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f616:	f000 f96f 	bl	800f8f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f61a:	4b15      	ldr	r3, [pc, #84]	@ (800f670 <prvCheckForValidListAndQueue+0x60>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d120      	bne.n	800f664 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f622:	4814      	ldr	r0, [pc, #80]	@ (800f674 <prvCheckForValidListAndQueue+0x64>)
 800f624:	f7fd faa8 	bl	800cb78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f628:	4813      	ldr	r0, [pc, #76]	@ (800f678 <prvCheckForValidListAndQueue+0x68>)
 800f62a:	f7fd faa5 	bl	800cb78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f62e:	4b13      	ldr	r3, [pc, #76]	@ (800f67c <prvCheckForValidListAndQueue+0x6c>)
 800f630:	4a10      	ldr	r2, [pc, #64]	@ (800f674 <prvCheckForValidListAndQueue+0x64>)
 800f632:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f634:	4b12      	ldr	r3, [pc, #72]	@ (800f680 <prvCheckForValidListAndQueue+0x70>)
 800f636:	4a10      	ldr	r2, [pc, #64]	@ (800f678 <prvCheckForValidListAndQueue+0x68>)
 800f638:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f63a:	2300      	movs	r3, #0
 800f63c:	9300      	str	r3, [sp, #0]
 800f63e:	4b11      	ldr	r3, [pc, #68]	@ (800f684 <prvCheckForValidListAndQueue+0x74>)
 800f640:	4a11      	ldr	r2, [pc, #68]	@ (800f688 <prvCheckForValidListAndQueue+0x78>)
 800f642:	2110      	movs	r1, #16
 800f644:	200a      	movs	r0, #10
 800f646:	f7fd fbb5 	bl	800cdb4 <xQueueGenericCreateStatic>
 800f64a:	4603      	mov	r3, r0
 800f64c:	4a08      	ldr	r2, [pc, #32]	@ (800f670 <prvCheckForValidListAndQueue+0x60>)
 800f64e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f650:	4b07      	ldr	r3, [pc, #28]	@ (800f670 <prvCheckForValidListAndQueue+0x60>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d005      	beq.n	800f664 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f658:	4b05      	ldr	r3, [pc, #20]	@ (800f670 <prvCheckForValidListAndQueue+0x60>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	490b      	ldr	r1, [pc, #44]	@ (800f68c <prvCheckForValidListAndQueue+0x7c>)
 800f65e:	4618      	mov	r0, r3
 800f660:	f7fe fbd8 	bl	800de14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f664:	f000 f97a 	bl	800f95c <vPortExitCritical>
}
 800f668:	bf00      	nop
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	24005c64 	.word	0x24005c64
 800f674:	24005c34 	.word	0x24005c34
 800f678:	24005c48 	.word	0x24005c48
 800f67c:	24005c5c 	.word	0x24005c5c
 800f680:	24005c60 	.word	0x24005c60
 800f684:	24005d10 	.word	0x24005d10
 800f688:	24005c70 	.word	0x24005c70
 800f68c:	08022f8c 	.word	0x08022f8c

0800f690 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f690:	b480      	push	{r7}
 800f692:	b085      	sub	sp, #20
 800f694:	af00      	add	r7, sp, #0
 800f696:	60f8      	str	r0, [r7, #12]
 800f698:	60b9      	str	r1, [r7, #8]
 800f69a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	3b04      	subs	r3, #4
 800f6a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f6a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	3b04      	subs	r3, #4
 800f6ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	f023 0201 	bic.w	r2, r3, #1
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	3b04      	subs	r3, #4
 800f6be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f6c0:	4a0c      	ldr	r2, [pc, #48]	@ (800f6f4 <pxPortInitialiseStack+0x64>)
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	3b14      	subs	r3, #20
 800f6ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f6cc:	687a      	ldr	r2, [r7, #4]
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	3b04      	subs	r3, #4
 800f6d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	f06f 0202 	mvn.w	r2, #2
 800f6de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	3b20      	subs	r3, #32
 800f6e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
}
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	3714      	adds	r7, #20
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f2:	4770      	bx	lr
 800f6f4:	0800f6f9 	.word	0x0800f6f9

0800f6f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b085      	sub	sp, #20
 800f6fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f6fe:	2300      	movs	r3, #0
 800f700:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f702:	4b13      	ldr	r3, [pc, #76]	@ (800f750 <prvTaskExitError+0x58>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f70a:	d00b      	beq.n	800f724 <prvTaskExitError+0x2c>
	__asm volatile
 800f70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f710:	f383 8811 	msr	BASEPRI, r3
 800f714:	f3bf 8f6f 	isb	sy
 800f718:	f3bf 8f4f 	dsb	sy
 800f71c:	60fb      	str	r3, [r7, #12]
}
 800f71e:	bf00      	nop
 800f720:	bf00      	nop
 800f722:	e7fd      	b.n	800f720 <prvTaskExitError+0x28>
	__asm volatile
 800f724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f728:	f383 8811 	msr	BASEPRI, r3
 800f72c:	f3bf 8f6f 	isb	sy
 800f730:	f3bf 8f4f 	dsb	sy
 800f734:	60bb      	str	r3, [r7, #8]
}
 800f736:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f738:	bf00      	nop
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d0fc      	beq.n	800f73a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f740:	bf00      	nop
 800f742:	bf00      	nop
 800f744:	3714      	adds	r7, #20
 800f746:	46bd      	mov	sp, r7
 800f748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74c:	4770      	bx	lr
 800f74e:	bf00      	nop
 800f750:	24000024 	.word	0x24000024
	...

0800f760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f760:	4b07      	ldr	r3, [pc, #28]	@ (800f780 <pxCurrentTCBConst2>)
 800f762:	6819      	ldr	r1, [r3, #0]
 800f764:	6808      	ldr	r0, [r1, #0]
 800f766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f76a:	f380 8809 	msr	PSP, r0
 800f76e:	f3bf 8f6f 	isb	sy
 800f772:	f04f 0000 	mov.w	r0, #0
 800f776:	f380 8811 	msr	BASEPRI, r0
 800f77a:	4770      	bx	lr
 800f77c:	f3af 8000 	nop.w

0800f780 <pxCurrentTCBConst2>:
 800f780:	24005734 	.word	0x24005734
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f784:	bf00      	nop
 800f786:	bf00      	nop

0800f788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f788:	4808      	ldr	r0, [pc, #32]	@ (800f7ac <prvPortStartFirstTask+0x24>)
 800f78a:	6800      	ldr	r0, [r0, #0]
 800f78c:	6800      	ldr	r0, [r0, #0]
 800f78e:	f380 8808 	msr	MSP, r0
 800f792:	f04f 0000 	mov.w	r0, #0
 800f796:	f380 8814 	msr	CONTROL, r0
 800f79a:	b662      	cpsie	i
 800f79c:	b661      	cpsie	f
 800f79e:	f3bf 8f4f 	dsb	sy
 800f7a2:	f3bf 8f6f 	isb	sy
 800f7a6:	df00      	svc	0
 800f7a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f7aa:	bf00      	nop
 800f7ac:	e000ed08 	.word	0xe000ed08

0800f7b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b086      	sub	sp, #24
 800f7b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f7b6:	4b47      	ldr	r3, [pc, #284]	@ (800f8d4 <xPortStartScheduler+0x124>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	4a47      	ldr	r2, [pc, #284]	@ (800f8d8 <xPortStartScheduler+0x128>)
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	d10b      	bne.n	800f7d8 <xPortStartScheduler+0x28>
	__asm volatile
 800f7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7c4:	f383 8811 	msr	BASEPRI, r3
 800f7c8:	f3bf 8f6f 	isb	sy
 800f7cc:	f3bf 8f4f 	dsb	sy
 800f7d0:	613b      	str	r3, [r7, #16]
}
 800f7d2:	bf00      	nop
 800f7d4:	bf00      	nop
 800f7d6:	e7fd      	b.n	800f7d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f7d8:	4b3e      	ldr	r3, [pc, #248]	@ (800f8d4 <xPortStartScheduler+0x124>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	4a3f      	ldr	r2, [pc, #252]	@ (800f8dc <xPortStartScheduler+0x12c>)
 800f7de:	4293      	cmp	r3, r2
 800f7e0:	d10b      	bne.n	800f7fa <xPortStartScheduler+0x4a>
	__asm volatile
 800f7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7e6:	f383 8811 	msr	BASEPRI, r3
 800f7ea:	f3bf 8f6f 	isb	sy
 800f7ee:	f3bf 8f4f 	dsb	sy
 800f7f2:	60fb      	str	r3, [r7, #12]
}
 800f7f4:	bf00      	nop
 800f7f6:	bf00      	nop
 800f7f8:	e7fd      	b.n	800f7f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f7fa:	4b39      	ldr	r3, [pc, #228]	@ (800f8e0 <xPortStartScheduler+0x130>)
 800f7fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f7fe:	697b      	ldr	r3, [r7, #20]
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	b2db      	uxtb	r3, r3
 800f804:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	22ff      	movs	r2, #255	@ 0xff
 800f80a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	b2db      	uxtb	r3, r3
 800f812:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f814:	78fb      	ldrb	r3, [r7, #3]
 800f816:	b2db      	uxtb	r3, r3
 800f818:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f81c:	b2da      	uxtb	r2, r3
 800f81e:	4b31      	ldr	r3, [pc, #196]	@ (800f8e4 <xPortStartScheduler+0x134>)
 800f820:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f822:	4b31      	ldr	r3, [pc, #196]	@ (800f8e8 <xPortStartScheduler+0x138>)
 800f824:	2207      	movs	r2, #7
 800f826:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f828:	e009      	b.n	800f83e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f82a:	4b2f      	ldr	r3, [pc, #188]	@ (800f8e8 <xPortStartScheduler+0x138>)
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	3b01      	subs	r3, #1
 800f830:	4a2d      	ldr	r2, [pc, #180]	@ (800f8e8 <xPortStartScheduler+0x138>)
 800f832:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f834:	78fb      	ldrb	r3, [r7, #3]
 800f836:	b2db      	uxtb	r3, r3
 800f838:	005b      	lsls	r3, r3, #1
 800f83a:	b2db      	uxtb	r3, r3
 800f83c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f83e:	78fb      	ldrb	r3, [r7, #3]
 800f840:	b2db      	uxtb	r3, r3
 800f842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f846:	2b80      	cmp	r3, #128	@ 0x80
 800f848:	d0ef      	beq.n	800f82a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f84a:	4b27      	ldr	r3, [pc, #156]	@ (800f8e8 <xPortStartScheduler+0x138>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	f1c3 0307 	rsb	r3, r3, #7
 800f852:	2b04      	cmp	r3, #4
 800f854:	d00b      	beq.n	800f86e <xPortStartScheduler+0xbe>
	__asm volatile
 800f856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f85a:	f383 8811 	msr	BASEPRI, r3
 800f85e:	f3bf 8f6f 	isb	sy
 800f862:	f3bf 8f4f 	dsb	sy
 800f866:	60bb      	str	r3, [r7, #8]
}
 800f868:	bf00      	nop
 800f86a:	bf00      	nop
 800f86c:	e7fd      	b.n	800f86a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f86e:	4b1e      	ldr	r3, [pc, #120]	@ (800f8e8 <xPortStartScheduler+0x138>)
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	021b      	lsls	r3, r3, #8
 800f874:	4a1c      	ldr	r2, [pc, #112]	@ (800f8e8 <xPortStartScheduler+0x138>)
 800f876:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f878:	4b1b      	ldr	r3, [pc, #108]	@ (800f8e8 <xPortStartScheduler+0x138>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f880:	4a19      	ldr	r2, [pc, #100]	@ (800f8e8 <xPortStartScheduler+0x138>)
 800f882:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	b2da      	uxtb	r2, r3
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f88c:	4b17      	ldr	r3, [pc, #92]	@ (800f8ec <xPortStartScheduler+0x13c>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	4a16      	ldr	r2, [pc, #88]	@ (800f8ec <xPortStartScheduler+0x13c>)
 800f892:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f896:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f898:	4b14      	ldr	r3, [pc, #80]	@ (800f8ec <xPortStartScheduler+0x13c>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	4a13      	ldr	r2, [pc, #76]	@ (800f8ec <xPortStartScheduler+0x13c>)
 800f89e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f8a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f8a4:	f000 f8da 	bl	800fa5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f8a8:	4b11      	ldr	r3, [pc, #68]	@ (800f8f0 <xPortStartScheduler+0x140>)
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f8ae:	f000 f8f9 	bl	800faa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f8b2:	4b10      	ldr	r3, [pc, #64]	@ (800f8f4 <xPortStartScheduler+0x144>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	4a0f      	ldr	r2, [pc, #60]	@ (800f8f4 <xPortStartScheduler+0x144>)
 800f8b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f8bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f8be:	f7ff ff63 	bl	800f788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f8c2:	f7fe ff1b 	bl	800e6fc <vTaskSwitchContext>
	prvTaskExitError();
 800f8c6:	f7ff ff17 	bl	800f6f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f8ca:	2300      	movs	r3, #0
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	3718      	adds	r7, #24
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}
 800f8d4:	e000ed00 	.word	0xe000ed00
 800f8d8:	410fc271 	.word	0x410fc271
 800f8dc:	410fc270 	.word	0x410fc270
 800f8e0:	e000e400 	.word	0xe000e400
 800f8e4:	24005d60 	.word	0x24005d60
 800f8e8:	24005d64 	.word	0x24005d64
 800f8ec:	e000ed20 	.word	0xe000ed20
 800f8f0:	24000024 	.word	0x24000024
 800f8f4:	e000ef34 	.word	0xe000ef34

0800f8f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b083      	sub	sp, #12
 800f8fc:	af00      	add	r7, sp, #0
	__asm volatile
 800f8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f902:	f383 8811 	msr	BASEPRI, r3
 800f906:	f3bf 8f6f 	isb	sy
 800f90a:	f3bf 8f4f 	dsb	sy
 800f90e:	607b      	str	r3, [r7, #4]
}
 800f910:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f912:	4b10      	ldr	r3, [pc, #64]	@ (800f954 <vPortEnterCritical+0x5c>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	3301      	adds	r3, #1
 800f918:	4a0e      	ldr	r2, [pc, #56]	@ (800f954 <vPortEnterCritical+0x5c>)
 800f91a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f91c:	4b0d      	ldr	r3, [pc, #52]	@ (800f954 <vPortEnterCritical+0x5c>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	2b01      	cmp	r3, #1
 800f922:	d110      	bne.n	800f946 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f924:	4b0c      	ldr	r3, [pc, #48]	@ (800f958 <vPortEnterCritical+0x60>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	b2db      	uxtb	r3, r3
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d00b      	beq.n	800f946 <vPortEnterCritical+0x4e>
	__asm volatile
 800f92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f932:	f383 8811 	msr	BASEPRI, r3
 800f936:	f3bf 8f6f 	isb	sy
 800f93a:	f3bf 8f4f 	dsb	sy
 800f93e:	603b      	str	r3, [r7, #0]
}
 800f940:	bf00      	nop
 800f942:	bf00      	nop
 800f944:	e7fd      	b.n	800f942 <vPortEnterCritical+0x4a>
	}
}
 800f946:	bf00      	nop
 800f948:	370c      	adds	r7, #12
 800f94a:	46bd      	mov	sp, r7
 800f94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f950:	4770      	bx	lr
 800f952:	bf00      	nop
 800f954:	24000024 	.word	0x24000024
 800f958:	e000ed04 	.word	0xe000ed04

0800f95c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f95c:	b480      	push	{r7}
 800f95e:	b083      	sub	sp, #12
 800f960:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f962:	4b12      	ldr	r3, [pc, #72]	@ (800f9ac <vPortExitCritical+0x50>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d10b      	bne.n	800f982 <vPortExitCritical+0x26>
	__asm volatile
 800f96a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f96e:	f383 8811 	msr	BASEPRI, r3
 800f972:	f3bf 8f6f 	isb	sy
 800f976:	f3bf 8f4f 	dsb	sy
 800f97a:	607b      	str	r3, [r7, #4]
}
 800f97c:	bf00      	nop
 800f97e:	bf00      	nop
 800f980:	e7fd      	b.n	800f97e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f982:	4b0a      	ldr	r3, [pc, #40]	@ (800f9ac <vPortExitCritical+0x50>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	3b01      	subs	r3, #1
 800f988:	4a08      	ldr	r2, [pc, #32]	@ (800f9ac <vPortExitCritical+0x50>)
 800f98a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f98c:	4b07      	ldr	r3, [pc, #28]	@ (800f9ac <vPortExitCritical+0x50>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d105      	bne.n	800f9a0 <vPortExitCritical+0x44>
 800f994:	2300      	movs	r3, #0
 800f996:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	f383 8811 	msr	BASEPRI, r3
}
 800f99e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f9a0:	bf00      	nop
 800f9a2:	370c      	adds	r7, #12
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9aa:	4770      	bx	lr
 800f9ac:	24000024 	.word	0x24000024

0800f9b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f9b0:	f3ef 8009 	mrs	r0, PSP
 800f9b4:	f3bf 8f6f 	isb	sy
 800f9b8:	4b15      	ldr	r3, [pc, #84]	@ (800fa10 <pxCurrentTCBConst>)
 800f9ba:	681a      	ldr	r2, [r3, #0]
 800f9bc:	f01e 0f10 	tst.w	lr, #16
 800f9c0:	bf08      	it	eq
 800f9c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f9c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ca:	6010      	str	r0, [r2, #0]
 800f9cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f9d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f9d4:	f380 8811 	msr	BASEPRI, r0
 800f9d8:	f3bf 8f4f 	dsb	sy
 800f9dc:	f3bf 8f6f 	isb	sy
 800f9e0:	f7fe fe8c 	bl	800e6fc <vTaskSwitchContext>
 800f9e4:	f04f 0000 	mov.w	r0, #0
 800f9e8:	f380 8811 	msr	BASEPRI, r0
 800f9ec:	bc09      	pop	{r0, r3}
 800f9ee:	6819      	ldr	r1, [r3, #0]
 800f9f0:	6808      	ldr	r0, [r1, #0]
 800f9f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f6:	f01e 0f10 	tst.w	lr, #16
 800f9fa:	bf08      	it	eq
 800f9fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fa00:	f380 8809 	msr	PSP, r0
 800fa04:	f3bf 8f6f 	isb	sy
 800fa08:	4770      	bx	lr
 800fa0a:	bf00      	nop
 800fa0c:	f3af 8000 	nop.w

0800fa10 <pxCurrentTCBConst>:
 800fa10:	24005734 	.word	0x24005734
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fa14:	bf00      	nop
 800fa16:	bf00      	nop

0800fa18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
	__asm volatile
 800fa1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa22:	f383 8811 	msr	BASEPRI, r3
 800fa26:	f3bf 8f6f 	isb	sy
 800fa2a:	f3bf 8f4f 	dsb	sy
 800fa2e:	607b      	str	r3, [r7, #4]
}
 800fa30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fa32:	f7fe fda9 	bl	800e588 <xTaskIncrementTick>
 800fa36:	4603      	mov	r3, r0
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d003      	beq.n	800fa44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fa3c:	4b06      	ldr	r3, [pc, #24]	@ (800fa58 <xPortSysTickHandler+0x40>)
 800fa3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa42:	601a      	str	r2, [r3, #0]
 800fa44:	2300      	movs	r3, #0
 800fa46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	f383 8811 	msr	BASEPRI, r3
}
 800fa4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fa50:	bf00      	nop
 800fa52:	3708      	adds	r7, #8
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}
 800fa58:	e000ed04 	.word	0xe000ed04

0800fa5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fa60:	4b0b      	ldr	r3, [pc, #44]	@ (800fa90 <vPortSetupTimerInterrupt+0x34>)
 800fa62:	2200      	movs	r2, #0
 800fa64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fa66:	4b0b      	ldr	r3, [pc, #44]	@ (800fa94 <vPortSetupTimerInterrupt+0x38>)
 800fa68:	2200      	movs	r2, #0
 800fa6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fa6c:	4b0a      	ldr	r3, [pc, #40]	@ (800fa98 <vPortSetupTimerInterrupt+0x3c>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	4a0a      	ldr	r2, [pc, #40]	@ (800fa9c <vPortSetupTimerInterrupt+0x40>)
 800fa72:	fba2 2303 	umull	r2, r3, r2, r3
 800fa76:	099b      	lsrs	r3, r3, #6
 800fa78:	4a09      	ldr	r2, [pc, #36]	@ (800faa0 <vPortSetupTimerInterrupt+0x44>)
 800fa7a:	3b01      	subs	r3, #1
 800fa7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fa7e:	4b04      	ldr	r3, [pc, #16]	@ (800fa90 <vPortSetupTimerInterrupt+0x34>)
 800fa80:	2207      	movs	r2, #7
 800fa82:	601a      	str	r2, [r3, #0]
}
 800fa84:	bf00      	nop
 800fa86:	46bd      	mov	sp, r7
 800fa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8c:	4770      	bx	lr
 800fa8e:	bf00      	nop
 800fa90:	e000e010 	.word	0xe000e010
 800fa94:	e000e018 	.word	0xe000e018
 800fa98:	24000000 	.word	0x24000000
 800fa9c:	10624dd3 	.word	0x10624dd3
 800faa0:	e000e014 	.word	0xe000e014

0800faa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800faa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fab4 <vPortEnableVFP+0x10>
 800faa8:	6801      	ldr	r1, [r0, #0]
 800faaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800faae:	6001      	str	r1, [r0, #0]
 800fab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fab2:	bf00      	nop
 800fab4:	e000ed88 	.word	0xe000ed88

0800fab8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fab8:	b480      	push	{r7}
 800faba:	b085      	sub	sp, #20
 800fabc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fabe:	f3ef 8305 	mrs	r3, IPSR
 800fac2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	2b0f      	cmp	r3, #15
 800fac8:	d915      	bls.n	800faf6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800faca:	4a18      	ldr	r2, [pc, #96]	@ (800fb2c <vPortValidateInterruptPriority+0x74>)
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	4413      	add	r3, r2
 800fad0:	781b      	ldrb	r3, [r3, #0]
 800fad2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fad4:	4b16      	ldr	r3, [pc, #88]	@ (800fb30 <vPortValidateInterruptPriority+0x78>)
 800fad6:	781b      	ldrb	r3, [r3, #0]
 800fad8:	7afa      	ldrb	r2, [r7, #11]
 800fada:	429a      	cmp	r2, r3
 800fadc:	d20b      	bcs.n	800faf6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fae2:	f383 8811 	msr	BASEPRI, r3
 800fae6:	f3bf 8f6f 	isb	sy
 800faea:	f3bf 8f4f 	dsb	sy
 800faee:	607b      	str	r3, [r7, #4]
}
 800faf0:	bf00      	nop
 800faf2:	bf00      	nop
 800faf4:	e7fd      	b.n	800faf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800faf6:	4b0f      	ldr	r3, [pc, #60]	@ (800fb34 <vPortValidateInterruptPriority+0x7c>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fafe:	4b0e      	ldr	r3, [pc, #56]	@ (800fb38 <vPortValidateInterruptPriority+0x80>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	429a      	cmp	r2, r3
 800fb04:	d90b      	bls.n	800fb1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fb06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb0a:	f383 8811 	msr	BASEPRI, r3
 800fb0e:	f3bf 8f6f 	isb	sy
 800fb12:	f3bf 8f4f 	dsb	sy
 800fb16:	603b      	str	r3, [r7, #0]
}
 800fb18:	bf00      	nop
 800fb1a:	bf00      	nop
 800fb1c:	e7fd      	b.n	800fb1a <vPortValidateInterruptPriority+0x62>
	}
 800fb1e:	bf00      	nop
 800fb20:	3714      	adds	r7, #20
 800fb22:	46bd      	mov	sp, r7
 800fb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb28:	4770      	bx	lr
 800fb2a:	bf00      	nop
 800fb2c:	e000e3f0 	.word	0xe000e3f0
 800fb30:	24005d60 	.word	0x24005d60
 800fb34:	e000ed0c 	.word	0xe000ed0c
 800fb38:	24005d64 	.word	0x24005d64

0800fb3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b08a      	sub	sp, #40	@ 0x28
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fb44:	2300      	movs	r3, #0
 800fb46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fb48:	f7fe fc50 	bl	800e3ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fb4c:	4b5c      	ldr	r3, [pc, #368]	@ (800fcc0 <pvPortMalloc+0x184>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d101      	bne.n	800fb58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fb54:	f000 f924 	bl	800fda0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fb58:	4b5a      	ldr	r3, [pc, #360]	@ (800fcc4 <pvPortMalloc+0x188>)
 800fb5a:	681a      	ldr	r2, [r3, #0]
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	4013      	ands	r3, r2
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	f040 8095 	bne.w	800fc90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d01e      	beq.n	800fbaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fb6c:	2208      	movs	r2, #8
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	4413      	add	r3, r2
 800fb72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f003 0307 	and.w	r3, r3, #7
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d015      	beq.n	800fbaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f023 0307 	bic.w	r3, r3, #7
 800fb84:	3308      	adds	r3, #8
 800fb86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f003 0307 	and.w	r3, r3, #7
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d00b      	beq.n	800fbaa <pvPortMalloc+0x6e>
	__asm volatile
 800fb92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb96:	f383 8811 	msr	BASEPRI, r3
 800fb9a:	f3bf 8f6f 	isb	sy
 800fb9e:	f3bf 8f4f 	dsb	sy
 800fba2:	617b      	str	r3, [r7, #20]
}
 800fba4:	bf00      	nop
 800fba6:	bf00      	nop
 800fba8:	e7fd      	b.n	800fba6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d06f      	beq.n	800fc90 <pvPortMalloc+0x154>
 800fbb0:	4b45      	ldr	r3, [pc, #276]	@ (800fcc8 <pvPortMalloc+0x18c>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	687a      	ldr	r2, [r7, #4]
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d86a      	bhi.n	800fc90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fbba:	4b44      	ldr	r3, [pc, #272]	@ (800fccc <pvPortMalloc+0x190>)
 800fbbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fbbe:	4b43      	ldr	r3, [pc, #268]	@ (800fccc <pvPortMalloc+0x190>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fbc4:	e004      	b.n	800fbd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fbc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fbca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fbd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbd2:	685b      	ldr	r3, [r3, #4]
 800fbd4:	687a      	ldr	r2, [r7, #4]
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	d903      	bls.n	800fbe2 <pvPortMalloc+0xa6>
 800fbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d1f1      	bne.n	800fbc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fbe2:	4b37      	ldr	r3, [pc, #220]	@ (800fcc0 <pvPortMalloc+0x184>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d051      	beq.n	800fc90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fbec:	6a3b      	ldr	r3, [r7, #32]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2208      	movs	r2, #8
 800fbf2:	4413      	add	r3, r2
 800fbf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbf8:	681a      	ldr	r2, [r3, #0]
 800fbfa:	6a3b      	ldr	r3, [r7, #32]
 800fbfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc00:	685a      	ldr	r2, [r3, #4]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	1ad2      	subs	r2, r2, r3
 800fc06:	2308      	movs	r3, #8
 800fc08:	005b      	lsls	r3, r3, #1
 800fc0a:	429a      	cmp	r2, r3
 800fc0c:	d920      	bls.n	800fc50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fc0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	4413      	add	r3, r2
 800fc14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc16:	69bb      	ldr	r3, [r7, #24]
 800fc18:	f003 0307 	and.w	r3, r3, #7
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d00b      	beq.n	800fc38 <pvPortMalloc+0xfc>
	__asm volatile
 800fc20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc24:	f383 8811 	msr	BASEPRI, r3
 800fc28:	f3bf 8f6f 	isb	sy
 800fc2c:	f3bf 8f4f 	dsb	sy
 800fc30:	613b      	str	r3, [r7, #16]
}
 800fc32:	bf00      	nop
 800fc34:	bf00      	nop
 800fc36:	e7fd      	b.n	800fc34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc3a:	685a      	ldr	r2, [r3, #4]
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	1ad2      	subs	r2, r2, r3
 800fc40:	69bb      	ldr	r3, [r7, #24]
 800fc42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc46:	687a      	ldr	r2, [r7, #4]
 800fc48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fc4a:	69b8      	ldr	r0, [r7, #24]
 800fc4c:	f000 f90a 	bl	800fe64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fc50:	4b1d      	ldr	r3, [pc, #116]	@ (800fcc8 <pvPortMalloc+0x18c>)
 800fc52:	681a      	ldr	r2, [r3, #0]
 800fc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc56:	685b      	ldr	r3, [r3, #4]
 800fc58:	1ad3      	subs	r3, r2, r3
 800fc5a:	4a1b      	ldr	r2, [pc, #108]	@ (800fcc8 <pvPortMalloc+0x18c>)
 800fc5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fc5e:	4b1a      	ldr	r3, [pc, #104]	@ (800fcc8 <pvPortMalloc+0x18c>)
 800fc60:	681a      	ldr	r2, [r3, #0]
 800fc62:	4b1b      	ldr	r3, [pc, #108]	@ (800fcd0 <pvPortMalloc+0x194>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	429a      	cmp	r2, r3
 800fc68:	d203      	bcs.n	800fc72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fc6a:	4b17      	ldr	r3, [pc, #92]	@ (800fcc8 <pvPortMalloc+0x18c>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	4a18      	ldr	r2, [pc, #96]	@ (800fcd0 <pvPortMalloc+0x194>)
 800fc70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fc72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc74:	685a      	ldr	r2, [r3, #4]
 800fc76:	4b13      	ldr	r3, [pc, #76]	@ (800fcc4 <pvPortMalloc+0x188>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	431a      	orrs	r2, r3
 800fc7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fc80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc82:	2200      	movs	r2, #0
 800fc84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fc86:	4b13      	ldr	r3, [pc, #76]	@ (800fcd4 <pvPortMalloc+0x198>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	3301      	adds	r3, #1
 800fc8c:	4a11      	ldr	r2, [pc, #68]	@ (800fcd4 <pvPortMalloc+0x198>)
 800fc8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fc90:	f7fe fbba 	bl	800e408 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc94:	69fb      	ldr	r3, [r7, #28]
 800fc96:	f003 0307 	and.w	r3, r3, #7
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d00b      	beq.n	800fcb6 <pvPortMalloc+0x17a>
	__asm volatile
 800fc9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fca2:	f383 8811 	msr	BASEPRI, r3
 800fca6:	f3bf 8f6f 	isb	sy
 800fcaa:	f3bf 8f4f 	dsb	sy
 800fcae:	60fb      	str	r3, [r7, #12]
}
 800fcb0:	bf00      	nop
 800fcb2:	bf00      	nop
 800fcb4:	e7fd      	b.n	800fcb2 <pvPortMalloc+0x176>
	return pvReturn;
 800fcb6:	69fb      	ldr	r3, [r7, #28]
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3728      	adds	r7, #40	@ 0x28
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}
 800fcc0:	24009970 	.word	0x24009970
 800fcc4:	24009984 	.word	0x24009984
 800fcc8:	24009974 	.word	0x24009974
 800fccc:	24009968 	.word	0x24009968
 800fcd0:	24009978 	.word	0x24009978
 800fcd4:	2400997c 	.word	0x2400997c

0800fcd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b086      	sub	sp, #24
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d04f      	beq.n	800fd8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fcea:	2308      	movs	r3, #8
 800fcec:	425b      	negs	r3, r3
 800fcee:	697a      	ldr	r2, [r7, #20]
 800fcf0:	4413      	add	r3, r2
 800fcf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	685a      	ldr	r2, [r3, #4]
 800fcfc:	4b25      	ldr	r3, [pc, #148]	@ (800fd94 <vPortFree+0xbc>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	4013      	ands	r3, r2
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d10b      	bne.n	800fd1e <vPortFree+0x46>
	__asm volatile
 800fd06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd0a:	f383 8811 	msr	BASEPRI, r3
 800fd0e:	f3bf 8f6f 	isb	sy
 800fd12:	f3bf 8f4f 	dsb	sy
 800fd16:	60fb      	str	r3, [r7, #12]
}
 800fd18:	bf00      	nop
 800fd1a:	bf00      	nop
 800fd1c:	e7fd      	b.n	800fd1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fd1e:	693b      	ldr	r3, [r7, #16]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d00b      	beq.n	800fd3e <vPortFree+0x66>
	__asm volatile
 800fd26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd2a:	f383 8811 	msr	BASEPRI, r3
 800fd2e:	f3bf 8f6f 	isb	sy
 800fd32:	f3bf 8f4f 	dsb	sy
 800fd36:	60bb      	str	r3, [r7, #8]
}
 800fd38:	bf00      	nop
 800fd3a:	bf00      	nop
 800fd3c:	e7fd      	b.n	800fd3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fd3e:	693b      	ldr	r3, [r7, #16]
 800fd40:	685a      	ldr	r2, [r3, #4]
 800fd42:	4b14      	ldr	r3, [pc, #80]	@ (800fd94 <vPortFree+0xbc>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	4013      	ands	r3, r2
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d01e      	beq.n	800fd8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fd4c:	693b      	ldr	r3, [r7, #16]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d11a      	bne.n	800fd8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	685a      	ldr	r2, [r3, #4]
 800fd58:	4b0e      	ldr	r3, [pc, #56]	@ (800fd94 <vPortFree+0xbc>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	43db      	mvns	r3, r3
 800fd5e:	401a      	ands	r2, r3
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fd64:	f7fe fb42 	bl	800e3ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	685a      	ldr	r2, [r3, #4]
 800fd6c:	4b0a      	ldr	r3, [pc, #40]	@ (800fd98 <vPortFree+0xc0>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	4413      	add	r3, r2
 800fd72:	4a09      	ldr	r2, [pc, #36]	@ (800fd98 <vPortFree+0xc0>)
 800fd74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fd76:	6938      	ldr	r0, [r7, #16]
 800fd78:	f000 f874 	bl	800fe64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fd7c:	4b07      	ldr	r3, [pc, #28]	@ (800fd9c <vPortFree+0xc4>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	3301      	adds	r3, #1
 800fd82:	4a06      	ldr	r2, [pc, #24]	@ (800fd9c <vPortFree+0xc4>)
 800fd84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fd86:	f7fe fb3f 	bl	800e408 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fd8a:	bf00      	nop
 800fd8c:	3718      	adds	r7, #24
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}
 800fd92:	bf00      	nop
 800fd94:	24009984 	.word	0x24009984
 800fd98:	24009974 	.word	0x24009974
 800fd9c:	24009980 	.word	0x24009980

0800fda0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fda0:	b480      	push	{r7}
 800fda2:	b085      	sub	sp, #20
 800fda4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fda6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800fdaa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fdac:	4b27      	ldr	r3, [pc, #156]	@ (800fe4c <prvHeapInit+0xac>)
 800fdae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	f003 0307 	and.w	r3, r3, #7
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d00c      	beq.n	800fdd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	3307      	adds	r3, #7
 800fdbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	f023 0307 	bic.w	r3, r3, #7
 800fdc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fdc8:	68ba      	ldr	r2, [r7, #8]
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	1ad3      	subs	r3, r2, r3
 800fdce:	4a1f      	ldr	r2, [pc, #124]	@ (800fe4c <prvHeapInit+0xac>)
 800fdd0:	4413      	add	r3, r2
 800fdd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fdd8:	4a1d      	ldr	r2, [pc, #116]	@ (800fe50 <prvHeapInit+0xb0>)
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fdde:	4b1c      	ldr	r3, [pc, #112]	@ (800fe50 <prvHeapInit+0xb0>)
 800fde0:	2200      	movs	r2, #0
 800fde2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	68ba      	ldr	r2, [r7, #8]
 800fde8:	4413      	add	r3, r2
 800fdea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fdec:	2208      	movs	r2, #8
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	1a9b      	subs	r3, r3, r2
 800fdf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	f023 0307 	bic.w	r3, r3, #7
 800fdfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	4a15      	ldr	r2, [pc, #84]	@ (800fe54 <prvHeapInit+0xb4>)
 800fe00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fe02:	4b14      	ldr	r3, [pc, #80]	@ (800fe54 <prvHeapInit+0xb4>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	2200      	movs	r2, #0
 800fe08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fe0a:	4b12      	ldr	r3, [pc, #72]	@ (800fe54 <prvHeapInit+0xb4>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	68fa      	ldr	r2, [r7, #12]
 800fe1a:	1ad2      	subs	r2, r2, r3
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fe20:	4b0c      	ldr	r3, [pc, #48]	@ (800fe54 <prvHeapInit+0xb4>)
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	685b      	ldr	r3, [r3, #4]
 800fe2c:	4a0a      	ldr	r2, [pc, #40]	@ (800fe58 <prvHeapInit+0xb8>)
 800fe2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	685b      	ldr	r3, [r3, #4]
 800fe34:	4a09      	ldr	r2, [pc, #36]	@ (800fe5c <prvHeapInit+0xbc>)
 800fe36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fe38:	4b09      	ldr	r3, [pc, #36]	@ (800fe60 <prvHeapInit+0xc0>)
 800fe3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800fe3e:	601a      	str	r2, [r3, #0]
}
 800fe40:	bf00      	nop
 800fe42:	3714      	adds	r7, #20
 800fe44:	46bd      	mov	sp, r7
 800fe46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4a:	4770      	bx	lr
 800fe4c:	24005d68 	.word	0x24005d68
 800fe50:	24009968 	.word	0x24009968
 800fe54:	24009970 	.word	0x24009970
 800fe58:	24009978 	.word	0x24009978
 800fe5c:	24009974 	.word	0x24009974
 800fe60:	24009984 	.word	0x24009984

0800fe64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fe64:	b480      	push	{r7}
 800fe66:	b085      	sub	sp, #20
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fe6c:	4b28      	ldr	r3, [pc, #160]	@ (800ff10 <prvInsertBlockIntoFreeList+0xac>)
 800fe6e:	60fb      	str	r3, [r7, #12]
 800fe70:	e002      	b.n	800fe78 <prvInsertBlockIntoFreeList+0x14>
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	60fb      	str	r3, [r7, #12]
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	687a      	ldr	r2, [r7, #4]
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d8f7      	bhi.n	800fe72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	685b      	ldr	r3, [r3, #4]
 800fe8a:	68ba      	ldr	r2, [r7, #8]
 800fe8c:	4413      	add	r3, r2
 800fe8e:	687a      	ldr	r2, [r7, #4]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d108      	bne.n	800fea6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	685a      	ldr	r2, [r3, #4]
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	685b      	ldr	r3, [r3, #4]
 800fe9c:	441a      	add	r2, r3
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	68ba      	ldr	r2, [r7, #8]
 800feb0:	441a      	add	r2, r3
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	429a      	cmp	r2, r3
 800feb8:	d118      	bne.n	800feec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	681a      	ldr	r2, [r3, #0]
 800febe:	4b15      	ldr	r3, [pc, #84]	@ (800ff14 <prvInsertBlockIntoFreeList+0xb0>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	429a      	cmp	r2, r3
 800fec4:	d00d      	beq.n	800fee2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	685a      	ldr	r2, [r3, #4]
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	441a      	add	r2, r3
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	681a      	ldr	r2, [r3, #0]
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	601a      	str	r2, [r3, #0]
 800fee0:	e008      	b.n	800fef4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fee2:	4b0c      	ldr	r3, [pc, #48]	@ (800ff14 <prvInsertBlockIntoFreeList+0xb0>)
 800fee4:	681a      	ldr	r2, [r3, #0]
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	601a      	str	r2, [r3, #0]
 800feea:	e003      	b.n	800fef4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fef4:	68fa      	ldr	r2, [r7, #12]
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	429a      	cmp	r2, r3
 800fefa:	d002      	beq.n	800ff02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	687a      	ldr	r2, [r7, #4]
 800ff00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff02:	bf00      	nop
 800ff04:	3714      	adds	r7, #20
 800ff06:	46bd      	mov	sp, r7
 800ff08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0c:	4770      	bx	lr
 800ff0e:	bf00      	nop
 800ff10:	24009968 	.word	0x24009968
 800ff14:	24009970 	.word	0x24009970

0800ff18 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b084      	sub	sp, #16
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
 800ff20:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	330c      	adds	r3, #12
 800ff28:	461a      	mov	r2, r3
 800ff2a:	6839      	ldr	r1, [r7, #0]
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f002 fc85 	bl	801283c <tcpip_send_msg_wait_sem>
 800ff32:	4603      	mov	r3, r0
 800ff34:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ff36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d103      	bne.n	800ff46 <netconn_apimsg+0x2e>
    return apimsg->err;
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ff44:	e001      	b.n	800ff4a <netconn_apimsg+0x32>
  }
  return err;
 800ff46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3710      	adds	r7, #16
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}
	...

0800ff54 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b08c      	sub	sp, #48	@ 0x30
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	603a      	str	r2, [r7, #0]
 800ff5e:	71fb      	strb	r3, [r7, #7]
 800ff60:	460b      	mov	r3, r1
 800ff62:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800ff64:	79fb      	ldrb	r3, [r7, #7]
 800ff66:	6839      	ldr	r1, [r7, #0]
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f000 fdd5 	bl	8010b18 <netconn_alloc>
 800ff6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800ff70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d054      	beq.n	8010020 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800ff76:	79bb      	ldrb	r3, [r7, #6]
 800ff78:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800ff7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff7c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800ff7e:	f107 0308 	add.w	r3, r7, #8
 800ff82:	4619      	mov	r1, r3
 800ff84:	4829      	ldr	r0, [pc, #164]	@ (801002c <netconn_new_with_proto_and_callback+0xd8>)
 800ff86:	f7ff ffc7 	bl	800ff18 <netconn_apimsg>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800ff90:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d043      	beq.n	8010020 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800ff98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff9a:	685b      	ldr	r3, [r3, #4]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d005      	beq.n	800ffac <netconn_new_with_proto_and_callback+0x58>
 800ffa0:	4b23      	ldr	r3, [pc, #140]	@ (8010030 <netconn_new_with_proto_and_callback+0xdc>)
 800ffa2:	22a3      	movs	r2, #163	@ 0xa3
 800ffa4:	4923      	ldr	r1, [pc, #140]	@ (8010034 <netconn_new_with_proto_and_callback+0xe0>)
 800ffa6:	4824      	ldr	r0, [pc, #144]	@ (8010038 <netconn_new_with_proto_and_callback+0xe4>)
 800ffa8:	f010 fcec 	bl	8020984 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800ffac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffae:	3310      	adds	r3, #16
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f00f fe89 	bl	801fcc8 <sys_mbox_valid>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d105      	bne.n	800ffc8 <netconn_new_with_proto_and_callback+0x74>
 800ffbc:	4b1c      	ldr	r3, [pc, #112]	@ (8010030 <netconn_new_with_proto_and_callback+0xdc>)
 800ffbe:	22a4      	movs	r2, #164	@ 0xa4
 800ffc0:	491e      	ldr	r1, [pc, #120]	@ (801003c <netconn_new_with_proto_and_callback+0xe8>)
 800ffc2:	481d      	ldr	r0, [pc, #116]	@ (8010038 <netconn_new_with_proto_and_callback+0xe4>)
 800ffc4:	f010 fcde 	bl	8020984 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800ffc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffca:	3314      	adds	r3, #20
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f00f fe7b 	bl	801fcc8 <sys_mbox_valid>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d005      	beq.n	800ffe4 <netconn_new_with_proto_and_callback+0x90>
 800ffd8:	4b15      	ldr	r3, [pc, #84]	@ (8010030 <netconn_new_with_proto_and_callback+0xdc>)
 800ffda:	22a6      	movs	r2, #166	@ 0xa6
 800ffdc:	4918      	ldr	r1, [pc, #96]	@ (8010040 <netconn_new_with_proto_and_callback+0xec>)
 800ffde:	4816      	ldr	r0, [pc, #88]	@ (8010038 <netconn_new_with_proto_and_callback+0xe4>)
 800ffe0:	f010 fcd0 	bl	8020984 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800ffe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffe6:	330c      	adds	r3, #12
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f00f fefb 	bl	801fde4 <sys_sem_valid>
 800ffee:	4603      	mov	r3, r0
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d105      	bne.n	8010000 <netconn_new_with_proto_and_callback+0xac>
 800fff4:	4b0e      	ldr	r3, [pc, #56]	@ (8010030 <netconn_new_with_proto_and_callback+0xdc>)
 800fff6:	22a9      	movs	r2, #169	@ 0xa9
 800fff8:	4912      	ldr	r1, [pc, #72]	@ (8010044 <netconn_new_with_proto_and_callback+0xf0>)
 800fffa:	480f      	ldr	r0, [pc, #60]	@ (8010038 <netconn_new_with_proto_and_callback+0xe4>)
 800fffc:	f010 fcc2 	bl	8020984 <iprintf>
      sys_sem_free(&conn->op_completed);
 8010000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010002:	330c      	adds	r3, #12
 8010004:	4618      	mov	r0, r3
 8010006:	f00f fee0 	bl	801fdca <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 801000a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801000c:	3310      	adds	r3, #16
 801000e:	4618      	mov	r0, r3
 8010010:	f00f fde6 	bl	801fbe0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8010014:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010016:	2007      	movs	r0, #7
 8010018:	f003 fa76 	bl	8013508 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 801001c:	2300      	movs	r3, #0
 801001e:	e000      	b.n	8010022 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8010020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8010022:	4618      	mov	r0, r3
 8010024:	3730      	adds	r7, #48	@ 0x30
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
 801002a:	bf00      	nop
 801002c:	08010aed 	.word	0x08010aed
 8010030:	08022f94 	.word	0x08022f94
 8010034:	08022fc8 	.word	0x08022fc8
 8010038:	08022fec 	.word	0x08022fec
 801003c:	08023014 	.word	0x08023014
 8010040:	0802302c 	.word	0x0802302c
 8010044:	08023050 	.word	0x08023050

08010048 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b08c      	sub	sp, #48	@ 0x30
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d101      	bne.n	801005a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8010056:	2300      	movs	r3, #0
 8010058:	e014      	b.n	8010084 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801005e:	2329      	movs	r3, #41	@ 0x29
 8010060:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8010062:	f107 030c 	add.w	r3, r7, #12
 8010066:	4619      	mov	r1, r3
 8010068:	4808      	ldr	r0, [pc, #32]	@ (801008c <netconn_prepare_delete+0x44>)
 801006a:	f7ff ff55 	bl	800ff18 <netconn_apimsg>
 801006e:	4603      	mov	r3, r0
 8010070:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8010074:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010078:	2b00      	cmp	r3, #0
 801007a:	d002      	beq.n	8010082 <netconn_prepare_delete+0x3a>
    return err;
 801007c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010080:	e000      	b.n	8010084 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8010082:	2300      	movs	r3, #0
}
 8010084:	4618      	mov	r0, r3
 8010086:	3730      	adds	r7, #48	@ 0x30
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}
 801008c:	08011059 	.word	0x08011059

08010090 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b084      	sub	sp, #16
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d101      	bne.n	80100a2 <netconn_delete+0x12>
    return ERR_OK;
 801009e:	2300      	movs	r3, #0
 80100a0:	e00d      	b.n	80100be <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f7ff ffd0 	bl	8010048 <netconn_prepare_delete>
 80100a8:	4603      	mov	r3, r0
 80100aa:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80100ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d102      	bne.n	80100ba <netconn_delete+0x2a>
    netconn_free(conn);
 80100b4:	6878      	ldr	r0, [r7, #4]
 80100b6:	f000 fd9d 	bl	8010bf4 <netconn_free>
  }
  return err;
 80100ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80100be:	4618      	mov	r0, r3
 80100c0:	3710      	adds	r7, #16
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}
	...

080100c8 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b08e      	sub	sp, #56	@ 0x38
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	60f8      	str	r0, [r7, #12]
 80100d0:	60b9      	str	r1, [r7, #8]
 80100d2:	4613      	mov	r3, r2
 80100d4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d109      	bne.n	80100f0 <netconn_connect+0x28>
 80100dc:	4b11      	ldr	r3, [pc, #68]	@ (8010124 <netconn_connect+0x5c>)
 80100de:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 80100e2:	4911      	ldr	r1, [pc, #68]	@ (8010128 <netconn_connect+0x60>)
 80100e4:	4811      	ldr	r0, [pc, #68]	@ (801012c <netconn_connect+0x64>)
 80100e6:	f010 fc4d 	bl	8020984 <iprintf>
 80100ea:	f06f 030f 	mvn.w	r3, #15
 80100ee:	e015      	b.n	801011c <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d101      	bne.n	80100fa <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 80100f6:	4b0e      	ldr	r3, [pc, #56]	@ (8010130 <netconn_connect+0x68>)
 80100f8:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80100fe:	68bb      	ldr	r3, [r7, #8]
 8010100:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8010102:	88fb      	ldrh	r3, [r7, #6]
 8010104:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8010106:	f107 0314 	add.w	r3, r7, #20
 801010a:	4619      	mov	r1, r3
 801010c:	4809      	ldr	r0, [pc, #36]	@ (8010134 <netconn_connect+0x6c>)
 801010e:	f7ff ff03 	bl	800ff18 <netconn_apimsg>
 8010112:	4603      	mov	r3, r0
 8010114:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8010118:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 801011c:	4618      	mov	r0, r3
 801011e:	3738      	adds	r7, #56	@ 0x38
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}
 8010124:	08022f94 	.word	0x08022f94
 8010128:	08023108 	.word	0x08023108
 801012c:	08022fec 	.word	0x08022fec
 8010130:	08026e5c 	.word	0x08026e5c
 8010134:	08011341 	.word	0x08011341

08010138 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b08c      	sub	sp, #48	@ 0x30
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d109      	bne.n	801015a <netconn_disconnect+0x22>
 8010146:	4b0d      	ldr	r3, [pc, #52]	@ (801017c <netconn_disconnect+0x44>)
 8010148:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801014c:	490c      	ldr	r1, [pc, #48]	@ (8010180 <netconn_disconnect+0x48>)
 801014e:	480d      	ldr	r0, [pc, #52]	@ (8010184 <netconn_disconnect+0x4c>)
 8010150:	f010 fc18 	bl	8020984 <iprintf>
 8010154:	f06f 030f 	mvn.w	r3, #15
 8010158:	e00c      	b.n	8010174 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 801015e:	f107 030c 	add.w	r3, r7, #12
 8010162:	4619      	mov	r1, r3
 8010164:	4808      	ldr	r0, [pc, #32]	@ (8010188 <netconn_disconnect+0x50>)
 8010166:	f7ff fed7 	bl	800ff18 <netconn_apimsg>
 801016a:	4603      	mov	r3, r0
 801016c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8010170:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8010174:	4618      	mov	r0, r3
 8010176:	3730      	adds	r7, #48	@ 0x30
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}
 801017c:	08022f94 	.word	0x08022f94
 8010180:	08023128 	.word	0x08023128
 8010184:	08022fec 	.word	0x08022fec
 8010188:	080114bd 	.word	0x080114bd

0801018c <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b08c      	sub	sp, #48	@ 0x30
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d109      	bne.n	80101b0 <netconn_send+0x24>
 801019c:	4b0e      	ldr	r3, [pc, #56]	@ (80101d8 <netconn_send+0x4c>)
 801019e:	f240 32b2 	movw	r2, #946	@ 0x3b2
 80101a2:	490e      	ldr	r1, [pc, #56]	@ (80101dc <netconn_send+0x50>)
 80101a4:	480e      	ldr	r0, [pc, #56]	@ (80101e0 <netconn_send+0x54>)
 80101a6:	f010 fbed 	bl	8020984 <iprintf>
 80101aa:	f06f 030f 	mvn.w	r3, #15
 80101ae:	e00e      	b.n	80101ce <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 80101b4:	683b      	ldr	r3, [r7, #0]
 80101b6:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 80101b8:	f107 030c 	add.w	r3, r7, #12
 80101bc:	4619      	mov	r1, r3
 80101be:	4809      	ldr	r0, [pc, #36]	@ (80101e4 <netconn_send+0x58>)
 80101c0:	f7ff feaa 	bl	800ff18 <netconn_apimsg>
 80101c4:	4603      	mov	r3, r0
 80101c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80101ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	3730      	adds	r7, #48	@ 0x30
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}
 80101d6:	bf00      	nop
 80101d8:	08022f94 	.word	0x08022f94
 80101dc:	08023250 	.word	0x08023250
 80101e0:	08022fec 	.word	0x08022fec
 80101e4:	080114f9 	.word	0x080114f9

080101e8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b088      	sub	sp, #32
 80101ec:	af02      	add	r7, sp, #8
 80101ee:	60f8      	str	r0, [r7, #12]
 80101f0:	60b9      	str	r1, [r7, #8]
 80101f2:	607a      	str	r2, [r7, #4]
 80101f4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80101fe:	78fa      	ldrb	r2, [r7, #3]
 8010200:	f107 0110 	add.w	r1, r7, #16
 8010204:	6a3b      	ldr	r3, [r7, #32]
 8010206:	9300      	str	r3, [sp, #0]
 8010208:	4613      	mov	r3, r2
 801020a:	2201      	movs	r2, #1
 801020c:	68f8      	ldr	r0, [r7, #12]
 801020e:	f000 f805 	bl	801021c <netconn_write_vectors_partly>
 8010212:	4603      	mov	r3, r0
}
 8010214:	4618      	mov	r0, r3
 8010216:	3718      	adds	r7, #24
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}

0801021c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b092      	sub	sp, #72	@ 0x48
 8010220:	af00      	add	r7, sp, #0
 8010222:	60f8      	str	r0, [r7, #12]
 8010224:	60b9      	str	r1, [r7, #8]
 8010226:	4611      	mov	r1, r2
 8010228:	461a      	mov	r2, r3
 801022a:	460b      	mov	r3, r1
 801022c:	80fb      	strh	r3, [r7, #6]
 801022e:	4613      	mov	r3, r2
 8010230:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d109      	bne.n	801024c <netconn_write_vectors_partly+0x30>
 8010238:	4b4e      	ldr	r3, [pc, #312]	@ (8010374 <netconn_write_vectors_partly+0x158>)
 801023a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801023e:	494e      	ldr	r1, [pc, #312]	@ (8010378 <netconn_write_vectors_partly+0x15c>)
 8010240:	484e      	ldr	r0, [pc, #312]	@ (801037c <netconn_write_vectors_partly+0x160>)
 8010242:	f010 fb9f 	bl	8020984 <iprintf>
 8010246:	f06f 030f 	mvn.w	r3, #15
 801024a:	e08e      	b.n	801036a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	781b      	ldrb	r3, [r3, #0]
 8010250:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010254:	2b10      	cmp	r3, #16
 8010256:	d009      	beq.n	801026c <netconn_write_vectors_partly+0x50>
 8010258:	4b46      	ldr	r3, [pc, #280]	@ (8010374 <netconn_write_vectors_partly+0x158>)
 801025a:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 801025e:	4948      	ldr	r1, [pc, #288]	@ (8010380 <netconn_write_vectors_partly+0x164>)
 8010260:	4846      	ldr	r0, [pc, #280]	@ (801037c <netconn_write_vectors_partly+0x160>)
 8010262:	f010 fb8f 	bl	8020984 <iprintf>
 8010266:	f06f 0305 	mvn.w	r3, #5
 801026a:	e07e      	b.n	801036a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	7f1b      	ldrb	r3, [r3, #28]
 8010270:	f003 0302 	and.w	r3, r3, #2
 8010274:	2b00      	cmp	r3, #0
 8010276:	d104      	bne.n	8010282 <netconn_write_vectors_partly+0x66>
 8010278:	797b      	ldrb	r3, [r7, #5]
 801027a:	f003 0304 	and.w	r3, r3, #4
 801027e:	2b00      	cmp	r3, #0
 8010280:	d001      	beq.n	8010286 <netconn_write_vectors_partly+0x6a>
 8010282:	2301      	movs	r3, #1
 8010284:	e000      	b.n	8010288 <netconn_write_vectors_partly+0x6c>
 8010286:	2300      	movs	r3, #0
 8010288:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 801028c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010290:	2b00      	cmp	r3, #0
 8010292:	d005      	beq.n	80102a0 <netconn_write_vectors_partly+0x84>
 8010294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010296:	2b00      	cmp	r3, #0
 8010298:	d102      	bne.n	80102a0 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 801029a:	f06f 0305 	mvn.w	r3, #5
 801029e:	e064      	b.n	801036a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 80102a0:	2300      	movs	r3, #0
 80102a2:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 80102a4:	2300      	movs	r3, #0
 80102a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80102a8:	e015      	b.n	80102d6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 80102aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80102ac:	00db      	lsls	r3, r3, #3
 80102ae:	68ba      	ldr	r2, [r7, #8]
 80102b0:	4413      	add	r3, r2
 80102b2:	685b      	ldr	r3, [r3, #4]
 80102b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80102b6:	4413      	add	r3, r2
 80102b8:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 80102ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80102bc:	00db      	lsls	r3, r3, #3
 80102be:	68ba      	ldr	r2, [r7, #8]
 80102c0:	4413      	add	r3, r2
 80102c2:	685b      	ldr	r3, [r3, #4]
 80102c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d202      	bcs.n	80102d0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 80102ca:	f06f 0305 	mvn.w	r3, #5
 80102ce:	e04c      	b.n	801036a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 80102d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80102d2:	3301      	adds	r3, #1
 80102d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80102d6:	88fb      	ldrh	r3, [r7, #6]
 80102d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80102da:	429a      	cmp	r2, r3
 80102dc:	dbe5      	blt.n	80102aa <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 80102de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d101      	bne.n	80102e8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80102e4:	2300      	movs	r3, #0
 80102e6:	e040      	b.n	801036a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 80102e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	da0a      	bge.n	8010304 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80102ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d102      	bne.n	80102fa <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80102f4:	f06f 0305 	mvn.w	r3, #5
 80102f8:	e037      	b.n	801036a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80102fa:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80102fe:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8010300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010302:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 801030c:	88fb      	ldrh	r3, [r7, #6]
 801030e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8010310:	2300      	movs	r3, #0
 8010312:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8010314:	797b      	ldrb	r3, [r7, #5]
 8010316:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 801031a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801031c:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 801031e:	2300      	movs	r3, #0
 8010320:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8010322:	f107 0314 	add.w	r3, r7, #20
 8010326:	4619      	mov	r1, r3
 8010328:	4816      	ldr	r0, [pc, #88]	@ (8010384 <netconn_write_vectors_partly+0x168>)
 801032a:	f7ff fdf5 	bl	800ff18 <netconn_apimsg>
 801032e:	4603      	mov	r3, r0
 8010330:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 8010334:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8010338:	2b00      	cmp	r3, #0
 801033a:	d114      	bne.n	8010366 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 801033c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801033e:	2b00      	cmp	r3, #0
 8010340:	d002      	beq.n	8010348 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8010342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010346:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8010348:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801034c:	2b00      	cmp	r3, #0
 801034e:	d10a      	bne.n	8010366 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8010350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010352:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010354:	429a      	cmp	r2, r3
 8010356:	d006      	beq.n	8010366 <netconn_write_vectors_partly+0x14a>
 8010358:	4b06      	ldr	r3, [pc, #24]	@ (8010374 <netconn_write_vectors_partly+0x158>)
 801035a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801035e:	490a      	ldr	r1, [pc, #40]	@ (8010388 <netconn_write_vectors_partly+0x16c>)
 8010360:	4806      	ldr	r0, [pc, #24]	@ (801037c <netconn_write_vectors_partly+0x160>)
 8010362:	f010 fb0f 	bl	8020984 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8010366:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 801036a:	4618      	mov	r0, r3
 801036c:	3748      	adds	r7, #72	@ 0x48
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}
 8010372:	bf00      	nop
 8010374:	08022f94 	.word	0x08022f94
 8010378:	0802326c 	.word	0x0802326c
 801037c:	08022fec 	.word	0x08022fec
 8010380:	08023288 	.word	0x08023288
 8010384:	0801192d 	.word	0x0801192d
 8010388:	080232ac 	.word	0x080232ac

0801038c <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b084      	sub	sp, #16
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d101      	bne.n	801039e <netconn_err+0x12>
    return ERR_OK;
 801039a:	2300      	movs	r3, #0
 801039c:	e00d      	b.n	80103ba <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 801039e:	f00f fd9d 	bl	801fedc <sys_arch_protect>
 80103a2:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	7a1b      	ldrb	r3, [r3, #8]
 80103a8:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2200      	movs	r2, #0
 80103ae:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80103b0:	68f8      	ldr	r0, [r7, #12]
 80103b2:	f00f fda1 	bl	801fef8 <sys_arch_unprotect>
  return err;
 80103b6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80103ba:	4618      	mov	r0, r3
 80103bc:	3710      	adds	r7, #16
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}
	...

080103c4 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b082      	sub	sp, #8
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	4603      	mov	r3, r0
 80103cc:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80103ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103d2:	f113 0f0d 	cmn.w	r3, #13
 80103d6:	d009      	beq.n	80103ec <lwip_netconn_err_to_msg+0x28>
 80103d8:	f113 0f0d 	cmn.w	r3, #13
 80103dc:	dc0c      	bgt.n	80103f8 <lwip_netconn_err_to_msg+0x34>
 80103de:	f113 0f0f 	cmn.w	r3, #15
 80103e2:	d007      	beq.n	80103f4 <lwip_netconn_err_to_msg+0x30>
 80103e4:	f113 0f0e 	cmn.w	r3, #14
 80103e8:	d002      	beq.n	80103f0 <lwip_netconn_err_to_msg+0x2c>
 80103ea:	e005      	b.n	80103f8 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80103ec:	4b0a      	ldr	r3, [pc, #40]	@ (8010418 <lwip_netconn_err_to_msg+0x54>)
 80103ee:	e00e      	b.n	801040e <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80103f0:	4b0a      	ldr	r3, [pc, #40]	@ (801041c <lwip_netconn_err_to_msg+0x58>)
 80103f2:	e00c      	b.n	801040e <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80103f4:	4b0a      	ldr	r3, [pc, #40]	@ (8010420 <lwip_netconn_err_to_msg+0x5c>)
 80103f6:	e00a      	b.n	801040e <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80103f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d005      	beq.n	801040c <lwip_netconn_err_to_msg+0x48>
 8010400:	4b08      	ldr	r3, [pc, #32]	@ (8010424 <lwip_netconn_err_to_msg+0x60>)
 8010402:	227d      	movs	r2, #125	@ 0x7d
 8010404:	4908      	ldr	r1, [pc, #32]	@ (8010428 <lwip_netconn_err_to_msg+0x64>)
 8010406:	4809      	ldr	r0, [pc, #36]	@ (801042c <lwip_netconn_err_to_msg+0x68>)
 8010408:	f010 fabc 	bl	8020984 <iprintf>
      return NULL;
 801040c:	2300      	movs	r3, #0
  }
}
 801040e:	4618      	mov	r0, r3
 8010410:	3708      	adds	r7, #8
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}
 8010416:	bf00      	nop
 8010418:	08026cf4 	.word	0x08026cf4
 801041c:	08026cf5 	.word	0x08026cf5
 8010420:	08026cf6 	.word	0x08026cf6
 8010424:	080232ec 	.word	0x080232ec
 8010428:	08023320 	.word	0x08023320
 801042c:	08023330 	.word	0x08023330

08010430 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b082      	sub	sp, #8
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
 8010438:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d105      	bne.n	801044c <lwip_netconn_is_err_msg+0x1c>
 8010440:	4b12      	ldr	r3, [pc, #72]	@ (801048c <lwip_netconn_is_err_msg+0x5c>)
 8010442:	2285      	movs	r2, #133	@ 0x85
 8010444:	4912      	ldr	r1, [pc, #72]	@ (8010490 <lwip_netconn_is_err_msg+0x60>)
 8010446:	4813      	ldr	r0, [pc, #76]	@ (8010494 <lwip_netconn_is_err_msg+0x64>)
 8010448:	f010 fa9c 	bl	8020984 <iprintf>

  if (msg == &netconn_aborted) {
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	4a12      	ldr	r2, [pc, #72]	@ (8010498 <lwip_netconn_is_err_msg+0x68>)
 8010450:	4293      	cmp	r3, r2
 8010452:	d104      	bne.n	801045e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	22f3      	movs	r2, #243	@ 0xf3
 8010458:	701a      	strb	r2, [r3, #0]
    return 1;
 801045a:	2301      	movs	r3, #1
 801045c:	e012      	b.n	8010484 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	4a0e      	ldr	r2, [pc, #56]	@ (801049c <lwip_netconn_is_err_msg+0x6c>)
 8010462:	4293      	cmp	r3, r2
 8010464:	d104      	bne.n	8010470 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	22f2      	movs	r2, #242	@ 0xf2
 801046a:	701a      	strb	r2, [r3, #0]
    return 1;
 801046c:	2301      	movs	r3, #1
 801046e:	e009      	b.n	8010484 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	4a0b      	ldr	r2, [pc, #44]	@ (80104a0 <lwip_netconn_is_err_msg+0x70>)
 8010474:	4293      	cmp	r3, r2
 8010476:	d104      	bne.n	8010482 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	22f1      	movs	r2, #241	@ 0xf1
 801047c:	701a      	strb	r2, [r3, #0]
    return 1;
 801047e:	2301      	movs	r3, #1
 8010480:	e000      	b.n	8010484 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8010482:	2300      	movs	r3, #0
}
 8010484:	4618      	mov	r0, r3
 8010486:	3708      	adds	r7, #8
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}
 801048c:	080232ec 	.word	0x080232ec
 8010490:	08023358 	.word	0x08023358
 8010494:	08023330 	.word	0x08023330
 8010498:	08026cf4 	.word	0x08026cf4
 801049c:	08026cf5 	.word	0x08026cf5
 80104a0:	08026cf6 	.word	0x08026cf6

080104a4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b088      	sub	sp, #32
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	60f8      	str	r0, [r7, #12]
 80104ac:	60b9      	str	r1, [r7, #8]
 80104ae:	607a      	str	r2, [r7, #4]
 80104b0:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d105      	bne.n	80104c4 <recv_udp+0x20>
 80104b8:	4b34      	ldr	r3, [pc, #208]	@ (801058c <recv_udp+0xe8>)
 80104ba:	22e5      	movs	r2, #229	@ 0xe5
 80104bc:	4934      	ldr	r1, [pc, #208]	@ (8010590 <recv_udp+0xec>)
 80104be:	4835      	ldr	r0, [pc, #212]	@ (8010594 <recv_udp+0xf0>)
 80104c0:	f010 fa60 	bl	8020984 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d105      	bne.n	80104d6 <recv_udp+0x32>
 80104ca:	4b30      	ldr	r3, [pc, #192]	@ (801058c <recv_udp+0xe8>)
 80104cc:	22e6      	movs	r2, #230	@ 0xe6
 80104ce:	4932      	ldr	r1, [pc, #200]	@ (8010598 <recv_udp+0xf4>)
 80104d0:	4830      	ldr	r0, [pc, #192]	@ (8010594 <recv_udp+0xf0>)
 80104d2:	f010 fa57 	bl	8020984 <iprintf>
  conn = (struct netconn *)arg;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80104da:	69fb      	ldr	r3, [r7, #28]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d103      	bne.n	80104e8 <recv_udp+0x44>
    pbuf_free(p);
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f003 fec1 	bl	8014268 <pbuf_free>
    return;
 80104e6:	e04d      	b.n	8010584 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80104e8:	69fb      	ldr	r3, [r7, #28]
 80104ea:	685b      	ldr	r3, [r3, #4]
 80104ec:	68ba      	ldr	r2, [r7, #8]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d005      	beq.n	80104fe <recv_udp+0x5a>
 80104f2:	4b26      	ldr	r3, [pc, #152]	@ (801058c <recv_udp+0xe8>)
 80104f4:	22ee      	movs	r2, #238	@ 0xee
 80104f6:	4929      	ldr	r1, [pc, #164]	@ (801059c <recv_udp+0xf8>)
 80104f8:	4826      	ldr	r0, [pc, #152]	@ (8010594 <recv_udp+0xf0>)
 80104fa:	f010 fa43 	bl	8020984 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80104fe:	69fb      	ldr	r3, [r7, #28]
 8010500:	3310      	adds	r3, #16
 8010502:	4618      	mov	r0, r3
 8010504:	f00f fbe0 	bl	801fcc8 <sys_mbox_valid>
 8010508:	4603      	mov	r3, r0
 801050a:	2b00      	cmp	r3, #0
 801050c:	d103      	bne.n	8010516 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f003 feaa 	bl	8014268 <pbuf_free>
    return;
 8010514:	e036      	b.n	8010584 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8010516:	2006      	movs	r0, #6
 8010518:	f002 ff80 	bl	801341c <memp_malloc>
 801051c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 801051e:	69bb      	ldr	r3, [r7, #24]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d103      	bne.n	801052c <recv_udp+0x88>
    pbuf_free(p);
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f003 fe9f 	bl	8014268 <pbuf_free>
    return;
 801052a:	e02b      	b.n	8010584 <recv_udp+0xe0>
  } else {
    buf->p = p;
 801052c:	69bb      	ldr	r3, [r7, #24]
 801052e:	687a      	ldr	r2, [r7, #4]
 8010530:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8010532:	69bb      	ldr	r3, [r7, #24]
 8010534:	687a      	ldr	r2, [r7, #4]
 8010536:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d002      	beq.n	8010544 <recv_udp+0xa0>
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	e000      	b.n	8010546 <recv_udp+0xa2>
 8010544:	2300      	movs	r3, #0
 8010546:	69ba      	ldr	r2, [r7, #24]
 8010548:	6093      	str	r3, [r2, #8]
    buf->port = port;
 801054a:	69bb      	ldr	r3, [r7, #24]
 801054c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801054e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	891b      	ldrh	r3, [r3, #8]
 8010554:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8010556:	69fb      	ldr	r3, [r7, #28]
 8010558:	3310      	adds	r3, #16
 801055a:	69b9      	ldr	r1, [r7, #24]
 801055c:	4618      	mov	r0, r3
 801055e:	f00f fb51 	bl	801fc04 <sys_mbox_trypost>
 8010562:	4603      	mov	r3, r0
 8010564:	2b00      	cmp	r3, #0
 8010566:	d003      	beq.n	8010570 <recv_udp+0xcc>
    netbuf_delete(buf);
 8010568:	69b8      	ldr	r0, [r7, #24]
 801056a:	f001 fa89 	bl	8011a80 <netbuf_delete>
    return;
 801056e:	e009      	b.n	8010584 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8010570:	69fb      	ldr	r3, [r7, #28]
 8010572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010574:	2b00      	cmp	r3, #0
 8010576:	d005      	beq.n	8010584 <recv_udp+0xe0>
 8010578:	69fb      	ldr	r3, [r7, #28]
 801057a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801057c:	8afa      	ldrh	r2, [r7, #22]
 801057e:	2100      	movs	r1, #0
 8010580:	69f8      	ldr	r0, [r7, #28]
 8010582:	4798      	blx	r3
  }
}
 8010584:	3720      	adds	r7, #32
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
 801058a:	bf00      	nop
 801058c:	080232ec 	.word	0x080232ec
 8010590:	08023364 	.word	0x08023364
 8010594:	08023330 	.word	0x08023330
 8010598:	08023388 	.word	0x08023388
 801059c:	080233a8 	.word	0x080233a8

080105a0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b088      	sub	sp, #32
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	60f8      	str	r0, [r7, #12]
 80105a8:	60b9      	str	r1, [r7, #8]
 80105aa:	607a      	str	r2, [r7, #4]
 80105ac:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d106      	bne.n	80105c2 <recv_tcp+0x22>
 80105b4:	4b36      	ldr	r3, [pc, #216]	@ (8010690 <recv_tcp+0xf0>)
 80105b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80105ba:	4936      	ldr	r1, [pc, #216]	@ (8010694 <recv_tcp+0xf4>)
 80105bc:	4836      	ldr	r0, [pc, #216]	@ (8010698 <recv_tcp+0xf8>)
 80105be:	f010 f9e1 	bl	8020984 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d106      	bne.n	80105d6 <recv_tcp+0x36>
 80105c8:	4b31      	ldr	r3, [pc, #196]	@ (8010690 <recv_tcp+0xf0>)
 80105ca:	f240 122d 	movw	r2, #301	@ 0x12d
 80105ce:	4933      	ldr	r1, [pc, #204]	@ (801069c <recv_tcp+0xfc>)
 80105d0:	4831      	ldr	r0, [pc, #196]	@ (8010698 <recv_tcp+0xf8>)
 80105d2:	f010 f9d7 	bl	8020984 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80105d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d006      	beq.n	80105ec <recv_tcp+0x4c>
 80105de:	4b2c      	ldr	r3, [pc, #176]	@ (8010690 <recv_tcp+0xf0>)
 80105e0:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80105e4:	492e      	ldr	r1, [pc, #184]	@ (80106a0 <recv_tcp+0x100>)
 80105e6:	482c      	ldr	r0, [pc, #176]	@ (8010698 <recv_tcp+0xf8>)
 80105e8:	f010 f9cc 	bl	8020984 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d102      	bne.n	80105fc <recv_tcp+0x5c>
    return ERR_VAL;
 80105f6:	f06f 0305 	mvn.w	r3, #5
 80105fa:	e045      	b.n	8010688 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80105fc:	697b      	ldr	r3, [r7, #20]
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	68ba      	ldr	r2, [r7, #8]
 8010602:	429a      	cmp	r2, r3
 8010604:	d006      	beq.n	8010614 <recv_tcp+0x74>
 8010606:	4b22      	ldr	r3, [pc, #136]	@ (8010690 <recv_tcp+0xf0>)
 8010608:	f240 1235 	movw	r2, #309	@ 0x135
 801060c:	4925      	ldr	r1, [pc, #148]	@ (80106a4 <recv_tcp+0x104>)
 801060e:	4822      	ldr	r0, [pc, #136]	@ (8010698 <recv_tcp+0xf8>)
 8010610:	f010 f9b8 	bl	8020984 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010614:	697b      	ldr	r3, [r7, #20]
 8010616:	3310      	adds	r3, #16
 8010618:	4618      	mov	r0, r3
 801061a:	f00f fb55 	bl	801fcc8 <sys_mbox_valid>
 801061e:	4603      	mov	r3, r0
 8010620:	2b00      	cmp	r3, #0
 8010622:	d10d      	bne.n	8010640 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d008      	beq.n	801063c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	891b      	ldrh	r3, [r3, #8]
 801062e:	4619      	mov	r1, r3
 8010630:	68b8      	ldr	r0, [r7, #8]
 8010632:	f004 fc7f 	bl	8014f34 <tcp_recved>
      pbuf_free(p);
 8010636:	6878      	ldr	r0, [r7, #4]
 8010638:	f003 fe16 	bl	8014268 <pbuf_free>
    }
    return ERR_OK;
 801063c:	2300      	movs	r3, #0
 801063e:	e023      	b.n	8010688 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d005      	beq.n	8010652 <recv_tcp+0xb2>
    msg = p;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	891b      	ldrh	r3, [r3, #8]
 801064e:	83fb      	strh	r3, [r7, #30]
 8010650:	e003      	b.n	801065a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8010652:	4b15      	ldr	r3, [pc, #84]	@ (80106a8 <recv_tcp+0x108>)
 8010654:	61bb      	str	r3, [r7, #24]
    len = 0;
 8010656:	2300      	movs	r3, #0
 8010658:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 801065a:	697b      	ldr	r3, [r7, #20]
 801065c:	3310      	adds	r3, #16
 801065e:	69b9      	ldr	r1, [r7, #24]
 8010660:	4618      	mov	r0, r3
 8010662:	f00f facf 	bl	801fc04 <sys_mbox_trypost>
 8010666:	4603      	mov	r3, r0
 8010668:	2b00      	cmp	r3, #0
 801066a:	d002      	beq.n	8010672 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 801066c:	f04f 33ff 	mov.w	r3, #4294967295
 8010670:	e00a      	b.n	8010688 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010676:	2b00      	cmp	r3, #0
 8010678:	d005      	beq.n	8010686 <recv_tcp+0xe6>
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801067e:	8bfa      	ldrh	r2, [r7, #30]
 8010680:	2100      	movs	r1, #0
 8010682:	6978      	ldr	r0, [r7, #20]
 8010684:	4798      	blx	r3
  }

  return ERR_OK;
 8010686:	2300      	movs	r3, #0
}
 8010688:	4618      	mov	r0, r3
 801068a:	3720      	adds	r7, #32
 801068c:	46bd      	mov	sp, r7
 801068e:	bd80      	pop	{r7, pc}
 8010690:	080232ec 	.word	0x080232ec
 8010694:	080233c8 	.word	0x080233c8
 8010698:	08023330 	.word	0x08023330
 801069c:	080233ec 	.word	0x080233ec
 80106a0:	0802340c 	.word	0x0802340c
 80106a4:	08023424 	.word	0x08023424
 80106a8:	08026cf6 	.word	0x08026cf6

080106ac <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b084      	sub	sp, #16
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
 80106b4:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d106      	bne.n	80106ce <poll_tcp+0x22>
 80106c0:	4b29      	ldr	r3, [pc, #164]	@ (8010768 <poll_tcp+0xbc>)
 80106c2:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 80106c6:	4929      	ldr	r1, [pc, #164]	@ (801076c <poll_tcp+0xc0>)
 80106c8:	4829      	ldr	r0, [pc, #164]	@ (8010770 <poll_tcp+0xc4>)
 80106ca:	f010 f95b 	bl	8020984 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	785b      	ldrb	r3, [r3, #1]
 80106d2:	2b01      	cmp	r3, #1
 80106d4:	d104      	bne.n	80106e0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80106d6:	2101      	movs	r1, #1
 80106d8:	68f8      	ldr	r0, [r7, #12]
 80106da:	f000 ff5b 	bl	8011594 <lwip_netconn_do_writemore>
 80106de:	e016      	b.n	801070e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	785b      	ldrb	r3, [r3, #1]
 80106e4:	2b04      	cmp	r3, #4
 80106e6:	d112      	bne.n	801070e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	6a1b      	ldr	r3, [r3, #32]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d00a      	beq.n	8010706 <poll_tcp+0x5a>
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	6a1b      	ldr	r3, [r3, #32]
 80106f4:	7a5b      	ldrb	r3, [r3, #9]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d005      	beq.n	8010706 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	6a1b      	ldr	r3, [r3, #32]
 80106fe:	7a5a      	ldrb	r2, [r3, #9]
 8010700:	3a01      	subs	r2, #1
 8010702:	b2d2      	uxtb	r2, r2
 8010704:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8010706:	2101      	movs	r1, #1
 8010708:	68f8      	ldr	r0, [r7, #12]
 801070a:	f000 fb3b 	bl	8010d84 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	7f1b      	ldrb	r3, [r3, #28]
 8010712:	f003 0310 	and.w	r3, r3, #16
 8010716:	2b00      	cmp	r3, #0
 8010718:	d021      	beq.n	801075e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	685b      	ldr	r3, [r3, #4]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d01d      	beq.n	801075e <poll_tcp+0xb2>
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	685b      	ldr	r3, [r3, #4]
 8010726:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801072a:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 801072e:	d316      	bcc.n	801075e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	685b      	ldr	r3, [r3, #4]
 8010734:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010738:	2b04      	cmp	r3, #4
 801073a:	d810      	bhi.n	801075e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	7f1b      	ldrb	r3, [r3, #28]
 8010740:	f023 0310 	bic.w	r3, r3, #16
 8010744:	b2da      	uxtb	r2, r3
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801074e:	2b00      	cmp	r3, #0
 8010750:	d005      	beq.n	801075e <poll_tcp+0xb2>
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010756:	2200      	movs	r2, #0
 8010758:	2102      	movs	r1, #2
 801075a:	68f8      	ldr	r0, [r7, #12]
 801075c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801075e:	2300      	movs	r3, #0
}
 8010760:	4618      	mov	r0, r3
 8010762:	3710      	adds	r7, #16
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}
 8010768:	080232ec 	.word	0x080232ec
 801076c:	08023444 	.word	0x08023444
 8010770:	08023330 	.word	0x08023330

08010774 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b086      	sub	sp, #24
 8010778:	af00      	add	r7, sp, #0
 801077a:	60f8      	str	r0, [r7, #12]
 801077c:	60b9      	str	r1, [r7, #8]
 801077e:	4613      	mov	r3, r2
 8010780:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8010786:	697b      	ldr	r3, [r7, #20]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d106      	bne.n	801079a <sent_tcp+0x26>
 801078c:	4b20      	ldr	r3, [pc, #128]	@ (8010810 <sent_tcp+0x9c>)
 801078e:	f240 1293 	movw	r2, #403	@ 0x193
 8010792:	4920      	ldr	r1, [pc, #128]	@ (8010814 <sent_tcp+0xa0>)
 8010794:	4820      	ldr	r0, [pc, #128]	@ (8010818 <sent_tcp+0xa4>)
 8010796:	f010 f8f5 	bl	8020984 <iprintf>

  if (conn) {
 801079a:	697b      	ldr	r3, [r7, #20]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d032      	beq.n	8010806 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	785b      	ldrb	r3, [r3, #1]
 80107a4:	2b01      	cmp	r3, #1
 80107a6:	d104      	bne.n	80107b2 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80107a8:	2101      	movs	r1, #1
 80107aa:	6978      	ldr	r0, [r7, #20]
 80107ac:	f000 fef2 	bl	8011594 <lwip_netconn_do_writemore>
 80107b0:	e007      	b.n	80107c2 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	785b      	ldrb	r3, [r3, #1]
 80107b6:	2b04      	cmp	r3, #4
 80107b8:	d103      	bne.n	80107c2 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80107ba:	2101      	movs	r1, #1
 80107bc:	6978      	ldr	r0, [r7, #20]
 80107be:	f000 fae1 	bl	8010d84 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80107c2:	697b      	ldr	r3, [r7, #20]
 80107c4:	685b      	ldr	r3, [r3, #4]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d01d      	beq.n	8010806 <sent_tcp+0x92>
 80107ca:	697b      	ldr	r3, [r7, #20]
 80107cc:	685b      	ldr	r3, [r3, #4]
 80107ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80107d2:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 80107d6:	d316      	bcc.n	8010806 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80107d8:	697b      	ldr	r3, [r7, #20]
 80107da:	685b      	ldr	r3, [r3, #4]
 80107dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80107e0:	2b04      	cmp	r3, #4
 80107e2:	d810      	bhi.n	8010806 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	7f1b      	ldrb	r3, [r3, #28]
 80107e8:	f023 0310 	bic.w	r3, r3, #16
 80107ec:	b2da      	uxtb	r2, r3
 80107ee:	697b      	ldr	r3, [r7, #20]
 80107f0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d005      	beq.n	8010806 <sent_tcp+0x92>
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107fe:	88fa      	ldrh	r2, [r7, #6]
 8010800:	2102      	movs	r1, #2
 8010802:	6978      	ldr	r0, [r7, #20]
 8010804:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8010806:	2300      	movs	r3, #0
}
 8010808:	4618      	mov	r0, r3
 801080a:	3718      	adds	r7, #24
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}
 8010810:	080232ec 	.word	0x080232ec
 8010814:	08023444 	.word	0x08023444
 8010818:	08023330 	.word	0x08023330

0801081c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b088      	sub	sp, #32
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
 8010824:	460b      	mov	r3, r1
 8010826:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801082c:	69fb      	ldr	r3, [r7, #28]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d106      	bne.n	8010840 <err_tcp+0x24>
 8010832:	4b5f      	ldr	r3, [pc, #380]	@ (80109b0 <err_tcp+0x194>)
 8010834:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8010838:	495e      	ldr	r1, [pc, #376]	@ (80109b4 <err_tcp+0x198>)
 801083a:	485f      	ldr	r0, [pc, #380]	@ (80109b8 <err_tcp+0x19c>)
 801083c:	f010 f8a2 	bl	8020984 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8010840:	f00f fb4c 	bl	801fedc <sys_arch_protect>
 8010844:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8010846:	69fb      	ldr	r3, [r7, #28]
 8010848:	2200      	movs	r2, #0
 801084a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 801084c:	69fb      	ldr	r3, [r7, #28]
 801084e:	78fa      	ldrb	r2, [r7, #3]
 8010850:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8010852:	69fb      	ldr	r3, [r7, #28]
 8010854:	7f1b      	ldrb	r3, [r3, #28]
 8010856:	f043 0301 	orr.w	r3, r3, #1
 801085a:	b2da      	uxtb	r2, r3
 801085c:	69fb      	ldr	r3, [r7, #28]
 801085e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8010860:	69fb      	ldr	r3, [r7, #28]
 8010862:	785b      	ldrb	r3, [r3, #1]
 8010864:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8010866:	69fb      	ldr	r3, [r7, #28]
 8010868:	2200      	movs	r2, #0
 801086a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 801086c:	69b8      	ldr	r0, [r7, #24]
 801086e:	f00f fb43 	bl	801fef8 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8010872:	69fb      	ldr	r3, [r7, #28]
 8010874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010876:	2b00      	cmp	r3, #0
 8010878:	d005      	beq.n	8010886 <err_tcp+0x6a>
 801087a:	69fb      	ldr	r3, [r7, #28]
 801087c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801087e:	2200      	movs	r2, #0
 8010880:	2104      	movs	r1, #4
 8010882:	69f8      	ldr	r0, [r7, #28]
 8010884:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010886:	69fb      	ldr	r3, [r7, #28]
 8010888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801088a:	2b00      	cmp	r3, #0
 801088c:	d005      	beq.n	801089a <err_tcp+0x7e>
 801088e:	69fb      	ldr	r3, [r7, #28]
 8010890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010892:	2200      	movs	r2, #0
 8010894:	2100      	movs	r1, #0
 8010896:	69f8      	ldr	r0, [r7, #28]
 8010898:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801089a:	69fb      	ldr	r3, [r7, #28]
 801089c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d005      	beq.n	80108ae <err_tcp+0x92>
 80108a2:	69fb      	ldr	r3, [r7, #28]
 80108a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108a6:	2200      	movs	r2, #0
 80108a8:	2102      	movs	r1, #2
 80108aa:	69f8      	ldr	r0, [r7, #28]
 80108ac:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 80108ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80108b2:	4618      	mov	r0, r3
 80108b4:	f7ff fd86 	bl	80103c4 <lwip_netconn_err_to_msg>
 80108b8:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80108ba:	69fb      	ldr	r3, [r7, #28]
 80108bc:	3310      	adds	r3, #16
 80108be:	4618      	mov	r0, r3
 80108c0:	f00f fa02 	bl	801fcc8 <sys_mbox_valid>
 80108c4:	4603      	mov	r3, r0
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d005      	beq.n	80108d6 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80108ca:	69fb      	ldr	r3, [r7, #28]
 80108cc:	3310      	adds	r3, #16
 80108ce:	6939      	ldr	r1, [r7, #16]
 80108d0:	4618      	mov	r0, r3
 80108d2:	f00f f997 	bl	801fc04 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80108d6:	69fb      	ldr	r3, [r7, #28]
 80108d8:	3314      	adds	r3, #20
 80108da:	4618      	mov	r0, r3
 80108dc:	f00f f9f4 	bl	801fcc8 <sys_mbox_valid>
 80108e0:	4603      	mov	r3, r0
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d005      	beq.n	80108f2 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80108e6:	69fb      	ldr	r3, [r7, #28]
 80108e8:	3314      	adds	r3, #20
 80108ea:	6939      	ldr	r1, [r7, #16]
 80108ec:	4618      	mov	r0, r3
 80108ee:	f00f f989 	bl	801fc04 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80108f2:	7dfb      	ldrb	r3, [r7, #23]
 80108f4:	2b01      	cmp	r3, #1
 80108f6:	d005      	beq.n	8010904 <err_tcp+0xe8>
 80108f8:	7dfb      	ldrb	r3, [r7, #23]
 80108fa:	2b04      	cmp	r3, #4
 80108fc:	d002      	beq.n	8010904 <err_tcp+0xe8>
 80108fe:	7dfb      	ldrb	r3, [r7, #23]
 8010900:	2b03      	cmp	r3, #3
 8010902:	d143      	bne.n	801098c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8010904:	69fb      	ldr	r3, [r7, #28]
 8010906:	7f1b      	ldrb	r3, [r3, #28]
 8010908:	f003 0304 	and.w	r3, r3, #4
 801090c:	2b00      	cmp	r3, #0
 801090e:	bf14      	ite	ne
 8010910:	2301      	movne	r3, #1
 8010912:	2300      	moveq	r3, #0
 8010914:	b2db      	uxtb	r3, r3
 8010916:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8010918:	69fb      	ldr	r3, [r7, #28]
 801091a:	7f1b      	ldrb	r3, [r3, #28]
 801091c:	f023 0304 	bic.w	r3, r3, #4
 8010920:	b2da      	uxtb	r2, r3
 8010922:	69fb      	ldr	r3, [r7, #28]
 8010924:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d13b      	bne.n	80109a4 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801092c:	69fb      	ldr	r3, [r7, #28]
 801092e:	6a1b      	ldr	r3, [r3, #32]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d106      	bne.n	8010942 <err_tcp+0x126>
 8010934:	4b1e      	ldr	r3, [pc, #120]	@ (80109b0 <err_tcp+0x194>)
 8010936:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801093a:	4920      	ldr	r1, [pc, #128]	@ (80109bc <err_tcp+0x1a0>)
 801093c:	481e      	ldr	r0, [pc, #120]	@ (80109b8 <err_tcp+0x19c>)
 801093e:	f010 f821 	bl	8020984 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8010942:	7dfb      	ldrb	r3, [r7, #23]
 8010944:	2b04      	cmp	r3, #4
 8010946:	d104      	bne.n	8010952 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8010948:	69fb      	ldr	r3, [r7, #28]
 801094a:	6a1b      	ldr	r3, [r3, #32]
 801094c:	2200      	movs	r2, #0
 801094e:	711a      	strb	r2, [r3, #4]
 8010950:	e003      	b.n	801095a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8010952:	69fb      	ldr	r3, [r7, #28]
 8010954:	6a1b      	ldr	r3, [r3, #32]
 8010956:	78fa      	ldrb	r2, [r7, #3]
 8010958:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801095a:	69fb      	ldr	r3, [r7, #28]
 801095c:	6a1b      	ldr	r3, [r3, #32]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	330c      	adds	r3, #12
 8010962:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8010964:	68b8      	ldr	r0, [r7, #8]
 8010966:	f00f fa3d 	bl	801fde4 <sys_sem_valid>
 801096a:	4603      	mov	r3, r0
 801096c:	2b00      	cmp	r3, #0
 801096e:	d106      	bne.n	801097e <err_tcp+0x162>
 8010970:	4b0f      	ldr	r3, [pc, #60]	@ (80109b0 <err_tcp+0x194>)
 8010972:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8010976:	4912      	ldr	r1, [pc, #72]	@ (80109c0 <err_tcp+0x1a4>)
 8010978:	480f      	ldr	r0, [pc, #60]	@ (80109b8 <err_tcp+0x19c>)
 801097a:	f010 f803 	bl	8020984 <iprintf>
      conn->current_msg = NULL;
 801097e:	69fb      	ldr	r3, [r7, #28]
 8010980:	2200      	movs	r2, #0
 8010982:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8010984:	68b8      	ldr	r0, [r7, #8]
 8010986:	f00f fa13 	bl	801fdb0 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 801098a:	e00b      	b.n	80109a4 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 801098c:	69fb      	ldr	r3, [r7, #28]
 801098e:	6a1b      	ldr	r3, [r3, #32]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d008      	beq.n	80109a6 <err_tcp+0x18a>
 8010994:	4b06      	ldr	r3, [pc, #24]	@ (80109b0 <err_tcp+0x194>)
 8010996:	f240 12f7 	movw	r2, #503	@ 0x1f7
 801099a:	490a      	ldr	r1, [pc, #40]	@ (80109c4 <err_tcp+0x1a8>)
 801099c:	4806      	ldr	r0, [pc, #24]	@ (80109b8 <err_tcp+0x19c>)
 801099e:	f00f fff1 	bl	8020984 <iprintf>
  }
}
 80109a2:	e000      	b.n	80109a6 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 80109a4:	bf00      	nop
}
 80109a6:	bf00      	nop
 80109a8:	3720      	adds	r7, #32
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}
 80109ae:	bf00      	nop
 80109b0:	080232ec 	.word	0x080232ec
 80109b4:	08023444 	.word	0x08023444
 80109b8:	08023330 	.word	0x08023330
 80109bc:	08023454 	.word	0x08023454
 80109c0:	08023470 	.word	0x08023470
 80109c4:	0802348c 	.word	0x0802348c

080109c8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b084      	sub	sp, #16
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	685b      	ldr	r3, [r3, #4]
 80109d4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80109d6:	6879      	ldr	r1, [r7, #4]
 80109d8:	68f8      	ldr	r0, [r7, #12]
 80109da:	f005 fa8b 	bl	8015ef4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80109de:	490a      	ldr	r1, [pc, #40]	@ (8010a08 <setup_tcp+0x40>)
 80109e0:	68f8      	ldr	r0, [r7, #12]
 80109e2:	f005 fa99 	bl	8015f18 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80109e6:	4909      	ldr	r1, [pc, #36]	@ (8010a0c <setup_tcp+0x44>)
 80109e8:	68f8      	ldr	r0, [r7, #12]
 80109ea:	f005 fab7 	bl	8015f5c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80109ee:	2202      	movs	r2, #2
 80109f0:	4907      	ldr	r1, [pc, #28]	@ (8010a10 <setup_tcp+0x48>)
 80109f2:	68f8      	ldr	r0, [r7, #12]
 80109f4:	f005 fb0e 	bl	8016014 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80109f8:	4906      	ldr	r1, [pc, #24]	@ (8010a14 <setup_tcp+0x4c>)
 80109fa:	68f8      	ldr	r0, [r7, #12]
 80109fc:	f005 fad0 	bl	8015fa0 <tcp_err>
}
 8010a00:	bf00      	nop
 8010a02:	3710      	adds	r7, #16
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}
 8010a08:	080105a1 	.word	0x080105a1
 8010a0c:	08010775 	.word	0x08010775
 8010a10:	080106ad 	.word	0x080106ad
 8010a14:	0801081d 	.word	0x0801081d

08010a18 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8010a18:	b590      	push	{r4, r7, lr}
 8010a1a:	b085      	sub	sp, #20
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8010a20:	2300      	movs	r3, #0
 8010a22:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	685b      	ldr	r3, [r3, #4]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d006      	beq.n	8010a3c <pcb_new+0x24>
 8010a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8010adc <pcb_new+0xc4>)
 8010a30:	f240 2265 	movw	r2, #613	@ 0x265
 8010a34:	492a      	ldr	r1, [pc, #168]	@ (8010ae0 <pcb_new+0xc8>)
 8010a36:	482b      	ldr	r0, [pc, #172]	@ (8010ae4 <pcb_new+0xcc>)
 8010a38:	f00f ffa4 	bl	8020984 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010a46:	2b10      	cmp	r3, #16
 8010a48:	d022      	beq.n	8010a90 <pcb_new+0x78>
 8010a4a:	2b20      	cmp	r3, #32
 8010a4c:	d133      	bne.n	8010ab6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681c      	ldr	r4, [r3, #0]
 8010a52:	7bfb      	ldrb	r3, [r7, #15]
 8010a54:	4618      	mov	r0, r3
 8010a56:	f00a fda6 	bl	801b5a6 <udp_new_ip_type>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	685b      	ldr	r3, [r3, #4]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d02a      	beq.n	8010abe <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	781b      	ldrb	r3, [r3, #0]
 8010a6e:	2b22      	cmp	r3, #34	@ 0x22
 8010a70:	d104      	bne.n	8010a7c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	685b      	ldr	r3, [r3, #4]
 8010a78:	2201      	movs	r2, #1
 8010a7a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	6858      	ldr	r0, [r3, #4]
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	461a      	mov	r2, r3
 8010a88:	4917      	ldr	r1, [pc, #92]	@ (8010ae8 <pcb_new+0xd0>)
 8010a8a:	f00a fd13 	bl	801b4b4 <udp_recv>
      }
      break;
 8010a8e:	e016      	b.n	8010abe <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681c      	ldr	r4, [r3, #0]
 8010a94:	7bfb      	ldrb	r3, [r7, #15]
 8010a96:	4618      	mov	r0, r3
 8010a98:	f005 fa1e 	bl	8015ed8 <tcp_new_ip_type>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	685b      	ldr	r3, [r3, #4]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d00b      	beq.n	8010ac2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f7ff ff8a 	bl	80109c8 <setup_tcp>
      }
      break;
 8010ab4:	e005      	b.n	8010ac2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	22fa      	movs	r2, #250	@ 0xfa
 8010aba:	711a      	strb	r2, [r3, #4]
      return;
 8010abc:	e00a      	b.n	8010ad4 <pcb_new+0xbc>
      break;
 8010abe:	bf00      	nop
 8010ac0:	e000      	b.n	8010ac4 <pcb_new+0xac>
      break;
 8010ac2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	685b      	ldr	r3, [r3, #4]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d102      	bne.n	8010ad4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	22ff      	movs	r2, #255	@ 0xff
 8010ad2:	711a      	strb	r2, [r3, #4]
  }
}
 8010ad4:	3714      	adds	r7, #20
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd90      	pop	{r4, r7, pc}
 8010ada:	bf00      	nop
 8010adc:	080232ec 	.word	0x080232ec
 8010ae0:	080234d0 	.word	0x080234d0
 8010ae4:	08023330 	.word	0x08023330
 8010ae8:	080104a5 	.word	0x080104a5

08010aec <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b084      	sub	sp, #16
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	2200      	movs	r2, #0
 8010afc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	685b      	ldr	r3, [r3, #4]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d102      	bne.n	8010b0e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8010b08:	68f8      	ldr	r0, [r7, #12]
 8010b0a:	f7ff ff85 	bl	8010a18 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8010b0e:	bf00      	nop
 8010b10:	3710      	adds	r7, #16
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}
	...

08010b18 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b086      	sub	sp, #24
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	4603      	mov	r3, r0
 8010b20:	6039      	str	r1, [r7, #0]
 8010b22:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8010b24:	2300      	movs	r3, #0
 8010b26:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8010b28:	2007      	movs	r0, #7
 8010b2a:	f002 fc77 	bl	801341c <memp_malloc>
 8010b2e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d101      	bne.n	8010b3a <netconn_alloc+0x22>
    return NULL;
 8010b36:	2300      	movs	r3, #0
 8010b38:	e052      	b.n	8010be0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	79fa      	ldrb	r2, [r7, #7]
 8010b44:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	2200      	movs	r2, #0
 8010b4a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8010b4c:	79fb      	ldrb	r3, [r7, #7]
 8010b4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010b52:	2b10      	cmp	r3, #16
 8010b54:	d004      	beq.n	8010b60 <netconn_alloc+0x48>
 8010b56:	2b20      	cmp	r3, #32
 8010b58:	d105      	bne.n	8010b66 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8010b5a:	2306      	movs	r3, #6
 8010b5c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8010b5e:	e00a      	b.n	8010b76 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8010b60:	2306      	movs	r3, #6
 8010b62:	617b      	str	r3, [r7, #20]
      break;
 8010b64:	e007      	b.n	8010b76 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8010b66:	4b20      	ldr	r3, [pc, #128]	@ (8010be8 <netconn_alloc+0xd0>)
 8010b68:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8010b6c:	491f      	ldr	r1, [pc, #124]	@ (8010bec <netconn_alloc+0xd4>)
 8010b6e:	4820      	ldr	r0, [pc, #128]	@ (8010bf0 <netconn_alloc+0xd8>)
 8010b70:	f00f ff08 	bl	8020984 <iprintf>
      goto free_and_return;
 8010b74:	e02f      	b.n	8010bd6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	3310      	adds	r3, #16
 8010b7a:	6979      	ldr	r1, [r7, #20]
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f00f f815 	bl	801fbac <sys_mbox_new>
 8010b82:	4603      	mov	r3, r0
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d125      	bne.n	8010bd4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	330c      	adds	r3, #12
 8010b8c:	2100      	movs	r1, #0
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f00f f8b8 	bl	801fd04 <sys_sem_new>
 8010b94:	4603      	mov	r3, r0
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d005      	beq.n	8010ba6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	3310      	adds	r3, #16
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f00f f81e 	bl	801fbe0 <sys_mbox_free>
    goto free_and_return;
 8010ba4:	e017      	b.n	8010bd6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	3314      	adds	r3, #20
 8010baa:	4618      	mov	r0, r3
 8010bac:	f00f f89d 	bl	801fcea <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8010bbc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	683a      	ldr	r2, [r7, #0]
 8010bc2:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	7cfa      	ldrb	r2, [r7, #19]
 8010bce:	771a      	strb	r2, [r3, #28]
  return conn;
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	e005      	b.n	8010be0 <netconn_alloc+0xc8>
    goto free_and_return;
 8010bd4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8010bd6:	68f9      	ldr	r1, [r7, #12]
 8010bd8:	2007      	movs	r0, #7
 8010bda:	f002 fc95 	bl	8013508 <memp_free>
  return NULL;
 8010bde:	2300      	movs	r3, #0
}
 8010be0:	4618      	mov	r0, r3
 8010be2:	3718      	adds	r7, #24
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}
 8010be8:	080232ec 	.word	0x080232ec
 8010bec:	080234f0 	.word	0x080234f0
 8010bf0:	08023330 	.word	0x08023330

08010bf4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b082      	sub	sp, #8
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	685b      	ldr	r3, [r3, #4]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d006      	beq.n	8010c12 <netconn_free+0x1e>
 8010c04:	4b1b      	ldr	r3, [pc, #108]	@ (8010c74 <netconn_free+0x80>)
 8010c06:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8010c0a:	491b      	ldr	r1, [pc, #108]	@ (8010c78 <netconn_free+0x84>)
 8010c0c:	481b      	ldr	r0, [pc, #108]	@ (8010c7c <netconn_free+0x88>)
 8010c0e:	f00f feb9 	bl	8020984 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	3310      	adds	r3, #16
 8010c16:	4618      	mov	r0, r3
 8010c18:	f00f f856 	bl	801fcc8 <sys_mbox_valid>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d006      	beq.n	8010c30 <netconn_free+0x3c>
 8010c22:	4b14      	ldr	r3, [pc, #80]	@ (8010c74 <netconn_free+0x80>)
 8010c24:	f240 3223 	movw	r2, #803	@ 0x323
 8010c28:	4915      	ldr	r1, [pc, #84]	@ (8010c80 <netconn_free+0x8c>)
 8010c2a:	4814      	ldr	r0, [pc, #80]	@ (8010c7c <netconn_free+0x88>)
 8010c2c:	f00f feaa 	bl	8020984 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	3314      	adds	r3, #20
 8010c34:	4618      	mov	r0, r3
 8010c36:	f00f f847 	bl	801fcc8 <sys_mbox_valid>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d006      	beq.n	8010c4e <netconn_free+0x5a>
 8010c40:	4b0c      	ldr	r3, [pc, #48]	@ (8010c74 <netconn_free+0x80>)
 8010c42:	f240 3226 	movw	r2, #806	@ 0x326
 8010c46:	490f      	ldr	r1, [pc, #60]	@ (8010c84 <netconn_free+0x90>)
 8010c48:	480c      	ldr	r0, [pc, #48]	@ (8010c7c <netconn_free+0x88>)
 8010c4a:	f00f fe9b 	bl	8020984 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	330c      	adds	r3, #12
 8010c52:	4618      	mov	r0, r3
 8010c54:	f00f f8b9 	bl	801fdca <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	330c      	adds	r3, #12
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f00f f8d2 	bl	801fe06 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8010c62:	6879      	ldr	r1, [r7, #4]
 8010c64:	2007      	movs	r0, #7
 8010c66:	f002 fc4f 	bl	8013508 <memp_free>
}
 8010c6a:	bf00      	nop
 8010c6c:	3708      	adds	r7, #8
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
 8010c72:	bf00      	nop
 8010c74:	080232ec 	.word	0x080232ec
 8010c78:	08023518 	.word	0x08023518
 8010c7c:	08023330 	.word	0x08023330
 8010c80:	08023548 	.word	0x08023548
 8010c84:	08023584 	.word	0x08023584

08010c88 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b086      	sub	sp, #24
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	3310      	adds	r3, #16
 8010c94:	4618      	mov	r0, r3
 8010c96:	f00f f817 	bl	801fcc8 <sys_mbox_valid>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d02f      	beq.n	8010d00 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8010ca0:	e018      	b.n	8010cd4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	781b      	ldrb	r3, [r3, #0]
 8010ca6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010caa:	2b10      	cmp	r3, #16
 8010cac:	d10e      	bne.n	8010ccc <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	f107 020f 	add.w	r2, r7, #15
 8010cb4:	4611      	mov	r1, r2
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f7ff fbba 	bl	8010430 <lwip_netconn_is_err_msg>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d108      	bne.n	8010cd4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f003 facf 	bl	8014268 <pbuf_free>
 8010cca:	e003      	b.n	8010cd4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8010ccc:	693b      	ldr	r3, [r7, #16]
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f000 fed6 	bl	8011a80 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	3310      	adds	r3, #16
 8010cd8:	f107 0210 	add.w	r2, r7, #16
 8010cdc:	4611      	mov	r1, r2
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f00e ffdb 	bl	801fc9a <sys_arch_mbox_tryfetch>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cea:	d1da      	bne.n	8010ca2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	3310      	adds	r3, #16
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f00e ff75 	bl	801fbe0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	3310      	adds	r3, #16
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f00e fff5 	bl	801fcea <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	3314      	adds	r3, #20
 8010d04:	4618      	mov	r0, r3
 8010d06:	f00e ffdf 	bl	801fcc8 <sys_mbox_valid>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d034      	beq.n	8010d7a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8010d10:	e01d      	b.n	8010d4e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	f107 020e 	add.w	r2, r7, #14
 8010d18:	4611      	mov	r1, r2
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7ff fb88 	bl	8010430 <lwip_netconn_is_err_msg>
 8010d20:	4603      	mov	r3, r0
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d113      	bne.n	8010d4e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8010d2a:	6978      	ldr	r0, [r7, #20]
 8010d2c:	f7ff ffac 	bl	8010c88 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d007      	beq.n	8010d48 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	685b      	ldr	r3, [r3, #4]
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f004 f893 	bl	8014e68 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8010d42:	697b      	ldr	r3, [r7, #20]
 8010d44:	2200      	movs	r2, #0
 8010d46:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8010d48:	6978      	ldr	r0, [r7, #20]
 8010d4a:	f7ff ff53 	bl	8010bf4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	3314      	adds	r3, #20
 8010d52:	f107 0210 	add.w	r2, r7, #16
 8010d56:	4611      	mov	r1, r2
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f00e ff9e 	bl	801fc9a <sys_arch_mbox_tryfetch>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d64:	d1d5      	bne.n	8010d12 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	3314      	adds	r3, #20
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f00e ff38 	bl	801fbe0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	3314      	adds	r3, #20
 8010d74:	4618      	mov	r0, r3
 8010d76:	f00e ffb8 	bl	801fcea <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8010d7a:	bf00      	nop
 8010d7c:	3718      	adds	r7, #24
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}
	...

08010d84 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b086      	sub	sp, #24
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
 8010d8c:	460b      	mov	r3, r1
 8010d8e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8010d90:	2300      	movs	r3, #0
 8010d92:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d106      	bne.n	8010da8 <lwip_netconn_do_close_internal+0x24>
 8010d9a:	4b87      	ldr	r3, [pc, #540]	@ (8010fb8 <lwip_netconn_do_close_internal+0x234>)
 8010d9c:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8010da0:	4986      	ldr	r1, [pc, #536]	@ (8010fbc <lwip_netconn_do_close_internal+0x238>)
 8010da2:	4887      	ldr	r0, [pc, #540]	@ (8010fc0 <lwip_netconn_do_close_internal+0x23c>)
 8010da4:	f00f fdee 	bl	8020984 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	781b      	ldrb	r3, [r3, #0]
 8010dac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010db0:	2b10      	cmp	r3, #16
 8010db2:	d006      	beq.n	8010dc2 <lwip_netconn_do_close_internal+0x3e>
 8010db4:	4b80      	ldr	r3, [pc, #512]	@ (8010fb8 <lwip_netconn_do_close_internal+0x234>)
 8010db6:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8010dba:	4982      	ldr	r1, [pc, #520]	@ (8010fc4 <lwip_netconn_do_close_internal+0x240>)
 8010dbc:	4880      	ldr	r0, [pc, #512]	@ (8010fc0 <lwip_netconn_do_close_internal+0x23c>)
 8010dbe:	f00f fde1 	bl	8020984 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	785b      	ldrb	r3, [r3, #1]
 8010dc6:	2b04      	cmp	r3, #4
 8010dc8:	d006      	beq.n	8010dd8 <lwip_netconn_do_close_internal+0x54>
 8010dca:	4b7b      	ldr	r3, [pc, #492]	@ (8010fb8 <lwip_netconn_do_close_internal+0x234>)
 8010dcc:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8010dd0:	497d      	ldr	r1, [pc, #500]	@ (8010fc8 <lwip_netconn_do_close_internal+0x244>)
 8010dd2:	487b      	ldr	r0, [pc, #492]	@ (8010fc0 <lwip_netconn_do_close_internal+0x23c>)
 8010dd4:	f00f fdd6 	bl	8020984 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	685b      	ldr	r3, [r3, #4]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d106      	bne.n	8010dee <lwip_netconn_do_close_internal+0x6a>
 8010de0:	4b75      	ldr	r3, [pc, #468]	@ (8010fb8 <lwip_netconn_do_close_internal+0x234>)
 8010de2:	f240 32a5 	movw	r2, #933	@ 0x3a5
 8010de6:	4979      	ldr	r1, [pc, #484]	@ (8010fcc <lwip_netconn_do_close_internal+0x248>)
 8010de8:	4875      	ldr	r0, [pc, #468]	@ (8010fc0 <lwip_netconn_do_close_internal+0x23c>)
 8010dea:	f00f fdcb 	bl	8020984 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	6a1b      	ldr	r3, [r3, #32]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d106      	bne.n	8010e04 <lwip_netconn_do_close_internal+0x80>
 8010df6:	4b70      	ldr	r3, [pc, #448]	@ (8010fb8 <lwip_netconn_do_close_internal+0x234>)
 8010df8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8010dfc:	4974      	ldr	r1, [pc, #464]	@ (8010fd0 <lwip_netconn_do_close_internal+0x24c>)
 8010dfe:	4870      	ldr	r0, [pc, #448]	@ (8010fc0 <lwip_netconn_do_close_internal+0x23c>)
 8010e00:	f00f fdc0 	bl	8020984 <iprintf>

  tpcb = conn->pcb.tcp;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	685b      	ldr	r3, [r3, #4]
 8010e08:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6a1b      	ldr	r3, [r3, #32]
 8010e0e:	7a1b      	ldrb	r3, [r3, #8]
 8010e10:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8010e12:	7bfb      	ldrb	r3, [r7, #15]
 8010e14:	f003 0301 	and.w	r3, r3, #1
 8010e18:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8010e1a:	7bfb      	ldrb	r3, [r7, #15]
 8010e1c:	f003 0302 	and.w	r3, r3, #2
 8010e20:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8010e22:	7bfb      	ldrb	r3, [r7, #15]
 8010e24:	2b03      	cmp	r3, #3
 8010e26:	d102      	bne.n	8010e2e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8010e28:	2301      	movs	r3, #1
 8010e2a:	75bb      	strb	r3, [r7, #22]
 8010e2c:	e01f      	b.n	8010e6e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8010e2e:	7bbb      	ldrb	r3, [r7, #14]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d00e      	beq.n	8010e52 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8010e34:	693b      	ldr	r3, [r7, #16]
 8010e36:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8010e38:	2b05      	cmp	r3, #5
 8010e3a:	d007      	beq.n	8010e4c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8010e3c:	693b      	ldr	r3, [r7, #16]
 8010e3e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8010e40:	2b06      	cmp	r3, #6
 8010e42:	d003      	beq.n	8010e4c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8010e44:	693b      	ldr	r3, [r7, #16]
 8010e46:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8010e48:	2b08      	cmp	r3, #8
 8010e4a:	d102      	bne.n	8010e52 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8010e4c:	2301      	movs	r3, #1
 8010e4e:	75bb      	strb	r3, [r7, #22]
 8010e50:	e00d      	b.n	8010e6e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8010e52:	7b7b      	ldrb	r3, [r7, #13]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d008      	beq.n	8010e6a <lwip_netconn_do_close_internal+0xe6>
 8010e58:	693b      	ldr	r3, [r7, #16]
 8010e5a:	8b5b      	ldrh	r3, [r3, #26]
 8010e5c:	f003 0310 	and.w	r3, r3, #16
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d002      	beq.n	8010e6a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8010e64:	2301      	movs	r3, #1
 8010e66:	75bb      	strb	r3, [r7, #22]
 8010e68:	e001      	b.n	8010e6e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8010e6e:	7dbb      	ldrb	r3, [r7, #22]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d003      	beq.n	8010e7c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8010e74:	2100      	movs	r1, #0
 8010e76:	6938      	ldr	r0, [r7, #16]
 8010e78:	f005 f83c 	bl	8015ef4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8010e7c:	693b      	ldr	r3, [r7, #16]
 8010e7e:	7d1b      	ldrb	r3, [r3, #20]
 8010e80:	2b01      	cmp	r3, #1
 8010e82:	d104      	bne.n	8010e8e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8010e84:	2100      	movs	r1, #0
 8010e86:	6938      	ldr	r0, [r7, #16]
 8010e88:	f005 f8ac 	bl	8015fe4 <tcp_accept>
 8010e8c:	e01d      	b.n	8010eca <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8010e8e:	7bbb      	ldrb	r3, [r7, #14]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d007      	beq.n	8010ea4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8010e94:	2100      	movs	r1, #0
 8010e96:	6938      	ldr	r0, [r7, #16]
 8010e98:	f005 f83e 	bl	8015f18 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8010e9c:	2100      	movs	r1, #0
 8010e9e:	6938      	ldr	r0, [r7, #16]
 8010ea0:	f005 f8a0 	bl	8015fe4 <tcp_accept>
    }
    if (shut_tx) {
 8010ea4:	7b7b      	ldrb	r3, [r7, #13]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d003      	beq.n	8010eb2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8010eaa:	2100      	movs	r1, #0
 8010eac:	6938      	ldr	r0, [r7, #16]
 8010eae:	f005 f855 	bl	8015f5c <tcp_sent>
    }
    if (shut_close) {
 8010eb2:	7dbb      	ldrb	r3, [r7, #22]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d008      	beq.n	8010eca <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8010eb8:	2200      	movs	r2, #0
 8010eba:	2100      	movs	r1, #0
 8010ebc:	6938      	ldr	r0, [r7, #16]
 8010ebe:	f005 f8a9 	bl	8016014 <tcp_poll>
      tcp_err(tpcb, NULL);
 8010ec2:	2100      	movs	r1, #0
 8010ec4:	6938      	ldr	r0, [r7, #16]
 8010ec6:	f005 f86b 	bl	8015fa0 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8010eca:	7dbb      	ldrb	r3, [r7, #22]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d005      	beq.n	8010edc <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8010ed0:	6938      	ldr	r0, [r7, #16]
 8010ed2:	f003 fe83 	bl	8014bdc <tcp_close>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	75fb      	strb	r3, [r7, #23]
 8010eda:	e007      	b.n	8010eec <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8010edc:	7bbb      	ldrb	r3, [r7, #14]
 8010ede:	7b7a      	ldrb	r2, [r7, #13]
 8010ee0:	4619      	mov	r1, r3
 8010ee2:	6938      	ldr	r0, [r7, #16]
 8010ee4:	f003 fea6 	bl	8014c34 <tcp_shutdown>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8010eec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d102      	bne.n	8010efa <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	757b      	strb	r3, [r7, #21]
 8010ef8:	e016      	b.n	8010f28 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8010efa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f02:	d10f      	bne.n	8010f24 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	6a1b      	ldr	r3, [r3, #32]
 8010f08:	7a5b      	ldrb	r3, [r3, #9]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d10c      	bne.n	8010f28 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8010f0e:	2301      	movs	r3, #1
 8010f10:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8010f12:	7dbb      	ldrb	r3, [r7, #22]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d007      	beq.n	8010f28 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8010f18:	6938      	ldr	r0, [r7, #16]
 8010f1a:	f003 ffa5 	bl	8014e68 <tcp_abort>
          err = ERR_OK;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	75fb      	strb	r3, [r7, #23]
 8010f22:	e001      	b.n	8010f28 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8010f24:	2301      	movs	r3, #1
 8010f26:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8010f28:	7d7b      	ldrb	r3, [r7, #21]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d052      	beq.n	8010fd4 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6a1b      	ldr	r3, [r3, #32]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	330c      	adds	r3, #12
 8010f36:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	6a1b      	ldr	r3, [r3, #32]
 8010f3c:	7dfa      	ldrb	r2, [r7, #23]
 8010f3e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2200      	movs	r2, #0
 8010f44:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2200      	movs	r2, #0
 8010f4a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8010f4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d129      	bne.n	8010fa8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8010f54:	7dbb      	ldrb	r3, [r7, #22]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d00c      	beq.n	8010f74 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d005      	beq.n	8010f74 <lwip_netconn_do_close_internal+0x1f0>
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	2104      	movs	r1, #4
 8010f70:	6878      	ldr	r0, [r7, #4]
 8010f72:	4798      	blx	r3
      }
      if (shut_rx) {
 8010f74:	7bbb      	ldrb	r3, [r7, #14]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d009      	beq.n	8010f8e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d005      	beq.n	8010f8e <lwip_netconn_do_close_internal+0x20a>
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f86:	2200      	movs	r2, #0
 8010f88:	2100      	movs	r1, #0
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	4798      	blx	r3
      }
      if (shut_tx) {
 8010f8e:	7b7b      	ldrb	r3, [r7, #13]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d009      	beq.n	8010fa8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d005      	beq.n	8010fa8 <lwip_netconn_do_close_internal+0x224>
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	2102      	movs	r1, #2
 8010fa4:	6878      	ldr	r0, [r7, #4]
 8010fa6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8010fa8:	78fb      	ldrb	r3, [r7, #3]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d002      	beq.n	8010fb4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8010fae:	68b8      	ldr	r0, [r7, #8]
 8010fb0:	f00e fefe 	bl	801fdb0 <sys_sem_signal>
    }
    return ERR_OK;
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	e03c      	b.n	8011032 <lwip_netconn_do_close_internal+0x2ae>
 8010fb8:	080232ec 	.word	0x080232ec
 8010fbc:	080235c0 	.word	0x080235c0
 8010fc0:	08023330 	.word	0x08023330
 8010fc4:	080235d0 	.word	0x080235d0
 8010fc8:	080235f0 	.word	0x080235f0
 8010fcc:	08023614 	.word	0x08023614
 8010fd0:	08023454 	.word	0x08023454
  }
  if (!close_finished) {
 8010fd4:	7d7b      	ldrb	r3, [r7, #21]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d11e      	bne.n	8011018 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8010fda:	693b      	ldr	r3, [r7, #16]
 8010fdc:	7d1b      	ldrb	r3, [r3, #20]
 8010fde:	2b01      	cmp	r3, #1
 8010fe0:	d106      	bne.n	8010ff0 <lwip_netconn_do_close_internal+0x26c>
 8010fe2:	4b16      	ldr	r3, [pc, #88]	@ (801103c <lwip_netconn_do_close_internal+0x2b8>)
 8010fe4:	f240 4241 	movw	r2, #1089	@ 0x441
 8010fe8:	4915      	ldr	r1, [pc, #84]	@ (8011040 <lwip_netconn_do_close_internal+0x2bc>)
 8010fea:	4816      	ldr	r0, [pc, #88]	@ (8011044 <lwip_netconn_do_close_internal+0x2c0>)
 8010fec:	f00f fcca 	bl	8020984 <iprintf>
    if (shut_tx) {
 8010ff0:	7b7b      	ldrb	r3, [r7, #13]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d003      	beq.n	8010ffe <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8010ff6:	4914      	ldr	r1, [pc, #80]	@ (8011048 <lwip_netconn_do_close_internal+0x2c4>)
 8010ff8:	6938      	ldr	r0, [r7, #16]
 8010ffa:	f004 ffaf 	bl	8015f5c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8010ffe:	2201      	movs	r2, #1
 8011000:	4912      	ldr	r1, [pc, #72]	@ (801104c <lwip_netconn_do_close_internal+0x2c8>)
 8011002:	6938      	ldr	r0, [r7, #16]
 8011004:	f005 f806 	bl	8016014 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8011008:	4911      	ldr	r1, [pc, #68]	@ (8011050 <lwip_netconn_do_close_internal+0x2cc>)
 801100a:	6938      	ldr	r0, [r7, #16]
 801100c:	f004 ffc8 	bl	8015fa0 <tcp_err>
    tcp_arg(tpcb, conn);
 8011010:	6879      	ldr	r1, [r7, #4]
 8011012:	6938      	ldr	r0, [r7, #16]
 8011014:	f004 ff6e 	bl	8015ef4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8011018:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d106      	bne.n	801102e <lwip_netconn_do_close_internal+0x2aa>
 8011020:	4b06      	ldr	r3, [pc, #24]	@ (801103c <lwip_netconn_do_close_internal+0x2b8>)
 8011022:	f240 424d 	movw	r2, #1101	@ 0x44d
 8011026:	490b      	ldr	r1, [pc, #44]	@ (8011054 <lwip_netconn_do_close_internal+0x2d0>)
 8011028:	4806      	ldr	r0, [pc, #24]	@ (8011044 <lwip_netconn_do_close_internal+0x2c0>)
 801102a:	f00f fcab 	bl	8020984 <iprintf>
  return err;
 801102e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011032:	4618      	mov	r0, r3
 8011034:	3718      	adds	r7, #24
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}
 801103a:	bf00      	nop
 801103c:	080232ec 	.word	0x080232ec
 8011040:	08023628 	.word	0x08023628
 8011044:	08023330 	.word	0x08023330
 8011048:	08010775 	.word	0x08010775
 801104c:	080106ad 	.word	0x080106ad
 8011050:	0801081d 	.word	0x0801081d
 8011054:	0802364c 	.word	0x0802364c

08011058 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b084      	sub	sp, #16
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	785b      	ldrb	r3, [r3, #1]
 801106a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 801106c:	7afb      	ldrb	r3, [r7, #11]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d00d      	beq.n	801108e <lwip_netconn_do_delconn+0x36>
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801107c:	2b10      	cmp	r3, #16
 801107e:	d006      	beq.n	801108e <lwip_netconn_do_delconn+0x36>
 8011080:	4b60      	ldr	r3, [pc, #384]	@ (8011204 <lwip_netconn_do_delconn+0x1ac>)
 8011082:	f240 425e 	movw	r2, #1118	@ 0x45e
 8011086:	4960      	ldr	r1, [pc, #384]	@ (8011208 <lwip_netconn_do_delconn+0x1b0>)
 8011088:	4860      	ldr	r0, [pc, #384]	@ (801120c <lwip_netconn_do_delconn+0x1b4>)
 801108a:	f00f fc7b 	bl	8020984 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 801108e:	7afb      	ldrb	r3, [r7, #11]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d005      	beq.n	80110a0 <lwip_netconn_do_delconn+0x48>
 8011094:	7afb      	ldrb	r3, [r7, #11]
 8011096:	2b02      	cmp	r3, #2
 8011098:	d002      	beq.n	80110a0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 801109a:	7afb      	ldrb	r3, [r7, #11]
 801109c:	2b03      	cmp	r3, #3
 801109e:	d109      	bne.n	80110b4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80110a0:	7afb      	ldrb	r3, [r7, #11]
 80110a2:	2b03      	cmp	r3, #3
 80110a4:	d10a      	bne.n	80110bc <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	7f1b      	ldrb	r3, [r3, #28]
 80110ac:	f003 0304 	and.w	r3, r3, #4
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d103      	bne.n	80110bc <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	22fb      	movs	r2, #251	@ 0xfb
 80110b8:	711a      	strb	r2, [r3, #4]
 80110ba:	e097      	b.n	80111ec <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80110bc:	7afb      	ldrb	r3, [r7, #11]
 80110be:	2b03      	cmp	r3, #3
 80110c0:	d10d      	bne.n	80110de <lwip_netconn_do_delconn+0x86>
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	7f1b      	ldrb	r3, [r3, #28]
 80110c8:	f003 0304 	and.w	r3, r3, #4
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d106      	bne.n	80110de <lwip_netconn_do_delconn+0x86>
 80110d0:	4b4c      	ldr	r3, [pc, #304]	@ (8011204 <lwip_netconn_do_delconn+0x1ac>)
 80110d2:	f240 427a 	movw	r2, #1146	@ 0x47a
 80110d6:	494e      	ldr	r1, [pc, #312]	@ (8011210 <lwip_netconn_do_delconn+0x1b8>)
 80110d8:	484c      	ldr	r0, [pc, #304]	@ (801120c <lwip_netconn_do_delconn+0x1b4>)
 80110da:	f00f fc53 	bl	8020984 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	2200      	movs	r2, #0
 80110e2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	4618      	mov	r0, r3
 80110ea:	f7ff fdcd 	bl	8010c88 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	685b      	ldr	r3, [r3, #4]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d05f      	beq.n	80111b8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	781b      	ldrb	r3, [r3, #0]
 80110fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011102:	2b10      	cmp	r3, #16
 8011104:	d00d      	beq.n	8011122 <lwip_netconn_do_delconn+0xca>
 8011106:	2b20      	cmp	r3, #32
 8011108:	d151      	bne.n	80111ae <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	685b      	ldr	r3, [r3, #4]
 8011110:	2200      	movs	r2, #0
 8011112:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	685b      	ldr	r3, [r3, #4]
 801111a:	4618      	mov	r0, r3
 801111c:	f00a f9ea 	bl	801b4f4 <udp_remove>
          break;
 8011120:	e046      	b.n	80111b0 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	6a1b      	ldr	r3, [r3, #32]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d006      	beq.n	801113a <lwip_netconn_do_delconn+0xe2>
 801112c:	4b35      	ldr	r3, [pc, #212]	@ (8011204 <lwip_netconn_do_delconn+0x1ac>)
 801112e:	f240 4294 	movw	r2, #1172	@ 0x494
 8011132:	4938      	ldr	r1, [pc, #224]	@ (8011214 <lwip_netconn_do_delconn+0x1bc>)
 8011134:	4835      	ldr	r0, [pc, #212]	@ (801120c <lwip_netconn_do_delconn+0x1b4>)
 8011136:	f00f fc25 	bl	8020984 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	2204      	movs	r2, #4
 8011140:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	2203      	movs	r2, #3
 8011146:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	68fa      	ldr	r2, [r7, #12]
 801114e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	2100      	movs	r1, #0
 8011156:	4618      	mov	r0, r3
 8011158:	f7ff fe14 	bl	8010d84 <lwip_netconn_do_close_internal>
 801115c:	4603      	mov	r3, r0
 801115e:	2b00      	cmp	r3, #0
 8011160:	d04b      	beq.n	80111fa <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	785b      	ldrb	r3, [r3, #1]
 8011168:	2b04      	cmp	r3, #4
 801116a:	d006      	beq.n	801117a <lwip_netconn_do_delconn+0x122>
 801116c:	4b25      	ldr	r3, [pc, #148]	@ (8011204 <lwip_netconn_do_delconn+0x1ac>)
 801116e:	f240 429a 	movw	r2, #1178	@ 0x49a
 8011172:	4929      	ldr	r1, [pc, #164]	@ (8011218 <lwip_netconn_do_delconn+0x1c0>)
 8011174:	4825      	ldr	r0, [pc, #148]	@ (801120c <lwip_netconn_do_delconn+0x1b4>)
 8011176:	f00f fc05 	bl	8020984 <iprintf>
            UNLOCK_TCPIP_CORE();
 801117a:	4828      	ldr	r0, [pc, #160]	@ (801121c <lwip_netconn_do_delconn+0x1c4>)
 801117c:	f00e fe81 	bl	801fe82 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	330c      	adds	r3, #12
 8011186:	2100      	movs	r1, #0
 8011188:	4618      	mov	r0, r3
 801118a:	f00e fde0 	bl	801fd4e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 801118e:	4823      	ldr	r0, [pc, #140]	@ (801121c <lwip_netconn_do_delconn+0x1c4>)
 8011190:	f00e fe68 	bl	801fe64 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	785b      	ldrb	r3, [r3, #1]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d02d      	beq.n	80111fa <lwip_netconn_do_delconn+0x1a2>
 801119e:	4b19      	ldr	r3, [pc, #100]	@ (8011204 <lwip_netconn_do_delconn+0x1ac>)
 80111a0:	f240 429e 	movw	r2, #1182	@ 0x49e
 80111a4:	491c      	ldr	r1, [pc, #112]	@ (8011218 <lwip_netconn_do_delconn+0x1c0>)
 80111a6:	4819      	ldr	r0, [pc, #100]	@ (801120c <lwip_netconn_do_delconn+0x1b4>)
 80111a8:	f00f fbec 	bl	8020984 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80111ac:	e025      	b.n	80111fa <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80111ae:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	2200      	movs	r2, #0
 80111b6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d007      	beq.n	80111d2 <lwip_netconn_do_delconn+0x17a>
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111c8:	68fa      	ldr	r2, [r7, #12]
 80111ca:	6810      	ldr	r0, [r2, #0]
 80111cc:	2200      	movs	r2, #0
 80111ce:	2100      	movs	r1, #0
 80111d0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d007      	beq.n	80111ec <lwip_netconn_do_delconn+0x194>
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111e2:	68fa      	ldr	r2, [r7, #12]
 80111e4:	6810      	ldr	r0, [r2, #0]
 80111e6:	2200      	movs	r2, #0
 80111e8:	2102      	movs	r1, #2
 80111ea:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	330c      	adds	r3, #12
 80111f2:	4618      	mov	r0, r3
 80111f4:	f00e fdf6 	bl	801fde4 <sys_sem_valid>
 80111f8:	e000      	b.n	80111fc <lwip_netconn_do_delconn+0x1a4>
          return;
 80111fa:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80111fc:	3710      	adds	r7, #16
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}
 8011202:	bf00      	nop
 8011204:	080232ec 	.word	0x080232ec
 8011208:	0802365c 	.word	0x0802365c
 801120c:	08023330 	.word	0x08023330
 8011210:	08023670 	.word	0x08023670
 8011214:	08023690 	.word	0x08023690
 8011218:	080236ac 	.word	0x080236ac
 801121c:	240099d8 	.word	0x240099d8

08011220 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b088      	sub	sp, #32
 8011224:	af00      	add	r7, sp, #0
 8011226:	60f8      	str	r0, [r7, #12]
 8011228:	60b9      	str	r1, [r7, #8]
 801122a:	4613      	mov	r3, r2
 801122c:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 801122e:	2300      	movs	r3, #0
 8011230:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8011236:	69bb      	ldr	r3, [r7, #24]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d102      	bne.n	8011242 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 801123c:	f06f 0305 	mvn.w	r3, #5
 8011240:	e070      	b.n	8011324 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8011242:	69bb      	ldr	r3, [r7, #24]
 8011244:	785b      	ldrb	r3, [r3, #1]
 8011246:	2b03      	cmp	r3, #3
 8011248:	d006      	beq.n	8011258 <lwip_netconn_do_connected+0x38>
 801124a:	4b38      	ldr	r3, [pc, #224]	@ (801132c <lwip_netconn_do_connected+0x10c>)
 801124c:	f240 5223 	movw	r2, #1315	@ 0x523
 8011250:	4937      	ldr	r1, [pc, #220]	@ (8011330 <lwip_netconn_do_connected+0x110>)
 8011252:	4838      	ldr	r0, [pc, #224]	@ (8011334 <lwip_netconn_do_connected+0x114>)
 8011254:	f00f fb96 	bl	8020984 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8011258:	69bb      	ldr	r3, [r7, #24]
 801125a:	6a1b      	ldr	r3, [r3, #32]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d10c      	bne.n	801127a <lwip_netconn_do_connected+0x5a>
 8011260:	69bb      	ldr	r3, [r7, #24]
 8011262:	7f1b      	ldrb	r3, [r3, #28]
 8011264:	f003 0304 	and.w	r3, r3, #4
 8011268:	2b00      	cmp	r3, #0
 801126a:	d106      	bne.n	801127a <lwip_netconn_do_connected+0x5a>
 801126c:	4b2f      	ldr	r3, [pc, #188]	@ (801132c <lwip_netconn_do_connected+0x10c>)
 801126e:	f240 5224 	movw	r2, #1316	@ 0x524
 8011272:	4931      	ldr	r1, [pc, #196]	@ (8011338 <lwip_netconn_do_connected+0x118>)
 8011274:	482f      	ldr	r0, [pc, #188]	@ (8011334 <lwip_netconn_do_connected+0x114>)
 8011276:	f00f fb85 	bl	8020984 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 801127a:	69bb      	ldr	r3, [r7, #24]
 801127c:	6a1b      	ldr	r3, [r3, #32]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d008      	beq.n	8011294 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8011282:	69bb      	ldr	r3, [r7, #24]
 8011284:	6a1b      	ldr	r3, [r3, #32]
 8011286:	79fa      	ldrb	r2, [r7, #7]
 8011288:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801128a:	69bb      	ldr	r3, [r7, #24]
 801128c:	6a1b      	ldr	r3, [r3, #32]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	330c      	adds	r3, #12
 8011292:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8011294:	69bb      	ldr	r3, [r7, #24]
 8011296:	781b      	ldrb	r3, [r3, #0]
 8011298:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801129c:	2b10      	cmp	r3, #16
 801129e:	d106      	bne.n	80112ae <lwip_netconn_do_connected+0x8e>
 80112a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d102      	bne.n	80112ae <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 80112a8:	69b8      	ldr	r0, [r7, #24]
 80112aa:	f7ff fb8d 	bl	80109c8 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 80112ae:	69bb      	ldr	r3, [r7, #24]
 80112b0:	7f1b      	ldrb	r3, [r3, #28]
 80112b2:	f003 0304 	and.w	r3, r3, #4
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	bf0c      	ite	eq
 80112ba:	2301      	moveq	r3, #1
 80112bc:	2300      	movne	r3, #0
 80112be:	b2db      	uxtb	r3, r3
 80112c0:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 80112c2:	69bb      	ldr	r3, [r7, #24]
 80112c4:	7f1b      	ldrb	r3, [r3, #28]
 80112c6:	f023 0304 	bic.w	r3, r3, #4
 80112ca:	b2da      	uxtb	r2, r3
 80112cc:	69bb      	ldr	r3, [r7, #24]
 80112ce:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 80112d0:	697b      	ldr	r3, [r7, #20]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d002      	beq.n	80112dc <lwip_netconn_do_connected+0xbc>
 80112d6:	69fb      	ldr	r3, [r7, #28]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d10c      	bne.n	80112f6 <lwip_netconn_do_connected+0xd6>
 80112dc:	697b      	ldr	r3, [r7, #20]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d102      	bne.n	80112e8 <lwip_netconn_do_connected+0xc8>
 80112e2:	69fb      	ldr	r3, [r7, #28]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d006      	beq.n	80112f6 <lwip_netconn_do_connected+0xd6>
 80112e8:	4b10      	ldr	r3, [pc, #64]	@ (801132c <lwip_netconn_do_connected+0x10c>)
 80112ea:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 80112ee:	4913      	ldr	r1, [pc, #76]	@ (801133c <lwip_netconn_do_connected+0x11c>)
 80112f0:	4810      	ldr	r0, [pc, #64]	@ (8011334 <lwip_netconn_do_connected+0x114>)
 80112f2:	f00f fb47 	bl	8020984 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 80112f6:	69bb      	ldr	r3, [r7, #24]
 80112f8:	2200      	movs	r2, #0
 80112fa:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 80112fc:	69bb      	ldr	r3, [r7, #24]
 80112fe:	2200      	movs	r2, #0
 8011300:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011302:	69bb      	ldr	r3, [r7, #24]
 8011304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011306:	2b00      	cmp	r3, #0
 8011308:	d005      	beq.n	8011316 <lwip_netconn_do_connected+0xf6>
 801130a:	69bb      	ldr	r3, [r7, #24]
 801130c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801130e:	2200      	movs	r2, #0
 8011310:	2102      	movs	r1, #2
 8011312:	69b8      	ldr	r0, [r7, #24]
 8011314:	4798      	blx	r3

  if (was_blocking) {
 8011316:	697b      	ldr	r3, [r7, #20]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d002      	beq.n	8011322 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 801131c:	69f8      	ldr	r0, [r7, #28]
 801131e:	f00e fd47 	bl	801fdb0 <sys_sem_signal>
  }
  return ERR_OK;
 8011322:	2300      	movs	r3, #0
}
 8011324:	4618      	mov	r0, r3
 8011326:	3720      	adds	r7, #32
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}
 801132c:	080232ec 	.word	0x080232ec
 8011330:	080236b4 	.word	0x080236b4
 8011334:	08023330 	.word	0x08023330
 8011338:	080236d4 	.word	0x080236d4
 801133c:	08023714 	.word	0x08023714

08011340 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b086      	sub	sp, #24
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 801134c:	693b      	ldr	r3, [r7, #16]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d102      	bne.n	801135c <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8011356:	23f1      	movs	r3, #241	@ 0xf1
 8011358:	75fb      	strb	r3, [r7, #23]
 801135a:	e09b      	b.n	8011494 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801135c:	693b      	ldr	r3, [r7, #16]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	781b      	ldrb	r3, [r3, #0]
 8011362:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011366:	2b10      	cmp	r3, #16
 8011368:	d00f      	beq.n	801138a <lwip_netconn_do_connect+0x4a>
 801136a:	2b20      	cmp	r3, #32
 801136c:	f040 8087 	bne.w	801147e <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	6858      	ldr	r0, [r3, #4]
 8011376:	693b      	ldr	r3, [r7, #16]
 8011378:	6899      	ldr	r1, [r3, #8]
 801137a:	693b      	ldr	r3, [r7, #16]
 801137c:	899b      	ldrh	r3, [r3, #12]
 801137e:	461a      	mov	r2, r3
 8011380:	f00a f802 	bl	801b388 <udp_connect>
 8011384:	4603      	mov	r3, r0
 8011386:	75fb      	strb	r3, [r7, #23]
        break;
 8011388:	e084      	b.n	8011494 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	785b      	ldrb	r3, [r3, #1]
 8011390:	2b03      	cmp	r3, #3
 8011392:	d102      	bne.n	801139a <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8011394:	23f7      	movs	r3, #247	@ 0xf7
 8011396:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8011398:	e07b      	b.n	8011492 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 801139a:	693b      	ldr	r3, [r7, #16]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	785b      	ldrb	r3, [r3, #1]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d002      	beq.n	80113aa <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 80113a4:	23f6      	movs	r3, #246	@ 0xf6
 80113a6:	75fb      	strb	r3, [r7, #23]
        break;
 80113a8:	e073      	b.n	8011492 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 80113aa:	693b      	ldr	r3, [r7, #16]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	4618      	mov	r0, r3
 80113b0:	f7ff fb0a 	bl	80109c8 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 80113b4:	693b      	ldr	r3, [r7, #16]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	6858      	ldr	r0, [r3, #4]
 80113ba:	693b      	ldr	r3, [r7, #16]
 80113bc:	6899      	ldr	r1, [r3, #8]
 80113be:	693b      	ldr	r3, [r7, #16]
 80113c0:	899a      	ldrh	r2, [r3, #12]
 80113c2:	4b38      	ldr	r3, [pc, #224]	@ (80114a4 <lwip_netconn_do_connect+0x164>)
 80113c4:	f003 fe4c 	bl	8015060 <tcp_connect>
 80113c8:	4603      	mov	r3, r0
 80113ca:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 80113cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d15e      	bne.n	8011492 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 80113d4:	693b      	ldr	r3, [r7, #16]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	7f1b      	ldrb	r3, [r3, #28]
 80113da:	f003 0302 	and.w	r3, r3, #2
 80113de:	2b00      	cmp	r3, #0
 80113e0:	bf14      	ite	ne
 80113e2:	2301      	movne	r3, #1
 80113e4:	2300      	moveq	r3, #0
 80113e6:	b2db      	uxtb	r3, r3
 80113e8:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 80113ea:	693b      	ldr	r3, [r7, #16]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	2203      	movs	r2, #3
 80113f0:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 80113f2:	7bfb      	ldrb	r3, [r7, #15]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d009      	beq.n	801140c <lwip_netconn_do_connect+0xcc>
 80113f8:	693b      	ldr	r3, [r7, #16]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	7f1a      	ldrb	r2, [r3, #28]
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	f042 0204 	orr.w	r2, r2, #4
 8011406:	b2d2      	uxtb	r2, r2
 8011408:	771a      	strb	r2, [r3, #28]
 801140a:	e008      	b.n	801141e <lwip_netconn_do_connect+0xde>
 801140c:	693b      	ldr	r3, [r7, #16]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	7f1a      	ldrb	r2, [r3, #28]
 8011412:	693b      	ldr	r3, [r7, #16]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	f022 0204 	bic.w	r2, r2, #4
 801141a:	b2d2      	uxtb	r2, r2
 801141c:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 801141e:	7bfb      	ldrb	r3, [r7, #15]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d002      	beq.n	801142a <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 8011424:	23fb      	movs	r3, #251	@ 0xfb
 8011426:	75fb      	strb	r3, [r7, #23]
        break;
 8011428:	e033      	b.n	8011492 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	693a      	ldr	r2, [r7, #16]
 8011430:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8011432:	693b      	ldr	r3, [r7, #16]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	785b      	ldrb	r3, [r3, #1]
 8011438:	2b03      	cmp	r3, #3
 801143a:	d006      	beq.n	801144a <lwip_netconn_do_connect+0x10a>
 801143c:	4b1a      	ldr	r3, [pc, #104]	@ (80114a8 <lwip_netconn_do_connect+0x168>)
 801143e:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 8011442:	491a      	ldr	r1, [pc, #104]	@ (80114ac <lwip_netconn_do_connect+0x16c>)
 8011444:	481a      	ldr	r0, [pc, #104]	@ (80114b0 <lwip_netconn_do_connect+0x170>)
 8011446:	f00f fa9d 	bl	8020984 <iprintf>
              UNLOCK_TCPIP_CORE();
 801144a:	481a      	ldr	r0, [pc, #104]	@ (80114b4 <lwip_netconn_do_connect+0x174>)
 801144c:	f00e fd19 	bl	801fe82 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011450:	693b      	ldr	r3, [r7, #16]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	330c      	adds	r3, #12
 8011456:	2100      	movs	r1, #0
 8011458:	4618      	mov	r0, r3
 801145a:	f00e fc78 	bl	801fd4e <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 801145e:	4815      	ldr	r0, [pc, #84]	@ (80114b4 <lwip_netconn_do_connect+0x174>)
 8011460:	f00e fd00 	bl	801fe64 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	785b      	ldrb	r3, [r3, #1]
 801146a:	2b03      	cmp	r3, #3
 801146c:	d116      	bne.n	801149c <lwip_netconn_do_connect+0x15c>
 801146e:	4b0e      	ldr	r3, [pc, #56]	@ (80114a8 <lwip_netconn_do_connect+0x168>)
 8011470:	f240 5274 	movw	r2, #1396	@ 0x574
 8011474:	490d      	ldr	r1, [pc, #52]	@ (80114ac <lwip_netconn_do_connect+0x16c>)
 8011476:	480e      	ldr	r0, [pc, #56]	@ (80114b0 <lwip_netconn_do_connect+0x170>)
 8011478:	f00f fa84 	bl	8020984 <iprintf>
              return;
 801147c:	e00e      	b.n	801149c <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 801147e:	4b0a      	ldr	r3, [pc, #40]	@ (80114a8 <lwip_netconn_do_connect+0x168>)
 8011480:	f240 527d 	movw	r2, #1405	@ 0x57d
 8011484:	490c      	ldr	r1, [pc, #48]	@ (80114b8 <lwip_netconn_do_connect+0x178>)
 8011486:	480a      	ldr	r0, [pc, #40]	@ (80114b0 <lwip_netconn_do_connect+0x170>)
 8011488:	f00f fa7c 	bl	8020984 <iprintf>
 801148c:	23fa      	movs	r3, #250	@ 0xfa
 801148e:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8011490:	e000      	b.n	8011494 <lwip_netconn_do_connect+0x154>
        break;
 8011492:	bf00      	nop
    }
  }
  msg->err = err;
 8011494:	693b      	ldr	r3, [r7, #16]
 8011496:	7dfa      	ldrb	r2, [r7, #23]
 8011498:	711a      	strb	r2, [r3, #4]
 801149a:	e000      	b.n	801149e <lwip_netconn_do_connect+0x15e>
              return;
 801149c:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 801149e:	3718      	adds	r7, #24
 80114a0:	46bd      	mov	sp, r7
 80114a2:	bd80      	pop	{r7, pc}
 80114a4:	08011221 	.word	0x08011221
 80114a8:	080232ec 	.word	0x080232ec
 80114ac:	080236ac 	.word	0x080236ac
 80114b0:	08023330 	.word	0x08023330
 80114b4:	240099d8 	.word	0x240099d8
 80114b8:	08023734 	.word	0x08023734

080114bc <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b084      	sub	sp, #16
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	781b      	ldrb	r3, [r3, #0]
 80114ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80114d2:	2b20      	cmp	r3, #32
 80114d4:	d109      	bne.n	80114ea <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	685b      	ldr	r3, [r3, #4]
 80114dc:	4618      	mov	r0, r3
 80114de:	f009 ffc1 	bl	801b464 <udp_disconnect>
    msg->err = ERR_OK;
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	2200      	movs	r2, #0
 80114e6:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 80114e8:	e002      	b.n	80114f0 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	22fa      	movs	r2, #250	@ 0xfa
 80114ee:	711a      	strb	r2, [r3, #4]
}
 80114f0:	bf00      	nop
 80114f2:	3710      	adds	r7, #16
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}

080114f8 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b084      	sub	sp, #16
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8011504:	68bb      	ldr	r3, [r7, #8]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	4618      	mov	r0, r3
 801150a:	f7fe ff3f 	bl	801038c <netconn_err>
 801150e:	4603      	mov	r3, r0
 8011510:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8011512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d134      	bne.n	8011584 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d02d      	beq.n	8011580 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	781b      	ldrb	r3, [r3, #0]
 801152a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801152e:	2b20      	cmp	r3, #32
 8011530:	d123      	bne.n	801157a <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	689b      	ldr	r3, [r3, #8]
 8011536:	689b      	ldr	r3, [r3, #8]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d10c      	bne.n	8011556 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	685a      	ldr	r2, [r3, #4]
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	689b      	ldr	r3, [r3, #8]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	4619      	mov	r1, r3
 801154a:	4610      	mov	r0, r2
 801154c:	f009 fcaa 	bl	801aea4 <udp_send>
 8011550:	4603      	mov	r3, r0
 8011552:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8011554:	e016      	b.n	8011584 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	6858      	ldr	r0, [r3, #4]
 801155c:	68bb      	ldr	r3, [r7, #8]
 801155e:	689b      	ldr	r3, [r3, #8]
 8011560:	6819      	ldr	r1, [r3, #0]
 8011562:	68bb      	ldr	r3, [r7, #8]
 8011564:	689b      	ldr	r3, [r3, #8]
 8011566:	f103 0208 	add.w	r2, r3, #8
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	689b      	ldr	r3, [r3, #8]
 801156e:	899b      	ldrh	r3, [r3, #12]
 8011570:	f009 fccc 	bl	801af0c <udp_sendto>
 8011574:	4603      	mov	r3, r0
 8011576:	73fb      	strb	r3, [r7, #15]
          break;
 8011578:	e004      	b.n	8011584 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 801157a:	23f5      	movs	r3, #245	@ 0xf5
 801157c:	73fb      	strb	r3, [r7, #15]
          break;
 801157e:	e001      	b.n	8011584 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8011580:	23f5      	movs	r3, #245	@ 0xf5
 8011582:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	7bfa      	ldrb	r2, [r7, #15]
 8011588:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801158a:	bf00      	nop
 801158c:	3710      	adds	r7, #16
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
	...

08011594 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b088      	sub	sp, #32
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
 801159c:	460b      	mov	r3, r1
 801159e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80115a0:	2300      	movs	r3, #0
 80115a2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d106      	bne.n	80115b8 <lwip_netconn_do_writemore+0x24>
 80115aa:	4b96      	ldr	r3, [pc, #600]	@ (8011804 <lwip_netconn_do_writemore+0x270>)
 80115ac:	f240 6273 	movw	r2, #1651	@ 0x673
 80115b0:	4995      	ldr	r1, [pc, #596]	@ (8011808 <lwip_netconn_do_writemore+0x274>)
 80115b2:	4896      	ldr	r0, [pc, #600]	@ (801180c <lwip_netconn_do_writemore+0x278>)
 80115b4:	f00f f9e6 	bl	8020984 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	785b      	ldrb	r3, [r3, #1]
 80115bc:	2b01      	cmp	r3, #1
 80115be:	d006      	beq.n	80115ce <lwip_netconn_do_writemore+0x3a>
 80115c0:	4b90      	ldr	r3, [pc, #576]	@ (8011804 <lwip_netconn_do_writemore+0x270>)
 80115c2:	f240 6274 	movw	r2, #1652	@ 0x674
 80115c6:	4992      	ldr	r1, [pc, #584]	@ (8011810 <lwip_netconn_do_writemore+0x27c>)
 80115c8:	4890      	ldr	r0, [pc, #576]	@ (801180c <lwip_netconn_do_writemore+0x278>)
 80115ca:	f00f f9db 	bl	8020984 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	6a1b      	ldr	r3, [r3, #32]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d106      	bne.n	80115e4 <lwip_netconn_do_writemore+0x50>
 80115d6:	4b8b      	ldr	r3, [pc, #556]	@ (8011804 <lwip_netconn_do_writemore+0x270>)
 80115d8:	f240 6275 	movw	r2, #1653	@ 0x675
 80115dc:	498d      	ldr	r1, [pc, #564]	@ (8011814 <lwip_netconn_do_writemore+0x280>)
 80115de:	488b      	ldr	r0, [pc, #556]	@ (801180c <lwip_netconn_do_writemore+0x278>)
 80115e0:	f00f f9d0 	bl	8020984 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	685b      	ldr	r3, [r3, #4]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d106      	bne.n	80115fa <lwip_netconn_do_writemore+0x66>
 80115ec:	4b85      	ldr	r3, [pc, #532]	@ (8011804 <lwip_netconn_do_writemore+0x270>)
 80115ee:	f240 6276 	movw	r2, #1654	@ 0x676
 80115f2:	4989      	ldr	r1, [pc, #548]	@ (8011818 <lwip_netconn_do_writemore+0x284>)
 80115f4:	4885      	ldr	r0, [pc, #532]	@ (801180c <lwip_netconn_do_writemore+0x278>)
 80115f6:	f00f f9c5 	bl	8020984 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	6a1b      	ldr	r3, [r3, #32]
 80115fe:	699a      	ldr	r2, [r3, #24]
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	6a1b      	ldr	r3, [r3, #32]
 8011604:	695b      	ldr	r3, [r3, #20]
 8011606:	429a      	cmp	r2, r3
 8011608:	d306      	bcc.n	8011618 <lwip_netconn_do_writemore+0x84>
 801160a:	4b7e      	ldr	r3, [pc, #504]	@ (8011804 <lwip_netconn_do_writemore+0x270>)
 801160c:	f240 6277 	movw	r2, #1655	@ 0x677
 8011610:	4982      	ldr	r1, [pc, #520]	@ (801181c <lwip_netconn_do_writemore+0x288>)
 8011612:	487e      	ldr	r0, [pc, #504]	@ (801180c <lwip_netconn_do_writemore+0x278>)
 8011614:	f00f f9b6 	bl	8020984 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	6a1b      	ldr	r3, [r3, #32]
 801161c:	899b      	ldrh	r3, [r3, #12]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d106      	bne.n	8011630 <lwip_netconn_do_writemore+0x9c>
 8011622:	4b78      	ldr	r3, [pc, #480]	@ (8011804 <lwip_netconn_do_writemore+0x270>)
 8011624:	f240 6279 	movw	r2, #1657	@ 0x679
 8011628:	497d      	ldr	r1, [pc, #500]	@ (8011820 <lwip_netconn_do_writemore+0x28c>)
 801162a:	4878      	ldr	r0, [pc, #480]	@ (801180c <lwip_netconn_do_writemore+0x278>)
 801162c:	f00f f9aa 	bl	8020984 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	6a1b      	ldr	r3, [r3, #32]
 8011634:	7f1b      	ldrb	r3, [r3, #28]
 8011636:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	7f1b      	ldrb	r3, [r3, #28]
 801163c:	f003 0302 	and.w	r3, r3, #2
 8011640:	2b00      	cmp	r3, #0
 8011642:	d104      	bne.n	801164e <lwip_netconn_do_writemore+0xba>
 8011644:	7ebb      	ldrb	r3, [r7, #26]
 8011646:	f003 0304 	and.w	r3, r3, #4
 801164a:	2b00      	cmp	r3, #0
 801164c:	d001      	beq.n	8011652 <lwip_netconn_do_writemore+0xbe>
 801164e:	2301      	movs	r3, #1
 8011650:	e000      	b.n	8011654 <lwip_netconn_do_writemore+0xc0>
 8011652:	2300      	movs	r3, #0
 8011654:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	6a1b      	ldr	r3, [r3, #32]
 801165a:	689b      	ldr	r3, [r3, #8]
 801165c:	681a      	ldr	r2, [r3, #0]
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	6a1b      	ldr	r3, [r3, #32]
 8011662:	691b      	ldr	r3, [r3, #16]
 8011664:	4413      	add	r3, r2
 8011666:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6a1b      	ldr	r3, [r3, #32]
 801166c:	689b      	ldr	r3, [r3, #8]
 801166e:	685a      	ldr	r2, [r3, #4]
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	6a1b      	ldr	r3, [r3, #32]
 8011674:	691b      	ldr	r3, [r3, #16]
 8011676:	1ad3      	subs	r3, r2, r3
 8011678:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 801167a:	693b      	ldr	r3, [r7, #16]
 801167c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011680:	d307      	bcc.n	8011692 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8011682:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011686:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8011688:	7ebb      	ldrb	r3, [r7, #26]
 801168a:	f043 0302 	orr.w	r3, r3, #2
 801168e:	76bb      	strb	r3, [r7, #26]
 8011690:	e001      	b.n	8011696 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8011692:	693b      	ldr	r3, [r7, #16]
 8011694:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	685b      	ldr	r3, [r3, #4]
 801169a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801169e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 80116a0:	89fa      	ldrh	r2, [r7, #14]
 80116a2:	8bbb      	ldrh	r3, [r7, #28]
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d216      	bcs.n	80116d6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 80116a8:	89fb      	ldrh	r3, [r7, #14]
 80116aa:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 80116ac:	7e3b      	ldrb	r3, [r7, #24]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d00d      	beq.n	80116ce <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 80116b2:	8bbb      	ldrh	r3, [r7, #28]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d10e      	bne.n	80116d6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	6a1b      	ldr	r3, [r3, #32]
 80116bc:	699b      	ldr	r3, [r3, #24]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d102      	bne.n	80116c8 <lwip_netconn_do_writemore+0x134>
 80116c2:	f06f 0306 	mvn.w	r3, #6
 80116c6:	e000      	b.n	80116ca <lwip_netconn_do_writemore+0x136>
 80116c8:	2300      	movs	r3, #0
 80116ca:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80116cc:	e07d      	b.n	80117ca <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80116ce:	7ebb      	ldrb	r3, [r7, #26]
 80116d0:	f043 0302 	orr.w	r3, r3, #2
 80116d4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	6a1b      	ldr	r3, [r3, #32]
 80116da:	691a      	ldr	r2, [r3, #16]
 80116dc:	8bbb      	ldrh	r3, [r7, #28]
 80116de:	441a      	add	r2, r3
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	6a1b      	ldr	r3, [r3, #32]
 80116e4:	689b      	ldr	r3, [r3, #8]
 80116e6:	685b      	ldr	r3, [r3, #4]
 80116e8:	429a      	cmp	r2, r3
 80116ea:	d906      	bls.n	80116fa <lwip_netconn_do_writemore+0x166>
 80116ec:	4b45      	ldr	r3, [pc, #276]	@ (8011804 <lwip_netconn_do_writemore+0x270>)
 80116ee:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80116f2:	494c      	ldr	r1, [pc, #304]	@ (8011824 <lwip_netconn_do_writemore+0x290>)
 80116f4:	4845      	ldr	r0, [pc, #276]	@ (801180c <lwip_netconn_do_writemore+0x278>)
 80116f6:	f00f f945 	bl	8020984 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80116fa:	8bbb      	ldrh	r3, [r7, #28]
 80116fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011700:	4293      	cmp	r3, r2
 8011702:	d103      	bne.n	801170c <lwip_netconn_do_writemore+0x178>
 8011704:	693b      	ldr	r3, [r7, #16]
 8011706:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801170a:	d209      	bcs.n	8011720 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801170c:	693b      	ldr	r3, [r7, #16]
 801170e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8011710:	8bba      	ldrh	r2, [r7, #28]
 8011712:	429a      	cmp	r2, r3
 8011714:	d10b      	bne.n	801172e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6a1b      	ldr	r3, [r3, #32]
 801171a:	899b      	ldrh	r3, [r3, #12]
 801171c:	2b01      	cmp	r3, #1
 801171e:	d906      	bls.n	801172e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8011720:	2301      	movs	r3, #1
 8011722:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8011724:	7ebb      	ldrb	r3, [r7, #26]
 8011726:	f043 0302 	orr.w	r3, r3, #2
 801172a:	76bb      	strb	r3, [r7, #26]
 801172c:	e001      	b.n	8011732 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 801172e:	2300      	movs	r3, #0
 8011730:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	6858      	ldr	r0, [r3, #4]
 8011736:	7ebb      	ldrb	r3, [r7, #26]
 8011738:	8bba      	ldrh	r2, [r7, #28]
 801173a:	6979      	ldr	r1, [r7, #20]
 801173c:	f007 fb16 	bl	8018d6c <tcp_write>
 8011740:	4603      	mov	r3, r0
 8011742:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8011744:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d12c      	bne.n	80117a6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	6a1b      	ldr	r3, [r3, #32]
 8011750:	6999      	ldr	r1, [r3, #24]
 8011752:	8bba      	ldrh	r2, [r7, #28]
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	6a1b      	ldr	r3, [r3, #32]
 8011758:	440a      	add	r2, r1
 801175a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	6a1b      	ldr	r3, [r3, #32]
 8011760:	6919      	ldr	r1, [r3, #16]
 8011762:	8bba      	ldrh	r2, [r7, #28]
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6a1b      	ldr	r3, [r3, #32]
 8011768:	440a      	add	r2, r1
 801176a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	6a1b      	ldr	r3, [r3, #32]
 8011770:	691a      	ldr	r2, [r3, #16]
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	6a1b      	ldr	r3, [r3, #32]
 8011776:	689b      	ldr	r3, [r3, #8]
 8011778:	685b      	ldr	r3, [r3, #4]
 801177a:	429a      	cmp	r2, r3
 801177c:	d113      	bne.n	80117a6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6a1b      	ldr	r3, [r3, #32]
 8011782:	899a      	ldrh	r2, [r3, #12]
 8011784:	3a01      	subs	r2, #1
 8011786:	b292      	uxth	r2, r2
 8011788:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	6a1b      	ldr	r3, [r3, #32]
 801178e:	899b      	ldrh	r3, [r3, #12]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d008      	beq.n	80117a6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	6a1b      	ldr	r3, [r3, #32]
 8011798:	689a      	ldr	r2, [r3, #8]
 801179a:	3208      	adds	r2, #8
 801179c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	6a1b      	ldr	r3, [r3, #32]
 80117a2:	2200      	movs	r2, #0
 80117a4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 80117a6:	7e7b      	ldrb	r3, [r7, #25]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d004      	beq.n	80117b6 <lwip_netconn_do_writemore+0x222>
 80117ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	f43f af50 	beq.w	8011656 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80117b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d004      	beq.n	80117c8 <lwip_netconn_do_writemore+0x234>
 80117be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80117c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117c6:	d146      	bne.n	8011856 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 80117c8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80117ca:	7e3b      	ldrb	r3, [r7, #24]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d02b      	beq.n	8011828 <lwip_netconn_do_writemore+0x294>
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	6a1b      	ldr	r3, [r3, #32]
 80117d4:	699a      	ldr	r2, [r3, #24]
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6a1b      	ldr	r3, [r3, #32]
 80117da:	695b      	ldr	r3, [r3, #20]
 80117dc:	429a      	cmp	r2, r3
 80117de:	d223      	bcs.n	8011828 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d005      	beq.n	80117f4 <lwip_netconn_do_writemore+0x260>
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117ec:	2200      	movs	r2, #0
 80117ee:	2103      	movs	r1, #3
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	7f1b      	ldrb	r3, [r3, #28]
 80117f8:	f043 0310 	orr.w	r3, r3, #16
 80117fc:	b2da      	uxtb	r2, r3
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	771a      	strb	r2, [r3, #28]
 8011802:	e028      	b.n	8011856 <lwip_netconn_do_writemore+0x2c2>
 8011804:	080232ec 	.word	0x080232ec
 8011808:	08023444 	.word	0x08023444
 801180c:	08023330 	.word	0x08023330
 8011810:	0802374c 	.word	0x0802374c
 8011814:	08023454 	.word	0x08023454
 8011818:	0802376c 	.word	0x0802376c
 801181c:	08023784 	.word	0x08023784
 8011820:	080237c4 	.word	0x080237c4
 8011824:	080237ec 	.word	0x080237ec
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	685b      	ldr	r3, [r3, #4]
 801182c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011830:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8011834:	d305      	bcc.n	8011842 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	685b      	ldr	r3, [r3, #4]
 801183a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801183e:	2b04      	cmp	r3, #4
 8011840:	d909      	bls.n	8011856 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011846:	2b00      	cmp	r3, #0
 8011848:	d005      	beq.n	8011856 <lwip_netconn_do_writemore+0x2c2>
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801184e:	2200      	movs	r2, #0
 8011850:	2103      	movs	r1, #3
 8011852:	6878      	ldr	r0, [r7, #4]
 8011854:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8011856:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d11d      	bne.n	801189a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	6a1b      	ldr	r3, [r3, #32]
 8011862:	699a      	ldr	r2, [r3, #24]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	6a1b      	ldr	r3, [r3, #32]
 8011868:	695b      	ldr	r3, [r3, #20]
 801186a:	429a      	cmp	r2, r3
 801186c:	d002      	beq.n	8011874 <lwip_netconn_do_writemore+0x2e0>
 801186e:	7e3b      	ldrb	r3, [r7, #24]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d001      	beq.n	8011878 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8011874:	2301      	movs	r3, #1
 8011876:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	685b      	ldr	r3, [r3, #4]
 801187c:	4618      	mov	r0, r3
 801187e:	f008 f85f 	bl	8019940 <tcp_output>
 8011882:	4603      	mov	r3, r0
 8011884:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8011886:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801188a:	f113 0f04 	cmn.w	r3, #4
 801188e:	d12c      	bne.n	80118ea <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8011890:	7b3b      	ldrb	r3, [r7, #12]
 8011892:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011894:	2301      	movs	r3, #1
 8011896:	76fb      	strb	r3, [r7, #27]
 8011898:	e027      	b.n	80118ea <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 801189a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801189e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118a2:	d120      	bne.n	80118e6 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	685b      	ldr	r3, [r3, #4]
 80118a8:	4618      	mov	r0, r3
 80118aa:	f008 f849 	bl	8019940 <tcp_output>
 80118ae:	4603      	mov	r3, r0
 80118b0:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 80118b2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80118b6:	f113 0f04 	cmn.w	r3, #4
 80118ba:	d104      	bne.n	80118c6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80118bc:	7b7b      	ldrb	r3, [r7, #13]
 80118be:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80118c0:	2301      	movs	r3, #1
 80118c2:	76fb      	strb	r3, [r7, #27]
 80118c4:	e011      	b.n	80118ea <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 80118c6:	7e3b      	ldrb	r3, [r7, #24]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d00e      	beq.n	80118ea <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6a1b      	ldr	r3, [r3, #32]
 80118d0:	699b      	ldr	r3, [r3, #24]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d102      	bne.n	80118dc <lwip_netconn_do_writemore+0x348>
 80118d6:	f06f 0306 	mvn.w	r3, #6
 80118da:	e000      	b.n	80118de <lwip_netconn_do_writemore+0x34a>
 80118dc:	2300      	movs	r3, #0
 80118de:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80118e0:	2301      	movs	r3, #1
 80118e2:	76fb      	strb	r3, [r7, #27]
 80118e4:	e001      	b.n	80118ea <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80118e6:	2301      	movs	r3, #1
 80118e8:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80118ea:	7efb      	ldrb	r3, [r7, #27]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d015      	beq.n	801191c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6a1b      	ldr	r3, [r3, #32]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	330c      	adds	r3, #12
 80118f8:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6a1b      	ldr	r3, [r3, #32]
 80118fe:	7ffa      	ldrb	r2, [r7, #31]
 8011900:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2200      	movs	r2, #0
 8011906:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2200      	movs	r2, #0
 801190c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801190e:	78fb      	ldrb	r3, [r7, #3]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d006      	beq.n	8011922 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8011914:	68b8      	ldr	r0, [r7, #8]
 8011916:	f00e fa4b 	bl	801fdb0 <sys_sem_signal>
 801191a:	e002      	b.n	8011922 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 801191c:	f04f 33ff 	mov.w	r3, #4294967295
 8011920:	e000      	b.n	8011924 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8011922:	2300      	movs	r3, #0
}
 8011924:	4618      	mov	r0, r3
 8011926:	3720      	adds	r7, #32
 8011928:	46bd      	mov	sp, r7
 801192a:	bd80      	pop	{r7, pc}

0801192c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b084      	sub	sp, #16
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8011938:	68bb      	ldr	r3, [r7, #8]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	4618      	mov	r0, r3
 801193e:	f7fe fd25 	bl	801038c <netconn_err>
 8011942:	4603      	mov	r3, r0
 8011944:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8011946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d166      	bne.n	8011a1c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	781b      	ldrb	r3, [r3, #0]
 8011954:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011958:	2b10      	cmp	r3, #16
 801195a:	d15d      	bne.n	8011a18 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	785b      	ldrb	r3, [r3, #1]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d002      	beq.n	801196c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8011966:	23fb      	movs	r3, #251	@ 0xfb
 8011968:	73fb      	strb	r3, [r7, #15]
 801196a:	e057      	b.n	8011a1c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 801196c:	68bb      	ldr	r3, [r7, #8]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d04d      	beq.n	8011a12 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8011976:	68bb      	ldr	r3, [r7, #8]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	2201      	movs	r2, #1
 801197c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	6a1b      	ldr	r3, [r3, #32]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d006      	beq.n	8011996 <lwip_netconn_do_write+0x6a>
 8011988:	4b28      	ldr	r3, [pc, #160]	@ (8011a2c <lwip_netconn_do_write+0x100>)
 801198a:	f240 7223 	movw	r2, #1827	@ 0x723
 801198e:	4928      	ldr	r1, [pc, #160]	@ (8011a30 <lwip_netconn_do_write+0x104>)
 8011990:	4828      	ldr	r0, [pc, #160]	@ (8011a34 <lwip_netconn_do_write+0x108>)
 8011992:	f00e fff7 	bl	8020984 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8011996:	68bb      	ldr	r3, [r7, #8]
 8011998:	695b      	ldr	r3, [r3, #20]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d106      	bne.n	80119ac <lwip_netconn_do_write+0x80>
 801199e:	4b23      	ldr	r3, [pc, #140]	@ (8011a2c <lwip_netconn_do_write+0x100>)
 80119a0:	f240 7224 	movw	r2, #1828	@ 0x724
 80119a4:	4924      	ldr	r1, [pc, #144]	@ (8011a38 <lwip_netconn_do_write+0x10c>)
 80119a6:	4823      	ldr	r0, [pc, #140]	@ (8011a34 <lwip_netconn_do_write+0x108>)
 80119a8:	f00e ffec 	bl	8020984 <iprintf>
        msg->conn->current_msg = msg;
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	68ba      	ldr	r2, [r7, #8]
 80119b2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	2100      	movs	r1, #0
 80119ba:	4618      	mov	r0, r3
 80119bc:	f7ff fdea 	bl	8011594 <lwip_netconn_do_writemore>
 80119c0:	4603      	mov	r3, r0
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d02e      	beq.n	8011a24 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	785b      	ldrb	r3, [r3, #1]
 80119cc:	2b01      	cmp	r3, #1
 80119ce:	d006      	beq.n	80119de <lwip_netconn_do_write+0xb2>
 80119d0:	4b16      	ldr	r3, [pc, #88]	@ (8011a2c <lwip_netconn_do_write+0x100>)
 80119d2:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 80119d6:	4919      	ldr	r1, [pc, #100]	@ (8011a3c <lwip_netconn_do_write+0x110>)
 80119d8:	4816      	ldr	r0, [pc, #88]	@ (8011a34 <lwip_netconn_do_write+0x108>)
 80119da:	f00e ffd3 	bl	8020984 <iprintf>
          UNLOCK_TCPIP_CORE();
 80119de:	4818      	ldr	r0, [pc, #96]	@ (8011a40 <lwip_netconn_do_write+0x114>)
 80119e0:	f00e fa4f 	bl	801fe82 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80119e4:	68bb      	ldr	r3, [r7, #8]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	330c      	adds	r3, #12
 80119ea:	2100      	movs	r1, #0
 80119ec:	4618      	mov	r0, r3
 80119ee:	f00e f9ae 	bl	801fd4e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80119f2:	4813      	ldr	r0, [pc, #76]	@ (8011a40 <lwip_netconn_do_write+0x114>)
 80119f4:	f00e fa36 	bl	801fe64 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	785b      	ldrb	r3, [r3, #1]
 80119fe:	2b01      	cmp	r3, #1
 8011a00:	d110      	bne.n	8011a24 <lwip_netconn_do_write+0xf8>
 8011a02:	4b0a      	ldr	r3, [pc, #40]	@ (8011a2c <lwip_netconn_do_write+0x100>)
 8011a04:	f240 722c 	movw	r2, #1836	@ 0x72c
 8011a08:	490c      	ldr	r1, [pc, #48]	@ (8011a3c <lwip_netconn_do_write+0x110>)
 8011a0a:	480a      	ldr	r0, [pc, #40]	@ (8011a34 <lwip_netconn_do_write+0x108>)
 8011a0c:	f00e ffba 	bl	8020984 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8011a10:	e008      	b.n	8011a24 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8011a12:	23f5      	movs	r3, #245	@ 0xf5
 8011a14:	73fb      	strb	r3, [r7, #15]
 8011a16:	e001      	b.n	8011a1c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8011a18:	23fa      	movs	r3, #250	@ 0xfa
 8011a1a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8011a1c:	68bb      	ldr	r3, [r7, #8]
 8011a1e:	7bfa      	ldrb	r2, [r7, #15]
 8011a20:	711a      	strb	r2, [r3, #4]
 8011a22:	e000      	b.n	8011a26 <lwip_netconn_do_write+0xfa>
        return;
 8011a24:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8011a26:	3710      	adds	r7, #16
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}
 8011a2c:	080232ec 	.word	0x080232ec
 8011a30:	08023690 	.word	0x08023690
 8011a34:	08023330 	.word	0x08023330
 8011a38:	08023818 	.word	0x08023818
 8011a3c:	080236ac 	.word	0x080236ac
 8011a40:	240099d8 	.word	0x240099d8

08011a44 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8011a44:	b480      	push	{r7}
 8011a46:	b083      	sub	sp, #12
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8011a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	dc04      	bgt.n	8011a60 <err_to_errno+0x1c>
 8011a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a5a:	f113 0f10 	cmn.w	r3, #16
 8011a5e:	da01      	bge.n	8011a64 <err_to_errno+0x20>
    return EIO;
 8011a60:	2305      	movs	r3, #5
 8011a62:	e005      	b.n	8011a70 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8011a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a68:	425b      	negs	r3, r3
 8011a6a:	4a04      	ldr	r2, [pc, #16]	@ (8011a7c <err_to_errno+0x38>)
 8011a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	370c      	adds	r7, #12
 8011a74:	46bd      	mov	sp, r7
 8011a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7a:	4770      	bx	lr
 8011a7c:	08026cf8 	.word	0x08026cf8

08011a80 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b082      	sub	sp, #8
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d013      	beq.n	8011ab6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d00b      	beq.n	8011aae <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f002 fbe4 	bl	8014268 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	605a      	str	r2, [r3, #4]
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	685a      	ldr	r2, [r3, #4]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8011aae:	6879      	ldr	r1, [r7, #4]
 8011ab0:	2006      	movs	r0, #6
 8011ab2:	f001 fd29 	bl	8013508 <memp_free>
  }
}
 8011ab6:	bf00      	nop
 8011ab8:	3708      	adds	r7, #8
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}
	...

08011ac0 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b082      	sub	sp, #8
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d106      	bne.n	8011adc <netbuf_free+0x1c>
 8011ace:	4b0d      	ldr	r3, [pc, #52]	@ (8011b04 <netbuf_free+0x44>)
 8011ad0:	2281      	movs	r2, #129	@ 0x81
 8011ad2:	490d      	ldr	r1, [pc, #52]	@ (8011b08 <netbuf_free+0x48>)
 8011ad4:	480d      	ldr	r0, [pc, #52]	@ (8011b0c <netbuf_free+0x4c>)
 8011ad6:	f00e ff55 	bl	8020984 <iprintf>
 8011ada:	e00f      	b.n	8011afc <netbuf_free+0x3c>
  if (buf->p != NULL) {
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d004      	beq.n	8011aee <netbuf_free+0x2e>
    pbuf_free(buf->p);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f002 fbbd 	bl	8014268 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2200      	movs	r2, #0
 8011af2:	605a      	str	r2, [r3, #4]
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	685a      	ldr	r2, [r3, #4]
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 8011afc:	3708      	adds	r7, #8
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bd80      	pop	{r7, pc}
 8011b02:	bf00      	nop
 8011b04:	08023844 	.word	0x08023844
 8011b08:	080238e0 	.word	0x080238e0
 8011b0c:	08023894 	.word	0x08023894

08011b10 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b084      	sub	sp, #16
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	60f8      	str	r0, [r7, #12]
 8011b18:	60b9      	str	r1, [r7, #8]
 8011b1a:	4613      	mov	r3, r2
 8011b1c:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d108      	bne.n	8011b36 <netbuf_ref+0x26>
 8011b24:	4b1c      	ldr	r3, [pc, #112]	@ (8011b98 <netbuf_ref+0x88>)
 8011b26:	2299      	movs	r2, #153	@ 0x99
 8011b28:	491c      	ldr	r1, [pc, #112]	@ (8011b9c <netbuf_ref+0x8c>)
 8011b2a:	481d      	ldr	r0, [pc, #116]	@ (8011ba0 <netbuf_ref+0x90>)
 8011b2c:	f00e ff2a 	bl	8020984 <iprintf>
 8011b30:	f06f 030f 	mvn.w	r3, #15
 8011b34:	e02b      	b.n	8011b8e <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d004      	beq.n	8011b48 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	4618      	mov	r0, r3
 8011b44:	f002 fb90 	bl	8014268 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8011b48:	2241      	movs	r2, #65	@ 0x41
 8011b4a:	2100      	movs	r1, #0
 8011b4c:	2036      	movs	r0, #54	@ 0x36
 8011b4e:	f002 f8a7 	bl	8013ca0 <pbuf_alloc>
 8011b52:	4602      	mov	r2, r0
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d105      	bne.n	8011b6c <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	2200      	movs	r2, #0
 8011b64:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8011b66:	f04f 33ff 	mov.w	r3, #4294967295
 8011b6a:	e010      	b.n	8011b8e <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	68ba      	ldr	r2, [r7, #8]
 8011b72:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	88fa      	ldrh	r2, [r7, #6]
 8011b7a:	811a      	strh	r2, [r3, #8]
 8011b7c:	68fa      	ldr	r2, [r7, #12]
 8011b7e:	6812      	ldr	r2, [r2, #0]
 8011b80:	891b      	ldrh	r3, [r3, #8]
 8011b82:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	681a      	ldr	r2, [r3, #0]
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8011b8c:	2300      	movs	r3, #0
}
 8011b8e:	4618      	mov	r0, r3
 8011b90:	3710      	adds	r7, #16
 8011b92:	46bd      	mov	sp, r7
 8011b94:	bd80      	pop	{r7, pc}
 8011b96:	bf00      	nop
 8011b98:	08023844 	.word	0x08023844
 8011b9c:	080238fc 	.word	0x080238fc
 8011ba0:	08023894 	.word	0x08023894

08011ba4 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 8011ba4:	b480      	push	{r7}
 8011ba6:	b085      	sub	sp, #20
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	db02      	blt.n	8011bbc <tryget_socket_unconn_nouse+0x18>
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	2b03      	cmp	r3, #3
 8011bba:	dd01      	ble.n	8011bc0 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	e003      	b.n	8011bc8 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	011b      	lsls	r3, r3, #4
 8011bc4:	4a03      	ldr	r2, [pc, #12]	@ (8011bd4 <tryget_socket_unconn_nouse+0x30>)
 8011bc6:	4413      	add	r3, r2
}
 8011bc8:	4618      	mov	r0, r3
 8011bca:	3714      	adds	r7, #20
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd2:	4770      	bx	lr
 8011bd4:	24009988 	.word	0x24009988

08011bd8 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b084      	sub	sp, #16
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 8011be0:	6878      	ldr	r0, [r7, #4]
 8011be2:	f7ff ffdf 	bl	8011ba4 <tryget_socket_unconn_nouse>
 8011be6:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 8011be8:	68fb      	ldr	r3, [r7, #12]
}
 8011bea:	4618      	mov	r0, r3
 8011bec:	3710      	adds	r7, #16
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd80      	pop	{r7, pc}

08011bf2 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 8011bf2:	b580      	push	{r7, lr}
 8011bf4:	b084      	sub	sp, #16
 8011bf6:	af00      	add	r7, sp, #0
 8011bf8:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 8011bfa:	6878      	ldr	r0, [r7, #4]
 8011bfc:	f7ff ffec 	bl	8011bd8 <tryget_socket_unconn>
 8011c00:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d005      	beq.n	8011c14 <tryget_socket+0x22>
    if (sock->conn) {
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d001      	beq.n	8011c14 <tryget_socket+0x22>
      return sock;
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	e000      	b.n	8011c16 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 8011c14:	2300      	movs	r3, #0
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3710      	adds	r7, #16
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}
	...

08011c20 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b084      	sub	sp, #16
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 8011c28:	6878      	ldr	r0, [r7, #4]
 8011c2a:	f7ff ffe2 	bl	8011bf2 <tryget_socket>
 8011c2e:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d104      	bne.n	8011c40 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 8011c36:	4b05      	ldr	r3, [pc, #20]	@ (8011c4c <get_socket+0x2c>)
 8011c38:	2209      	movs	r2, #9
 8011c3a:	601a      	str	r2, [r3, #0]
    return NULL;
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	e000      	b.n	8011c42 <get_socket+0x22>
  }
  return sock;
 8011c40:	68fb      	ldr	r3, [r7, #12]
}
 8011c42:	4618      	mov	r0, r3
 8011c44:	3710      	adds	r7, #16
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd80      	pop	{r7, pc}
 8011c4a:	bf00      	nop
 8011c4c:	2400cdcc 	.word	0x2400cdcc

08011c50 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b084      	sub	sp, #16
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
 8011c58:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	60fb      	str	r3, [r7, #12]
 8011c5e:	e052      	b.n	8011d06 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 8011c60:	f00e f93c 	bl	801fedc <sys_arch_protect>
 8011c64:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 8011c66:	4a2c      	ldr	r2, [pc, #176]	@ (8011d18 <alloc_socket+0xc8>)
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	011b      	lsls	r3, r3, #4
 8011c6c:	4413      	add	r3, r2
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d142      	bne.n	8011cfa <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8011c74:	4a28      	ldr	r2, [pc, #160]	@ (8011d18 <alloc_socket+0xc8>)
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	011b      	lsls	r3, r3, #4
 8011c7a:	4413      	add	r3, r2
 8011c7c:	687a      	ldr	r2, [r7, #4]
 8011c7e:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8011c80:	68b8      	ldr	r0, [r7, #8]
 8011c82:	f00e f939 	bl	801fef8 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 8011c86:	4a24      	ldr	r2, [pc, #144]	@ (8011d18 <alloc_socket+0xc8>)
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	011b      	lsls	r3, r3, #4
 8011c8c:	4413      	add	r3, r2
 8011c8e:	3304      	adds	r3, #4
 8011c90:	2200      	movs	r2, #0
 8011c92:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8011c94:	4a20      	ldr	r2, [pc, #128]	@ (8011d18 <alloc_socket+0xc8>)
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	011b      	lsls	r3, r3, #4
 8011c9a:	4413      	add	r3, r2
 8011c9c:	330e      	adds	r3, #14
 8011c9e:	781b      	ldrb	r3, [r3, #0]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d006      	beq.n	8011cb2 <alloc_socket+0x62>
 8011ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8011d1c <alloc_socket+0xcc>)
 8011ca6:	f240 220e 	movw	r2, #526	@ 0x20e
 8011caa:	491d      	ldr	r1, [pc, #116]	@ (8011d20 <alloc_socket+0xd0>)
 8011cac:	481d      	ldr	r0, [pc, #116]	@ (8011d24 <alloc_socket+0xd4>)
 8011cae:	f00e fe69 	bl	8020984 <iprintf>
      sockets[i].rcvevent   = 0;
 8011cb2:	4a19      	ldr	r2, [pc, #100]	@ (8011d18 <alloc_socket+0xc8>)
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	011b      	lsls	r3, r3, #4
 8011cb8:	4413      	add	r3, r2
 8011cba:	3308      	adds	r3, #8
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	781b      	ldrb	r3, [r3, #0]
 8011cc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011cc8:	2b10      	cmp	r3, #16
 8011cca:	d102      	bne.n	8011cd2 <alloc_socket+0x82>
 8011ccc:	683b      	ldr	r3, [r7, #0]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d001      	beq.n	8011cd6 <alloc_socket+0x86>
 8011cd2:	2301      	movs	r3, #1
 8011cd4:	e000      	b.n	8011cd8 <alloc_socket+0x88>
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	b299      	uxth	r1, r3
 8011cda:	4a0f      	ldr	r2, [pc, #60]	@ (8011d18 <alloc_socket+0xc8>)
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	011b      	lsls	r3, r3, #4
 8011ce0:	4413      	add	r3, r2
 8011ce2:	330a      	adds	r3, #10
 8011ce4:	460a      	mov	r2, r1
 8011ce6:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 8011ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8011d18 <alloc_socket+0xc8>)
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	011b      	lsls	r3, r3, #4
 8011cee:	4413      	add	r3, r2
 8011cf0:	330c      	adds	r3, #12
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	e00a      	b.n	8011d10 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 8011cfa:	68b8      	ldr	r0, [r7, #8]
 8011cfc:	f00e f8fc 	bl	801fef8 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	3301      	adds	r3, #1
 8011d04:	60fb      	str	r3, [r7, #12]
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	2b03      	cmp	r3, #3
 8011d0a:	dda9      	ble.n	8011c60 <alloc_socket+0x10>
  }
  return -1;
 8011d0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3710      	adds	r7, #16
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}
 8011d18:	24009988 	.word	0x24009988
 8011d1c:	080239dc 	.word	0x080239dc
 8011d20:	08023a10 	.word	0x08023a10
 8011d24:	08023a30 	.word	0x08023a30

08011d28 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 8011d28:	b480      	push	{r7}
 8011d2a:	b085      	sub	sp, #20
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	60f8      	str	r0, [r7, #12]
 8011d30:	60b9      	str	r1, [r7, #8]
 8011d32:	607a      	str	r2, [r7, #4]
 8011d34:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 8011d36:	683b      	ldr	r3, [r7, #0]
 8011d38:	68fa      	ldr	r2, [r7, #12]
 8011d3a:	6852      	ldr	r2, [r2, #4]
 8011d3c:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	2200      	movs	r2, #0
 8011d42:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	681a      	ldr	r2, [r3, #0]
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	2200      	movs	r2, #0
 8011d50:	601a      	str	r2, [r3, #0]
  return 1;
 8011d52:	2301      	movs	r3, #1
}
 8011d54:	4618      	mov	r0, r3
 8011d56:	3714      	adds	r7, #20
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5e:	4770      	bx	lr

08011d60 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b084      	sub	sp, #16
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	60f8      	str	r0, [r7, #12]
 8011d68:	60b9      	str	r1, [r7, #8]
 8011d6a:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d00d      	beq.n	8011d90 <free_socket_free_elements+0x30>
    if (is_tcp) {
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d005      	beq.n	8011d86 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f002 fa72 	bl	8014268 <pbuf_free>
 8011d84:	e004      	b.n	8011d90 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f7ff fe78 	bl	8011a80 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d002      	beq.n	8011d9c <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 8011d96:	68b8      	ldr	r0, [r7, #8]
 8011d98:	f7fe f97a 	bl	8010090 <netconn_delete>
  }
}
 8011d9c:	bf00      	nop
 8011d9e:	3710      	adds	r7, #16
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd80      	pop	{r7, pc}

08011da4 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b086      	sub	sp, #24
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
 8011dac:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 8011dae:	f00e f895 	bl	801fedc <sys_arch_protect>
 8011db2:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 8011db4:	f107 0308 	add.w	r3, r7, #8
 8011db8:	f107 020c 	add.w	r2, r7, #12
 8011dbc:	6839      	ldr	r1, [r7, #0]
 8011dbe:	6878      	ldr	r0, [r7, #4]
 8011dc0:	f7ff ffb2 	bl	8011d28 <free_socket_locked>
 8011dc4:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 8011dc6:	6978      	ldr	r0, [r7, #20]
 8011dc8:	f00e f896 	bl	801fef8 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 8011dcc:	693b      	ldr	r3, [r7, #16]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d006      	beq.n	8011de0 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	f107 0208 	add.w	r2, r7, #8
 8011dd8:	4619      	mov	r1, r3
 8011dda:	6838      	ldr	r0, [r7, #0]
 8011ddc:	f7ff ffc0 	bl	8011d60 <free_socket_free_elements>
  }
}
 8011de0:	bf00      	nop
 8011de2:	3718      	adds	r7, #24
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bd80      	pop	{r7, pc}

08011de8 <lwip_close>:
  return 0;
}

int
lwip_close(int s)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b086      	sub	sp, #24
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 8011df0:	2300      	movs	r3, #0
 8011df2:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	f7ff ff13 	bl	8011c20 <get_socket>
 8011dfa:	6138      	str	r0, [r7, #16]
  if (!sock) {
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d102      	bne.n	8011e08 <lwip_close+0x20>
    return -1;
 8011e02:	f04f 33ff 	mov.w	r3, #4294967295
 8011e06:	e039      	b.n	8011e7c <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 8011e08:	693b      	ldr	r3, [r7, #16]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d00b      	beq.n	8011e28 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 8011e10:	693b      	ldr	r3, [r7, #16]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	781b      	ldrb	r3, [r3, #0]
 8011e16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011e1a:	2b10      	cmp	r3, #16
 8011e1c:	bf0c      	ite	eq
 8011e1e:	2301      	moveq	r3, #1
 8011e20:	2300      	movne	r3, #0
 8011e22:	b2db      	uxtb	r3, r3
 8011e24:	617b      	str	r3, [r7, #20]
 8011e26:	e00a      	b.n	8011e3e <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 8011e28:	693b      	ldr	r3, [r7, #16]
 8011e2a:	685b      	ldr	r3, [r3, #4]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d006      	beq.n	8011e3e <lwip_close+0x56>
 8011e30:	4b14      	ldr	r3, [pc, #80]	@ (8011e84 <lwip_close+0x9c>)
 8011e32:	f44f 7245 	mov.w	r2, #788	@ 0x314
 8011e36:	4914      	ldr	r1, [pc, #80]	@ (8011e88 <lwip_close+0xa0>)
 8011e38:	4814      	ldr	r0, [pc, #80]	@ (8011e8c <lwip_close+0xa4>)
 8011e3a:	f00e fda3 	bl	8020984 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 8011e3e:	693b      	ldr	r3, [r7, #16]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	4618      	mov	r0, r3
 8011e44:	f7fe f900 	bl	8010048 <netconn_prepare_delete>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d00e      	beq.n	8011e72 <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 8011e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e58:	4618      	mov	r0, r3
 8011e5a:	f7ff fdf3 	bl	8011a44 <err_to_errno>
 8011e5e:	60b8      	str	r0, [r7, #8]
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d002      	beq.n	8011e6c <lwip_close+0x84>
 8011e66:	4a0a      	ldr	r2, [pc, #40]	@ (8011e90 <lwip_close+0xa8>)
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8011e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8011e70:	e004      	b.n	8011e7c <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 8011e72:	6979      	ldr	r1, [r7, #20]
 8011e74:	6938      	ldr	r0, [r7, #16]
 8011e76:	f7ff ff95 	bl	8011da4 <free_socket>
  set_errno(0);
  return 0;
 8011e7a:	2300      	movs	r3, #0
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	3718      	adds	r7, #24
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}
 8011e84:	080239dc 	.word	0x080239dc
 8011e88:	08023a9c 	.word	0x08023a9c
 8011e8c:	08023a30 	.word	0x08023a30
 8011e90:	2400cdcc 	.word	0x2400cdcc

08011e94 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b08c      	sub	sp, #48	@ 0x30
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	60f8      	str	r0, [r7, #12]
 8011e9c:	60b9      	str	r1, [r7, #8]
 8011e9e:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 8011ea0:	68f8      	ldr	r0, [r7, #12]
 8011ea2:	f7ff febd 	bl	8011c20 <get_socket>
 8011ea6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (!sock) {
 8011ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d102      	bne.n	8011eb4 <lwip_connect+0x20>
    return -1;
 8011eae:	f04f 33ff 	mov.w	r3, #4294967295
 8011eb2:	e062      	b.n	8011f7a <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 8011eb4:	68bb      	ldr	r3, [r7, #8]
 8011eb6:	785b      	ldrb	r3, [r3, #1]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d108      	bne.n	8011ece <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 8011ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f7fe f939 	bl	8010138 <netconn_disconnect>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011ecc:	e039      	b.n	8011f42 <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	2b10      	cmp	r3, #16
 8011ed2:	d10c      	bne.n	8011eee <lwip_connect+0x5a>
 8011ed4:	68bb      	ldr	r3, [r7, #8]
 8011ed6:	785b      	ldrb	r3, [r3, #1]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d003      	beq.n	8011ee4 <lwip_connect+0x50>
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	785b      	ldrb	r3, [r3, #1]
 8011ee0:	2b02      	cmp	r3, #2
 8011ee2:	d104      	bne.n	8011eee <lwip_connect+0x5a>
 8011ee4:	68bb      	ldr	r3, [r7, #8]
 8011ee6:	f003 0303 	and.w	r3, r3, #3
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d014      	beq.n	8011f18 <lwip_connect+0x84>
 8011eee:	4b25      	ldr	r3, [pc, #148]	@ (8011f84 <lwip_connect+0xf0>)
 8011ef0:	f240 3247 	movw	r2, #839	@ 0x347
 8011ef4:	4924      	ldr	r1, [pc, #144]	@ (8011f88 <lwip_connect+0xf4>)
 8011ef6:	4825      	ldr	r0, [pc, #148]	@ (8011f8c <lwip_connect+0xf8>)
 8011ef8:	f00e fd44 	bl	8020984 <iprintf>
 8011efc:	f06f 000f 	mvn.w	r0, #15
 8011f00:	f7ff fda0 	bl	8011a44 <err_to_errno>
 8011f04:	6238      	str	r0, [r7, #32]
 8011f06:	6a3b      	ldr	r3, [r7, #32]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d002      	beq.n	8011f12 <lwip_connect+0x7e>
 8011f0c:	4a20      	ldr	r2, [pc, #128]	@ (8011f90 <lwip_connect+0xfc>)
 8011f0e:	6a3b      	ldr	r3, [r7, #32]
 8011f10:	6013      	str	r3, [r2, #0]
 8011f12:	f04f 33ff 	mov.w	r3, #4294967295
 8011f16:	e030      	b.n	8011f7a <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 8011f18:	68bb      	ldr	r3, [r7, #8]
 8011f1a:	685b      	ldr	r3, [r3, #4]
 8011f1c:	617b      	str	r3, [r7, #20]
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	885b      	ldrh	r3, [r3, #2]
 8011f22:	4618      	mov	r0, r3
 8011f24:	f000 fcea 	bl	80128fc <lwip_htons>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	84fb      	strh	r3, [r7, #38]	@ 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 8011f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011f32:	f107 0114 	add.w	r1, r7, #20
 8011f36:	4618      	mov	r0, r3
 8011f38:	f7fe f8c6 	bl	80100c8 <netconn_connect>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  if (err != ERR_OK) {
 8011f42:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d00e      	beq.n	8011f68 <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 8011f4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f7ff fd78 	bl	8011a44 <err_to_errno>
 8011f54:	61b8      	str	r0, [r7, #24]
 8011f56:	69bb      	ldr	r3, [r7, #24]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d002      	beq.n	8011f62 <lwip_connect+0xce>
 8011f5c:	4a0c      	ldr	r2, [pc, #48]	@ (8011f90 <lwip_connect+0xfc>)
 8011f5e:	69bb      	ldr	r3, [r7, #24]
 8011f60:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8011f62:	f04f 33ff 	mov.w	r3, #4294967295
 8011f66:	e008      	b.n	8011f7a <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 8011f68:	2300      	movs	r3, #0
 8011f6a:	61fb      	str	r3, [r7, #28]
 8011f6c:	69fb      	ldr	r3, [r7, #28]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d002      	beq.n	8011f78 <lwip_connect+0xe4>
 8011f72:	4a07      	ldr	r2, [pc, #28]	@ (8011f90 <lwip_connect+0xfc>)
 8011f74:	69fb      	ldr	r3, [r7, #28]
 8011f76:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8011f78:	2300      	movs	r3, #0
}
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	3730      	adds	r7, #48	@ 0x30
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	bd80      	pop	{r7, pc}
 8011f82:	bf00      	nop
 8011f84:	080239dc 	.word	0x080239dc
 8011f88:	08023ab4 	.word	0x08023ab4
 8011f8c:	08023a30 	.word	0x08023a30
 8011f90:	2400cdcc 	.word	0x2400cdcc

08011f94 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b08a      	sub	sp, #40	@ 0x28
 8011f98:	af02      	add	r7, sp, #8
 8011f9a:	60f8      	str	r0, [r7, #12]
 8011f9c:	60b9      	str	r1, [r7, #8]
 8011f9e:	607a      	str	r2, [r7, #4]
 8011fa0:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 8011fa2:	68f8      	ldr	r0, [r7, #12]
 8011fa4:	f7ff fe3c 	bl	8011c20 <get_socket>
 8011fa8:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 8011faa:	69fb      	ldr	r3, [r7, #28]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d102      	bne.n	8011fb6 <lwip_send+0x22>
    return -1;
 8011fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8011fb4:	e046      	b.n	8012044 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8011fb6:	69fb      	ldr	r3, [r7, #28]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	781b      	ldrb	r3, [r3, #0]
 8011fbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011fc0:	2b10      	cmp	r3, #16
 8011fc2:	d00b      	beq.n	8011fdc <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	9301      	str	r3, [sp, #4]
 8011fc8:	2300      	movs	r3, #0
 8011fca:	9300      	str	r3, [sp, #0]
 8011fcc:	683b      	ldr	r3, [r7, #0]
 8011fce:	687a      	ldr	r2, [r7, #4]
 8011fd0:	68b9      	ldr	r1, [r7, #8]
 8011fd2:	68f8      	ldr	r0, [r7, #12]
 8011fd4:	f000 f83c 	bl	8012050 <lwip_sendto>
 8011fd8:	4603      	mov	r3, r0
 8011fda:	e033      	b.n	8012044 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8011fdc:	683b      	ldr	r3, [r7, #0]
 8011fde:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d001      	beq.n	8011fea <lwip_send+0x56>
 8011fe6:	2203      	movs	r2, #3
 8011fe8:	e000      	b.n	8011fec <lwip_send+0x58>
 8011fea:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	105b      	asrs	r3, r3, #1
 8011ff0:	b25b      	sxtb	r3, r3
 8011ff2:	f003 0304 	and.w	r3, r3, #4
 8011ff6:	b25b      	sxtb	r3, r3
 8011ff8:	4313      	orrs	r3, r2
 8011ffa:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 8011ffc:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 8011ffe:	2300      	movs	r3, #0
 8012000:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 8012002:	69fb      	ldr	r3, [r7, #28]
 8012004:	6818      	ldr	r0, [r3, #0]
 8012006:	7efa      	ldrb	r2, [r7, #27]
 8012008:	f107 0310 	add.w	r3, r7, #16
 801200c:	9300      	str	r3, [sp, #0]
 801200e:	4613      	mov	r3, r2
 8012010:	687a      	ldr	r2, [r7, #4]
 8012012:	68b9      	ldr	r1, [r7, #8]
 8012014:	f7fe f8e8 	bl	80101e8 <netconn_write_partly>
 8012018:	4603      	mov	r3, r0
 801201a:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 801201c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012020:	4618      	mov	r0, r3
 8012022:	f7ff fd0f 	bl	8011a44 <err_to_errno>
 8012026:	6178      	str	r0, [r7, #20]
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d002      	beq.n	8012034 <lwip_send+0xa0>
 801202e:	4a07      	ldr	r2, [pc, #28]	@ (801204c <lwip_send+0xb8>)
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 8012034:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d101      	bne.n	8012040 <lwip_send+0xac>
 801203c:	693b      	ldr	r3, [r7, #16]
 801203e:	e001      	b.n	8012044 <lwip_send+0xb0>
 8012040:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012044:	4618      	mov	r0, r3
 8012046:	3720      	adds	r7, #32
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}
 801204c:	2400cdcc 	.word	0x2400cdcc

08012050 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b08e      	sub	sp, #56	@ 0x38
 8012054:	af00      	add	r7, sp, #0
 8012056:	60f8      	str	r0, [r7, #12]
 8012058:	60b9      	str	r1, [r7, #8]
 801205a:	607a      	str	r2, [r7, #4]
 801205c:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 801205e:	68f8      	ldr	r0, [r7, #12]
 8012060:	f7ff fdde 	bl	8011c20 <get_socket>
 8012064:	6338      	str	r0, [r7, #48]	@ 0x30
  if (!sock) {
 8012066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012068:	2b00      	cmp	r3, #0
 801206a:	d102      	bne.n	8012072 <lwip_sendto+0x22>
    return -1;
 801206c:	f04f 33ff 	mov.w	r3, #4294967295
 8012070:	e093      	b.n	801219a <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8012072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	781b      	ldrb	r3, [r3, #0]
 8012078:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801207c:	2b10      	cmp	r3, #16
 801207e:	d107      	bne.n	8012090 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	687a      	ldr	r2, [r7, #4]
 8012084:	68b9      	ldr	r1, [r7, #8]
 8012086:	68f8      	ldr	r0, [r7, #12]
 8012088:	f7ff ff84 	bl	8011f94 <lwip_send>
 801208c:	4603      	mov	r3, r0
 801208e:	e084      	b.n	801219a <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012096:	d30a      	bcc.n	80120ae <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 8012098:	235a      	movs	r3, #90	@ 0x5a
 801209a:	623b      	str	r3, [r7, #32]
 801209c:	6a3b      	ldr	r3, [r7, #32]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d002      	beq.n	80120a8 <lwip_sendto+0x58>
 80120a2:	4a40      	ldr	r2, [pc, #256]	@ (80121a4 <lwip_sendto+0x154>)
 80120a4:	6a3b      	ldr	r3, [r7, #32]
 80120a6:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 80120a8:	f04f 33ff 	mov.w	r3, #4294967295
 80120ac:	e075      	b.n	801219a <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 80120b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d102      	bne.n	80120be <lwip_sendto+0x6e>
 80120b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d023      	beq.n	8012106 <lwip_sendto+0xb6>
 80120be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80120c0:	2b10      	cmp	r3, #16
 80120c2:	d10b      	bne.n	80120dc <lwip_sendto+0x8c>
 80120c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d008      	beq.n	80120dc <lwip_sendto+0x8c>
 80120ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80120cc:	785b      	ldrb	r3, [r3, #1]
 80120ce:	2b02      	cmp	r3, #2
 80120d0:	d104      	bne.n	80120dc <lwip_sendto+0x8c>
 80120d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80120d4:	f003 0303 	and.w	r3, r3, #3
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d014      	beq.n	8012106 <lwip_sendto+0xb6>
 80120dc:	4b32      	ldr	r3, [pc, #200]	@ (80121a8 <lwip_sendto+0x158>)
 80120de:	f240 6252 	movw	r2, #1618	@ 0x652
 80120e2:	4932      	ldr	r1, [pc, #200]	@ (80121ac <lwip_sendto+0x15c>)
 80120e4:	4832      	ldr	r0, [pc, #200]	@ (80121b0 <lwip_sendto+0x160>)
 80120e6:	f00e fc4d 	bl	8020984 <iprintf>
 80120ea:	f06f 000f 	mvn.w	r0, #15
 80120ee:	f7ff fca9 	bl	8011a44 <err_to_errno>
 80120f2:	62b8      	str	r0, [r7, #40]	@ 0x28
 80120f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d002      	beq.n	8012100 <lwip_sendto+0xb0>
 80120fa:	4a2a      	ldr	r2, [pc, #168]	@ (80121a4 <lwip_sendto+0x154>)
 80120fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120fe:	6013      	str	r3, [r2, #0]
 8012100:	f04f 33ff 	mov.w	r3, #4294967295
 8012104:	e049      	b.n	801219a <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 8012106:	2300      	movs	r3, #0
 8012108:	617b      	str	r3, [r7, #20]
 801210a:	697b      	ldr	r3, [r7, #20]
 801210c:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 801210e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012110:	2b00      	cmp	r3, #0
 8012112:	d00a      	beq.n	801212a <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8012114:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012116:	685b      	ldr	r3, [r3, #4]
 8012118:	61bb      	str	r3, [r7, #24]
 801211a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801211c:	885b      	ldrh	r3, [r3, #2]
 801211e:	4618      	mov	r0, r3
 8012120:	f000 fbec 	bl	80128fc <lwip_htons>
 8012124:	4603      	mov	r3, r0
 8012126:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8012128:	e003      	b.n	8012132 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 801212a:	2300      	movs	r3, #0
 801212c:	86bb      	strh	r3, [r7, #52]	@ 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 801212e:	2300      	movs	r3, #0
 8012130:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 8012132:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8012134:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 8012136:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012138:	f107 0310 	add.w	r3, r7, #16
 801213c:	68b9      	ldr	r1, [r7, #8]
 801213e:	4618      	mov	r0, r3
 8012140:	f7ff fce6 	bl	8011b10 <netbuf_ref>
 8012144:	4603      	mov	r3, r0
 8012146:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 801214a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801214e:	2b00      	cmp	r3, #0
 8012150:	d10a      	bne.n	8012168 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 8012152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	f107 0210 	add.w	r2, r7, #16
 801215a:	4611      	mov	r1, r2
 801215c:	4618      	mov	r0, r3
 801215e:	f7fe f815 	bl	801018c <netconn_send>
 8012162:	4603      	mov	r3, r0
 8012164:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 8012168:	f107 0310 	add.w	r3, r7, #16
 801216c:	4618      	mov	r0, r3
 801216e:	f7ff fca7 	bl	8011ac0 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 8012172:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8012176:	4618      	mov	r0, r3
 8012178:	f7ff fc64 	bl	8011a44 <err_to_errno>
 801217c:	6278      	str	r0, [r7, #36]	@ 0x24
 801217e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012180:	2b00      	cmp	r3, #0
 8012182:	d002      	beq.n	801218a <lwip_sendto+0x13a>
 8012184:	4a07      	ldr	r2, [pc, #28]	@ (80121a4 <lwip_sendto+0x154>)
 8012186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012188:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 801218a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801218e:	2b00      	cmp	r3, #0
 8012190:	d101      	bne.n	8012196 <lwip_sendto+0x146>
 8012192:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012194:	e001      	b.n	801219a <lwip_sendto+0x14a>
 8012196:	f04f 33ff 	mov.w	r3, #4294967295
}
 801219a:	4618      	mov	r0, r3
 801219c:	3738      	adds	r7, #56	@ 0x38
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}
 80121a2:	bf00      	nop
 80121a4:	2400cdcc 	.word	0x2400cdcc
 80121a8:	080239dc 	.word	0x080239dc
 80121ac:	08023cbc 	.word	0x08023cbc
 80121b0:	08023a30 	.word	0x08023a30

080121b4 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b086      	sub	sp, #24
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	60f8      	str	r0, [r7, #12]
 80121bc:	60b9      	str	r1, [r7, #8]
 80121be:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 80121c0:	68bb      	ldr	r3, [r7, #8]
 80121c2:	2b03      	cmp	r3, #3
 80121c4:	d009      	beq.n	80121da <lwip_socket+0x26>
 80121c6:	68bb      	ldr	r3, [r7, #8]
 80121c8:	2b03      	cmp	r3, #3
 80121ca:	dc23      	bgt.n	8012214 <lwip_socket+0x60>
 80121cc:	68bb      	ldr	r3, [r7, #8]
 80121ce:	2b01      	cmp	r3, #1
 80121d0:	d019      	beq.n	8012206 <lwip_socket+0x52>
 80121d2:	68bb      	ldr	r3, [r7, #8]
 80121d4:	2b02      	cmp	r3, #2
 80121d6:	d009      	beq.n	80121ec <lwip_socket+0x38>
 80121d8:	e01c      	b.n	8012214 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	b2db      	uxtb	r3, r3
 80121de:	4a22      	ldr	r2, [pc, #136]	@ (8012268 <lwip_socket+0xb4>)
 80121e0:	4619      	mov	r1, r3
 80121e2:	2040      	movs	r0, #64	@ 0x40
 80121e4:	f7fd feb6 	bl	800ff54 <netconn_new_with_proto_and_callback>
 80121e8:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 80121ea:	e019      	b.n	8012220 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	2b88      	cmp	r3, #136	@ 0x88
 80121f0:	d101      	bne.n	80121f6 <lwip_socket+0x42>
 80121f2:	2321      	movs	r3, #33	@ 0x21
 80121f4:	e000      	b.n	80121f8 <lwip_socket+0x44>
 80121f6:	2320      	movs	r3, #32
 80121f8:	4a1b      	ldr	r2, [pc, #108]	@ (8012268 <lwip_socket+0xb4>)
 80121fa:	2100      	movs	r1, #0
 80121fc:	4618      	mov	r0, r3
 80121fe:	f7fd fea9 	bl	800ff54 <netconn_new_with_proto_and_callback>
 8012202:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8012204:	e00c      	b.n	8012220 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 8012206:	4a18      	ldr	r2, [pc, #96]	@ (8012268 <lwip_socket+0xb4>)
 8012208:	2100      	movs	r1, #0
 801220a:	2010      	movs	r0, #16
 801220c:	f7fd fea2 	bl	800ff54 <netconn_new_with_proto_and_callback>
 8012210:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8012212:	e005      	b.n	8012220 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 8012214:	4b15      	ldr	r3, [pc, #84]	@ (801226c <lwip_socket+0xb8>)
 8012216:	2216      	movs	r2, #22
 8012218:	601a      	str	r2, [r3, #0]
      return -1;
 801221a:	f04f 33ff 	mov.w	r3, #4294967295
 801221e:	e01e      	b.n	801225e <lwip_socket+0xaa>
  }

  if (!conn) {
 8012220:	697b      	ldr	r3, [r7, #20]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d105      	bne.n	8012232 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 8012226:	4b11      	ldr	r3, [pc, #68]	@ (801226c <lwip_socket+0xb8>)
 8012228:	2269      	movs	r2, #105	@ 0x69
 801222a:	601a      	str	r2, [r3, #0]
    return -1;
 801222c:	f04f 33ff 	mov.w	r3, #4294967295
 8012230:	e015      	b.n	801225e <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 8012232:	2100      	movs	r1, #0
 8012234:	6978      	ldr	r0, [r7, #20]
 8012236:	f7ff fd0b 	bl	8011c50 <alloc_socket>
 801223a:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 801223c:	693b      	ldr	r3, [r7, #16]
 801223e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012242:	d108      	bne.n	8012256 <lwip_socket+0xa2>
    netconn_delete(conn);
 8012244:	6978      	ldr	r0, [r7, #20]
 8012246:	f7fd ff23 	bl	8010090 <netconn_delete>
    set_errno(ENFILE);
 801224a:	4b08      	ldr	r3, [pc, #32]	@ (801226c <lwip_socket+0xb8>)
 801224c:	2217      	movs	r2, #23
 801224e:	601a      	str	r2, [r3, #0]
    return -1;
 8012250:	f04f 33ff 	mov.w	r3, #4294967295
 8012254:	e003      	b.n	801225e <lwip_socket+0xaa>
  }
  conn->socket = i;
 8012256:	697b      	ldr	r3, [r7, #20]
 8012258:	693a      	ldr	r2, [r7, #16]
 801225a:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 801225c:	693b      	ldr	r3, [r7, #16]
}
 801225e:	4618      	mov	r0, r3
 8012260:	3718      	adds	r7, #24
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
 8012266:	bf00      	nop
 8012268:	080122f9 	.word	0x080122f9
 801226c:	2400cdcc 	.word	0x2400cdcc

08012270 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 8012270:	b480      	push	{r7}
 8012272:	b087      	sub	sp, #28
 8012274:	af00      	add	r7, sp, #0
 8012276:	60f8      	str	r0, [r7, #12]
 8012278:	60b9      	str	r1, [r7, #8]
 801227a:	607a      	str	r2, [r7, #4]
 801227c:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 801227e:	2300      	movs	r3, #0
 8012280:	617b      	str	r3, [r7, #20]
 8012282:	e02c      	b.n	80122de <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	695a      	ldr	r2, [r3, #20]
 8012288:	697b      	ldr	r3, [r7, #20]
 801228a:	00db      	lsls	r3, r3, #3
 801228c:	4413      	add	r3, r2
 801228e:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 8012290:	693b      	ldr	r3, [r7, #16]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	68ba      	ldr	r2, [r7, #8]
 8012296:	429a      	cmp	r2, r3
 8012298:	d11e      	bne.n	80122d8 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d009      	beq.n	80122b4 <lwip_poll_should_wake+0x44>
 80122a0:	693b      	ldr	r3, [r7, #16]
 80122a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80122a6:	b29b      	uxth	r3, r3
 80122a8:	f003 0301 	and.w	r3, r3, #1
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d001      	beq.n	80122b4 <lwip_poll_should_wake+0x44>
        return 1;
 80122b0:	2301      	movs	r3, #1
 80122b2:	e01a      	b.n	80122ea <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d009      	beq.n	80122ce <lwip_poll_should_wake+0x5e>
 80122ba:	693b      	ldr	r3, [r7, #16]
 80122bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80122c0:	b29b      	uxth	r3, r3
 80122c2:	f003 0302 	and.w	r3, r3, #2
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d001      	beq.n	80122ce <lwip_poll_should_wake+0x5e>
        return 1;
 80122ca:	2301      	movs	r3, #1
 80122cc:	e00d      	b.n	80122ea <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 80122ce:	6a3b      	ldr	r3, [r7, #32]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d001      	beq.n	80122d8 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 80122d4:	2301      	movs	r3, #1
 80122d6:	e008      	b.n	80122ea <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	3301      	adds	r3, #1
 80122dc:	617b      	str	r3, [r7, #20]
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	699b      	ldr	r3, [r3, #24]
 80122e2:	697a      	ldr	r2, [r7, #20]
 80122e4:	429a      	cmp	r2, r3
 80122e6:	d3cd      	bcc.n	8012284 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 80122e8:	2300      	movs	r3, #0
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	371c      	adds	r7, #28
 80122ee:	46bd      	mov	sp, r7
 80122f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f4:	4770      	bx	lr
	...

080122f8 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b08a      	sub	sp, #40	@ 0x28
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
 8012300:	460b      	mov	r3, r1
 8012302:	70fb      	strb	r3, [r7, #3]
 8012304:	4613      	mov	r3, r2
 8012306:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	2b00      	cmp	r3, #0
 801230c:	f000 80a4 	beq.w	8012458 <event_callback+0x160>
    s = conn->socket;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	699b      	ldr	r3, [r3, #24]
 8012314:	627b      	str	r3, [r7, #36]	@ 0x24
    if (s < 0) {
 8012316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012318:	2b00      	cmp	r3, #0
 801231a:	da18      	bge.n	801234e <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 801231c:	f00d fdde 	bl	801fedc <sys_arch_protect>
 8012320:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	699b      	ldr	r3, [r3, #24]
 8012326:	2b00      	cmp	r3, #0
 8012328:	da0b      	bge.n	8012342 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 801232a:	78fb      	ldrb	r3, [r7, #3]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d104      	bne.n	801233a <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	699b      	ldr	r3, [r3, #24]
 8012334:	1e5a      	subs	r2, r3, #1
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 801233a:	69f8      	ldr	r0, [r7, #28]
 801233c:	f00d fddc 	bl	801fef8 <sys_arch_unprotect>
        return;
 8012340:	e08d      	b.n	801245e <event_callback+0x166>
      }
      s = conn->socket;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	699b      	ldr	r3, [r3, #24]
 8012346:	627b      	str	r3, [r7, #36]	@ 0x24
      SYS_ARCH_UNPROTECT(lev);
 8012348:	69f8      	ldr	r0, [r7, #28]
 801234a:	f00d fdd5 	bl	801fef8 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 801234e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012350:	f7ff fc66 	bl	8011c20 <get_socket>
 8012354:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 8012356:	69bb      	ldr	r3, [r7, #24]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d07f      	beq.n	801245c <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 801235c:	2301      	movs	r3, #1
 801235e:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 8012360:	f00d fdbc 	bl	801fedc <sys_arch_protect>
 8012364:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 8012366:	78fb      	ldrb	r3, [r7, #3]
 8012368:	2b04      	cmp	r3, #4
 801236a:	d83e      	bhi.n	80123ea <event_callback+0xf2>
 801236c:	a201      	add	r2, pc, #4	@ (adr r2, 8012374 <event_callback+0x7c>)
 801236e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012372:	bf00      	nop
 8012374:	08012389 	.word	0x08012389
 8012378:	080123ab 	.word	0x080123ab
 801237c:	080123c3 	.word	0x080123c3
 8012380:	080123d7 	.word	0x080123d7
 8012384:	080123e3 	.word	0x080123e3
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 8012388:	69bb      	ldr	r3, [r7, #24]
 801238a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801238e:	b29b      	uxth	r3, r3
 8012390:	3301      	adds	r3, #1
 8012392:	b29b      	uxth	r3, r3
 8012394:	b21a      	sxth	r2, r3
 8012396:	69bb      	ldr	r3, [r7, #24]
 8012398:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 801239a:	69bb      	ldr	r3, [r7, #24]
 801239c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80123a0:	2b01      	cmp	r3, #1
 80123a2:	dd2a      	ble.n	80123fa <event_callback+0x102>
        check_waiters = 0;
 80123a4:	2300      	movs	r3, #0
 80123a6:	623b      	str	r3, [r7, #32]
      }
      break;
 80123a8:	e027      	b.n	80123fa <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 80123aa:	69bb      	ldr	r3, [r7, #24]
 80123ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80123b0:	b29b      	uxth	r3, r3
 80123b2:	3b01      	subs	r3, #1
 80123b4:	b29b      	uxth	r3, r3
 80123b6:	b21a      	sxth	r2, r3
 80123b8:	69bb      	ldr	r3, [r7, #24]
 80123ba:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 80123bc:	2300      	movs	r3, #0
 80123be:	623b      	str	r3, [r7, #32]
      break;
 80123c0:	e01c      	b.n	80123fc <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 80123c2:	69bb      	ldr	r3, [r7, #24]
 80123c4:	895b      	ldrh	r3, [r3, #10]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d001      	beq.n	80123ce <event_callback+0xd6>
        check_waiters = 0;
 80123ca:	2300      	movs	r3, #0
 80123cc:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 80123ce:	69bb      	ldr	r3, [r7, #24]
 80123d0:	2201      	movs	r2, #1
 80123d2:	815a      	strh	r2, [r3, #10]
      break;
 80123d4:	e012      	b.n	80123fc <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 80123d6:	69bb      	ldr	r3, [r7, #24]
 80123d8:	2200      	movs	r2, #0
 80123da:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 80123dc:	2300      	movs	r3, #0
 80123de:	623b      	str	r3, [r7, #32]
      break;
 80123e0:	e00c      	b.n	80123fc <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 80123e2:	69bb      	ldr	r3, [r7, #24]
 80123e4:	2201      	movs	r2, #1
 80123e6:	819a      	strh	r2, [r3, #12]
      break;
 80123e8:	e008      	b.n	80123fc <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 80123ea:	4b1e      	ldr	r3, [pc, #120]	@ (8012464 <event_callback+0x16c>)
 80123ec:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 80123f0:	491d      	ldr	r1, [pc, #116]	@ (8012468 <event_callback+0x170>)
 80123f2:	481e      	ldr	r0, [pc, #120]	@ (801246c <event_callback+0x174>)
 80123f4:	f00e fac6 	bl	8020984 <iprintf>
      break;
 80123f8:	e000      	b.n	80123fc <event_callback+0x104>
      break;
 80123fa:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 80123fc:	69bb      	ldr	r3, [r7, #24]
 80123fe:	7b9b      	ldrb	r3, [r3, #14]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d025      	beq.n	8012450 <event_callback+0x158>
 8012404:	6a3b      	ldr	r3, [r7, #32]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d022      	beq.n	8012450 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 801240a:	69bb      	ldr	r3, [r7, #24]
 801240c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012410:	2b00      	cmp	r3, #0
 8012412:	bfcc      	ite	gt
 8012414:	2301      	movgt	r3, #1
 8012416:	2300      	movle	r3, #0
 8012418:	b2db      	uxtb	r3, r3
 801241a:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 801241c:	69bb      	ldr	r3, [r7, #24]
 801241e:	895b      	ldrh	r3, [r3, #10]
 8012420:	2b00      	cmp	r3, #0
 8012422:	bf14      	ite	ne
 8012424:	2301      	movne	r3, #1
 8012426:	2300      	moveq	r3, #0
 8012428:	b2db      	uxtb	r3, r3
 801242a:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 801242c:	69bb      	ldr	r3, [r7, #24]
 801242e:	899b      	ldrh	r3, [r3, #12]
 8012430:	2b00      	cmp	r3, #0
 8012432:	bf14      	ite	ne
 8012434:	2301      	movne	r3, #1
 8012436:	2300      	moveq	r3, #0
 8012438:	b2db      	uxtb	r3, r3
 801243a:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 801243c:	69f8      	ldr	r0, [r7, #28]
 801243e:	f00d fd5b 	bl	801fef8 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	693a      	ldr	r2, [r7, #16]
 8012446:	6979      	ldr	r1, [r7, #20]
 8012448:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801244a:	f000 f811 	bl	8012470 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 801244e:	e006      	b.n	801245e <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 8012450:	69f8      	ldr	r0, [r7, #28]
 8012452:	f00d fd51 	bl	801fef8 <sys_arch_unprotect>
 8012456:	e002      	b.n	801245e <event_callback+0x166>
    return;
 8012458:	bf00      	nop
 801245a:	e000      	b.n	801245e <event_callback+0x166>
      return;
 801245c:	bf00      	nop
  }
  done_socket(sock);
}
 801245e:	3728      	adds	r7, #40	@ 0x28
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}
 8012464:	080239dc 	.word	0x080239dc
 8012468:	08023d58 	.word	0x08023d58
 801246c:	08023a30 	.word	0x08023a30

08012470 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b088      	sub	sp, #32
 8012474:	af02      	add	r7, sp, #8
 8012476:	60f8      	str	r0, [r7, #12]
 8012478:	60b9      	str	r1, [r7, #8]
 801247a:	607a      	str	r2, [r7, #4]
 801247c:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 801247e:	4b42      	ldr	r3, [pc, #264]	@ (8012588 <select_check_waiters+0x118>)
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	617b      	str	r3, [r7, #20]
 8012484:	e078      	b.n	8012578 <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 8012486:	697b      	ldr	r3, [r7, #20]
 8012488:	69db      	ldr	r3, [r3, #28]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d171      	bne.n	8012572 <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 801248e:	2300      	movs	r3, #0
 8012490:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 8012492:	697b      	ldr	r3, [r7, #20]
 8012494:	695b      	ldr	r3, [r3, #20]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d009      	beq.n	80124ae <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 801249a:	683b      	ldr	r3, [r7, #0]
 801249c:	9300      	str	r3, [sp, #0]
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	68ba      	ldr	r2, [r7, #8]
 80124a2:	68f9      	ldr	r1, [r7, #12]
 80124a4:	6978      	ldr	r0, [r7, #20]
 80124a6:	f7ff fee3 	bl	8012270 <lwip_poll_should_wake>
 80124aa:	6138      	str	r0, [r7, #16]
 80124ac:	e056      	b.n	801255c <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 80124ae:	68bb      	ldr	r3, [r7, #8]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d017      	beq.n	80124e4 <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 80124b4:	697b      	ldr	r3, [r7, #20]
 80124b6:	689b      	ldr	r3, [r3, #8]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d013      	beq.n	80124e4 <select_check_waiters+0x74>
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	689a      	ldr	r2, [r3, #8]
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	da00      	bge.n	80124c8 <select_check_waiters+0x58>
 80124c6:	331f      	adds	r3, #31
 80124c8:	115b      	asrs	r3, r3, #5
 80124ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	f003 031f 	and.w	r3, r3, #31
 80124d4:	fa22 f303 	lsr.w	r3, r2, r3
 80124d8:	f003 0301 	and.w	r3, r3, #1
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d001      	beq.n	80124e4 <select_check_waiters+0x74>
            do_signal = 1;
 80124e0:	2301      	movs	r3, #1
 80124e2:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d01a      	beq.n	8012520 <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 80124ea:	693b      	ldr	r3, [r7, #16]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d117      	bne.n	8012520 <select_check_waiters+0xb0>
 80124f0:	697b      	ldr	r3, [r7, #20]
 80124f2:	68db      	ldr	r3, [r3, #12]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d013      	beq.n	8012520 <select_check_waiters+0xb0>
 80124f8:	697b      	ldr	r3, [r7, #20]
 80124fa:	68da      	ldr	r2, [r3, #12]
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	da00      	bge.n	8012504 <select_check_waiters+0x94>
 8012502:	331f      	adds	r3, #31
 8012504:	115b      	asrs	r3, r3, #5
 8012506:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	f003 031f 	and.w	r3, r3, #31
 8012510:	fa22 f303 	lsr.w	r3, r2, r3
 8012514:	f003 0301 	and.w	r3, r3, #1
 8012518:	2b00      	cmp	r3, #0
 801251a:	d001      	beq.n	8012520 <select_check_waiters+0xb0>
            do_signal = 1;
 801251c:	2301      	movs	r3, #1
 801251e:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 8012520:	683b      	ldr	r3, [r7, #0]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d01a      	beq.n	801255c <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8012526:	693b      	ldr	r3, [r7, #16]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d117      	bne.n	801255c <select_check_waiters+0xec>
 801252c:	697b      	ldr	r3, [r7, #20]
 801252e:	691b      	ldr	r3, [r3, #16]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d013      	beq.n	801255c <select_check_waiters+0xec>
 8012534:	697b      	ldr	r3, [r7, #20]
 8012536:	691a      	ldr	r2, [r3, #16]
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	2b00      	cmp	r3, #0
 801253c:	da00      	bge.n	8012540 <select_check_waiters+0xd0>
 801253e:	331f      	adds	r3, #31
 8012540:	115b      	asrs	r3, r3, #5
 8012542:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	f003 031f 	and.w	r3, r3, #31
 801254c:	fa22 f303 	lsr.w	r3, r2, r3
 8012550:	f003 0301 	and.w	r3, r3, #1
 8012554:	2b00      	cmp	r3, #0
 8012556:	d001      	beq.n	801255c <select_check_waiters+0xec>
            do_signal = 1;
 8012558:	2301      	movs	r3, #1
 801255a:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 801255c:	693b      	ldr	r3, [r7, #16]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d007      	beq.n	8012572 <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 8012562:	697b      	ldr	r3, [r7, #20]
 8012564:	2201      	movs	r2, #1
 8012566:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8012568:	697b      	ldr	r3, [r7, #20]
 801256a:	3320      	adds	r3, #32
 801256c:	4618      	mov	r0, r3
 801256e:	f00d fc1f 	bl	801fdb0 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	617b      	str	r3, [r7, #20]
 8012578:	697b      	ldr	r3, [r7, #20]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d183      	bne.n	8012486 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 801257e:	bf00      	nop
 8012580:	bf00      	nop
 8012582:	3718      	adds	r7, #24
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}
 8012588:	240099c8 	.word	0x240099c8

0801258c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801258c:	b580      	push	{r7, lr}
 801258e:	b084      	sub	sp, #16
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012596:	f008 fa8b 	bl	801aab0 <sys_timeouts_sleeptime>
 801259a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125a2:	d10b      	bne.n	80125bc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80125a4:	4813      	ldr	r0, [pc, #76]	@ (80125f4 <tcpip_timeouts_mbox_fetch+0x68>)
 80125a6:	f00d fc6c 	bl	801fe82 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80125aa:	2200      	movs	r2, #0
 80125ac:	6839      	ldr	r1, [r7, #0]
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f00d fb42 	bl	801fc38 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80125b4:	480f      	ldr	r0, [pc, #60]	@ (80125f4 <tcpip_timeouts_mbox_fetch+0x68>)
 80125b6:	f00d fc55 	bl	801fe64 <sys_mutex_lock>
    return;
 80125ba:	e018      	b.n	80125ee <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d102      	bne.n	80125c8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80125c2:	f008 fa3b 	bl	801aa3c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80125c6:	e7e6      	b.n	8012596 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80125c8:	480a      	ldr	r0, [pc, #40]	@ (80125f4 <tcpip_timeouts_mbox_fetch+0x68>)
 80125ca:	f00d fc5a 	bl	801fe82 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80125ce:	68fa      	ldr	r2, [r7, #12]
 80125d0:	6839      	ldr	r1, [r7, #0]
 80125d2:	6878      	ldr	r0, [r7, #4]
 80125d4:	f00d fb30 	bl	801fc38 <sys_arch_mbox_fetch>
 80125d8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80125da:	4806      	ldr	r0, [pc, #24]	@ (80125f4 <tcpip_timeouts_mbox_fetch+0x68>)
 80125dc:	f00d fc42 	bl	801fe64 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80125e0:	68bb      	ldr	r3, [r7, #8]
 80125e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125e6:	d102      	bne.n	80125ee <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80125e8:	f008 fa28 	bl	801aa3c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80125ec:	e7d3      	b.n	8012596 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80125ee:	3710      	adds	r7, #16
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}
 80125f4:	240099d8 	.word	0x240099d8

080125f8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b084      	sub	sp, #16
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012600:	4810      	ldr	r0, [pc, #64]	@ (8012644 <tcpip_thread+0x4c>)
 8012602:	f00d fc2f 	bl	801fe64 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012606:	4b10      	ldr	r3, [pc, #64]	@ (8012648 <tcpip_thread+0x50>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d005      	beq.n	801261a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801260e:	4b0e      	ldr	r3, [pc, #56]	@ (8012648 <tcpip_thread+0x50>)
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	4a0e      	ldr	r2, [pc, #56]	@ (801264c <tcpip_thread+0x54>)
 8012614:	6812      	ldr	r2, [r2, #0]
 8012616:	4610      	mov	r0, r2
 8012618:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801261a:	f107 030c 	add.w	r3, r7, #12
 801261e:	4619      	mov	r1, r3
 8012620:	480b      	ldr	r0, [pc, #44]	@ (8012650 <tcpip_thread+0x58>)
 8012622:	f7ff ffb3 	bl	801258c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d106      	bne.n	801263a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801262c:	4b09      	ldr	r3, [pc, #36]	@ (8012654 <tcpip_thread+0x5c>)
 801262e:	2291      	movs	r2, #145	@ 0x91
 8012630:	4909      	ldr	r1, [pc, #36]	@ (8012658 <tcpip_thread+0x60>)
 8012632:	480a      	ldr	r0, [pc, #40]	@ (801265c <tcpip_thread+0x64>)
 8012634:	f00e f9a6 	bl	8020984 <iprintf>
      continue;
 8012638:	e003      	b.n	8012642 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	4618      	mov	r0, r3
 801263e:	f000 f80f 	bl	8012660 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012642:	e7ea      	b.n	801261a <tcpip_thread+0x22>
 8012644:	240099d8 	.word	0x240099d8
 8012648:	240099cc 	.word	0x240099cc
 801264c:	240099d0 	.word	0x240099d0
 8012650:	240099d4 	.word	0x240099d4
 8012654:	08023dac 	.word	0x08023dac
 8012658:	08023ddc 	.word	0x08023ddc
 801265c:	08023dfc 	.word	0x08023dfc

08012660 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b082      	sub	sp, #8
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	781b      	ldrb	r3, [r3, #0]
 801266c:	2b02      	cmp	r3, #2
 801266e:	d026      	beq.n	80126be <tcpip_thread_handle_msg+0x5e>
 8012670:	2b02      	cmp	r3, #2
 8012672:	dc2b      	bgt.n	80126cc <tcpip_thread_handle_msg+0x6c>
 8012674:	2b00      	cmp	r3, #0
 8012676:	d002      	beq.n	801267e <tcpip_thread_handle_msg+0x1e>
 8012678:	2b01      	cmp	r3, #1
 801267a:	d015      	beq.n	80126a8 <tcpip_thread_handle_msg+0x48>
 801267c:	e026      	b.n	80126cc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	68db      	ldr	r3, [r3, #12]
 8012682:	687a      	ldr	r2, [r7, #4]
 8012684:	6850      	ldr	r0, [r2, #4]
 8012686:	687a      	ldr	r2, [r7, #4]
 8012688:	6892      	ldr	r2, [r2, #8]
 801268a:	4611      	mov	r1, r2
 801268c:	4798      	blx	r3
 801268e:	4603      	mov	r3, r0
 8012690:	2b00      	cmp	r3, #0
 8012692:	d004      	beq.n	801269e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	685b      	ldr	r3, [r3, #4]
 8012698:	4618      	mov	r0, r3
 801269a:	f001 fde5 	bl	8014268 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801269e:	6879      	ldr	r1, [r7, #4]
 80126a0:	2009      	movs	r0, #9
 80126a2:	f000 ff31 	bl	8013508 <memp_free>
      break;
 80126a6:	e018      	b.n	80126da <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	685b      	ldr	r3, [r3, #4]
 80126ac:	687a      	ldr	r2, [r7, #4]
 80126ae:	6892      	ldr	r2, [r2, #8]
 80126b0:	4610      	mov	r0, r2
 80126b2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80126b4:	6879      	ldr	r1, [r7, #4]
 80126b6:	2008      	movs	r0, #8
 80126b8:	f000 ff26 	bl	8013508 <memp_free>
      break;
 80126bc:	e00d      	b.n	80126da <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	685b      	ldr	r3, [r3, #4]
 80126c2:	687a      	ldr	r2, [r7, #4]
 80126c4:	6892      	ldr	r2, [r2, #8]
 80126c6:	4610      	mov	r0, r2
 80126c8:	4798      	blx	r3
      break;
 80126ca:	e006      	b.n	80126da <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80126cc:	4b05      	ldr	r3, [pc, #20]	@ (80126e4 <tcpip_thread_handle_msg+0x84>)
 80126ce:	22cf      	movs	r2, #207	@ 0xcf
 80126d0:	4905      	ldr	r1, [pc, #20]	@ (80126e8 <tcpip_thread_handle_msg+0x88>)
 80126d2:	4806      	ldr	r0, [pc, #24]	@ (80126ec <tcpip_thread_handle_msg+0x8c>)
 80126d4:	f00e f956 	bl	8020984 <iprintf>
      break;
 80126d8:	bf00      	nop
  }
}
 80126da:	bf00      	nop
 80126dc:	3708      	adds	r7, #8
 80126de:	46bd      	mov	sp, r7
 80126e0:	bd80      	pop	{r7, pc}
 80126e2:	bf00      	nop
 80126e4:	08023dac 	.word	0x08023dac
 80126e8:	08023ddc 	.word	0x08023ddc
 80126ec:	08023dfc 	.word	0x08023dfc

080126f0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b086      	sub	sp, #24
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	60f8      	str	r0, [r7, #12]
 80126f8:	60b9      	str	r1, [r7, #8]
 80126fa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80126fc:	481a      	ldr	r0, [pc, #104]	@ (8012768 <tcpip_inpkt+0x78>)
 80126fe:	f00d fae3 	bl	801fcc8 <sys_mbox_valid>
 8012702:	4603      	mov	r3, r0
 8012704:	2b00      	cmp	r3, #0
 8012706:	d105      	bne.n	8012714 <tcpip_inpkt+0x24>
 8012708:	4b18      	ldr	r3, [pc, #96]	@ (801276c <tcpip_inpkt+0x7c>)
 801270a:	22fc      	movs	r2, #252	@ 0xfc
 801270c:	4918      	ldr	r1, [pc, #96]	@ (8012770 <tcpip_inpkt+0x80>)
 801270e:	4819      	ldr	r0, [pc, #100]	@ (8012774 <tcpip_inpkt+0x84>)
 8012710:	f00e f938 	bl	8020984 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012714:	2009      	movs	r0, #9
 8012716:	f000 fe81 	bl	801341c <memp_malloc>
 801271a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801271c:	697b      	ldr	r3, [r7, #20]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d102      	bne.n	8012728 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012722:	f04f 33ff 	mov.w	r3, #4294967295
 8012726:	e01a      	b.n	801275e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012728:	697b      	ldr	r3, [r7, #20]
 801272a:	2200      	movs	r2, #0
 801272c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801272e:	697b      	ldr	r3, [r7, #20]
 8012730:	68fa      	ldr	r2, [r7, #12]
 8012732:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012734:	697b      	ldr	r3, [r7, #20]
 8012736:	68ba      	ldr	r2, [r7, #8]
 8012738:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801273a:	697b      	ldr	r3, [r7, #20]
 801273c:	687a      	ldr	r2, [r7, #4]
 801273e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012740:	6979      	ldr	r1, [r7, #20]
 8012742:	4809      	ldr	r0, [pc, #36]	@ (8012768 <tcpip_inpkt+0x78>)
 8012744:	f00d fa5e 	bl	801fc04 <sys_mbox_trypost>
 8012748:	4603      	mov	r3, r0
 801274a:	2b00      	cmp	r3, #0
 801274c:	d006      	beq.n	801275c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801274e:	6979      	ldr	r1, [r7, #20]
 8012750:	2009      	movs	r0, #9
 8012752:	f000 fed9 	bl	8013508 <memp_free>
    return ERR_MEM;
 8012756:	f04f 33ff 	mov.w	r3, #4294967295
 801275a:	e000      	b.n	801275e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801275c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801275e:	4618      	mov	r0, r3
 8012760:	3718      	adds	r7, #24
 8012762:	46bd      	mov	sp, r7
 8012764:	bd80      	pop	{r7, pc}
 8012766:	bf00      	nop
 8012768:	240099d4 	.word	0x240099d4
 801276c:	08023dac 	.word	0x08023dac
 8012770:	08023e24 	.word	0x08023e24
 8012774:	08023dfc 	.word	0x08023dfc

08012778 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b082      	sub	sp, #8
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
 8012780:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012782:	683b      	ldr	r3, [r7, #0]
 8012784:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012788:	f003 0318 	and.w	r3, r3, #24
 801278c:	2b00      	cmp	r3, #0
 801278e:	d006      	beq.n	801279e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012790:	4a08      	ldr	r2, [pc, #32]	@ (80127b4 <tcpip_input+0x3c>)
 8012792:	6839      	ldr	r1, [r7, #0]
 8012794:	6878      	ldr	r0, [r7, #4]
 8012796:	f7ff ffab 	bl	80126f0 <tcpip_inpkt>
 801279a:	4603      	mov	r3, r0
 801279c:	e005      	b.n	80127aa <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801279e:	4a06      	ldr	r2, [pc, #24]	@ (80127b8 <tcpip_input+0x40>)
 80127a0:	6839      	ldr	r1, [r7, #0]
 80127a2:	6878      	ldr	r0, [r7, #4]
 80127a4:	f7ff ffa4 	bl	80126f0 <tcpip_inpkt>
 80127a8:	4603      	mov	r3, r0
}
 80127aa:	4618      	mov	r0, r3
 80127ac:	3708      	adds	r7, #8
 80127ae:	46bd      	mov	sp, r7
 80127b0:	bd80      	pop	{r7, pc}
 80127b2:	bf00      	nop
 80127b4:	0801fa01 	.word	0x0801fa01
 80127b8:	0801e679 	.word	0x0801e679

080127bc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80127bc:	b580      	push	{r7, lr}
 80127be:	b084      	sub	sp, #16
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
 80127c4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80127c6:	4819      	ldr	r0, [pc, #100]	@ (801282c <tcpip_try_callback+0x70>)
 80127c8:	f00d fa7e 	bl	801fcc8 <sys_mbox_valid>
 80127cc:	4603      	mov	r3, r0
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d106      	bne.n	80127e0 <tcpip_try_callback+0x24>
 80127d2:	4b17      	ldr	r3, [pc, #92]	@ (8012830 <tcpip_try_callback+0x74>)
 80127d4:	f240 125d 	movw	r2, #349	@ 0x15d
 80127d8:	4916      	ldr	r1, [pc, #88]	@ (8012834 <tcpip_try_callback+0x78>)
 80127da:	4817      	ldr	r0, [pc, #92]	@ (8012838 <tcpip_try_callback+0x7c>)
 80127dc:	f00e f8d2 	bl	8020984 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80127e0:	2008      	movs	r0, #8
 80127e2:	f000 fe1b 	bl	801341c <memp_malloc>
 80127e6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d102      	bne.n	80127f4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80127ee:	f04f 33ff 	mov.w	r3, #4294967295
 80127f2:	e017      	b.n	8012824 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	2201      	movs	r2, #1
 80127f8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	687a      	ldr	r2, [r7, #4]
 80127fe:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	683a      	ldr	r2, [r7, #0]
 8012804:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012806:	68f9      	ldr	r1, [r7, #12]
 8012808:	4808      	ldr	r0, [pc, #32]	@ (801282c <tcpip_try_callback+0x70>)
 801280a:	f00d f9fb 	bl	801fc04 <sys_mbox_trypost>
 801280e:	4603      	mov	r3, r0
 8012810:	2b00      	cmp	r3, #0
 8012812:	d006      	beq.n	8012822 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012814:	68f9      	ldr	r1, [r7, #12]
 8012816:	2008      	movs	r0, #8
 8012818:	f000 fe76 	bl	8013508 <memp_free>
    return ERR_MEM;
 801281c:	f04f 33ff 	mov.w	r3, #4294967295
 8012820:	e000      	b.n	8012824 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012822:	2300      	movs	r3, #0
}
 8012824:	4618      	mov	r0, r3
 8012826:	3710      	adds	r7, #16
 8012828:	46bd      	mov	sp, r7
 801282a:	bd80      	pop	{r7, pc}
 801282c:	240099d4 	.word	0x240099d4
 8012830:	08023dac 	.word	0x08023dac
 8012834:	08023e24 	.word	0x08023e24
 8012838:	08023dfc 	.word	0x08023dfc

0801283c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801283c:	b580      	push	{r7, lr}
 801283e:	b084      	sub	sp, #16
 8012840:	af00      	add	r7, sp, #0
 8012842:	60f8      	str	r0, [r7, #12]
 8012844:	60b9      	str	r1, [r7, #8]
 8012846:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8012848:	4806      	ldr	r0, [pc, #24]	@ (8012864 <tcpip_send_msg_wait_sem+0x28>)
 801284a:	f00d fb0b 	bl	801fe64 <sys_mutex_lock>
  fn(apimsg);
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	68b8      	ldr	r0, [r7, #8]
 8012852:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8012854:	4803      	ldr	r0, [pc, #12]	@ (8012864 <tcpip_send_msg_wait_sem+0x28>)
 8012856:	f00d fb14 	bl	801fe82 <sys_mutex_unlock>
  return ERR_OK;
 801285a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801285c:	4618      	mov	r0, r3
 801285e:	3710      	adds	r7, #16
 8012860:	46bd      	mov	sp, r7
 8012862:	bd80      	pop	{r7, pc}
 8012864:	240099d8 	.word	0x240099d8

08012868 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b084      	sub	sp, #16
 801286c:	af02      	add	r7, sp, #8
 801286e:	6078      	str	r0, [r7, #4]
 8012870:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012872:	f000 f92d 	bl	8012ad0 <lwip_init>

  tcpip_init_done = initfunc;
 8012876:	4a17      	ldr	r2, [pc, #92]	@ (80128d4 <tcpip_init+0x6c>)
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801287c:	4a16      	ldr	r2, [pc, #88]	@ (80128d8 <tcpip_init+0x70>)
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012882:	2106      	movs	r1, #6
 8012884:	4815      	ldr	r0, [pc, #84]	@ (80128dc <tcpip_init+0x74>)
 8012886:	f00d f991 	bl	801fbac <sys_mbox_new>
 801288a:	4603      	mov	r3, r0
 801288c:	2b00      	cmp	r3, #0
 801288e:	d006      	beq.n	801289e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012890:	4b13      	ldr	r3, [pc, #76]	@ (80128e0 <tcpip_init+0x78>)
 8012892:	f240 2261 	movw	r2, #609	@ 0x261
 8012896:	4913      	ldr	r1, [pc, #76]	@ (80128e4 <tcpip_init+0x7c>)
 8012898:	4813      	ldr	r0, [pc, #76]	@ (80128e8 <tcpip_init+0x80>)
 801289a:	f00e f873 	bl	8020984 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801289e:	4813      	ldr	r0, [pc, #76]	@ (80128ec <tcpip_init+0x84>)
 80128a0:	f00d faca 	bl	801fe38 <sys_mutex_new>
 80128a4:	4603      	mov	r3, r0
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d006      	beq.n	80128b8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80128aa:	4b0d      	ldr	r3, [pc, #52]	@ (80128e0 <tcpip_init+0x78>)
 80128ac:	f240 2265 	movw	r2, #613	@ 0x265
 80128b0:	490f      	ldr	r1, [pc, #60]	@ (80128f0 <tcpip_init+0x88>)
 80128b2:	480d      	ldr	r0, [pc, #52]	@ (80128e8 <tcpip_init+0x80>)
 80128b4:	f00e f866 	bl	8020984 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80128b8:	2318      	movs	r3, #24
 80128ba:	9300      	str	r3, [sp, #0]
 80128bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80128c0:	2200      	movs	r2, #0
 80128c2:	490c      	ldr	r1, [pc, #48]	@ (80128f4 <tcpip_init+0x8c>)
 80128c4:	480c      	ldr	r0, [pc, #48]	@ (80128f8 <tcpip_init+0x90>)
 80128c6:	f00d fae9 	bl	801fe9c <sys_thread_new>
}
 80128ca:	bf00      	nop
 80128cc:	3708      	adds	r7, #8
 80128ce:	46bd      	mov	sp, r7
 80128d0:	bd80      	pop	{r7, pc}
 80128d2:	bf00      	nop
 80128d4:	240099cc 	.word	0x240099cc
 80128d8:	240099d0 	.word	0x240099d0
 80128dc:	240099d4 	.word	0x240099d4
 80128e0:	08023dac 	.word	0x08023dac
 80128e4:	08023e34 	.word	0x08023e34
 80128e8:	08023dfc 	.word	0x08023dfc
 80128ec:	240099d8 	.word	0x240099d8
 80128f0:	08023e58 	.word	0x08023e58
 80128f4:	080125f9 	.word	0x080125f9
 80128f8:	08023e7c 	.word	0x08023e7c

080128fc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80128fc:	b480      	push	{r7}
 80128fe:	b083      	sub	sp, #12
 8012900:	af00      	add	r7, sp, #0
 8012902:	4603      	mov	r3, r0
 8012904:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8012906:	88fb      	ldrh	r3, [r7, #6]
 8012908:	021b      	lsls	r3, r3, #8
 801290a:	b21a      	sxth	r2, r3
 801290c:	88fb      	ldrh	r3, [r7, #6]
 801290e:	0a1b      	lsrs	r3, r3, #8
 8012910:	b29b      	uxth	r3, r3
 8012912:	b21b      	sxth	r3, r3
 8012914:	4313      	orrs	r3, r2
 8012916:	b21b      	sxth	r3, r3
 8012918:	b29b      	uxth	r3, r3
}
 801291a:	4618      	mov	r0, r3
 801291c:	370c      	adds	r7, #12
 801291e:	46bd      	mov	sp, r7
 8012920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012924:	4770      	bx	lr

08012926 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012926:	b480      	push	{r7}
 8012928:	b083      	sub	sp, #12
 801292a:	af00      	add	r7, sp, #0
 801292c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	061a      	lsls	r2, r3, #24
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	021b      	lsls	r3, r3, #8
 8012936:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801293a:	431a      	orrs	r2, r3
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	0a1b      	lsrs	r3, r3, #8
 8012940:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012944:	431a      	orrs	r2, r3
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	0e1b      	lsrs	r3, r3, #24
 801294a:	4313      	orrs	r3, r2
}
 801294c:	4618      	mov	r0, r3
 801294e:	370c      	adds	r7, #12
 8012950:	46bd      	mov	sp, r7
 8012952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012956:	4770      	bx	lr

08012958 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8012958:	b480      	push	{r7}
 801295a:	b089      	sub	sp, #36	@ 0x24
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8012966:	2300      	movs	r3, #0
 8012968:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 801296a:	2300      	movs	r3, #0
 801296c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 801296e:	69fb      	ldr	r3, [r7, #28]
 8012970:	f003 0301 	and.w	r3, r3, #1
 8012974:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8012976:	693b      	ldr	r3, [r7, #16]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d00d      	beq.n	8012998 <lwip_standard_chksum+0x40>
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	2b00      	cmp	r3, #0
 8012980:	dd0a      	ble.n	8012998 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8012982:	69fa      	ldr	r2, [r7, #28]
 8012984:	1c53      	adds	r3, r2, #1
 8012986:	61fb      	str	r3, [r7, #28]
 8012988:	f107 030e 	add.w	r3, r7, #14
 801298c:	3301      	adds	r3, #1
 801298e:	7812      	ldrb	r2, [r2, #0]
 8012990:	701a      	strb	r2, [r3, #0]
    len--;
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	3b01      	subs	r3, #1
 8012996:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8012998:	69fb      	ldr	r3, [r7, #28]
 801299a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 801299c:	e00a      	b.n	80129b4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 801299e:	69bb      	ldr	r3, [r7, #24]
 80129a0:	1c9a      	adds	r2, r3, #2
 80129a2:	61ba      	str	r2, [r7, #24]
 80129a4:	881b      	ldrh	r3, [r3, #0]
 80129a6:	461a      	mov	r2, r3
 80129a8:	697b      	ldr	r3, [r7, #20]
 80129aa:	4413      	add	r3, r2
 80129ac:	617b      	str	r3, [r7, #20]
    len -= 2;
 80129ae:	683b      	ldr	r3, [r7, #0]
 80129b0:	3b02      	subs	r3, #2
 80129b2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80129b4:	683b      	ldr	r3, [r7, #0]
 80129b6:	2b01      	cmp	r3, #1
 80129b8:	dcf1      	bgt.n	801299e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	dd04      	ble.n	80129ca <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80129c0:	f107 030e 	add.w	r3, r7, #14
 80129c4:	69ba      	ldr	r2, [r7, #24]
 80129c6:	7812      	ldrb	r2, [r2, #0]
 80129c8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80129ca:	89fb      	ldrh	r3, [r7, #14]
 80129cc:	461a      	mov	r2, r3
 80129ce:	697b      	ldr	r3, [r7, #20]
 80129d0:	4413      	add	r3, r2
 80129d2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80129d4:	697b      	ldr	r3, [r7, #20]
 80129d6:	0c1a      	lsrs	r2, r3, #16
 80129d8:	697b      	ldr	r3, [r7, #20]
 80129da:	b29b      	uxth	r3, r3
 80129dc:	4413      	add	r3, r2
 80129de:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80129e0:	697b      	ldr	r3, [r7, #20]
 80129e2:	0c1a      	lsrs	r2, r3, #16
 80129e4:	697b      	ldr	r3, [r7, #20]
 80129e6:	b29b      	uxth	r3, r3
 80129e8:	4413      	add	r3, r2
 80129ea:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80129ec:	693b      	ldr	r3, [r7, #16]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d007      	beq.n	8012a02 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80129f2:	697b      	ldr	r3, [r7, #20]
 80129f4:	021b      	lsls	r3, r3, #8
 80129f6:	b29a      	uxth	r2, r3
 80129f8:	697b      	ldr	r3, [r7, #20]
 80129fa:	0a1b      	lsrs	r3, r3, #8
 80129fc:	b2db      	uxtb	r3, r3
 80129fe:	4313      	orrs	r3, r2
 8012a00:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8012a02:	697b      	ldr	r3, [r7, #20]
 8012a04:	b29b      	uxth	r3, r3
}
 8012a06:	4618      	mov	r0, r3
 8012a08:	3724      	adds	r7, #36	@ 0x24
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a10:	4770      	bx	lr

08012a12 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8012a12:	b580      	push	{r7, lr}
 8012a14:	b082      	sub	sp, #8
 8012a16:	af00      	add	r7, sp, #0
 8012a18:	6078      	str	r0, [r7, #4]
 8012a1a:	460b      	mov	r3, r1
 8012a1c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8012a1e:	887b      	ldrh	r3, [r7, #2]
 8012a20:	4619      	mov	r1, r3
 8012a22:	6878      	ldr	r0, [r7, #4]
 8012a24:	f7ff ff98 	bl	8012958 <lwip_standard_chksum>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	43db      	mvns	r3, r3
 8012a2c:	b29b      	uxth	r3, r3
}
 8012a2e:	4618      	mov	r0, r3
 8012a30:	3708      	adds	r7, #8
 8012a32:	46bd      	mov	sp, r7
 8012a34:	bd80      	pop	{r7, pc}

08012a36 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8012a36:	b580      	push	{r7, lr}
 8012a38:	b086      	sub	sp, #24
 8012a3a:	af00      	add	r7, sp, #0
 8012a3c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8012a42:	2300      	movs	r3, #0
 8012a44:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	613b      	str	r3, [r7, #16]
 8012a4a:	e02b      	b.n	8012aa4 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8012a4c:	693b      	ldr	r3, [r7, #16]
 8012a4e:	685a      	ldr	r2, [r3, #4]
 8012a50:	693b      	ldr	r3, [r7, #16]
 8012a52:	895b      	ldrh	r3, [r3, #10]
 8012a54:	4619      	mov	r1, r3
 8012a56:	4610      	mov	r0, r2
 8012a58:	f7ff ff7e 	bl	8012958 <lwip_standard_chksum>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	461a      	mov	r2, r3
 8012a60:	697b      	ldr	r3, [r7, #20]
 8012a62:	4413      	add	r3, r2
 8012a64:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8012a66:	697b      	ldr	r3, [r7, #20]
 8012a68:	0c1a      	lsrs	r2, r3, #16
 8012a6a:	697b      	ldr	r3, [r7, #20]
 8012a6c:	b29b      	uxth	r3, r3
 8012a6e:	4413      	add	r3, r2
 8012a70:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8012a72:	693b      	ldr	r3, [r7, #16]
 8012a74:	895b      	ldrh	r3, [r3, #10]
 8012a76:	f003 0301 	and.w	r3, r3, #1
 8012a7a:	b29b      	uxth	r3, r3
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d00e      	beq.n	8012a9e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	bf0c      	ite	eq
 8012a86:	2301      	moveq	r3, #1
 8012a88:	2300      	movne	r3, #0
 8012a8a:	b2db      	uxtb	r3, r3
 8012a8c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8012a8e:	697b      	ldr	r3, [r7, #20]
 8012a90:	021b      	lsls	r3, r3, #8
 8012a92:	b29a      	uxth	r2, r3
 8012a94:	697b      	ldr	r3, [r7, #20]
 8012a96:	0a1b      	lsrs	r3, r3, #8
 8012a98:	b2db      	uxtb	r3, r3
 8012a9a:	4313      	orrs	r3, r2
 8012a9c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	613b      	str	r3, [r7, #16]
 8012aa4:	693b      	ldr	r3, [r7, #16]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d1d0      	bne.n	8012a4c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d007      	beq.n	8012ac0 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	021b      	lsls	r3, r3, #8
 8012ab4:	b29a      	uxth	r2, r3
 8012ab6:	697b      	ldr	r3, [r7, #20]
 8012ab8:	0a1b      	lsrs	r3, r3, #8
 8012aba:	b2db      	uxtb	r3, r3
 8012abc:	4313      	orrs	r3, r2
 8012abe:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	b29b      	uxth	r3, r3
 8012ac4:	43db      	mvns	r3, r3
 8012ac6:	b29b      	uxth	r3, r3
}
 8012ac8:	4618      	mov	r0, r3
 8012aca:	3718      	adds	r7, #24
 8012acc:	46bd      	mov	sp, r7
 8012ace:	bd80      	pop	{r7, pc}

08012ad0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b082      	sub	sp, #8
 8012ad4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8012ada:	f00d f9a1 	bl	801fe20 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8012ade:	f000 f8d5 	bl	8012c8c <mem_init>
  memp_init();
 8012ae2:	f000 fc2d 	bl	8013340 <memp_init>
  pbuf_init();
  netif_init();
 8012ae6:	f000 fd39 	bl	801355c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8012aea:	f008 f819 	bl	801ab20 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8012aee:	f001 fe65 	bl	80147bc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8012af2:	f007 ff5b 	bl	801a9ac <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8012af6:	bf00      	nop
 8012af8:	3708      	adds	r7, #8
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}
	...

08012b00 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8012b00:	b480      	push	{r7}
 8012b02:	b083      	sub	sp, #12
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	4603      	mov	r3, r0
 8012b08:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8012b0a:	4b05      	ldr	r3, [pc, #20]	@ (8012b20 <ptr_to_mem+0x20>)
 8012b0c:	681a      	ldr	r2, [r3, #0]
 8012b0e:	88fb      	ldrh	r3, [r7, #6]
 8012b10:	4413      	add	r3, r2
}
 8012b12:	4618      	mov	r0, r3
 8012b14:	370c      	adds	r7, #12
 8012b16:	46bd      	mov	sp, r7
 8012b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1c:	4770      	bx	lr
 8012b1e:	bf00      	nop
 8012b20:	240099f4 	.word	0x240099f4

08012b24 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012b24:	b480      	push	{r7}
 8012b26:	b083      	sub	sp, #12
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8012b2c:	4b05      	ldr	r3, [pc, #20]	@ (8012b44 <mem_to_ptr+0x20>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	687a      	ldr	r2, [r7, #4]
 8012b32:	1ad3      	subs	r3, r2, r3
 8012b34:	b29b      	uxth	r3, r3
}
 8012b36:	4618      	mov	r0, r3
 8012b38:	370c      	adds	r7, #12
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b40:	4770      	bx	lr
 8012b42:	bf00      	nop
 8012b44:	240099f4 	.word	0x240099f4

08012b48 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8012b48:	b590      	push	{r4, r7, lr}
 8012b4a:	b085      	sub	sp, #20
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8012b50:	4b45      	ldr	r3, [pc, #276]	@ (8012c68 <plug_holes+0x120>)
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	687a      	ldr	r2, [r7, #4]
 8012b56:	429a      	cmp	r2, r3
 8012b58:	d206      	bcs.n	8012b68 <plug_holes+0x20>
 8012b5a:	4b44      	ldr	r3, [pc, #272]	@ (8012c6c <plug_holes+0x124>)
 8012b5c:	f240 12df 	movw	r2, #479	@ 0x1df
 8012b60:	4943      	ldr	r1, [pc, #268]	@ (8012c70 <plug_holes+0x128>)
 8012b62:	4844      	ldr	r0, [pc, #272]	@ (8012c74 <plug_holes+0x12c>)
 8012b64:	f00d ff0e 	bl	8020984 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012b68:	4b43      	ldr	r3, [pc, #268]	@ (8012c78 <plug_holes+0x130>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	687a      	ldr	r2, [r7, #4]
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	d306      	bcc.n	8012b80 <plug_holes+0x38>
 8012b72:	4b3e      	ldr	r3, [pc, #248]	@ (8012c6c <plug_holes+0x124>)
 8012b74:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8012b78:	4940      	ldr	r1, [pc, #256]	@ (8012c7c <plug_holes+0x134>)
 8012b7a:	483e      	ldr	r0, [pc, #248]	@ (8012c74 <plug_holes+0x12c>)
 8012b7c:	f00d ff02 	bl	8020984 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	791b      	ldrb	r3, [r3, #4]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d006      	beq.n	8012b96 <plug_holes+0x4e>
 8012b88:	4b38      	ldr	r3, [pc, #224]	@ (8012c6c <plug_holes+0x124>)
 8012b8a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8012b8e:	493c      	ldr	r1, [pc, #240]	@ (8012c80 <plug_holes+0x138>)
 8012b90:	4838      	ldr	r0, [pc, #224]	@ (8012c74 <plug_holes+0x12c>)
 8012b92:	f00d fef7 	bl	8020984 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	881b      	ldrh	r3, [r3, #0]
 8012b9a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012b9e:	d906      	bls.n	8012bae <plug_holes+0x66>
 8012ba0:	4b32      	ldr	r3, [pc, #200]	@ (8012c6c <plug_holes+0x124>)
 8012ba2:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8012ba6:	4937      	ldr	r1, [pc, #220]	@ (8012c84 <plug_holes+0x13c>)
 8012ba8:	4832      	ldr	r0, [pc, #200]	@ (8012c74 <plug_holes+0x12c>)
 8012baa:	f00d feeb 	bl	8020984 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	881b      	ldrh	r3, [r3, #0]
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f7ff ffa4 	bl	8012b00 <ptr_to_mem>
 8012bb8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8012bba:	687a      	ldr	r2, [r7, #4]
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	429a      	cmp	r2, r3
 8012bc0:	d024      	beq.n	8012c0c <plug_holes+0xc4>
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	791b      	ldrb	r3, [r3, #4]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d120      	bne.n	8012c0c <plug_holes+0xc4>
 8012bca:	4b2b      	ldr	r3, [pc, #172]	@ (8012c78 <plug_holes+0x130>)
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	68fa      	ldr	r2, [r7, #12]
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	d01b      	beq.n	8012c0c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8012bd4:	4b2c      	ldr	r3, [pc, #176]	@ (8012c88 <plug_holes+0x140>)
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	68fa      	ldr	r2, [r7, #12]
 8012bda:	429a      	cmp	r2, r3
 8012bdc:	d102      	bne.n	8012be4 <plug_holes+0x9c>
      lfree = mem;
 8012bde:	4a2a      	ldr	r2, [pc, #168]	@ (8012c88 <plug_holes+0x140>)
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	881a      	ldrh	r2, [r3, #0]
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	881b      	ldrh	r3, [r3, #0]
 8012bf0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012bf4:	d00a      	beq.n	8012c0c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	881b      	ldrh	r3, [r3, #0]
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f7ff ff80 	bl	8012b00 <ptr_to_mem>
 8012c00:	4604      	mov	r4, r0
 8012c02:	6878      	ldr	r0, [r7, #4]
 8012c04:	f7ff ff8e 	bl	8012b24 <mem_to_ptr>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	885b      	ldrh	r3, [r3, #2]
 8012c10:	4618      	mov	r0, r3
 8012c12:	f7ff ff75 	bl	8012b00 <ptr_to_mem>
 8012c16:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8012c18:	68ba      	ldr	r2, [r7, #8]
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	429a      	cmp	r2, r3
 8012c1e:	d01f      	beq.n	8012c60 <plug_holes+0x118>
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	791b      	ldrb	r3, [r3, #4]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d11b      	bne.n	8012c60 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012c28:	4b17      	ldr	r3, [pc, #92]	@ (8012c88 <plug_holes+0x140>)
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	687a      	ldr	r2, [r7, #4]
 8012c2e:	429a      	cmp	r2, r3
 8012c30:	d102      	bne.n	8012c38 <plug_holes+0xf0>
      lfree = pmem;
 8012c32:	4a15      	ldr	r2, [pc, #84]	@ (8012c88 <plug_holes+0x140>)
 8012c34:	68bb      	ldr	r3, [r7, #8]
 8012c36:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	881a      	ldrh	r2, [r3, #0]
 8012c3c:	68bb      	ldr	r3, [r7, #8]
 8012c3e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	881b      	ldrh	r3, [r3, #0]
 8012c44:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012c48:	d00a      	beq.n	8012c60 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	881b      	ldrh	r3, [r3, #0]
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f7ff ff56 	bl	8012b00 <ptr_to_mem>
 8012c54:	4604      	mov	r4, r0
 8012c56:	68b8      	ldr	r0, [r7, #8]
 8012c58:	f7ff ff64 	bl	8012b24 <mem_to_ptr>
 8012c5c:	4603      	mov	r3, r0
 8012c5e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8012c60:	bf00      	nop
 8012c62:	3714      	adds	r7, #20
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bd90      	pop	{r4, r7, pc}
 8012c68:	240099f4 	.word	0x240099f4
 8012c6c:	08023e8c 	.word	0x08023e8c
 8012c70:	08023ebc 	.word	0x08023ebc
 8012c74:	08023ed4 	.word	0x08023ed4
 8012c78:	240099f8 	.word	0x240099f8
 8012c7c:	08023efc 	.word	0x08023efc
 8012c80:	08023f18 	.word	0x08023f18
 8012c84:	08023f34 	.word	0x08023f34
 8012c88:	24009a00 	.word	0x24009a00

08012c8c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b082      	sub	sp, #8
 8012c90:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8012c92:	4b1d      	ldr	r3, [pc, #116]	@ (8012d08 <mem_init+0x7c>)
 8012c94:	4a1d      	ldr	r2, [pc, #116]	@ (8012d0c <mem_init+0x80>)
 8012c96:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012c98:	4b1b      	ldr	r3, [pc, #108]	@ (8012d08 <mem_init+0x7c>)
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8012ca4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	2200      	movs	r2, #0
 8012caa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2200      	movs	r2, #0
 8012cb0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8012cb2:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8012cb6:	f7ff ff23 	bl	8012b00 <ptr_to_mem>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	4a14      	ldr	r2, [pc, #80]	@ (8012d10 <mem_init+0x84>)
 8012cbe:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8012cc0:	4b13      	ldr	r3, [pc, #76]	@ (8012d10 <mem_init+0x84>)
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	2201      	movs	r2, #1
 8012cc6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012cc8:	4b11      	ldr	r3, [pc, #68]	@ (8012d10 <mem_init+0x84>)
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8012cd0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8012cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8012d10 <mem_init+0x84>)
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8012cda:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8012cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8012d08 <mem_init+0x7c>)
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	4a0c      	ldr	r2, [pc, #48]	@ (8012d14 <mem_init+0x88>)
 8012ce2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8012ce4:	480c      	ldr	r0, [pc, #48]	@ (8012d18 <mem_init+0x8c>)
 8012ce6:	f00d f8a7 	bl	801fe38 <sys_mutex_new>
 8012cea:	4603      	mov	r3, r0
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d006      	beq.n	8012cfe <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8012cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8012d1c <mem_init+0x90>)
 8012cf2:	f240 221f 	movw	r2, #543	@ 0x21f
 8012cf6:	490a      	ldr	r1, [pc, #40]	@ (8012d20 <mem_init+0x94>)
 8012cf8:	480a      	ldr	r0, [pc, #40]	@ (8012d24 <mem_init+0x98>)
 8012cfa:	f00d fe43 	bl	8020984 <iprintf>
  }
}
 8012cfe:	bf00      	nop
 8012d00:	3708      	adds	r7, #8
 8012d02:	46bd      	mov	sp, r7
 8012d04:	bd80      	pop	{r7, pc}
 8012d06:	bf00      	nop
 8012d08:	240099f4 	.word	0x240099f4
 8012d0c:	30004000 	.word	0x30004000
 8012d10:	240099f8 	.word	0x240099f8
 8012d14:	24009a00 	.word	0x24009a00
 8012d18:	240099fc 	.word	0x240099fc
 8012d1c:	08023e8c 	.word	0x08023e8c
 8012d20:	08023f60 	.word	0x08023f60
 8012d24:	08023ed4 	.word	0x08023ed4

08012d28 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b086      	sub	sp, #24
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8012d30:	6878      	ldr	r0, [r7, #4]
 8012d32:	f7ff fef7 	bl	8012b24 <mem_to_ptr>
 8012d36:	4603      	mov	r3, r0
 8012d38:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	881b      	ldrh	r3, [r3, #0]
 8012d3e:	4618      	mov	r0, r3
 8012d40:	f7ff fede 	bl	8012b00 <ptr_to_mem>
 8012d44:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	885b      	ldrh	r3, [r3, #2]
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f7ff fed8 	bl	8012b00 <ptr_to_mem>
 8012d50:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	881b      	ldrh	r3, [r3, #0]
 8012d56:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012d5a:	d818      	bhi.n	8012d8e <mem_link_valid+0x66>
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	885b      	ldrh	r3, [r3, #2]
 8012d60:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012d64:	d813      	bhi.n	8012d8e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012d6a:	8afa      	ldrh	r2, [r7, #22]
 8012d6c:	429a      	cmp	r2, r3
 8012d6e:	d004      	beq.n	8012d7a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	881b      	ldrh	r3, [r3, #0]
 8012d74:	8afa      	ldrh	r2, [r7, #22]
 8012d76:	429a      	cmp	r2, r3
 8012d78:	d109      	bne.n	8012d8e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012d7a:	4b08      	ldr	r3, [pc, #32]	@ (8012d9c <mem_link_valid+0x74>)
 8012d7c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012d7e:	693a      	ldr	r2, [r7, #16]
 8012d80:	429a      	cmp	r2, r3
 8012d82:	d006      	beq.n	8012d92 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012d84:	693b      	ldr	r3, [r7, #16]
 8012d86:	885b      	ldrh	r3, [r3, #2]
 8012d88:	8afa      	ldrh	r2, [r7, #22]
 8012d8a:	429a      	cmp	r2, r3
 8012d8c:	d001      	beq.n	8012d92 <mem_link_valid+0x6a>
    return 0;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	e000      	b.n	8012d94 <mem_link_valid+0x6c>
  }
  return 1;
 8012d92:	2301      	movs	r3, #1
}
 8012d94:	4618      	mov	r0, r3
 8012d96:	3718      	adds	r7, #24
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}
 8012d9c:	240099f8 	.word	0x240099f8

08012da0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b088      	sub	sp, #32
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d070      	beq.n	8012e90 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f003 0303 	and.w	r3, r3, #3
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d00d      	beq.n	8012dd4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8012db8:	4b37      	ldr	r3, [pc, #220]	@ (8012e98 <mem_free+0xf8>)
 8012dba:	f240 2273 	movw	r2, #627	@ 0x273
 8012dbe:	4937      	ldr	r1, [pc, #220]	@ (8012e9c <mem_free+0xfc>)
 8012dc0:	4837      	ldr	r0, [pc, #220]	@ (8012ea0 <mem_free+0x100>)
 8012dc2:	f00d fddf 	bl	8020984 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012dc6:	f00d f889 	bl	801fedc <sys_arch_protect>
 8012dca:	60f8      	str	r0, [r7, #12]
 8012dcc:	68f8      	ldr	r0, [r7, #12]
 8012dce:	f00d f893 	bl	801fef8 <sys_arch_unprotect>
    return;
 8012dd2:	e05e      	b.n	8012e92 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	3b08      	subs	r3, #8
 8012dd8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8012dda:	4b32      	ldr	r3, [pc, #200]	@ (8012ea4 <mem_free+0x104>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	69fa      	ldr	r2, [r7, #28]
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d306      	bcc.n	8012df2 <mem_free+0x52>
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	f103 020c 	add.w	r2, r3, #12
 8012dea:	4b2f      	ldr	r3, [pc, #188]	@ (8012ea8 <mem_free+0x108>)
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	429a      	cmp	r2, r3
 8012df0:	d90d      	bls.n	8012e0e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8012df2:	4b29      	ldr	r3, [pc, #164]	@ (8012e98 <mem_free+0xf8>)
 8012df4:	f240 227f 	movw	r2, #639	@ 0x27f
 8012df8:	492c      	ldr	r1, [pc, #176]	@ (8012eac <mem_free+0x10c>)
 8012dfa:	4829      	ldr	r0, [pc, #164]	@ (8012ea0 <mem_free+0x100>)
 8012dfc:	f00d fdc2 	bl	8020984 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012e00:	f00d f86c 	bl	801fedc <sys_arch_protect>
 8012e04:	6138      	str	r0, [r7, #16]
 8012e06:	6938      	ldr	r0, [r7, #16]
 8012e08:	f00d f876 	bl	801fef8 <sys_arch_unprotect>
    return;
 8012e0c:	e041      	b.n	8012e92 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012e0e:	4828      	ldr	r0, [pc, #160]	@ (8012eb0 <mem_free+0x110>)
 8012e10:	f00d f828 	bl	801fe64 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	791b      	ldrb	r3, [r3, #4]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d110      	bne.n	8012e3e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8012e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8012e98 <mem_free+0xf8>)
 8012e1e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8012e22:	4924      	ldr	r1, [pc, #144]	@ (8012eb4 <mem_free+0x114>)
 8012e24:	481e      	ldr	r0, [pc, #120]	@ (8012ea0 <mem_free+0x100>)
 8012e26:	f00d fdad 	bl	8020984 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012e2a:	4821      	ldr	r0, [pc, #132]	@ (8012eb0 <mem_free+0x110>)
 8012e2c:	f00d f829 	bl	801fe82 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012e30:	f00d f854 	bl	801fedc <sys_arch_protect>
 8012e34:	6178      	str	r0, [r7, #20]
 8012e36:	6978      	ldr	r0, [r7, #20]
 8012e38:	f00d f85e 	bl	801fef8 <sys_arch_unprotect>
    return;
 8012e3c:	e029      	b.n	8012e92 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8012e3e:	69f8      	ldr	r0, [r7, #28]
 8012e40:	f7ff ff72 	bl	8012d28 <mem_link_valid>
 8012e44:	4603      	mov	r3, r0
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d110      	bne.n	8012e6c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8012e4a:	4b13      	ldr	r3, [pc, #76]	@ (8012e98 <mem_free+0xf8>)
 8012e4c:	f240 2295 	movw	r2, #661	@ 0x295
 8012e50:	4919      	ldr	r1, [pc, #100]	@ (8012eb8 <mem_free+0x118>)
 8012e52:	4813      	ldr	r0, [pc, #76]	@ (8012ea0 <mem_free+0x100>)
 8012e54:	f00d fd96 	bl	8020984 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012e58:	4815      	ldr	r0, [pc, #84]	@ (8012eb0 <mem_free+0x110>)
 8012e5a:	f00d f812 	bl	801fe82 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012e5e:	f00d f83d 	bl	801fedc <sys_arch_protect>
 8012e62:	61b8      	str	r0, [r7, #24]
 8012e64:	69b8      	ldr	r0, [r7, #24]
 8012e66:	f00d f847 	bl	801fef8 <sys_arch_unprotect>
    return;
 8012e6a:	e012      	b.n	8012e92 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8012e6c:	69fb      	ldr	r3, [r7, #28]
 8012e6e:	2200      	movs	r2, #0
 8012e70:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8012e72:	4b12      	ldr	r3, [pc, #72]	@ (8012ebc <mem_free+0x11c>)
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	69fa      	ldr	r2, [r7, #28]
 8012e78:	429a      	cmp	r2, r3
 8012e7a:	d202      	bcs.n	8012e82 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8012e7c:	4a0f      	ldr	r2, [pc, #60]	@ (8012ebc <mem_free+0x11c>)
 8012e7e:	69fb      	ldr	r3, [r7, #28]
 8012e80:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8012e82:	69f8      	ldr	r0, [r7, #28]
 8012e84:	f7ff fe60 	bl	8012b48 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012e88:	4809      	ldr	r0, [pc, #36]	@ (8012eb0 <mem_free+0x110>)
 8012e8a:	f00c fffa 	bl	801fe82 <sys_mutex_unlock>
 8012e8e:	e000      	b.n	8012e92 <mem_free+0xf2>
    return;
 8012e90:	bf00      	nop
}
 8012e92:	3720      	adds	r7, #32
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bd80      	pop	{r7, pc}
 8012e98:	08023e8c 	.word	0x08023e8c
 8012e9c:	08023f7c 	.word	0x08023f7c
 8012ea0:	08023ed4 	.word	0x08023ed4
 8012ea4:	240099f4 	.word	0x240099f4
 8012ea8:	240099f8 	.word	0x240099f8
 8012eac:	08023fa0 	.word	0x08023fa0
 8012eb0:	240099fc 	.word	0x240099fc
 8012eb4:	08023fbc 	.word	0x08023fbc
 8012eb8:	08023fe4 	.word	0x08023fe4
 8012ebc:	24009a00 	.word	0x24009a00

08012ec0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b088      	sub	sp, #32
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
 8012ec8:	460b      	mov	r3, r1
 8012eca:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8012ecc:	887b      	ldrh	r3, [r7, #2]
 8012ece:	3303      	adds	r3, #3
 8012ed0:	b29b      	uxth	r3, r3
 8012ed2:	f023 0303 	bic.w	r3, r3, #3
 8012ed6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8012ed8:	8bfb      	ldrh	r3, [r7, #30]
 8012eda:	2b0b      	cmp	r3, #11
 8012edc:	d801      	bhi.n	8012ee2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8012ede:	230c      	movs	r3, #12
 8012ee0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8012ee2:	8bfb      	ldrh	r3, [r7, #30]
 8012ee4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012ee8:	d803      	bhi.n	8012ef2 <mem_trim+0x32>
 8012eea:	8bfa      	ldrh	r2, [r7, #30]
 8012eec:	887b      	ldrh	r3, [r7, #2]
 8012eee:	429a      	cmp	r2, r3
 8012ef0:	d201      	bcs.n	8012ef6 <mem_trim+0x36>
    return NULL;
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	e0d8      	b.n	80130a8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8012ef6:	4b6e      	ldr	r3, [pc, #440]	@ (80130b0 <mem_trim+0x1f0>)
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	687a      	ldr	r2, [r7, #4]
 8012efc:	429a      	cmp	r2, r3
 8012efe:	d304      	bcc.n	8012f0a <mem_trim+0x4a>
 8012f00:	4b6c      	ldr	r3, [pc, #432]	@ (80130b4 <mem_trim+0x1f4>)
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	687a      	ldr	r2, [r7, #4]
 8012f06:	429a      	cmp	r2, r3
 8012f08:	d306      	bcc.n	8012f18 <mem_trim+0x58>
 8012f0a:	4b6b      	ldr	r3, [pc, #428]	@ (80130b8 <mem_trim+0x1f8>)
 8012f0c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8012f10:	496a      	ldr	r1, [pc, #424]	@ (80130bc <mem_trim+0x1fc>)
 8012f12:	486b      	ldr	r0, [pc, #428]	@ (80130c0 <mem_trim+0x200>)
 8012f14:	f00d fd36 	bl	8020984 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8012f18:	4b65      	ldr	r3, [pc, #404]	@ (80130b0 <mem_trim+0x1f0>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	687a      	ldr	r2, [r7, #4]
 8012f1e:	429a      	cmp	r2, r3
 8012f20:	d304      	bcc.n	8012f2c <mem_trim+0x6c>
 8012f22:	4b64      	ldr	r3, [pc, #400]	@ (80130b4 <mem_trim+0x1f4>)
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	687a      	ldr	r2, [r7, #4]
 8012f28:	429a      	cmp	r2, r3
 8012f2a:	d307      	bcc.n	8012f3c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012f2c:	f00c ffd6 	bl	801fedc <sys_arch_protect>
 8012f30:	60b8      	str	r0, [r7, #8]
 8012f32:	68b8      	ldr	r0, [r7, #8]
 8012f34:	f00c ffe0 	bl	801fef8 <sys_arch_unprotect>
    return rmem;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	e0b5      	b.n	80130a8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	3b08      	subs	r3, #8
 8012f40:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8012f42:	69b8      	ldr	r0, [r7, #24]
 8012f44:	f7ff fdee 	bl	8012b24 <mem_to_ptr>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8012f4c:	69bb      	ldr	r3, [r7, #24]
 8012f4e:	881a      	ldrh	r2, [r3, #0]
 8012f50:	8afb      	ldrh	r3, [r7, #22]
 8012f52:	1ad3      	subs	r3, r2, r3
 8012f54:	b29b      	uxth	r3, r3
 8012f56:	3b08      	subs	r3, #8
 8012f58:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8012f5a:	8bfa      	ldrh	r2, [r7, #30]
 8012f5c:	8abb      	ldrh	r3, [r7, #20]
 8012f5e:	429a      	cmp	r2, r3
 8012f60:	d906      	bls.n	8012f70 <mem_trim+0xb0>
 8012f62:	4b55      	ldr	r3, [pc, #340]	@ (80130b8 <mem_trim+0x1f8>)
 8012f64:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8012f68:	4956      	ldr	r1, [pc, #344]	@ (80130c4 <mem_trim+0x204>)
 8012f6a:	4855      	ldr	r0, [pc, #340]	@ (80130c0 <mem_trim+0x200>)
 8012f6c:	f00d fd0a 	bl	8020984 <iprintf>
  if (newsize > size) {
 8012f70:	8bfa      	ldrh	r2, [r7, #30]
 8012f72:	8abb      	ldrh	r3, [r7, #20]
 8012f74:	429a      	cmp	r2, r3
 8012f76:	d901      	bls.n	8012f7c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8012f78:	2300      	movs	r3, #0
 8012f7a:	e095      	b.n	80130a8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8012f7c:	8bfa      	ldrh	r2, [r7, #30]
 8012f7e:	8abb      	ldrh	r3, [r7, #20]
 8012f80:	429a      	cmp	r2, r3
 8012f82:	d101      	bne.n	8012f88 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	e08f      	b.n	80130a8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012f88:	484f      	ldr	r0, [pc, #316]	@ (80130c8 <mem_trim+0x208>)
 8012f8a:	f00c ff6b 	bl	801fe64 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8012f8e:	69bb      	ldr	r3, [r7, #24]
 8012f90:	881b      	ldrh	r3, [r3, #0]
 8012f92:	4618      	mov	r0, r3
 8012f94:	f7ff fdb4 	bl	8012b00 <ptr_to_mem>
 8012f98:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8012f9a:	693b      	ldr	r3, [r7, #16]
 8012f9c:	791b      	ldrb	r3, [r3, #4]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d13f      	bne.n	8013022 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012fa2:	69bb      	ldr	r3, [r7, #24]
 8012fa4:	881b      	ldrh	r3, [r3, #0]
 8012fa6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012faa:	d106      	bne.n	8012fba <mem_trim+0xfa>
 8012fac:	4b42      	ldr	r3, [pc, #264]	@ (80130b8 <mem_trim+0x1f8>)
 8012fae:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8012fb2:	4946      	ldr	r1, [pc, #280]	@ (80130cc <mem_trim+0x20c>)
 8012fb4:	4842      	ldr	r0, [pc, #264]	@ (80130c0 <mem_trim+0x200>)
 8012fb6:	f00d fce5 	bl	8020984 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8012fba:	693b      	ldr	r3, [r7, #16]
 8012fbc:	881b      	ldrh	r3, [r3, #0]
 8012fbe:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012fc0:	8afa      	ldrh	r2, [r7, #22]
 8012fc2:	8bfb      	ldrh	r3, [r7, #30]
 8012fc4:	4413      	add	r3, r2
 8012fc6:	b29b      	uxth	r3, r3
 8012fc8:	3308      	adds	r3, #8
 8012fca:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8012fcc:	4b40      	ldr	r3, [pc, #256]	@ (80130d0 <mem_trim+0x210>)
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	693a      	ldr	r2, [r7, #16]
 8012fd2:	429a      	cmp	r2, r3
 8012fd4:	d106      	bne.n	8012fe4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8012fd6:	89fb      	ldrh	r3, [r7, #14]
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f7ff fd91 	bl	8012b00 <ptr_to_mem>
 8012fde:	4603      	mov	r3, r0
 8012fe0:	4a3b      	ldr	r2, [pc, #236]	@ (80130d0 <mem_trim+0x210>)
 8012fe2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8012fe4:	89fb      	ldrh	r3, [r7, #14]
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f7ff fd8a 	bl	8012b00 <ptr_to_mem>
 8012fec:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8012fee:	693b      	ldr	r3, [r7, #16]
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8012ff4:	693b      	ldr	r3, [r7, #16]
 8012ff6:	89ba      	ldrh	r2, [r7, #12]
 8012ff8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8012ffa:	693b      	ldr	r3, [r7, #16]
 8012ffc:	8afa      	ldrh	r2, [r7, #22]
 8012ffe:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013000:	69bb      	ldr	r3, [r7, #24]
 8013002:	89fa      	ldrh	r2, [r7, #14]
 8013004:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013006:	693b      	ldr	r3, [r7, #16]
 8013008:	881b      	ldrh	r3, [r3, #0]
 801300a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801300e:	d047      	beq.n	80130a0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013010:	693b      	ldr	r3, [r7, #16]
 8013012:	881b      	ldrh	r3, [r3, #0]
 8013014:	4618      	mov	r0, r3
 8013016:	f7ff fd73 	bl	8012b00 <ptr_to_mem>
 801301a:	4602      	mov	r2, r0
 801301c:	89fb      	ldrh	r3, [r7, #14]
 801301e:	8053      	strh	r3, [r2, #2]
 8013020:	e03e      	b.n	80130a0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8013022:	8bfb      	ldrh	r3, [r7, #30]
 8013024:	f103 0214 	add.w	r2, r3, #20
 8013028:	8abb      	ldrh	r3, [r7, #20]
 801302a:	429a      	cmp	r2, r3
 801302c:	d838      	bhi.n	80130a0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801302e:	8afa      	ldrh	r2, [r7, #22]
 8013030:	8bfb      	ldrh	r3, [r7, #30]
 8013032:	4413      	add	r3, r2
 8013034:	b29b      	uxth	r3, r3
 8013036:	3308      	adds	r3, #8
 8013038:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801303a:	69bb      	ldr	r3, [r7, #24]
 801303c:	881b      	ldrh	r3, [r3, #0]
 801303e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8013042:	d106      	bne.n	8013052 <mem_trim+0x192>
 8013044:	4b1c      	ldr	r3, [pc, #112]	@ (80130b8 <mem_trim+0x1f8>)
 8013046:	f240 3216 	movw	r2, #790	@ 0x316
 801304a:	4920      	ldr	r1, [pc, #128]	@ (80130cc <mem_trim+0x20c>)
 801304c:	481c      	ldr	r0, [pc, #112]	@ (80130c0 <mem_trim+0x200>)
 801304e:	f00d fc99 	bl	8020984 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8013052:	89fb      	ldrh	r3, [r7, #14]
 8013054:	4618      	mov	r0, r3
 8013056:	f7ff fd53 	bl	8012b00 <ptr_to_mem>
 801305a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801305c:	4b1c      	ldr	r3, [pc, #112]	@ (80130d0 <mem_trim+0x210>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	693a      	ldr	r2, [r7, #16]
 8013062:	429a      	cmp	r2, r3
 8013064:	d202      	bcs.n	801306c <mem_trim+0x1ac>
      lfree = mem2;
 8013066:	4a1a      	ldr	r2, [pc, #104]	@ (80130d0 <mem_trim+0x210>)
 8013068:	693b      	ldr	r3, [r7, #16]
 801306a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801306c:	693b      	ldr	r3, [r7, #16]
 801306e:	2200      	movs	r2, #0
 8013070:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8013072:	69bb      	ldr	r3, [r7, #24]
 8013074:	881a      	ldrh	r2, [r3, #0]
 8013076:	693b      	ldr	r3, [r7, #16]
 8013078:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801307a:	693b      	ldr	r3, [r7, #16]
 801307c:	8afa      	ldrh	r2, [r7, #22]
 801307e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8013080:	69bb      	ldr	r3, [r7, #24]
 8013082:	89fa      	ldrh	r2, [r7, #14]
 8013084:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013086:	693b      	ldr	r3, [r7, #16]
 8013088:	881b      	ldrh	r3, [r3, #0]
 801308a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801308e:	d007      	beq.n	80130a0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013090:	693b      	ldr	r3, [r7, #16]
 8013092:	881b      	ldrh	r3, [r3, #0]
 8013094:	4618      	mov	r0, r3
 8013096:	f7ff fd33 	bl	8012b00 <ptr_to_mem>
 801309a:	4602      	mov	r2, r0
 801309c:	89fb      	ldrh	r3, [r7, #14]
 801309e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80130a0:	4809      	ldr	r0, [pc, #36]	@ (80130c8 <mem_trim+0x208>)
 80130a2:	f00c feee 	bl	801fe82 <sys_mutex_unlock>
  return rmem;
 80130a6:	687b      	ldr	r3, [r7, #4]
}
 80130a8:	4618      	mov	r0, r3
 80130aa:	3720      	adds	r7, #32
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd80      	pop	{r7, pc}
 80130b0:	240099f4 	.word	0x240099f4
 80130b4:	240099f8 	.word	0x240099f8
 80130b8:	08023e8c 	.word	0x08023e8c
 80130bc:	08024018 	.word	0x08024018
 80130c0:	08023ed4 	.word	0x08023ed4
 80130c4:	08024030 	.word	0x08024030
 80130c8:	240099fc 	.word	0x240099fc
 80130cc:	08024050 	.word	0x08024050
 80130d0:	24009a00 	.word	0x24009a00

080130d4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b088      	sub	sp, #32
 80130d8:	af00      	add	r7, sp, #0
 80130da:	4603      	mov	r3, r0
 80130dc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80130de:	88fb      	ldrh	r3, [r7, #6]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d101      	bne.n	80130e8 <mem_malloc+0x14>
    return NULL;
 80130e4:	2300      	movs	r3, #0
 80130e6:	e0e2      	b.n	80132ae <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80130e8:	88fb      	ldrh	r3, [r7, #6]
 80130ea:	3303      	adds	r3, #3
 80130ec:	b29b      	uxth	r3, r3
 80130ee:	f023 0303 	bic.w	r3, r3, #3
 80130f2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80130f4:	8bbb      	ldrh	r3, [r7, #28]
 80130f6:	2b0b      	cmp	r3, #11
 80130f8:	d801      	bhi.n	80130fe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80130fa:	230c      	movs	r3, #12
 80130fc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80130fe:	8bbb      	ldrh	r3, [r7, #28]
 8013100:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8013104:	d803      	bhi.n	801310e <mem_malloc+0x3a>
 8013106:	8bba      	ldrh	r2, [r7, #28]
 8013108:	88fb      	ldrh	r3, [r7, #6]
 801310a:	429a      	cmp	r2, r3
 801310c:	d201      	bcs.n	8013112 <mem_malloc+0x3e>
    return NULL;
 801310e:	2300      	movs	r3, #0
 8013110:	e0cd      	b.n	80132ae <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8013112:	4869      	ldr	r0, [pc, #420]	@ (80132b8 <mem_malloc+0x1e4>)
 8013114:	f00c fea6 	bl	801fe64 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013118:	4b68      	ldr	r3, [pc, #416]	@ (80132bc <mem_malloc+0x1e8>)
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	4618      	mov	r0, r3
 801311e:	f7ff fd01 	bl	8012b24 <mem_to_ptr>
 8013122:	4603      	mov	r3, r0
 8013124:	83fb      	strh	r3, [r7, #30]
 8013126:	e0b7      	b.n	8013298 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013128:	8bfb      	ldrh	r3, [r7, #30]
 801312a:	4618      	mov	r0, r3
 801312c:	f7ff fce8 	bl	8012b00 <ptr_to_mem>
 8013130:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8013132:	697b      	ldr	r3, [r7, #20]
 8013134:	791b      	ldrb	r3, [r3, #4]
 8013136:	2b00      	cmp	r3, #0
 8013138:	f040 80a7 	bne.w	801328a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801313c:	697b      	ldr	r3, [r7, #20]
 801313e:	881b      	ldrh	r3, [r3, #0]
 8013140:	461a      	mov	r2, r3
 8013142:	8bfb      	ldrh	r3, [r7, #30]
 8013144:	1ad3      	subs	r3, r2, r3
 8013146:	f1a3 0208 	sub.w	r2, r3, #8
 801314a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801314c:	429a      	cmp	r2, r3
 801314e:	f0c0 809c 	bcc.w	801328a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	881b      	ldrh	r3, [r3, #0]
 8013156:	461a      	mov	r2, r3
 8013158:	8bfb      	ldrh	r3, [r7, #30]
 801315a:	1ad3      	subs	r3, r2, r3
 801315c:	f1a3 0208 	sub.w	r2, r3, #8
 8013160:	8bbb      	ldrh	r3, [r7, #28]
 8013162:	3314      	adds	r3, #20
 8013164:	429a      	cmp	r2, r3
 8013166:	d333      	bcc.n	80131d0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013168:	8bfa      	ldrh	r2, [r7, #30]
 801316a:	8bbb      	ldrh	r3, [r7, #28]
 801316c:	4413      	add	r3, r2
 801316e:	b29b      	uxth	r3, r3
 8013170:	3308      	adds	r3, #8
 8013172:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013174:	8a7b      	ldrh	r3, [r7, #18]
 8013176:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801317a:	d106      	bne.n	801318a <mem_malloc+0xb6>
 801317c:	4b50      	ldr	r3, [pc, #320]	@ (80132c0 <mem_malloc+0x1ec>)
 801317e:	f240 3287 	movw	r2, #903	@ 0x387
 8013182:	4950      	ldr	r1, [pc, #320]	@ (80132c4 <mem_malloc+0x1f0>)
 8013184:	4850      	ldr	r0, [pc, #320]	@ (80132c8 <mem_malloc+0x1f4>)
 8013186:	f00d fbfd 	bl	8020984 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801318a:	8a7b      	ldrh	r3, [r7, #18]
 801318c:	4618      	mov	r0, r3
 801318e:	f7ff fcb7 	bl	8012b00 <ptr_to_mem>
 8013192:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	2200      	movs	r2, #0
 8013198:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801319a:	697b      	ldr	r3, [r7, #20]
 801319c:	881a      	ldrh	r2, [r3, #0]
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	8bfa      	ldrh	r2, [r7, #30]
 80131a6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80131a8:	697b      	ldr	r3, [r7, #20]
 80131aa:	8a7a      	ldrh	r2, [r7, #18]
 80131ac:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80131ae:	697b      	ldr	r3, [r7, #20]
 80131b0:	2201      	movs	r2, #1
 80131b2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	881b      	ldrh	r3, [r3, #0]
 80131b8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80131bc:	d00b      	beq.n	80131d6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	881b      	ldrh	r3, [r3, #0]
 80131c2:	4618      	mov	r0, r3
 80131c4:	f7ff fc9c 	bl	8012b00 <ptr_to_mem>
 80131c8:	4602      	mov	r2, r0
 80131ca:	8a7b      	ldrh	r3, [r7, #18]
 80131cc:	8053      	strh	r3, [r2, #2]
 80131ce:	e002      	b.n	80131d6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80131d0:	697b      	ldr	r3, [r7, #20]
 80131d2:	2201      	movs	r2, #1
 80131d4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80131d6:	4b39      	ldr	r3, [pc, #228]	@ (80132bc <mem_malloc+0x1e8>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	697a      	ldr	r2, [r7, #20]
 80131dc:	429a      	cmp	r2, r3
 80131de:	d127      	bne.n	8013230 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80131e0:	4b36      	ldr	r3, [pc, #216]	@ (80132bc <mem_malloc+0x1e8>)
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80131e6:	e005      	b.n	80131f4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80131e8:	69bb      	ldr	r3, [r7, #24]
 80131ea:	881b      	ldrh	r3, [r3, #0]
 80131ec:	4618      	mov	r0, r3
 80131ee:	f7ff fc87 	bl	8012b00 <ptr_to_mem>
 80131f2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80131f4:	69bb      	ldr	r3, [r7, #24]
 80131f6:	791b      	ldrb	r3, [r3, #4]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d004      	beq.n	8013206 <mem_malloc+0x132>
 80131fc:	4b33      	ldr	r3, [pc, #204]	@ (80132cc <mem_malloc+0x1f8>)
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	69ba      	ldr	r2, [r7, #24]
 8013202:	429a      	cmp	r2, r3
 8013204:	d1f0      	bne.n	80131e8 <mem_malloc+0x114>
          }
          lfree = cur;
 8013206:	4a2d      	ldr	r2, [pc, #180]	@ (80132bc <mem_malloc+0x1e8>)
 8013208:	69bb      	ldr	r3, [r7, #24]
 801320a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801320c:	4b2b      	ldr	r3, [pc, #172]	@ (80132bc <mem_malloc+0x1e8>)
 801320e:	681a      	ldr	r2, [r3, #0]
 8013210:	4b2e      	ldr	r3, [pc, #184]	@ (80132cc <mem_malloc+0x1f8>)
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	429a      	cmp	r2, r3
 8013216:	d00b      	beq.n	8013230 <mem_malloc+0x15c>
 8013218:	4b28      	ldr	r3, [pc, #160]	@ (80132bc <mem_malloc+0x1e8>)
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	791b      	ldrb	r3, [r3, #4]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d006      	beq.n	8013230 <mem_malloc+0x15c>
 8013222:	4b27      	ldr	r3, [pc, #156]	@ (80132c0 <mem_malloc+0x1ec>)
 8013224:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8013228:	4929      	ldr	r1, [pc, #164]	@ (80132d0 <mem_malloc+0x1fc>)
 801322a:	4827      	ldr	r0, [pc, #156]	@ (80132c8 <mem_malloc+0x1f4>)
 801322c:	f00d fbaa 	bl	8020984 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013230:	4821      	ldr	r0, [pc, #132]	@ (80132b8 <mem_malloc+0x1e4>)
 8013232:	f00c fe26 	bl	801fe82 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8013236:	8bba      	ldrh	r2, [r7, #28]
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	4413      	add	r3, r2
 801323c:	3308      	adds	r3, #8
 801323e:	4a23      	ldr	r2, [pc, #140]	@ (80132cc <mem_malloc+0x1f8>)
 8013240:	6812      	ldr	r2, [r2, #0]
 8013242:	4293      	cmp	r3, r2
 8013244:	d906      	bls.n	8013254 <mem_malloc+0x180>
 8013246:	4b1e      	ldr	r3, [pc, #120]	@ (80132c0 <mem_malloc+0x1ec>)
 8013248:	f240 32b9 	movw	r2, #953	@ 0x3b9
 801324c:	4921      	ldr	r1, [pc, #132]	@ (80132d4 <mem_malloc+0x200>)
 801324e:	481e      	ldr	r0, [pc, #120]	@ (80132c8 <mem_malloc+0x1f4>)
 8013250:	f00d fb98 	bl	8020984 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	f003 0303 	and.w	r3, r3, #3
 801325a:	2b00      	cmp	r3, #0
 801325c:	d006      	beq.n	801326c <mem_malloc+0x198>
 801325e:	4b18      	ldr	r3, [pc, #96]	@ (80132c0 <mem_malloc+0x1ec>)
 8013260:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8013264:	491c      	ldr	r1, [pc, #112]	@ (80132d8 <mem_malloc+0x204>)
 8013266:	4818      	ldr	r0, [pc, #96]	@ (80132c8 <mem_malloc+0x1f4>)
 8013268:	f00d fb8c 	bl	8020984 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801326c:	697b      	ldr	r3, [r7, #20]
 801326e:	f003 0303 	and.w	r3, r3, #3
 8013272:	2b00      	cmp	r3, #0
 8013274:	d006      	beq.n	8013284 <mem_malloc+0x1b0>
 8013276:	4b12      	ldr	r3, [pc, #72]	@ (80132c0 <mem_malloc+0x1ec>)
 8013278:	f240 32bd 	movw	r2, #957	@ 0x3bd
 801327c:	4917      	ldr	r1, [pc, #92]	@ (80132dc <mem_malloc+0x208>)
 801327e:	4812      	ldr	r0, [pc, #72]	@ (80132c8 <mem_malloc+0x1f4>)
 8013280:	f00d fb80 	bl	8020984 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8013284:	697b      	ldr	r3, [r7, #20]
 8013286:	3308      	adds	r3, #8
 8013288:	e011      	b.n	80132ae <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801328a:	8bfb      	ldrh	r3, [r7, #30]
 801328c:	4618      	mov	r0, r3
 801328e:	f7ff fc37 	bl	8012b00 <ptr_to_mem>
 8013292:	4603      	mov	r3, r0
 8013294:	881b      	ldrh	r3, [r3, #0]
 8013296:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013298:	8bfa      	ldrh	r2, [r7, #30]
 801329a:	8bbb      	ldrh	r3, [r7, #28]
 801329c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 80132a0:	429a      	cmp	r2, r3
 80132a2:	f4ff af41 	bcc.w	8013128 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80132a6:	4804      	ldr	r0, [pc, #16]	@ (80132b8 <mem_malloc+0x1e4>)
 80132a8:	f00c fdeb 	bl	801fe82 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80132ac:	2300      	movs	r3, #0
}
 80132ae:	4618      	mov	r0, r3
 80132b0:	3720      	adds	r7, #32
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}
 80132b6:	bf00      	nop
 80132b8:	240099fc 	.word	0x240099fc
 80132bc:	24009a00 	.word	0x24009a00
 80132c0:	08023e8c 	.word	0x08023e8c
 80132c4:	08024050 	.word	0x08024050
 80132c8:	08023ed4 	.word	0x08023ed4
 80132cc:	240099f8 	.word	0x240099f8
 80132d0:	08024064 	.word	0x08024064
 80132d4:	08024080 	.word	0x08024080
 80132d8:	080240b0 	.word	0x080240b0
 80132dc:	080240e0 	.word	0x080240e0

080132e0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80132e0:	b480      	push	{r7}
 80132e2:	b085      	sub	sp, #20
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	689b      	ldr	r3, [r3, #8]
 80132ec:	2200      	movs	r2, #0
 80132ee:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	685b      	ldr	r3, [r3, #4]
 80132f4:	3303      	adds	r3, #3
 80132f6:	f023 0303 	bic.w	r3, r3, #3
 80132fa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80132fc:	2300      	movs	r3, #0
 80132fe:	60fb      	str	r3, [r7, #12]
 8013300:	e011      	b.n	8013326 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	689b      	ldr	r3, [r3, #8]
 8013306:	681a      	ldr	r2, [r3, #0]
 8013308:	68bb      	ldr	r3, [r7, #8]
 801330a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	689b      	ldr	r3, [r3, #8]
 8013310:	68ba      	ldr	r2, [r7, #8]
 8013312:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	881b      	ldrh	r3, [r3, #0]
 8013318:	461a      	mov	r2, r3
 801331a:	68bb      	ldr	r3, [r7, #8]
 801331c:	4413      	add	r3, r2
 801331e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	3301      	adds	r3, #1
 8013324:	60fb      	str	r3, [r7, #12]
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	885b      	ldrh	r3, [r3, #2]
 801332a:	461a      	mov	r2, r3
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	4293      	cmp	r3, r2
 8013330:	dbe7      	blt.n	8013302 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8013332:	bf00      	nop
 8013334:	bf00      	nop
 8013336:	3714      	adds	r7, #20
 8013338:	46bd      	mov	sp, r7
 801333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333e:	4770      	bx	lr

08013340 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b082      	sub	sp, #8
 8013344:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013346:	2300      	movs	r3, #0
 8013348:	80fb      	strh	r3, [r7, #6]
 801334a:	e009      	b.n	8013360 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801334c:	88fb      	ldrh	r3, [r7, #6]
 801334e:	4a08      	ldr	r2, [pc, #32]	@ (8013370 <memp_init+0x30>)
 8013350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013354:	4618      	mov	r0, r3
 8013356:	f7ff ffc3 	bl	80132e0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801335a:	88fb      	ldrh	r3, [r7, #6]
 801335c:	3301      	adds	r3, #1
 801335e:	80fb      	strh	r3, [r7, #6]
 8013360:	88fb      	ldrh	r3, [r7, #6]
 8013362:	2b0c      	cmp	r3, #12
 8013364:	d9f2      	bls.n	801334c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8013366:	bf00      	nop
 8013368:	bf00      	nop
 801336a:	3708      	adds	r7, #8
 801336c:	46bd      	mov	sp, r7
 801336e:	bd80      	pop	{r7, pc}
 8013370:	08026dd8 	.word	0x08026dd8

08013374 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b084      	sub	sp, #16
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801337c:	f00c fdae 	bl	801fedc <sys_arch_protect>
 8013380:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	689b      	ldr	r3, [r3, #8]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801338a:	68bb      	ldr	r3, [r7, #8]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d015      	beq.n	80133bc <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	689b      	ldr	r3, [r3, #8]
 8013394:	68ba      	ldr	r2, [r7, #8]
 8013396:	6812      	ldr	r2, [r2, #0]
 8013398:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801339a:	68bb      	ldr	r3, [r7, #8]
 801339c:	f003 0303 	and.w	r3, r3, #3
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d006      	beq.n	80133b2 <do_memp_malloc_pool+0x3e>
 80133a4:	4b09      	ldr	r3, [pc, #36]	@ (80133cc <do_memp_malloc_pool+0x58>)
 80133a6:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80133aa:	4909      	ldr	r1, [pc, #36]	@ (80133d0 <do_memp_malloc_pool+0x5c>)
 80133ac:	4809      	ldr	r0, [pc, #36]	@ (80133d4 <do_memp_malloc_pool+0x60>)
 80133ae:	f00d fae9 	bl	8020984 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80133b2:	68f8      	ldr	r0, [r7, #12]
 80133b4:	f00c fda0 	bl	801fef8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80133b8:	68bb      	ldr	r3, [r7, #8]
 80133ba:	e003      	b.n	80133c4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80133bc:	68f8      	ldr	r0, [r7, #12]
 80133be:	f00c fd9b 	bl	801fef8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80133c2:	2300      	movs	r3, #0
}
 80133c4:	4618      	mov	r0, r3
 80133c6:	3710      	adds	r7, #16
 80133c8:	46bd      	mov	sp, r7
 80133ca:	bd80      	pop	{r7, pc}
 80133cc:	08024104 	.word	0x08024104
 80133d0:	08024134 	.word	0x08024134
 80133d4:	08024158 	.word	0x08024158

080133d8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b082      	sub	sp, #8
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d106      	bne.n	80133f4 <memp_malloc_pool+0x1c>
 80133e6:	4b0a      	ldr	r3, [pc, #40]	@ (8013410 <memp_malloc_pool+0x38>)
 80133e8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80133ec:	4909      	ldr	r1, [pc, #36]	@ (8013414 <memp_malloc_pool+0x3c>)
 80133ee:	480a      	ldr	r0, [pc, #40]	@ (8013418 <memp_malloc_pool+0x40>)
 80133f0:	f00d fac8 	bl	8020984 <iprintf>
  if (desc == NULL) {
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d101      	bne.n	80133fe <memp_malloc_pool+0x26>
    return NULL;
 80133fa:	2300      	movs	r3, #0
 80133fc:	e003      	b.n	8013406 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80133fe:	6878      	ldr	r0, [r7, #4]
 8013400:	f7ff ffb8 	bl	8013374 <do_memp_malloc_pool>
 8013404:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8013406:	4618      	mov	r0, r3
 8013408:	3708      	adds	r7, #8
 801340a:	46bd      	mov	sp, r7
 801340c:	bd80      	pop	{r7, pc}
 801340e:	bf00      	nop
 8013410:	08024104 	.word	0x08024104
 8013414:	08024180 	.word	0x08024180
 8013418:	08024158 	.word	0x08024158

0801341c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b084      	sub	sp, #16
 8013420:	af00      	add	r7, sp, #0
 8013422:	4603      	mov	r3, r0
 8013424:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8013426:	79fb      	ldrb	r3, [r7, #7]
 8013428:	2b0c      	cmp	r3, #12
 801342a:	d908      	bls.n	801343e <memp_malloc+0x22>
 801342c:	4b0a      	ldr	r3, [pc, #40]	@ (8013458 <memp_malloc+0x3c>)
 801342e:	f240 1257 	movw	r2, #343	@ 0x157
 8013432:	490a      	ldr	r1, [pc, #40]	@ (801345c <memp_malloc+0x40>)
 8013434:	480a      	ldr	r0, [pc, #40]	@ (8013460 <memp_malloc+0x44>)
 8013436:	f00d faa5 	bl	8020984 <iprintf>
 801343a:	2300      	movs	r3, #0
 801343c:	e008      	b.n	8013450 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801343e:	79fb      	ldrb	r3, [r7, #7]
 8013440:	4a08      	ldr	r2, [pc, #32]	@ (8013464 <memp_malloc+0x48>)
 8013442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013446:	4618      	mov	r0, r3
 8013448:	f7ff ff94 	bl	8013374 <do_memp_malloc_pool>
 801344c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801344e:	68fb      	ldr	r3, [r7, #12]
}
 8013450:	4618      	mov	r0, r3
 8013452:	3710      	adds	r7, #16
 8013454:	46bd      	mov	sp, r7
 8013456:	bd80      	pop	{r7, pc}
 8013458:	08024104 	.word	0x08024104
 801345c:	08024194 	.word	0x08024194
 8013460:	08024158 	.word	0x08024158
 8013464:	08026dd8 	.word	0x08026dd8

08013468 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b084      	sub	sp, #16
 801346c:	af00      	add	r7, sp, #0
 801346e:	6078      	str	r0, [r7, #4]
 8013470:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	f003 0303 	and.w	r3, r3, #3
 8013478:	2b00      	cmp	r3, #0
 801347a:	d006      	beq.n	801348a <do_memp_free_pool+0x22>
 801347c:	4b0d      	ldr	r3, [pc, #52]	@ (80134b4 <do_memp_free_pool+0x4c>)
 801347e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8013482:	490d      	ldr	r1, [pc, #52]	@ (80134b8 <do_memp_free_pool+0x50>)
 8013484:	480d      	ldr	r0, [pc, #52]	@ (80134bc <do_memp_free_pool+0x54>)
 8013486:	f00d fa7d 	bl	8020984 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801348a:	683b      	ldr	r3, [r7, #0]
 801348c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801348e:	f00c fd25 	bl	801fedc <sys_arch_protect>
 8013492:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	689b      	ldr	r3, [r3, #8]
 8013498:	681a      	ldr	r2, [r3, #0]
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	689b      	ldr	r3, [r3, #8]
 80134a2:	68fa      	ldr	r2, [r7, #12]
 80134a4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80134a6:	68b8      	ldr	r0, [r7, #8]
 80134a8:	f00c fd26 	bl	801fef8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80134ac:	bf00      	nop
 80134ae:	3710      	adds	r7, #16
 80134b0:	46bd      	mov	sp, r7
 80134b2:	bd80      	pop	{r7, pc}
 80134b4:	08024104 	.word	0x08024104
 80134b8:	080241b4 	.word	0x080241b4
 80134bc:	08024158 	.word	0x08024158

080134c0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b082      	sub	sp, #8
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
 80134c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d106      	bne.n	80134de <memp_free_pool+0x1e>
 80134d0:	4b0a      	ldr	r3, [pc, #40]	@ (80134fc <memp_free_pool+0x3c>)
 80134d2:	f240 1295 	movw	r2, #405	@ 0x195
 80134d6:	490a      	ldr	r1, [pc, #40]	@ (8013500 <memp_free_pool+0x40>)
 80134d8:	480a      	ldr	r0, [pc, #40]	@ (8013504 <memp_free_pool+0x44>)
 80134da:	f00d fa53 	bl	8020984 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d007      	beq.n	80134f4 <memp_free_pool+0x34>
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d004      	beq.n	80134f4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80134ea:	6839      	ldr	r1, [r7, #0]
 80134ec:	6878      	ldr	r0, [r7, #4]
 80134ee:	f7ff ffbb 	bl	8013468 <do_memp_free_pool>
 80134f2:	e000      	b.n	80134f6 <memp_free_pool+0x36>
    return;
 80134f4:	bf00      	nop
}
 80134f6:	3708      	adds	r7, #8
 80134f8:	46bd      	mov	sp, r7
 80134fa:	bd80      	pop	{r7, pc}
 80134fc:	08024104 	.word	0x08024104
 8013500:	08024180 	.word	0x08024180
 8013504:	08024158 	.word	0x08024158

08013508 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b082      	sub	sp, #8
 801350c:	af00      	add	r7, sp, #0
 801350e:	4603      	mov	r3, r0
 8013510:	6039      	str	r1, [r7, #0]
 8013512:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013514:	79fb      	ldrb	r3, [r7, #7]
 8013516:	2b0c      	cmp	r3, #12
 8013518:	d907      	bls.n	801352a <memp_free+0x22>
 801351a:	4b0c      	ldr	r3, [pc, #48]	@ (801354c <memp_free+0x44>)
 801351c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8013520:	490b      	ldr	r1, [pc, #44]	@ (8013550 <memp_free+0x48>)
 8013522:	480c      	ldr	r0, [pc, #48]	@ (8013554 <memp_free+0x4c>)
 8013524:	f00d fa2e 	bl	8020984 <iprintf>
 8013528:	e00c      	b.n	8013544 <memp_free+0x3c>

  if (mem == NULL) {
 801352a:	683b      	ldr	r3, [r7, #0]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d008      	beq.n	8013542 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013530:	79fb      	ldrb	r3, [r7, #7]
 8013532:	4a09      	ldr	r2, [pc, #36]	@ (8013558 <memp_free+0x50>)
 8013534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013538:	6839      	ldr	r1, [r7, #0]
 801353a:	4618      	mov	r0, r3
 801353c:	f7ff ff94 	bl	8013468 <do_memp_free_pool>
 8013540:	e000      	b.n	8013544 <memp_free+0x3c>
    return;
 8013542:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013544:	3708      	adds	r7, #8
 8013546:	46bd      	mov	sp, r7
 8013548:	bd80      	pop	{r7, pc}
 801354a:	bf00      	nop
 801354c:	08024104 	.word	0x08024104
 8013550:	080241d4 	.word	0x080241d4
 8013554:	08024158 	.word	0x08024158
 8013558:	08026dd8 	.word	0x08026dd8

0801355c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801355c:	b480      	push	{r7}
 801355e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013560:	bf00      	nop
 8013562:	46bd      	mov	sp, r7
 8013564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013568:	4770      	bx	lr
	...

0801356c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801356c:	b580      	push	{r7, lr}
 801356e:	b086      	sub	sp, #24
 8013570:	af00      	add	r7, sp, #0
 8013572:	60f8      	str	r0, [r7, #12]
 8013574:	60b9      	str	r1, [r7, #8]
 8013576:	607a      	str	r2, [r7, #4]
 8013578:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d108      	bne.n	8013592 <netif_add+0x26>
 8013580:	4b5b      	ldr	r3, [pc, #364]	@ (80136f0 <netif_add+0x184>)
 8013582:	f240 1227 	movw	r2, #295	@ 0x127
 8013586:	495b      	ldr	r1, [pc, #364]	@ (80136f4 <netif_add+0x188>)
 8013588:	485b      	ldr	r0, [pc, #364]	@ (80136f8 <netif_add+0x18c>)
 801358a:	f00d f9fb 	bl	8020984 <iprintf>
 801358e:	2300      	movs	r3, #0
 8013590:	e0a9      	b.n	80136e6 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8013592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013594:	2b00      	cmp	r3, #0
 8013596:	d108      	bne.n	80135aa <netif_add+0x3e>
 8013598:	4b55      	ldr	r3, [pc, #340]	@ (80136f0 <netif_add+0x184>)
 801359a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801359e:	4957      	ldr	r1, [pc, #348]	@ (80136fc <netif_add+0x190>)
 80135a0:	4855      	ldr	r0, [pc, #340]	@ (80136f8 <netif_add+0x18c>)
 80135a2:	f00d f9ef 	bl	8020984 <iprintf>
 80135a6:	2300      	movs	r3, #0
 80135a8:	e09d      	b.n	80136e6 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d101      	bne.n	80135b4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80135b0:	4b53      	ldr	r3, [pc, #332]	@ (8013700 <netif_add+0x194>)
 80135b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d101      	bne.n	80135be <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80135ba:	4b51      	ldr	r3, [pc, #324]	@ (8013700 <netif_add+0x194>)
 80135bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d101      	bne.n	80135c8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80135c4:	4b4e      	ldr	r3, [pc, #312]	@ (8013700 <netif_add+0x194>)
 80135c6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	2200      	movs	r2, #0
 80135cc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	2200      	movs	r2, #0
 80135d2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	2200      	movs	r2, #0
 80135d8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	4a49      	ldr	r2, [pc, #292]	@ (8013704 <netif_add+0x198>)
 80135de:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	2200      	movs	r2, #0
 80135e4:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	2200      	movs	r2, #0
 80135ea:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	3324      	adds	r3, #36	@ 0x24
 80135f2:	2204      	movs	r2, #4
 80135f4:	2100      	movs	r1, #0
 80135f6:	4618      	mov	r0, r3
 80135f8:	f00d fb6a 	bl	8020cd0 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	2200      	movs	r2, #0
 8013600:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	6a3a      	ldr	r2, [r7, #32]
 8013606:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013608:	4b3f      	ldr	r3, [pc, #252]	@ (8013708 <netif_add+0x19c>)
 801360a:	781a      	ldrb	r2, [r3, #0]
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013616:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013618:	683b      	ldr	r3, [r7, #0]
 801361a:	687a      	ldr	r2, [r7, #4]
 801361c:	68b9      	ldr	r1, [r7, #8]
 801361e:	68f8      	ldr	r0, [r7, #12]
 8013620:	f000 f914 	bl	801384c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8013624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013626:	68f8      	ldr	r0, [r7, #12]
 8013628:	4798      	blx	r3
 801362a:	4603      	mov	r3, r0
 801362c:	2b00      	cmp	r3, #0
 801362e:	d001      	beq.n	8013634 <netif_add+0xc8>
    return NULL;
 8013630:	2300      	movs	r3, #0
 8013632:	e058      	b.n	80136e6 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801363a:	2bff      	cmp	r3, #255	@ 0xff
 801363c:	d103      	bne.n	8013646 <netif_add+0xda>
        netif->num = 0;
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	2200      	movs	r2, #0
 8013642:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 8013646:	2300      	movs	r3, #0
 8013648:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801364a:	4b30      	ldr	r3, [pc, #192]	@ (801370c <netif_add+0x1a0>)
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	617b      	str	r3, [r7, #20]
 8013650:	e02b      	b.n	80136aa <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8013652:	697a      	ldr	r2, [r7, #20]
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	429a      	cmp	r2, r3
 8013658:	d106      	bne.n	8013668 <netif_add+0xfc>
 801365a:	4b25      	ldr	r3, [pc, #148]	@ (80136f0 <netif_add+0x184>)
 801365c:	f240 128b 	movw	r2, #395	@ 0x18b
 8013660:	492b      	ldr	r1, [pc, #172]	@ (8013710 <netif_add+0x1a4>)
 8013662:	4825      	ldr	r0, [pc, #148]	@ (80136f8 <netif_add+0x18c>)
 8013664:	f00d f98e 	bl	8020984 <iprintf>
        num_netifs++;
 8013668:	693b      	ldr	r3, [r7, #16]
 801366a:	3301      	adds	r3, #1
 801366c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801366e:	693b      	ldr	r3, [r7, #16]
 8013670:	2bff      	cmp	r3, #255	@ 0xff
 8013672:	dd06      	ble.n	8013682 <netif_add+0x116>
 8013674:	4b1e      	ldr	r3, [pc, #120]	@ (80136f0 <netif_add+0x184>)
 8013676:	f240 128d 	movw	r2, #397	@ 0x18d
 801367a:	4926      	ldr	r1, [pc, #152]	@ (8013714 <netif_add+0x1a8>)
 801367c:	481e      	ldr	r0, [pc, #120]	@ (80136f8 <netif_add+0x18c>)
 801367e:	f00d f981 	bl	8020984 <iprintf>
        if (netif2->num == netif->num) {
 8013682:	697b      	ldr	r3, [r7, #20]
 8013684:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801368e:	429a      	cmp	r2, r3
 8013690:	d108      	bne.n	80136a4 <netif_add+0x138>
          netif->num++;
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013698:	3301      	adds	r3, #1
 801369a:	b2da      	uxtb	r2, r3
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 80136a2:	e005      	b.n	80136b0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80136a4:	697b      	ldr	r3, [r7, #20]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	617b      	str	r3, [r7, #20]
 80136aa:	697b      	ldr	r3, [r7, #20]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d1d0      	bne.n	8013652 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80136b0:	697b      	ldr	r3, [r7, #20]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d1be      	bne.n	8013634 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80136bc:	2bfe      	cmp	r3, #254	@ 0xfe
 80136be:	d103      	bne.n	80136c8 <netif_add+0x15c>
    netif_num = 0;
 80136c0:	4b11      	ldr	r3, [pc, #68]	@ (8013708 <netif_add+0x19c>)
 80136c2:	2200      	movs	r2, #0
 80136c4:	701a      	strb	r2, [r3, #0]
 80136c6:	e006      	b.n	80136d6 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80136ce:	3301      	adds	r3, #1
 80136d0:	b2da      	uxtb	r2, r3
 80136d2:	4b0d      	ldr	r3, [pc, #52]	@ (8013708 <netif_add+0x19c>)
 80136d4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80136d6:	4b0d      	ldr	r3, [pc, #52]	@ (801370c <netif_add+0x1a0>)
 80136d8:	681a      	ldr	r2, [r3, #0]
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80136de:	4a0b      	ldr	r2, [pc, #44]	@ (801370c <netif_add+0x1a0>)
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80136e4:	68fb      	ldr	r3, [r7, #12]
}
 80136e6:	4618      	mov	r0, r3
 80136e8:	3718      	adds	r7, #24
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bd80      	pop	{r7, pc}
 80136ee:	bf00      	nop
 80136f0:	080241f0 	.word	0x080241f0
 80136f4:	08024284 	.word	0x08024284
 80136f8:	08024240 	.word	0x08024240
 80136fc:	080242a0 	.word	0x080242a0
 8013700:	08026e5c 	.word	0x08026e5c
 8013704:	08013b2f 	.word	0x08013b2f
 8013708:	2400caf8 	.word	0x2400caf8
 801370c:	2400caf0 	.word	0x2400caf0
 8013710:	080242c4 	.word	0x080242c4
 8013714:	080242d8 	.word	0x080242d8

08013718 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b082      	sub	sp, #8
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
 8013720:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8013722:	6839      	ldr	r1, [r7, #0]
 8013724:	6878      	ldr	r0, [r7, #4]
 8013726:	f002 fe1b 	bl	8016360 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801372a:	6839      	ldr	r1, [r7, #0]
 801372c:	6878      	ldr	r0, [r7, #4]
 801372e:	f007 ff47 	bl	801b5c0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8013732:	bf00      	nop
 8013734:	3708      	adds	r7, #8
 8013736:	46bd      	mov	sp, r7
 8013738:	bd80      	pop	{r7, pc}
	...

0801373c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b086      	sub	sp, #24
 8013740:	af00      	add	r7, sp, #0
 8013742:	60f8      	str	r0, [r7, #12]
 8013744:	60b9      	str	r1, [r7, #8]
 8013746:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8013748:	68bb      	ldr	r3, [r7, #8]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d106      	bne.n	801375c <netif_do_set_ipaddr+0x20>
 801374e:	4b1d      	ldr	r3, [pc, #116]	@ (80137c4 <netif_do_set_ipaddr+0x88>)
 8013750:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8013754:	491c      	ldr	r1, [pc, #112]	@ (80137c8 <netif_do_set_ipaddr+0x8c>)
 8013756:	481d      	ldr	r0, [pc, #116]	@ (80137cc <netif_do_set_ipaddr+0x90>)
 8013758:	f00d f914 	bl	8020984 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d106      	bne.n	8013770 <netif_do_set_ipaddr+0x34>
 8013762:	4b18      	ldr	r3, [pc, #96]	@ (80137c4 <netif_do_set_ipaddr+0x88>)
 8013764:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8013768:	4917      	ldr	r1, [pc, #92]	@ (80137c8 <netif_do_set_ipaddr+0x8c>)
 801376a:	4818      	ldr	r0, [pc, #96]	@ (80137cc <netif_do_set_ipaddr+0x90>)
 801376c:	f00d f90a 	bl	8020984 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8013770:	68bb      	ldr	r3, [r7, #8]
 8013772:	681a      	ldr	r2, [r3, #0]
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	3304      	adds	r3, #4
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	429a      	cmp	r2, r3
 801377c:	d01c      	beq.n	80137b8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	3304      	adds	r3, #4
 8013788:	681a      	ldr	r2, [r3, #0]
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801378e:	f107 0314 	add.w	r3, r7, #20
 8013792:	4619      	mov	r1, r3
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	f7ff ffbf 	bl	8013718 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801379a:	68bb      	ldr	r3, [r7, #8]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d002      	beq.n	80137a6 <netif_do_set_ipaddr+0x6a>
 80137a0:	68bb      	ldr	r3, [r7, #8]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	e000      	b.n	80137a8 <netif_do_set_ipaddr+0x6c>
 80137a6:	2300      	movs	r3, #0
 80137a8:	68fa      	ldr	r2, [r7, #12]
 80137aa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80137ac:	2101      	movs	r1, #1
 80137ae:	68f8      	ldr	r0, [r7, #12]
 80137b0:	f000 f8d2 	bl	8013958 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80137b4:	2301      	movs	r3, #1
 80137b6:	e000      	b.n	80137ba <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80137b8:	2300      	movs	r3, #0
}
 80137ba:	4618      	mov	r0, r3
 80137bc:	3718      	adds	r7, #24
 80137be:	46bd      	mov	sp, r7
 80137c0:	bd80      	pop	{r7, pc}
 80137c2:	bf00      	nop
 80137c4:	080241f0 	.word	0x080241f0
 80137c8:	08024308 	.word	0x08024308
 80137cc:	08024240 	.word	0x08024240

080137d0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80137d0:	b480      	push	{r7}
 80137d2:	b085      	sub	sp, #20
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	60f8      	str	r0, [r7, #12]
 80137d8:	60b9      	str	r1, [r7, #8]
 80137da:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80137dc:	68bb      	ldr	r3, [r7, #8]
 80137de:	681a      	ldr	r2, [r3, #0]
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	3308      	adds	r3, #8
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	429a      	cmp	r2, r3
 80137e8:	d00a      	beq.n	8013800 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d002      	beq.n	80137f6 <netif_do_set_netmask+0x26>
 80137f0:	68bb      	ldr	r3, [r7, #8]
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	e000      	b.n	80137f8 <netif_do_set_netmask+0x28>
 80137f6:	2300      	movs	r3, #0
 80137f8:	68fa      	ldr	r2, [r7, #12]
 80137fa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80137fc:	2301      	movs	r3, #1
 80137fe:	e000      	b.n	8013802 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8013800:	2300      	movs	r3, #0
}
 8013802:	4618      	mov	r0, r3
 8013804:	3714      	adds	r7, #20
 8013806:	46bd      	mov	sp, r7
 8013808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380c:	4770      	bx	lr

0801380e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801380e:	b480      	push	{r7}
 8013810:	b085      	sub	sp, #20
 8013812:	af00      	add	r7, sp, #0
 8013814:	60f8      	str	r0, [r7, #12]
 8013816:	60b9      	str	r1, [r7, #8]
 8013818:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801381a:	68bb      	ldr	r3, [r7, #8]
 801381c:	681a      	ldr	r2, [r3, #0]
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	330c      	adds	r3, #12
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	429a      	cmp	r2, r3
 8013826:	d00a      	beq.n	801383e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013828:	68bb      	ldr	r3, [r7, #8]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d002      	beq.n	8013834 <netif_do_set_gw+0x26>
 801382e:	68bb      	ldr	r3, [r7, #8]
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	e000      	b.n	8013836 <netif_do_set_gw+0x28>
 8013834:	2300      	movs	r3, #0
 8013836:	68fa      	ldr	r2, [r7, #12]
 8013838:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801383a:	2301      	movs	r3, #1
 801383c:	e000      	b.n	8013840 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801383e:	2300      	movs	r3, #0
}
 8013840:	4618      	mov	r0, r3
 8013842:	3714      	adds	r7, #20
 8013844:	46bd      	mov	sp, r7
 8013846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384a:	4770      	bx	lr

0801384c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b088      	sub	sp, #32
 8013850:	af00      	add	r7, sp, #0
 8013852:	60f8      	str	r0, [r7, #12]
 8013854:	60b9      	str	r1, [r7, #8]
 8013856:	607a      	str	r2, [r7, #4]
 8013858:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801385a:	2300      	movs	r3, #0
 801385c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801385e:	2300      	movs	r3, #0
 8013860:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013862:	68bb      	ldr	r3, [r7, #8]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d101      	bne.n	801386c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013868:	4b1c      	ldr	r3, [pc, #112]	@ (80138dc <netif_set_addr+0x90>)
 801386a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d101      	bne.n	8013876 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8013872:	4b1a      	ldr	r3, [pc, #104]	@ (80138dc <netif_set_addr+0x90>)
 8013874:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013876:	683b      	ldr	r3, [r7, #0]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d101      	bne.n	8013880 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801387c:	4b17      	ldr	r3, [pc, #92]	@ (80138dc <netif_set_addr+0x90>)
 801387e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8013880:	68bb      	ldr	r3, [r7, #8]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d003      	beq.n	801388e <netif_set_addr+0x42>
 8013886:	68bb      	ldr	r3, [r7, #8]
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d101      	bne.n	8013892 <netif_set_addr+0x46>
 801388e:	2301      	movs	r3, #1
 8013890:	e000      	b.n	8013894 <netif_set_addr+0x48>
 8013892:	2300      	movs	r3, #0
 8013894:	617b      	str	r3, [r7, #20]
  if (remove) {
 8013896:	697b      	ldr	r3, [r7, #20]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d006      	beq.n	80138aa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801389c:	f107 0310 	add.w	r3, r7, #16
 80138a0:	461a      	mov	r2, r3
 80138a2:	68b9      	ldr	r1, [r7, #8]
 80138a4:	68f8      	ldr	r0, [r7, #12]
 80138a6:	f7ff ff49 	bl	801373c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80138aa:	69fa      	ldr	r2, [r7, #28]
 80138ac:	6879      	ldr	r1, [r7, #4]
 80138ae:	68f8      	ldr	r0, [r7, #12]
 80138b0:	f7ff ff8e 	bl	80137d0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80138b4:	69ba      	ldr	r2, [r7, #24]
 80138b6:	6839      	ldr	r1, [r7, #0]
 80138b8:	68f8      	ldr	r0, [r7, #12]
 80138ba:	f7ff ffa8 	bl	801380e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80138be:	697b      	ldr	r3, [r7, #20]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d106      	bne.n	80138d2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80138c4:	f107 0310 	add.w	r3, r7, #16
 80138c8:	461a      	mov	r2, r3
 80138ca:	68b9      	ldr	r1, [r7, #8]
 80138cc:	68f8      	ldr	r0, [r7, #12]
 80138ce:	f7ff ff35 	bl	801373c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80138d2:	bf00      	nop
 80138d4:	3720      	adds	r7, #32
 80138d6:	46bd      	mov	sp, r7
 80138d8:	bd80      	pop	{r7, pc}
 80138da:	bf00      	nop
 80138dc:	08026e5c 	.word	0x08026e5c

080138e0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80138e0:	b480      	push	{r7}
 80138e2:	b083      	sub	sp, #12
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80138e8:	4a04      	ldr	r2, [pc, #16]	@ (80138fc <netif_set_default+0x1c>)
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80138ee:	bf00      	nop
 80138f0:	370c      	adds	r7, #12
 80138f2:	46bd      	mov	sp, r7
 80138f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f8:	4770      	bx	lr
 80138fa:	bf00      	nop
 80138fc:	2400caf4 	.word	0x2400caf4

08013900 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b082      	sub	sp, #8
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d107      	bne.n	801391e <netif_set_up+0x1e>
 801390e:	4b0f      	ldr	r3, [pc, #60]	@ (801394c <netif_set_up+0x4c>)
 8013910:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8013914:	490e      	ldr	r1, [pc, #56]	@ (8013950 <netif_set_up+0x50>)
 8013916:	480f      	ldr	r0, [pc, #60]	@ (8013954 <netif_set_up+0x54>)
 8013918:	f00d f834 	bl	8020984 <iprintf>
 801391c:	e013      	b.n	8013946 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013924:	f003 0301 	and.w	r3, r3, #1
 8013928:	2b00      	cmp	r3, #0
 801392a:	d10c      	bne.n	8013946 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013932:	f043 0301 	orr.w	r3, r3, #1
 8013936:	b2da      	uxtb	r2, r3
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801393e:	2103      	movs	r1, #3
 8013940:	6878      	ldr	r0, [r7, #4]
 8013942:	f000 f809 	bl	8013958 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8013946:	3708      	adds	r7, #8
 8013948:	46bd      	mov	sp, r7
 801394a:	bd80      	pop	{r7, pc}
 801394c:	080241f0 	.word	0x080241f0
 8013950:	08024378 	.word	0x08024378
 8013954:	08024240 	.word	0x08024240

08013958 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b082      	sub	sp, #8
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
 8013960:	460b      	mov	r3, r1
 8013962:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d106      	bne.n	8013978 <netif_issue_reports+0x20>
 801396a:	4b18      	ldr	r3, [pc, #96]	@ (80139cc <netif_issue_reports+0x74>)
 801396c:	f240 326d 	movw	r2, #877	@ 0x36d
 8013970:	4917      	ldr	r1, [pc, #92]	@ (80139d0 <netif_issue_reports+0x78>)
 8013972:	4818      	ldr	r0, [pc, #96]	@ (80139d4 <netif_issue_reports+0x7c>)
 8013974:	f00d f806 	bl	8020984 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801397e:	f003 0304 	and.w	r3, r3, #4
 8013982:	2b00      	cmp	r3, #0
 8013984:	d01e      	beq.n	80139c4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801398c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013990:	2b00      	cmp	r3, #0
 8013992:	d017      	beq.n	80139c4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013994:	78fb      	ldrb	r3, [r7, #3]
 8013996:	f003 0301 	and.w	r3, r3, #1
 801399a:	2b00      	cmp	r3, #0
 801399c:	d013      	beq.n	80139c6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	3304      	adds	r3, #4
 80139a2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d00e      	beq.n	80139c6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80139ae:	f003 0308 	and.w	r3, r3, #8
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d007      	beq.n	80139c6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	3304      	adds	r3, #4
 80139ba:	4619      	mov	r1, r3
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f00a fbfb 	bl	801e1b8 <etharp_request>
 80139c2:	e000      	b.n	80139c6 <netif_issue_reports+0x6e>
    return;
 80139c4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80139c6:	3708      	adds	r7, #8
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}
 80139cc:	080241f0 	.word	0x080241f0
 80139d0:	08024394 	.word	0x08024394
 80139d4:	08024240 	.word	0x08024240

080139d8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80139d8:	b580      	push	{r7, lr}
 80139da:	b082      	sub	sp, #8
 80139dc:	af00      	add	r7, sp, #0
 80139de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d107      	bne.n	80139f6 <netif_set_down+0x1e>
 80139e6:	4b12      	ldr	r3, [pc, #72]	@ (8013a30 <netif_set_down+0x58>)
 80139e8:	f240 329b 	movw	r2, #923	@ 0x39b
 80139ec:	4911      	ldr	r1, [pc, #68]	@ (8013a34 <netif_set_down+0x5c>)
 80139ee:	4812      	ldr	r0, [pc, #72]	@ (8013a38 <netif_set_down+0x60>)
 80139f0:	f00c ffc8 	bl	8020984 <iprintf>
 80139f4:	e019      	b.n	8013a2a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80139fc:	f003 0301 	and.w	r3, r3, #1
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d012      	beq.n	8013a2a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013a0a:	f023 0301 	bic.w	r3, r3, #1
 8013a0e:	b2da      	uxtb	r2, r3
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013a1c:	f003 0308 	and.w	r3, r3, #8
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d002      	beq.n	8013a2a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8013a24:	6878      	ldr	r0, [r7, #4]
 8013a26:	f009 ff81 	bl	801d92c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8013a2a:	3708      	adds	r7, #8
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bd80      	pop	{r7, pc}
 8013a30:	080241f0 	.word	0x080241f0
 8013a34:	080243b8 	.word	0x080243b8
 8013a38:	08024240 	.word	0x08024240

08013a3c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b082      	sub	sp, #8
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d107      	bne.n	8013a5a <netif_set_link_up+0x1e>
 8013a4a:	4b15      	ldr	r3, [pc, #84]	@ (8013aa0 <netif_set_link_up+0x64>)
 8013a4c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8013a50:	4914      	ldr	r1, [pc, #80]	@ (8013aa4 <netif_set_link_up+0x68>)
 8013a52:	4815      	ldr	r0, [pc, #84]	@ (8013aa8 <netif_set_link_up+0x6c>)
 8013a54:	f00c ff96 	bl	8020984 <iprintf>
 8013a58:	e01e      	b.n	8013a98 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013a60:	f003 0304 	and.w	r3, r3, #4
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d117      	bne.n	8013a98 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013a6e:	f043 0304 	orr.w	r3, r3, #4
 8013a72:	b2da      	uxtb	r2, r3
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8013a7a:	6878      	ldr	r0, [r7, #4]
 8013a7c:	f008 f9cc 	bl	801be18 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013a80:	2103      	movs	r1, #3
 8013a82:	6878      	ldr	r0, [r7, #4]
 8013a84:	f7ff ff68 	bl	8013958 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	69db      	ldr	r3, [r3, #28]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d003      	beq.n	8013a98 <netif_set_link_up+0x5c>
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	69db      	ldr	r3, [r3, #28]
 8013a94:	6878      	ldr	r0, [r7, #4]
 8013a96:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013a98:	3708      	adds	r7, #8
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd80      	pop	{r7, pc}
 8013a9e:	bf00      	nop
 8013aa0:	080241f0 	.word	0x080241f0
 8013aa4:	080243d8 	.word	0x080243d8
 8013aa8:	08024240 	.word	0x08024240

08013aac <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b082      	sub	sp, #8
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d107      	bne.n	8013aca <netif_set_link_down+0x1e>
 8013aba:	4b11      	ldr	r3, [pc, #68]	@ (8013b00 <netif_set_link_down+0x54>)
 8013abc:	f240 4206 	movw	r2, #1030	@ 0x406
 8013ac0:	4910      	ldr	r1, [pc, #64]	@ (8013b04 <netif_set_link_down+0x58>)
 8013ac2:	4811      	ldr	r0, [pc, #68]	@ (8013b08 <netif_set_link_down+0x5c>)
 8013ac4:	f00c ff5e 	bl	8020984 <iprintf>
 8013ac8:	e017      	b.n	8013afa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013ad0:	f003 0304 	and.w	r3, r3, #4
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d010      	beq.n	8013afa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013ade:	f023 0304 	bic.w	r3, r3, #4
 8013ae2:	b2da      	uxtb	r2, r3
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	69db      	ldr	r3, [r3, #28]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d003      	beq.n	8013afa <netif_set_link_down+0x4e>
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	69db      	ldr	r3, [r3, #28]
 8013af6:	6878      	ldr	r0, [r7, #4]
 8013af8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013afa:	3708      	adds	r7, #8
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd80      	pop	{r7, pc}
 8013b00:	080241f0 	.word	0x080241f0
 8013b04:	080243fc 	.word	0x080243fc
 8013b08:	08024240 	.word	0x08024240

08013b0c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8013b0c:	b480      	push	{r7}
 8013b0e:	b083      	sub	sp, #12
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
 8013b14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d002      	beq.n	8013b22 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	683a      	ldr	r2, [r7, #0]
 8013b20:	61da      	str	r2, [r3, #28]
  }
}
 8013b22:	bf00      	nop
 8013b24:	370c      	adds	r7, #12
 8013b26:	46bd      	mov	sp, r7
 8013b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2c:	4770      	bx	lr

08013b2e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8013b2e:	b480      	push	{r7}
 8013b30:	b085      	sub	sp, #20
 8013b32:	af00      	add	r7, sp, #0
 8013b34:	60f8      	str	r0, [r7, #12]
 8013b36:	60b9      	str	r1, [r7, #8]
 8013b38:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8013b3a:	f06f 030b 	mvn.w	r3, #11
}
 8013b3e:	4618      	mov	r0, r3
 8013b40:	3714      	adds	r7, #20
 8013b42:	46bd      	mov	sp, r7
 8013b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b48:	4770      	bx	lr
	...

08013b4c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8013b4c:	b480      	push	{r7}
 8013b4e:	b085      	sub	sp, #20
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	4603      	mov	r3, r0
 8013b54:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8013b56:	79fb      	ldrb	r3, [r7, #7]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d013      	beq.n	8013b84 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8013b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8013b94 <netif_get_by_index+0x48>)
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	60fb      	str	r3, [r7, #12]
 8013b62:	e00c      	b.n	8013b7e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013b6a:	3301      	adds	r3, #1
 8013b6c:	b2db      	uxtb	r3, r3
 8013b6e:	79fa      	ldrb	r2, [r7, #7]
 8013b70:	429a      	cmp	r2, r3
 8013b72:	d101      	bne.n	8013b78 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	e006      	b.n	8013b86 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	60fb      	str	r3, [r7, #12]
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d1ef      	bne.n	8013b64 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8013b84:	2300      	movs	r3, #0
}
 8013b86:	4618      	mov	r0, r3
 8013b88:	3714      	adds	r7, #20
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b90:	4770      	bx	lr
 8013b92:	bf00      	nop
 8013b94:	2400caf0 	.word	0x2400caf0

08013b98 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b082      	sub	sp, #8
 8013b9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8013b9e:	f00c f99d 	bl	801fedc <sys_arch_protect>
 8013ba2:	6038      	str	r0, [r7, #0]
 8013ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8013bdc <pbuf_free_ooseq+0x44>)
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	701a      	strb	r2, [r3, #0]
 8013baa:	6838      	ldr	r0, [r7, #0]
 8013bac:	f00c f9a4 	bl	801fef8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8013be0 <pbuf_free_ooseq+0x48>)
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	607b      	str	r3, [r7, #4]
 8013bb6:	e00a      	b.n	8013bce <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d003      	beq.n	8013bc8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013bc0:	6878      	ldr	r0, [r7, #4]
 8013bc2:	f002 fc0b 	bl	80163dc <tcp_free_ooseq>
      return;
 8013bc6:	e005      	b.n	8013bd4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	68db      	ldr	r3, [r3, #12]
 8013bcc:	607b      	str	r3, [r7, #4]
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d1f1      	bne.n	8013bb8 <pbuf_free_ooseq+0x20>
    }
  }
}
 8013bd4:	3708      	adds	r7, #8
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	bd80      	pop	{r7, pc}
 8013bda:	bf00      	nop
 8013bdc:	2400caf9 	.word	0x2400caf9
 8013be0:	2400cb08 	.word	0x2400cb08

08013be4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b082      	sub	sp, #8
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013bec:	f7ff ffd4 	bl	8013b98 <pbuf_free_ooseq>
}
 8013bf0:	bf00      	nop
 8013bf2:	3708      	adds	r7, #8
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd80      	pop	{r7, pc}

08013bf8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b082      	sub	sp, #8
 8013bfc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013bfe:	f00c f96d 	bl	801fedc <sys_arch_protect>
 8013c02:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013c04:	4b0f      	ldr	r3, [pc, #60]	@ (8013c44 <pbuf_pool_is_empty+0x4c>)
 8013c06:	781b      	ldrb	r3, [r3, #0]
 8013c08:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8013c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8013c44 <pbuf_pool_is_empty+0x4c>)
 8013c0c:	2201      	movs	r2, #1
 8013c0e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013c10:	6878      	ldr	r0, [r7, #4]
 8013c12:	f00c f971 	bl	801fef8 <sys_arch_unprotect>

  if (!queued) {
 8013c16:	78fb      	ldrb	r3, [r7, #3]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d10f      	bne.n	8013c3c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013c1c:	2100      	movs	r1, #0
 8013c1e:	480a      	ldr	r0, [pc, #40]	@ (8013c48 <pbuf_pool_is_empty+0x50>)
 8013c20:	f7fe fdcc 	bl	80127bc <tcpip_try_callback>
 8013c24:	4603      	mov	r3, r0
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d008      	beq.n	8013c3c <pbuf_pool_is_empty+0x44>
 8013c2a:	f00c f957 	bl	801fedc <sys_arch_protect>
 8013c2e:	6078      	str	r0, [r7, #4]
 8013c30:	4b04      	ldr	r3, [pc, #16]	@ (8013c44 <pbuf_pool_is_empty+0x4c>)
 8013c32:	2200      	movs	r2, #0
 8013c34:	701a      	strb	r2, [r3, #0]
 8013c36:	6878      	ldr	r0, [r7, #4]
 8013c38:	f00c f95e 	bl	801fef8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013c3c:	bf00      	nop
 8013c3e:	3708      	adds	r7, #8
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bd80      	pop	{r7, pc}
 8013c44:	2400caf9 	.word	0x2400caf9
 8013c48:	08013be5 	.word	0x08013be5

08013c4c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8013c4c:	b480      	push	{r7}
 8013c4e:	b085      	sub	sp, #20
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	60f8      	str	r0, [r7, #12]
 8013c54:	60b9      	str	r1, [r7, #8]
 8013c56:	4611      	mov	r1, r2
 8013c58:	461a      	mov	r2, r3
 8013c5a:	460b      	mov	r3, r1
 8013c5c:	80fb      	strh	r3, [r7, #6]
 8013c5e:	4613      	mov	r3, r2
 8013c60:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	2200      	movs	r2, #0
 8013c66:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	68ba      	ldr	r2, [r7, #8]
 8013c6c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	88fa      	ldrh	r2, [r7, #6]
 8013c72:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	88ba      	ldrh	r2, [r7, #4]
 8013c78:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8013c7a:	8b3b      	ldrh	r3, [r7, #24]
 8013c7c:	b2da      	uxtb	r2, r3
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	7f3a      	ldrb	r2, [r7, #28]
 8013c86:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	2201      	movs	r2, #1
 8013c8c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	2200      	movs	r2, #0
 8013c92:	73da      	strb	r2, [r3, #15]
}
 8013c94:	bf00      	nop
 8013c96:	3714      	adds	r7, #20
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9e:	4770      	bx	lr

08013ca0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b08c      	sub	sp, #48	@ 0x30
 8013ca4:	af02      	add	r7, sp, #8
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	71fb      	strb	r3, [r7, #7]
 8013caa:	460b      	mov	r3, r1
 8013cac:	80bb      	strh	r3, [r7, #4]
 8013cae:	4613      	mov	r3, r2
 8013cb0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8013cb2:	79fb      	ldrb	r3, [r7, #7]
 8013cb4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8013cb6:	887b      	ldrh	r3, [r7, #2]
 8013cb8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013cbc:	d07f      	beq.n	8013dbe <pbuf_alloc+0x11e>
 8013cbe:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013cc2:	f300 80c8 	bgt.w	8013e56 <pbuf_alloc+0x1b6>
 8013cc6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8013cca:	d010      	beq.n	8013cee <pbuf_alloc+0x4e>
 8013ccc:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8013cd0:	f300 80c1 	bgt.w	8013e56 <pbuf_alloc+0x1b6>
 8013cd4:	2b01      	cmp	r3, #1
 8013cd6:	d002      	beq.n	8013cde <pbuf_alloc+0x3e>
 8013cd8:	2b41      	cmp	r3, #65	@ 0x41
 8013cda:	f040 80bc 	bne.w	8013e56 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013cde:	887a      	ldrh	r2, [r7, #2]
 8013ce0:	88bb      	ldrh	r3, [r7, #4]
 8013ce2:	4619      	mov	r1, r3
 8013ce4:	2000      	movs	r0, #0
 8013ce6:	f000 f8d1 	bl	8013e8c <pbuf_alloc_reference>
 8013cea:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8013cec:	e0bd      	b.n	8013e6a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013cee:	2300      	movs	r3, #0
 8013cf0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8013cf6:	88bb      	ldrh	r3, [r7, #4]
 8013cf8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8013cfa:	200c      	movs	r0, #12
 8013cfc:	f7ff fb8e 	bl	801341c <memp_malloc>
 8013d00:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8013d02:	693b      	ldr	r3, [r7, #16]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d109      	bne.n	8013d1c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8013d08:	f7ff ff76 	bl	8013bf8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8013d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d002      	beq.n	8013d18 <pbuf_alloc+0x78>
            pbuf_free(p);
 8013d12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013d14:	f000 faa8 	bl	8014268 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8013d18:	2300      	movs	r3, #0
 8013d1a:	e0a7      	b.n	8013e6c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013d1c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013d1e:	3303      	adds	r3, #3
 8013d20:	b29b      	uxth	r3, r3
 8013d22:	f023 0303 	bic.w	r3, r3, #3
 8013d26:	b29b      	uxth	r3, r3
 8013d28:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8013d2c:	b29b      	uxth	r3, r3
 8013d2e:	8b7a      	ldrh	r2, [r7, #26]
 8013d30:	4293      	cmp	r3, r2
 8013d32:	bf28      	it	cs
 8013d34:	4613      	movcs	r3, r2
 8013d36:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8013d38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013d3a:	3310      	adds	r3, #16
 8013d3c:	693a      	ldr	r2, [r7, #16]
 8013d3e:	4413      	add	r3, r2
 8013d40:	3303      	adds	r3, #3
 8013d42:	f023 0303 	bic.w	r3, r3, #3
 8013d46:	4618      	mov	r0, r3
 8013d48:	89f9      	ldrh	r1, [r7, #14]
 8013d4a:	8b7a      	ldrh	r2, [r7, #26]
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	9301      	str	r3, [sp, #4]
 8013d50:	887b      	ldrh	r3, [r7, #2]
 8013d52:	9300      	str	r3, [sp, #0]
 8013d54:	460b      	mov	r3, r1
 8013d56:	4601      	mov	r1, r0
 8013d58:	6938      	ldr	r0, [r7, #16]
 8013d5a:	f7ff ff77 	bl	8013c4c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8013d5e:	693b      	ldr	r3, [r7, #16]
 8013d60:	685b      	ldr	r3, [r3, #4]
 8013d62:	f003 0303 	and.w	r3, r3, #3
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d006      	beq.n	8013d78 <pbuf_alloc+0xd8>
 8013d6a:	4b42      	ldr	r3, [pc, #264]	@ (8013e74 <pbuf_alloc+0x1d4>)
 8013d6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013d70:	4941      	ldr	r1, [pc, #260]	@ (8013e78 <pbuf_alloc+0x1d8>)
 8013d72:	4842      	ldr	r0, [pc, #264]	@ (8013e7c <pbuf_alloc+0x1dc>)
 8013d74:	f00c fe06 	bl	8020984 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8013d78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013d7a:	3303      	adds	r3, #3
 8013d7c:	f023 0303 	bic.w	r3, r3, #3
 8013d80:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8013d84:	d106      	bne.n	8013d94 <pbuf_alloc+0xf4>
 8013d86:	4b3b      	ldr	r3, [pc, #236]	@ (8013e74 <pbuf_alloc+0x1d4>)
 8013d88:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8013d8c:	493c      	ldr	r1, [pc, #240]	@ (8013e80 <pbuf_alloc+0x1e0>)
 8013d8e:	483b      	ldr	r0, [pc, #236]	@ (8013e7c <pbuf_alloc+0x1dc>)
 8013d90:	f00c fdf8 	bl	8020984 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8013d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d102      	bne.n	8013da0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8013d9a:	693b      	ldr	r3, [r7, #16]
 8013d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8013d9e:	e002      	b.n	8013da6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8013da0:	69fb      	ldr	r3, [r7, #28]
 8013da2:	693a      	ldr	r2, [r7, #16]
 8013da4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8013da6:	693b      	ldr	r3, [r7, #16]
 8013da8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8013daa:	8b7a      	ldrh	r2, [r7, #26]
 8013dac:	89fb      	ldrh	r3, [r7, #14]
 8013dae:	1ad3      	subs	r3, r2, r3
 8013db0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8013db2:	2300      	movs	r3, #0
 8013db4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8013db6:	8b7b      	ldrh	r3, [r7, #26]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d19e      	bne.n	8013cfa <pbuf_alloc+0x5a>
      break;
 8013dbc:	e055      	b.n	8013e6a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8013dbe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013dc0:	3303      	adds	r3, #3
 8013dc2:	b29b      	uxth	r3, r3
 8013dc4:	f023 0303 	bic.w	r3, r3, #3
 8013dc8:	b29a      	uxth	r2, r3
 8013dca:	88bb      	ldrh	r3, [r7, #4]
 8013dcc:	3303      	adds	r3, #3
 8013dce:	b29b      	uxth	r3, r3
 8013dd0:	f023 0303 	bic.w	r3, r3, #3
 8013dd4:	b29b      	uxth	r3, r3
 8013dd6:	4413      	add	r3, r2
 8013dd8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8013dda:	8b3b      	ldrh	r3, [r7, #24]
 8013ddc:	3310      	adds	r3, #16
 8013dde:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013de0:	8b3a      	ldrh	r2, [r7, #24]
 8013de2:	88bb      	ldrh	r3, [r7, #4]
 8013de4:	3303      	adds	r3, #3
 8013de6:	f023 0303 	bic.w	r3, r3, #3
 8013dea:	429a      	cmp	r2, r3
 8013dec:	d306      	bcc.n	8013dfc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8013dee:	8afa      	ldrh	r2, [r7, #22]
 8013df0:	88bb      	ldrh	r3, [r7, #4]
 8013df2:	3303      	adds	r3, #3
 8013df4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013df8:	429a      	cmp	r2, r3
 8013dfa:	d201      	bcs.n	8013e00 <pbuf_alloc+0x160>
        return NULL;
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	e035      	b.n	8013e6c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013e00:	8afb      	ldrh	r3, [r7, #22]
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7ff f966 	bl	80130d4 <mem_malloc>
 8013e08:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8013e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d101      	bne.n	8013e14 <pbuf_alloc+0x174>
        return NULL;
 8013e10:	2300      	movs	r3, #0
 8013e12:	e02b      	b.n	8013e6c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8013e14:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013e16:	3310      	adds	r3, #16
 8013e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e1a:	4413      	add	r3, r2
 8013e1c:	3303      	adds	r3, #3
 8013e1e:	f023 0303 	bic.w	r3, r3, #3
 8013e22:	4618      	mov	r0, r3
 8013e24:	88b9      	ldrh	r1, [r7, #4]
 8013e26:	88ba      	ldrh	r2, [r7, #4]
 8013e28:	2300      	movs	r3, #0
 8013e2a:	9301      	str	r3, [sp, #4]
 8013e2c:	887b      	ldrh	r3, [r7, #2]
 8013e2e:	9300      	str	r3, [sp, #0]
 8013e30:	460b      	mov	r3, r1
 8013e32:	4601      	mov	r1, r0
 8013e34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013e36:	f7ff ff09 	bl	8013c4c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8013e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e3c:	685b      	ldr	r3, [r3, #4]
 8013e3e:	f003 0303 	and.w	r3, r3, #3
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d010      	beq.n	8013e68 <pbuf_alloc+0x1c8>
 8013e46:	4b0b      	ldr	r3, [pc, #44]	@ (8013e74 <pbuf_alloc+0x1d4>)
 8013e48:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8013e4c:	490d      	ldr	r1, [pc, #52]	@ (8013e84 <pbuf_alloc+0x1e4>)
 8013e4e:	480b      	ldr	r0, [pc, #44]	@ (8013e7c <pbuf_alloc+0x1dc>)
 8013e50:	f00c fd98 	bl	8020984 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8013e54:	e008      	b.n	8013e68 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8013e56:	4b07      	ldr	r3, [pc, #28]	@ (8013e74 <pbuf_alloc+0x1d4>)
 8013e58:	f240 1227 	movw	r2, #295	@ 0x127
 8013e5c:	490a      	ldr	r1, [pc, #40]	@ (8013e88 <pbuf_alloc+0x1e8>)
 8013e5e:	4807      	ldr	r0, [pc, #28]	@ (8013e7c <pbuf_alloc+0x1dc>)
 8013e60:	f00c fd90 	bl	8020984 <iprintf>
      return NULL;
 8013e64:	2300      	movs	r3, #0
 8013e66:	e001      	b.n	8013e6c <pbuf_alloc+0x1cc>
      break;
 8013e68:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8013e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	3728      	adds	r7, #40	@ 0x28
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}
 8013e74:	08024420 	.word	0x08024420
 8013e78:	08024450 	.word	0x08024450
 8013e7c:	08024480 	.word	0x08024480
 8013e80:	080244a8 	.word	0x080244a8
 8013e84:	080244dc 	.word	0x080244dc
 8013e88:	08024508 	.word	0x08024508

08013e8c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	b086      	sub	sp, #24
 8013e90:	af02      	add	r7, sp, #8
 8013e92:	6078      	str	r0, [r7, #4]
 8013e94:	460b      	mov	r3, r1
 8013e96:	807b      	strh	r3, [r7, #2]
 8013e98:	4613      	mov	r3, r2
 8013e9a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8013e9c:	883b      	ldrh	r3, [r7, #0]
 8013e9e:	2b41      	cmp	r3, #65	@ 0x41
 8013ea0:	d009      	beq.n	8013eb6 <pbuf_alloc_reference+0x2a>
 8013ea2:	883b      	ldrh	r3, [r7, #0]
 8013ea4:	2b01      	cmp	r3, #1
 8013ea6:	d006      	beq.n	8013eb6 <pbuf_alloc_reference+0x2a>
 8013ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8013ee8 <pbuf_alloc_reference+0x5c>)
 8013eaa:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8013eae:	490f      	ldr	r1, [pc, #60]	@ (8013eec <pbuf_alloc_reference+0x60>)
 8013eb0:	480f      	ldr	r0, [pc, #60]	@ (8013ef0 <pbuf_alloc_reference+0x64>)
 8013eb2:	f00c fd67 	bl	8020984 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8013eb6:	200b      	movs	r0, #11
 8013eb8:	f7ff fab0 	bl	801341c <memp_malloc>
 8013ebc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d101      	bne.n	8013ec8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	e00b      	b.n	8013ee0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8013ec8:	8879      	ldrh	r1, [r7, #2]
 8013eca:	887a      	ldrh	r2, [r7, #2]
 8013ecc:	2300      	movs	r3, #0
 8013ece:	9301      	str	r3, [sp, #4]
 8013ed0:	883b      	ldrh	r3, [r7, #0]
 8013ed2:	9300      	str	r3, [sp, #0]
 8013ed4:	460b      	mov	r3, r1
 8013ed6:	6879      	ldr	r1, [r7, #4]
 8013ed8:	68f8      	ldr	r0, [r7, #12]
 8013eda:	f7ff feb7 	bl	8013c4c <pbuf_init_alloced_pbuf>
  return p;
 8013ede:	68fb      	ldr	r3, [r7, #12]
}
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	3710      	adds	r7, #16
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bd80      	pop	{r7, pc}
 8013ee8:	08024420 	.word	0x08024420
 8013eec:	08024524 	.word	0x08024524
 8013ef0:	08024480 	.word	0x08024480

08013ef4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b088      	sub	sp, #32
 8013ef8:	af02      	add	r7, sp, #8
 8013efa:	607b      	str	r3, [r7, #4]
 8013efc:	4603      	mov	r3, r0
 8013efe:	73fb      	strb	r3, [r7, #15]
 8013f00:	460b      	mov	r3, r1
 8013f02:	81bb      	strh	r3, [r7, #12]
 8013f04:	4613      	mov	r3, r2
 8013f06:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8013f08:	7bfb      	ldrb	r3, [r7, #15]
 8013f0a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8013f0c:	8a7b      	ldrh	r3, [r7, #18]
 8013f0e:	3303      	adds	r3, #3
 8013f10:	f023 0203 	bic.w	r2, r3, #3
 8013f14:	89bb      	ldrh	r3, [r7, #12]
 8013f16:	441a      	add	r2, r3
 8013f18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013f1a:	429a      	cmp	r2, r3
 8013f1c:	d901      	bls.n	8013f22 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	e018      	b.n	8013f54 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8013f22:	6a3b      	ldr	r3, [r7, #32]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d007      	beq.n	8013f38 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8013f28:	8a7b      	ldrh	r3, [r7, #18]
 8013f2a:	3303      	adds	r3, #3
 8013f2c:	f023 0303 	bic.w	r3, r3, #3
 8013f30:	6a3a      	ldr	r2, [r7, #32]
 8013f32:	4413      	add	r3, r2
 8013f34:	617b      	str	r3, [r7, #20]
 8013f36:	e001      	b.n	8013f3c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8013f38:	2300      	movs	r3, #0
 8013f3a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8013f3c:	6878      	ldr	r0, [r7, #4]
 8013f3e:	89b9      	ldrh	r1, [r7, #12]
 8013f40:	89ba      	ldrh	r2, [r7, #12]
 8013f42:	2302      	movs	r3, #2
 8013f44:	9301      	str	r3, [sp, #4]
 8013f46:	897b      	ldrh	r3, [r7, #10]
 8013f48:	9300      	str	r3, [sp, #0]
 8013f4a:	460b      	mov	r3, r1
 8013f4c:	6979      	ldr	r1, [r7, #20]
 8013f4e:	f7ff fe7d 	bl	8013c4c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8013f52:	687b      	ldr	r3, [r7, #4]
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	3718      	adds	r7, #24
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}

08013f5c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b084      	sub	sp, #16
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
 8013f64:	460b      	mov	r3, r1
 8013f66:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d106      	bne.n	8013f7c <pbuf_realloc+0x20>
 8013f6e:	4b3a      	ldr	r3, [pc, #232]	@ (8014058 <pbuf_realloc+0xfc>)
 8013f70:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8013f74:	4939      	ldr	r1, [pc, #228]	@ (801405c <pbuf_realloc+0x100>)
 8013f76:	483a      	ldr	r0, [pc, #232]	@ (8014060 <pbuf_realloc+0x104>)
 8013f78:	f00c fd04 	bl	8020984 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	891b      	ldrh	r3, [r3, #8]
 8013f80:	887a      	ldrh	r2, [r7, #2]
 8013f82:	429a      	cmp	r2, r3
 8013f84:	d263      	bcs.n	801404e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	891a      	ldrh	r2, [r3, #8]
 8013f8a:	887b      	ldrh	r3, [r7, #2]
 8013f8c:	1ad3      	subs	r3, r2, r3
 8013f8e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8013f90:	887b      	ldrh	r3, [r7, #2]
 8013f92:	817b      	strh	r3, [r7, #10]
  q = p;
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8013f98:	e018      	b.n	8013fcc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	895b      	ldrh	r3, [r3, #10]
 8013f9e:	897a      	ldrh	r2, [r7, #10]
 8013fa0:	1ad3      	subs	r3, r2, r3
 8013fa2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	891a      	ldrh	r2, [r3, #8]
 8013fa8:	893b      	ldrh	r3, [r7, #8]
 8013faa:	1ad3      	subs	r3, r2, r3
 8013fac:	b29a      	uxth	r2, r3
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d106      	bne.n	8013fcc <pbuf_realloc+0x70>
 8013fbe:	4b26      	ldr	r3, [pc, #152]	@ (8014058 <pbuf_realloc+0xfc>)
 8013fc0:	f240 12af 	movw	r2, #431	@ 0x1af
 8013fc4:	4927      	ldr	r1, [pc, #156]	@ (8014064 <pbuf_realloc+0x108>)
 8013fc6:	4826      	ldr	r0, [pc, #152]	@ (8014060 <pbuf_realloc+0x104>)
 8013fc8:	f00c fcdc 	bl	8020984 <iprintf>
  while (rem_len > q->len) {
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	895b      	ldrh	r3, [r3, #10]
 8013fd0:	897a      	ldrh	r2, [r7, #10]
 8013fd2:	429a      	cmp	r2, r3
 8013fd4:	d8e1      	bhi.n	8013f9a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	7b1b      	ldrb	r3, [r3, #12]
 8013fda:	f003 030f 	and.w	r3, r3, #15
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d121      	bne.n	8014026 <pbuf_realloc+0xca>
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	895b      	ldrh	r3, [r3, #10]
 8013fe6:	897a      	ldrh	r2, [r7, #10]
 8013fe8:	429a      	cmp	r2, r3
 8013fea:	d01c      	beq.n	8014026 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	7b5b      	ldrb	r3, [r3, #13]
 8013ff0:	f003 0302 	and.w	r3, r3, #2
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d116      	bne.n	8014026 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	685a      	ldr	r2, [r3, #4]
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	1ad3      	subs	r3, r2, r3
 8014000:	b29a      	uxth	r2, r3
 8014002:	897b      	ldrh	r3, [r7, #10]
 8014004:	4413      	add	r3, r2
 8014006:	b29b      	uxth	r3, r3
 8014008:	4619      	mov	r1, r3
 801400a:	68f8      	ldr	r0, [r7, #12]
 801400c:	f7fe ff58 	bl	8012ec0 <mem_trim>
 8014010:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d106      	bne.n	8014026 <pbuf_realloc+0xca>
 8014018:	4b0f      	ldr	r3, [pc, #60]	@ (8014058 <pbuf_realloc+0xfc>)
 801401a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 801401e:	4912      	ldr	r1, [pc, #72]	@ (8014068 <pbuf_realloc+0x10c>)
 8014020:	480f      	ldr	r0, [pc, #60]	@ (8014060 <pbuf_realloc+0x104>)
 8014022:	f00c fcaf 	bl	8020984 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	897a      	ldrh	r2, [r7, #10]
 801402a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	895a      	ldrh	r2, [r3, #10]
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d004      	beq.n	8014046 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	4618      	mov	r0, r3
 8014042:	f000 f911 	bl	8014268 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	2200      	movs	r2, #0
 801404a:	601a      	str	r2, [r3, #0]
 801404c:	e000      	b.n	8014050 <pbuf_realloc+0xf4>
    return;
 801404e:	bf00      	nop

}
 8014050:	3710      	adds	r7, #16
 8014052:	46bd      	mov	sp, r7
 8014054:	bd80      	pop	{r7, pc}
 8014056:	bf00      	nop
 8014058:	08024420 	.word	0x08024420
 801405c:	08024538 	.word	0x08024538
 8014060:	08024480 	.word	0x08024480
 8014064:	08024550 	.word	0x08024550
 8014068:	08024568 	.word	0x08024568

0801406c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b086      	sub	sp, #24
 8014070:	af00      	add	r7, sp, #0
 8014072:	60f8      	str	r0, [r7, #12]
 8014074:	60b9      	str	r1, [r7, #8]
 8014076:	4613      	mov	r3, r2
 8014078:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d106      	bne.n	801408e <pbuf_add_header_impl+0x22>
 8014080:	4b2b      	ldr	r3, [pc, #172]	@ (8014130 <pbuf_add_header_impl+0xc4>)
 8014082:	f240 12df 	movw	r2, #479	@ 0x1df
 8014086:	492b      	ldr	r1, [pc, #172]	@ (8014134 <pbuf_add_header_impl+0xc8>)
 8014088:	482b      	ldr	r0, [pc, #172]	@ (8014138 <pbuf_add_header_impl+0xcc>)
 801408a:	f00c fc7b 	bl	8020984 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d003      	beq.n	801409c <pbuf_add_header_impl+0x30>
 8014094:	68bb      	ldr	r3, [r7, #8]
 8014096:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801409a:	d301      	bcc.n	80140a0 <pbuf_add_header_impl+0x34>
    return 1;
 801409c:	2301      	movs	r3, #1
 801409e:	e043      	b.n	8014128 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80140a0:	68bb      	ldr	r3, [r7, #8]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d101      	bne.n	80140aa <pbuf_add_header_impl+0x3e>
    return 0;
 80140a6:	2300      	movs	r3, #0
 80140a8:	e03e      	b.n	8014128 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80140aa:	68bb      	ldr	r3, [r7, #8]
 80140ac:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	891a      	ldrh	r2, [r3, #8]
 80140b2:	8a7b      	ldrh	r3, [r7, #18]
 80140b4:	4413      	add	r3, r2
 80140b6:	b29b      	uxth	r3, r3
 80140b8:	8a7a      	ldrh	r2, [r7, #18]
 80140ba:	429a      	cmp	r2, r3
 80140bc:	d901      	bls.n	80140c2 <pbuf_add_header_impl+0x56>
    return 1;
 80140be:	2301      	movs	r3, #1
 80140c0:	e032      	b.n	8014128 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	7b1b      	ldrb	r3, [r3, #12]
 80140c6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80140c8:	8a3b      	ldrh	r3, [r7, #16]
 80140ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d00c      	beq.n	80140ec <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	685a      	ldr	r2, [r3, #4]
 80140d6:	68bb      	ldr	r3, [r7, #8]
 80140d8:	425b      	negs	r3, r3
 80140da:	4413      	add	r3, r2
 80140dc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	3310      	adds	r3, #16
 80140e2:	697a      	ldr	r2, [r7, #20]
 80140e4:	429a      	cmp	r2, r3
 80140e6:	d20d      	bcs.n	8014104 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80140e8:	2301      	movs	r3, #1
 80140ea:	e01d      	b.n	8014128 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80140ec:	79fb      	ldrb	r3, [r7, #7]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d006      	beq.n	8014100 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	685a      	ldr	r2, [r3, #4]
 80140f6:	68bb      	ldr	r3, [r7, #8]
 80140f8:	425b      	negs	r3, r3
 80140fa:	4413      	add	r3, r2
 80140fc:	617b      	str	r3, [r7, #20]
 80140fe:	e001      	b.n	8014104 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014100:	2301      	movs	r3, #1
 8014102:	e011      	b.n	8014128 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	697a      	ldr	r2, [r7, #20]
 8014108:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	895a      	ldrh	r2, [r3, #10]
 801410e:	8a7b      	ldrh	r3, [r7, #18]
 8014110:	4413      	add	r3, r2
 8014112:	b29a      	uxth	r2, r3
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	891a      	ldrh	r2, [r3, #8]
 801411c:	8a7b      	ldrh	r3, [r7, #18]
 801411e:	4413      	add	r3, r2
 8014120:	b29a      	uxth	r2, r3
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	811a      	strh	r2, [r3, #8]


  return 0;
 8014126:	2300      	movs	r3, #0
}
 8014128:	4618      	mov	r0, r3
 801412a:	3718      	adds	r7, #24
 801412c:	46bd      	mov	sp, r7
 801412e:	bd80      	pop	{r7, pc}
 8014130:	08024420 	.word	0x08024420
 8014134:	08024584 	.word	0x08024584
 8014138:	08024480 	.word	0x08024480

0801413c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b082      	sub	sp, #8
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
 8014144:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8014146:	2200      	movs	r2, #0
 8014148:	6839      	ldr	r1, [r7, #0]
 801414a:	6878      	ldr	r0, [r7, #4]
 801414c:	f7ff ff8e 	bl	801406c <pbuf_add_header_impl>
 8014150:	4603      	mov	r3, r0
}
 8014152:	4618      	mov	r0, r3
 8014154:	3708      	adds	r7, #8
 8014156:	46bd      	mov	sp, r7
 8014158:	bd80      	pop	{r7, pc}
	...

0801415c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801415c:	b580      	push	{r7, lr}
 801415e:	b084      	sub	sp, #16
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
 8014164:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d106      	bne.n	801417a <pbuf_remove_header+0x1e>
 801416c:	4b20      	ldr	r3, [pc, #128]	@ (80141f0 <pbuf_remove_header+0x94>)
 801416e:	f240 224b 	movw	r2, #587	@ 0x24b
 8014172:	4920      	ldr	r1, [pc, #128]	@ (80141f4 <pbuf_remove_header+0x98>)
 8014174:	4820      	ldr	r0, [pc, #128]	@ (80141f8 <pbuf_remove_header+0x9c>)
 8014176:	f00c fc05 	bl	8020984 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d003      	beq.n	8014188 <pbuf_remove_header+0x2c>
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014186:	d301      	bcc.n	801418c <pbuf_remove_header+0x30>
    return 1;
 8014188:	2301      	movs	r3, #1
 801418a:	e02c      	b.n	80141e6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801418c:	683b      	ldr	r3, [r7, #0]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d101      	bne.n	8014196 <pbuf_remove_header+0x3a>
    return 0;
 8014192:	2300      	movs	r3, #0
 8014194:	e027      	b.n	80141e6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8014196:	683b      	ldr	r3, [r7, #0]
 8014198:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	895b      	ldrh	r3, [r3, #10]
 801419e:	89fa      	ldrh	r2, [r7, #14]
 80141a0:	429a      	cmp	r2, r3
 80141a2:	d908      	bls.n	80141b6 <pbuf_remove_header+0x5a>
 80141a4:	4b12      	ldr	r3, [pc, #72]	@ (80141f0 <pbuf_remove_header+0x94>)
 80141a6:	f240 2255 	movw	r2, #597	@ 0x255
 80141aa:	4914      	ldr	r1, [pc, #80]	@ (80141fc <pbuf_remove_header+0xa0>)
 80141ac:	4812      	ldr	r0, [pc, #72]	@ (80141f8 <pbuf_remove_header+0x9c>)
 80141ae:	f00c fbe9 	bl	8020984 <iprintf>
 80141b2:	2301      	movs	r3, #1
 80141b4:	e017      	b.n	80141e6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	685b      	ldr	r3, [r3, #4]
 80141ba:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	685a      	ldr	r2, [r3, #4]
 80141c0:	683b      	ldr	r3, [r7, #0]
 80141c2:	441a      	add	r2, r3
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	895a      	ldrh	r2, [r3, #10]
 80141cc:	89fb      	ldrh	r3, [r7, #14]
 80141ce:	1ad3      	subs	r3, r2, r3
 80141d0:	b29a      	uxth	r2, r3
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	891a      	ldrh	r2, [r3, #8]
 80141da:	89fb      	ldrh	r3, [r7, #14]
 80141dc:	1ad3      	subs	r3, r2, r3
 80141de:	b29a      	uxth	r2, r3
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80141e4:	2300      	movs	r3, #0
}
 80141e6:	4618      	mov	r0, r3
 80141e8:	3710      	adds	r7, #16
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bd80      	pop	{r7, pc}
 80141ee:	bf00      	nop
 80141f0:	08024420 	.word	0x08024420
 80141f4:	08024584 	.word	0x08024584
 80141f8:	08024480 	.word	0x08024480
 80141fc:	08024590 	.word	0x08024590

08014200 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014200:	b580      	push	{r7, lr}
 8014202:	b082      	sub	sp, #8
 8014204:	af00      	add	r7, sp, #0
 8014206:	6078      	str	r0, [r7, #4]
 8014208:	460b      	mov	r3, r1
 801420a:	807b      	strh	r3, [r7, #2]
 801420c:	4613      	mov	r3, r2
 801420e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014210:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014214:	2b00      	cmp	r3, #0
 8014216:	da08      	bge.n	801422a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8014218:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801421c:	425b      	negs	r3, r3
 801421e:	4619      	mov	r1, r3
 8014220:	6878      	ldr	r0, [r7, #4]
 8014222:	f7ff ff9b 	bl	801415c <pbuf_remove_header>
 8014226:	4603      	mov	r3, r0
 8014228:	e007      	b.n	801423a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801422a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801422e:	787a      	ldrb	r2, [r7, #1]
 8014230:	4619      	mov	r1, r3
 8014232:	6878      	ldr	r0, [r7, #4]
 8014234:	f7ff ff1a 	bl	801406c <pbuf_add_header_impl>
 8014238:	4603      	mov	r3, r0
  }
}
 801423a:	4618      	mov	r0, r3
 801423c:	3708      	adds	r7, #8
 801423e:	46bd      	mov	sp, r7
 8014240:	bd80      	pop	{r7, pc}

08014242 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8014242:	b580      	push	{r7, lr}
 8014244:	b082      	sub	sp, #8
 8014246:	af00      	add	r7, sp, #0
 8014248:	6078      	str	r0, [r7, #4]
 801424a:	460b      	mov	r3, r1
 801424c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801424e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014252:	2201      	movs	r2, #1
 8014254:	4619      	mov	r1, r3
 8014256:	6878      	ldr	r0, [r7, #4]
 8014258:	f7ff ffd2 	bl	8014200 <pbuf_header_impl>
 801425c:	4603      	mov	r3, r0
}
 801425e:	4618      	mov	r0, r3
 8014260:	3708      	adds	r7, #8
 8014262:	46bd      	mov	sp, r7
 8014264:	bd80      	pop	{r7, pc}
	...

08014268 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b088      	sub	sp, #32
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d10b      	bne.n	801428e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d106      	bne.n	801428a <pbuf_free+0x22>
 801427c:	4b3b      	ldr	r3, [pc, #236]	@ (801436c <pbuf_free+0x104>)
 801427e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8014282:	493b      	ldr	r1, [pc, #236]	@ (8014370 <pbuf_free+0x108>)
 8014284:	483b      	ldr	r0, [pc, #236]	@ (8014374 <pbuf_free+0x10c>)
 8014286:	f00c fb7d 	bl	8020984 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801428a:	2300      	movs	r3, #0
 801428c:	e069      	b.n	8014362 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801428e:	2300      	movs	r3, #0
 8014290:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8014292:	e062      	b.n	801435a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014294:	f00b fe22 	bl	801fedc <sys_arch_protect>
 8014298:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	7b9b      	ldrb	r3, [r3, #14]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d106      	bne.n	80142b0 <pbuf_free+0x48>
 80142a2:	4b32      	ldr	r3, [pc, #200]	@ (801436c <pbuf_free+0x104>)
 80142a4:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80142a8:	4933      	ldr	r1, [pc, #204]	@ (8014378 <pbuf_free+0x110>)
 80142aa:	4832      	ldr	r0, [pc, #200]	@ (8014374 <pbuf_free+0x10c>)
 80142ac:	f00c fb6a 	bl	8020984 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	7b9b      	ldrb	r3, [r3, #14]
 80142b4:	3b01      	subs	r3, #1
 80142b6:	b2da      	uxtb	r2, r3
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	739a      	strb	r2, [r3, #14]
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	7b9b      	ldrb	r3, [r3, #14]
 80142c0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80142c2:	69b8      	ldr	r0, [r7, #24]
 80142c4:	f00b fe18 	bl	801fef8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80142c8:	7dfb      	ldrb	r3, [r7, #23]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d143      	bne.n	8014356 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	7b1b      	ldrb	r3, [r3, #12]
 80142d8:	f003 030f 	and.w	r3, r3, #15
 80142dc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	7b5b      	ldrb	r3, [r3, #13]
 80142e2:	f003 0302 	and.w	r3, r3, #2
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d011      	beq.n	801430e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80142ee:	68bb      	ldr	r3, [r7, #8]
 80142f0:	691b      	ldr	r3, [r3, #16]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d106      	bne.n	8014304 <pbuf_free+0x9c>
 80142f6:	4b1d      	ldr	r3, [pc, #116]	@ (801436c <pbuf_free+0x104>)
 80142f8:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80142fc:	491f      	ldr	r1, [pc, #124]	@ (801437c <pbuf_free+0x114>)
 80142fe:	481d      	ldr	r0, [pc, #116]	@ (8014374 <pbuf_free+0x10c>)
 8014300:	f00c fb40 	bl	8020984 <iprintf>
        pc->custom_free_function(p);
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	691b      	ldr	r3, [r3, #16]
 8014308:	6878      	ldr	r0, [r7, #4]
 801430a:	4798      	blx	r3
 801430c:	e01d      	b.n	801434a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801430e:	7bfb      	ldrb	r3, [r7, #15]
 8014310:	2b02      	cmp	r3, #2
 8014312:	d104      	bne.n	801431e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8014314:	6879      	ldr	r1, [r7, #4]
 8014316:	200c      	movs	r0, #12
 8014318:	f7ff f8f6 	bl	8013508 <memp_free>
 801431c:	e015      	b.n	801434a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801431e:	7bfb      	ldrb	r3, [r7, #15]
 8014320:	2b01      	cmp	r3, #1
 8014322:	d104      	bne.n	801432e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8014324:	6879      	ldr	r1, [r7, #4]
 8014326:	200b      	movs	r0, #11
 8014328:	f7ff f8ee 	bl	8013508 <memp_free>
 801432c:	e00d      	b.n	801434a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801432e:	7bfb      	ldrb	r3, [r7, #15]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d103      	bne.n	801433c <pbuf_free+0xd4>
          mem_free(p);
 8014334:	6878      	ldr	r0, [r7, #4]
 8014336:	f7fe fd33 	bl	8012da0 <mem_free>
 801433a:	e006      	b.n	801434a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801433c:	4b0b      	ldr	r3, [pc, #44]	@ (801436c <pbuf_free+0x104>)
 801433e:	f240 320f 	movw	r2, #783	@ 0x30f
 8014342:	490f      	ldr	r1, [pc, #60]	@ (8014380 <pbuf_free+0x118>)
 8014344:	480b      	ldr	r0, [pc, #44]	@ (8014374 <pbuf_free+0x10c>)
 8014346:	f00c fb1d 	bl	8020984 <iprintf>
        }
      }
      count++;
 801434a:	7ffb      	ldrb	r3, [r7, #31]
 801434c:	3301      	adds	r3, #1
 801434e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014350:	693b      	ldr	r3, [r7, #16]
 8014352:	607b      	str	r3, [r7, #4]
 8014354:	e001      	b.n	801435a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8014356:	2300      	movs	r3, #0
 8014358:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d199      	bne.n	8014294 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014360:	7ffb      	ldrb	r3, [r7, #31]
}
 8014362:	4618      	mov	r0, r3
 8014364:	3720      	adds	r7, #32
 8014366:	46bd      	mov	sp, r7
 8014368:	bd80      	pop	{r7, pc}
 801436a:	bf00      	nop
 801436c:	08024420 	.word	0x08024420
 8014370:	08024584 	.word	0x08024584
 8014374:	08024480 	.word	0x08024480
 8014378:	080245b0 	.word	0x080245b0
 801437c:	080245c8 	.word	0x080245c8
 8014380:	080245ec 	.word	0x080245ec

08014384 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014384:	b480      	push	{r7}
 8014386:	b085      	sub	sp, #20
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801438c:	2300      	movs	r3, #0
 801438e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014390:	e005      	b.n	801439e <pbuf_clen+0x1a>
    ++len;
 8014392:	89fb      	ldrh	r3, [r7, #14]
 8014394:	3301      	adds	r3, #1
 8014396:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d1f6      	bne.n	8014392 <pbuf_clen+0xe>
  }
  return len;
 80143a4:	89fb      	ldrh	r3, [r7, #14]
}
 80143a6:	4618      	mov	r0, r3
 80143a8:	3714      	adds	r7, #20
 80143aa:	46bd      	mov	sp, r7
 80143ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b0:	4770      	bx	lr
	...

080143b4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b084      	sub	sp, #16
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d016      	beq.n	80143f0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80143c2:	f00b fd8b 	bl	801fedc <sys_arch_protect>
 80143c6:	60f8      	str	r0, [r7, #12]
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	7b9b      	ldrb	r3, [r3, #14]
 80143cc:	3301      	adds	r3, #1
 80143ce:	b2da      	uxtb	r2, r3
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	739a      	strb	r2, [r3, #14]
 80143d4:	68f8      	ldr	r0, [r7, #12]
 80143d6:	f00b fd8f 	bl	801fef8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	7b9b      	ldrb	r3, [r3, #14]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d106      	bne.n	80143f0 <pbuf_ref+0x3c>
 80143e2:	4b05      	ldr	r3, [pc, #20]	@ (80143f8 <pbuf_ref+0x44>)
 80143e4:	f240 3242 	movw	r2, #834	@ 0x342
 80143e8:	4904      	ldr	r1, [pc, #16]	@ (80143fc <pbuf_ref+0x48>)
 80143ea:	4805      	ldr	r0, [pc, #20]	@ (8014400 <pbuf_ref+0x4c>)
 80143ec:	f00c faca 	bl	8020984 <iprintf>
  }
}
 80143f0:	bf00      	nop
 80143f2:	3710      	adds	r7, #16
 80143f4:	46bd      	mov	sp, r7
 80143f6:	bd80      	pop	{r7, pc}
 80143f8:	08024420 	.word	0x08024420
 80143fc:	08024600 	.word	0x08024600
 8014400:	08024480 	.word	0x08024480

08014404 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b084      	sub	sp, #16
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
 801440c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d002      	beq.n	801441a <pbuf_cat+0x16>
 8014414:	683b      	ldr	r3, [r7, #0]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d107      	bne.n	801442a <pbuf_cat+0x26>
 801441a:	4b20      	ldr	r3, [pc, #128]	@ (801449c <pbuf_cat+0x98>)
 801441c:	f240 3259 	movw	r2, #857	@ 0x359
 8014420:	491f      	ldr	r1, [pc, #124]	@ (80144a0 <pbuf_cat+0x9c>)
 8014422:	4820      	ldr	r0, [pc, #128]	@ (80144a4 <pbuf_cat+0xa0>)
 8014424:	f00c faae 	bl	8020984 <iprintf>
 8014428:	e034      	b.n	8014494 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	60fb      	str	r3, [r7, #12]
 801442e:	e00a      	b.n	8014446 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	891a      	ldrh	r2, [r3, #8]
 8014434:	683b      	ldr	r3, [r7, #0]
 8014436:	891b      	ldrh	r3, [r3, #8]
 8014438:	4413      	add	r3, r2
 801443a:	b29a      	uxth	r2, r3
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	60fb      	str	r3, [r7, #12]
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d1f0      	bne.n	8014430 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	891a      	ldrh	r2, [r3, #8]
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	895b      	ldrh	r3, [r3, #10]
 8014456:	429a      	cmp	r2, r3
 8014458:	d006      	beq.n	8014468 <pbuf_cat+0x64>
 801445a:	4b10      	ldr	r3, [pc, #64]	@ (801449c <pbuf_cat+0x98>)
 801445c:	f240 3262 	movw	r2, #866	@ 0x362
 8014460:	4911      	ldr	r1, [pc, #68]	@ (80144a8 <pbuf_cat+0xa4>)
 8014462:	4810      	ldr	r0, [pc, #64]	@ (80144a4 <pbuf_cat+0xa0>)
 8014464:	f00c fa8e 	bl	8020984 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d006      	beq.n	801447e <pbuf_cat+0x7a>
 8014470:	4b0a      	ldr	r3, [pc, #40]	@ (801449c <pbuf_cat+0x98>)
 8014472:	f240 3263 	movw	r2, #867	@ 0x363
 8014476:	490d      	ldr	r1, [pc, #52]	@ (80144ac <pbuf_cat+0xa8>)
 8014478:	480a      	ldr	r0, [pc, #40]	@ (80144a4 <pbuf_cat+0xa0>)
 801447a:	f00c fa83 	bl	8020984 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	891a      	ldrh	r2, [r3, #8]
 8014482:	683b      	ldr	r3, [r7, #0]
 8014484:	891b      	ldrh	r3, [r3, #8]
 8014486:	4413      	add	r3, r2
 8014488:	b29a      	uxth	r2, r3
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	683a      	ldr	r2, [r7, #0]
 8014492:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014494:	3710      	adds	r7, #16
 8014496:	46bd      	mov	sp, r7
 8014498:	bd80      	pop	{r7, pc}
 801449a:	bf00      	nop
 801449c:	08024420 	.word	0x08024420
 80144a0:	08024614 	.word	0x08024614
 80144a4:	08024480 	.word	0x08024480
 80144a8:	0802464c 	.word	0x0802464c
 80144ac:	0802467c 	.word	0x0802467c

080144b0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b082      	sub	sp, #8
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
 80144b8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80144ba:	6839      	ldr	r1, [r7, #0]
 80144bc:	6878      	ldr	r0, [r7, #4]
 80144be:	f7ff ffa1 	bl	8014404 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80144c2:	6838      	ldr	r0, [r7, #0]
 80144c4:	f7ff ff76 	bl	80143b4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80144c8:	bf00      	nop
 80144ca:	3708      	adds	r7, #8
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}

080144d0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b086      	sub	sp, #24
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
 80144d8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80144da:	2300      	movs	r3, #0
 80144dc:	617b      	str	r3, [r7, #20]
 80144de:	2300      	movs	r3, #0
 80144e0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d008      	beq.n	80144fa <pbuf_copy+0x2a>
 80144e8:	683b      	ldr	r3, [r7, #0]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d005      	beq.n	80144fa <pbuf_copy+0x2a>
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	891a      	ldrh	r2, [r3, #8]
 80144f2:	683b      	ldr	r3, [r7, #0]
 80144f4:	891b      	ldrh	r3, [r3, #8]
 80144f6:	429a      	cmp	r2, r3
 80144f8:	d209      	bcs.n	801450e <pbuf_copy+0x3e>
 80144fa:	4b57      	ldr	r3, [pc, #348]	@ (8014658 <pbuf_copy+0x188>)
 80144fc:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8014500:	4956      	ldr	r1, [pc, #344]	@ (801465c <pbuf_copy+0x18c>)
 8014502:	4857      	ldr	r0, [pc, #348]	@ (8014660 <pbuf_copy+0x190>)
 8014504:	f00c fa3e 	bl	8020984 <iprintf>
 8014508:	f06f 030f 	mvn.w	r3, #15
 801450c:	e09f      	b.n	801464e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	895b      	ldrh	r3, [r3, #10]
 8014512:	461a      	mov	r2, r3
 8014514:	697b      	ldr	r3, [r7, #20]
 8014516:	1ad2      	subs	r2, r2, r3
 8014518:	683b      	ldr	r3, [r7, #0]
 801451a:	895b      	ldrh	r3, [r3, #10]
 801451c:	4619      	mov	r1, r3
 801451e:	693b      	ldr	r3, [r7, #16]
 8014520:	1acb      	subs	r3, r1, r3
 8014522:	429a      	cmp	r2, r3
 8014524:	d306      	bcc.n	8014534 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8014526:	683b      	ldr	r3, [r7, #0]
 8014528:	895b      	ldrh	r3, [r3, #10]
 801452a:	461a      	mov	r2, r3
 801452c:	693b      	ldr	r3, [r7, #16]
 801452e:	1ad3      	subs	r3, r2, r3
 8014530:	60fb      	str	r3, [r7, #12]
 8014532:	e005      	b.n	8014540 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	895b      	ldrh	r3, [r3, #10]
 8014538:	461a      	mov	r2, r3
 801453a:	697b      	ldr	r3, [r7, #20]
 801453c:	1ad3      	subs	r3, r2, r3
 801453e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	685a      	ldr	r2, [r3, #4]
 8014544:	697b      	ldr	r3, [r7, #20]
 8014546:	18d0      	adds	r0, r2, r3
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	685a      	ldr	r2, [r3, #4]
 801454c:	693b      	ldr	r3, [r7, #16]
 801454e:	4413      	add	r3, r2
 8014550:	68fa      	ldr	r2, [r7, #12]
 8014552:	4619      	mov	r1, r3
 8014554:	f00c fc8b 	bl	8020e6e <memcpy>
    offset_to += len;
 8014558:	697a      	ldr	r2, [r7, #20]
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	4413      	add	r3, r2
 801455e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014560:	693a      	ldr	r2, [r7, #16]
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	4413      	add	r3, r2
 8014566:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	895b      	ldrh	r3, [r3, #10]
 801456c:	461a      	mov	r2, r3
 801456e:	697b      	ldr	r3, [r7, #20]
 8014570:	4293      	cmp	r3, r2
 8014572:	d906      	bls.n	8014582 <pbuf_copy+0xb2>
 8014574:	4b38      	ldr	r3, [pc, #224]	@ (8014658 <pbuf_copy+0x188>)
 8014576:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801457a:	493a      	ldr	r1, [pc, #232]	@ (8014664 <pbuf_copy+0x194>)
 801457c:	4838      	ldr	r0, [pc, #224]	@ (8014660 <pbuf_copy+0x190>)
 801457e:	f00c fa01 	bl	8020984 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8014582:	683b      	ldr	r3, [r7, #0]
 8014584:	895b      	ldrh	r3, [r3, #10]
 8014586:	461a      	mov	r2, r3
 8014588:	693b      	ldr	r3, [r7, #16]
 801458a:	4293      	cmp	r3, r2
 801458c:	d906      	bls.n	801459c <pbuf_copy+0xcc>
 801458e:	4b32      	ldr	r3, [pc, #200]	@ (8014658 <pbuf_copy+0x188>)
 8014590:	f240 32da 	movw	r2, #986	@ 0x3da
 8014594:	4934      	ldr	r1, [pc, #208]	@ (8014668 <pbuf_copy+0x198>)
 8014596:	4832      	ldr	r0, [pc, #200]	@ (8014660 <pbuf_copy+0x190>)
 8014598:	f00c f9f4 	bl	8020984 <iprintf>
    if (offset_from >= p_from->len) {
 801459c:	683b      	ldr	r3, [r7, #0]
 801459e:	895b      	ldrh	r3, [r3, #10]
 80145a0:	461a      	mov	r2, r3
 80145a2:	693b      	ldr	r3, [r7, #16]
 80145a4:	4293      	cmp	r3, r2
 80145a6:	d304      	bcc.n	80145b2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80145a8:	2300      	movs	r3, #0
 80145aa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80145ac:	683b      	ldr	r3, [r7, #0]
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	895b      	ldrh	r3, [r3, #10]
 80145b6:	461a      	mov	r2, r3
 80145b8:	697b      	ldr	r3, [r7, #20]
 80145ba:	4293      	cmp	r3, r2
 80145bc:	d114      	bne.n	80145e8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80145be:	2300      	movs	r3, #0
 80145c0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d10c      	bne.n	80145e8 <pbuf_copy+0x118>
 80145ce:	683b      	ldr	r3, [r7, #0]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d009      	beq.n	80145e8 <pbuf_copy+0x118>
 80145d4:	4b20      	ldr	r3, [pc, #128]	@ (8014658 <pbuf_copy+0x188>)
 80145d6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80145da:	4924      	ldr	r1, [pc, #144]	@ (801466c <pbuf_copy+0x19c>)
 80145dc:	4820      	ldr	r0, [pc, #128]	@ (8014660 <pbuf_copy+0x190>)
 80145de:	f00c f9d1 	bl	8020984 <iprintf>
 80145e2:	f06f 030f 	mvn.w	r3, #15
 80145e6:	e032      	b.n	801464e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80145e8:	683b      	ldr	r3, [r7, #0]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d013      	beq.n	8014616 <pbuf_copy+0x146>
 80145ee:	683b      	ldr	r3, [r7, #0]
 80145f0:	895a      	ldrh	r2, [r3, #10]
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	891b      	ldrh	r3, [r3, #8]
 80145f6:	429a      	cmp	r2, r3
 80145f8:	d10d      	bne.n	8014616 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80145fa:	683b      	ldr	r3, [r7, #0]
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d009      	beq.n	8014616 <pbuf_copy+0x146>
 8014602:	4b15      	ldr	r3, [pc, #84]	@ (8014658 <pbuf_copy+0x188>)
 8014604:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8014608:	4919      	ldr	r1, [pc, #100]	@ (8014670 <pbuf_copy+0x1a0>)
 801460a:	4815      	ldr	r0, [pc, #84]	@ (8014660 <pbuf_copy+0x190>)
 801460c:	f00c f9ba 	bl	8020984 <iprintf>
 8014610:	f06f 0305 	mvn.w	r3, #5
 8014614:	e01b      	b.n	801464e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d013      	beq.n	8014644 <pbuf_copy+0x174>
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	895a      	ldrh	r2, [r3, #10]
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	891b      	ldrh	r3, [r3, #8]
 8014624:	429a      	cmp	r2, r3
 8014626:	d10d      	bne.n	8014644 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d009      	beq.n	8014644 <pbuf_copy+0x174>
 8014630:	4b09      	ldr	r3, [pc, #36]	@ (8014658 <pbuf_copy+0x188>)
 8014632:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8014636:	490e      	ldr	r1, [pc, #56]	@ (8014670 <pbuf_copy+0x1a0>)
 8014638:	4809      	ldr	r0, [pc, #36]	@ (8014660 <pbuf_copy+0x190>)
 801463a:	f00c f9a3 	bl	8020984 <iprintf>
 801463e:	f06f 0305 	mvn.w	r3, #5
 8014642:	e004      	b.n	801464e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8014644:	683b      	ldr	r3, [r7, #0]
 8014646:	2b00      	cmp	r3, #0
 8014648:	f47f af61 	bne.w	801450e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801464c:	2300      	movs	r3, #0
}
 801464e:	4618      	mov	r0, r3
 8014650:	3718      	adds	r7, #24
 8014652:	46bd      	mov	sp, r7
 8014654:	bd80      	pop	{r7, pc}
 8014656:	bf00      	nop
 8014658:	08024420 	.word	0x08024420
 801465c:	080246c8 	.word	0x080246c8
 8014660:	08024480 	.word	0x08024480
 8014664:	080246f8 	.word	0x080246f8
 8014668:	08024710 	.word	0x08024710
 801466c:	0802472c 	.word	0x0802472c
 8014670:	0802473c 	.word	0x0802473c

08014674 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b088      	sub	sp, #32
 8014678:	af00      	add	r7, sp, #0
 801467a:	60f8      	str	r0, [r7, #12]
 801467c:	60b9      	str	r1, [r7, #8]
 801467e:	4611      	mov	r1, r2
 8014680:	461a      	mov	r2, r3
 8014682:	460b      	mov	r3, r1
 8014684:	80fb      	strh	r3, [r7, #6]
 8014686:	4613      	mov	r3, r2
 8014688:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801468a:	2300      	movs	r3, #0
 801468c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801468e:	2300      	movs	r3, #0
 8014690:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d108      	bne.n	80146aa <pbuf_copy_partial+0x36>
 8014698:	4b2b      	ldr	r3, [pc, #172]	@ (8014748 <pbuf_copy_partial+0xd4>)
 801469a:	f240 420a 	movw	r2, #1034	@ 0x40a
 801469e:	492b      	ldr	r1, [pc, #172]	@ (801474c <pbuf_copy_partial+0xd8>)
 80146a0:	482b      	ldr	r0, [pc, #172]	@ (8014750 <pbuf_copy_partial+0xdc>)
 80146a2:	f00c f96f 	bl	8020984 <iprintf>
 80146a6:	2300      	movs	r3, #0
 80146a8:	e04a      	b.n	8014740 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80146aa:	68bb      	ldr	r3, [r7, #8]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d108      	bne.n	80146c2 <pbuf_copy_partial+0x4e>
 80146b0:	4b25      	ldr	r3, [pc, #148]	@ (8014748 <pbuf_copy_partial+0xd4>)
 80146b2:	f240 420b 	movw	r2, #1035	@ 0x40b
 80146b6:	4927      	ldr	r1, [pc, #156]	@ (8014754 <pbuf_copy_partial+0xe0>)
 80146b8:	4825      	ldr	r0, [pc, #148]	@ (8014750 <pbuf_copy_partial+0xdc>)
 80146ba:	f00c f963 	bl	8020984 <iprintf>
 80146be:	2300      	movs	r3, #0
 80146c0:	e03e      	b.n	8014740 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	61fb      	str	r3, [r7, #28]
 80146c6:	e034      	b.n	8014732 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80146c8:	88bb      	ldrh	r3, [r7, #4]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d00a      	beq.n	80146e4 <pbuf_copy_partial+0x70>
 80146ce:	69fb      	ldr	r3, [r7, #28]
 80146d0:	895b      	ldrh	r3, [r3, #10]
 80146d2:	88ba      	ldrh	r2, [r7, #4]
 80146d4:	429a      	cmp	r2, r3
 80146d6:	d305      	bcc.n	80146e4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80146d8:	69fb      	ldr	r3, [r7, #28]
 80146da:	895b      	ldrh	r3, [r3, #10]
 80146dc:	88ba      	ldrh	r2, [r7, #4]
 80146de:	1ad3      	subs	r3, r2, r3
 80146e0:	80bb      	strh	r3, [r7, #4]
 80146e2:	e023      	b.n	801472c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80146e4:	69fb      	ldr	r3, [r7, #28]
 80146e6:	895a      	ldrh	r2, [r3, #10]
 80146e8:	88bb      	ldrh	r3, [r7, #4]
 80146ea:	1ad3      	subs	r3, r2, r3
 80146ec:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80146ee:	8b3a      	ldrh	r2, [r7, #24]
 80146f0:	88fb      	ldrh	r3, [r7, #6]
 80146f2:	429a      	cmp	r2, r3
 80146f4:	d901      	bls.n	80146fa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80146f6:	88fb      	ldrh	r3, [r7, #6]
 80146f8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80146fa:	8b7b      	ldrh	r3, [r7, #26]
 80146fc:	68ba      	ldr	r2, [r7, #8]
 80146fe:	18d0      	adds	r0, r2, r3
 8014700:	69fb      	ldr	r3, [r7, #28]
 8014702:	685a      	ldr	r2, [r3, #4]
 8014704:	88bb      	ldrh	r3, [r7, #4]
 8014706:	4413      	add	r3, r2
 8014708:	8b3a      	ldrh	r2, [r7, #24]
 801470a:	4619      	mov	r1, r3
 801470c:	f00c fbaf 	bl	8020e6e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8014710:	8afa      	ldrh	r2, [r7, #22]
 8014712:	8b3b      	ldrh	r3, [r7, #24]
 8014714:	4413      	add	r3, r2
 8014716:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8014718:	8b7a      	ldrh	r2, [r7, #26]
 801471a:	8b3b      	ldrh	r3, [r7, #24]
 801471c:	4413      	add	r3, r2
 801471e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8014720:	88fa      	ldrh	r2, [r7, #6]
 8014722:	8b3b      	ldrh	r3, [r7, #24]
 8014724:	1ad3      	subs	r3, r2, r3
 8014726:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8014728:	2300      	movs	r3, #0
 801472a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801472c:	69fb      	ldr	r3, [r7, #28]
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	61fb      	str	r3, [r7, #28]
 8014732:	88fb      	ldrh	r3, [r7, #6]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d002      	beq.n	801473e <pbuf_copy_partial+0xca>
 8014738:	69fb      	ldr	r3, [r7, #28]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d1c4      	bne.n	80146c8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801473e:	8afb      	ldrh	r3, [r7, #22]
}
 8014740:	4618      	mov	r0, r3
 8014742:	3720      	adds	r7, #32
 8014744:	46bd      	mov	sp, r7
 8014746:	bd80      	pop	{r7, pc}
 8014748:	08024420 	.word	0x08024420
 801474c:	08024768 	.word	0x08024768
 8014750:	08024480 	.word	0x08024480
 8014754:	08024788 	.word	0x08024788

08014758 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8014758:	b580      	push	{r7, lr}
 801475a:	b084      	sub	sp, #16
 801475c:	af00      	add	r7, sp, #0
 801475e:	4603      	mov	r3, r0
 8014760:	603a      	str	r2, [r7, #0]
 8014762:	71fb      	strb	r3, [r7, #7]
 8014764:	460b      	mov	r3, r1
 8014766:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8014768:	683b      	ldr	r3, [r7, #0]
 801476a:	8919      	ldrh	r1, [r3, #8]
 801476c:	88ba      	ldrh	r2, [r7, #4]
 801476e:	79fb      	ldrb	r3, [r7, #7]
 8014770:	4618      	mov	r0, r3
 8014772:	f7ff fa95 	bl	8013ca0 <pbuf_alloc>
 8014776:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d101      	bne.n	8014782 <pbuf_clone+0x2a>
    return NULL;
 801477e:	2300      	movs	r3, #0
 8014780:	e011      	b.n	80147a6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8014782:	6839      	ldr	r1, [r7, #0]
 8014784:	68f8      	ldr	r0, [r7, #12]
 8014786:	f7ff fea3 	bl	80144d0 <pbuf_copy>
 801478a:	4603      	mov	r3, r0
 801478c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801478e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d006      	beq.n	80147a4 <pbuf_clone+0x4c>
 8014796:	4b06      	ldr	r3, [pc, #24]	@ (80147b0 <pbuf_clone+0x58>)
 8014798:	f240 5224 	movw	r2, #1316	@ 0x524
 801479c:	4905      	ldr	r1, [pc, #20]	@ (80147b4 <pbuf_clone+0x5c>)
 801479e:	4806      	ldr	r0, [pc, #24]	@ (80147b8 <pbuf_clone+0x60>)
 80147a0:	f00c f8f0 	bl	8020984 <iprintf>
  return q;
 80147a4:	68fb      	ldr	r3, [r7, #12]
}
 80147a6:	4618      	mov	r0, r3
 80147a8:	3710      	adds	r7, #16
 80147aa:	46bd      	mov	sp, r7
 80147ac:	bd80      	pop	{r7, pc}
 80147ae:	bf00      	nop
 80147b0:	08024420 	.word	0x08024420
 80147b4:	08024894 	.word	0x08024894
 80147b8:	08024480 	.word	0x08024480

080147bc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80147c0:	f00b fbaa 	bl	801ff18 <rand>
 80147c4:	4603      	mov	r3, r0
 80147c6:	b29b      	uxth	r3, r3
 80147c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80147cc:	b29b      	uxth	r3, r3
 80147ce:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80147d2:	b29a      	uxth	r2, r3
 80147d4:	4b01      	ldr	r3, [pc, #4]	@ (80147dc <tcp_init+0x20>)
 80147d6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80147d8:	bf00      	nop
 80147da:	bd80      	pop	{r7, pc}
 80147dc:	24000028 	.word	0x24000028

080147e0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b082      	sub	sp, #8
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	7d1b      	ldrb	r3, [r3, #20]
 80147ec:	2b01      	cmp	r3, #1
 80147ee:	d105      	bne.n	80147fc <tcp_free+0x1c>
 80147f0:	4b06      	ldr	r3, [pc, #24]	@ (801480c <tcp_free+0x2c>)
 80147f2:	22d4      	movs	r2, #212	@ 0xd4
 80147f4:	4906      	ldr	r1, [pc, #24]	@ (8014810 <tcp_free+0x30>)
 80147f6:	4807      	ldr	r0, [pc, #28]	@ (8014814 <tcp_free+0x34>)
 80147f8:	f00c f8c4 	bl	8020984 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80147fc:	6879      	ldr	r1, [r7, #4]
 80147fe:	2001      	movs	r0, #1
 8014800:	f7fe fe82 	bl	8013508 <memp_free>
}
 8014804:	bf00      	nop
 8014806:	3708      	adds	r7, #8
 8014808:	46bd      	mov	sp, r7
 801480a:	bd80      	pop	{r7, pc}
 801480c:	08024920 	.word	0x08024920
 8014810:	08024950 	.word	0x08024950
 8014814:	08024964 	.word	0x08024964

08014818 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b082      	sub	sp, #8
 801481c:	af00      	add	r7, sp, #0
 801481e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	7d1b      	ldrb	r3, [r3, #20]
 8014824:	2b01      	cmp	r3, #1
 8014826:	d105      	bne.n	8014834 <tcp_free_listen+0x1c>
 8014828:	4b06      	ldr	r3, [pc, #24]	@ (8014844 <tcp_free_listen+0x2c>)
 801482a:	22df      	movs	r2, #223	@ 0xdf
 801482c:	4906      	ldr	r1, [pc, #24]	@ (8014848 <tcp_free_listen+0x30>)
 801482e:	4807      	ldr	r0, [pc, #28]	@ (801484c <tcp_free_listen+0x34>)
 8014830:	f00c f8a8 	bl	8020984 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8014834:	6879      	ldr	r1, [r7, #4]
 8014836:	2002      	movs	r0, #2
 8014838:	f7fe fe66 	bl	8013508 <memp_free>
}
 801483c:	bf00      	nop
 801483e:	3708      	adds	r7, #8
 8014840:	46bd      	mov	sp, r7
 8014842:	bd80      	pop	{r7, pc}
 8014844:	08024920 	.word	0x08024920
 8014848:	0802498c 	.word	0x0802498c
 801484c:	08024964 	.word	0x08024964

08014850 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8014850:	b580      	push	{r7, lr}
 8014852:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8014854:	f001 f85e 	bl	8015914 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8014858:	4b07      	ldr	r3, [pc, #28]	@ (8014878 <tcp_tmr+0x28>)
 801485a:	781b      	ldrb	r3, [r3, #0]
 801485c:	3301      	adds	r3, #1
 801485e:	b2da      	uxtb	r2, r3
 8014860:	4b05      	ldr	r3, [pc, #20]	@ (8014878 <tcp_tmr+0x28>)
 8014862:	701a      	strb	r2, [r3, #0]
 8014864:	4b04      	ldr	r3, [pc, #16]	@ (8014878 <tcp_tmr+0x28>)
 8014866:	781b      	ldrb	r3, [r3, #0]
 8014868:	f003 0301 	and.w	r3, r3, #1
 801486c:	2b00      	cmp	r3, #0
 801486e:	d001      	beq.n	8014874 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014870:	f000 fd0e 	bl	8015290 <tcp_slowtmr>
  }
}
 8014874:	bf00      	nop
 8014876:	bd80      	pop	{r7, pc}
 8014878:	2400cb11 	.word	0x2400cb11

0801487c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b084      	sub	sp, #16
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
 8014884:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8014886:	683b      	ldr	r3, [r7, #0]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d105      	bne.n	8014898 <tcp_remove_listener+0x1c>
 801488c:	4b0d      	ldr	r3, [pc, #52]	@ (80148c4 <tcp_remove_listener+0x48>)
 801488e:	22ff      	movs	r2, #255	@ 0xff
 8014890:	490d      	ldr	r1, [pc, #52]	@ (80148c8 <tcp_remove_listener+0x4c>)
 8014892:	480e      	ldr	r0, [pc, #56]	@ (80148cc <tcp_remove_listener+0x50>)
 8014894:	f00c f876 	bl	8020984 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	60fb      	str	r3, [r7, #12]
 801489c:	e00a      	b.n	80148b4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80148a2:	683a      	ldr	r2, [r7, #0]
 80148a4:	429a      	cmp	r2, r3
 80148a6:	d102      	bne.n	80148ae <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	2200      	movs	r2, #0
 80148ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	68db      	ldr	r3, [r3, #12]
 80148b2:	60fb      	str	r3, [r7, #12]
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d1f1      	bne.n	801489e <tcp_remove_listener+0x22>
    }
  }
}
 80148ba:	bf00      	nop
 80148bc:	bf00      	nop
 80148be:	3710      	adds	r7, #16
 80148c0:	46bd      	mov	sp, r7
 80148c2:	bd80      	pop	{r7, pc}
 80148c4:	08024920 	.word	0x08024920
 80148c8:	080249a8 	.word	0x080249a8
 80148cc:	08024964 	.word	0x08024964

080148d0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b084      	sub	sp, #16
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d106      	bne.n	80148ec <tcp_listen_closed+0x1c>
 80148de:	4b14      	ldr	r3, [pc, #80]	@ (8014930 <tcp_listen_closed+0x60>)
 80148e0:	f240 1211 	movw	r2, #273	@ 0x111
 80148e4:	4913      	ldr	r1, [pc, #76]	@ (8014934 <tcp_listen_closed+0x64>)
 80148e6:	4814      	ldr	r0, [pc, #80]	@ (8014938 <tcp_listen_closed+0x68>)
 80148e8:	f00c f84c 	bl	8020984 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	7d1b      	ldrb	r3, [r3, #20]
 80148f0:	2b01      	cmp	r3, #1
 80148f2:	d006      	beq.n	8014902 <tcp_listen_closed+0x32>
 80148f4:	4b0e      	ldr	r3, [pc, #56]	@ (8014930 <tcp_listen_closed+0x60>)
 80148f6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80148fa:	4910      	ldr	r1, [pc, #64]	@ (801493c <tcp_listen_closed+0x6c>)
 80148fc:	480e      	ldr	r0, [pc, #56]	@ (8014938 <tcp_listen_closed+0x68>)
 80148fe:	f00c f841 	bl	8020984 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014902:	2301      	movs	r3, #1
 8014904:	60fb      	str	r3, [r7, #12]
 8014906:	e00b      	b.n	8014920 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8014908:	4a0d      	ldr	r2, [pc, #52]	@ (8014940 <tcp_listen_closed+0x70>)
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	6879      	ldr	r1, [r7, #4]
 8014914:	4618      	mov	r0, r3
 8014916:	f7ff ffb1 	bl	801487c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	3301      	adds	r3, #1
 801491e:	60fb      	str	r3, [r7, #12]
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	2b03      	cmp	r3, #3
 8014924:	d9f0      	bls.n	8014908 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8014926:	bf00      	nop
 8014928:	bf00      	nop
 801492a:	3710      	adds	r7, #16
 801492c:	46bd      	mov	sp, r7
 801492e:	bd80      	pop	{r7, pc}
 8014930:	08024920 	.word	0x08024920
 8014934:	080249d0 	.word	0x080249d0
 8014938:	08024964 	.word	0x08024964
 801493c:	080249dc 	.word	0x080249dc
 8014940:	08026e24 	.word	0x08026e24

08014944 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8014944:	b5b0      	push	{r4, r5, r7, lr}
 8014946:	b088      	sub	sp, #32
 8014948:	af04      	add	r7, sp, #16
 801494a:	6078      	str	r0, [r7, #4]
 801494c:	460b      	mov	r3, r1
 801494e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d106      	bne.n	8014964 <tcp_close_shutdown+0x20>
 8014956:	4b63      	ldr	r3, [pc, #396]	@ (8014ae4 <tcp_close_shutdown+0x1a0>)
 8014958:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 801495c:	4962      	ldr	r1, [pc, #392]	@ (8014ae8 <tcp_close_shutdown+0x1a4>)
 801495e:	4863      	ldr	r0, [pc, #396]	@ (8014aec <tcp_close_shutdown+0x1a8>)
 8014960:	f00c f810 	bl	8020984 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8014964:	78fb      	ldrb	r3, [r7, #3]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d066      	beq.n	8014a38 <tcp_close_shutdown+0xf4>
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	7d1b      	ldrb	r3, [r3, #20]
 801496e:	2b04      	cmp	r3, #4
 8014970:	d003      	beq.n	801497a <tcp_close_shutdown+0x36>
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	7d1b      	ldrb	r3, [r3, #20]
 8014976:	2b07      	cmp	r3, #7
 8014978:	d15e      	bne.n	8014a38 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801497e:	2b00      	cmp	r3, #0
 8014980:	d104      	bne.n	801498c <tcp_close_shutdown+0x48>
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014986:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801498a:	d055      	beq.n	8014a38 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	8b5b      	ldrh	r3, [r3, #26]
 8014990:	f003 0310 	and.w	r3, r3, #16
 8014994:	2b00      	cmp	r3, #0
 8014996:	d106      	bne.n	80149a6 <tcp_close_shutdown+0x62>
 8014998:	4b52      	ldr	r3, [pc, #328]	@ (8014ae4 <tcp_close_shutdown+0x1a0>)
 801499a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 801499e:	4954      	ldr	r1, [pc, #336]	@ (8014af0 <tcp_close_shutdown+0x1ac>)
 80149a0:	4852      	ldr	r0, [pc, #328]	@ (8014aec <tcp_close_shutdown+0x1a8>)
 80149a2:	f00b ffef 	bl	8020984 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80149ae:	687d      	ldr	r5, [r7, #4]
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	3304      	adds	r3, #4
 80149b4:	687a      	ldr	r2, [r7, #4]
 80149b6:	8ad2      	ldrh	r2, [r2, #22]
 80149b8:	6879      	ldr	r1, [r7, #4]
 80149ba:	8b09      	ldrh	r1, [r1, #24]
 80149bc:	9102      	str	r1, [sp, #8]
 80149be:	9201      	str	r2, [sp, #4]
 80149c0:	9300      	str	r3, [sp, #0]
 80149c2:	462b      	mov	r3, r5
 80149c4:	4622      	mov	r2, r4
 80149c6:	4601      	mov	r1, r0
 80149c8:	6878      	ldr	r0, [r7, #4]
 80149ca:	f005 fd6d 	bl	801a4a8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80149ce:	6878      	ldr	r0, [r7, #4]
 80149d0:	f001 fb50 	bl	8016074 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80149d4:	4b47      	ldr	r3, [pc, #284]	@ (8014af4 <tcp_close_shutdown+0x1b0>)
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	687a      	ldr	r2, [r7, #4]
 80149da:	429a      	cmp	r2, r3
 80149dc:	d105      	bne.n	80149ea <tcp_close_shutdown+0xa6>
 80149de:	4b45      	ldr	r3, [pc, #276]	@ (8014af4 <tcp_close_shutdown+0x1b0>)
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	68db      	ldr	r3, [r3, #12]
 80149e4:	4a43      	ldr	r2, [pc, #268]	@ (8014af4 <tcp_close_shutdown+0x1b0>)
 80149e6:	6013      	str	r3, [r2, #0]
 80149e8:	e013      	b.n	8014a12 <tcp_close_shutdown+0xce>
 80149ea:	4b42      	ldr	r3, [pc, #264]	@ (8014af4 <tcp_close_shutdown+0x1b0>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	60fb      	str	r3, [r7, #12]
 80149f0:	e00c      	b.n	8014a0c <tcp_close_shutdown+0xc8>
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	68db      	ldr	r3, [r3, #12]
 80149f6:	687a      	ldr	r2, [r7, #4]
 80149f8:	429a      	cmp	r2, r3
 80149fa:	d104      	bne.n	8014a06 <tcp_close_shutdown+0xc2>
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	68da      	ldr	r2, [r3, #12]
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	60da      	str	r2, [r3, #12]
 8014a04:	e005      	b.n	8014a12 <tcp_close_shutdown+0xce>
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	68db      	ldr	r3, [r3, #12]
 8014a0a:	60fb      	str	r3, [r7, #12]
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d1ef      	bne.n	80149f2 <tcp_close_shutdown+0xae>
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	2200      	movs	r2, #0
 8014a16:	60da      	str	r2, [r3, #12]
 8014a18:	4b37      	ldr	r3, [pc, #220]	@ (8014af8 <tcp_close_shutdown+0x1b4>)
 8014a1a:	2201      	movs	r2, #1
 8014a1c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8014a1e:	4b37      	ldr	r3, [pc, #220]	@ (8014afc <tcp_close_shutdown+0x1b8>)
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	687a      	ldr	r2, [r7, #4]
 8014a24:	429a      	cmp	r2, r3
 8014a26:	d102      	bne.n	8014a2e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8014a28:	f003 ffe4 	bl	80189f4 <tcp_trigger_input_pcb_close>
 8014a2c:	e002      	b.n	8014a34 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8014a2e:	6878      	ldr	r0, [r7, #4]
 8014a30:	f7ff fed6 	bl	80147e0 <tcp_free>
      }
      return ERR_OK;
 8014a34:	2300      	movs	r3, #0
 8014a36:	e050      	b.n	8014ada <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	7d1b      	ldrb	r3, [r3, #20]
 8014a3c:	2b02      	cmp	r3, #2
 8014a3e:	d03b      	beq.n	8014ab8 <tcp_close_shutdown+0x174>
 8014a40:	2b02      	cmp	r3, #2
 8014a42:	dc44      	bgt.n	8014ace <tcp_close_shutdown+0x18a>
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d002      	beq.n	8014a4e <tcp_close_shutdown+0x10a>
 8014a48:	2b01      	cmp	r3, #1
 8014a4a:	d02a      	beq.n	8014aa2 <tcp_close_shutdown+0x15e>
 8014a4c:	e03f      	b.n	8014ace <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	8adb      	ldrh	r3, [r3, #22]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d021      	beq.n	8014a9a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014a56:	4b2a      	ldr	r3, [pc, #168]	@ (8014b00 <tcp_close_shutdown+0x1bc>)
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	687a      	ldr	r2, [r7, #4]
 8014a5c:	429a      	cmp	r2, r3
 8014a5e:	d105      	bne.n	8014a6c <tcp_close_shutdown+0x128>
 8014a60:	4b27      	ldr	r3, [pc, #156]	@ (8014b00 <tcp_close_shutdown+0x1bc>)
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	68db      	ldr	r3, [r3, #12]
 8014a66:	4a26      	ldr	r2, [pc, #152]	@ (8014b00 <tcp_close_shutdown+0x1bc>)
 8014a68:	6013      	str	r3, [r2, #0]
 8014a6a:	e013      	b.n	8014a94 <tcp_close_shutdown+0x150>
 8014a6c:	4b24      	ldr	r3, [pc, #144]	@ (8014b00 <tcp_close_shutdown+0x1bc>)
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	60bb      	str	r3, [r7, #8]
 8014a72:	e00c      	b.n	8014a8e <tcp_close_shutdown+0x14a>
 8014a74:	68bb      	ldr	r3, [r7, #8]
 8014a76:	68db      	ldr	r3, [r3, #12]
 8014a78:	687a      	ldr	r2, [r7, #4]
 8014a7a:	429a      	cmp	r2, r3
 8014a7c:	d104      	bne.n	8014a88 <tcp_close_shutdown+0x144>
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	68da      	ldr	r2, [r3, #12]
 8014a82:	68bb      	ldr	r3, [r7, #8]
 8014a84:	60da      	str	r2, [r3, #12]
 8014a86:	e005      	b.n	8014a94 <tcp_close_shutdown+0x150>
 8014a88:	68bb      	ldr	r3, [r7, #8]
 8014a8a:	68db      	ldr	r3, [r3, #12]
 8014a8c:	60bb      	str	r3, [r7, #8]
 8014a8e:	68bb      	ldr	r3, [r7, #8]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d1ef      	bne.n	8014a74 <tcp_close_shutdown+0x130>
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	2200      	movs	r2, #0
 8014a98:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8014a9a:	6878      	ldr	r0, [r7, #4]
 8014a9c:	f7ff fea0 	bl	80147e0 <tcp_free>
      break;
 8014aa0:	e01a      	b.n	8014ad8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8014aa2:	6878      	ldr	r0, [r7, #4]
 8014aa4:	f7ff ff14 	bl	80148d0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014aa8:	6879      	ldr	r1, [r7, #4]
 8014aaa:	4816      	ldr	r0, [pc, #88]	@ (8014b04 <tcp_close_shutdown+0x1c0>)
 8014aac:	f001 fb32 	bl	8016114 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014ab0:	6878      	ldr	r0, [r7, #4]
 8014ab2:	f7ff feb1 	bl	8014818 <tcp_free_listen>
      break;
 8014ab6:	e00f      	b.n	8014ad8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014ab8:	6879      	ldr	r1, [r7, #4]
 8014aba:	480e      	ldr	r0, [pc, #56]	@ (8014af4 <tcp_close_shutdown+0x1b0>)
 8014abc:	f001 fb2a 	bl	8016114 <tcp_pcb_remove>
 8014ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8014af8 <tcp_close_shutdown+0x1b4>)
 8014ac2:	2201      	movs	r2, #1
 8014ac4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8014ac6:	6878      	ldr	r0, [r7, #4]
 8014ac8:	f7ff fe8a 	bl	80147e0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014acc:	e004      	b.n	8014ad8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014ace:	6878      	ldr	r0, [r7, #4]
 8014ad0:	f000 f81a 	bl	8014b08 <tcp_close_shutdown_fin>
 8014ad4:	4603      	mov	r3, r0
 8014ad6:	e000      	b.n	8014ada <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8014ad8:	2300      	movs	r3, #0
}
 8014ada:	4618      	mov	r0, r3
 8014adc:	3710      	adds	r7, #16
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8014ae2:	bf00      	nop
 8014ae4:	08024920 	.word	0x08024920
 8014ae8:	080249f4 	.word	0x080249f4
 8014aec:	08024964 	.word	0x08024964
 8014af0:	08024a14 	.word	0x08024a14
 8014af4:	2400cb08 	.word	0x2400cb08
 8014af8:	2400cb10 	.word	0x2400cb10
 8014afc:	2400cb48 	.word	0x2400cb48
 8014b00:	2400cb00 	.word	0x2400cb00
 8014b04:	2400cb04 	.word	0x2400cb04

08014b08 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b084      	sub	sp, #16
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d106      	bne.n	8014b24 <tcp_close_shutdown_fin+0x1c>
 8014b16:	4b2e      	ldr	r3, [pc, #184]	@ (8014bd0 <tcp_close_shutdown_fin+0xc8>)
 8014b18:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8014b1c:	492d      	ldr	r1, [pc, #180]	@ (8014bd4 <tcp_close_shutdown_fin+0xcc>)
 8014b1e:	482e      	ldr	r0, [pc, #184]	@ (8014bd8 <tcp_close_shutdown_fin+0xd0>)
 8014b20:	f00b ff30 	bl	8020984 <iprintf>

  switch (pcb->state) {
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	7d1b      	ldrb	r3, [r3, #20]
 8014b28:	2b07      	cmp	r3, #7
 8014b2a:	d020      	beq.n	8014b6e <tcp_close_shutdown_fin+0x66>
 8014b2c:	2b07      	cmp	r3, #7
 8014b2e:	dc2b      	bgt.n	8014b88 <tcp_close_shutdown_fin+0x80>
 8014b30:	2b03      	cmp	r3, #3
 8014b32:	d002      	beq.n	8014b3a <tcp_close_shutdown_fin+0x32>
 8014b34:	2b04      	cmp	r3, #4
 8014b36:	d00d      	beq.n	8014b54 <tcp_close_shutdown_fin+0x4c>
 8014b38:	e026      	b.n	8014b88 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8014b3a:	6878      	ldr	r0, [r7, #4]
 8014b3c:	f004 fdc2 	bl	80196c4 <tcp_send_fin>
 8014b40:	4603      	mov	r3, r0
 8014b42:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d11f      	bne.n	8014b8c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	2205      	movs	r2, #5
 8014b50:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014b52:	e01b      	b.n	8014b8c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8014b54:	6878      	ldr	r0, [r7, #4]
 8014b56:	f004 fdb5 	bl	80196c4 <tcp_send_fin>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d114      	bne.n	8014b90 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	2205      	movs	r2, #5
 8014b6a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014b6c:	e010      	b.n	8014b90 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8014b6e:	6878      	ldr	r0, [r7, #4]
 8014b70:	f004 fda8 	bl	80196c4 <tcp_send_fin>
 8014b74:	4603      	mov	r3, r0
 8014b76:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d109      	bne.n	8014b94 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	2209      	movs	r2, #9
 8014b84:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014b86:	e005      	b.n	8014b94 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8014b88:	2300      	movs	r3, #0
 8014b8a:	e01c      	b.n	8014bc6 <tcp_close_shutdown_fin+0xbe>
      break;
 8014b8c:	bf00      	nop
 8014b8e:	e002      	b.n	8014b96 <tcp_close_shutdown_fin+0x8e>
      break;
 8014b90:	bf00      	nop
 8014b92:	e000      	b.n	8014b96 <tcp_close_shutdown_fin+0x8e>
      break;
 8014b94:	bf00      	nop
  }

  if (err == ERR_OK) {
 8014b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d103      	bne.n	8014ba6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8014b9e:	6878      	ldr	r0, [r7, #4]
 8014ba0:	f004 fece 	bl	8019940 <tcp_output>
 8014ba4:	e00d      	b.n	8014bc2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8014ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bae:	d108      	bne.n	8014bc2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	8b5b      	ldrh	r3, [r3, #26]
 8014bb4:	f043 0308 	orr.w	r3, r3, #8
 8014bb8:	b29a      	uxth	r2, r3
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	e001      	b.n	8014bc6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8014bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	3710      	adds	r7, #16
 8014bca:	46bd      	mov	sp, r7
 8014bcc:	bd80      	pop	{r7, pc}
 8014bce:	bf00      	nop
 8014bd0:	08024920 	.word	0x08024920
 8014bd4:	080249d0 	.word	0x080249d0
 8014bd8:	08024964 	.word	0x08024964

08014bdc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b082      	sub	sp, #8
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d109      	bne.n	8014bfe <tcp_close+0x22>
 8014bea:	4b0f      	ldr	r3, [pc, #60]	@ (8014c28 <tcp_close+0x4c>)
 8014bec:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8014bf0:	490e      	ldr	r1, [pc, #56]	@ (8014c2c <tcp_close+0x50>)
 8014bf2:	480f      	ldr	r0, [pc, #60]	@ (8014c30 <tcp_close+0x54>)
 8014bf4:	f00b fec6 	bl	8020984 <iprintf>
 8014bf8:	f06f 030f 	mvn.w	r3, #15
 8014bfc:	e00f      	b.n	8014c1e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	7d1b      	ldrb	r3, [r3, #20]
 8014c02:	2b01      	cmp	r3, #1
 8014c04:	d006      	beq.n	8014c14 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	8b5b      	ldrh	r3, [r3, #26]
 8014c0a:	f043 0310 	orr.w	r3, r3, #16
 8014c0e:	b29a      	uxth	r2, r3
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8014c14:	2101      	movs	r1, #1
 8014c16:	6878      	ldr	r0, [r7, #4]
 8014c18:	f7ff fe94 	bl	8014944 <tcp_close_shutdown>
 8014c1c:	4603      	mov	r3, r0
}
 8014c1e:	4618      	mov	r0, r3
 8014c20:	3708      	adds	r7, #8
 8014c22:	46bd      	mov	sp, r7
 8014c24:	bd80      	pop	{r7, pc}
 8014c26:	bf00      	nop
 8014c28:	08024920 	.word	0x08024920
 8014c2c:	08024a30 	.word	0x08024a30
 8014c30:	08024964 	.word	0x08024964

08014c34 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b084      	sub	sp, #16
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	60f8      	str	r0, [r7, #12]
 8014c3c:	60b9      	str	r1, [r7, #8]
 8014c3e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d109      	bne.n	8014c5a <tcp_shutdown+0x26>
 8014c46:	4b26      	ldr	r3, [pc, #152]	@ (8014ce0 <tcp_shutdown+0xac>)
 8014c48:	f240 2207 	movw	r2, #519	@ 0x207
 8014c4c:	4925      	ldr	r1, [pc, #148]	@ (8014ce4 <tcp_shutdown+0xb0>)
 8014c4e:	4826      	ldr	r0, [pc, #152]	@ (8014ce8 <tcp_shutdown+0xb4>)
 8014c50:	f00b fe98 	bl	8020984 <iprintf>
 8014c54:	f06f 030f 	mvn.w	r3, #15
 8014c58:	e03d      	b.n	8014cd6 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	7d1b      	ldrb	r3, [r3, #20]
 8014c5e:	2b01      	cmp	r3, #1
 8014c60:	d102      	bne.n	8014c68 <tcp_shutdown+0x34>
    return ERR_CONN;
 8014c62:	f06f 030a 	mvn.w	r3, #10
 8014c66:	e036      	b.n	8014cd6 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8014c68:	68bb      	ldr	r3, [r7, #8]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d01b      	beq.n	8014ca6 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	8b5b      	ldrh	r3, [r3, #26]
 8014c72:	f043 0310 	orr.w	r3, r3, #16
 8014c76:	b29a      	uxth	r2, r3
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d005      	beq.n	8014c8e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8014c82:	2101      	movs	r1, #1
 8014c84:	68f8      	ldr	r0, [r7, #12]
 8014c86:	f7ff fe5d 	bl	8014944 <tcp_close_shutdown>
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	e023      	b.n	8014cd6 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d007      	beq.n	8014ca6 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	f7ff fae4 	bl	8014268 <pbuf_free>
      pcb->refused_data = NULL;
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d013      	beq.n	8014cd4 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	7d1b      	ldrb	r3, [r3, #20]
 8014cb0:	2b04      	cmp	r3, #4
 8014cb2:	dc02      	bgt.n	8014cba <tcp_shutdown+0x86>
 8014cb4:	2b03      	cmp	r3, #3
 8014cb6:	da02      	bge.n	8014cbe <tcp_shutdown+0x8a>
 8014cb8:	e009      	b.n	8014cce <tcp_shutdown+0x9a>
 8014cba:	2b07      	cmp	r3, #7
 8014cbc:	d107      	bne.n	8014cce <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8014cbe:	68bb      	ldr	r3, [r7, #8]
 8014cc0:	b2db      	uxtb	r3, r3
 8014cc2:	4619      	mov	r1, r3
 8014cc4:	68f8      	ldr	r0, [r7, #12]
 8014cc6:	f7ff fe3d 	bl	8014944 <tcp_close_shutdown>
 8014cca:	4603      	mov	r3, r0
 8014ccc:	e003      	b.n	8014cd6 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8014cce:	f06f 030a 	mvn.w	r3, #10
 8014cd2:	e000      	b.n	8014cd6 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8014cd4:	2300      	movs	r3, #0
}
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	3710      	adds	r7, #16
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	bd80      	pop	{r7, pc}
 8014cde:	bf00      	nop
 8014ce0:	08024920 	.word	0x08024920
 8014ce4:	08024a48 	.word	0x08024a48
 8014ce8:	08024964 	.word	0x08024964

08014cec <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b08e      	sub	sp, #56	@ 0x38
 8014cf0:	af04      	add	r7, sp, #16
 8014cf2:	6078      	str	r0, [r7, #4]
 8014cf4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d107      	bne.n	8014d0c <tcp_abandon+0x20>
 8014cfc:	4b52      	ldr	r3, [pc, #328]	@ (8014e48 <tcp_abandon+0x15c>)
 8014cfe:	f240 223d 	movw	r2, #573	@ 0x23d
 8014d02:	4952      	ldr	r1, [pc, #328]	@ (8014e4c <tcp_abandon+0x160>)
 8014d04:	4852      	ldr	r0, [pc, #328]	@ (8014e50 <tcp_abandon+0x164>)
 8014d06:	f00b fe3d 	bl	8020984 <iprintf>
 8014d0a:	e099      	b.n	8014e40 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	7d1b      	ldrb	r3, [r3, #20]
 8014d10:	2b01      	cmp	r3, #1
 8014d12:	d106      	bne.n	8014d22 <tcp_abandon+0x36>
 8014d14:	4b4c      	ldr	r3, [pc, #304]	@ (8014e48 <tcp_abandon+0x15c>)
 8014d16:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8014d1a:	494e      	ldr	r1, [pc, #312]	@ (8014e54 <tcp_abandon+0x168>)
 8014d1c:	484c      	ldr	r0, [pc, #304]	@ (8014e50 <tcp_abandon+0x164>)
 8014d1e:	f00b fe31 	bl	8020984 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	7d1b      	ldrb	r3, [r3, #20]
 8014d26:	2b0a      	cmp	r3, #10
 8014d28:	d107      	bne.n	8014d3a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8014d2a:	6879      	ldr	r1, [r7, #4]
 8014d2c:	484a      	ldr	r0, [pc, #296]	@ (8014e58 <tcp_abandon+0x16c>)
 8014d2e:	f001 f9f1 	bl	8016114 <tcp_pcb_remove>
    tcp_free(pcb);
 8014d32:	6878      	ldr	r0, [r7, #4]
 8014d34:	f7ff fd54 	bl	80147e0 <tcp_free>
 8014d38:	e082      	b.n	8014e40 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8014d3e:	2300      	movs	r3, #0
 8014d40:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014d46:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d4c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014d54:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	691b      	ldr	r3, [r3, #16]
 8014d5a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	7d1b      	ldrb	r3, [r3, #20]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d126      	bne.n	8014db2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	8adb      	ldrh	r3, [r3, #22]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d02e      	beq.n	8014dca <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8014e5c <tcp_abandon+0x170>)
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	687a      	ldr	r2, [r7, #4]
 8014d72:	429a      	cmp	r2, r3
 8014d74:	d105      	bne.n	8014d82 <tcp_abandon+0x96>
 8014d76:	4b39      	ldr	r3, [pc, #228]	@ (8014e5c <tcp_abandon+0x170>)
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	68db      	ldr	r3, [r3, #12]
 8014d7c:	4a37      	ldr	r2, [pc, #220]	@ (8014e5c <tcp_abandon+0x170>)
 8014d7e:	6013      	str	r3, [r2, #0]
 8014d80:	e013      	b.n	8014daa <tcp_abandon+0xbe>
 8014d82:	4b36      	ldr	r3, [pc, #216]	@ (8014e5c <tcp_abandon+0x170>)
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	61fb      	str	r3, [r7, #28]
 8014d88:	e00c      	b.n	8014da4 <tcp_abandon+0xb8>
 8014d8a:	69fb      	ldr	r3, [r7, #28]
 8014d8c:	68db      	ldr	r3, [r3, #12]
 8014d8e:	687a      	ldr	r2, [r7, #4]
 8014d90:	429a      	cmp	r2, r3
 8014d92:	d104      	bne.n	8014d9e <tcp_abandon+0xb2>
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	68da      	ldr	r2, [r3, #12]
 8014d98:	69fb      	ldr	r3, [r7, #28]
 8014d9a:	60da      	str	r2, [r3, #12]
 8014d9c:	e005      	b.n	8014daa <tcp_abandon+0xbe>
 8014d9e:	69fb      	ldr	r3, [r7, #28]
 8014da0:	68db      	ldr	r3, [r3, #12]
 8014da2:	61fb      	str	r3, [r7, #28]
 8014da4:	69fb      	ldr	r3, [r7, #28]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d1ef      	bne.n	8014d8a <tcp_abandon+0x9e>
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	2200      	movs	r2, #0
 8014dae:	60da      	str	r2, [r3, #12]
 8014db0:	e00b      	b.n	8014dca <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8014db2:	683b      	ldr	r3, [r7, #0]
 8014db4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	8adb      	ldrh	r3, [r3, #22]
 8014dba:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014dbc:	6879      	ldr	r1, [r7, #4]
 8014dbe:	4828      	ldr	r0, [pc, #160]	@ (8014e60 <tcp_abandon+0x174>)
 8014dc0:	f001 f9a8 	bl	8016114 <tcp_pcb_remove>
 8014dc4:	4b27      	ldr	r3, [pc, #156]	@ (8014e64 <tcp_abandon+0x178>)
 8014dc6:	2201      	movs	r2, #1
 8014dc8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d004      	beq.n	8014ddc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	f000 fe7c 	bl	8015ad4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d004      	beq.n	8014dee <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014de8:	4618      	mov	r0, r3
 8014dea:	f000 fe73 	bl	8015ad4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d004      	beq.n	8014e00 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	f000 fe6a 	bl	8015ad4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8014e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d00e      	beq.n	8014e24 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8014e06:	6879      	ldr	r1, [r7, #4]
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	3304      	adds	r3, #4
 8014e0c:	687a      	ldr	r2, [r7, #4]
 8014e0e:	8b12      	ldrh	r2, [r2, #24]
 8014e10:	9202      	str	r2, [sp, #8]
 8014e12:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014e14:	9201      	str	r2, [sp, #4]
 8014e16:	9300      	str	r3, [sp, #0]
 8014e18:	460b      	mov	r3, r1
 8014e1a:	697a      	ldr	r2, [r7, #20]
 8014e1c:	69b9      	ldr	r1, [r7, #24]
 8014e1e:	6878      	ldr	r0, [r7, #4]
 8014e20:	f005 fb42 	bl	801a4a8 <tcp_rst>
    }
    last_state = pcb->state;
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	7d1b      	ldrb	r3, [r3, #20]
 8014e28:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8014e2a:	6878      	ldr	r0, [r7, #4]
 8014e2c:	f7ff fcd8 	bl	80147e0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8014e30:	693b      	ldr	r3, [r7, #16]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d004      	beq.n	8014e40 <tcp_abandon+0x154>
 8014e36:	693b      	ldr	r3, [r7, #16]
 8014e38:	f06f 010c 	mvn.w	r1, #12
 8014e3c:	68f8      	ldr	r0, [r7, #12]
 8014e3e:	4798      	blx	r3
  }
}
 8014e40:	3728      	adds	r7, #40	@ 0x28
 8014e42:	46bd      	mov	sp, r7
 8014e44:	bd80      	pop	{r7, pc}
 8014e46:	bf00      	nop
 8014e48:	08024920 	.word	0x08024920
 8014e4c:	08024a64 	.word	0x08024a64
 8014e50:	08024964 	.word	0x08024964
 8014e54:	08024a80 	.word	0x08024a80
 8014e58:	2400cb0c 	.word	0x2400cb0c
 8014e5c:	2400cb00 	.word	0x2400cb00
 8014e60:	2400cb08 	.word	0x2400cb08
 8014e64:	2400cb10 	.word	0x2400cb10

08014e68 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b082      	sub	sp, #8
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8014e70:	2101      	movs	r1, #1
 8014e72:	6878      	ldr	r0, [r7, #4]
 8014e74:	f7ff ff3a 	bl	8014cec <tcp_abandon>
}
 8014e78:	bf00      	nop
 8014e7a:	3708      	adds	r7, #8
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	bd80      	pop	{r7, pc}

08014e80 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8014e80:	b580      	push	{r7, lr}
 8014e82:	b084      	sub	sp, #16
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d106      	bne.n	8014e9c <tcp_update_rcv_ann_wnd+0x1c>
 8014e8e:	4b25      	ldr	r3, [pc, #148]	@ (8014f24 <tcp_update_rcv_ann_wnd+0xa4>)
 8014e90:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8014e94:	4924      	ldr	r1, [pc, #144]	@ (8014f28 <tcp_update_rcv_ann_wnd+0xa8>)
 8014e96:	4825      	ldr	r0, [pc, #148]	@ (8014f2c <tcp_update_rcv_ann_wnd+0xac>)
 8014e98:	f00b fd74 	bl	8020984 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ea0:	687a      	ldr	r2, [r7, #4]
 8014ea2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8014ea4:	4413      	add	r3, r2
 8014ea6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014eac:	687a      	ldr	r2, [r7, #4]
 8014eae:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8014eb0:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8014eb4:	bf28      	it	cs
 8014eb6:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8014eba:	b292      	uxth	r2, r2
 8014ebc:	4413      	add	r3, r2
 8014ebe:	68fa      	ldr	r2, [r7, #12]
 8014ec0:	1ad3      	subs	r3, r2, r3
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	db08      	blt.n	8014ed8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ed2:	68fa      	ldr	r2, [r7, #12]
 8014ed4:	1ad3      	subs	r3, r2, r3
 8014ed6:	e020      	b.n	8014f1a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ee0:	1ad3      	subs	r3, r2, r3
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	dd03      	ble.n	8014eee <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	2200      	movs	r2, #0
 8014eea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014eec:	e014      	b.n	8014f18 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ef6:	1ad3      	subs	r3, r2, r3
 8014ef8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8014efa:	68bb      	ldr	r3, [r7, #8]
 8014efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014f00:	d306      	bcc.n	8014f10 <tcp_update_rcv_ann_wnd+0x90>
 8014f02:	4b08      	ldr	r3, [pc, #32]	@ (8014f24 <tcp_update_rcv_ann_wnd+0xa4>)
 8014f04:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8014f08:	4909      	ldr	r1, [pc, #36]	@ (8014f30 <tcp_update_rcv_ann_wnd+0xb0>)
 8014f0a:	4808      	ldr	r0, [pc, #32]	@ (8014f2c <tcp_update_rcv_ann_wnd+0xac>)
 8014f0c:	f00b fd3a 	bl	8020984 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8014f10:	68bb      	ldr	r3, [r7, #8]
 8014f12:	b29a      	uxth	r2, r3
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8014f18:	2300      	movs	r3, #0
  }
}
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	3710      	adds	r7, #16
 8014f1e:	46bd      	mov	sp, r7
 8014f20:	bd80      	pop	{r7, pc}
 8014f22:	bf00      	nop
 8014f24:	08024920 	.word	0x08024920
 8014f28:	08024b7c 	.word	0x08024b7c
 8014f2c:	08024964 	.word	0x08024964
 8014f30:	08024ba0 	.word	0x08024ba0

08014f34 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b084      	sub	sp, #16
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	6078      	str	r0, [r7, #4]
 8014f3c:	460b      	mov	r3, r1
 8014f3e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d107      	bne.n	8014f56 <tcp_recved+0x22>
 8014f46:	4b1f      	ldr	r3, [pc, #124]	@ (8014fc4 <tcp_recved+0x90>)
 8014f48:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8014f4c:	491e      	ldr	r1, [pc, #120]	@ (8014fc8 <tcp_recved+0x94>)
 8014f4e:	481f      	ldr	r0, [pc, #124]	@ (8014fcc <tcp_recved+0x98>)
 8014f50:	f00b fd18 	bl	8020984 <iprintf>
 8014f54:	e032      	b.n	8014fbc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	7d1b      	ldrb	r3, [r3, #20]
 8014f5a:	2b01      	cmp	r3, #1
 8014f5c:	d106      	bne.n	8014f6c <tcp_recved+0x38>
 8014f5e:	4b19      	ldr	r3, [pc, #100]	@ (8014fc4 <tcp_recved+0x90>)
 8014f60:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8014f64:	491a      	ldr	r1, [pc, #104]	@ (8014fd0 <tcp_recved+0x9c>)
 8014f66:	4819      	ldr	r0, [pc, #100]	@ (8014fcc <tcp_recved+0x98>)
 8014f68:	f00b fd0c 	bl	8020984 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014f70:	887b      	ldrh	r3, [r7, #2]
 8014f72:	4413      	add	r3, r2
 8014f74:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8014f76:	89fb      	ldrh	r3, [r7, #14]
 8014f78:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014f7c:	d804      	bhi.n	8014f88 <tcp_recved+0x54>
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f82:	89fa      	ldrh	r2, [r7, #14]
 8014f84:	429a      	cmp	r2, r3
 8014f86:	d204      	bcs.n	8014f92 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8014f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8014f90:	e002      	b.n	8014f98 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	89fa      	ldrh	r2, [r7, #14]
 8014f96:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8014f98:	6878      	ldr	r0, [r7, #4]
 8014f9a:	f7ff ff71 	bl	8014e80 <tcp_update_rcv_ann_wnd>
 8014f9e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8014fa0:	68bb      	ldr	r3, [r7, #8]
 8014fa2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8014fa6:	d309      	bcc.n	8014fbc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	8b5b      	ldrh	r3, [r3, #26]
 8014fac:	f043 0302 	orr.w	r3, r3, #2
 8014fb0:	b29a      	uxth	r2, r3
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014fb6:	6878      	ldr	r0, [r7, #4]
 8014fb8:	f004 fcc2 	bl	8019940 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8014fbc:	3710      	adds	r7, #16
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	bd80      	pop	{r7, pc}
 8014fc2:	bf00      	nop
 8014fc4:	08024920 	.word	0x08024920
 8014fc8:	08024bbc 	.word	0x08024bbc
 8014fcc:	08024964 	.word	0x08024964
 8014fd0:	08024bd4 	.word	0x08024bd4

08014fd4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8014fd4:	b480      	push	{r7}
 8014fd6:	b083      	sub	sp, #12
 8014fd8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8014fda:	2300      	movs	r3, #0
 8014fdc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8014fde:	4b1e      	ldr	r3, [pc, #120]	@ (8015058 <tcp_new_port+0x84>)
 8014fe0:	881b      	ldrh	r3, [r3, #0]
 8014fe2:	3301      	adds	r3, #1
 8014fe4:	b29a      	uxth	r2, r3
 8014fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8015058 <tcp_new_port+0x84>)
 8014fe8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8014fea:	4b1b      	ldr	r3, [pc, #108]	@ (8015058 <tcp_new_port+0x84>)
 8014fec:	881b      	ldrh	r3, [r3, #0]
 8014fee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014ff2:	4293      	cmp	r3, r2
 8014ff4:	d103      	bne.n	8014ffe <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8014ff6:	4b18      	ldr	r3, [pc, #96]	@ (8015058 <tcp_new_port+0x84>)
 8014ff8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8014ffc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8014ffe:	2300      	movs	r3, #0
 8015000:	71fb      	strb	r3, [r7, #7]
 8015002:	e01e      	b.n	8015042 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015004:	79fb      	ldrb	r3, [r7, #7]
 8015006:	4a15      	ldr	r2, [pc, #84]	@ (801505c <tcp_new_port+0x88>)
 8015008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	603b      	str	r3, [r7, #0]
 8015010:	e011      	b.n	8015036 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8015012:	683b      	ldr	r3, [r7, #0]
 8015014:	8ada      	ldrh	r2, [r3, #22]
 8015016:	4b10      	ldr	r3, [pc, #64]	@ (8015058 <tcp_new_port+0x84>)
 8015018:	881b      	ldrh	r3, [r3, #0]
 801501a:	429a      	cmp	r2, r3
 801501c:	d108      	bne.n	8015030 <tcp_new_port+0x5c>
        n++;
 801501e:	88bb      	ldrh	r3, [r7, #4]
 8015020:	3301      	adds	r3, #1
 8015022:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8015024:	88bb      	ldrh	r3, [r7, #4]
 8015026:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801502a:	d3d8      	bcc.n	8014fde <tcp_new_port+0xa>
          return 0;
 801502c:	2300      	movs	r3, #0
 801502e:	e00d      	b.n	801504c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015030:	683b      	ldr	r3, [r7, #0]
 8015032:	68db      	ldr	r3, [r3, #12]
 8015034:	603b      	str	r3, [r7, #0]
 8015036:	683b      	ldr	r3, [r7, #0]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d1ea      	bne.n	8015012 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801503c:	79fb      	ldrb	r3, [r7, #7]
 801503e:	3301      	adds	r3, #1
 8015040:	71fb      	strb	r3, [r7, #7]
 8015042:	79fb      	ldrb	r3, [r7, #7]
 8015044:	2b03      	cmp	r3, #3
 8015046:	d9dd      	bls.n	8015004 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8015048:	4b03      	ldr	r3, [pc, #12]	@ (8015058 <tcp_new_port+0x84>)
 801504a:	881b      	ldrh	r3, [r3, #0]
}
 801504c:	4618      	mov	r0, r3
 801504e:	370c      	adds	r7, #12
 8015050:	46bd      	mov	sp, r7
 8015052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015056:	4770      	bx	lr
 8015058:	24000028 	.word	0x24000028
 801505c:	08026e24 	.word	0x08026e24

08015060 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8015060:	b580      	push	{r7, lr}
 8015062:	b08a      	sub	sp, #40	@ 0x28
 8015064:	af00      	add	r7, sp, #0
 8015066:	60f8      	str	r0, [r7, #12]
 8015068:	60b9      	str	r1, [r7, #8]
 801506a:	603b      	str	r3, [r7, #0]
 801506c:	4613      	mov	r3, r2
 801506e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8015070:	2300      	movs	r3, #0
 8015072:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d109      	bne.n	801508e <tcp_connect+0x2e>
 801507a:	4b7d      	ldr	r3, [pc, #500]	@ (8015270 <tcp_connect+0x210>)
 801507c:	f240 4235 	movw	r2, #1077	@ 0x435
 8015080:	497c      	ldr	r1, [pc, #496]	@ (8015274 <tcp_connect+0x214>)
 8015082:	487d      	ldr	r0, [pc, #500]	@ (8015278 <tcp_connect+0x218>)
 8015084:	f00b fc7e 	bl	8020984 <iprintf>
 8015088:	f06f 030f 	mvn.w	r3, #15
 801508c:	e0ec      	b.n	8015268 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801508e:	68bb      	ldr	r3, [r7, #8]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d109      	bne.n	80150a8 <tcp_connect+0x48>
 8015094:	4b76      	ldr	r3, [pc, #472]	@ (8015270 <tcp_connect+0x210>)
 8015096:	f240 4236 	movw	r2, #1078	@ 0x436
 801509a:	4978      	ldr	r1, [pc, #480]	@ (801527c <tcp_connect+0x21c>)
 801509c:	4876      	ldr	r0, [pc, #472]	@ (8015278 <tcp_connect+0x218>)
 801509e:	f00b fc71 	bl	8020984 <iprintf>
 80150a2:	f06f 030f 	mvn.w	r3, #15
 80150a6:	e0df      	b.n	8015268 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	7d1b      	ldrb	r3, [r3, #20]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d009      	beq.n	80150c4 <tcp_connect+0x64>
 80150b0:	4b6f      	ldr	r3, [pc, #444]	@ (8015270 <tcp_connect+0x210>)
 80150b2:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 80150b6:	4972      	ldr	r1, [pc, #456]	@ (8015280 <tcp_connect+0x220>)
 80150b8:	486f      	ldr	r0, [pc, #444]	@ (8015278 <tcp_connect+0x218>)
 80150ba:	f00b fc63 	bl	8020984 <iprintf>
 80150be:	f06f 0309 	mvn.w	r3, #9
 80150c2:	e0d1      	b.n	8015268 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80150c4:	68bb      	ldr	r3, [r7, #8]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d002      	beq.n	80150d0 <tcp_connect+0x70>
 80150ca:	68bb      	ldr	r3, [r7, #8]
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	e000      	b.n	80150d2 <tcp_connect+0x72>
 80150d0:	2300      	movs	r3, #0
 80150d2:	68fa      	ldr	r2, [r7, #12]
 80150d4:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	88fa      	ldrh	r2, [r7, #6]
 80150da:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	7a1b      	ldrb	r3, [r3, #8]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d006      	beq.n	80150f2 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	7a1b      	ldrb	r3, [r3, #8]
 80150e8:	4618      	mov	r0, r3
 80150ea:	f7fe fd2f 	bl	8013b4c <netif_get_by_index>
 80150ee:	6278      	str	r0, [r7, #36]	@ 0x24
 80150f0:	e005      	b.n	80150fe <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	3304      	adds	r3, #4
 80150f6:	4618      	mov	r0, r3
 80150f8:	f009 fa24 	bl	801e544 <ip4_route>
 80150fc:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 80150fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015100:	2b00      	cmp	r3, #0
 8015102:	d102      	bne.n	801510a <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8015104:	f06f 0303 	mvn.w	r3, #3
 8015108:	e0ae      	b.n	8015268 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d003      	beq.n	8015118 <tcp_connect+0xb8>
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d111      	bne.n	801513c <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8015118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801511a:	2b00      	cmp	r3, #0
 801511c:	d002      	beq.n	8015124 <tcp_connect+0xc4>
 801511e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015120:	3304      	adds	r3, #4
 8015122:	e000      	b.n	8015126 <tcp_connect+0xc6>
 8015124:	2300      	movs	r3, #0
 8015126:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8015128:	69fb      	ldr	r3, [r7, #28]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d102      	bne.n	8015134 <tcp_connect+0xd4>
      return ERR_RTE;
 801512e:	f06f 0303 	mvn.w	r3, #3
 8015132:	e099      	b.n	8015268 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015134:	69fb      	ldr	r3, [r7, #28]
 8015136:	681a      	ldr	r2, [r3, #0]
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	8adb      	ldrh	r3, [r3, #22]
 8015140:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	8adb      	ldrh	r3, [r3, #22]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d10c      	bne.n	8015164 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 801514a:	f7ff ff43 	bl	8014fd4 <tcp_new_port>
 801514e:	4603      	mov	r3, r0
 8015150:	461a      	mov	r2, r3
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	8adb      	ldrh	r3, [r3, #22]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d102      	bne.n	8015164 <tcp_connect+0x104>
      return ERR_BUF;
 801515e:	f06f 0301 	mvn.w	r3, #1
 8015162:	e081      	b.n	8015268 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8015164:	68f8      	ldr	r0, [r7, #12]
 8015166:	f001 f869 	bl	801623c <tcp_next_iss>
 801516a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	2200      	movs	r2, #0
 8015170:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	697a      	ldr	r2, [r7, #20]
 8015176:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 8015178:	697b      	ldr	r3, [r7, #20]
 801517a:	1e5a      	subs	r2, r3, #1
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 8015180:	697b      	ldr	r3, [r7, #20]
 8015182:	1e5a      	subs	r2, r3, #1
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 8015188:	697b      	ldr	r3, [r7, #20]
 801518a:	1e5a      	subs	r2, r3, #1
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8015196:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80151ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80151b8:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	3304      	adds	r3, #4
 80151c2:	461a      	mov	r2, r3
 80151c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80151c6:	f001 f85f 	bl	8016288 <tcp_eff_send_mss_netif>
 80151ca:	4603      	mov	r3, r0
 80151cc:	461a      	mov	r2, r3
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	2201      	movs	r2, #1
 80151d6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	683a      	ldr	r2, [r7, #0]
 80151de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80151e2:	2102      	movs	r1, #2
 80151e4:	68f8      	ldr	r0, [r7, #12]
 80151e6:	f004 fabd 	bl	8019764 <tcp_enqueue_flags>
 80151ea:	4603      	mov	r3, r0
 80151ec:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 80151ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d136      	bne.n	8015264 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	2202      	movs	r2, #2
 80151fa:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 80151fc:	8b7b      	ldrh	r3, [r7, #26]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d021      	beq.n	8015246 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8015202:	4b20      	ldr	r3, [pc, #128]	@ (8015284 <tcp_connect+0x224>)
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	68fa      	ldr	r2, [r7, #12]
 8015208:	429a      	cmp	r2, r3
 801520a:	d105      	bne.n	8015218 <tcp_connect+0x1b8>
 801520c:	4b1d      	ldr	r3, [pc, #116]	@ (8015284 <tcp_connect+0x224>)
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	68db      	ldr	r3, [r3, #12]
 8015212:	4a1c      	ldr	r2, [pc, #112]	@ (8015284 <tcp_connect+0x224>)
 8015214:	6013      	str	r3, [r2, #0]
 8015216:	e013      	b.n	8015240 <tcp_connect+0x1e0>
 8015218:	4b1a      	ldr	r3, [pc, #104]	@ (8015284 <tcp_connect+0x224>)
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	623b      	str	r3, [r7, #32]
 801521e:	e00c      	b.n	801523a <tcp_connect+0x1da>
 8015220:	6a3b      	ldr	r3, [r7, #32]
 8015222:	68db      	ldr	r3, [r3, #12]
 8015224:	68fa      	ldr	r2, [r7, #12]
 8015226:	429a      	cmp	r2, r3
 8015228:	d104      	bne.n	8015234 <tcp_connect+0x1d4>
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	68da      	ldr	r2, [r3, #12]
 801522e:	6a3b      	ldr	r3, [r7, #32]
 8015230:	60da      	str	r2, [r3, #12]
 8015232:	e005      	b.n	8015240 <tcp_connect+0x1e0>
 8015234:	6a3b      	ldr	r3, [r7, #32]
 8015236:	68db      	ldr	r3, [r3, #12]
 8015238:	623b      	str	r3, [r7, #32]
 801523a:	6a3b      	ldr	r3, [r7, #32]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d1ef      	bne.n	8015220 <tcp_connect+0x1c0>
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	2200      	movs	r2, #0
 8015244:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8015246:	4b10      	ldr	r3, [pc, #64]	@ (8015288 <tcp_connect+0x228>)
 8015248:	681a      	ldr	r2, [r3, #0]
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	60da      	str	r2, [r3, #12]
 801524e:	4a0e      	ldr	r2, [pc, #56]	@ (8015288 <tcp_connect+0x228>)
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	6013      	str	r3, [r2, #0]
 8015254:	f005 faea 	bl	801a82c <tcp_timer_needed>
 8015258:	4b0c      	ldr	r3, [pc, #48]	@ (801528c <tcp_connect+0x22c>)
 801525a:	2201      	movs	r2, #1
 801525c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 801525e:	68f8      	ldr	r0, [r7, #12]
 8015260:	f004 fb6e 	bl	8019940 <tcp_output>
  }
  return ret;
 8015264:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8015268:	4618      	mov	r0, r3
 801526a:	3728      	adds	r7, #40	@ 0x28
 801526c:	46bd      	mov	sp, r7
 801526e:	bd80      	pop	{r7, pc}
 8015270:	08024920 	.word	0x08024920
 8015274:	08024bfc 	.word	0x08024bfc
 8015278:	08024964 	.word	0x08024964
 801527c:	08024c18 	.word	0x08024c18
 8015280:	08024c34 	.word	0x08024c34
 8015284:	2400cb00 	.word	0x2400cb00
 8015288:	2400cb08 	.word	0x2400cb08
 801528c:	2400cb10 	.word	0x2400cb10

08015290 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8015290:	b5b0      	push	{r4, r5, r7, lr}
 8015292:	b090      	sub	sp, #64	@ 0x40
 8015294:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8015296:	2300      	movs	r3, #0
 8015298:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 801529c:	4b95      	ldr	r3, [pc, #596]	@ (80154f4 <tcp_slowtmr+0x264>)
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	3301      	adds	r3, #1
 80152a2:	4a94      	ldr	r2, [pc, #592]	@ (80154f4 <tcp_slowtmr+0x264>)
 80152a4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80152a6:	4b94      	ldr	r3, [pc, #592]	@ (80154f8 <tcp_slowtmr+0x268>)
 80152a8:	781b      	ldrb	r3, [r3, #0]
 80152aa:	3301      	adds	r3, #1
 80152ac:	b2da      	uxtb	r2, r3
 80152ae:	4b92      	ldr	r3, [pc, #584]	@ (80154f8 <tcp_slowtmr+0x268>)
 80152b0:	701a      	strb	r2, [r3, #0]
 80152b2:	e000      	b.n	80152b6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80152b4:	bf00      	nop
  prev = NULL;
 80152b6:	2300      	movs	r3, #0
 80152b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80152ba:	4b90      	ldr	r3, [pc, #576]	@ (80154fc <tcp_slowtmr+0x26c>)
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80152c0:	e29d      	b.n	80157fe <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80152c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152c4:	7d1b      	ldrb	r3, [r3, #20]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d106      	bne.n	80152d8 <tcp_slowtmr+0x48>
 80152ca:	4b8d      	ldr	r3, [pc, #564]	@ (8015500 <tcp_slowtmr+0x270>)
 80152cc:	f240 42be 	movw	r2, #1214	@ 0x4be
 80152d0:	498c      	ldr	r1, [pc, #560]	@ (8015504 <tcp_slowtmr+0x274>)
 80152d2:	488d      	ldr	r0, [pc, #564]	@ (8015508 <tcp_slowtmr+0x278>)
 80152d4:	f00b fb56 	bl	8020984 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80152d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152da:	7d1b      	ldrb	r3, [r3, #20]
 80152dc:	2b01      	cmp	r3, #1
 80152de:	d106      	bne.n	80152ee <tcp_slowtmr+0x5e>
 80152e0:	4b87      	ldr	r3, [pc, #540]	@ (8015500 <tcp_slowtmr+0x270>)
 80152e2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80152e6:	4989      	ldr	r1, [pc, #548]	@ (801550c <tcp_slowtmr+0x27c>)
 80152e8:	4887      	ldr	r0, [pc, #540]	@ (8015508 <tcp_slowtmr+0x278>)
 80152ea:	f00b fb4b 	bl	8020984 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80152ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152f0:	7d1b      	ldrb	r3, [r3, #20]
 80152f2:	2b0a      	cmp	r3, #10
 80152f4:	d106      	bne.n	8015304 <tcp_slowtmr+0x74>
 80152f6:	4b82      	ldr	r3, [pc, #520]	@ (8015500 <tcp_slowtmr+0x270>)
 80152f8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80152fc:	4984      	ldr	r1, [pc, #528]	@ (8015510 <tcp_slowtmr+0x280>)
 80152fe:	4882      	ldr	r0, [pc, #520]	@ (8015508 <tcp_slowtmr+0x278>)
 8015300:	f00b fb40 	bl	8020984 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015306:	7f9a      	ldrb	r2, [r3, #30]
 8015308:	4b7b      	ldr	r3, [pc, #492]	@ (80154f8 <tcp_slowtmr+0x268>)
 801530a:	781b      	ldrb	r3, [r3, #0]
 801530c:	429a      	cmp	r2, r3
 801530e:	d105      	bne.n	801531c <tcp_slowtmr+0x8c>
      prev = pcb;
 8015310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015312:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015316:	68db      	ldr	r3, [r3, #12]
 8015318:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801531a:	e270      	b.n	80157fe <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801531c:	4b76      	ldr	r3, [pc, #472]	@ (80154f8 <tcp_slowtmr+0x268>)
 801531e:	781a      	ldrb	r2, [r3, #0]
 8015320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015322:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8015324:	2300      	movs	r3, #0
 8015326:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801532a:	2300      	movs	r3, #0
 801532c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015332:	7d1b      	ldrb	r3, [r3, #20]
 8015334:	2b02      	cmp	r3, #2
 8015336:	d10a      	bne.n	801534e <tcp_slowtmr+0xbe>
 8015338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801533a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801533e:	2b05      	cmp	r3, #5
 8015340:	d905      	bls.n	801534e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8015342:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015346:	3301      	adds	r3, #1
 8015348:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801534c:	e11e      	b.n	801558c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801534e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015350:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015354:	2b0b      	cmp	r3, #11
 8015356:	d905      	bls.n	8015364 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8015358:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801535c:	3301      	adds	r3, #1
 801535e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015362:	e113      	b.n	801558c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8015364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015366:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801536a:	2b00      	cmp	r3, #0
 801536c:	d075      	beq.n	801545a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801536e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015372:	2b00      	cmp	r3, #0
 8015374:	d006      	beq.n	8015384 <tcp_slowtmr+0xf4>
 8015376:	4b62      	ldr	r3, [pc, #392]	@ (8015500 <tcp_slowtmr+0x270>)
 8015378:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801537c:	4965      	ldr	r1, [pc, #404]	@ (8015514 <tcp_slowtmr+0x284>)
 801537e:	4862      	ldr	r0, [pc, #392]	@ (8015508 <tcp_slowtmr+0x278>)
 8015380:	f00b fb00 	bl	8020984 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8015384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015386:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015388:	2b00      	cmp	r3, #0
 801538a:	d106      	bne.n	801539a <tcp_slowtmr+0x10a>
 801538c:	4b5c      	ldr	r3, [pc, #368]	@ (8015500 <tcp_slowtmr+0x270>)
 801538e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8015392:	4961      	ldr	r1, [pc, #388]	@ (8015518 <tcp_slowtmr+0x288>)
 8015394:	485c      	ldr	r0, [pc, #368]	@ (8015508 <tcp_slowtmr+0x278>)
 8015396:	f00b faf5 	bl	8020984 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801539a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801539c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80153a0:	2b0b      	cmp	r3, #11
 80153a2:	d905      	bls.n	80153b0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80153a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80153a8:	3301      	adds	r3, #1
 80153aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80153ae:	e0ed      	b.n	801558c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80153b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153b2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80153b6:	3b01      	subs	r3, #1
 80153b8:	4a58      	ldr	r2, [pc, #352]	@ (801551c <tcp_slowtmr+0x28c>)
 80153ba:	5cd3      	ldrb	r3, [r2, r3]
 80153bc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80153be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153c0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80153c4:	7c7a      	ldrb	r2, [r7, #17]
 80153c6:	429a      	cmp	r2, r3
 80153c8:	d907      	bls.n	80153da <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80153ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153cc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80153d0:	3301      	adds	r3, #1
 80153d2:	b2da      	uxtb	r2, r3
 80153d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153d6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80153da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153dc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80153e0:	7c7a      	ldrb	r2, [r7, #17]
 80153e2:	429a      	cmp	r2, r3
 80153e4:	f200 80d2 	bhi.w	801558c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80153e8:	2301      	movs	r3, #1
 80153ea:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80153ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d108      	bne.n	8015408 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80153f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80153f8:	f005 f94a 	bl	801a690 <tcp_zero_window_probe>
 80153fc:	4603      	mov	r3, r0
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d014      	beq.n	801542c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8015402:	2300      	movs	r3, #0
 8015404:	623b      	str	r3, [r7, #32]
 8015406:	e011      	b.n	801542c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8015408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801540a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801540e:	4619      	mov	r1, r3
 8015410:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015412:	f004 f80f 	bl	8019434 <tcp_split_unsent_seg>
 8015416:	4603      	mov	r3, r0
 8015418:	2b00      	cmp	r3, #0
 801541a:	d107      	bne.n	801542c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801541c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801541e:	f004 fa8f 	bl	8019940 <tcp_output>
 8015422:	4603      	mov	r3, r0
 8015424:	2b00      	cmp	r3, #0
 8015426:	d101      	bne.n	801542c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8015428:	2300      	movs	r3, #0
 801542a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801542c:	6a3b      	ldr	r3, [r7, #32]
 801542e:	2b00      	cmp	r3, #0
 8015430:	f000 80ac 	beq.w	801558c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8015434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015436:	2200      	movs	r2, #0
 8015438:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801543c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801543e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015442:	2b06      	cmp	r3, #6
 8015444:	f200 80a2 	bhi.w	801558c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8015448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801544a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801544e:	3301      	adds	r3, #1
 8015450:	b2da      	uxtb	r2, r3
 8015452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015454:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8015458:	e098      	b.n	801558c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801545a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801545c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015460:	2b00      	cmp	r3, #0
 8015462:	db0f      	blt.n	8015484 <tcp_slowtmr+0x1f4>
 8015464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015466:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801546a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801546e:	4293      	cmp	r3, r2
 8015470:	d008      	beq.n	8015484 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8015472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015474:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015478:	b29b      	uxth	r3, r3
 801547a:	3301      	adds	r3, #1
 801547c:	b29b      	uxth	r3, r3
 801547e:	b21a      	sxth	r2, r3
 8015480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015482:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8015484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015486:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801548a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801548c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8015490:	429a      	cmp	r2, r3
 8015492:	db7b      	blt.n	801558c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8015494:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015496:	f004 fd47 	bl	8019f28 <tcp_rexmit_rto_prepare>
 801549a:	4603      	mov	r3, r0
 801549c:	2b00      	cmp	r3, #0
 801549e:	d007      	beq.n	80154b0 <tcp_slowtmr+0x220>
 80154a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d171      	bne.n	801558c <tcp_slowtmr+0x2fc>
 80154a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d06d      	beq.n	801558c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80154b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154b2:	7d1b      	ldrb	r3, [r3, #20]
 80154b4:	2b02      	cmp	r3, #2
 80154b6:	d03a      	beq.n	801552e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80154b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80154be:	2b0c      	cmp	r3, #12
 80154c0:	bf28      	it	cs
 80154c2:	230c      	movcs	r3, #12
 80154c4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80154c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80154cc:	10db      	asrs	r3, r3, #3
 80154ce:	b21b      	sxth	r3, r3
 80154d0:	461a      	mov	r2, r3
 80154d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154d4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80154d8:	4413      	add	r3, r2
 80154da:	7efa      	ldrb	r2, [r7, #27]
 80154dc:	4910      	ldr	r1, [pc, #64]	@ (8015520 <tcp_slowtmr+0x290>)
 80154de:	5c8a      	ldrb	r2, [r1, r2]
 80154e0:	4093      	lsls	r3, r2
 80154e2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80154e4:	697b      	ldr	r3, [r7, #20]
 80154e6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80154ea:	4293      	cmp	r3, r2
 80154ec:	dc1a      	bgt.n	8015524 <tcp_slowtmr+0x294>
 80154ee:	697b      	ldr	r3, [r7, #20]
 80154f0:	b21a      	sxth	r2, r3
 80154f2:	e019      	b.n	8015528 <tcp_slowtmr+0x298>
 80154f4:	2400cafc 	.word	0x2400cafc
 80154f8:	2400cb12 	.word	0x2400cb12
 80154fc:	2400cb08 	.word	0x2400cb08
 8015500:	08024920 	.word	0x08024920
 8015504:	08024c64 	.word	0x08024c64
 8015508:	08024964 	.word	0x08024964
 801550c:	08024c90 	.word	0x08024c90
 8015510:	08024cbc 	.word	0x08024cbc
 8015514:	08024cec 	.word	0x08024cec
 8015518:	08024d20 	.word	0x08024d20
 801551c:	08026e1c 	.word	0x08026e1c
 8015520:	08026e0c 	.word	0x08026e0c
 8015524:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801552a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801552e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015530:	2200      	movs	r2, #0
 8015532:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015536:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801553a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801553c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015540:	4293      	cmp	r3, r2
 8015542:	bf28      	it	cs
 8015544:	4613      	movcs	r3, r2
 8015546:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015548:	8a7b      	ldrh	r3, [r7, #18]
 801554a:	085b      	lsrs	r3, r3, #1
 801554c:	b29a      	uxth	r2, r3
 801554e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015550:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015556:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801555a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801555c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801555e:	005b      	lsls	r3, r3, #1
 8015560:	b29b      	uxth	r3, r3
 8015562:	429a      	cmp	r2, r3
 8015564:	d206      	bcs.n	8015574 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8015566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015568:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801556a:	005b      	lsls	r3, r3, #1
 801556c:	b29a      	uxth	r2, r3
 801556e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015570:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8015574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015576:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8015578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801557a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801557e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015580:	2200      	movs	r2, #0
 8015582:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8015586:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015588:	f004 fd3e 	bl	801a008 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 801558c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801558e:	7d1b      	ldrb	r3, [r3, #20]
 8015590:	2b06      	cmp	r3, #6
 8015592:	d111      	bne.n	80155b8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8015594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015596:	8b5b      	ldrh	r3, [r3, #26]
 8015598:	f003 0310 	and.w	r3, r3, #16
 801559c:	2b00      	cmp	r3, #0
 801559e:	d00b      	beq.n	80155b8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80155a0:	4b9c      	ldr	r3, [pc, #624]	@ (8015814 <tcp_slowtmr+0x584>)
 80155a2:	681a      	ldr	r2, [r3, #0]
 80155a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155a6:	6a1b      	ldr	r3, [r3, #32]
 80155a8:	1ad3      	subs	r3, r2, r3
 80155aa:	2b28      	cmp	r3, #40	@ 0x28
 80155ac:	d904      	bls.n	80155b8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80155ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80155b2:	3301      	adds	r3, #1
 80155b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80155b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155ba:	7a5b      	ldrb	r3, [r3, #9]
 80155bc:	f003 0308 	and.w	r3, r3, #8
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d04a      	beq.n	801565a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80155c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155c6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80155c8:	2b04      	cmp	r3, #4
 80155ca:	d003      	beq.n	80155d4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80155cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155ce:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80155d0:	2b07      	cmp	r3, #7
 80155d2:	d142      	bne.n	801565a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80155d4:	4b8f      	ldr	r3, [pc, #572]	@ (8015814 <tcp_slowtmr+0x584>)
 80155d6:	681a      	ldr	r2, [r3, #0]
 80155d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155da:	6a1b      	ldr	r3, [r3, #32]
 80155dc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80155de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155e0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80155e4:	4b8c      	ldr	r3, [pc, #560]	@ (8015818 <tcp_slowtmr+0x588>)
 80155e6:	440b      	add	r3, r1
 80155e8:	498c      	ldr	r1, [pc, #560]	@ (801581c <tcp_slowtmr+0x58c>)
 80155ea:	fba1 1303 	umull	r1, r3, r1, r3
 80155ee:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80155f0:	429a      	cmp	r2, r3
 80155f2:	d90a      	bls.n	801560a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 80155f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80155f8:	3301      	adds	r3, #1
 80155fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80155fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015602:	3301      	adds	r3, #1
 8015604:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015608:	e027      	b.n	801565a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801560a:	4b82      	ldr	r3, [pc, #520]	@ (8015814 <tcp_slowtmr+0x584>)
 801560c:	681a      	ldr	r2, [r3, #0]
 801560e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015610:	6a1b      	ldr	r3, [r3, #32]
 8015612:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8015614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015616:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801561a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801561c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8015620:	4618      	mov	r0, r3
 8015622:	4b7f      	ldr	r3, [pc, #508]	@ (8015820 <tcp_slowtmr+0x590>)
 8015624:	fb00 f303 	mul.w	r3, r0, r3
 8015628:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801562a:	497c      	ldr	r1, [pc, #496]	@ (801581c <tcp_slowtmr+0x58c>)
 801562c:	fba1 1303 	umull	r1, r3, r1, r3
 8015630:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015632:	429a      	cmp	r2, r3
 8015634:	d911      	bls.n	801565a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8015636:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015638:	f004 ffea 	bl	801a610 <tcp_keepalive>
 801563c:	4603      	mov	r3, r0
 801563e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8015642:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8015646:	2b00      	cmp	r3, #0
 8015648:	d107      	bne.n	801565a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801564a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801564c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8015650:	3301      	adds	r3, #1
 8015652:	b2da      	uxtb	r2, r3
 8015654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015656:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801565a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801565c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801565e:	2b00      	cmp	r3, #0
 8015660:	d011      	beq.n	8015686 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8015662:	4b6c      	ldr	r3, [pc, #432]	@ (8015814 <tcp_slowtmr+0x584>)
 8015664:	681a      	ldr	r2, [r3, #0]
 8015666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015668:	6a1b      	ldr	r3, [r3, #32]
 801566a:	1ad2      	subs	r2, r2, r3
 801566c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801566e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8015672:	4619      	mov	r1, r3
 8015674:	460b      	mov	r3, r1
 8015676:	005b      	lsls	r3, r3, #1
 8015678:	440b      	add	r3, r1
 801567a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801567c:	429a      	cmp	r2, r3
 801567e:	d302      	bcc.n	8015686 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8015680:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015682:	f000 feab 	bl	80163dc <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8015686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015688:	7d1b      	ldrb	r3, [r3, #20]
 801568a:	2b03      	cmp	r3, #3
 801568c:	d10b      	bne.n	80156a6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801568e:	4b61      	ldr	r3, [pc, #388]	@ (8015814 <tcp_slowtmr+0x584>)
 8015690:	681a      	ldr	r2, [r3, #0]
 8015692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015694:	6a1b      	ldr	r3, [r3, #32]
 8015696:	1ad3      	subs	r3, r2, r3
 8015698:	2b28      	cmp	r3, #40	@ 0x28
 801569a:	d904      	bls.n	80156a6 <tcp_slowtmr+0x416>
        ++pcb_remove;
 801569c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80156a0:	3301      	adds	r3, #1
 80156a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80156a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156a8:	7d1b      	ldrb	r3, [r3, #20]
 80156aa:	2b09      	cmp	r3, #9
 80156ac:	d10b      	bne.n	80156c6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80156ae:	4b59      	ldr	r3, [pc, #356]	@ (8015814 <tcp_slowtmr+0x584>)
 80156b0:	681a      	ldr	r2, [r3, #0]
 80156b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156b4:	6a1b      	ldr	r3, [r3, #32]
 80156b6:	1ad3      	subs	r3, r2, r3
 80156b8:	2bf0      	cmp	r3, #240	@ 0xf0
 80156ba:	d904      	bls.n	80156c6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80156bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80156c0:	3301      	adds	r3, #1
 80156c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80156c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d060      	beq.n	8015790 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80156ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80156d4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80156d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80156d8:	f000 fccc 	bl	8016074 <tcp_pcb_purge>
      if (prev != NULL) {
 80156dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d010      	beq.n	8015704 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80156e2:	4b50      	ldr	r3, [pc, #320]	@ (8015824 <tcp_slowtmr+0x594>)
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80156e8:	429a      	cmp	r2, r3
 80156ea:	d106      	bne.n	80156fa <tcp_slowtmr+0x46a>
 80156ec:	4b4e      	ldr	r3, [pc, #312]	@ (8015828 <tcp_slowtmr+0x598>)
 80156ee:	f240 526d 	movw	r2, #1389	@ 0x56d
 80156f2:	494e      	ldr	r1, [pc, #312]	@ (801582c <tcp_slowtmr+0x59c>)
 80156f4:	484e      	ldr	r0, [pc, #312]	@ (8015830 <tcp_slowtmr+0x5a0>)
 80156f6:	f00b f945 	bl	8020984 <iprintf>
        prev->next = pcb->next;
 80156fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156fc:	68da      	ldr	r2, [r3, #12]
 80156fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015700:	60da      	str	r2, [r3, #12]
 8015702:	e00f      	b.n	8015724 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8015704:	4b47      	ldr	r3, [pc, #284]	@ (8015824 <tcp_slowtmr+0x594>)
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801570a:	429a      	cmp	r2, r3
 801570c:	d006      	beq.n	801571c <tcp_slowtmr+0x48c>
 801570e:	4b46      	ldr	r3, [pc, #280]	@ (8015828 <tcp_slowtmr+0x598>)
 8015710:	f240 5271 	movw	r2, #1393	@ 0x571
 8015714:	4947      	ldr	r1, [pc, #284]	@ (8015834 <tcp_slowtmr+0x5a4>)
 8015716:	4846      	ldr	r0, [pc, #280]	@ (8015830 <tcp_slowtmr+0x5a0>)
 8015718:	f00b f934 	bl	8020984 <iprintf>
        tcp_active_pcbs = pcb->next;
 801571c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801571e:	68db      	ldr	r3, [r3, #12]
 8015720:	4a40      	ldr	r2, [pc, #256]	@ (8015824 <tcp_slowtmr+0x594>)
 8015722:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8015724:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015728:	2b00      	cmp	r3, #0
 801572a:	d013      	beq.n	8015754 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801572c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801572e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8015730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015732:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015734:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8015736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015738:	3304      	adds	r3, #4
 801573a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801573c:	8ad2      	ldrh	r2, [r2, #22]
 801573e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015740:	8b09      	ldrh	r1, [r1, #24]
 8015742:	9102      	str	r1, [sp, #8]
 8015744:	9201      	str	r2, [sp, #4]
 8015746:	9300      	str	r3, [sp, #0]
 8015748:	462b      	mov	r3, r5
 801574a:	4622      	mov	r2, r4
 801574c:	4601      	mov	r1, r0
 801574e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015750:	f004 feaa 	bl	801a4a8 <tcp_rst>
      err_arg = pcb->callback_arg;
 8015754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015756:	691b      	ldr	r3, [r3, #16]
 8015758:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801575a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801575c:	7d1b      	ldrb	r3, [r3, #20]
 801575e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8015760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015762:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8015764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015766:	68db      	ldr	r3, [r3, #12]
 8015768:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801576a:	6838      	ldr	r0, [r7, #0]
 801576c:	f7ff f838 	bl	80147e0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8015770:	4b31      	ldr	r3, [pc, #196]	@ (8015838 <tcp_slowtmr+0x5a8>)
 8015772:	2200      	movs	r2, #0
 8015774:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d004      	beq.n	8015786 <tcp_slowtmr+0x4f6>
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	f06f 010c 	mvn.w	r1, #12
 8015782:	68b8      	ldr	r0, [r7, #8]
 8015784:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8015786:	4b2c      	ldr	r3, [pc, #176]	@ (8015838 <tcp_slowtmr+0x5a8>)
 8015788:	781b      	ldrb	r3, [r3, #0]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d037      	beq.n	80157fe <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801578e:	e592      	b.n	80152b6 <tcp_slowtmr+0x26>
      prev = pcb;
 8015790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015792:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015796:	68db      	ldr	r3, [r3, #12]
 8015798:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801579a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801579c:	7f1b      	ldrb	r3, [r3, #28]
 801579e:	3301      	adds	r3, #1
 80157a0:	b2da      	uxtb	r2, r3
 80157a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157a4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80157a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157a8:	7f1a      	ldrb	r2, [r3, #28]
 80157aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157ac:	7f5b      	ldrb	r3, [r3, #29]
 80157ae:	429a      	cmp	r2, r3
 80157b0:	d325      	bcc.n	80157fe <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80157b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157b4:	2200      	movs	r2, #0
 80157b6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80157b8:	4b1f      	ldr	r3, [pc, #124]	@ (8015838 <tcp_slowtmr+0x5a8>)
 80157ba:	2200      	movs	r2, #0
 80157bc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80157be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d00b      	beq.n	80157e0 <tcp_slowtmr+0x550>
 80157c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80157ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80157d0:	6912      	ldr	r2, [r2, #16]
 80157d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80157d4:	4610      	mov	r0, r2
 80157d6:	4798      	blx	r3
 80157d8:	4603      	mov	r3, r0
 80157da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80157de:	e002      	b.n	80157e6 <tcp_slowtmr+0x556>
 80157e0:	2300      	movs	r3, #0
 80157e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80157e6:	4b14      	ldr	r3, [pc, #80]	@ (8015838 <tcp_slowtmr+0x5a8>)
 80157e8:	781b      	ldrb	r3, [r3, #0]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	f47f ad62 	bne.w	80152b4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80157f0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d102      	bne.n	80157fe <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80157f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80157fa:	f004 f8a1 	bl	8019940 <tcp_output>
  while (pcb != NULL) {
 80157fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015800:	2b00      	cmp	r3, #0
 8015802:	f47f ad5e 	bne.w	80152c2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8015806:	2300      	movs	r3, #0
 8015808:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801580a:	4b0c      	ldr	r3, [pc, #48]	@ (801583c <tcp_slowtmr+0x5ac>)
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015810:	e069      	b.n	80158e6 <tcp_slowtmr+0x656>
 8015812:	bf00      	nop
 8015814:	2400cafc 	.word	0x2400cafc
 8015818:	000a4cb8 	.word	0x000a4cb8
 801581c:	10624dd3 	.word	0x10624dd3
 8015820:	000124f8 	.word	0x000124f8
 8015824:	2400cb08 	.word	0x2400cb08
 8015828:	08024920 	.word	0x08024920
 801582c:	08024d58 	.word	0x08024d58
 8015830:	08024964 	.word	0x08024964
 8015834:	08024d84 	.word	0x08024d84
 8015838:	2400cb10 	.word	0x2400cb10
 801583c:	2400cb0c 	.word	0x2400cb0c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015842:	7d1b      	ldrb	r3, [r3, #20]
 8015844:	2b0a      	cmp	r3, #10
 8015846:	d006      	beq.n	8015856 <tcp_slowtmr+0x5c6>
 8015848:	4b2b      	ldr	r3, [pc, #172]	@ (80158f8 <tcp_slowtmr+0x668>)
 801584a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801584e:	492b      	ldr	r1, [pc, #172]	@ (80158fc <tcp_slowtmr+0x66c>)
 8015850:	482b      	ldr	r0, [pc, #172]	@ (8015900 <tcp_slowtmr+0x670>)
 8015852:	f00b f897 	bl	8020984 <iprintf>
    pcb_remove = 0;
 8015856:	2300      	movs	r3, #0
 8015858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801585c:	4b29      	ldr	r3, [pc, #164]	@ (8015904 <tcp_slowtmr+0x674>)
 801585e:	681a      	ldr	r2, [r3, #0]
 8015860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015862:	6a1b      	ldr	r3, [r3, #32]
 8015864:	1ad3      	subs	r3, r2, r3
 8015866:	2bf0      	cmp	r3, #240	@ 0xf0
 8015868:	d904      	bls.n	8015874 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801586a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801586e:	3301      	adds	r3, #1
 8015870:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015874:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015878:	2b00      	cmp	r3, #0
 801587a:	d02f      	beq.n	80158dc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801587c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801587e:	f000 fbf9 	bl	8016074 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8015882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015884:	2b00      	cmp	r3, #0
 8015886:	d010      	beq.n	80158aa <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015888:	4b1f      	ldr	r3, [pc, #124]	@ (8015908 <tcp_slowtmr+0x678>)
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801588e:	429a      	cmp	r2, r3
 8015890:	d106      	bne.n	80158a0 <tcp_slowtmr+0x610>
 8015892:	4b19      	ldr	r3, [pc, #100]	@ (80158f8 <tcp_slowtmr+0x668>)
 8015894:	f240 52af 	movw	r2, #1455	@ 0x5af
 8015898:	491c      	ldr	r1, [pc, #112]	@ (801590c <tcp_slowtmr+0x67c>)
 801589a:	4819      	ldr	r0, [pc, #100]	@ (8015900 <tcp_slowtmr+0x670>)
 801589c:	f00b f872 	bl	8020984 <iprintf>
        prev->next = pcb->next;
 80158a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158a2:	68da      	ldr	r2, [r3, #12]
 80158a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158a6:	60da      	str	r2, [r3, #12]
 80158a8:	e00f      	b.n	80158ca <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80158aa:	4b17      	ldr	r3, [pc, #92]	@ (8015908 <tcp_slowtmr+0x678>)
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80158b0:	429a      	cmp	r2, r3
 80158b2:	d006      	beq.n	80158c2 <tcp_slowtmr+0x632>
 80158b4:	4b10      	ldr	r3, [pc, #64]	@ (80158f8 <tcp_slowtmr+0x668>)
 80158b6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80158ba:	4915      	ldr	r1, [pc, #84]	@ (8015910 <tcp_slowtmr+0x680>)
 80158bc:	4810      	ldr	r0, [pc, #64]	@ (8015900 <tcp_slowtmr+0x670>)
 80158be:	f00b f861 	bl	8020984 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80158c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158c4:	68db      	ldr	r3, [r3, #12]
 80158c6:	4a10      	ldr	r2, [pc, #64]	@ (8015908 <tcp_slowtmr+0x678>)
 80158c8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80158ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158cc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80158ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158d0:	68db      	ldr	r3, [r3, #12]
 80158d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80158d4:	69f8      	ldr	r0, [r7, #28]
 80158d6:	f7fe ff83 	bl	80147e0 <tcp_free>
 80158da:	e004      	b.n	80158e6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80158dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158de:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80158e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158e2:	68db      	ldr	r3, [r3, #12]
 80158e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80158e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d1a9      	bne.n	8015840 <tcp_slowtmr+0x5b0>
    }
  }
}
 80158ec:	bf00      	nop
 80158ee:	bf00      	nop
 80158f0:	3730      	adds	r7, #48	@ 0x30
 80158f2:	46bd      	mov	sp, r7
 80158f4:	bdb0      	pop	{r4, r5, r7, pc}
 80158f6:	bf00      	nop
 80158f8:	08024920 	.word	0x08024920
 80158fc:	08024db0 	.word	0x08024db0
 8015900:	08024964 	.word	0x08024964
 8015904:	2400cafc 	.word	0x2400cafc
 8015908:	2400cb0c 	.word	0x2400cb0c
 801590c:	08024de0 	.word	0x08024de0
 8015910:	08024e08 	.word	0x08024e08

08015914 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b082      	sub	sp, #8
 8015918:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801591a:	4b2d      	ldr	r3, [pc, #180]	@ (80159d0 <tcp_fasttmr+0xbc>)
 801591c:	781b      	ldrb	r3, [r3, #0]
 801591e:	3301      	adds	r3, #1
 8015920:	b2da      	uxtb	r2, r3
 8015922:	4b2b      	ldr	r3, [pc, #172]	@ (80159d0 <tcp_fasttmr+0xbc>)
 8015924:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8015926:	4b2b      	ldr	r3, [pc, #172]	@ (80159d4 <tcp_fasttmr+0xc0>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801592c:	e048      	b.n	80159c0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	7f9a      	ldrb	r2, [r3, #30]
 8015932:	4b27      	ldr	r3, [pc, #156]	@ (80159d0 <tcp_fasttmr+0xbc>)
 8015934:	781b      	ldrb	r3, [r3, #0]
 8015936:	429a      	cmp	r2, r3
 8015938:	d03f      	beq.n	80159ba <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801593a:	4b25      	ldr	r3, [pc, #148]	@ (80159d0 <tcp_fasttmr+0xbc>)
 801593c:	781a      	ldrb	r2, [r3, #0]
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	8b5b      	ldrh	r3, [r3, #26]
 8015946:	f003 0301 	and.w	r3, r3, #1
 801594a:	2b00      	cmp	r3, #0
 801594c:	d010      	beq.n	8015970 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	8b5b      	ldrh	r3, [r3, #26]
 8015952:	f043 0302 	orr.w	r3, r3, #2
 8015956:	b29a      	uxth	r2, r3
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801595c:	6878      	ldr	r0, [r7, #4]
 801595e:	f003 ffef 	bl	8019940 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	8b5b      	ldrh	r3, [r3, #26]
 8015966:	f023 0303 	bic.w	r3, r3, #3
 801596a:	b29a      	uxth	r2, r3
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	8b5b      	ldrh	r3, [r3, #26]
 8015974:	f003 0308 	and.w	r3, r3, #8
 8015978:	2b00      	cmp	r3, #0
 801597a:	d009      	beq.n	8015990 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	8b5b      	ldrh	r3, [r3, #26]
 8015980:	f023 0308 	bic.w	r3, r3, #8
 8015984:	b29a      	uxth	r2, r3
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801598a:	6878      	ldr	r0, [r7, #4]
 801598c:	f7ff f8bc 	bl	8014b08 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	68db      	ldr	r3, [r3, #12]
 8015994:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801599a:	2b00      	cmp	r3, #0
 801599c:	d00a      	beq.n	80159b4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801599e:	4b0e      	ldr	r3, [pc, #56]	@ (80159d8 <tcp_fasttmr+0xc4>)
 80159a0:	2200      	movs	r2, #0
 80159a2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80159a4:	6878      	ldr	r0, [r7, #4]
 80159a6:	f000 f819 	bl	80159dc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80159aa:	4b0b      	ldr	r3, [pc, #44]	@ (80159d8 <tcp_fasttmr+0xc4>)
 80159ac:	781b      	ldrb	r3, [r3, #0]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d000      	beq.n	80159b4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80159b2:	e7b8      	b.n	8015926 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80159b4:	683b      	ldr	r3, [r7, #0]
 80159b6:	607b      	str	r3, [r7, #4]
 80159b8:	e002      	b.n	80159c0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	68db      	ldr	r3, [r3, #12]
 80159be:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d1b3      	bne.n	801592e <tcp_fasttmr+0x1a>
    }
  }
}
 80159c6:	bf00      	nop
 80159c8:	bf00      	nop
 80159ca:	3708      	adds	r7, #8
 80159cc:	46bd      	mov	sp, r7
 80159ce:	bd80      	pop	{r7, pc}
 80159d0:	2400cb12 	.word	0x2400cb12
 80159d4:	2400cb08 	.word	0x2400cb08
 80159d8:	2400cb10 	.word	0x2400cb10

080159dc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80159dc:	b590      	push	{r4, r7, lr}
 80159de:	b085      	sub	sp, #20
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d109      	bne.n	80159fe <tcp_process_refused_data+0x22>
 80159ea:	4b37      	ldr	r3, [pc, #220]	@ (8015ac8 <tcp_process_refused_data+0xec>)
 80159ec:	f240 6209 	movw	r2, #1545	@ 0x609
 80159f0:	4936      	ldr	r1, [pc, #216]	@ (8015acc <tcp_process_refused_data+0xf0>)
 80159f2:	4837      	ldr	r0, [pc, #220]	@ (8015ad0 <tcp_process_refused_data+0xf4>)
 80159f4:	f00a ffc6 	bl	8020984 <iprintf>
 80159f8:	f06f 030f 	mvn.w	r3, #15
 80159fc:	e060      	b.n	8015ac0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015a02:	7b5b      	ldrb	r3, [r3, #13]
 8015a04:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015a0a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	2200      	movs	r2, #0
 8015a10:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d00b      	beq.n	8015a34 <tcp_process_refused_data+0x58>
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	6918      	ldr	r0, [r3, #16]
 8015a26:	2300      	movs	r3, #0
 8015a28:	68ba      	ldr	r2, [r7, #8]
 8015a2a:	6879      	ldr	r1, [r7, #4]
 8015a2c:	47a0      	blx	r4
 8015a2e:	4603      	mov	r3, r0
 8015a30:	73fb      	strb	r3, [r7, #15]
 8015a32:	e007      	b.n	8015a44 <tcp_process_refused_data+0x68>
 8015a34:	2300      	movs	r3, #0
 8015a36:	68ba      	ldr	r2, [r7, #8]
 8015a38:	6879      	ldr	r1, [r7, #4]
 8015a3a:	2000      	movs	r0, #0
 8015a3c:	f000 f8a4 	bl	8015b88 <tcp_recv_null>
 8015a40:	4603      	mov	r3, r0
 8015a42:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8015a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d12a      	bne.n	8015aa2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8015a4c:	7bbb      	ldrb	r3, [r7, #14]
 8015a4e:	f003 0320 	and.w	r3, r3, #32
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d033      	beq.n	8015abe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015a5a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015a5e:	d005      	beq.n	8015a6c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015a64:	3301      	adds	r3, #1
 8015a66:	b29a      	uxth	r2, r3
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d00b      	beq.n	8015a8e <tcp_process_refused_data+0xb2>
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	6918      	ldr	r0, [r3, #16]
 8015a80:	2300      	movs	r3, #0
 8015a82:	2200      	movs	r2, #0
 8015a84:	6879      	ldr	r1, [r7, #4]
 8015a86:	47a0      	blx	r4
 8015a88:	4603      	mov	r3, r0
 8015a8a:	73fb      	strb	r3, [r7, #15]
 8015a8c:	e001      	b.n	8015a92 <tcp_process_refused_data+0xb6>
 8015a8e:	2300      	movs	r3, #0
 8015a90:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8015a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a96:	f113 0f0d 	cmn.w	r3, #13
 8015a9a:	d110      	bne.n	8015abe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8015a9c:	f06f 030c 	mvn.w	r3, #12
 8015aa0:	e00e      	b.n	8015ac0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8015aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015aa6:	f113 0f0d 	cmn.w	r3, #13
 8015aaa:	d102      	bne.n	8015ab2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8015aac:	f06f 030c 	mvn.w	r3, #12
 8015ab0:	e006      	b.n	8015ac0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	68ba      	ldr	r2, [r7, #8]
 8015ab6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8015ab8:	f06f 0304 	mvn.w	r3, #4
 8015abc:	e000      	b.n	8015ac0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8015abe:	2300      	movs	r3, #0
}
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	3714      	adds	r7, #20
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	bd90      	pop	{r4, r7, pc}
 8015ac8:	08024920 	.word	0x08024920
 8015acc:	08024e30 	.word	0x08024e30
 8015ad0:	08024964 	.word	0x08024964

08015ad4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b084      	sub	sp, #16
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8015adc:	e007      	b.n	8015aee <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015ae4:	6878      	ldr	r0, [r7, #4]
 8015ae6:	f000 f80a 	bl	8015afe <tcp_seg_free>
    seg = next;
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d1f4      	bne.n	8015ade <tcp_segs_free+0xa>
  }
}
 8015af4:	bf00      	nop
 8015af6:	bf00      	nop
 8015af8:	3710      	adds	r7, #16
 8015afa:	46bd      	mov	sp, r7
 8015afc:	bd80      	pop	{r7, pc}

08015afe <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8015afe:	b580      	push	{r7, lr}
 8015b00:	b082      	sub	sp, #8
 8015b02:	af00      	add	r7, sp, #0
 8015b04:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d00c      	beq.n	8015b26 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	685b      	ldr	r3, [r3, #4]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d004      	beq.n	8015b1e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	685b      	ldr	r3, [r3, #4]
 8015b18:	4618      	mov	r0, r3
 8015b1a:	f7fe fba5 	bl	8014268 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8015b1e:	6879      	ldr	r1, [r7, #4]
 8015b20:	2003      	movs	r0, #3
 8015b22:	f7fd fcf1 	bl	8013508 <memp_free>
  }
}
 8015b26:	bf00      	nop
 8015b28:	3708      	adds	r7, #8
 8015b2a:	46bd      	mov	sp, r7
 8015b2c:	bd80      	pop	{r7, pc}
	...

08015b30 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b084      	sub	sp, #16
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d106      	bne.n	8015b4c <tcp_seg_copy+0x1c>
 8015b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8015b7c <tcp_seg_copy+0x4c>)
 8015b40:	f240 6282 	movw	r2, #1666	@ 0x682
 8015b44:	490e      	ldr	r1, [pc, #56]	@ (8015b80 <tcp_seg_copy+0x50>)
 8015b46:	480f      	ldr	r0, [pc, #60]	@ (8015b84 <tcp_seg_copy+0x54>)
 8015b48:	f00a ff1c 	bl	8020984 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015b4c:	2003      	movs	r0, #3
 8015b4e:	f7fd fc65 	bl	801341c <memp_malloc>
 8015b52:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d101      	bne.n	8015b5e <tcp_seg_copy+0x2e>
    return NULL;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	e00a      	b.n	8015b74 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015b5e:	2210      	movs	r2, #16
 8015b60:	6879      	ldr	r1, [r7, #4]
 8015b62:	68f8      	ldr	r0, [r7, #12]
 8015b64:	f00b f983 	bl	8020e6e <memcpy>
  pbuf_ref(cseg->p);
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	685b      	ldr	r3, [r3, #4]
 8015b6c:	4618      	mov	r0, r3
 8015b6e:	f7fe fc21 	bl	80143b4 <pbuf_ref>
  return cseg;
 8015b72:	68fb      	ldr	r3, [r7, #12]
}
 8015b74:	4618      	mov	r0, r3
 8015b76:	3710      	adds	r7, #16
 8015b78:	46bd      	mov	sp, r7
 8015b7a:	bd80      	pop	{r7, pc}
 8015b7c:	08024920 	.word	0x08024920
 8015b80:	08024e74 	.word	0x08024e74
 8015b84:	08024964 	.word	0x08024964

08015b88 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b084      	sub	sp, #16
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	60f8      	str	r0, [r7, #12]
 8015b90:	60b9      	str	r1, [r7, #8]
 8015b92:	607a      	str	r2, [r7, #4]
 8015b94:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8015b96:	68bb      	ldr	r3, [r7, #8]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d109      	bne.n	8015bb0 <tcp_recv_null+0x28>
 8015b9c:	4b12      	ldr	r3, [pc, #72]	@ (8015be8 <tcp_recv_null+0x60>)
 8015b9e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8015ba2:	4912      	ldr	r1, [pc, #72]	@ (8015bec <tcp_recv_null+0x64>)
 8015ba4:	4812      	ldr	r0, [pc, #72]	@ (8015bf0 <tcp_recv_null+0x68>)
 8015ba6:	f00a feed 	bl	8020984 <iprintf>
 8015baa:	f06f 030f 	mvn.w	r3, #15
 8015bae:	e016      	b.n	8015bde <tcp_recv_null+0x56>

  if (p != NULL) {
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d009      	beq.n	8015bca <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	891b      	ldrh	r3, [r3, #8]
 8015bba:	4619      	mov	r1, r3
 8015bbc:	68b8      	ldr	r0, [r7, #8]
 8015bbe:	f7ff f9b9 	bl	8014f34 <tcp_recved>
    pbuf_free(p);
 8015bc2:	6878      	ldr	r0, [r7, #4]
 8015bc4:	f7fe fb50 	bl	8014268 <pbuf_free>
 8015bc8:	e008      	b.n	8015bdc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8015bca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d104      	bne.n	8015bdc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8015bd2:	68b8      	ldr	r0, [r7, #8]
 8015bd4:	f7ff f802 	bl	8014bdc <tcp_close>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	e000      	b.n	8015bde <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8015bdc:	2300      	movs	r3, #0
}
 8015bde:	4618      	mov	r0, r3
 8015be0:	3710      	adds	r7, #16
 8015be2:	46bd      	mov	sp, r7
 8015be4:	bd80      	pop	{r7, pc}
 8015be6:	bf00      	nop
 8015be8:	08024920 	.word	0x08024920
 8015bec:	08024e90 	.word	0x08024e90
 8015bf0:	08024964 	.word	0x08024964

08015bf4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b086      	sub	sp, #24
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	4603      	mov	r3, r0
 8015bfc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8015bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	db01      	blt.n	8015c0a <tcp_kill_prio+0x16>
 8015c06:	79fb      	ldrb	r3, [r7, #7]
 8015c08:	e000      	b.n	8015c0c <tcp_kill_prio+0x18>
 8015c0a:	237f      	movs	r3, #127	@ 0x7f
 8015c0c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8015c0e:	7afb      	ldrb	r3, [r7, #11]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d034      	beq.n	8015c7e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8015c14:	7afb      	ldrb	r3, [r7, #11]
 8015c16:	3b01      	subs	r3, #1
 8015c18:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015c1e:	2300      	movs	r3, #0
 8015c20:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c22:	4b19      	ldr	r3, [pc, #100]	@ (8015c88 <tcp_kill_prio+0x94>)
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	617b      	str	r3, [r7, #20]
 8015c28:	e01f      	b.n	8015c6a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8015c2a:	697b      	ldr	r3, [r7, #20]
 8015c2c:	7d5b      	ldrb	r3, [r3, #21]
 8015c2e:	7afa      	ldrb	r2, [r7, #11]
 8015c30:	429a      	cmp	r2, r3
 8015c32:	d80c      	bhi.n	8015c4e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015c34:	697b      	ldr	r3, [r7, #20]
 8015c36:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8015c38:	7afa      	ldrb	r2, [r7, #11]
 8015c3a:	429a      	cmp	r2, r3
 8015c3c:	d112      	bne.n	8015c64 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015c3e:	4b13      	ldr	r3, [pc, #76]	@ (8015c8c <tcp_kill_prio+0x98>)
 8015c40:	681a      	ldr	r2, [r3, #0]
 8015c42:	697b      	ldr	r3, [r7, #20]
 8015c44:	6a1b      	ldr	r3, [r3, #32]
 8015c46:	1ad3      	subs	r3, r2, r3
 8015c48:	68fa      	ldr	r2, [r7, #12]
 8015c4a:	429a      	cmp	r2, r3
 8015c4c:	d80a      	bhi.n	8015c64 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8015c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8015c8c <tcp_kill_prio+0x98>)
 8015c50:	681a      	ldr	r2, [r3, #0]
 8015c52:	697b      	ldr	r3, [r7, #20]
 8015c54:	6a1b      	ldr	r3, [r3, #32]
 8015c56:	1ad3      	subs	r3, r2, r3
 8015c58:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8015c5a:	697b      	ldr	r3, [r7, #20]
 8015c5c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8015c5e:	697b      	ldr	r3, [r7, #20]
 8015c60:	7d5b      	ldrb	r3, [r3, #21]
 8015c62:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c64:	697b      	ldr	r3, [r7, #20]
 8015c66:	68db      	ldr	r3, [r3, #12]
 8015c68:	617b      	str	r3, [r7, #20]
 8015c6a:	697b      	ldr	r3, [r7, #20]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d1dc      	bne.n	8015c2a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8015c70:	693b      	ldr	r3, [r7, #16]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d004      	beq.n	8015c80 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015c76:	6938      	ldr	r0, [r7, #16]
 8015c78:	f7ff f8f6 	bl	8014e68 <tcp_abort>
 8015c7c:	e000      	b.n	8015c80 <tcp_kill_prio+0x8c>
    return;
 8015c7e:	bf00      	nop
  }
}
 8015c80:	3718      	adds	r7, #24
 8015c82:	46bd      	mov	sp, r7
 8015c84:	bd80      	pop	{r7, pc}
 8015c86:	bf00      	nop
 8015c88:	2400cb08 	.word	0x2400cb08
 8015c8c:	2400cafc 	.word	0x2400cafc

08015c90 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8015c90:	b580      	push	{r7, lr}
 8015c92:	b086      	sub	sp, #24
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	4603      	mov	r3, r0
 8015c98:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8015c9a:	79fb      	ldrb	r3, [r7, #7]
 8015c9c:	2b08      	cmp	r3, #8
 8015c9e:	d009      	beq.n	8015cb4 <tcp_kill_state+0x24>
 8015ca0:	79fb      	ldrb	r3, [r7, #7]
 8015ca2:	2b09      	cmp	r3, #9
 8015ca4:	d006      	beq.n	8015cb4 <tcp_kill_state+0x24>
 8015ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8015d10 <tcp_kill_state+0x80>)
 8015ca8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8015cac:	4919      	ldr	r1, [pc, #100]	@ (8015d14 <tcp_kill_state+0x84>)
 8015cae:	481a      	ldr	r0, [pc, #104]	@ (8015d18 <tcp_kill_state+0x88>)
 8015cb0:	f00a fe68 	bl	8020984 <iprintf>

  inactivity = 0;
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015cb8:	2300      	movs	r3, #0
 8015cba:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015cbc:	4b17      	ldr	r3, [pc, #92]	@ (8015d1c <tcp_kill_state+0x8c>)
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	617b      	str	r3, [r7, #20]
 8015cc2:	e017      	b.n	8015cf4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8015cc4:	697b      	ldr	r3, [r7, #20]
 8015cc6:	7d1b      	ldrb	r3, [r3, #20]
 8015cc8:	79fa      	ldrb	r2, [r7, #7]
 8015cca:	429a      	cmp	r2, r3
 8015ccc:	d10f      	bne.n	8015cee <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015cce:	4b14      	ldr	r3, [pc, #80]	@ (8015d20 <tcp_kill_state+0x90>)
 8015cd0:	681a      	ldr	r2, [r3, #0]
 8015cd2:	697b      	ldr	r3, [r7, #20]
 8015cd4:	6a1b      	ldr	r3, [r3, #32]
 8015cd6:	1ad3      	subs	r3, r2, r3
 8015cd8:	68fa      	ldr	r2, [r7, #12]
 8015cda:	429a      	cmp	r2, r3
 8015cdc:	d807      	bhi.n	8015cee <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8015cde:	4b10      	ldr	r3, [pc, #64]	@ (8015d20 <tcp_kill_state+0x90>)
 8015ce0:	681a      	ldr	r2, [r3, #0]
 8015ce2:	697b      	ldr	r3, [r7, #20]
 8015ce4:	6a1b      	ldr	r3, [r3, #32]
 8015ce6:	1ad3      	subs	r3, r2, r3
 8015ce8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8015cea:	697b      	ldr	r3, [r7, #20]
 8015cec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015cee:	697b      	ldr	r3, [r7, #20]
 8015cf0:	68db      	ldr	r3, [r3, #12]
 8015cf2:	617b      	str	r3, [r7, #20]
 8015cf4:	697b      	ldr	r3, [r7, #20]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d1e4      	bne.n	8015cc4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8015cfa:	693b      	ldr	r3, [r7, #16]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d003      	beq.n	8015d08 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8015d00:	2100      	movs	r1, #0
 8015d02:	6938      	ldr	r0, [r7, #16]
 8015d04:	f7fe fff2 	bl	8014cec <tcp_abandon>
  }
}
 8015d08:	bf00      	nop
 8015d0a:	3718      	adds	r7, #24
 8015d0c:	46bd      	mov	sp, r7
 8015d0e:	bd80      	pop	{r7, pc}
 8015d10:	08024920 	.word	0x08024920
 8015d14:	08024eac 	.word	0x08024eac
 8015d18:	08024964 	.word	0x08024964
 8015d1c:	2400cb08 	.word	0x2400cb08
 8015d20:	2400cafc 	.word	0x2400cafc

08015d24 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8015d24:	b580      	push	{r7, lr}
 8015d26:	b084      	sub	sp, #16
 8015d28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8015d2e:	2300      	movs	r3, #0
 8015d30:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015d32:	4b12      	ldr	r3, [pc, #72]	@ (8015d7c <tcp_kill_timewait+0x58>)
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	60fb      	str	r3, [r7, #12]
 8015d38:	e012      	b.n	8015d60 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015d3a:	4b11      	ldr	r3, [pc, #68]	@ (8015d80 <tcp_kill_timewait+0x5c>)
 8015d3c:	681a      	ldr	r2, [r3, #0]
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	6a1b      	ldr	r3, [r3, #32]
 8015d42:	1ad3      	subs	r3, r2, r3
 8015d44:	687a      	ldr	r2, [r7, #4]
 8015d46:	429a      	cmp	r2, r3
 8015d48:	d807      	bhi.n	8015d5a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8015d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8015d80 <tcp_kill_timewait+0x5c>)
 8015d4c:	681a      	ldr	r2, [r3, #0]
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	6a1b      	ldr	r3, [r3, #32]
 8015d52:	1ad3      	subs	r3, r2, r3
 8015d54:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	68db      	ldr	r3, [r3, #12]
 8015d5e:	60fb      	str	r3, [r7, #12]
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d1e9      	bne.n	8015d3a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8015d66:	68bb      	ldr	r3, [r7, #8]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d002      	beq.n	8015d72 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015d6c:	68b8      	ldr	r0, [r7, #8]
 8015d6e:	f7ff f87b 	bl	8014e68 <tcp_abort>
  }
}
 8015d72:	bf00      	nop
 8015d74:	3710      	adds	r7, #16
 8015d76:	46bd      	mov	sp, r7
 8015d78:	bd80      	pop	{r7, pc}
 8015d7a:	bf00      	nop
 8015d7c:	2400cb0c 	.word	0x2400cb0c
 8015d80:	2400cafc 	.word	0x2400cafc

08015d84 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8015d84:	b580      	push	{r7, lr}
 8015d86:	b082      	sub	sp, #8
 8015d88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8015d8a:	4b10      	ldr	r3, [pc, #64]	@ (8015dcc <tcp_handle_closepend+0x48>)
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015d90:	e014      	b.n	8015dbc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	68db      	ldr	r3, [r3, #12]
 8015d96:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	8b5b      	ldrh	r3, [r3, #26]
 8015d9c:	f003 0308 	and.w	r3, r3, #8
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d009      	beq.n	8015db8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	8b5b      	ldrh	r3, [r3, #26]
 8015da8:	f023 0308 	bic.w	r3, r3, #8
 8015dac:	b29a      	uxth	r2, r3
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8015db2:	6878      	ldr	r0, [r7, #4]
 8015db4:	f7fe fea8 	bl	8014b08 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8015db8:	683b      	ldr	r3, [r7, #0]
 8015dba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d1e7      	bne.n	8015d92 <tcp_handle_closepend+0xe>
  }
}
 8015dc2:	bf00      	nop
 8015dc4:	bf00      	nop
 8015dc6:	3708      	adds	r7, #8
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	bd80      	pop	{r7, pc}
 8015dcc:	2400cb08 	.word	0x2400cb08

08015dd0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b084      	sub	sp, #16
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	4603      	mov	r3, r0
 8015dd8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015dda:	2001      	movs	r0, #1
 8015ddc:	f7fd fb1e 	bl	801341c <memp_malloc>
 8015de0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d126      	bne.n	8015e36 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8015de8:	f7ff ffcc 	bl	8015d84 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8015dec:	f7ff ff9a 	bl	8015d24 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015df0:	2001      	movs	r0, #1
 8015df2:	f7fd fb13 	bl	801341c <memp_malloc>
 8015df6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d11b      	bne.n	8015e36 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8015dfe:	2009      	movs	r0, #9
 8015e00:	f7ff ff46 	bl	8015c90 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015e04:	2001      	movs	r0, #1
 8015e06:	f7fd fb09 	bl	801341c <memp_malloc>
 8015e0a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d111      	bne.n	8015e36 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8015e12:	2008      	movs	r0, #8
 8015e14:	f7ff ff3c 	bl	8015c90 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015e18:	2001      	movs	r0, #1
 8015e1a:	f7fd faff 	bl	801341c <memp_malloc>
 8015e1e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d107      	bne.n	8015e36 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8015e26:	79fb      	ldrb	r3, [r7, #7]
 8015e28:	4618      	mov	r0, r3
 8015e2a:	f7ff fee3 	bl	8015bf4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015e2e:	2001      	movs	r0, #1
 8015e30:	f7fd faf4 	bl	801341c <memp_malloc>
 8015e34:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d03f      	beq.n	8015ebc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8015e3c:	229c      	movs	r2, #156	@ 0x9c
 8015e3e:	2100      	movs	r1, #0
 8015e40:	68f8      	ldr	r0, [r7, #12]
 8015e42:	f00a ff45 	bl	8020cd0 <memset>
    pcb->prio = prio;
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	79fa      	ldrb	r2, [r7, #7]
 8015e4a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8015e52:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8015e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	22ff      	movs	r2, #255	@ 0xff
 8015e6a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8015e72:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	2206      	movs	r2, #6
 8015e78:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	2206      	movs	r2, #6
 8015e80:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015e88:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	2201      	movs	r2, #1
 8015e8e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8015e92:	4b0d      	ldr	r3, [pc, #52]	@ (8015ec8 <tcp_alloc+0xf8>)
 8015e94:	681a      	ldr	r2, [r3, #0]
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8015e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8015ecc <tcp_alloc+0xfc>)
 8015e9c:	781a      	ldrb	r2, [r3, #0]
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8015ea8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	4a08      	ldr	r2, [pc, #32]	@ (8015ed0 <tcp_alloc+0x100>)
 8015eb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	4a07      	ldr	r2, [pc, #28]	@ (8015ed4 <tcp_alloc+0x104>)
 8015eb8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8015ebc:	68fb      	ldr	r3, [r7, #12]
}
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	3710      	adds	r7, #16
 8015ec2:	46bd      	mov	sp, r7
 8015ec4:	bd80      	pop	{r7, pc}
 8015ec6:	bf00      	nop
 8015ec8:	2400cafc 	.word	0x2400cafc
 8015ecc:	2400cb12 	.word	0x2400cb12
 8015ed0:	08015b89 	.word	0x08015b89
 8015ed4:	006ddd00 	.word	0x006ddd00

08015ed8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8015ed8:	b580      	push	{r7, lr}
 8015eda:	b084      	sub	sp, #16
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	4603      	mov	r3, r0
 8015ee0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8015ee2:	2040      	movs	r0, #64	@ 0x40
 8015ee4:	f7ff ff74 	bl	8015dd0 <tcp_alloc>
 8015ee8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8015eea:	68fb      	ldr	r3, [r7, #12]
}
 8015eec:	4618      	mov	r0, r3
 8015eee:	3710      	adds	r7, #16
 8015ef0:	46bd      	mov	sp, r7
 8015ef2:	bd80      	pop	{r7, pc}

08015ef4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8015ef4:	b480      	push	{r7}
 8015ef6:	b083      	sub	sp, #12
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	6078      	str	r0, [r7, #4]
 8015efc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d002      	beq.n	8015f0a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	683a      	ldr	r2, [r7, #0]
 8015f08:	611a      	str	r2, [r3, #16]
  }
}
 8015f0a:	bf00      	nop
 8015f0c:	370c      	adds	r7, #12
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f14:	4770      	bx	lr
	...

08015f18 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b082      	sub	sp, #8
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	6078      	str	r0, [r7, #4]
 8015f20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d00e      	beq.n	8015f46 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	7d1b      	ldrb	r3, [r3, #20]
 8015f2c:	2b01      	cmp	r3, #1
 8015f2e:	d106      	bne.n	8015f3e <tcp_recv+0x26>
 8015f30:	4b07      	ldr	r3, [pc, #28]	@ (8015f50 <tcp_recv+0x38>)
 8015f32:	f240 72df 	movw	r2, #2015	@ 0x7df
 8015f36:	4907      	ldr	r1, [pc, #28]	@ (8015f54 <tcp_recv+0x3c>)
 8015f38:	4807      	ldr	r0, [pc, #28]	@ (8015f58 <tcp_recv+0x40>)
 8015f3a:	f00a fd23 	bl	8020984 <iprintf>
    pcb->recv = recv;
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	683a      	ldr	r2, [r7, #0]
 8015f42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8015f46:	bf00      	nop
 8015f48:	3708      	adds	r7, #8
 8015f4a:	46bd      	mov	sp, r7
 8015f4c:	bd80      	pop	{r7, pc}
 8015f4e:	bf00      	nop
 8015f50:	08024920 	.word	0x08024920
 8015f54:	08024ebc 	.word	0x08024ebc
 8015f58:	08024964 	.word	0x08024964

08015f5c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b082      	sub	sp, #8
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]
 8015f64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d00e      	beq.n	8015f8a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	7d1b      	ldrb	r3, [r3, #20]
 8015f70:	2b01      	cmp	r3, #1
 8015f72:	d106      	bne.n	8015f82 <tcp_sent+0x26>
 8015f74:	4b07      	ldr	r3, [pc, #28]	@ (8015f94 <tcp_sent+0x38>)
 8015f76:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8015f7a:	4907      	ldr	r1, [pc, #28]	@ (8015f98 <tcp_sent+0x3c>)
 8015f7c:	4807      	ldr	r0, [pc, #28]	@ (8015f9c <tcp_sent+0x40>)
 8015f7e:	f00a fd01 	bl	8020984 <iprintf>
    pcb->sent = sent;
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	683a      	ldr	r2, [r7, #0]
 8015f86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8015f8a:	bf00      	nop
 8015f8c:	3708      	adds	r7, #8
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	bd80      	pop	{r7, pc}
 8015f92:	bf00      	nop
 8015f94:	08024920 	.word	0x08024920
 8015f98:	08024ee4 	.word	0x08024ee4
 8015f9c:	08024964 	.word	0x08024964

08015fa0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b082      	sub	sp, #8
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	6078      	str	r0, [r7, #4]
 8015fa8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d00e      	beq.n	8015fce <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	7d1b      	ldrb	r3, [r3, #20]
 8015fb4:	2b01      	cmp	r3, #1
 8015fb6:	d106      	bne.n	8015fc6 <tcp_err+0x26>
 8015fb8:	4b07      	ldr	r3, [pc, #28]	@ (8015fd8 <tcp_err+0x38>)
 8015fba:	f640 020d 	movw	r2, #2061	@ 0x80d
 8015fbe:	4907      	ldr	r1, [pc, #28]	@ (8015fdc <tcp_err+0x3c>)
 8015fc0:	4807      	ldr	r0, [pc, #28]	@ (8015fe0 <tcp_err+0x40>)
 8015fc2:	f00a fcdf 	bl	8020984 <iprintf>
    pcb->errf = err;
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	683a      	ldr	r2, [r7, #0]
 8015fca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8015fce:	bf00      	nop
 8015fd0:	3708      	adds	r7, #8
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}
 8015fd6:	bf00      	nop
 8015fd8:	08024920 	.word	0x08024920
 8015fdc:	08024f0c 	.word	0x08024f0c
 8015fe0:	08024964 	.word	0x08024964

08015fe4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8015fe4:	b480      	push	{r7}
 8015fe6:	b085      	sub	sp, #20
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
 8015fec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d008      	beq.n	8016006 <tcp_accept+0x22>
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	7d1b      	ldrb	r3, [r3, #20]
 8015ff8:	2b01      	cmp	r3, #1
 8015ffa:	d104      	bne.n	8016006 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	683a      	ldr	r2, [r7, #0]
 8016004:	619a      	str	r2, [r3, #24]
  }
}
 8016006:	bf00      	nop
 8016008:	3714      	adds	r7, #20
 801600a:	46bd      	mov	sp, r7
 801600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016010:	4770      	bx	lr
	...

08016014 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8016014:	b580      	push	{r7, lr}
 8016016:	b084      	sub	sp, #16
 8016018:	af00      	add	r7, sp, #0
 801601a:	60f8      	str	r0, [r7, #12]
 801601c:	60b9      	str	r1, [r7, #8]
 801601e:	4613      	mov	r3, r2
 8016020:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	2b00      	cmp	r3, #0
 8016026:	d107      	bne.n	8016038 <tcp_poll+0x24>
 8016028:	4b0e      	ldr	r3, [pc, #56]	@ (8016064 <tcp_poll+0x50>)
 801602a:	f640 023d 	movw	r2, #2109	@ 0x83d
 801602e:	490e      	ldr	r1, [pc, #56]	@ (8016068 <tcp_poll+0x54>)
 8016030:	480e      	ldr	r0, [pc, #56]	@ (801606c <tcp_poll+0x58>)
 8016032:	f00a fca7 	bl	8020984 <iprintf>
 8016036:	e011      	b.n	801605c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	7d1b      	ldrb	r3, [r3, #20]
 801603c:	2b01      	cmp	r3, #1
 801603e:	d106      	bne.n	801604e <tcp_poll+0x3a>
 8016040:	4b08      	ldr	r3, [pc, #32]	@ (8016064 <tcp_poll+0x50>)
 8016042:	f640 023e 	movw	r2, #2110	@ 0x83e
 8016046:	490a      	ldr	r1, [pc, #40]	@ (8016070 <tcp_poll+0x5c>)
 8016048:	4808      	ldr	r0, [pc, #32]	@ (801606c <tcp_poll+0x58>)
 801604a:	f00a fc9b 	bl	8020984 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	68ba      	ldr	r2, [r7, #8]
 8016052:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	79fa      	ldrb	r2, [r7, #7]
 801605a:	775a      	strb	r2, [r3, #29]
}
 801605c:	3710      	adds	r7, #16
 801605e:	46bd      	mov	sp, r7
 8016060:	bd80      	pop	{r7, pc}
 8016062:	bf00      	nop
 8016064:	08024920 	.word	0x08024920
 8016068:	08024f34 	.word	0x08024f34
 801606c:	08024964 	.word	0x08024964
 8016070:	08024f4c 	.word	0x08024f4c

08016074 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b082      	sub	sp, #8
 8016078:	af00      	add	r7, sp, #0
 801607a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d107      	bne.n	8016092 <tcp_pcb_purge+0x1e>
 8016082:	4b21      	ldr	r3, [pc, #132]	@ (8016108 <tcp_pcb_purge+0x94>)
 8016084:	f640 0251 	movw	r2, #2129	@ 0x851
 8016088:	4920      	ldr	r1, [pc, #128]	@ (801610c <tcp_pcb_purge+0x98>)
 801608a:	4821      	ldr	r0, [pc, #132]	@ (8016110 <tcp_pcb_purge+0x9c>)
 801608c:	f00a fc7a 	bl	8020984 <iprintf>
 8016090:	e037      	b.n	8016102 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	7d1b      	ldrb	r3, [r3, #20]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d033      	beq.n	8016102 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801609e:	2b0a      	cmp	r3, #10
 80160a0:	d02f      	beq.n	8016102 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80160a6:	2b01      	cmp	r3, #1
 80160a8:	d02b      	beq.n	8016102 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d007      	beq.n	80160c2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80160b6:	4618      	mov	r0, r3
 80160b8:	f7fe f8d6 	bl	8014268 <pbuf_free>
      pcb->refused_data = NULL;
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	2200      	movs	r2, #0
 80160c0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d002      	beq.n	80160d0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80160ca:	6878      	ldr	r0, [r7, #4]
 80160cc:	f000 f986 	bl	80163dc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80160d6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80160dc:	4618      	mov	r0, r3
 80160de:	f7ff fcf9 	bl	8015ad4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80160e6:	4618      	mov	r0, r3
 80160e8:	f7ff fcf4 	bl	8015ad4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	2200      	movs	r2, #0
 80160f0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	2200      	movs	r2, #0
 80160fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8016102:	3708      	adds	r7, #8
 8016104:	46bd      	mov	sp, r7
 8016106:	bd80      	pop	{r7, pc}
 8016108:	08024920 	.word	0x08024920
 801610c:	08024f6c 	.word	0x08024f6c
 8016110:	08024964 	.word	0x08024964

08016114 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8016114:	b580      	push	{r7, lr}
 8016116:	b084      	sub	sp, #16
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
 801611c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801611e:	683b      	ldr	r3, [r7, #0]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d106      	bne.n	8016132 <tcp_pcb_remove+0x1e>
 8016124:	4b3e      	ldr	r3, [pc, #248]	@ (8016220 <tcp_pcb_remove+0x10c>)
 8016126:	f640 0283 	movw	r2, #2179	@ 0x883
 801612a:	493e      	ldr	r1, [pc, #248]	@ (8016224 <tcp_pcb_remove+0x110>)
 801612c:	483e      	ldr	r0, [pc, #248]	@ (8016228 <tcp_pcb_remove+0x114>)
 801612e:	f00a fc29 	bl	8020984 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	2b00      	cmp	r3, #0
 8016136:	d106      	bne.n	8016146 <tcp_pcb_remove+0x32>
 8016138:	4b39      	ldr	r3, [pc, #228]	@ (8016220 <tcp_pcb_remove+0x10c>)
 801613a:	f640 0284 	movw	r2, #2180	@ 0x884
 801613e:	493b      	ldr	r1, [pc, #236]	@ (801622c <tcp_pcb_remove+0x118>)
 8016140:	4839      	ldr	r0, [pc, #228]	@ (8016228 <tcp_pcb_remove+0x114>)
 8016142:	f00a fc1f 	bl	8020984 <iprintf>

  TCP_RMV(pcblist, pcb);
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	683a      	ldr	r2, [r7, #0]
 801614c:	429a      	cmp	r2, r3
 801614e:	d105      	bne.n	801615c <tcp_pcb_remove+0x48>
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	68da      	ldr	r2, [r3, #12]
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	601a      	str	r2, [r3, #0]
 801615a:	e013      	b.n	8016184 <tcp_pcb_remove+0x70>
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	60fb      	str	r3, [r7, #12]
 8016162:	e00c      	b.n	801617e <tcp_pcb_remove+0x6a>
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	68db      	ldr	r3, [r3, #12]
 8016168:	683a      	ldr	r2, [r7, #0]
 801616a:	429a      	cmp	r2, r3
 801616c:	d104      	bne.n	8016178 <tcp_pcb_remove+0x64>
 801616e:	683b      	ldr	r3, [r7, #0]
 8016170:	68da      	ldr	r2, [r3, #12]
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	60da      	str	r2, [r3, #12]
 8016176:	e005      	b.n	8016184 <tcp_pcb_remove+0x70>
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	68db      	ldr	r3, [r3, #12]
 801617c:	60fb      	str	r3, [r7, #12]
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d1ef      	bne.n	8016164 <tcp_pcb_remove+0x50>
 8016184:	683b      	ldr	r3, [r7, #0]
 8016186:	2200      	movs	r2, #0
 8016188:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801618a:	6838      	ldr	r0, [r7, #0]
 801618c:	f7ff ff72 	bl	8016074 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8016190:	683b      	ldr	r3, [r7, #0]
 8016192:	7d1b      	ldrb	r3, [r3, #20]
 8016194:	2b0a      	cmp	r3, #10
 8016196:	d013      	beq.n	80161c0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8016198:	683b      	ldr	r3, [r7, #0]
 801619a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801619c:	2b01      	cmp	r3, #1
 801619e:	d00f      	beq.n	80161c0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80161a0:	683b      	ldr	r3, [r7, #0]
 80161a2:	8b5b      	ldrh	r3, [r3, #26]
 80161a4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d009      	beq.n	80161c0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80161ac:	683b      	ldr	r3, [r7, #0]
 80161ae:	8b5b      	ldrh	r3, [r3, #26]
 80161b0:	f043 0302 	orr.w	r3, r3, #2
 80161b4:	b29a      	uxth	r2, r3
 80161b6:	683b      	ldr	r3, [r7, #0]
 80161b8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80161ba:	6838      	ldr	r0, [r7, #0]
 80161bc:	f003 fbc0 	bl	8019940 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80161c0:	683b      	ldr	r3, [r7, #0]
 80161c2:	7d1b      	ldrb	r3, [r3, #20]
 80161c4:	2b01      	cmp	r3, #1
 80161c6:	d020      	beq.n	801620a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80161c8:	683b      	ldr	r3, [r7, #0]
 80161ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d006      	beq.n	80161de <tcp_pcb_remove+0xca>
 80161d0:	4b13      	ldr	r3, [pc, #76]	@ (8016220 <tcp_pcb_remove+0x10c>)
 80161d2:	f640 0293 	movw	r2, #2195	@ 0x893
 80161d6:	4916      	ldr	r1, [pc, #88]	@ (8016230 <tcp_pcb_remove+0x11c>)
 80161d8:	4813      	ldr	r0, [pc, #76]	@ (8016228 <tcp_pcb_remove+0x114>)
 80161da:	f00a fbd3 	bl	8020984 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80161de:	683b      	ldr	r3, [r7, #0]
 80161e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d006      	beq.n	80161f4 <tcp_pcb_remove+0xe0>
 80161e6:	4b0e      	ldr	r3, [pc, #56]	@ (8016220 <tcp_pcb_remove+0x10c>)
 80161e8:	f640 0294 	movw	r2, #2196	@ 0x894
 80161ec:	4911      	ldr	r1, [pc, #68]	@ (8016234 <tcp_pcb_remove+0x120>)
 80161ee:	480e      	ldr	r0, [pc, #56]	@ (8016228 <tcp_pcb_remove+0x114>)
 80161f0:	f00a fbc8 	bl	8020984 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80161f4:	683b      	ldr	r3, [r7, #0]
 80161f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d006      	beq.n	801620a <tcp_pcb_remove+0xf6>
 80161fc:	4b08      	ldr	r3, [pc, #32]	@ (8016220 <tcp_pcb_remove+0x10c>)
 80161fe:	f640 0296 	movw	r2, #2198	@ 0x896
 8016202:	490d      	ldr	r1, [pc, #52]	@ (8016238 <tcp_pcb_remove+0x124>)
 8016204:	4808      	ldr	r0, [pc, #32]	@ (8016228 <tcp_pcb_remove+0x114>)
 8016206:	f00a fbbd 	bl	8020984 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801620a:	683b      	ldr	r3, [r7, #0]
 801620c:	2200      	movs	r2, #0
 801620e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8016210:	683b      	ldr	r3, [r7, #0]
 8016212:	2200      	movs	r2, #0
 8016214:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8016216:	bf00      	nop
 8016218:	3710      	adds	r7, #16
 801621a:	46bd      	mov	sp, r7
 801621c:	bd80      	pop	{r7, pc}
 801621e:	bf00      	nop
 8016220:	08024920 	.word	0x08024920
 8016224:	08024f88 	.word	0x08024f88
 8016228:	08024964 	.word	0x08024964
 801622c:	08024fa4 	.word	0x08024fa4
 8016230:	08024fc4 	.word	0x08024fc4
 8016234:	08024fdc 	.word	0x08024fdc
 8016238:	08024ff8 	.word	0x08024ff8

0801623c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801623c:	b580      	push	{r7, lr}
 801623e:	b082      	sub	sp, #8
 8016240:	af00      	add	r7, sp, #0
 8016242:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d106      	bne.n	8016258 <tcp_next_iss+0x1c>
 801624a:	4b0a      	ldr	r3, [pc, #40]	@ (8016274 <tcp_next_iss+0x38>)
 801624c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8016250:	4909      	ldr	r1, [pc, #36]	@ (8016278 <tcp_next_iss+0x3c>)
 8016252:	480a      	ldr	r0, [pc, #40]	@ (801627c <tcp_next_iss+0x40>)
 8016254:	f00a fb96 	bl	8020984 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8016258:	4b09      	ldr	r3, [pc, #36]	@ (8016280 <tcp_next_iss+0x44>)
 801625a:	681a      	ldr	r2, [r3, #0]
 801625c:	4b09      	ldr	r3, [pc, #36]	@ (8016284 <tcp_next_iss+0x48>)
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	4413      	add	r3, r2
 8016262:	4a07      	ldr	r2, [pc, #28]	@ (8016280 <tcp_next_iss+0x44>)
 8016264:	6013      	str	r3, [r2, #0]
  return iss;
 8016266:	4b06      	ldr	r3, [pc, #24]	@ (8016280 <tcp_next_iss+0x44>)
 8016268:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801626a:	4618      	mov	r0, r3
 801626c:	3708      	adds	r7, #8
 801626e:	46bd      	mov	sp, r7
 8016270:	bd80      	pop	{r7, pc}
 8016272:	bf00      	nop
 8016274:	08024920 	.word	0x08024920
 8016278:	08025010 	.word	0x08025010
 801627c:	08024964 	.word	0x08024964
 8016280:	2400002c 	.word	0x2400002c
 8016284:	2400cafc 	.word	0x2400cafc

08016288 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b086      	sub	sp, #24
 801628c:	af00      	add	r7, sp, #0
 801628e:	4603      	mov	r3, r0
 8016290:	60b9      	str	r1, [r7, #8]
 8016292:	607a      	str	r2, [r7, #4]
 8016294:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d106      	bne.n	80162aa <tcp_eff_send_mss_netif+0x22>
 801629c:	4b14      	ldr	r3, [pc, #80]	@ (80162f0 <tcp_eff_send_mss_netif+0x68>)
 801629e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80162a2:	4914      	ldr	r1, [pc, #80]	@ (80162f4 <tcp_eff_send_mss_netif+0x6c>)
 80162a4:	4814      	ldr	r0, [pc, #80]	@ (80162f8 <tcp_eff_send_mss_netif+0x70>)
 80162a6:	f00a fb6d 	bl	8020984 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80162aa:	68bb      	ldr	r3, [r7, #8]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d101      	bne.n	80162b4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80162b0:	89fb      	ldrh	r3, [r7, #14]
 80162b2:	e019      	b.n	80162e8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80162b4:	68bb      	ldr	r3, [r7, #8]
 80162b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162b8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80162ba:	8afb      	ldrh	r3, [r7, #22]
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d012      	beq.n	80162e6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80162c0:	2328      	movs	r3, #40	@ 0x28
 80162c2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80162c4:	8afa      	ldrh	r2, [r7, #22]
 80162c6:	8abb      	ldrh	r3, [r7, #20]
 80162c8:	429a      	cmp	r2, r3
 80162ca:	d904      	bls.n	80162d6 <tcp_eff_send_mss_netif+0x4e>
 80162cc:	8afa      	ldrh	r2, [r7, #22]
 80162ce:	8abb      	ldrh	r3, [r7, #20]
 80162d0:	1ad3      	subs	r3, r2, r3
 80162d2:	b29b      	uxth	r3, r3
 80162d4:	e000      	b.n	80162d8 <tcp_eff_send_mss_netif+0x50>
 80162d6:	2300      	movs	r3, #0
 80162d8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80162da:	8a7a      	ldrh	r2, [r7, #18]
 80162dc:	89fb      	ldrh	r3, [r7, #14]
 80162de:	4293      	cmp	r3, r2
 80162e0:	bf28      	it	cs
 80162e2:	4613      	movcs	r3, r2
 80162e4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80162e6:	89fb      	ldrh	r3, [r7, #14]
}
 80162e8:	4618      	mov	r0, r3
 80162ea:	3718      	adds	r7, #24
 80162ec:	46bd      	mov	sp, r7
 80162ee:	bd80      	pop	{r7, pc}
 80162f0:	08024920 	.word	0x08024920
 80162f4:	0802502c 	.word	0x0802502c
 80162f8:	08024964 	.word	0x08024964

080162fc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80162fc:	b580      	push	{r7, lr}
 80162fe:	b084      	sub	sp, #16
 8016300:	af00      	add	r7, sp, #0
 8016302:	6078      	str	r0, [r7, #4]
 8016304:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8016306:	683b      	ldr	r3, [r7, #0]
 8016308:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d119      	bne.n	8016344 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8016310:	4b10      	ldr	r3, [pc, #64]	@ (8016354 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8016312:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8016316:	4910      	ldr	r1, [pc, #64]	@ (8016358 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8016318:	4810      	ldr	r0, [pc, #64]	@ (801635c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801631a:	f00a fb33 	bl	8020984 <iprintf>

  while (pcb != NULL) {
 801631e:	e011      	b.n	8016344 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	681a      	ldr	r2, [r3, #0]
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	429a      	cmp	r2, r3
 801632a:	d108      	bne.n	801633e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	68db      	ldr	r3, [r3, #12]
 8016330:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8016332:	68f8      	ldr	r0, [r7, #12]
 8016334:	f7fe fd98 	bl	8014e68 <tcp_abort>
      pcb = next;
 8016338:	68bb      	ldr	r3, [r7, #8]
 801633a:	60fb      	str	r3, [r7, #12]
 801633c:	e002      	b.n	8016344 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	68db      	ldr	r3, [r3, #12]
 8016342:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	2b00      	cmp	r3, #0
 8016348:	d1ea      	bne.n	8016320 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801634a:	bf00      	nop
 801634c:	bf00      	nop
 801634e:	3710      	adds	r7, #16
 8016350:	46bd      	mov	sp, r7
 8016352:	bd80      	pop	{r7, pc}
 8016354:	08024920 	.word	0x08024920
 8016358:	08025054 	.word	0x08025054
 801635c:	08024964 	.word	0x08024964

08016360 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016360:	b580      	push	{r7, lr}
 8016362:	b084      	sub	sp, #16
 8016364:	af00      	add	r7, sp, #0
 8016366:	6078      	str	r0, [r7, #4]
 8016368:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d02a      	beq.n	80163c6 <tcp_netif_ip_addr_changed+0x66>
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d026      	beq.n	80163c6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8016378:	4b15      	ldr	r3, [pc, #84]	@ (80163d0 <tcp_netif_ip_addr_changed+0x70>)
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	4619      	mov	r1, r3
 801637e:	6878      	ldr	r0, [r7, #4]
 8016380:	f7ff ffbc 	bl	80162fc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8016384:	4b13      	ldr	r3, [pc, #76]	@ (80163d4 <tcp_netif_ip_addr_changed+0x74>)
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	4619      	mov	r1, r3
 801638a:	6878      	ldr	r0, [r7, #4]
 801638c:	f7ff ffb6 	bl	80162fc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8016390:	683b      	ldr	r3, [r7, #0]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d017      	beq.n	80163c6 <tcp_netif_ip_addr_changed+0x66>
 8016396:	683b      	ldr	r3, [r7, #0]
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d013      	beq.n	80163c6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801639e:	4b0e      	ldr	r3, [pc, #56]	@ (80163d8 <tcp_netif_ip_addr_changed+0x78>)
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	60fb      	str	r3, [r7, #12]
 80163a4:	e00c      	b.n	80163c0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	681a      	ldr	r2, [r3, #0]
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	429a      	cmp	r2, r3
 80163b0:	d103      	bne.n	80163ba <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80163b2:	683b      	ldr	r3, [r7, #0]
 80163b4:	681a      	ldr	r2, [r3, #0]
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	68db      	ldr	r3, [r3, #12]
 80163be:	60fb      	str	r3, [r7, #12]
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d1ef      	bne.n	80163a6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80163c6:	bf00      	nop
 80163c8:	3710      	adds	r7, #16
 80163ca:	46bd      	mov	sp, r7
 80163cc:	bd80      	pop	{r7, pc}
 80163ce:	bf00      	nop
 80163d0:	2400cb08 	.word	0x2400cb08
 80163d4:	2400cb00 	.word	0x2400cb00
 80163d8:	2400cb04 	.word	0x2400cb04

080163dc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80163dc:	b580      	push	{r7, lr}
 80163de:	b082      	sub	sp, #8
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d007      	beq.n	80163fc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80163f0:	4618      	mov	r0, r3
 80163f2:	f7ff fb6f 	bl	8015ad4 <tcp_segs_free>
    pcb->ooseq = NULL;
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	2200      	movs	r2, #0
 80163fa:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80163fc:	bf00      	nop
 80163fe:	3708      	adds	r7, #8
 8016400:	46bd      	mov	sp, r7
 8016402:	bd80      	pop	{r7, pc}

08016404 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8016404:	b590      	push	{r4, r7, lr}
 8016406:	b08d      	sub	sp, #52	@ 0x34
 8016408:	af04      	add	r7, sp, #16
 801640a:	6078      	str	r0, [r7, #4]
 801640c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d105      	bne.n	8016420 <tcp_input+0x1c>
 8016414:	4b9b      	ldr	r3, [pc, #620]	@ (8016684 <tcp_input+0x280>)
 8016416:	2283      	movs	r2, #131	@ 0x83
 8016418:	499b      	ldr	r1, [pc, #620]	@ (8016688 <tcp_input+0x284>)
 801641a:	489c      	ldr	r0, [pc, #624]	@ (801668c <tcp_input+0x288>)
 801641c:	f00a fab2 	bl	8020984 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	685b      	ldr	r3, [r3, #4]
 8016424:	4a9a      	ldr	r2, [pc, #616]	@ (8016690 <tcp_input+0x28c>)
 8016426:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	895b      	ldrh	r3, [r3, #10]
 801642c:	2b13      	cmp	r3, #19
 801642e:	f240 83d1 	bls.w	8016bd4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016432:	4b98      	ldr	r3, [pc, #608]	@ (8016694 <tcp_input+0x290>)
 8016434:	695b      	ldr	r3, [r3, #20]
 8016436:	4a97      	ldr	r2, [pc, #604]	@ (8016694 <tcp_input+0x290>)
 8016438:	6812      	ldr	r2, [r2, #0]
 801643a:	4611      	mov	r1, r2
 801643c:	4618      	mov	r0, r3
 801643e:	f008 fb35 	bl	801eaac <ip4_addr_isbroadcast_u32>
 8016442:	4603      	mov	r3, r0
 8016444:	2b00      	cmp	r3, #0
 8016446:	f040 83c7 	bne.w	8016bd8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801644a:	4b92      	ldr	r3, [pc, #584]	@ (8016694 <tcp_input+0x290>)
 801644c:	695b      	ldr	r3, [r3, #20]
 801644e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016452:	2be0      	cmp	r3, #224	@ 0xe0
 8016454:	f000 83c0 	beq.w	8016bd8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8016458:	4b8d      	ldr	r3, [pc, #564]	@ (8016690 <tcp_input+0x28c>)
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	899b      	ldrh	r3, [r3, #12]
 801645e:	b29b      	uxth	r3, r3
 8016460:	4618      	mov	r0, r3
 8016462:	f7fc fa4b 	bl	80128fc <lwip_htons>
 8016466:	4603      	mov	r3, r0
 8016468:	0b1b      	lsrs	r3, r3, #12
 801646a:	b29b      	uxth	r3, r3
 801646c:	b2db      	uxtb	r3, r3
 801646e:	009b      	lsls	r3, r3, #2
 8016470:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8016472:	7cbb      	ldrb	r3, [r7, #18]
 8016474:	2b13      	cmp	r3, #19
 8016476:	f240 83b1 	bls.w	8016bdc <tcp_input+0x7d8>
 801647a:	7cbb      	ldrb	r3, [r7, #18]
 801647c:	b29a      	uxth	r2, r3
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	891b      	ldrh	r3, [r3, #8]
 8016482:	429a      	cmp	r2, r3
 8016484:	f200 83aa 	bhi.w	8016bdc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8016488:	7cbb      	ldrb	r3, [r7, #18]
 801648a:	b29b      	uxth	r3, r3
 801648c:	3b14      	subs	r3, #20
 801648e:	b29a      	uxth	r2, r3
 8016490:	4b81      	ldr	r3, [pc, #516]	@ (8016698 <tcp_input+0x294>)
 8016492:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8016494:	4b81      	ldr	r3, [pc, #516]	@ (801669c <tcp_input+0x298>)
 8016496:	2200      	movs	r2, #0
 8016498:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	895a      	ldrh	r2, [r3, #10]
 801649e:	7cbb      	ldrb	r3, [r7, #18]
 80164a0:	b29b      	uxth	r3, r3
 80164a2:	429a      	cmp	r2, r3
 80164a4:	d309      	bcc.n	80164ba <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80164a6:	4b7c      	ldr	r3, [pc, #496]	@ (8016698 <tcp_input+0x294>)
 80164a8:	881a      	ldrh	r2, [r3, #0]
 80164aa:	4b7d      	ldr	r3, [pc, #500]	@ (80166a0 <tcp_input+0x29c>)
 80164ac:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80164ae:	7cbb      	ldrb	r3, [r7, #18]
 80164b0:	4619      	mov	r1, r3
 80164b2:	6878      	ldr	r0, [r7, #4]
 80164b4:	f7fd fe52 	bl	801415c <pbuf_remove_header>
 80164b8:	e04e      	b.n	8016558 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d105      	bne.n	80164ce <tcp_input+0xca>
 80164c2:	4b70      	ldr	r3, [pc, #448]	@ (8016684 <tcp_input+0x280>)
 80164c4:	22c2      	movs	r2, #194	@ 0xc2
 80164c6:	4977      	ldr	r1, [pc, #476]	@ (80166a4 <tcp_input+0x2a0>)
 80164c8:	4870      	ldr	r0, [pc, #448]	@ (801668c <tcp_input+0x288>)
 80164ca:	f00a fa5b 	bl	8020984 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80164ce:	2114      	movs	r1, #20
 80164d0:	6878      	ldr	r0, [r7, #4]
 80164d2:	f7fd fe43 	bl	801415c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	895a      	ldrh	r2, [r3, #10]
 80164da:	4b71      	ldr	r3, [pc, #452]	@ (80166a0 <tcp_input+0x29c>)
 80164dc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80164de:	4b6e      	ldr	r3, [pc, #440]	@ (8016698 <tcp_input+0x294>)
 80164e0:	881a      	ldrh	r2, [r3, #0]
 80164e2:	4b6f      	ldr	r3, [pc, #444]	@ (80166a0 <tcp_input+0x29c>)
 80164e4:	881b      	ldrh	r3, [r3, #0]
 80164e6:	1ad3      	subs	r3, r2, r3
 80164e8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80164ea:	4b6d      	ldr	r3, [pc, #436]	@ (80166a0 <tcp_input+0x29c>)
 80164ec:	881b      	ldrh	r3, [r3, #0]
 80164ee:	4619      	mov	r1, r3
 80164f0:	6878      	ldr	r0, [r7, #4]
 80164f2:	f7fd fe33 	bl	801415c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	895b      	ldrh	r3, [r3, #10]
 80164fc:	8a3a      	ldrh	r2, [r7, #16]
 80164fe:	429a      	cmp	r2, r3
 8016500:	f200 836e 	bhi.w	8016be0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	685b      	ldr	r3, [r3, #4]
 801650a:	4a64      	ldr	r2, [pc, #400]	@ (801669c <tcp_input+0x298>)
 801650c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	8a3a      	ldrh	r2, [r7, #16]
 8016514:	4611      	mov	r1, r2
 8016516:	4618      	mov	r0, r3
 8016518:	f7fd fe20 	bl	801415c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	891a      	ldrh	r2, [r3, #8]
 8016520:	8a3b      	ldrh	r3, [r7, #16]
 8016522:	1ad3      	subs	r3, r2, r3
 8016524:	b29a      	uxth	r2, r3
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	895b      	ldrh	r3, [r3, #10]
 801652e:	2b00      	cmp	r3, #0
 8016530:	d005      	beq.n	801653e <tcp_input+0x13a>
 8016532:	4b54      	ldr	r3, [pc, #336]	@ (8016684 <tcp_input+0x280>)
 8016534:	22df      	movs	r2, #223	@ 0xdf
 8016536:	495c      	ldr	r1, [pc, #368]	@ (80166a8 <tcp_input+0x2a4>)
 8016538:	4854      	ldr	r0, [pc, #336]	@ (801668c <tcp_input+0x288>)
 801653a:	f00a fa23 	bl	8020984 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	891a      	ldrh	r2, [r3, #8]
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	891b      	ldrh	r3, [r3, #8]
 8016548:	429a      	cmp	r2, r3
 801654a:	d005      	beq.n	8016558 <tcp_input+0x154>
 801654c:	4b4d      	ldr	r3, [pc, #308]	@ (8016684 <tcp_input+0x280>)
 801654e:	22e0      	movs	r2, #224	@ 0xe0
 8016550:	4956      	ldr	r1, [pc, #344]	@ (80166ac <tcp_input+0x2a8>)
 8016552:	484e      	ldr	r0, [pc, #312]	@ (801668c <tcp_input+0x288>)
 8016554:	f00a fa16 	bl	8020984 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8016558:	4b4d      	ldr	r3, [pc, #308]	@ (8016690 <tcp_input+0x28c>)
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	881b      	ldrh	r3, [r3, #0]
 801655e:	b29b      	uxth	r3, r3
 8016560:	4a4b      	ldr	r2, [pc, #300]	@ (8016690 <tcp_input+0x28c>)
 8016562:	6814      	ldr	r4, [r2, #0]
 8016564:	4618      	mov	r0, r3
 8016566:	f7fc f9c9 	bl	80128fc <lwip_htons>
 801656a:	4603      	mov	r3, r0
 801656c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801656e:	4b48      	ldr	r3, [pc, #288]	@ (8016690 <tcp_input+0x28c>)
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	885b      	ldrh	r3, [r3, #2]
 8016574:	b29b      	uxth	r3, r3
 8016576:	4a46      	ldr	r2, [pc, #280]	@ (8016690 <tcp_input+0x28c>)
 8016578:	6814      	ldr	r4, [r2, #0]
 801657a:	4618      	mov	r0, r3
 801657c:	f7fc f9be 	bl	80128fc <lwip_htons>
 8016580:	4603      	mov	r3, r0
 8016582:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8016584:	4b42      	ldr	r3, [pc, #264]	@ (8016690 <tcp_input+0x28c>)
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	685b      	ldr	r3, [r3, #4]
 801658a:	4a41      	ldr	r2, [pc, #260]	@ (8016690 <tcp_input+0x28c>)
 801658c:	6814      	ldr	r4, [r2, #0]
 801658e:	4618      	mov	r0, r3
 8016590:	f7fc f9c9 	bl	8012926 <lwip_htonl>
 8016594:	4603      	mov	r3, r0
 8016596:	6063      	str	r3, [r4, #4]
 8016598:	6863      	ldr	r3, [r4, #4]
 801659a:	4a45      	ldr	r2, [pc, #276]	@ (80166b0 <tcp_input+0x2ac>)
 801659c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801659e:	4b3c      	ldr	r3, [pc, #240]	@ (8016690 <tcp_input+0x28c>)
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	689b      	ldr	r3, [r3, #8]
 80165a4:	4a3a      	ldr	r2, [pc, #232]	@ (8016690 <tcp_input+0x28c>)
 80165a6:	6814      	ldr	r4, [r2, #0]
 80165a8:	4618      	mov	r0, r3
 80165aa:	f7fc f9bc 	bl	8012926 <lwip_htonl>
 80165ae:	4603      	mov	r3, r0
 80165b0:	60a3      	str	r3, [r4, #8]
 80165b2:	68a3      	ldr	r3, [r4, #8]
 80165b4:	4a3f      	ldr	r2, [pc, #252]	@ (80166b4 <tcp_input+0x2b0>)
 80165b6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80165b8:	4b35      	ldr	r3, [pc, #212]	@ (8016690 <tcp_input+0x28c>)
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	89db      	ldrh	r3, [r3, #14]
 80165be:	b29b      	uxth	r3, r3
 80165c0:	4a33      	ldr	r2, [pc, #204]	@ (8016690 <tcp_input+0x28c>)
 80165c2:	6814      	ldr	r4, [r2, #0]
 80165c4:	4618      	mov	r0, r3
 80165c6:	f7fc f999 	bl	80128fc <lwip_htons>
 80165ca:	4603      	mov	r3, r0
 80165cc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80165ce:	4b30      	ldr	r3, [pc, #192]	@ (8016690 <tcp_input+0x28c>)
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	899b      	ldrh	r3, [r3, #12]
 80165d4:	b29b      	uxth	r3, r3
 80165d6:	4618      	mov	r0, r3
 80165d8:	f7fc f990 	bl	80128fc <lwip_htons>
 80165dc:	4603      	mov	r3, r0
 80165de:	b2db      	uxtb	r3, r3
 80165e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80165e4:	b2da      	uxtb	r2, r3
 80165e6:	4b34      	ldr	r3, [pc, #208]	@ (80166b8 <tcp_input+0x2b4>)
 80165e8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	891a      	ldrh	r2, [r3, #8]
 80165ee:	4b33      	ldr	r3, [pc, #204]	@ (80166bc <tcp_input+0x2b8>)
 80165f0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80165f2:	4b31      	ldr	r3, [pc, #196]	@ (80166b8 <tcp_input+0x2b4>)
 80165f4:	781b      	ldrb	r3, [r3, #0]
 80165f6:	f003 0303 	and.w	r3, r3, #3
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d00c      	beq.n	8016618 <tcp_input+0x214>
    tcplen++;
 80165fe:	4b2f      	ldr	r3, [pc, #188]	@ (80166bc <tcp_input+0x2b8>)
 8016600:	881b      	ldrh	r3, [r3, #0]
 8016602:	3301      	adds	r3, #1
 8016604:	b29a      	uxth	r2, r3
 8016606:	4b2d      	ldr	r3, [pc, #180]	@ (80166bc <tcp_input+0x2b8>)
 8016608:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	891a      	ldrh	r2, [r3, #8]
 801660e:	4b2b      	ldr	r3, [pc, #172]	@ (80166bc <tcp_input+0x2b8>)
 8016610:	881b      	ldrh	r3, [r3, #0]
 8016612:	429a      	cmp	r2, r3
 8016614:	f200 82e6 	bhi.w	8016be4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8016618:	2300      	movs	r3, #0
 801661a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801661c:	4b28      	ldr	r3, [pc, #160]	@ (80166c0 <tcp_input+0x2bc>)
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	61fb      	str	r3, [r7, #28]
 8016622:	e09d      	b.n	8016760 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8016624:	69fb      	ldr	r3, [r7, #28]
 8016626:	7d1b      	ldrb	r3, [r3, #20]
 8016628:	2b00      	cmp	r3, #0
 801662a:	d105      	bne.n	8016638 <tcp_input+0x234>
 801662c:	4b15      	ldr	r3, [pc, #84]	@ (8016684 <tcp_input+0x280>)
 801662e:	22fb      	movs	r2, #251	@ 0xfb
 8016630:	4924      	ldr	r1, [pc, #144]	@ (80166c4 <tcp_input+0x2c0>)
 8016632:	4816      	ldr	r0, [pc, #88]	@ (801668c <tcp_input+0x288>)
 8016634:	f00a f9a6 	bl	8020984 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8016638:	69fb      	ldr	r3, [r7, #28]
 801663a:	7d1b      	ldrb	r3, [r3, #20]
 801663c:	2b0a      	cmp	r3, #10
 801663e:	d105      	bne.n	801664c <tcp_input+0x248>
 8016640:	4b10      	ldr	r3, [pc, #64]	@ (8016684 <tcp_input+0x280>)
 8016642:	22fc      	movs	r2, #252	@ 0xfc
 8016644:	4920      	ldr	r1, [pc, #128]	@ (80166c8 <tcp_input+0x2c4>)
 8016646:	4811      	ldr	r0, [pc, #68]	@ (801668c <tcp_input+0x288>)
 8016648:	f00a f99c 	bl	8020984 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801664c:	69fb      	ldr	r3, [r7, #28]
 801664e:	7d1b      	ldrb	r3, [r3, #20]
 8016650:	2b01      	cmp	r3, #1
 8016652:	d105      	bne.n	8016660 <tcp_input+0x25c>
 8016654:	4b0b      	ldr	r3, [pc, #44]	@ (8016684 <tcp_input+0x280>)
 8016656:	22fd      	movs	r2, #253	@ 0xfd
 8016658:	491c      	ldr	r1, [pc, #112]	@ (80166cc <tcp_input+0x2c8>)
 801665a:	480c      	ldr	r0, [pc, #48]	@ (801668c <tcp_input+0x288>)
 801665c:	f00a f992 	bl	8020984 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016660:	69fb      	ldr	r3, [r7, #28]
 8016662:	7a1b      	ldrb	r3, [r3, #8]
 8016664:	2b00      	cmp	r3, #0
 8016666:	d033      	beq.n	80166d0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016668:	69fb      	ldr	r3, [r7, #28]
 801666a:	7a1a      	ldrb	r2, [r3, #8]
 801666c:	4b09      	ldr	r3, [pc, #36]	@ (8016694 <tcp_input+0x290>)
 801666e:	685b      	ldr	r3, [r3, #4]
 8016670:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8016674:	3301      	adds	r3, #1
 8016676:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016678:	429a      	cmp	r2, r3
 801667a:	d029      	beq.n	80166d0 <tcp_input+0x2cc>
      prev = pcb;
 801667c:	69fb      	ldr	r3, [r7, #28]
 801667e:	61bb      	str	r3, [r7, #24]
      continue;
 8016680:	e06b      	b.n	801675a <tcp_input+0x356>
 8016682:	bf00      	nop
 8016684:	08025088 	.word	0x08025088
 8016688:	080250bc 	.word	0x080250bc
 801668c:	080250d4 	.word	0x080250d4
 8016690:	2400cb24 	.word	0x2400cb24
 8016694:	240099dc 	.word	0x240099dc
 8016698:	2400cb28 	.word	0x2400cb28
 801669c:	2400cb2c 	.word	0x2400cb2c
 80166a0:	2400cb2a 	.word	0x2400cb2a
 80166a4:	080250fc 	.word	0x080250fc
 80166a8:	0802510c 	.word	0x0802510c
 80166ac:	08025118 	.word	0x08025118
 80166b0:	2400cb34 	.word	0x2400cb34
 80166b4:	2400cb38 	.word	0x2400cb38
 80166b8:	2400cb40 	.word	0x2400cb40
 80166bc:	2400cb3e 	.word	0x2400cb3e
 80166c0:	2400cb08 	.word	0x2400cb08
 80166c4:	08025138 	.word	0x08025138
 80166c8:	08025160 	.word	0x08025160
 80166cc:	0802518c 	.word	0x0802518c
    }

    if (pcb->remote_port == tcphdr->src &&
 80166d0:	69fb      	ldr	r3, [r7, #28]
 80166d2:	8b1a      	ldrh	r2, [r3, #24]
 80166d4:	4b72      	ldr	r3, [pc, #456]	@ (80168a0 <tcp_input+0x49c>)
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	881b      	ldrh	r3, [r3, #0]
 80166da:	b29b      	uxth	r3, r3
 80166dc:	429a      	cmp	r2, r3
 80166de:	d13a      	bne.n	8016756 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80166e0:	69fb      	ldr	r3, [r7, #28]
 80166e2:	8ada      	ldrh	r2, [r3, #22]
 80166e4:	4b6e      	ldr	r3, [pc, #440]	@ (80168a0 <tcp_input+0x49c>)
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	885b      	ldrh	r3, [r3, #2]
 80166ea:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80166ec:	429a      	cmp	r2, r3
 80166ee:	d132      	bne.n	8016756 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80166f0:	69fb      	ldr	r3, [r7, #28]
 80166f2:	685a      	ldr	r2, [r3, #4]
 80166f4:	4b6b      	ldr	r3, [pc, #428]	@ (80168a4 <tcp_input+0x4a0>)
 80166f6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80166f8:	429a      	cmp	r2, r3
 80166fa:	d12c      	bne.n	8016756 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80166fc:	69fb      	ldr	r3, [r7, #28]
 80166fe:	681a      	ldr	r2, [r3, #0]
 8016700:	4b68      	ldr	r3, [pc, #416]	@ (80168a4 <tcp_input+0x4a0>)
 8016702:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016704:	429a      	cmp	r2, r3
 8016706:	d126      	bne.n	8016756 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8016708:	69fb      	ldr	r3, [r7, #28]
 801670a:	68db      	ldr	r3, [r3, #12]
 801670c:	69fa      	ldr	r2, [r7, #28]
 801670e:	429a      	cmp	r2, r3
 8016710:	d106      	bne.n	8016720 <tcp_input+0x31c>
 8016712:	4b65      	ldr	r3, [pc, #404]	@ (80168a8 <tcp_input+0x4a4>)
 8016714:	f240 120d 	movw	r2, #269	@ 0x10d
 8016718:	4964      	ldr	r1, [pc, #400]	@ (80168ac <tcp_input+0x4a8>)
 801671a:	4865      	ldr	r0, [pc, #404]	@ (80168b0 <tcp_input+0x4ac>)
 801671c:	f00a f932 	bl	8020984 <iprintf>
      if (prev != NULL) {
 8016720:	69bb      	ldr	r3, [r7, #24]
 8016722:	2b00      	cmp	r3, #0
 8016724:	d00a      	beq.n	801673c <tcp_input+0x338>
        prev->next = pcb->next;
 8016726:	69fb      	ldr	r3, [r7, #28]
 8016728:	68da      	ldr	r2, [r3, #12]
 801672a:	69bb      	ldr	r3, [r7, #24]
 801672c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801672e:	4b61      	ldr	r3, [pc, #388]	@ (80168b4 <tcp_input+0x4b0>)
 8016730:	681a      	ldr	r2, [r3, #0]
 8016732:	69fb      	ldr	r3, [r7, #28]
 8016734:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8016736:	4a5f      	ldr	r2, [pc, #380]	@ (80168b4 <tcp_input+0x4b0>)
 8016738:	69fb      	ldr	r3, [r7, #28]
 801673a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801673c:	69fb      	ldr	r3, [r7, #28]
 801673e:	68db      	ldr	r3, [r3, #12]
 8016740:	69fa      	ldr	r2, [r7, #28]
 8016742:	429a      	cmp	r2, r3
 8016744:	d111      	bne.n	801676a <tcp_input+0x366>
 8016746:	4b58      	ldr	r3, [pc, #352]	@ (80168a8 <tcp_input+0x4a4>)
 8016748:	f240 1215 	movw	r2, #277	@ 0x115
 801674c:	495a      	ldr	r1, [pc, #360]	@ (80168b8 <tcp_input+0x4b4>)
 801674e:	4858      	ldr	r0, [pc, #352]	@ (80168b0 <tcp_input+0x4ac>)
 8016750:	f00a f918 	bl	8020984 <iprintf>
      break;
 8016754:	e009      	b.n	801676a <tcp_input+0x366>
    }
    prev = pcb;
 8016756:	69fb      	ldr	r3, [r7, #28]
 8016758:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801675a:	69fb      	ldr	r3, [r7, #28]
 801675c:	68db      	ldr	r3, [r3, #12]
 801675e:	61fb      	str	r3, [r7, #28]
 8016760:	69fb      	ldr	r3, [r7, #28]
 8016762:	2b00      	cmp	r3, #0
 8016764:	f47f af5e 	bne.w	8016624 <tcp_input+0x220>
 8016768:	e000      	b.n	801676c <tcp_input+0x368>
      break;
 801676a:	bf00      	nop
  }

  if (pcb == NULL) {
 801676c:	69fb      	ldr	r3, [r7, #28]
 801676e:	2b00      	cmp	r3, #0
 8016770:	f040 80aa 	bne.w	80168c8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016774:	4b51      	ldr	r3, [pc, #324]	@ (80168bc <tcp_input+0x4b8>)
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	61fb      	str	r3, [r7, #28]
 801677a:	e03f      	b.n	80167fc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801677c:	69fb      	ldr	r3, [r7, #28]
 801677e:	7d1b      	ldrb	r3, [r3, #20]
 8016780:	2b0a      	cmp	r3, #10
 8016782:	d006      	beq.n	8016792 <tcp_input+0x38e>
 8016784:	4b48      	ldr	r3, [pc, #288]	@ (80168a8 <tcp_input+0x4a4>)
 8016786:	f240 121f 	movw	r2, #287	@ 0x11f
 801678a:	494d      	ldr	r1, [pc, #308]	@ (80168c0 <tcp_input+0x4bc>)
 801678c:	4848      	ldr	r0, [pc, #288]	@ (80168b0 <tcp_input+0x4ac>)
 801678e:	f00a f8f9 	bl	8020984 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016792:	69fb      	ldr	r3, [r7, #28]
 8016794:	7a1b      	ldrb	r3, [r3, #8]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d009      	beq.n	80167ae <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801679a:	69fb      	ldr	r3, [r7, #28]
 801679c:	7a1a      	ldrb	r2, [r3, #8]
 801679e:	4b41      	ldr	r3, [pc, #260]	@ (80168a4 <tcp_input+0x4a0>)
 80167a0:	685b      	ldr	r3, [r3, #4]
 80167a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80167a6:	3301      	adds	r3, #1
 80167a8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80167aa:	429a      	cmp	r2, r3
 80167ac:	d122      	bne.n	80167f4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80167ae:	69fb      	ldr	r3, [r7, #28]
 80167b0:	8b1a      	ldrh	r2, [r3, #24]
 80167b2:	4b3b      	ldr	r3, [pc, #236]	@ (80168a0 <tcp_input+0x49c>)
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	881b      	ldrh	r3, [r3, #0]
 80167b8:	b29b      	uxth	r3, r3
 80167ba:	429a      	cmp	r2, r3
 80167bc:	d11b      	bne.n	80167f6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80167be:	69fb      	ldr	r3, [r7, #28]
 80167c0:	8ada      	ldrh	r2, [r3, #22]
 80167c2:	4b37      	ldr	r3, [pc, #220]	@ (80168a0 <tcp_input+0x49c>)
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	885b      	ldrh	r3, [r3, #2]
 80167c8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80167ca:	429a      	cmp	r2, r3
 80167cc:	d113      	bne.n	80167f6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80167ce:	69fb      	ldr	r3, [r7, #28]
 80167d0:	685a      	ldr	r2, [r3, #4]
 80167d2:	4b34      	ldr	r3, [pc, #208]	@ (80168a4 <tcp_input+0x4a0>)
 80167d4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80167d6:	429a      	cmp	r2, r3
 80167d8:	d10d      	bne.n	80167f6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80167da:	69fb      	ldr	r3, [r7, #28]
 80167dc:	681a      	ldr	r2, [r3, #0]
 80167de:	4b31      	ldr	r3, [pc, #196]	@ (80168a4 <tcp_input+0x4a0>)
 80167e0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80167e2:	429a      	cmp	r2, r3
 80167e4:	d107      	bne.n	80167f6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80167e6:	69f8      	ldr	r0, [r7, #28]
 80167e8:	f000 fb56 	bl	8016e98 <tcp_timewait_input>
        }
        pbuf_free(p);
 80167ec:	6878      	ldr	r0, [r7, #4]
 80167ee:	f7fd fd3b 	bl	8014268 <pbuf_free>
        return;
 80167f2:	e1fd      	b.n	8016bf0 <tcp_input+0x7ec>
        continue;
 80167f4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80167f6:	69fb      	ldr	r3, [r7, #28]
 80167f8:	68db      	ldr	r3, [r3, #12]
 80167fa:	61fb      	str	r3, [r7, #28]
 80167fc:	69fb      	ldr	r3, [r7, #28]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d1bc      	bne.n	801677c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016802:	2300      	movs	r3, #0
 8016804:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016806:	4b2f      	ldr	r3, [pc, #188]	@ (80168c4 <tcp_input+0x4c0>)
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	617b      	str	r3, [r7, #20]
 801680c:	e02a      	b.n	8016864 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801680e:	697b      	ldr	r3, [r7, #20]
 8016810:	7a1b      	ldrb	r3, [r3, #8]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d00c      	beq.n	8016830 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016816:	697b      	ldr	r3, [r7, #20]
 8016818:	7a1a      	ldrb	r2, [r3, #8]
 801681a:	4b22      	ldr	r3, [pc, #136]	@ (80168a4 <tcp_input+0x4a0>)
 801681c:	685b      	ldr	r3, [r3, #4]
 801681e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8016822:	3301      	adds	r3, #1
 8016824:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016826:	429a      	cmp	r2, r3
 8016828:	d002      	beq.n	8016830 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801682a:	697b      	ldr	r3, [r7, #20]
 801682c:	61bb      	str	r3, [r7, #24]
        continue;
 801682e:	e016      	b.n	801685e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8016830:	697b      	ldr	r3, [r7, #20]
 8016832:	8ada      	ldrh	r2, [r3, #22]
 8016834:	4b1a      	ldr	r3, [pc, #104]	@ (80168a0 <tcp_input+0x49c>)
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	885b      	ldrh	r3, [r3, #2]
 801683a:	b29b      	uxth	r3, r3
 801683c:	429a      	cmp	r2, r3
 801683e:	d10c      	bne.n	801685a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8016840:	697b      	ldr	r3, [r7, #20]
 8016842:	681a      	ldr	r2, [r3, #0]
 8016844:	4b17      	ldr	r3, [pc, #92]	@ (80168a4 <tcp_input+0x4a0>)
 8016846:	695b      	ldr	r3, [r3, #20]
 8016848:	429a      	cmp	r2, r3
 801684a:	d00f      	beq.n	801686c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801684c:	697b      	ldr	r3, [r7, #20]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d00d      	beq.n	801686e <tcp_input+0x46a>
 8016852:	697b      	ldr	r3, [r7, #20]
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d009      	beq.n	801686e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801685a:	697b      	ldr	r3, [r7, #20]
 801685c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801685e:	697b      	ldr	r3, [r7, #20]
 8016860:	68db      	ldr	r3, [r3, #12]
 8016862:	617b      	str	r3, [r7, #20]
 8016864:	697b      	ldr	r3, [r7, #20]
 8016866:	2b00      	cmp	r3, #0
 8016868:	d1d1      	bne.n	801680e <tcp_input+0x40a>
 801686a:	e000      	b.n	801686e <tcp_input+0x46a>
            break;
 801686c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801686e:	697b      	ldr	r3, [r7, #20]
 8016870:	2b00      	cmp	r3, #0
 8016872:	d029      	beq.n	80168c8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8016874:	69bb      	ldr	r3, [r7, #24]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d00a      	beq.n	8016890 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801687a:	697b      	ldr	r3, [r7, #20]
 801687c:	68da      	ldr	r2, [r3, #12]
 801687e:	69bb      	ldr	r3, [r7, #24]
 8016880:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8016882:	4b10      	ldr	r3, [pc, #64]	@ (80168c4 <tcp_input+0x4c0>)
 8016884:	681a      	ldr	r2, [r3, #0]
 8016886:	697b      	ldr	r3, [r7, #20]
 8016888:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801688a:	4a0e      	ldr	r2, [pc, #56]	@ (80168c4 <tcp_input+0x4c0>)
 801688c:	697b      	ldr	r3, [r7, #20]
 801688e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8016890:	6978      	ldr	r0, [r7, #20]
 8016892:	f000 fa03 	bl	8016c9c <tcp_listen_input>
      }
      pbuf_free(p);
 8016896:	6878      	ldr	r0, [r7, #4]
 8016898:	f7fd fce6 	bl	8014268 <pbuf_free>
      return;
 801689c:	e1a8      	b.n	8016bf0 <tcp_input+0x7ec>
 801689e:	bf00      	nop
 80168a0:	2400cb24 	.word	0x2400cb24
 80168a4:	240099dc 	.word	0x240099dc
 80168a8:	08025088 	.word	0x08025088
 80168ac:	080251b4 	.word	0x080251b4
 80168b0:	080250d4 	.word	0x080250d4
 80168b4:	2400cb08 	.word	0x2400cb08
 80168b8:	080251e0 	.word	0x080251e0
 80168bc:	2400cb0c 	.word	0x2400cb0c
 80168c0:	0802520c 	.word	0x0802520c
 80168c4:	2400cb04 	.word	0x2400cb04
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80168c8:	69fb      	ldr	r3, [r7, #28]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	f000 8158 	beq.w	8016b80 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80168d0:	4b95      	ldr	r3, [pc, #596]	@ (8016b28 <tcp_input+0x724>)
 80168d2:	2200      	movs	r2, #0
 80168d4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	891a      	ldrh	r2, [r3, #8]
 80168da:	4b93      	ldr	r3, [pc, #588]	@ (8016b28 <tcp_input+0x724>)
 80168dc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80168de:	4a92      	ldr	r2, [pc, #584]	@ (8016b28 <tcp_input+0x724>)
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80168e4:	4b91      	ldr	r3, [pc, #580]	@ (8016b2c <tcp_input+0x728>)
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	4a8f      	ldr	r2, [pc, #572]	@ (8016b28 <tcp_input+0x724>)
 80168ea:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80168ec:	4b90      	ldr	r3, [pc, #576]	@ (8016b30 <tcp_input+0x72c>)
 80168ee:	2200      	movs	r2, #0
 80168f0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80168f2:	4b90      	ldr	r3, [pc, #576]	@ (8016b34 <tcp_input+0x730>)
 80168f4:	2200      	movs	r2, #0
 80168f6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80168f8:	4b8f      	ldr	r3, [pc, #572]	@ (8016b38 <tcp_input+0x734>)
 80168fa:	2200      	movs	r2, #0
 80168fc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80168fe:	4b8f      	ldr	r3, [pc, #572]	@ (8016b3c <tcp_input+0x738>)
 8016900:	781b      	ldrb	r3, [r3, #0]
 8016902:	f003 0308 	and.w	r3, r3, #8
 8016906:	2b00      	cmp	r3, #0
 8016908:	d006      	beq.n	8016918 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	7b5b      	ldrb	r3, [r3, #13]
 801690e:	f043 0301 	orr.w	r3, r3, #1
 8016912:	b2da      	uxtb	r2, r3
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8016918:	69fb      	ldr	r3, [r7, #28]
 801691a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801691c:	2b00      	cmp	r3, #0
 801691e:	d017      	beq.n	8016950 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016920:	69f8      	ldr	r0, [r7, #28]
 8016922:	f7ff f85b 	bl	80159dc <tcp_process_refused_data>
 8016926:	4603      	mov	r3, r0
 8016928:	f113 0f0d 	cmn.w	r3, #13
 801692c:	d007      	beq.n	801693e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801692e:	69fb      	ldr	r3, [r7, #28]
 8016930:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016932:	2b00      	cmp	r3, #0
 8016934:	d00c      	beq.n	8016950 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016936:	4b82      	ldr	r3, [pc, #520]	@ (8016b40 <tcp_input+0x73c>)
 8016938:	881b      	ldrh	r3, [r3, #0]
 801693a:	2b00      	cmp	r3, #0
 801693c:	d008      	beq.n	8016950 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801693e:	69fb      	ldr	r3, [r7, #28]
 8016940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016942:	2b00      	cmp	r3, #0
 8016944:	f040 80e3 	bne.w	8016b0e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8016948:	69f8      	ldr	r0, [r7, #28]
 801694a:	f003 fdff 	bl	801a54c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801694e:	e0de      	b.n	8016b0e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8016950:	4a7c      	ldr	r2, [pc, #496]	@ (8016b44 <tcp_input+0x740>)
 8016952:	69fb      	ldr	r3, [r7, #28]
 8016954:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8016956:	69f8      	ldr	r0, [r7, #28]
 8016958:	f000 fb18 	bl	8016f8c <tcp_process>
 801695c:	4603      	mov	r3, r0
 801695e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8016960:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016964:	f113 0f0d 	cmn.w	r3, #13
 8016968:	f000 80d3 	beq.w	8016b12 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801696c:	4b71      	ldr	r3, [pc, #452]	@ (8016b34 <tcp_input+0x730>)
 801696e:	781b      	ldrb	r3, [r3, #0]
 8016970:	f003 0308 	and.w	r3, r3, #8
 8016974:	2b00      	cmp	r3, #0
 8016976:	d015      	beq.n	80169a4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8016978:	69fb      	ldr	r3, [r7, #28]
 801697a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801697e:	2b00      	cmp	r3, #0
 8016980:	d008      	beq.n	8016994 <tcp_input+0x590>
 8016982:	69fb      	ldr	r3, [r7, #28]
 8016984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016988:	69fa      	ldr	r2, [r7, #28]
 801698a:	6912      	ldr	r2, [r2, #16]
 801698c:	f06f 010d 	mvn.w	r1, #13
 8016990:	4610      	mov	r0, r2
 8016992:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016994:	69f9      	ldr	r1, [r7, #28]
 8016996:	486c      	ldr	r0, [pc, #432]	@ (8016b48 <tcp_input+0x744>)
 8016998:	f7ff fbbc 	bl	8016114 <tcp_pcb_remove>
        tcp_free(pcb);
 801699c:	69f8      	ldr	r0, [r7, #28]
 801699e:	f7fd ff1f 	bl	80147e0 <tcp_free>
 80169a2:	e0da      	b.n	8016b5a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80169a4:	2300      	movs	r3, #0
 80169a6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80169a8:	4b63      	ldr	r3, [pc, #396]	@ (8016b38 <tcp_input+0x734>)
 80169aa:	881b      	ldrh	r3, [r3, #0]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d01d      	beq.n	80169ec <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80169b0:	4b61      	ldr	r3, [pc, #388]	@ (8016b38 <tcp_input+0x734>)
 80169b2:	881b      	ldrh	r3, [r3, #0]
 80169b4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80169b6:	69fb      	ldr	r3, [r7, #28]
 80169b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d00a      	beq.n	80169d6 <tcp_input+0x5d2>
 80169c0:	69fb      	ldr	r3, [r7, #28]
 80169c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80169c6:	69fa      	ldr	r2, [r7, #28]
 80169c8:	6910      	ldr	r0, [r2, #16]
 80169ca:	89fa      	ldrh	r2, [r7, #14]
 80169cc:	69f9      	ldr	r1, [r7, #28]
 80169ce:	4798      	blx	r3
 80169d0:	4603      	mov	r3, r0
 80169d2:	74fb      	strb	r3, [r7, #19]
 80169d4:	e001      	b.n	80169da <tcp_input+0x5d6>
 80169d6:	2300      	movs	r3, #0
 80169d8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80169da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80169de:	f113 0f0d 	cmn.w	r3, #13
 80169e2:	f000 8098 	beq.w	8016b16 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80169e6:	4b54      	ldr	r3, [pc, #336]	@ (8016b38 <tcp_input+0x734>)
 80169e8:	2200      	movs	r2, #0
 80169ea:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80169ec:	69f8      	ldr	r0, [r7, #28]
 80169ee:	f000 f915 	bl	8016c1c <tcp_input_delayed_close>
 80169f2:	4603      	mov	r3, r0
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	f040 8090 	bne.w	8016b1a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80169fa:	4b4d      	ldr	r3, [pc, #308]	@ (8016b30 <tcp_input+0x72c>)
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d041      	beq.n	8016a86 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016a02:	69fb      	ldr	r3, [r7, #28]
 8016a04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d006      	beq.n	8016a18 <tcp_input+0x614>
 8016a0a:	4b50      	ldr	r3, [pc, #320]	@ (8016b4c <tcp_input+0x748>)
 8016a0c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8016a10:	494f      	ldr	r1, [pc, #316]	@ (8016b50 <tcp_input+0x74c>)
 8016a12:	4850      	ldr	r0, [pc, #320]	@ (8016b54 <tcp_input+0x750>)
 8016a14:	f009 ffb6 	bl	8020984 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8016a18:	69fb      	ldr	r3, [r7, #28]
 8016a1a:	8b5b      	ldrh	r3, [r3, #26]
 8016a1c:	f003 0310 	and.w	r3, r3, #16
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d008      	beq.n	8016a36 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016a24:	4b42      	ldr	r3, [pc, #264]	@ (8016b30 <tcp_input+0x72c>)
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	4618      	mov	r0, r3
 8016a2a:	f7fd fc1d 	bl	8014268 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8016a2e:	69f8      	ldr	r0, [r7, #28]
 8016a30:	f7fe fa1a 	bl	8014e68 <tcp_abort>
            goto aborted;
 8016a34:	e091      	b.n	8016b5a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8016a36:	69fb      	ldr	r3, [r7, #28]
 8016a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d00c      	beq.n	8016a5a <tcp_input+0x656>
 8016a40:	69fb      	ldr	r3, [r7, #28]
 8016a42:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016a46:	69fb      	ldr	r3, [r7, #28]
 8016a48:	6918      	ldr	r0, [r3, #16]
 8016a4a:	4b39      	ldr	r3, [pc, #228]	@ (8016b30 <tcp_input+0x72c>)
 8016a4c:	681a      	ldr	r2, [r3, #0]
 8016a4e:	2300      	movs	r3, #0
 8016a50:	69f9      	ldr	r1, [r7, #28]
 8016a52:	47a0      	blx	r4
 8016a54:	4603      	mov	r3, r0
 8016a56:	74fb      	strb	r3, [r7, #19]
 8016a58:	e008      	b.n	8016a6c <tcp_input+0x668>
 8016a5a:	4b35      	ldr	r3, [pc, #212]	@ (8016b30 <tcp_input+0x72c>)
 8016a5c:	681a      	ldr	r2, [r3, #0]
 8016a5e:	2300      	movs	r3, #0
 8016a60:	69f9      	ldr	r1, [r7, #28]
 8016a62:	2000      	movs	r0, #0
 8016a64:	f7ff f890 	bl	8015b88 <tcp_recv_null>
 8016a68:	4603      	mov	r3, r0
 8016a6a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8016a6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016a70:	f113 0f0d 	cmn.w	r3, #13
 8016a74:	d053      	beq.n	8016b1e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8016a76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d003      	beq.n	8016a86 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8016a7e:	4b2c      	ldr	r3, [pc, #176]	@ (8016b30 <tcp_input+0x72c>)
 8016a80:	681a      	ldr	r2, [r3, #0]
 8016a82:	69fb      	ldr	r3, [r7, #28]
 8016a84:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8016a86:	4b2b      	ldr	r3, [pc, #172]	@ (8016b34 <tcp_input+0x730>)
 8016a88:	781b      	ldrb	r3, [r3, #0]
 8016a8a:	f003 0320 	and.w	r3, r3, #32
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d030      	beq.n	8016af4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8016a92:	69fb      	ldr	r3, [r7, #28]
 8016a94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d009      	beq.n	8016aae <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8016a9a:	69fb      	ldr	r3, [r7, #28]
 8016a9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016a9e:	7b5a      	ldrb	r2, [r3, #13]
 8016aa0:	69fb      	ldr	r3, [r7, #28]
 8016aa2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016aa4:	f042 0220 	orr.w	r2, r2, #32
 8016aa8:	b2d2      	uxtb	r2, r2
 8016aaa:	735a      	strb	r2, [r3, #13]
 8016aac:	e022      	b.n	8016af4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016aae:	69fb      	ldr	r3, [r7, #28]
 8016ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ab2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8016ab6:	d005      	beq.n	8016ac4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8016ab8:	69fb      	ldr	r3, [r7, #28]
 8016aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016abc:	3301      	adds	r3, #1
 8016abe:	b29a      	uxth	r2, r3
 8016ac0:	69fb      	ldr	r3, [r7, #28]
 8016ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016ac4:	69fb      	ldr	r3, [r7, #28]
 8016ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d00b      	beq.n	8016ae6 <tcp_input+0x6e2>
 8016ace:	69fb      	ldr	r3, [r7, #28]
 8016ad0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016ad4:	69fb      	ldr	r3, [r7, #28]
 8016ad6:	6918      	ldr	r0, [r3, #16]
 8016ad8:	2300      	movs	r3, #0
 8016ada:	2200      	movs	r2, #0
 8016adc:	69f9      	ldr	r1, [r7, #28]
 8016ade:	47a0      	blx	r4
 8016ae0:	4603      	mov	r3, r0
 8016ae2:	74fb      	strb	r3, [r7, #19]
 8016ae4:	e001      	b.n	8016aea <tcp_input+0x6e6>
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016aea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016aee:	f113 0f0d 	cmn.w	r3, #13
 8016af2:	d016      	beq.n	8016b22 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016af4:	4b13      	ldr	r3, [pc, #76]	@ (8016b44 <tcp_input+0x740>)
 8016af6:	2200      	movs	r2, #0
 8016af8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8016afa:	69f8      	ldr	r0, [r7, #28]
 8016afc:	f000 f88e 	bl	8016c1c <tcp_input_delayed_close>
 8016b00:	4603      	mov	r3, r0
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d128      	bne.n	8016b58 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8016b06:	69f8      	ldr	r0, [r7, #28]
 8016b08:	f002 ff1a 	bl	8019940 <tcp_output>
 8016b0c:	e025      	b.n	8016b5a <tcp_input+0x756>
        goto aborted;
 8016b0e:	bf00      	nop
 8016b10:	e023      	b.n	8016b5a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016b12:	bf00      	nop
 8016b14:	e021      	b.n	8016b5a <tcp_input+0x756>
              goto aborted;
 8016b16:	bf00      	nop
 8016b18:	e01f      	b.n	8016b5a <tcp_input+0x756>
          goto aborted;
 8016b1a:	bf00      	nop
 8016b1c:	e01d      	b.n	8016b5a <tcp_input+0x756>
            goto aborted;
 8016b1e:	bf00      	nop
 8016b20:	e01b      	b.n	8016b5a <tcp_input+0x756>
              goto aborted;
 8016b22:	bf00      	nop
 8016b24:	e019      	b.n	8016b5a <tcp_input+0x756>
 8016b26:	bf00      	nop
 8016b28:	2400cb14 	.word	0x2400cb14
 8016b2c:	2400cb24 	.word	0x2400cb24
 8016b30:	2400cb44 	.word	0x2400cb44
 8016b34:	2400cb41 	.word	0x2400cb41
 8016b38:	2400cb3c 	.word	0x2400cb3c
 8016b3c:	2400cb40 	.word	0x2400cb40
 8016b40:	2400cb3e 	.word	0x2400cb3e
 8016b44:	2400cb48 	.word	0x2400cb48
 8016b48:	2400cb08 	.word	0x2400cb08
 8016b4c:	08025088 	.word	0x08025088
 8016b50:	0802523c 	.word	0x0802523c
 8016b54:	080250d4 	.word	0x080250d4
          goto aborted;
 8016b58:	bf00      	nop
    tcp_input_pcb = NULL;
 8016b5a:	4b27      	ldr	r3, [pc, #156]	@ (8016bf8 <tcp_input+0x7f4>)
 8016b5c:	2200      	movs	r2, #0
 8016b5e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8016b60:	4b26      	ldr	r3, [pc, #152]	@ (8016bfc <tcp_input+0x7f8>)
 8016b62:	2200      	movs	r2, #0
 8016b64:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8016b66:	4b26      	ldr	r3, [pc, #152]	@ (8016c00 <tcp_input+0x7fc>)
 8016b68:	685b      	ldr	r3, [r3, #4]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d03f      	beq.n	8016bee <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8016b6e:	4b24      	ldr	r3, [pc, #144]	@ (8016c00 <tcp_input+0x7fc>)
 8016b70:	685b      	ldr	r3, [r3, #4]
 8016b72:	4618      	mov	r0, r3
 8016b74:	f7fd fb78 	bl	8014268 <pbuf_free>
      inseg.p = NULL;
 8016b78:	4b21      	ldr	r3, [pc, #132]	@ (8016c00 <tcp_input+0x7fc>)
 8016b7a:	2200      	movs	r2, #0
 8016b7c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8016b7e:	e036      	b.n	8016bee <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8016b80:	4b20      	ldr	r3, [pc, #128]	@ (8016c04 <tcp_input+0x800>)
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	899b      	ldrh	r3, [r3, #12]
 8016b86:	b29b      	uxth	r3, r3
 8016b88:	4618      	mov	r0, r3
 8016b8a:	f7fb feb7 	bl	80128fc <lwip_htons>
 8016b8e:	4603      	mov	r3, r0
 8016b90:	b2db      	uxtb	r3, r3
 8016b92:	f003 0304 	and.w	r3, r3, #4
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d118      	bne.n	8016bcc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8016c08 <tcp_input+0x804>)
 8016b9c:	6819      	ldr	r1, [r3, #0]
 8016b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8016c0c <tcp_input+0x808>)
 8016ba0:	881b      	ldrh	r3, [r3, #0]
 8016ba2:	461a      	mov	r2, r3
 8016ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8016c10 <tcp_input+0x80c>)
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016baa:	4b16      	ldr	r3, [pc, #88]	@ (8016c04 <tcp_input+0x800>)
 8016bac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016bae:	885b      	ldrh	r3, [r3, #2]
 8016bb0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016bb2:	4a14      	ldr	r2, [pc, #80]	@ (8016c04 <tcp_input+0x800>)
 8016bb4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016bb6:	8812      	ldrh	r2, [r2, #0]
 8016bb8:	b292      	uxth	r2, r2
 8016bba:	9202      	str	r2, [sp, #8]
 8016bbc:	9301      	str	r3, [sp, #4]
 8016bbe:	4b15      	ldr	r3, [pc, #84]	@ (8016c14 <tcp_input+0x810>)
 8016bc0:	9300      	str	r3, [sp, #0]
 8016bc2:	4b15      	ldr	r3, [pc, #84]	@ (8016c18 <tcp_input+0x814>)
 8016bc4:	4602      	mov	r2, r0
 8016bc6:	2000      	movs	r0, #0
 8016bc8:	f003 fc6e 	bl	801a4a8 <tcp_rst>
    pbuf_free(p);
 8016bcc:	6878      	ldr	r0, [r7, #4]
 8016bce:	f7fd fb4b 	bl	8014268 <pbuf_free>
  return;
 8016bd2:	e00c      	b.n	8016bee <tcp_input+0x7ea>
    goto dropped;
 8016bd4:	bf00      	nop
 8016bd6:	e006      	b.n	8016be6 <tcp_input+0x7e2>
    goto dropped;
 8016bd8:	bf00      	nop
 8016bda:	e004      	b.n	8016be6 <tcp_input+0x7e2>
    goto dropped;
 8016bdc:	bf00      	nop
 8016bde:	e002      	b.n	8016be6 <tcp_input+0x7e2>
      goto dropped;
 8016be0:	bf00      	nop
 8016be2:	e000      	b.n	8016be6 <tcp_input+0x7e2>
      goto dropped;
 8016be4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8016be6:	6878      	ldr	r0, [r7, #4]
 8016be8:	f7fd fb3e 	bl	8014268 <pbuf_free>
 8016bec:	e000      	b.n	8016bf0 <tcp_input+0x7ec>
  return;
 8016bee:	bf00      	nop
}
 8016bf0:	3724      	adds	r7, #36	@ 0x24
 8016bf2:	46bd      	mov	sp, r7
 8016bf4:	bd90      	pop	{r4, r7, pc}
 8016bf6:	bf00      	nop
 8016bf8:	2400cb48 	.word	0x2400cb48
 8016bfc:	2400cb44 	.word	0x2400cb44
 8016c00:	2400cb14 	.word	0x2400cb14
 8016c04:	2400cb24 	.word	0x2400cb24
 8016c08:	2400cb38 	.word	0x2400cb38
 8016c0c:	2400cb3e 	.word	0x2400cb3e
 8016c10:	2400cb34 	.word	0x2400cb34
 8016c14:	240099ec 	.word	0x240099ec
 8016c18:	240099f0 	.word	0x240099f0

08016c1c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b082      	sub	sp, #8
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d106      	bne.n	8016c38 <tcp_input_delayed_close+0x1c>
 8016c2a:	4b17      	ldr	r3, [pc, #92]	@ (8016c88 <tcp_input_delayed_close+0x6c>)
 8016c2c:	f240 225a 	movw	r2, #602	@ 0x25a
 8016c30:	4916      	ldr	r1, [pc, #88]	@ (8016c8c <tcp_input_delayed_close+0x70>)
 8016c32:	4817      	ldr	r0, [pc, #92]	@ (8016c90 <tcp_input_delayed_close+0x74>)
 8016c34:	f009 fea6 	bl	8020984 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8016c38:	4b16      	ldr	r3, [pc, #88]	@ (8016c94 <tcp_input_delayed_close+0x78>)
 8016c3a:	781b      	ldrb	r3, [r3, #0]
 8016c3c:	f003 0310 	and.w	r3, r3, #16
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d01c      	beq.n	8016c7e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	8b5b      	ldrh	r3, [r3, #26]
 8016c48:	f003 0310 	and.w	r3, r3, #16
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d10d      	bne.n	8016c6c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d008      	beq.n	8016c6c <tcp_input_delayed_close+0x50>
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016c60:	687a      	ldr	r2, [r7, #4]
 8016c62:	6912      	ldr	r2, [r2, #16]
 8016c64:	f06f 010e 	mvn.w	r1, #14
 8016c68:	4610      	mov	r0, r2
 8016c6a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016c6c:	6879      	ldr	r1, [r7, #4]
 8016c6e:	480a      	ldr	r0, [pc, #40]	@ (8016c98 <tcp_input_delayed_close+0x7c>)
 8016c70:	f7ff fa50 	bl	8016114 <tcp_pcb_remove>
    tcp_free(pcb);
 8016c74:	6878      	ldr	r0, [r7, #4]
 8016c76:	f7fd fdb3 	bl	80147e0 <tcp_free>
    return 1;
 8016c7a:	2301      	movs	r3, #1
 8016c7c:	e000      	b.n	8016c80 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8016c7e:	2300      	movs	r3, #0
}
 8016c80:	4618      	mov	r0, r3
 8016c82:	3708      	adds	r7, #8
 8016c84:	46bd      	mov	sp, r7
 8016c86:	bd80      	pop	{r7, pc}
 8016c88:	08025088 	.word	0x08025088
 8016c8c:	08025258 	.word	0x08025258
 8016c90:	080250d4 	.word	0x080250d4
 8016c94:	2400cb41 	.word	0x2400cb41
 8016c98:	2400cb08 	.word	0x2400cb08

08016c9c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8016c9c:	b590      	push	{r4, r7, lr}
 8016c9e:	b08b      	sub	sp, #44	@ 0x2c
 8016ca0:	af04      	add	r7, sp, #16
 8016ca2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8016ca4:	4b6f      	ldr	r3, [pc, #444]	@ (8016e64 <tcp_listen_input+0x1c8>)
 8016ca6:	781b      	ldrb	r3, [r3, #0]
 8016ca8:	f003 0304 	and.w	r3, r3, #4
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	f040 80d2 	bne.w	8016e56 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d106      	bne.n	8016cc6 <tcp_listen_input+0x2a>
 8016cb8:	4b6b      	ldr	r3, [pc, #428]	@ (8016e68 <tcp_listen_input+0x1cc>)
 8016cba:	f240 2281 	movw	r2, #641	@ 0x281
 8016cbe:	496b      	ldr	r1, [pc, #428]	@ (8016e6c <tcp_listen_input+0x1d0>)
 8016cc0:	486b      	ldr	r0, [pc, #428]	@ (8016e70 <tcp_listen_input+0x1d4>)
 8016cc2:	f009 fe5f 	bl	8020984 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8016cc6:	4b67      	ldr	r3, [pc, #412]	@ (8016e64 <tcp_listen_input+0x1c8>)
 8016cc8:	781b      	ldrb	r3, [r3, #0]
 8016cca:	f003 0310 	and.w	r3, r3, #16
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d019      	beq.n	8016d06 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016cd2:	4b68      	ldr	r3, [pc, #416]	@ (8016e74 <tcp_listen_input+0x1d8>)
 8016cd4:	6819      	ldr	r1, [r3, #0]
 8016cd6:	4b68      	ldr	r3, [pc, #416]	@ (8016e78 <tcp_listen_input+0x1dc>)
 8016cd8:	881b      	ldrh	r3, [r3, #0]
 8016cda:	461a      	mov	r2, r3
 8016cdc:	4b67      	ldr	r3, [pc, #412]	@ (8016e7c <tcp_listen_input+0x1e0>)
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016ce2:	4b67      	ldr	r3, [pc, #412]	@ (8016e80 <tcp_listen_input+0x1e4>)
 8016ce4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016ce6:	885b      	ldrh	r3, [r3, #2]
 8016ce8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016cea:	4a65      	ldr	r2, [pc, #404]	@ (8016e80 <tcp_listen_input+0x1e4>)
 8016cec:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016cee:	8812      	ldrh	r2, [r2, #0]
 8016cf0:	b292      	uxth	r2, r2
 8016cf2:	9202      	str	r2, [sp, #8]
 8016cf4:	9301      	str	r3, [sp, #4]
 8016cf6:	4b63      	ldr	r3, [pc, #396]	@ (8016e84 <tcp_listen_input+0x1e8>)
 8016cf8:	9300      	str	r3, [sp, #0]
 8016cfa:	4b63      	ldr	r3, [pc, #396]	@ (8016e88 <tcp_listen_input+0x1ec>)
 8016cfc:	4602      	mov	r2, r0
 8016cfe:	6878      	ldr	r0, [r7, #4]
 8016d00:	f003 fbd2 	bl	801a4a8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016d04:	e0a9      	b.n	8016e5a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8016d06:	4b57      	ldr	r3, [pc, #348]	@ (8016e64 <tcp_listen_input+0x1c8>)
 8016d08:	781b      	ldrb	r3, [r3, #0]
 8016d0a:	f003 0302 	and.w	r3, r3, #2
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	f000 80a3 	beq.w	8016e5a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	7d5b      	ldrb	r3, [r3, #21]
 8016d18:	4618      	mov	r0, r3
 8016d1a:	f7ff f859 	bl	8015dd0 <tcp_alloc>
 8016d1e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8016d20:	697b      	ldr	r3, [r7, #20]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d111      	bne.n	8016d4a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	699b      	ldr	r3, [r3, #24]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d00a      	beq.n	8016d44 <tcp_listen_input+0xa8>
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	699b      	ldr	r3, [r3, #24]
 8016d32:	687a      	ldr	r2, [r7, #4]
 8016d34:	6910      	ldr	r0, [r2, #16]
 8016d36:	f04f 32ff 	mov.w	r2, #4294967295
 8016d3a:	2100      	movs	r1, #0
 8016d3c:	4798      	blx	r3
 8016d3e:	4603      	mov	r3, r0
 8016d40:	73bb      	strb	r3, [r7, #14]
      return;
 8016d42:	e08b      	b.n	8016e5c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016d44:	23f0      	movs	r3, #240	@ 0xf0
 8016d46:	73bb      	strb	r3, [r7, #14]
      return;
 8016d48:	e088      	b.n	8016e5c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8016d4a:	4b50      	ldr	r3, [pc, #320]	@ (8016e8c <tcp_listen_input+0x1f0>)
 8016d4c:	695a      	ldr	r2, [r3, #20]
 8016d4e:	697b      	ldr	r3, [r7, #20]
 8016d50:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8016d52:	4b4e      	ldr	r3, [pc, #312]	@ (8016e8c <tcp_listen_input+0x1f0>)
 8016d54:	691a      	ldr	r2, [r3, #16]
 8016d56:	697b      	ldr	r3, [r7, #20]
 8016d58:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	8ada      	ldrh	r2, [r3, #22]
 8016d5e:	697b      	ldr	r3, [r7, #20]
 8016d60:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8016d62:	4b47      	ldr	r3, [pc, #284]	@ (8016e80 <tcp_listen_input+0x1e4>)
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	881b      	ldrh	r3, [r3, #0]
 8016d68:	b29a      	uxth	r2, r3
 8016d6a:	697b      	ldr	r3, [r7, #20]
 8016d6c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8016d6e:	697b      	ldr	r3, [r7, #20]
 8016d70:	2203      	movs	r2, #3
 8016d72:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8016d74:	4b41      	ldr	r3, [pc, #260]	@ (8016e7c <tcp_listen_input+0x1e0>)
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	1c5a      	adds	r2, r3, #1
 8016d7a:	697b      	ldr	r3, [r7, #20]
 8016d7c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8016d7e:	697b      	ldr	r3, [r7, #20]
 8016d80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016d82:	697b      	ldr	r3, [r7, #20]
 8016d84:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8016d86:	6978      	ldr	r0, [r7, #20]
 8016d88:	f7ff fa58 	bl	801623c <tcp_next_iss>
 8016d8c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8016d8e:	697b      	ldr	r3, [r7, #20]
 8016d90:	693a      	ldr	r2, [r7, #16]
 8016d92:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8016d94:	697b      	ldr	r3, [r7, #20]
 8016d96:	693a      	ldr	r2, [r7, #16]
 8016d98:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8016d9a:	697b      	ldr	r3, [r7, #20]
 8016d9c:	693a      	ldr	r2, [r7, #16]
 8016d9e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8016da0:	697b      	ldr	r3, [r7, #20]
 8016da2:	693a      	ldr	r2, [r7, #16]
 8016da4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8016da6:	4b35      	ldr	r3, [pc, #212]	@ (8016e7c <tcp_listen_input+0x1e0>)
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	1e5a      	subs	r2, r3, #1
 8016dac:	697b      	ldr	r3, [r7, #20]
 8016dae:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	691a      	ldr	r2, [r3, #16]
 8016db4:	697b      	ldr	r3, [r7, #20]
 8016db6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8016db8:	697b      	ldr	r3, [r7, #20]
 8016dba:	687a      	ldr	r2, [r7, #4]
 8016dbc:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	7a5b      	ldrb	r3, [r3, #9]
 8016dc2:	f003 030c 	and.w	r3, r3, #12
 8016dc6:	b2da      	uxtb	r2, r3
 8016dc8:	697b      	ldr	r3, [r7, #20]
 8016dca:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	7a1a      	ldrb	r2, [r3, #8]
 8016dd0:	697b      	ldr	r3, [r7, #20]
 8016dd2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8016dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8016e90 <tcp_listen_input+0x1f4>)
 8016dd6:	681a      	ldr	r2, [r3, #0]
 8016dd8:	697b      	ldr	r3, [r7, #20]
 8016dda:	60da      	str	r2, [r3, #12]
 8016ddc:	4a2c      	ldr	r2, [pc, #176]	@ (8016e90 <tcp_listen_input+0x1f4>)
 8016dde:	697b      	ldr	r3, [r7, #20]
 8016de0:	6013      	str	r3, [r2, #0]
 8016de2:	f003 fd23 	bl	801a82c <tcp_timer_needed>
 8016de6:	4b2b      	ldr	r3, [pc, #172]	@ (8016e94 <tcp_listen_input+0x1f8>)
 8016de8:	2201      	movs	r2, #1
 8016dea:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8016dec:	6978      	ldr	r0, [r7, #20]
 8016dee:	f001 fd8b 	bl	8018908 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8016df2:	4b23      	ldr	r3, [pc, #140]	@ (8016e80 <tcp_listen_input+0x1e4>)
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	89db      	ldrh	r3, [r3, #14]
 8016df8:	b29a      	uxth	r2, r3
 8016dfa:	697b      	ldr	r3, [r7, #20]
 8016dfc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8016e00:	697b      	ldr	r3, [r7, #20]
 8016e02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016e06:	697b      	ldr	r3, [r7, #20]
 8016e08:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8016e0c:	697b      	ldr	r3, [r7, #20]
 8016e0e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8016e10:	697b      	ldr	r3, [r7, #20]
 8016e12:	3304      	adds	r3, #4
 8016e14:	4618      	mov	r0, r3
 8016e16:	f007 fb95 	bl	801e544 <ip4_route>
 8016e1a:	4601      	mov	r1, r0
 8016e1c:	697b      	ldr	r3, [r7, #20]
 8016e1e:	3304      	adds	r3, #4
 8016e20:	461a      	mov	r2, r3
 8016e22:	4620      	mov	r0, r4
 8016e24:	f7ff fa30 	bl	8016288 <tcp_eff_send_mss_netif>
 8016e28:	4603      	mov	r3, r0
 8016e2a:	461a      	mov	r2, r3
 8016e2c:	697b      	ldr	r3, [r7, #20]
 8016e2e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8016e30:	2112      	movs	r1, #18
 8016e32:	6978      	ldr	r0, [r7, #20]
 8016e34:	f002 fc96 	bl	8019764 <tcp_enqueue_flags>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8016e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d004      	beq.n	8016e4e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8016e44:	2100      	movs	r1, #0
 8016e46:	6978      	ldr	r0, [r7, #20]
 8016e48:	f7fd ff50 	bl	8014cec <tcp_abandon>
      return;
 8016e4c:	e006      	b.n	8016e5c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8016e4e:	6978      	ldr	r0, [r7, #20]
 8016e50:	f002 fd76 	bl	8019940 <tcp_output>
  return;
 8016e54:	e001      	b.n	8016e5a <tcp_listen_input+0x1be>
    return;
 8016e56:	bf00      	nop
 8016e58:	e000      	b.n	8016e5c <tcp_listen_input+0x1c0>
  return;
 8016e5a:	bf00      	nop
}
 8016e5c:	371c      	adds	r7, #28
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	bd90      	pop	{r4, r7, pc}
 8016e62:	bf00      	nop
 8016e64:	2400cb40 	.word	0x2400cb40
 8016e68:	08025088 	.word	0x08025088
 8016e6c:	08025280 	.word	0x08025280
 8016e70:	080250d4 	.word	0x080250d4
 8016e74:	2400cb38 	.word	0x2400cb38
 8016e78:	2400cb3e 	.word	0x2400cb3e
 8016e7c:	2400cb34 	.word	0x2400cb34
 8016e80:	2400cb24 	.word	0x2400cb24
 8016e84:	240099ec 	.word	0x240099ec
 8016e88:	240099f0 	.word	0x240099f0
 8016e8c:	240099dc 	.word	0x240099dc
 8016e90:	2400cb08 	.word	0x2400cb08
 8016e94:	2400cb10 	.word	0x2400cb10

08016e98 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b086      	sub	sp, #24
 8016e9c:	af04      	add	r7, sp, #16
 8016e9e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8016ea0:	4b2f      	ldr	r3, [pc, #188]	@ (8016f60 <tcp_timewait_input+0xc8>)
 8016ea2:	781b      	ldrb	r3, [r3, #0]
 8016ea4:	f003 0304 	and.w	r3, r3, #4
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d153      	bne.n	8016f54 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d106      	bne.n	8016ec0 <tcp_timewait_input+0x28>
 8016eb2:	4b2c      	ldr	r3, [pc, #176]	@ (8016f64 <tcp_timewait_input+0xcc>)
 8016eb4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8016eb8:	492b      	ldr	r1, [pc, #172]	@ (8016f68 <tcp_timewait_input+0xd0>)
 8016eba:	482c      	ldr	r0, [pc, #176]	@ (8016f6c <tcp_timewait_input+0xd4>)
 8016ebc:	f009 fd62 	bl	8020984 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8016ec0:	4b27      	ldr	r3, [pc, #156]	@ (8016f60 <tcp_timewait_input+0xc8>)
 8016ec2:	781b      	ldrb	r3, [r3, #0]
 8016ec4:	f003 0302 	and.w	r3, r3, #2
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d02a      	beq.n	8016f22 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8016ecc:	4b28      	ldr	r3, [pc, #160]	@ (8016f70 <tcp_timewait_input+0xd8>)
 8016ece:	681a      	ldr	r2, [r3, #0]
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ed4:	1ad3      	subs	r3, r2, r3
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	db2d      	blt.n	8016f36 <tcp_timewait_input+0x9e>
 8016eda:	4b25      	ldr	r3, [pc, #148]	@ (8016f70 <tcp_timewait_input+0xd8>)
 8016edc:	681a      	ldr	r2, [r3, #0]
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ee2:	6879      	ldr	r1, [r7, #4]
 8016ee4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016ee6:	440b      	add	r3, r1
 8016ee8:	1ad3      	subs	r3, r2, r3
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	dc23      	bgt.n	8016f36 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016eee:	4b21      	ldr	r3, [pc, #132]	@ (8016f74 <tcp_timewait_input+0xdc>)
 8016ef0:	6819      	ldr	r1, [r3, #0]
 8016ef2:	4b21      	ldr	r3, [pc, #132]	@ (8016f78 <tcp_timewait_input+0xe0>)
 8016ef4:	881b      	ldrh	r3, [r3, #0]
 8016ef6:	461a      	mov	r2, r3
 8016ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8016f70 <tcp_timewait_input+0xd8>)
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016efe:	4b1f      	ldr	r3, [pc, #124]	@ (8016f7c <tcp_timewait_input+0xe4>)
 8016f00:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f02:	885b      	ldrh	r3, [r3, #2]
 8016f04:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016f06:	4a1d      	ldr	r2, [pc, #116]	@ (8016f7c <tcp_timewait_input+0xe4>)
 8016f08:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f0a:	8812      	ldrh	r2, [r2, #0]
 8016f0c:	b292      	uxth	r2, r2
 8016f0e:	9202      	str	r2, [sp, #8]
 8016f10:	9301      	str	r3, [sp, #4]
 8016f12:	4b1b      	ldr	r3, [pc, #108]	@ (8016f80 <tcp_timewait_input+0xe8>)
 8016f14:	9300      	str	r3, [sp, #0]
 8016f16:	4b1b      	ldr	r3, [pc, #108]	@ (8016f84 <tcp_timewait_input+0xec>)
 8016f18:	4602      	mov	r2, r0
 8016f1a:	6878      	ldr	r0, [r7, #4]
 8016f1c:	f003 fac4 	bl	801a4a8 <tcp_rst>
      return;
 8016f20:	e01b      	b.n	8016f5a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8016f22:	4b0f      	ldr	r3, [pc, #60]	@ (8016f60 <tcp_timewait_input+0xc8>)
 8016f24:	781b      	ldrb	r3, [r3, #0]
 8016f26:	f003 0301 	and.w	r3, r3, #1
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d003      	beq.n	8016f36 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8016f2e:	4b16      	ldr	r3, [pc, #88]	@ (8016f88 <tcp_timewait_input+0xf0>)
 8016f30:	681a      	ldr	r2, [r3, #0]
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8016f36:	4b10      	ldr	r3, [pc, #64]	@ (8016f78 <tcp_timewait_input+0xe0>)
 8016f38:	881b      	ldrh	r3, [r3, #0]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d00c      	beq.n	8016f58 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	8b5b      	ldrh	r3, [r3, #26]
 8016f42:	f043 0302 	orr.w	r3, r3, #2
 8016f46:	b29a      	uxth	r2, r3
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016f4c:	6878      	ldr	r0, [r7, #4]
 8016f4e:	f002 fcf7 	bl	8019940 <tcp_output>
  }
  return;
 8016f52:	e001      	b.n	8016f58 <tcp_timewait_input+0xc0>
    return;
 8016f54:	bf00      	nop
 8016f56:	e000      	b.n	8016f5a <tcp_timewait_input+0xc2>
  return;
 8016f58:	bf00      	nop
}
 8016f5a:	3708      	adds	r7, #8
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	bd80      	pop	{r7, pc}
 8016f60:	2400cb40 	.word	0x2400cb40
 8016f64:	08025088 	.word	0x08025088
 8016f68:	080252a0 	.word	0x080252a0
 8016f6c:	080250d4 	.word	0x080250d4
 8016f70:	2400cb34 	.word	0x2400cb34
 8016f74:	2400cb38 	.word	0x2400cb38
 8016f78:	2400cb3e 	.word	0x2400cb3e
 8016f7c:	2400cb24 	.word	0x2400cb24
 8016f80:	240099ec 	.word	0x240099ec
 8016f84:	240099f0 	.word	0x240099f0
 8016f88:	2400cafc 	.word	0x2400cafc

08016f8c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8016f8c:	b590      	push	{r4, r7, lr}
 8016f8e:	b08d      	sub	sp, #52	@ 0x34
 8016f90:	af04      	add	r7, sp, #16
 8016f92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8016f94:	2300      	movs	r3, #0
 8016f96:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8016f98:	2300      	movs	r3, #0
 8016f9a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d106      	bne.n	8016fb0 <tcp_process+0x24>
 8016fa2:	4b9d      	ldr	r3, [pc, #628]	@ (8017218 <tcp_process+0x28c>)
 8016fa4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8016fa8:	499c      	ldr	r1, [pc, #624]	@ (801721c <tcp_process+0x290>)
 8016faa:	489d      	ldr	r0, [pc, #628]	@ (8017220 <tcp_process+0x294>)
 8016fac:	f009 fcea 	bl	8020984 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8016fb0:	4b9c      	ldr	r3, [pc, #624]	@ (8017224 <tcp_process+0x298>)
 8016fb2:	781b      	ldrb	r3, [r3, #0]
 8016fb4:	f003 0304 	and.w	r3, r3, #4
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d04e      	beq.n	801705a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	7d1b      	ldrb	r3, [r3, #20]
 8016fc0:	2b02      	cmp	r3, #2
 8016fc2:	d108      	bne.n	8016fd6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016fc8:	4b97      	ldr	r3, [pc, #604]	@ (8017228 <tcp_process+0x29c>)
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	429a      	cmp	r2, r3
 8016fce:	d123      	bne.n	8017018 <tcp_process+0x8c>
        acceptable = 1;
 8016fd0:	2301      	movs	r3, #1
 8016fd2:	76fb      	strb	r3, [r7, #27]
 8016fd4:	e020      	b.n	8017018 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016fda:	4b94      	ldr	r3, [pc, #592]	@ (801722c <tcp_process+0x2a0>)
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	429a      	cmp	r2, r3
 8016fe0:	d102      	bne.n	8016fe8 <tcp_process+0x5c>
        acceptable = 1;
 8016fe2:	2301      	movs	r3, #1
 8016fe4:	76fb      	strb	r3, [r7, #27]
 8016fe6:	e017      	b.n	8017018 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016fe8:	4b90      	ldr	r3, [pc, #576]	@ (801722c <tcp_process+0x2a0>)
 8016fea:	681a      	ldr	r2, [r3, #0]
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ff0:	1ad3      	subs	r3, r2, r3
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	db10      	blt.n	8017018 <tcp_process+0x8c>
 8016ff6:	4b8d      	ldr	r3, [pc, #564]	@ (801722c <tcp_process+0x2a0>)
 8016ff8:	681a      	ldr	r2, [r3, #0]
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ffe:	6879      	ldr	r1, [r7, #4]
 8017000:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017002:	440b      	add	r3, r1
 8017004:	1ad3      	subs	r3, r2, r3
 8017006:	2b00      	cmp	r3, #0
 8017008:	dc06      	bgt.n	8017018 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	8b5b      	ldrh	r3, [r3, #26]
 801700e:	f043 0302 	orr.w	r3, r3, #2
 8017012:	b29a      	uxth	r2, r3
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8017018:	7efb      	ldrb	r3, [r7, #27]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d01b      	beq.n	8017056 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	7d1b      	ldrb	r3, [r3, #20]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d106      	bne.n	8017034 <tcp_process+0xa8>
 8017026:	4b7c      	ldr	r3, [pc, #496]	@ (8017218 <tcp_process+0x28c>)
 8017028:	f44f 724e 	mov.w	r2, #824	@ 0x338
 801702c:	4980      	ldr	r1, [pc, #512]	@ (8017230 <tcp_process+0x2a4>)
 801702e:	487c      	ldr	r0, [pc, #496]	@ (8017220 <tcp_process+0x294>)
 8017030:	f009 fca8 	bl	8020984 <iprintf>
      recv_flags |= TF_RESET;
 8017034:	4b7f      	ldr	r3, [pc, #508]	@ (8017234 <tcp_process+0x2a8>)
 8017036:	781b      	ldrb	r3, [r3, #0]
 8017038:	f043 0308 	orr.w	r3, r3, #8
 801703c:	b2da      	uxtb	r2, r3
 801703e:	4b7d      	ldr	r3, [pc, #500]	@ (8017234 <tcp_process+0x2a8>)
 8017040:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	8b5b      	ldrh	r3, [r3, #26]
 8017046:	f023 0301 	bic.w	r3, r3, #1
 801704a:	b29a      	uxth	r2, r3
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8017050:	f06f 030d 	mvn.w	r3, #13
 8017054:	e37a      	b.n	801774c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8017056:	2300      	movs	r3, #0
 8017058:	e378      	b.n	801774c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801705a:	4b72      	ldr	r3, [pc, #456]	@ (8017224 <tcp_process+0x298>)
 801705c:	781b      	ldrb	r3, [r3, #0]
 801705e:	f003 0302 	and.w	r3, r3, #2
 8017062:	2b00      	cmp	r3, #0
 8017064:	d010      	beq.n	8017088 <tcp_process+0xfc>
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	7d1b      	ldrb	r3, [r3, #20]
 801706a:	2b02      	cmp	r3, #2
 801706c:	d00c      	beq.n	8017088 <tcp_process+0xfc>
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	7d1b      	ldrb	r3, [r3, #20]
 8017072:	2b03      	cmp	r3, #3
 8017074:	d008      	beq.n	8017088 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	8b5b      	ldrh	r3, [r3, #26]
 801707a:	f043 0302 	orr.w	r3, r3, #2
 801707e:	b29a      	uxth	r2, r3
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8017084:	2300      	movs	r3, #0
 8017086:	e361      	b.n	801774c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	8b5b      	ldrh	r3, [r3, #26]
 801708c:	f003 0310 	and.w	r3, r3, #16
 8017090:	2b00      	cmp	r3, #0
 8017092:	d103      	bne.n	801709c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8017094:	4b68      	ldr	r3, [pc, #416]	@ (8017238 <tcp_process+0x2ac>)
 8017096:	681a      	ldr	r2, [r3, #0]
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	2200      	movs	r2, #0
 80170a0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	2200      	movs	r2, #0
 80170a8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80170ac:	6878      	ldr	r0, [r7, #4]
 80170ae:	f001 fc2b 	bl	8018908 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	7d1b      	ldrb	r3, [r3, #20]
 80170b6:	3b02      	subs	r3, #2
 80170b8:	2b07      	cmp	r3, #7
 80170ba:	f200 8337 	bhi.w	801772c <tcp_process+0x7a0>
 80170be:	a201      	add	r2, pc, #4	@ (adr r2, 80170c4 <tcp_process+0x138>)
 80170c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170c4:	080170e5 	.word	0x080170e5
 80170c8:	08017315 	.word	0x08017315
 80170cc:	0801748d 	.word	0x0801748d
 80170d0:	080174b7 	.word	0x080174b7
 80170d4:	080175db 	.word	0x080175db
 80170d8:	0801748d 	.word	0x0801748d
 80170dc:	08017667 	.word	0x08017667
 80170e0:	080176f7 	.word	0x080176f7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80170e4:	4b4f      	ldr	r3, [pc, #316]	@ (8017224 <tcp_process+0x298>)
 80170e6:	781b      	ldrb	r3, [r3, #0]
 80170e8:	f003 0310 	and.w	r3, r3, #16
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	f000 80e4 	beq.w	80172ba <tcp_process+0x32e>
 80170f2:	4b4c      	ldr	r3, [pc, #304]	@ (8017224 <tcp_process+0x298>)
 80170f4:	781b      	ldrb	r3, [r3, #0]
 80170f6:	f003 0302 	and.w	r3, r3, #2
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	f000 80dd 	beq.w	80172ba <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017104:	1c5a      	adds	r2, r3, #1
 8017106:	4b48      	ldr	r3, [pc, #288]	@ (8017228 <tcp_process+0x29c>)
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	429a      	cmp	r2, r3
 801710c:	f040 80d5 	bne.w	80172ba <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8017110:	4b46      	ldr	r3, [pc, #280]	@ (801722c <tcp_process+0x2a0>)
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	1c5a      	adds	r2, r3, #1
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8017122:	4b41      	ldr	r3, [pc, #260]	@ (8017228 <tcp_process+0x29c>)
 8017124:	681a      	ldr	r2, [r3, #0]
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801712a:	4b44      	ldr	r3, [pc, #272]	@ (801723c <tcp_process+0x2b0>)
 801712c:	681b      	ldr	r3, [r3, #0]
 801712e:	89db      	ldrh	r3, [r3, #14]
 8017130:	b29a      	uxth	r2, r3
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8017144:	4b39      	ldr	r3, [pc, #228]	@ (801722c <tcp_process+0x2a0>)
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	1e5a      	subs	r2, r3, #1
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	2204      	movs	r2, #4
 8017152:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	3304      	adds	r3, #4
 801715c:	4618      	mov	r0, r3
 801715e:	f007 f9f1 	bl	801e544 <ip4_route>
 8017162:	4601      	mov	r1, r0
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	3304      	adds	r3, #4
 8017168:	461a      	mov	r2, r3
 801716a:	4620      	mov	r0, r4
 801716c:	f7ff f88c 	bl	8016288 <tcp_eff_send_mss_netif>
 8017170:	4603      	mov	r3, r0
 8017172:	461a      	mov	r2, r3
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801717c:	009a      	lsls	r2, r3, #2
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017182:	005b      	lsls	r3, r3, #1
 8017184:	f241 111c 	movw	r1, #4380	@ 0x111c
 8017188:	428b      	cmp	r3, r1
 801718a:	bf38      	it	cc
 801718c:	460b      	movcc	r3, r1
 801718e:	429a      	cmp	r2, r3
 8017190:	d204      	bcs.n	801719c <tcp_process+0x210>
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017196:	009b      	lsls	r3, r3, #2
 8017198:	b29b      	uxth	r3, r3
 801719a:	e00d      	b.n	80171b8 <tcp_process+0x22c>
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80171a0:	005b      	lsls	r3, r3, #1
 80171a2:	f241 121c 	movw	r2, #4380	@ 0x111c
 80171a6:	4293      	cmp	r3, r2
 80171a8:	d904      	bls.n	80171b4 <tcp_process+0x228>
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80171ae:	005b      	lsls	r3, r3, #1
 80171b0:	b29b      	uxth	r3, r3
 80171b2:	e001      	b.n	80171b8 <tcp_process+0x22c>
 80171b4:	f241 131c 	movw	r3, #4380	@ 0x111c
 80171b8:	687a      	ldr	r2, [r7, #4]
 80171ba:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d106      	bne.n	80171d6 <tcp_process+0x24a>
 80171c8:	4b13      	ldr	r3, [pc, #76]	@ (8017218 <tcp_process+0x28c>)
 80171ca:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80171ce:	491c      	ldr	r1, [pc, #112]	@ (8017240 <tcp_process+0x2b4>)
 80171d0:	4813      	ldr	r0, [pc, #76]	@ (8017220 <tcp_process+0x294>)
 80171d2:	f009 fbd7 	bl	8020984 <iprintf>
        --pcb->snd_queuelen;
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80171dc:	3b01      	subs	r3, #1
 80171de:	b29a      	uxth	r2, r3
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80171ea:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80171ec:	69fb      	ldr	r3, [r7, #28]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d12a      	bne.n	8017248 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80171f6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80171f8:	69fb      	ldr	r3, [r7, #28]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d106      	bne.n	801720c <tcp_process+0x280>
 80171fe:	4b06      	ldr	r3, [pc, #24]	@ (8017218 <tcp_process+0x28c>)
 8017200:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8017204:	490f      	ldr	r1, [pc, #60]	@ (8017244 <tcp_process+0x2b8>)
 8017206:	4806      	ldr	r0, [pc, #24]	@ (8017220 <tcp_process+0x294>)
 8017208:	f009 fbbc 	bl	8020984 <iprintf>
          pcb->unsent = rseg->next;
 801720c:	69fb      	ldr	r3, [r7, #28]
 801720e:	681a      	ldr	r2, [r3, #0]
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	66da      	str	r2, [r3, #108]	@ 0x6c
 8017214:	e01c      	b.n	8017250 <tcp_process+0x2c4>
 8017216:	bf00      	nop
 8017218:	08025088 	.word	0x08025088
 801721c:	080252c0 	.word	0x080252c0
 8017220:	080250d4 	.word	0x080250d4
 8017224:	2400cb40 	.word	0x2400cb40
 8017228:	2400cb38 	.word	0x2400cb38
 801722c:	2400cb34 	.word	0x2400cb34
 8017230:	080252dc 	.word	0x080252dc
 8017234:	2400cb41 	.word	0x2400cb41
 8017238:	2400cafc 	.word	0x2400cafc
 801723c:	2400cb24 	.word	0x2400cb24
 8017240:	080252fc 	.word	0x080252fc
 8017244:	08025314 	.word	0x08025314
        } else {
          pcb->unacked = rseg->next;
 8017248:	69fb      	ldr	r3, [r7, #28]
 801724a:	681a      	ldr	r2, [r3, #0]
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8017250:	69f8      	ldr	r0, [r7, #28]
 8017252:	f7fe fc54 	bl	8015afe <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801725a:	2b00      	cmp	r3, #0
 801725c:	d104      	bne.n	8017268 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017264:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017266:	e006      	b.n	8017276 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	2200      	movs	r2, #0
 801726c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	2200      	movs	r2, #0
 8017272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801727c:	2b00      	cmp	r3, #0
 801727e:	d00a      	beq.n	8017296 <tcp_process+0x30a>
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017286:	687a      	ldr	r2, [r7, #4]
 8017288:	6910      	ldr	r0, [r2, #16]
 801728a:	2200      	movs	r2, #0
 801728c:	6879      	ldr	r1, [r7, #4]
 801728e:	4798      	blx	r3
 8017290:	4603      	mov	r3, r0
 8017292:	76bb      	strb	r3, [r7, #26]
 8017294:	e001      	b.n	801729a <tcp_process+0x30e>
 8017296:	2300      	movs	r3, #0
 8017298:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801729a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801729e:	f113 0f0d 	cmn.w	r3, #13
 80172a2:	d102      	bne.n	80172aa <tcp_process+0x31e>
          return ERR_ABRT;
 80172a4:	f06f 030c 	mvn.w	r3, #12
 80172a8:	e250      	b.n	801774c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	8b5b      	ldrh	r3, [r3, #26]
 80172ae:	f043 0302 	orr.w	r3, r3, #2
 80172b2:	b29a      	uxth	r2, r3
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80172b8:	e23a      	b.n	8017730 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80172ba:	4b98      	ldr	r3, [pc, #608]	@ (801751c <tcp_process+0x590>)
 80172bc:	781b      	ldrb	r3, [r3, #0]
 80172be:	f003 0310 	and.w	r3, r3, #16
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	f000 8234 	beq.w	8017730 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80172c8:	4b95      	ldr	r3, [pc, #596]	@ (8017520 <tcp_process+0x594>)
 80172ca:	6819      	ldr	r1, [r3, #0]
 80172cc:	4b95      	ldr	r3, [pc, #596]	@ (8017524 <tcp_process+0x598>)
 80172ce:	881b      	ldrh	r3, [r3, #0]
 80172d0:	461a      	mov	r2, r3
 80172d2:	4b95      	ldr	r3, [pc, #596]	@ (8017528 <tcp_process+0x59c>)
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80172d8:	4b94      	ldr	r3, [pc, #592]	@ (801752c <tcp_process+0x5a0>)
 80172da:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80172dc:	885b      	ldrh	r3, [r3, #2]
 80172de:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80172e0:	4a92      	ldr	r2, [pc, #584]	@ (801752c <tcp_process+0x5a0>)
 80172e2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80172e4:	8812      	ldrh	r2, [r2, #0]
 80172e6:	b292      	uxth	r2, r2
 80172e8:	9202      	str	r2, [sp, #8]
 80172ea:	9301      	str	r3, [sp, #4]
 80172ec:	4b90      	ldr	r3, [pc, #576]	@ (8017530 <tcp_process+0x5a4>)
 80172ee:	9300      	str	r3, [sp, #0]
 80172f0:	4b90      	ldr	r3, [pc, #576]	@ (8017534 <tcp_process+0x5a8>)
 80172f2:	4602      	mov	r2, r0
 80172f4:	6878      	ldr	r0, [r7, #4]
 80172f6:	f003 f8d7 	bl	801a4a8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017300:	2b05      	cmp	r3, #5
 8017302:	f200 8215 	bhi.w	8017730 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	2200      	movs	r2, #0
 801730a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 801730c:	6878      	ldr	r0, [r7, #4]
 801730e:	f002 fea3 	bl	801a058 <tcp_rexmit_rto>
      break;
 8017312:	e20d      	b.n	8017730 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017314:	4b81      	ldr	r3, [pc, #516]	@ (801751c <tcp_process+0x590>)
 8017316:	781b      	ldrb	r3, [r3, #0]
 8017318:	f003 0310 	and.w	r3, r3, #16
 801731c:	2b00      	cmp	r3, #0
 801731e:	f000 80a1 	beq.w	8017464 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017322:	4b7f      	ldr	r3, [pc, #508]	@ (8017520 <tcp_process+0x594>)
 8017324:	681a      	ldr	r2, [r3, #0]
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801732a:	1ad3      	subs	r3, r2, r3
 801732c:	3b01      	subs	r3, #1
 801732e:	2b00      	cmp	r3, #0
 8017330:	db7e      	blt.n	8017430 <tcp_process+0x4a4>
 8017332:	4b7b      	ldr	r3, [pc, #492]	@ (8017520 <tcp_process+0x594>)
 8017334:	681a      	ldr	r2, [r3, #0]
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801733a:	1ad3      	subs	r3, r2, r3
 801733c:	2b00      	cmp	r3, #0
 801733e:	dc77      	bgt.n	8017430 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	2204      	movs	r2, #4
 8017344:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801734a:	2b00      	cmp	r3, #0
 801734c:	d102      	bne.n	8017354 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801734e:	23fa      	movs	r3, #250	@ 0xfa
 8017350:	76bb      	strb	r3, [r7, #26]
 8017352:	e01d      	b.n	8017390 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017358:	699b      	ldr	r3, [r3, #24]
 801735a:	2b00      	cmp	r3, #0
 801735c:	d106      	bne.n	801736c <tcp_process+0x3e0>
 801735e:	4b76      	ldr	r3, [pc, #472]	@ (8017538 <tcp_process+0x5ac>)
 8017360:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8017364:	4975      	ldr	r1, [pc, #468]	@ (801753c <tcp_process+0x5b0>)
 8017366:	4876      	ldr	r0, [pc, #472]	@ (8017540 <tcp_process+0x5b4>)
 8017368:	f009 fb0c 	bl	8020984 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017370:	699b      	ldr	r3, [r3, #24]
 8017372:	2b00      	cmp	r3, #0
 8017374:	d00a      	beq.n	801738c <tcp_process+0x400>
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801737a:	699b      	ldr	r3, [r3, #24]
 801737c:	687a      	ldr	r2, [r7, #4]
 801737e:	6910      	ldr	r0, [r2, #16]
 8017380:	2200      	movs	r2, #0
 8017382:	6879      	ldr	r1, [r7, #4]
 8017384:	4798      	blx	r3
 8017386:	4603      	mov	r3, r0
 8017388:	76bb      	strb	r3, [r7, #26]
 801738a:	e001      	b.n	8017390 <tcp_process+0x404>
 801738c:	23f0      	movs	r3, #240	@ 0xf0
 801738e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8017390:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017394:	2b00      	cmp	r3, #0
 8017396:	d00a      	beq.n	80173ae <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8017398:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801739c:	f113 0f0d 	cmn.w	r3, #13
 80173a0:	d002      	beq.n	80173a8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80173a2:	6878      	ldr	r0, [r7, #4]
 80173a4:	f7fd fd60 	bl	8014e68 <tcp_abort>
            }
            return ERR_ABRT;
 80173a8:	f06f 030c 	mvn.w	r3, #12
 80173ac:	e1ce      	b.n	801774c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80173ae:	6878      	ldr	r0, [r7, #4]
 80173b0:	f000 fae0 	bl	8017974 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80173b4:	4b63      	ldr	r3, [pc, #396]	@ (8017544 <tcp_process+0x5b8>)
 80173b6:	881b      	ldrh	r3, [r3, #0]
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d005      	beq.n	80173c8 <tcp_process+0x43c>
            recv_acked--;
 80173bc:	4b61      	ldr	r3, [pc, #388]	@ (8017544 <tcp_process+0x5b8>)
 80173be:	881b      	ldrh	r3, [r3, #0]
 80173c0:	3b01      	subs	r3, #1
 80173c2:	b29a      	uxth	r2, r3
 80173c4:	4b5f      	ldr	r3, [pc, #380]	@ (8017544 <tcp_process+0x5b8>)
 80173c6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80173cc:	009a      	lsls	r2, r3, #2
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80173d2:	005b      	lsls	r3, r3, #1
 80173d4:	f241 111c 	movw	r1, #4380	@ 0x111c
 80173d8:	428b      	cmp	r3, r1
 80173da:	bf38      	it	cc
 80173dc:	460b      	movcc	r3, r1
 80173de:	429a      	cmp	r2, r3
 80173e0:	d204      	bcs.n	80173ec <tcp_process+0x460>
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80173e6:	009b      	lsls	r3, r3, #2
 80173e8:	b29b      	uxth	r3, r3
 80173ea:	e00d      	b.n	8017408 <tcp_process+0x47c>
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80173f0:	005b      	lsls	r3, r3, #1
 80173f2:	f241 121c 	movw	r2, #4380	@ 0x111c
 80173f6:	4293      	cmp	r3, r2
 80173f8:	d904      	bls.n	8017404 <tcp_process+0x478>
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80173fe:	005b      	lsls	r3, r3, #1
 8017400:	b29b      	uxth	r3, r3
 8017402:	e001      	b.n	8017408 <tcp_process+0x47c>
 8017404:	f241 131c 	movw	r3, #4380	@ 0x111c
 8017408:	687a      	ldr	r2, [r7, #4]
 801740a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801740e:	4b4e      	ldr	r3, [pc, #312]	@ (8017548 <tcp_process+0x5bc>)
 8017410:	781b      	ldrb	r3, [r3, #0]
 8017412:	f003 0320 	and.w	r3, r3, #32
 8017416:	2b00      	cmp	r3, #0
 8017418:	d037      	beq.n	801748a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	8b5b      	ldrh	r3, [r3, #26]
 801741e:	f043 0302 	orr.w	r3, r3, #2
 8017422:	b29a      	uxth	r2, r3
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	2207      	movs	r2, #7
 801742c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801742e:	e02c      	b.n	801748a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017430:	4b3b      	ldr	r3, [pc, #236]	@ (8017520 <tcp_process+0x594>)
 8017432:	6819      	ldr	r1, [r3, #0]
 8017434:	4b3b      	ldr	r3, [pc, #236]	@ (8017524 <tcp_process+0x598>)
 8017436:	881b      	ldrh	r3, [r3, #0]
 8017438:	461a      	mov	r2, r3
 801743a:	4b3b      	ldr	r3, [pc, #236]	@ (8017528 <tcp_process+0x59c>)
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017440:	4b3a      	ldr	r3, [pc, #232]	@ (801752c <tcp_process+0x5a0>)
 8017442:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017444:	885b      	ldrh	r3, [r3, #2]
 8017446:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017448:	4a38      	ldr	r2, [pc, #224]	@ (801752c <tcp_process+0x5a0>)
 801744a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801744c:	8812      	ldrh	r2, [r2, #0]
 801744e:	b292      	uxth	r2, r2
 8017450:	9202      	str	r2, [sp, #8]
 8017452:	9301      	str	r3, [sp, #4]
 8017454:	4b36      	ldr	r3, [pc, #216]	@ (8017530 <tcp_process+0x5a4>)
 8017456:	9300      	str	r3, [sp, #0]
 8017458:	4b36      	ldr	r3, [pc, #216]	@ (8017534 <tcp_process+0x5a8>)
 801745a:	4602      	mov	r2, r0
 801745c:	6878      	ldr	r0, [r7, #4]
 801745e:	f003 f823 	bl	801a4a8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8017462:	e167      	b.n	8017734 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8017464:	4b2d      	ldr	r3, [pc, #180]	@ (801751c <tcp_process+0x590>)
 8017466:	781b      	ldrb	r3, [r3, #0]
 8017468:	f003 0302 	and.w	r3, r3, #2
 801746c:	2b00      	cmp	r3, #0
 801746e:	f000 8161 	beq.w	8017734 <tcp_process+0x7a8>
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017476:	1e5a      	subs	r2, r3, #1
 8017478:	4b2b      	ldr	r3, [pc, #172]	@ (8017528 <tcp_process+0x59c>)
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	429a      	cmp	r2, r3
 801747e:	f040 8159 	bne.w	8017734 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8017482:	6878      	ldr	r0, [r7, #4]
 8017484:	f002 fe0a 	bl	801a09c <tcp_rexmit>
      break;
 8017488:	e154      	b.n	8017734 <tcp_process+0x7a8>
 801748a:	e153      	b.n	8017734 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801748c:	6878      	ldr	r0, [r7, #4]
 801748e:	f000 fa71 	bl	8017974 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8017492:	4b2d      	ldr	r3, [pc, #180]	@ (8017548 <tcp_process+0x5bc>)
 8017494:	781b      	ldrb	r3, [r3, #0]
 8017496:	f003 0320 	and.w	r3, r3, #32
 801749a:	2b00      	cmp	r3, #0
 801749c:	f000 814c 	beq.w	8017738 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	8b5b      	ldrh	r3, [r3, #26]
 80174a4:	f043 0302 	orr.w	r3, r3, #2
 80174a8:	b29a      	uxth	r2, r3
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	2207      	movs	r2, #7
 80174b2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80174b4:	e140      	b.n	8017738 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80174b6:	6878      	ldr	r0, [r7, #4]
 80174b8:	f000 fa5c 	bl	8017974 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80174bc:	4b22      	ldr	r3, [pc, #136]	@ (8017548 <tcp_process+0x5bc>)
 80174be:	781b      	ldrb	r3, [r3, #0]
 80174c0:	f003 0320 	and.w	r3, r3, #32
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d071      	beq.n	80175ac <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80174c8:	4b14      	ldr	r3, [pc, #80]	@ (801751c <tcp_process+0x590>)
 80174ca:	781b      	ldrb	r3, [r3, #0]
 80174cc:	f003 0310 	and.w	r3, r3, #16
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d060      	beq.n	8017596 <tcp_process+0x60a>
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80174d8:	4b11      	ldr	r3, [pc, #68]	@ (8017520 <tcp_process+0x594>)
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	429a      	cmp	r2, r3
 80174de:	d15a      	bne.n	8017596 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d156      	bne.n	8017596 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	8b5b      	ldrh	r3, [r3, #26]
 80174ec:	f043 0302 	orr.w	r3, r3, #2
 80174f0:	b29a      	uxth	r2, r3
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80174f6:	6878      	ldr	r0, [r7, #4]
 80174f8:	f7fe fdbc 	bl	8016074 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80174fc:	4b13      	ldr	r3, [pc, #76]	@ (801754c <tcp_process+0x5c0>)
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	687a      	ldr	r2, [r7, #4]
 8017502:	429a      	cmp	r2, r3
 8017504:	d105      	bne.n	8017512 <tcp_process+0x586>
 8017506:	4b11      	ldr	r3, [pc, #68]	@ (801754c <tcp_process+0x5c0>)
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	68db      	ldr	r3, [r3, #12]
 801750c:	4a0f      	ldr	r2, [pc, #60]	@ (801754c <tcp_process+0x5c0>)
 801750e:	6013      	str	r3, [r2, #0]
 8017510:	e02e      	b.n	8017570 <tcp_process+0x5e4>
 8017512:	4b0e      	ldr	r3, [pc, #56]	@ (801754c <tcp_process+0x5c0>)
 8017514:	681b      	ldr	r3, [r3, #0]
 8017516:	617b      	str	r3, [r7, #20]
 8017518:	e027      	b.n	801756a <tcp_process+0x5de>
 801751a:	bf00      	nop
 801751c:	2400cb40 	.word	0x2400cb40
 8017520:	2400cb38 	.word	0x2400cb38
 8017524:	2400cb3e 	.word	0x2400cb3e
 8017528:	2400cb34 	.word	0x2400cb34
 801752c:	2400cb24 	.word	0x2400cb24
 8017530:	240099ec 	.word	0x240099ec
 8017534:	240099f0 	.word	0x240099f0
 8017538:	08025088 	.word	0x08025088
 801753c:	08025328 	.word	0x08025328
 8017540:	080250d4 	.word	0x080250d4
 8017544:	2400cb3c 	.word	0x2400cb3c
 8017548:	2400cb41 	.word	0x2400cb41
 801754c:	2400cb08 	.word	0x2400cb08
 8017550:	697b      	ldr	r3, [r7, #20]
 8017552:	68db      	ldr	r3, [r3, #12]
 8017554:	687a      	ldr	r2, [r7, #4]
 8017556:	429a      	cmp	r2, r3
 8017558:	d104      	bne.n	8017564 <tcp_process+0x5d8>
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	68da      	ldr	r2, [r3, #12]
 801755e:	697b      	ldr	r3, [r7, #20]
 8017560:	60da      	str	r2, [r3, #12]
 8017562:	e005      	b.n	8017570 <tcp_process+0x5e4>
 8017564:	697b      	ldr	r3, [r7, #20]
 8017566:	68db      	ldr	r3, [r3, #12]
 8017568:	617b      	str	r3, [r7, #20]
 801756a:	697b      	ldr	r3, [r7, #20]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d1ef      	bne.n	8017550 <tcp_process+0x5c4>
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	2200      	movs	r2, #0
 8017574:	60da      	str	r2, [r3, #12]
 8017576:	4b77      	ldr	r3, [pc, #476]	@ (8017754 <tcp_process+0x7c8>)
 8017578:	2201      	movs	r2, #1
 801757a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	220a      	movs	r2, #10
 8017580:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8017582:	4b75      	ldr	r3, [pc, #468]	@ (8017758 <tcp_process+0x7cc>)
 8017584:	681a      	ldr	r2, [r3, #0]
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	60da      	str	r2, [r3, #12]
 801758a:	4a73      	ldr	r2, [pc, #460]	@ (8017758 <tcp_process+0x7cc>)
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	6013      	str	r3, [r2, #0]
 8017590:	f003 f94c 	bl	801a82c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8017594:	e0d2      	b.n	801773c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	8b5b      	ldrh	r3, [r3, #26]
 801759a:	f043 0302 	orr.w	r3, r3, #2
 801759e:	b29a      	uxth	r2, r3
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	2208      	movs	r2, #8
 80175a8:	751a      	strb	r2, [r3, #20]
      break;
 80175aa:	e0c7      	b.n	801773c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80175ac:	4b6b      	ldr	r3, [pc, #428]	@ (801775c <tcp_process+0x7d0>)
 80175ae:	781b      	ldrb	r3, [r3, #0]
 80175b0:	f003 0310 	and.w	r3, r3, #16
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	f000 80c1 	beq.w	801773c <tcp_process+0x7b0>
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80175be:	4b68      	ldr	r3, [pc, #416]	@ (8017760 <tcp_process+0x7d4>)
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	429a      	cmp	r2, r3
 80175c4:	f040 80ba 	bne.w	801773c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	f040 80b5 	bne.w	801773c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	2206      	movs	r2, #6
 80175d6:	751a      	strb	r2, [r3, #20]
      break;
 80175d8:	e0b0      	b.n	801773c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80175da:	6878      	ldr	r0, [r7, #4]
 80175dc:	f000 f9ca 	bl	8017974 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80175e0:	4b60      	ldr	r3, [pc, #384]	@ (8017764 <tcp_process+0x7d8>)
 80175e2:	781b      	ldrb	r3, [r3, #0]
 80175e4:	f003 0320 	and.w	r3, r3, #32
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	f000 80a9 	beq.w	8017740 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	8b5b      	ldrh	r3, [r3, #26]
 80175f2:	f043 0302 	orr.w	r3, r3, #2
 80175f6:	b29a      	uxth	r2, r3
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80175fc:	6878      	ldr	r0, [r7, #4]
 80175fe:	f7fe fd39 	bl	8016074 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017602:	4b59      	ldr	r3, [pc, #356]	@ (8017768 <tcp_process+0x7dc>)
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	687a      	ldr	r2, [r7, #4]
 8017608:	429a      	cmp	r2, r3
 801760a:	d105      	bne.n	8017618 <tcp_process+0x68c>
 801760c:	4b56      	ldr	r3, [pc, #344]	@ (8017768 <tcp_process+0x7dc>)
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	68db      	ldr	r3, [r3, #12]
 8017612:	4a55      	ldr	r2, [pc, #340]	@ (8017768 <tcp_process+0x7dc>)
 8017614:	6013      	str	r3, [r2, #0]
 8017616:	e013      	b.n	8017640 <tcp_process+0x6b4>
 8017618:	4b53      	ldr	r3, [pc, #332]	@ (8017768 <tcp_process+0x7dc>)
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	613b      	str	r3, [r7, #16]
 801761e:	e00c      	b.n	801763a <tcp_process+0x6ae>
 8017620:	693b      	ldr	r3, [r7, #16]
 8017622:	68db      	ldr	r3, [r3, #12]
 8017624:	687a      	ldr	r2, [r7, #4]
 8017626:	429a      	cmp	r2, r3
 8017628:	d104      	bne.n	8017634 <tcp_process+0x6a8>
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	68da      	ldr	r2, [r3, #12]
 801762e:	693b      	ldr	r3, [r7, #16]
 8017630:	60da      	str	r2, [r3, #12]
 8017632:	e005      	b.n	8017640 <tcp_process+0x6b4>
 8017634:	693b      	ldr	r3, [r7, #16]
 8017636:	68db      	ldr	r3, [r3, #12]
 8017638:	613b      	str	r3, [r7, #16]
 801763a:	693b      	ldr	r3, [r7, #16]
 801763c:	2b00      	cmp	r3, #0
 801763e:	d1ef      	bne.n	8017620 <tcp_process+0x694>
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	2200      	movs	r2, #0
 8017644:	60da      	str	r2, [r3, #12]
 8017646:	4b43      	ldr	r3, [pc, #268]	@ (8017754 <tcp_process+0x7c8>)
 8017648:	2201      	movs	r2, #1
 801764a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	220a      	movs	r2, #10
 8017650:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017652:	4b41      	ldr	r3, [pc, #260]	@ (8017758 <tcp_process+0x7cc>)
 8017654:	681a      	ldr	r2, [r3, #0]
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	60da      	str	r2, [r3, #12]
 801765a:	4a3f      	ldr	r2, [pc, #252]	@ (8017758 <tcp_process+0x7cc>)
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	6013      	str	r3, [r2, #0]
 8017660:	f003 f8e4 	bl	801a82c <tcp_timer_needed>
      }
      break;
 8017664:	e06c      	b.n	8017740 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8017666:	6878      	ldr	r0, [r7, #4]
 8017668:	f000 f984 	bl	8017974 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801766c:	4b3b      	ldr	r3, [pc, #236]	@ (801775c <tcp_process+0x7d0>)
 801766e:	781b      	ldrb	r3, [r3, #0]
 8017670:	f003 0310 	and.w	r3, r3, #16
 8017674:	2b00      	cmp	r3, #0
 8017676:	d065      	beq.n	8017744 <tcp_process+0x7b8>
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801767c:	4b38      	ldr	r3, [pc, #224]	@ (8017760 <tcp_process+0x7d4>)
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	429a      	cmp	r2, r3
 8017682:	d15f      	bne.n	8017744 <tcp_process+0x7b8>
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017688:	2b00      	cmp	r3, #0
 801768a:	d15b      	bne.n	8017744 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801768c:	6878      	ldr	r0, [r7, #4]
 801768e:	f7fe fcf1 	bl	8016074 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017692:	4b35      	ldr	r3, [pc, #212]	@ (8017768 <tcp_process+0x7dc>)
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	687a      	ldr	r2, [r7, #4]
 8017698:	429a      	cmp	r2, r3
 801769a:	d105      	bne.n	80176a8 <tcp_process+0x71c>
 801769c:	4b32      	ldr	r3, [pc, #200]	@ (8017768 <tcp_process+0x7dc>)
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	68db      	ldr	r3, [r3, #12]
 80176a2:	4a31      	ldr	r2, [pc, #196]	@ (8017768 <tcp_process+0x7dc>)
 80176a4:	6013      	str	r3, [r2, #0]
 80176a6:	e013      	b.n	80176d0 <tcp_process+0x744>
 80176a8:	4b2f      	ldr	r3, [pc, #188]	@ (8017768 <tcp_process+0x7dc>)
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	60fb      	str	r3, [r7, #12]
 80176ae:	e00c      	b.n	80176ca <tcp_process+0x73e>
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	68db      	ldr	r3, [r3, #12]
 80176b4:	687a      	ldr	r2, [r7, #4]
 80176b6:	429a      	cmp	r2, r3
 80176b8:	d104      	bne.n	80176c4 <tcp_process+0x738>
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	68da      	ldr	r2, [r3, #12]
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	60da      	str	r2, [r3, #12]
 80176c2:	e005      	b.n	80176d0 <tcp_process+0x744>
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	68db      	ldr	r3, [r3, #12]
 80176c8:	60fb      	str	r3, [r7, #12]
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d1ef      	bne.n	80176b0 <tcp_process+0x724>
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	2200      	movs	r2, #0
 80176d4:	60da      	str	r2, [r3, #12]
 80176d6:	4b1f      	ldr	r3, [pc, #124]	@ (8017754 <tcp_process+0x7c8>)
 80176d8:	2201      	movs	r2, #1
 80176da:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	220a      	movs	r2, #10
 80176e0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80176e2:	4b1d      	ldr	r3, [pc, #116]	@ (8017758 <tcp_process+0x7cc>)
 80176e4:	681a      	ldr	r2, [r3, #0]
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	60da      	str	r2, [r3, #12]
 80176ea:	4a1b      	ldr	r2, [pc, #108]	@ (8017758 <tcp_process+0x7cc>)
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	6013      	str	r3, [r2, #0]
 80176f0:	f003 f89c 	bl	801a82c <tcp_timer_needed>
      }
      break;
 80176f4:	e026      	b.n	8017744 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80176f6:	6878      	ldr	r0, [r7, #4]
 80176f8:	f000 f93c 	bl	8017974 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80176fc:	4b17      	ldr	r3, [pc, #92]	@ (801775c <tcp_process+0x7d0>)
 80176fe:	781b      	ldrb	r3, [r3, #0]
 8017700:	f003 0310 	and.w	r3, r3, #16
 8017704:	2b00      	cmp	r3, #0
 8017706:	d01f      	beq.n	8017748 <tcp_process+0x7bc>
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801770c:	4b14      	ldr	r3, [pc, #80]	@ (8017760 <tcp_process+0x7d4>)
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	429a      	cmp	r2, r3
 8017712:	d119      	bne.n	8017748 <tcp_process+0x7bc>
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017718:	2b00      	cmp	r3, #0
 801771a:	d115      	bne.n	8017748 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801771c:	4b11      	ldr	r3, [pc, #68]	@ (8017764 <tcp_process+0x7d8>)
 801771e:	781b      	ldrb	r3, [r3, #0]
 8017720:	f043 0310 	orr.w	r3, r3, #16
 8017724:	b2da      	uxtb	r2, r3
 8017726:	4b0f      	ldr	r3, [pc, #60]	@ (8017764 <tcp_process+0x7d8>)
 8017728:	701a      	strb	r2, [r3, #0]
      }
      break;
 801772a:	e00d      	b.n	8017748 <tcp_process+0x7bc>
    default:
      break;
 801772c:	bf00      	nop
 801772e:	e00c      	b.n	801774a <tcp_process+0x7be>
      break;
 8017730:	bf00      	nop
 8017732:	e00a      	b.n	801774a <tcp_process+0x7be>
      break;
 8017734:	bf00      	nop
 8017736:	e008      	b.n	801774a <tcp_process+0x7be>
      break;
 8017738:	bf00      	nop
 801773a:	e006      	b.n	801774a <tcp_process+0x7be>
      break;
 801773c:	bf00      	nop
 801773e:	e004      	b.n	801774a <tcp_process+0x7be>
      break;
 8017740:	bf00      	nop
 8017742:	e002      	b.n	801774a <tcp_process+0x7be>
      break;
 8017744:	bf00      	nop
 8017746:	e000      	b.n	801774a <tcp_process+0x7be>
      break;
 8017748:	bf00      	nop
  }
  return ERR_OK;
 801774a:	2300      	movs	r3, #0
}
 801774c:	4618      	mov	r0, r3
 801774e:	3724      	adds	r7, #36	@ 0x24
 8017750:	46bd      	mov	sp, r7
 8017752:	bd90      	pop	{r4, r7, pc}
 8017754:	2400cb10 	.word	0x2400cb10
 8017758:	2400cb0c 	.word	0x2400cb0c
 801775c:	2400cb40 	.word	0x2400cb40
 8017760:	2400cb38 	.word	0x2400cb38
 8017764:	2400cb41 	.word	0x2400cb41
 8017768:	2400cb08 	.word	0x2400cb08

0801776c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801776c:	b590      	push	{r4, r7, lr}
 801776e:	b085      	sub	sp, #20
 8017770:	af00      	add	r7, sp, #0
 8017772:	6078      	str	r0, [r7, #4]
 8017774:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	2b00      	cmp	r3, #0
 801777a:	d106      	bne.n	801778a <tcp_oos_insert_segment+0x1e>
 801777c:	4b3b      	ldr	r3, [pc, #236]	@ (801786c <tcp_oos_insert_segment+0x100>)
 801777e:	f240 421f 	movw	r2, #1055	@ 0x41f
 8017782:	493b      	ldr	r1, [pc, #236]	@ (8017870 <tcp_oos_insert_segment+0x104>)
 8017784:	483b      	ldr	r0, [pc, #236]	@ (8017874 <tcp_oos_insert_segment+0x108>)
 8017786:	f009 f8fd 	bl	8020984 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	68db      	ldr	r3, [r3, #12]
 801778e:	899b      	ldrh	r3, [r3, #12]
 8017790:	b29b      	uxth	r3, r3
 8017792:	4618      	mov	r0, r3
 8017794:	f7fb f8b2 	bl	80128fc <lwip_htons>
 8017798:	4603      	mov	r3, r0
 801779a:	b2db      	uxtb	r3, r3
 801779c:	f003 0301 	and.w	r3, r3, #1
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d028      	beq.n	80177f6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80177a4:	6838      	ldr	r0, [r7, #0]
 80177a6:	f7fe f995 	bl	8015ad4 <tcp_segs_free>
    next = NULL;
 80177aa:	2300      	movs	r3, #0
 80177ac:	603b      	str	r3, [r7, #0]
 80177ae:	e056      	b.n	801785e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80177b0:	683b      	ldr	r3, [r7, #0]
 80177b2:	68db      	ldr	r3, [r3, #12]
 80177b4:	899b      	ldrh	r3, [r3, #12]
 80177b6:	b29b      	uxth	r3, r3
 80177b8:	4618      	mov	r0, r3
 80177ba:	f7fb f89f 	bl	80128fc <lwip_htons>
 80177be:	4603      	mov	r3, r0
 80177c0:	b2db      	uxtb	r3, r3
 80177c2:	f003 0301 	and.w	r3, r3, #1
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d00d      	beq.n	80177e6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	68db      	ldr	r3, [r3, #12]
 80177ce:	899b      	ldrh	r3, [r3, #12]
 80177d0:	b29c      	uxth	r4, r3
 80177d2:	2001      	movs	r0, #1
 80177d4:	f7fb f892 	bl	80128fc <lwip_htons>
 80177d8:	4603      	mov	r3, r0
 80177da:	461a      	mov	r2, r3
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	68db      	ldr	r3, [r3, #12]
 80177e0:	4322      	orrs	r2, r4
 80177e2:	b292      	uxth	r2, r2
 80177e4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80177e6:	683b      	ldr	r3, [r7, #0]
 80177e8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80177ea:	683b      	ldr	r3, [r7, #0]
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80177f0:	68f8      	ldr	r0, [r7, #12]
 80177f2:	f7fe f984 	bl	8015afe <tcp_seg_free>
    while (next &&
 80177f6:	683b      	ldr	r3, [r7, #0]
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d00e      	beq.n	801781a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	891b      	ldrh	r3, [r3, #8]
 8017800:	461a      	mov	r2, r3
 8017802:	4b1d      	ldr	r3, [pc, #116]	@ (8017878 <tcp_oos_insert_segment+0x10c>)
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	441a      	add	r2, r3
 8017808:	683b      	ldr	r3, [r7, #0]
 801780a:	68db      	ldr	r3, [r3, #12]
 801780c:	685b      	ldr	r3, [r3, #4]
 801780e:	6839      	ldr	r1, [r7, #0]
 8017810:	8909      	ldrh	r1, [r1, #8]
 8017812:	440b      	add	r3, r1
 8017814:	1ad3      	subs	r3, r2, r3
    while (next &&
 8017816:	2b00      	cmp	r3, #0
 8017818:	daca      	bge.n	80177b0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801781a:	683b      	ldr	r3, [r7, #0]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d01e      	beq.n	801785e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	891b      	ldrh	r3, [r3, #8]
 8017824:	461a      	mov	r2, r3
 8017826:	4b14      	ldr	r3, [pc, #80]	@ (8017878 <tcp_oos_insert_segment+0x10c>)
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	441a      	add	r2, r3
 801782c:	683b      	ldr	r3, [r7, #0]
 801782e:	68db      	ldr	r3, [r3, #12]
 8017830:	685b      	ldr	r3, [r3, #4]
 8017832:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017834:	2b00      	cmp	r3, #0
 8017836:	dd12      	ble.n	801785e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8017838:	683b      	ldr	r3, [r7, #0]
 801783a:	68db      	ldr	r3, [r3, #12]
 801783c:	685b      	ldr	r3, [r3, #4]
 801783e:	b29a      	uxth	r2, r3
 8017840:	4b0d      	ldr	r3, [pc, #52]	@ (8017878 <tcp_oos_insert_segment+0x10c>)
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	b29b      	uxth	r3, r3
 8017846:	1ad3      	subs	r3, r2, r3
 8017848:	b29a      	uxth	r2, r3
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	685a      	ldr	r2, [r3, #4]
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	891b      	ldrh	r3, [r3, #8]
 8017856:	4619      	mov	r1, r3
 8017858:	4610      	mov	r0, r2
 801785a:	f7fc fb7f 	bl	8013f5c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	683a      	ldr	r2, [r7, #0]
 8017862:	601a      	str	r2, [r3, #0]
}
 8017864:	bf00      	nop
 8017866:	3714      	adds	r7, #20
 8017868:	46bd      	mov	sp, r7
 801786a:	bd90      	pop	{r4, r7, pc}
 801786c:	08025088 	.word	0x08025088
 8017870:	08025348 	.word	0x08025348
 8017874:	080250d4 	.word	0x080250d4
 8017878:	2400cb34 	.word	0x2400cb34

0801787c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801787c:	b5b0      	push	{r4, r5, r7, lr}
 801787e:	b086      	sub	sp, #24
 8017880:	af00      	add	r7, sp, #0
 8017882:	60f8      	str	r0, [r7, #12]
 8017884:	60b9      	str	r1, [r7, #8]
 8017886:	607a      	str	r2, [r7, #4]
 8017888:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801788a:	e03e      	b.n	801790a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801788c:	68bb      	ldr	r3, [r7, #8]
 801788e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8017890:	68bb      	ldr	r3, [r7, #8]
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8017896:	697b      	ldr	r3, [r7, #20]
 8017898:	685b      	ldr	r3, [r3, #4]
 801789a:	4618      	mov	r0, r3
 801789c:	f7fc fd72 	bl	8014384 <pbuf_clen>
 80178a0:	4603      	mov	r3, r0
 80178a2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80178aa:	8a7a      	ldrh	r2, [r7, #18]
 80178ac:	429a      	cmp	r2, r3
 80178ae:	d906      	bls.n	80178be <tcp_free_acked_segments+0x42>
 80178b0:	4b2a      	ldr	r3, [pc, #168]	@ (801795c <tcp_free_acked_segments+0xe0>)
 80178b2:	f240 4257 	movw	r2, #1111	@ 0x457
 80178b6:	492a      	ldr	r1, [pc, #168]	@ (8017960 <tcp_free_acked_segments+0xe4>)
 80178b8:	482a      	ldr	r0, [pc, #168]	@ (8017964 <tcp_free_acked_segments+0xe8>)
 80178ba:	f009 f863 	bl	8020984 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80178c4:	8a7b      	ldrh	r3, [r7, #18]
 80178c6:	1ad3      	subs	r3, r2, r3
 80178c8:	b29a      	uxth	r2, r3
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80178d0:	697b      	ldr	r3, [r7, #20]
 80178d2:	891a      	ldrh	r2, [r3, #8]
 80178d4:	4b24      	ldr	r3, [pc, #144]	@ (8017968 <tcp_free_acked_segments+0xec>)
 80178d6:	881b      	ldrh	r3, [r3, #0]
 80178d8:	4413      	add	r3, r2
 80178da:	b29a      	uxth	r2, r3
 80178dc:	4b22      	ldr	r3, [pc, #136]	@ (8017968 <tcp_free_acked_segments+0xec>)
 80178de:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80178e0:	6978      	ldr	r0, [r7, #20]
 80178e2:	f7fe f90c 	bl	8015afe <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d00c      	beq.n	801790a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80178f0:	68bb      	ldr	r3, [r7, #8]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d109      	bne.n	801790a <tcp_free_acked_segments+0x8e>
 80178f6:	683b      	ldr	r3, [r7, #0]
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d106      	bne.n	801790a <tcp_free_acked_segments+0x8e>
 80178fc:	4b17      	ldr	r3, [pc, #92]	@ (801795c <tcp_free_acked_segments+0xe0>)
 80178fe:	f240 4261 	movw	r2, #1121	@ 0x461
 8017902:	491a      	ldr	r1, [pc, #104]	@ (801796c <tcp_free_acked_segments+0xf0>)
 8017904:	4817      	ldr	r0, [pc, #92]	@ (8017964 <tcp_free_acked_segments+0xe8>)
 8017906:	f009 f83d 	bl	8020984 <iprintf>
  while (seg_list != NULL &&
 801790a:	68bb      	ldr	r3, [r7, #8]
 801790c:	2b00      	cmp	r3, #0
 801790e:	d020      	beq.n	8017952 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8017910:	68bb      	ldr	r3, [r7, #8]
 8017912:	68db      	ldr	r3, [r3, #12]
 8017914:	685b      	ldr	r3, [r3, #4]
 8017916:	4618      	mov	r0, r3
 8017918:	f7fb f805 	bl	8012926 <lwip_htonl>
 801791c:	4604      	mov	r4, r0
 801791e:	68bb      	ldr	r3, [r7, #8]
 8017920:	891b      	ldrh	r3, [r3, #8]
 8017922:	461d      	mov	r5, r3
 8017924:	68bb      	ldr	r3, [r7, #8]
 8017926:	68db      	ldr	r3, [r3, #12]
 8017928:	899b      	ldrh	r3, [r3, #12]
 801792a:	b29b      	uxth	r3, r3
 801792c:	4618      	mov	r0, r3
 801792e:	f7fa ffe5 	bl	80128fc <lwip_htons>
 8017932:	4603      	mov	r3, r0
 8017934:	b2db      	uxtb	r3, r3
 8017936:	f003 0303 	and.w	r3, r3, #3
 801793a:	2b00      	cmp	r3, #0
 801793c:	d001      	beq.n	8017942 <tcp_free_acked_segments+0xc6>
 801793e:	2301      	movs	r3, #1
 8017940:	e000      	b.n	8017944 <tcp_free_acked_segments+0xc8>
 8017942:	2300      	movs	r3, #0
 8017944:	442b      	add	r3, r5
 8017946:	18e2      	adds	r2, r4, r3
 8017948:	4b09      	ldr	r3, [pc, #36]	@ (8017970 <tcp_free_acked_segments+0xf4>)
 801794a:	681b      	ldr	r3, [r3, #0]
 801794c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801794e:	2b00      	cmp	r3, #0
 8017950:	dd9c      	ble.n	801788c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8017952:	68bb      	ldr	r3, [r7, #8]
}
 8017954:	4618      	mov	r0, r3
 8017956:	3718      	adds	r7, #24
 8017958:	46bd      	mov	sp, r7
 801795a:	bdb0      	pop	{r4, r5, r7, pc}
 801795c:	08025088 	.word	0x08025088
 8017960:	08025370 	.word	0x08025370
 8017964:	080250d4 	.word	0x080250d4
 8017968:	2400cb3c 	.word	0x2400cb3c
 801796c:	08025398 	.word	0x08025398
 8017970:	2400cb38 	.word	0x2400cb38

08017974 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8017974:	b5b0      	push	{r4, r5, r7, lr}
 8017976:	b094      	sub	sp, #80	@ 0x50
 8017978:	af00      	add	r7, sp, #0
 801797a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801797c:	2300      	movs	r3, #0
 801797e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d106      	bne.n	8017994 <tcp_receive+0x20>
 8017986:	4b91      	ldr	r3, [pc, #580]	@ (8017bcc <tcp_receive+0x258>)
 8017988:	f240 427b 	movw	r2, #1147	@ 0x47b
 801798c:	4990      	ldr	r1, [pc, #576]	@ (8017bd0 <tcp_receive+0x25c>)
 801798e:	4891      	ldr	r0, [pc, #580]	@ (8017bd4 <tcp_receive+0x260>)
 8017990:	f008 fff8 	bl	8020984 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	7d1b      	ldrb	r3, [r3, #20]
 8017998:	2b03      	cmp	r3, #3
 801799a:	d806      	bhi.n	80179aa <tcp_receive+0x36>
 801799c:	4b8b      	ldr	r3, [pc, #556]	@ (8017bcc <tcp_receive+0x258>)
 801799e:	f240 427c 	movw	r2, #1148	@ 0x47c
 80179a2:	498d      	ldr	r1, [pc, #564]	@ (8017bd8 <tcp_receive+0x264>)
 80179a4:	488b      	ldr	r0, [pc, #556]	@ (8017bd4 <tcp_receive+0x260>)
 80179a6:	f008 ffed 	bl	8020984 <iprintf>

  if (flags & TCP_ACK) {
 80179aa:	4b8c      	ldr	r3, [pc, #560]	@ (8017bdc <tcp_receive+0x268>)
 80179ac:	781b      	ldrb	r3, [r3, #0]
 80179ae:	f003 0310 	and.w	r3, r3, #16
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	f000 8264 	beq.w	8017e80 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80179be:	461a      	mov	r2, r3
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80179c4:	4413      	add	r3, r2
 80179c6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80179cc:	4b84      	ldr	r3, [pc, #528]	@ (8017be0 <tcp_receive+0x26c>)
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	1ad3      	subs	r3, r2, r3
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	db1b      	blt.n	8017a0e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80179da:	4b81      	ldr	r3, [pc, #516]	@ (8017be0 <tcp_receive+0x26c>)
 80179dc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80179de:	429a      	cmp	r2, r3
 80179e0:	d106      	bne.n	80179f0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80179e6:	4b7f      	ldr	r3, [pc, #508]	@ (8017be4 <tcp_receive+0x270>)
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	1ad3      	subs	r3, r2, r3
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	db0e      	blt.n	8017a0e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80179f4:	4b7b      	ldr	r3, [pc, #492]	@ (8017be4 <tcp_receive+0x270>)
 80179f6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80179f8:	429a      	cmp	r2, r3
 80179fa:	d125      	bne.n	8017a48 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80179fc:	4b7a      	ldr	r3, [pc, #488]	@ (8017be8 <tcp_receive+0x274>)
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	89db      	ldrh	r3, [r3, #14]
 8017a02:	b29a      	uxth	r2, r3
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017a0a:	429a      	cmp	r2, r3
 8017a0c:	d91c      	bls.n	8017a48 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8017a0e:	4b76      	ldr	r3, [pc, #472]	@ (8017be8 <tcp_receive+0x274>)
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	89db      	ldrh	r3, [r3, #14]
 8017a14:	b29a      	uxth	r2, r3
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017a28:	429a      	cmp	r2, r3
 8017a2a:	d205      	bcs.n	8017a38 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8017a38:	4b69      	ldr	r3, [pc, #420]	@ (8017be0 <tcp_receive+0x26c>)
 8017a3a:	681a      	ldr	r2, [r3, #0]
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8017a40:	4b68      	ldr	r3, [pc, #416]	@ (8017be4 <tcp_receive+0x270>)
 8017a42:	681a      	ldr	r2, [r3, #0]
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8017a48:	4b66      	ldr	r3, [pc, #408]	@ (8017be4 <tcp_receive+0x270>)
 8017a4a:	681a      	ldr	r2, [r3, #0]
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017a50:	1ad3      	subs	r3, r2, r3
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	dc58      	bgt.n	8017b08 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8017a56:	4b65      	ldr	r3, [pc, #404]	@ (8017bec <tcp_receive+0x278>)
 8017a58:	881b      	ldrh	r3, [r3, #0]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d14b      	bne.n	8017af6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017a62:	687a      	ldr	r2, [r7, #4]
 8017a64:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8017a68:	4413      	add	r3, r2
 8017a6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017a6c:	429a      	cmp	r2, r3
 8017a6e:	d142      	bne.n	8017af6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	db3d      	blt.n	8017af6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017a7e:	4b59      	ldr	r3, [pc, #356]	@ (8017be4 <tcp_receive+0x270>)
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	429a      	cmp	r2, r3
 8017a84:	d137      	bne.n	8017af6 <tcp_receive+0x182>
              found_dupack = 1;
 8017a86:	2301      	movs	r3, #1
 8017a88:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017a90:	2bff      	cmp	r3, #255	@ 0xff
 8017a92:	d007      	beq.n	8017aa4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017a9a:	3301      	adds	r3, #1
 8017a9c:	b2da      	uxtb	r2, r3
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017aaa:	2b03      	cmp	r3, #3
 8017aac:	d91b      	bls.n	8017ae6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017ab8:	4413      	add	r3, r2
 8017aba:	b29a      	uxth	r2, r3
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017ac2:	429a      	cmp	r2, r3
 8017ac4:	d30a      	bcc.n	8017adc <tcp_receive+0x168>
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017ad0:	4413      	add	r3, r2
 8017ad2:	b29a      	uxth	r2, r3
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017ada:	e004      	b.n	8017ae6 <tcp_receive+0x172>
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017ae2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017aec:	2b02      	cmp	r3, #2
 8017aee:	d902      	bls.n	8017af6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017af0:	6878      	ldr	r0, [r7, #4]
 8017af2:	f002 fb3f 	bl	801a174 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8017af6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	f040 8161 	bne.w	8017dc0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	2200      	movs	r2, #0
 8017b02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8017b06:	e15b      	b.n	8017dc0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017b08:	4b36      	ldr	r3, [pc, #216]	@ (8017be4 <tcp_receive+0x270>)
 8017b0a:	681a      	ldr	r2, [r3, #0]
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017b10:	1ad3      	subs	r3, r2, r3
 8017b12:	3b01      	subs	r3, #1
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	f2c0 814e 	blt.w	8017db6 <tcp_receive+0x442>
 8017b1a:	4b32      	ldr	r3, [pc, #200]	@ (8017be4 <tcp_receive+0x270>)
 8017b1c:	681a      	ldr	r2, [r3, #0]
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017b22:	1ad3      	subs	r3, r2, r3
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	f300 8146 	bgt.w	8017db6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	8b5b      	ldrh	r3, [r3, #26]
 8017b2e:	f003 0304 	and.w	r3, r3, #4
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d010      	beq.n	8017b58 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	8b5b      	ldrh	r3, [r3, #26]
 8017b3a:	f023 0304 	bic.w	r3, r3, #4
 8017b3e:	b29a      	uxth	r2, r3
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	2200      	movs	r2, #0
 8017b54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	2200      	movs	r2, #0
 8017b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017b66:	10db      	asrs	r3, r3, #3
 8017b68:	b21b      	sxth	r3, r3
 8017b6a:	b29a      	uxth	r2, r3
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017b72:	b29b      	uxth	r3, r3
 8017b74:	4413      	add	r3, r2
 8017b76:	b29b      	uxth	r3, r3
 8017b78:	b21a      	sxth	r2, r3
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8017b80:	4b18      	ldr	r3, [pc, #96]	@ (8017be4 <tcp_receive+0x270>)
 8017b82:	681b      	ldr	r3, [r3, #0]
 8017b84:	b29a      	uxth	r2, r3
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017b8a:	b29b      	uxth	r3, r3
 8017b8c:	1ad3      	subs	r3, r2, r3
 8017b8e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	2200      	movs	r2, #0
 8017b94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8017b98:	4b12      	ldr	r3, [pc, #72]	@ (8017be4 <tcp_receive+0x270>)
 8017b9a:	681a      	ldr	r2, [r3, #0]
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	7d1b      	ldrb	r3, [r3, #20]
 8017ba4:	2b03      	cmp	r3, #3
 8017ba6:	f240 8097 	bls.w	8017cd8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8017bb6:	429a      	cmp	r2, r3
 8017bb8:	d245      	bcs.n	8017c46 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	8b5b      	ldrh	r3, [r3, #26]
 8017bbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d014      	beq.n	8017bf0 <tcp_receive+0x27c>
 8017bc6:	2301      	movs	r3, #1
 8017bc8:	e013      	b.n	8017bf2 <tcp_receive+0x27e>
 8017bca:	bf00      	nop
 8017bcc:	08025088 	.word	0x08025088
 8017bd0:	080253b8 	.word	0x080253b8
 8017bd4:	080250d4 	.word	0x080250d4
 8017bd8:	080253d4 	.word	0x080253d4
 8017bdc:	2400cb40 	.word	0x2400cb40
 8017be0:	2400cb34 	.word	0x2400cb34
 8017be4:	2400cb38 	.word	0x2400cb38
 8017be8:	2400cb24 	.word	0x2400cb24
 8017bec:	2400cb3e 	.word	0x2400cb3e
 8017bf0:	2302      	movs	r3, #2
 8017bf2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8017bf6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8017bfa:	b29a      	uxth	r2, r3
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017c00:	fb12 f303 	smulbb	r3, r2, r3
 8017c04:	b29b      	uxth	r3, r3
 8017c06:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8017c08:	4293      	cmp	r3, r2
 8017c0a:	bf28      	it	cs
 8017c0c:	4613      	movcs	r3, r2
 8017c0e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017c16:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017c18:	4413      	add	r3, r2
 8017c1a:	b29a      	uxth	r2, r3
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017c22:	429a      	cmp	r2, r3
 8017c24:	d309      	bcc.n	8017c3a <tcp_receive+0x2c6>
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017c2c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017c2e:	4413      	add	r3, r2
 8017c30:	b29a      	uxth	r2, r3
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017c38:	e04e      	b.n	8017cd8 <tcp_receive+0x364>
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017c40:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017c44:	e048      	b.n	8017cd8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017c4c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017c4e:	4413      	add	r3, r2
 8017c50:	b29a      	uxth	r2, r3
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8017c58:	429a      	cmp	r2, r3
 8017c5a:	d309      	bcc.n	8017c70 <tcp_receive+0x2fc>
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017c62:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017c64:	4413      	add	r3, r2
 8017c66:	b29a      	uxth	r2, r3
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8017c6e:	e004      	b.n	8017c7a <tcp_receive+0x306>
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017c76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017c86:	429a      	cmp	r2, r3
 8017c88:	d326      	bcc.n	8017cd8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017c96:	1ad3      	subs	r3, r2, r3
 8017c98:	b29a      	uxth	r2, r3
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017caa:	4413      	add	r3, r2
 8017cac:	b29a      	uxth	r2, r3
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017cb4:	429a      	cmp	r2, r3
 8017cb6:	d30a      	bcc.n	8017cce <tcp_receive+0x35a>
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017cc2:	4413      	add	r3, r2
 8017cc4:	b29a      	uxth	r2, r3
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017ccc:	e004      	b.n	8017cd8 <tcp_receive+0x364>
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017cd4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017ce0:	4a98      	ldr	r2, [pc, #608]	@ (8017f44 <tcp_receive+0x5d0>)
 8017ce2:	6878      	ldr	r0, [r7, #4]
 8017ce4:	f7ff fdca 	bl	801787c <tcp_free_acked_segments>
 8017ce8:	4602      	mov	r2, r0
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017cf6:	4a94      	ldr	r2, [pc, #592]	@ (8017f48 <tcp_receive+0x5d4>)
 8017cf8:	6878      	ldr	r0, [r7, #4]
 8017cfa:	f7ff fdbf 	bl	801787c <tcp_free_acked_segments>
 8017cfe:	4602      	mov	r2, r0
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d104      	bne.n	8017d16 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017d12:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017d14:	e002      	b.n	8017d1c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	2200      	movs	r2, #0
 8017d1a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	2200      	movs	r2, #0
 8017d20:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d103      	bne.n	8017d32 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	2200      	movs	r2, #0
 8017d2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8017d38:	4b84      	ldr	r3, [pc, #528]	@ (8017f4c <tcp_receive+0x5d8>)
 8017d3a:	881b      	ldrh	r3, [r3, #0]
 8017d3c:	4413      	add	r3, r2
 8017d3e:	b29a      	uxth	r2, r3
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	8b5b      	ldrh	r3, [r3, #26]
 8017d4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d035      	beq.n	8017dbe <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d118      	bne.n	8017d8c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d00c      	beq.n	8017d7c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017d6a:	68db      	ldr	r3, [r3, #12]
 8017d6c:	685b      	ldr	r3, [r3, #4]
 8017d6e:	4618      	mov	r0, r3
 8017d70:	f7fa fdd9 	bl	8012926 <lwip_htonl>
 8017d74:	4603      	mov	r3, r0
 8017d76:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	dc20      	bgt.n	8017dbe <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	8b5b      	ldrh	r3, [r3, #26]
 8017d80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017d84:	b29a      	uxth	r2, r3
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017d8a:	e018      	b.n	8017dbe <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017d94:	68db      	ldr	r3, [r3, #12]
 8017d96:	685b      	ldr	r3, [r3, #4]
 8017d98:	4618      	mov	r0, r3
 8017d9a:	f7fa fdc4 	bl	8012926 <lwip_htonl>
 8017d9e:	4603      	mov	r3, r0
 8017da0:	1ae3      	subs	r3, r4, r3
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	dc0b      	bgt.n	8017dbe <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	8b5b      	ldrh	r3, [r3, #26]
 8017daa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017dae:	b29a      	uxth	r2, r3
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017db4:	e003      	b.n	8017dbe <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8017db6:	6878      	ldr	r0, [r7, #4]
 8017db8:	f002 fbc8 	bl	801a54c <tcp_send_empty_ack>
 8017dbc:	e000      	b.n	8017dc0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017dbe:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d05b      	beq.n	8017e80 <tcp_receive+0x50c>
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017dcc:	4b60      	ldr	r3, [pc, #384]	@ (8017f50 <tcp_receive+0x5dc>)
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	1ad3      	subs	r3, r2, r3
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	da54      	bge.n	8017e80 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8017dd6:	4b5f      	ldr	r3, [pc, #380]	@ (8017f54 <tcp_receive+0x5e0>)
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	b29a      	uxth	r2, r3
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017de0:	b29b      	uxth	r3, r3
 8017de2:	1ad3      	subs	r3, r2, r3
 8017de4:	b29b      	uxth	r3, r3
 8017de6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8017dea:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017df4:	10db      	asrs	r3, r3, #3
 8017df6:	b21b      	sxth	r3, r3
 8017df8:	b29b      	uxth	r3, r3
 8017dfa:	1ad3      	subs	r3, r2, r3
 8017dfc:	b29b      	uxth	r3, r3
 8017dfe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017e08:	b29a      	uxth	r2, r3
 8017e0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017e0e:	4413      	add	r3, r2
 8017e10:	b29b      	uxth	r3, r3
 8017e12:	b21a      	sxth	r2, r3
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8017e18:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	da05      	bge.n	8017e2c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8017e20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017e24:	425b      	negs	r3, r3
 8017e26:	b29b      	uxth	r3, r3
 8017e28:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8017e2c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017e36:	109b      	asrs	r3, r3, #2
 8017e38:	b21b      	sxth	r3, r3
 8017e3a:	b29b      	uxth	r3, r3
 8017e3c:	1ad3      	subs	r3, r2, r3
 8017e3e:	b29b      	uxth	r3, r3
 8017e40:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017e4a:	b29a      	uxth	r2, r3
 8017e4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017e50:	4413      	add	r3, r2
 8017e52:	b29b      	uxth	r3, r3
 8017e54:	b21a      	sxth	r2, r3
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017e60:	10db      	asrs	r3, r3, #3
 8017e62:	b21b      	sxth	r3, r3
 8017e64:	b29a      	uxth	r2, r3
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017e6c:	b29b      	uxth	r3, r3
 8017e6e:	4413      	add	r3, r2
 8017e70:	b29b      	uxth	r3, r3
 8017e72:	b21a      	sxth	r2, r3
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	2200      	movs	r2, #0
 8017e7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8017e80:	4b35      	ldr	r3, [pc, #212]	@ (8017f58 <tcp_receive+0x5e4>)
 8017e82:	881b      	ldrh	r3, [r3, #0]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	f000 84df 	beq.w	8018848 <tcp_receive+0xed4>
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	7d1b      	ldrb	r3, [r3, #20]
 8017e8e:	2b06      	cmp	r3, #6
 8017e90:	f200 84da 	bhi.w	8018848 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017e98:	4b30      	ldr	r3, [pc, #192]	@ (8017f5c <tcp_receive+0x5e8>)
 8017e9a:	681b      	ldr	r3, [r3, #0]
 8017e9c:	1ad3      	subs	r3, r2, r3
 8017e9e:	3b01      	subs	r3, #1
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	f2c0 808f 	blt.w	8017fc4 <tcp_receive+0x650>
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8017f58 <tcp_receive+0x5e4>)
 8017eac:	881b      	ldrh	r3, [r3, #0]
 8017eae:	4619      	mov	r1, r3
 8017eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8017f5c <tcp_receive+0x5e8>)
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	440b      	add	r3, r1
 8017eb6:	1ad3      	subs	r3, r2, r3
 8017eb8:	3301      	adds	r3, #1
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	f300 8082 	bgt.w	8017fc4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8017ec0:	4b27      	ldr	r3, [pc, #156]	@ (8017f60 <tcp_receive+0x5ec>)
 8017ec2:	685b      	ldr	r3, [r3, #4]
 8017ec4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017eca:	4b24      	ldr	r3, [pc, #144]	@ (8017f5c <tcp_receive+0x5e8>)
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	1ad3      	subs	r3, r2, r3
 8017ed0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8017ed2:	4b23      	ldr	r3, [pc, #140]	@ (8017f60 <tcp_receive+0x5ec>)
 8017ed4:	685b      	ldr	r3, [r3, #4]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d106      	bne.n	8017ee8 <tcp_receive+0x574>
 8017eda:	4b22      	ldr	r3, [pc, #136]	@ (8017f64 <tcp_receive+0x5f0>)
 8017edc:	f240 5294 	movw	r2, #1428	@ 0x594
 8017ee0:	4921      	ldr	r1, [pc, #132]	@ (8017f68 <tcp_receive+0x5f4>)
 8017ee2:	4822      	ldr	r0, [pc, #136]	@ (8017f6c <tcp_receive+0x5f8>)
 8017ee4:	f008 fd4e 	bl	8020984 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8017ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017eea:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017eee:	4293      	cmp	r3, r2
 8017ef0:	d906      	bls.n	8017f00 <tcp_receive+0x58c>
 8017ef2:	4b1c      	ldr	r3, [pc, #112]	@ (8017f64 <tcp_receive+0x5f0>)
 8017ef4:	f240 5295 	movw	r2, #1429	@ 0x595
 8017ef8:	491d      	ldr	r1, [pc, #116]	@ (8017f70 <tcp_receive+0x5fc>)
 8017efa:	481c      	ldr	r0, [pc, #112]	@ (8017f6c <tcp_receive+0x5f8>)
 8017efc:	f008 fd42 	bl	8020984 <iprintf>
      off = (u16_t)off32;
 8017f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f02:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8017f06:	4b16      	ldr	r3, [pc, #88]	@ (8017f60 <tcp_receive+0x5ec>)
 8017f08:	685b      	ldr	r3, [r3, #4]
 8017f0a:	891b      	ldrh	r3, [r3, #8]
 8017f0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017f10:	429a      	cmp	r2, r3
 8017f12:	d906      	bls.n	8017f22 <tcp_receive+0x5ae>
 8017f14:	4b13      	ldr	r3, [pc, #76]	@ (8017f64 <tcp_receive+0x5f0>)
 8017f16:	f240 5297 	movw	r2, #1431	@ 0x597
 8017f1a:	4916      	ldr	r1, [pc, #88]	@ (8017f74 <tcp_receive+0x600>)
 8017f1c:	4813      	ldr	r0, [pc, #76]	@ (8017f6c <tcp_receive+0x5f8>)
 8017f1e:	f008 fd31 	bl	8020984 <iprintf>
      inseg.len -= off;
 8017f22:	4b0f      	ldr	r3, [pc, #60]	@ (8017f60 <tcp_receive+0x5ec>)
 8017f24:	891a      	ldrh	r2, [r3, #8]
 8017f26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017f2a:	1ad3      	subs	r3, r2, r3
 8017f2c:	b29a      	uxth	r2, r3
 8017f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8017f60 <tcp_receive+0x5ec>)
 8017f30:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8017f32:	4b0b      	ldr	r3, [pc, #44]	@ (8017f60 <tcp_receive+0x5ec>)
 8017f34:	685b      	ldr	r3, [r3, #4]
 8017f36:	891a      	ldrh	r2, [r3, #8]
 8017f38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017f3c:	1ad3      	subs	r3, r2, r3
 8017f3e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8017f40:	e02a      	b.n	8017f98 <tcp_receive+0x624>
 8017f42:	bf00      	nop
 8017f44:	080253f0 	.word	0x080253f0
 8017f48:	080253f8 	.word	0x080253f8
 8017f4c:	2400cb3c 	.word	0x2400cb3c
 8017f50:	2400cb38 	.word	0x2400cb38
 8017f54:	2400cafc 	.word	0x2400cafc
 8017f58:	2400cb3e 	.word	0x2400cb3e
 8017f5c:	2400cb34 	.word	0x2400cb34
 8017f60:	2400cb14 	.word	0x2400cb14
 8017f64:	08025088 	.word	0x08025088
 8017f68:	08025400 	.word	0x08025400
 8017f6c:	080250d4 	.word	0x080250d4
 8017f70:	08025410 	.word	0x08025410
 8017f74:	08025420 	.word	0x08025420
        off -= p->len;
 8017f78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017f7a:	895b      	ldrh	r3, [r3, #10]
 8017f7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017f80:	1ad3      	subs	r3, r2, r3
 8017f82:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8017f86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017f88:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017f8a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8017f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017f8e:	2200      	movs	r2, #0
 8017f90:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8017f92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8017f98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017f9a:	895b      	ldrh	r3, [r3, #10]
 8017f9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017fa0:	429a      	cmp	r2, r3
 8017fa2:	d8e9      	bhi.n	8017f78 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8017fa4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017fa8:	4619      	mov	r1, r3
 8017faa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8017fac:	f7fc f8d6 	bl	801415c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017fb4:	4a90      	ldr	r2, [pc, #576]	@ (80181f8 <tcp_receive+0x884>)
 8017fb6:	6013      	str	r3, [r2, #0]
 8017fb8:	4b90      	ldr	r3, [pc, #576]	@ (80181fc <tcp_receive+0x888>)
 8017fba:	68db      	ldr	r3, [r3, #12]
 8017fbc:	4a8e      	ldr	r2, [pc, #568]	@ (80181f8 <tcp_receive+0x884>)
 8017fbe:	6812      	ldr	r2, [r2, #0]
 8017fc0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017fc2:	e00d      	b.n	8017fe0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8017fc4:	4b8c      	ldr	r3, [pc, #560]	@ (80181f8 <tcp_receive+0x884>)
 8017fc6:	681a      	ldr	r2, [r3, #0]
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017fcc:	1ad3      	subs	r3, r2, r3
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	da06      	bge.n	8017fe0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	8b5b      	ldrh	r3, [r3, #26]
 8017fd6:	f043 0302 	orr.w	r3, r3, #2
 8017fda:	b29a      	uxth	r2, r3
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017fe0:	4b85      	ldr	r3, [pc, #532]	@ (80181f8 <tcp_receive+0x884>)
 8017fe2:	681a      	ldr	r2, [r3, #0]
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017fe8:	1ad3      	subs	r3, r2, r3
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	f2c0 8427 	blt.w	801883e <tcp_receive+0xeca>
 8017ff0:	4b81      	ldr	r3, [pc, #516]	@ (80181f8 <tcp_receive+0x884>)
 8017ff2:	681a      	ldr	r2, [r3, #0]
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017ff8:	6879      	ldr	r1, [r7, #4]
 8017ffa:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017ffc:	440b      	add	r3, r1
 8017ffe:	1ad3      	subs	r3, r2, r3
 8018000:	3301      	adds	r3, #1
 8018002:	2b00      	cmp	r3, #0
 8018004:	f300 841b 	bgt.w	801883e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801800c:	4b7a      	ldr	r3, [pc, #488]	@ (80181f8 <tcp_receive+0x884>)
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	429a      	cmp	r2, r3
 8018012:	f040 8298 	bne.w	8018546 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8018016:	4b79      	ldr	r3, [pc, #484]	@ (80181fc <tcp_receive+0x888>)
 8018018:	891c      	ldrh	r4, [r3, #8]
 801801a:	4b78      	ldr	r3, [pc, #480]	@ (80181fc <tcp_receive+0x888>)
 801801c:	68db      	ldr	r3, [r3, #12]
 801801e:	899b      	ldrh	r3, [r3, #12]
 8018020:	b29b      	uxth	r3, r3
 8018022:	4618      	mov	r0, r3
 8018024:	f7fa fc6a 	bl	80128fc <lwip_htons>
 8018028:	4603      	mov	r3, r0
 801802a:	b2db      	uxtb	r3, r3
 801802c:	f003 0303 	and.w	r3, r3, #3
 8018030:	2b00      	cmp	r3, #0
 8018032:	d001      	beq.n	8018038 <tcp_receive+0x6c4>
 8018034:	2301      	movs	r3, #1
 8018036:	e000      	b.n	801803a <tcp_receive+0x6c6>
 8018038:	2300      	movs	r3, #0
 801803a:	4423      	add	r3, r4
 801803c:	b29a      	uxth	r2, r3
 801803e:	4b70      	ldr	r3, [pc, #448]	@ (8018200 <tcp_receive+0x88c>)
 8018040:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018046:	4b6e      	ldr	r3, [pc, #440]	@ (8018200 <tcp_receive+0x88c>)
 8018048:	881b      	ldrh	r3, [r3, #0]
 801804a:	429a      	cmp	r2, r3
 801804c:	d274      	bcs.n	8018138 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801804e:	4b6b      	ldr	r3, [pc, #428]	@ (80181fc <tcp_receive+0x888>)
 8018050:	68db      	ldr	r3, [r3, #12]
 8018052:	899b      	ldrh	r3, [r3, #12]
 8018054:	b29b      	uxth	r3, r3
 8018056:	4618      	mov	r0, r3
 8018058:	f7fa fc50 	bl	80128fc <lwip_htons>
 801805c:	4603      	mov	r3, r0
 801805e:	b2db      	uxtb	r3, r3
 8018060:	f003 0301 	and.w	r3, r3, #1
 8018064:	2b00      	cmp	r3, #0
 8018066:	d01e      	beq.n	80180a6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8018068:	4b64      	ldr	r3, [pc, #400]	@ (80181fc <tcp_receive+0x888>)
 801806a:	68db      	ldr	r3, [r3, #12]
 801806c:	899b      	ldrh	r3, [r3, #12]
 801806e:	b29b      	uxth	r3, r3
 8018070:	b21b      	sxth	r3, r3
 8018072:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8018076:	b21c      	sxth	r4, r3
 8018078:	4b60      	ldr	r3, [pc, #384]	@ (80181fc <tcp_receive+0x888>)
 801807a:	68db      	ldr	r3, [r3, #12]
 801807c:	899b      	ldrh	r3, [r3, #12]
 801807e:	b29b      	uxth	r3, r3
 8018080:	4618      	mov	r0, r3
 8018082:	f7fa fc3b 	bl	80128fc <lwip_htons>
 8018086:	4603      	mov	r3, r0
 8018088:	b2db      	uxtb	r3, r3
 801808a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801808e:	b29b      	uxth	r3, r3
 8018090:	4618      	mov	r0, r3
 8018092:	f7fa fc33 	bl	80128fc <lwip_htons>
 8018096:	4603      	mov	r3, r0
 8018098:	b21b      	sxth	r3, r3
 801809a:	4323      	orrs	r3, r4
 801809c:	b21a      	sxth	r2, r3
 801809e:	4b57      	ldr	r3, [pc, #348]	@ (80181fc <tcp_receive+0x888>)
 80180a0:	68db      	ldr	r3, [r3, #12]
 80180a2:	b292      	uxth	r2, r2
 80180a4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80180aa:	4b54      	ldr	r3, [pc, #336]	@ (80181fc <tcp_receive+0x888>)
 80180ac:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80180ae:	4b53      	ldr	r3, [pc, #332]	@ (80181fc <tcp_receive+0x888>)
 80180b0:	68db      	ldr	r3, [r3, #12]
 80180b2:	899b      	ldrh	r3, [r3, #12]
 80180b4:	b29b      	uxth	r3, r3
 80180b6:	4618      	mov	r0, r3
 80180b8:	f7fa fc20 	bl	80128fc <lwip_htons>
 80180bc:	4603      	mov	r3, r0
 80180be:	b2db      	uxtb	r3, r3
 80180c0:	f003 0302 	and.w	r3, r3, #2
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d005      	beq.n	80180d4 <tcp_receive+0x760>
            inseg.len -= 1;
 80180c8:	4b4c      	ldr	r3, [pc, #304]	@ (80181fc <tcp_receive+0x888>)
 80180ca:	891b      	ldrh	r3, [r3, #8]
 80180cc:	3b01      	subs	r3, #1
 80180ce:	b29a      	uxth	r2, r3
 80180d0:	4b4a      	ldr	r3, [pc, #296]	@ (80181fc <tcp_receive+0x888>)
 80180d2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80180d4:	4b49      	ldr	r3, [pc, #292]	@ (80181fc <tcp_receive+0x888>)
 80180d6:	685b      	ldr	r3, [r3, #4]
 80180d8:	4a48      	ldr	r2, [pc, #288]	@ (80181fc <tcp_receive+0x888>)
 80180da:	8912      	ldrh	r2, [r2, #8]
 80180dc:	4611      	mov	r1, r2
 80180de:	4618      	mov	r0, r3
 80180e0:	f7fb ff3c 	bl	8013f5c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80180e4:	4b45      	ldr	r3, [pc, #276]	@ (80181fc <tcp_receive+0x888>)
 80180e6:	891c      	ldrh	r4, [r3, #8]
 80180e8:	4b44      	ldr	r3, [pc, #272]	@ (80181fc <tcp_receive+0x888>)
 80180ea:	68db      	ldr	r3, [r3, #12]
 80180ec:	899b      	ldrh	r3, [r3, #12]
 80180ee:	b29b      	uxth	r3, r3
 80180f0:	4618      	mov	r0, r3
 80180f2:	f7fa fc03 	bl	80128fc <lwip_htons>
 80180f6:	4603      	mov	r3, r0
 80180f8:	b2db      	uxtb	r3, r3
 80180fa:	f003 0303 	and.w	r3, r3, #3
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d001      	beq.n	8018106 <tcp_receive+0x792>
 8018102:	2301      	movs	r3, #1
 8018104:	e000      	b.n	8018108 <tcp_receive+0x794>
 8018106:	2300      	movs	r3, #0
 8018108:	4423      	add	r3, r4
 801810a:	b29a      	uxth	r2, r3
 801810c:	4b3c      	ldr	r3, [pc, #240]	@ (8018200 <tcp_receive+0x88c>)
 801810e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018110:	4b3b      	ldr	r3, [pc, #236]	@ (8018200 <tcp_receive+0x88c>)
 8018112:	881b      	ldrh	r3, [r3, #0]
 8018114:	461a      	mov	r2, r3
 8018116:	4b38      	ldr	r3, [pc, #224]	@ (80181f8 <tcp_receive+0x884>)
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	441a      	add	r2, r3
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018120:	6879      	ldr	r1, [r7, #4]
 8018122:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018124:	440b      	add	r3, r1
 8018126:	429a      	cmp	r2, r3
 8018128:	d006      	beq.n	8018138 <tcp_receive+0x7c4>
 801812a:	4b36      	ldr	r3, [pc, #216]	@ (8018204 <tcp_receive+0x890>)
 801812c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8018130:	4935      	ldr	r1, [pc, #212]	@ (8018208 <tcp_receive+0x894>)
 8018132:	4836      	ldr	r0, [pc, #216]	@ (801820c <tcp_receive+0x898>)
 8018134:	f008 fc26 	bl	8020984 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801813c:	2b00      	cmp	r3, #0
 801813e:	f000 80e6 	beq.w	801830e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018142:	4b2e      	ldr	r3, [pc, #184]	@ (80181fc <tcp_receive+0x888>)
 8018144:	68db      	ldr	r3, [r3, #12]
 8018146:	899b      	ldrh	r3, [r3, #12]
 8018148:	b29b      	uxth	r3, r3
 801814a:	4618      	mov	r0, r3
 801814c:	f7fa fbd6 	bl	80128fc <lwip_htons>
 8018150:	4603      	mov	r3, r0
 8018152:	b2db      	uxtb	r3, r3
 8018154:	f003 0301 	and.w	r3, r3, #1
 8018158:	2b00      	cmp	r3, #0
 801815a:	d010      	beq.n	801817e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801815c:	e00a      	b.n	8018174 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018162:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018168:	681a      	ldr	r2, [r3, #0]
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801816e:	68f8      	ldr	r0, [r7, #12]
 8018170:	f7fd fcc5 	bl	8015afe <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018178:	2b00      	cmp	r3, #0
 801817a:	d1f0      	bne.n	801815e <tcp_receive+0x7ea>
 801817c:	e0c7      	b.n	801830e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018182:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8018184:	e051      	b.n	801822a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018188:	68db      	ldr	r3, [r3, #12]
 801818a:	899b      	ldrh	r3, [r3, #12]
 801818c:	b29b      	uxth	r3, r3
 801818e:	4618      	mov	r0, r3
 8018190:	f7fa fbb4 	bl	80128fc <lwip_htons>
 8018194:	4603      	mov	r3, r0
 8018196:	b2db      	uxtb	r3, r3
 8018198:	f003 0301 	and.w	r3, r3, #1
 801819c:	2b00      	cmp	r3, #0
 801819e:	d03c      	beq.n	801821a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80181a0:	4b16      	ldr	r3, [pc, #88]	@ (80181fc <tcp_receive+0x888>)
 80181a2:	68db      	ldr	r3, [r3, #12]
 80181a4:	899b      	ldrh	r3, [r3, #12]
 80181a6:	b29b      	uxth	r3, r3
 80181a8:	4618      	mov	r0, r3
 80181aa:	f7fa fba7 	bl	80128fc <lwip_htons>
 80181ae:	4603      	mov	r3, r0
 80181b0:	b2db      	uxtb	r3, r3
 80181b2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d12f      	bne.n	801821a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80181ba:	4b10      	ldr	r3, [pc, #64]	@ (80181fc <tcp_receive+0x888>)
 80181bc:	68db      	ldr	r3, [r3, #12]
 80181be:	899b      	ldrh	r3, [r3, #12]
 80181c0:	b29c      	uxth	r4, r3
 80181c2:	2001      	movs	r0, #1
 80181c4:	f7fa fb9a 	bl	80128fc <lwip_htons>
 80181c8:	4603      	mov	r3, r0
 80181ca:	461a      	mov	r2, r3
 80181cc:	4b0b      	ldr	r3, [pc, #44]	@ (80181fc <tcp_receive+0x888>)
 80181ce:	68db      	ldr	r3, [r3, #12]
 80181d0:	4322      	orrs	r2, r4
 80181d2:	b292      	uxth	r2, r2
 80181d4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80181d6:	4b09      	ldr	r3, [pc, #36]	@ (80181fc <tcp_receive+0x888>)
 80181d8:	891c      	ldrh	r4, [r3, #8]
 80181da:	4b08      	ldr	r3, [pc, #32]	@ (80181fc <tcp_receive+0x888>)
 80181dc:	68db      	ldr	r3, [r3, #12]
 80181de:	899b      	ldrh	r3, [r3, #12]
 80181e0:	b29b      	uxth	r3, r3
 80181e2:	4618      	mov	r0, r3
 80181e4:	f7fa fb8a 	bl	80128fc <lwip_htons>
 80181e8:	4603      	mov	r3, r0
 80181ea:	b2db      	uxtb	r3, r3
 80181ec:	f003 0303 	and.w	r3, r3, #3
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d00d      	beq.n	8018210 <tcp_receive+0x89c>
 80181f4:	2301      	movs	r3, #1
 80181f6:	e00c      	b.n	8018212 <tcp_receive+0x89e>
 80181f8:	2400cb34 	.word	0x2400cb34
 80181fc:	2400cb14 	.word	0x2400cb14
 8018200:	2400cb3e 	.word	0x2400cb3e
 8018204:	08025088 	.word	0x08025088
 8018208:	08025430 	.word	0x08025430
 801820c:	080250d4 	.word	0x080250d4
 8018210:	2300      	movs	r3, #0
 8018212:	4423      	add	r3, r4
 8018214:	b29a      	uxth	r2, r3
 8018216:	4b98      	ldr	r3, [pc, #608]	@ (8018478 <tcp_receive+0xb04>)
 8018218:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801821a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801821c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801821e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8018224:	6938      	ldr	r0, [r7, #16]
 8018226:	f7fd fc6a 	bl	8015afe <tcp_seg_free>
            while (next &&
 801822a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801822c:	2b00      	cmp	r3, #0
 801822e:	d00e      	beq.n	801824e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018230:	4b91      	ldr	r3, [pc, #580]	@ (8018478 <tcp_receive+0xb04>)
 8018232:	881b      	ldrh	r3, [r3, #0]
 8018234:	461a      	mov	r2, r3
 8018236:	4b91      	ldr	r3, [pc, #580]	@ (801847c <tcp_receive+0xb08>)
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	441a      	add	r2, r3
 801823c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801823e:	68db      	ldr	r3, [r3, #12]
 8018240:	685b      	ldr	r3, [r3, #4]
 8018242:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8018244:	8909      	ldrh	r1, [r1, #8]
 8018246:	440b      	add	r3, r1
 8018248:	1ad3      	subs	r3, r2, r3
            while (next &&
 801824a:	2b00      	cmp	r3, #0
 801824c:	da9b      	bge.n	8018186 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801824e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018250:	2b00      	cmp	r3, #0
 8018252:	d059      	beq.n	8018308 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8018254:	4b88      	ldr	r3, [pc, #544]	@ (8018478 <tcp_receive+0xb04>)
 8018256:	881b      	ldrh	r3, [r3, #0]
 8018258:	461a      	mov	r2, r3
 801825a:	4b88      	ldr	r3, [pc, #544]	@ (801847c <tcp_receive+0xb08>)
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	441a      	add	r2, r3
 8018260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018262:	68db      	ldr	r3, [r3, #12]
 8018264:	685b      	ldr	r3, [r3, #4]
 8018266:	1ad3      	subs	r3, r2, r3
            if (next &&
 8018268:	2b00      	cmp	r3, #0
 801826a:	dd4d      	ble.n	8018308 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801826c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801826e:	68db      	ldr	r3, [r3, #12]
 8018270:	685b      	ldr	r3, [r3, #4]
 8018272:	b29a      	uxth	r2, r3
 8018274:	4b81      	ldr	r3, [pc, #516]	@ (801847c <tcp_receive+0xb08>)
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	b29b      	uxth	r3, r3
 801827a:	1ad3      	subs	r3, r2, r3
 801827c:	b29a      	uxth	r2, r3
 801827e:	4b80      	ldr	r3, [pc, #512]	@ (8018480 <tcp_receive+0xb0c>)
 8018280:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018282:	4b7f      	ldr	r3, [pc, #508]	@ (8018480 <tcp_receive+0xb0c>)
 8018284:	68db      	ldr	r3, [r3, #12]
 8018286:	899b      	ldrh	r3, [r3, #12]
 8018288:	b29b      	uxth	r3, r3
 801828a:	4618      	mov	r0, r3
 801828c:	f7fa fb36 	bl	80128fc <lwip_htons>
 8018290:	4603      	mov	r3, r0
 8018292:	b2db      	uxtb	r3, r3
 8018294:	f003 0302 	and.w	r3, r3, #2
 8018298:	2b00      	cmp	r3, #0
 801829a:	d005      	beq.n	80182a8 <tcp_receive+0x934>
                inseg.len -= 1;
 801829c:	4b78      	ldr	r3, [pc, #480]	@ (8018480 <tcp_receive+0xb0c>)
 801829e:	891b      	ldrh	r3, [r3, #8]
 80182a0:	3b01      	subs	r3, #1
 80182a2:	b29a      	uxth	r2, r3
 80182a4:	4b76      	ldr	r3, [pc, #472]	@ (8018480 <tcp_receive+0xb0c>)
 80182a6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80182a8:	4b75      	ldr	r3, [pc, #468]	@ (8018480 <tcp_receive+0xb0c>)
 80182aa:	685b      	ldr	r3, [r3, #4]
 80182ac:	4a74      	ldr	r2, [pc, #464]	@ (8018480 <tcp_receive+0xb0c>)
 80182ae:	8912      	ldrh	r2, [r2, #8]
 80182b0:	4611      	mov	r1, r2
 80182b2:	4618      	mov	r0, r3
 80182b4:	f7fb fe52 	bl	8013f5c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80182b8:	4b71      	ldr	r3, [pc, #452]	@ (8018480 <tcp_receive+0xb0c>)
 80182ba:	891c      	ldrh	r4, [r3, #8]
 80182bc:	4b70      	ldr	r3, [pc, #448]	@ (8018480 <tcp_receive+0xb0c>)
 80182be:	68db      	ldr	r3, [r3, #12]
 80182c0:	899b      	ldrh	r3, [r3, #12]
 80182c2:	b29b      	uxth	r3, r3
 80182c4:	4618      	mov	r0, r3
 80182c6:	f7fa fb19 	bl	80128fc <lwip_htons>
 80182ca:	4603      	mov	r3, r0
 80182cc:	b2db      	uxtb	r3, r3
 80182ce:	f003 0303 	and.w	r3, r3, #3
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d001      	beq.n	80182da <tcp_receive+0x966>
 80182d6:	2301      	movs	r3, #1
 80182d8:	e000      	b.n	80182dc <tcp_receive+0x968>
 80182da:	2300      	movs	r3, #0
 80182dc:	4423      	add	r3, r4
 80182de:	b29a      	uxth	r2, r3
 80182e0:	4b65      	ldr	r3, [pc, #404]	@ (8018478 <tcp_receive+0xb04>)
 80182e2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80182e4:	4b64      	ldr	r3, [pc, #400]	@ (8018478 <tcp_receive+0xb04>)
 80182e6:	881b      	ldrh	r3, [r3, #0]
 80182e8:	461a      	mov	r2, r3
 80182ea:	4b64      	ldr	r3, [pc, #400]	@ (801847c <tcp_receive+0xb08>)
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	441a      	add	r2, r3
 80182f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80182f2:	68db      	ldr	r3, [r3, #12]
 80182f4:	685b      	ldr	r3, [r3, #4]
 80182f6:	429a      	cmp	r2, r3
 80182f8:	d006      	beq.n	8018308 <tcp_receive+0x994>
 80182fa:	4b62      	ldr	r3, [pc, #392]	@ (8018484 <tcp_receive+0xb10>)
 80182fc:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8018300:	4961      	ldr	r1, [pc, #388]	@ (8018488 <tcp_receive+0xb14>)
 8018302:	4862      	ldr	r0, [pc, #392]	@ (801848c <tcp_receive+0xb18>)
 8018304:	f008 fb3e 	bl	8020984 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801830c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801830e:	4b5a      	ldr	r3, [pc, #360]	@ (8018478 <tcp_receive+0xb04>)
 8018310:	881b      	ldrh	r3, [r3, #0]
 8018312:	461a      	mov	r2, r3
 8018314:	4b59      	ldr	r3, [pc, #356]	@ (801847c <tcp_receive+0xb08>)
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	441a      	add	r2, r3
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018322:	4b55      	ldr	r3, [pc, #340]	@ (8018478 <tcp_receive+0xb04>)
 8018324:	881b      	ldrh	r3, [r3, #0]
 8018326:	429a      	cmp	r2, r3
 8018328:	d206      	bcs.n	8018338 <tcp_receive+0x9c4>
 801832a:	4b56      	ldr	r3, [pc, #344]	@ (8018484 <tcp_receive+0xb10>)
 801832c:	f240 6207 	movw	r2, #1543	@ 0x607
 8018330:	4957      	ldr	r1, [pc, #348]	@ (8018490 <tcp_receive+0xb1c>)
 8018332:	4856      	ldr	r0, [pc, #344]	@ (801848c <tcp_receive+0xb18>)
 8018334:	f008 fb26 	bl	8020984 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801833c:	4b4e      	ldr	r3, [pc, #312]	@ (8018478 <tcp_receive+0xb04>)
 801833e:	881b      	ldrh	r3, [r3, #0]
 8018340:	1ad3      	subs	r3, r2, r3
 8018342:	b29a      	uxth	r2, r3
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8018348:	6878      	ldr	r0, [r7, #4]
 801834a:	f7fc fd99 	bl	8014e80 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801834e:	4b4c      	ldr	r3, [pc, #304]	@ (8018480 <tcp_receive+0xb0c>)
 8018350:	685b      	ldr	r3, [r3, #4]
 8018352:	891b      	ldrh	r3, [r3, #8]
 8018354:	2b00      	cmp	r3, #0
 8018356:	d006      	beq.n	8018366 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8018358:	4b49      	ldr	r3, [pc, #292]	@ (8018480 <tcp_receive+0xb0c>)
 801835a:	685b      	ldr	r3, [r3, #4]
 801835c:	4a4d      	ldr	r2, [pc, #308]	@ (8018494 <tcp_receive+0xb20>)
 801835e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8018360:	4b47      	ldr	r3, [pc, #284]	@ (8018480 <tcp_receive+0xb0c>)
 8018362:	2200      	movs	r2, #0
 8018364:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018366:	4b46      	ldr	r3, [pc, #280]	@ (8018480 <tcp_receive+0xb0c>)
 8018368:	68db      	ldr	r3, [r3, #12]
 801836a:	899b      	ldrh	r3, [r3, #12]
 801836c:	b29b      	uxth	r3, r3
 801836e:	4618      	mov	r0, r3
 8018370:	f7fa fac4 	bl	80128fc <lwip_htons>
 8018374:	4603      	mov	r3, r0
 8018376:	b2db      	uxtb	r3, r3
 8018378:	f003 0301 	and.w	r3, r3, #1
 801837c:	2b00      	cmp	r3, #0
 801837e:	f000 80b8 	beq.w	80184f2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8018382:	4b45      	ldr	r3, [pc, #276]	@ (8018498 <tcp_receive+0xb24>)
 8018384:	781b      	ldrb	r3, [r3, #0]
 8018386:	f043 0320 	orr.w	r3, r3, #32
 801838a:	b2da      	uxtb	r2, r3
 801838c:	4b42      	ldr	r3, [pc, #264]	@ (8018498 <tcp_receive+0xb24>)
 801838e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8018390:	e0af      	b.n	80184f2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018396:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801839c:	68db      	ldr	r3, [r3, #12]
 801839e:	685b      	ldr	r3, [r3, #4]
 80183a0:	4a36      	ldr	r2, [pc, #216]	@ (801847c <tcp_receive+0xb08>)
 80183a2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80183a4:	68bb      	ldr	r3, [r7, #8]
 80183a6:	891b      	ldrh	r3, [r3, #8]
 80183a8:	461c      	mov	r4, r3
 80183aa:	68bb      	ldr	r3, [r7, #8]
 80183ac:	68db      	ldr	r3, [r3, #12]
 80183ae:	899b      	ldrh	r3, [r3, #12]
 80183b0:	b29b      	uxth	r3, r3
 80183b2:	4618      	mov	r0, r3
 80183b4:	f7fa faa2 	bl	80128fc <lwip_htons>
 80183b8:	4603      	mov	r3, r0
 80183ba:	b2db      	uxtb	r3, r3
 80183bc:	f003 0303 	and.w	r3, r3, #3
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d001      	beq.n	80183c8 <tcp_receive+0xa54>
 80183c4:	2301      	movs	r3, #1
 80183c6:	e000      	b.n	80183ca <tcp_receive+0xa56>
 80183c8:	2300      	movs	r3, #0
 80183ca:	191a      	adds	r2, r3, r4
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80183d0:	441a      	add	r2, r3
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80183da:	461c      	mov	r4, r3
 80183dc:	68bb      	ldr	r3, [r7, #8]
 80183de:	891b      	ldrh	r3, [r3, #8]
 80183e0:	461d      	mov	r5, r3
 80183e2:	68bb      	ldr	r3, [r7, #8]
 80183e4:	68db      	ldr	r3, [r3, #12]
 80183e6:	899b      	ldrh	r3, [r3, #12]
 80183e8:	b29b      	uxth	r3, r3
 80183ea:	4618      	mov	r0, r3
 80183ec:	f7fa fa86 	bl	80128fc <lwip_htons>
 80183f0:	4603      	mov	r3, r0
 80183f2:	b2db      	uxtb	r3, r3
 80183f4:	f003 0303 	and.w	r3, r3, #3
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d001      	beq.n	8018400 <tcp_receive+0xa8c>
 80183fc:	2301      	movs	r3, #1
 80183fe:	e000      	b.n	8018402 <tcp_receive+0xa8e>
 8018400:	2300      	movs	r3, #0
 8018402:	442b      	add	r3, r5
 8018404:	429c      	cmp	r4, r3
 8018406:	d206      	bcs.n	8018416 <tcp_receive+0xaa2>
 8018408:	4b1e      	ldr	r3, [pc, #120]	@ (8018484 <tcp_receive+0xb10>)
 801840a:	f240 622b 	movw	r2, #1579	@ 0x62b
 801840e:	4923      	ldr	r1, [pc, #140]	@ (801849c <tcp_receive+0xb28>)
 8018410:	481e      	ldr	r0, [pc, #120]	@ (801848c <tcp_receive+0xb18>)
 8018412:	f008 fab7 	bl	8020984 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018416:	68bb      	ldr	r3, [r7, #8]
 8018418:	891b      	ldrh	r3, [r3, #8]
 801841a:	461c      	mov	r4, r3
 801841c:	68bb      	ldr	r3, [r7, #8]
 801841e:	68db      	ldr	r3, [r3, #12]
 8018420:	899b      	ldrh	r3, [r3, #12]
 8018422:	b29b      	uxth	r3, r3
 8018424:	4618      	mov	r0, r3
 8018426:	f7fa fa69 	bl	80128fc <lwip_htons>
 801842a:	4603      	mov	r3, r0
 801842c:	b2db      	uxtb	r3, r3
 801842e:	f003 0303 	and.w	r3, r3, #3
 8018432:	2b00      	cmp	r3, #0
 8018434:	d001      	beq.n	801843a <tcp_receive+0xac6>
 8018436:	2301      	movs	r3, #1
 8018438:	e000      	b.n	801843c <tcp_receive+0xac8>
 801843a:	2300      	movs	r3, #0
 801843c:	1919      	adds	r1, r3, r4
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018442:	b28b      	uxth	r3, r1
 8018444:	1ad3      	subs	r3, r2, r3
 8018446:	b29a      	uxth	r2, r3
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801844c:	6878      	ldr	r0, [r7, #4]
 801844e:	f7fc fd17 	bl	8014e80 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8018452:	68bb      	ldr	r3, [r7, #8]
 8018454:	685b      	ldr	r3, [r3, #4]
 8018456:	891b      	ldrh	r3, [r3, #8]
 8018458:	2b00      	cmp	r3, #0
 801845a:	d028      	beq.n	80184ae <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801845c:	4b0d      	ldr	r3, [pc, #52]	@ (8018494 <tcp_receive+0xb20>)
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	2b00      	cmp	r3, #0
 8018462:	d01d      	beq.n	80184a0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8018464:	4b0b      	ldr	r3, [pc, #44]	@ (8018494 <tcp_receive+0xb20>)
 8018466:	681a      	ldr	r2, [r3, #0]
 8018468:	68bb      	ldr	r3, [r7, #8]
 801846a:	685b      	ldr	r3, [r3, #4]
 801846c:	4619      	mov	r1, r3
 801846e:	4610      	mov	r0, r2
 8018470:	f7fb ffc8 	bl	8014404 <pbuf_cat>
 8018474:	e018      	b.n	80184a8 <tcp_receive+0xb34>
 8018476:	bf00      	nop
 8018478:	2400cb3e 	.word	0x2400cb3e
 801847c:	2400cb34 	.word	0x2400cb34
 8018480:	2400cb14 	.word	0x2400cb14
 8018484:	08025088 	.word	0x08025088
 8018488:	08025468 	.word	0x08025468
 801848c:	080250d4 	.word	0x080250d4
 8018490:	080254a4 	.word	0x080254a4
 8018494:	2400cb44 	.word	0x2400cb44
 8018498:	2400cb41 	.word	0x2400cb41
 801849c:	080254c4 	.word	0x080254c4
            } else {
              recv_data = cseg->p;
 80184a0:	68bb      	ldr	r3, [r7, #8]
 80184a2:	685b      	ldr	r3, [r3, #4]
 80184a4:	4a70      	ldr	r2, [pc, #448]	@ (8018668 <tcp_receive+0xcf4>)
 80184a6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80184a8:	68bb      	ldr	r3, [r7, #8]
 80184aa:	2200      	movs	r2, #0
 80184ac:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80184ae:	68bb      	ldr	r3, [r7, #8]
 80184b0:	68db      	ldr	r3, [r3, #12]
 80184b2:	899b      	ldrh	r3, [r3, #12]
 80184b4:	b29b      	uxth	r3, r3
 80184b6:	4618      	mov	r0, r3
 80184b8:	f7fa fa20 	bl	80128fc <lwip_htons>
 80184bc:	4603      	mov	r3, r0
 80184be:	b2db      	uxtb	r3, r3
 80184c0:	f003 0301 	and.w	r3, r3, #1
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d00d      	beq.n	80184e4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80184c8:	4b68      	ldr	r3, [pc, #416]	@ (801866c <tcp_receive+0xcf8>)
 80184ca:	781b      	ldrb	r3, [r3, #0]
 80184cc:	f043 0320 	orr.w	r3, r3, #32
 80184d0:	b2da      	uxtb	r2, r3
 80184d2:	4b66      	ldr	r3, [pc, #408]	@ (801866c <tcp_receive+0xcf8>)
 80184d4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	7d1b      	ldrb	r3, [r3, #20]
 80184da:	2b04      	cmp	r3, #4
 80184dc:	d102      	bne.n	80184e4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	2207      	movs	r2, #7
 80184e2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80184e4:	68bb      	ldr	r3, [r7, #8]
 80184e6:	681a      	ldr	r2, [r3, #0]
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80184ec:	68b8      	ldr	r0, [r7, #8]
 80184ee:	f7fd fb06 	bl	8015afe <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d008      	beq.n	801850c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80184fe:	68db      	ldr	r3, [r3, #12]
 8018500:	685a      	ldr	r2, [r3, #4]
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8018506:	429a      	cmp	r2, r3
 8018508:	f43f af43 	beq.w	8018392 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	8b5b      	ldrh	r3, [r3, #26]
 8018510:	f003 0301 	and.w	r3, r3, #1
 8018514:	2b00      	cmp	r3, #0
 8018516:	d00e      	beq.n	8018536 <tcp_receive+0xbc2>
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	8b5b      	ldrh	r3, [r3, #26]
 801851c:	f023 0301 	bic.w	r3, r3, #1
 8018520:	b29a      	uxth	r2, r3
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	835a      	strh	r2, [r3, #26]
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	8b5b      	ldrh	r3, [r3, #26]
 801852a:	f043 0302 	orr.w	r3, r3, #2
 801852e:	b29a      	uxth	r2, r3
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018534:	e187      	b.n	8018846 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	8b5b      	ldrh	r3, [r3, #26]
 801853a:	f043 0301 	orr.w	r3, r3, #1
 801853e:	b29a      	uxth	r2, r3
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018544:	e17f      	b.n	8018846 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801854a:	2b00      	cmp	r3, #0
 801854c:	d106      	bne.n	801855c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801854e:	4848      	ldr	r0, [pc, #288]	@ (8018670 <tcp_receive+0xcfc>)
 8018550:	f7fd faee 	bl	8015b30 <tcp_seg_copy>
 8018554:	4602      	mov	r2, r0
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	675a      	str	r2, [r3, #116]	@ 0x74
 801855a:	e16c      	b.n	8018836 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801855c:	2300      	movs	r3, #0
 801855e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018564:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018566:	e156      	b.n	8018816 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8018568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801856a:	68db      	ldr	r3, [r3, #12]
 801856c:	685a      	ldr	r2, [r3, #4]
 801856e:	4b41      	ldr	r3, [pc, #260]	@ (8018674 <tcp_receive+0xd00>)
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	429a      	cmp	r2, r3
 8018574:	d11d      	bne.n	80185b2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8018576:	4b3e      	ldr	r3, [pc, #248]	@ (8018670 <tcp_receive+0xcfc>)
 8018578:	891a      	ldrh	r2, [r3, #8]
 801857a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801857c:	891b      	ldrh	r3, [r3, #8]
 801857e:	429a      	cmp	r2, r3
 8018580:	f240 814e 	bls.w	8018820 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018584:	483a      	ldr	r0, [pc, #232]	@ (8018670 <tcp_receive+0xcfc>)
 8018586:	f7fd fad3 	bl	8015b30 <tcp_seg_copy>
 801858a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801858c:	697b      	ldr	r3, [r7, #20]
 801858e:	2b00      	cmp	r3, #0
 8018590:	f000 8148 	beq.w	8018824 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8018594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018596:	2b00      	cmp	r3, #0
 8018598:	d003      	beq.n	80185a2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801859a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801859c:	697a      	ldr	r2, [r7, #20]
 801859e:	601a      	str	r2, [r3, #0]
 80185a0:	e002      	b.n	80185a8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	697a      	ldr	r2, [r7, #20]
 80185a6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80185a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80185aa:	6978      	ldr	r0, [r7, #20]
 80185ac:	f7ff f8de 	bl	801776c <tcp_oos_insert_segment>
                }
                break;
 80185b0:	e138      	b.n	8018824 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80185b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d117      	bne.n	80185e8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80185b8:	4b2e      	ldr	r3, [pc, #184]	@ (8018674 <tcp_receive+0xd00>)
 80185ba:	681a      	ldr	r2, [r3, #0]
 80185bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80185be:	68db      	ldr	r3, [r3, #12]
 80185c0:	685b      	ldr	r3, [r3, #4]
 80185c2:	1ad3      	subs	r3, r2, r3
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	da57      	bge.n	8018678 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80185c8:	4829      	ldr	r0, [pc, #164]	@ (8018670 <tcp_receive+0xcfc>)
 80185ca:	f7fd fab1 	bl	8015b30 <tcp_seg_copy>
 80185ce:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80185d0:	69bb      	ldr	r3, [r7, #24]
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	f000 8128 	beq.w	8018828 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	69ba      	ldr	r2, [r7, #24]
 80185dc:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80185de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80185e0:	69b8      	ldr	r0, [r7, #24]
 80185e2:	f7ff f8c3 	bl	801776c <tcp_oos_insert_segment>
                  }
                  break;
 80185e6:	e11f      	b.n	8018828 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80185e8:	4b22      	ldr	r3, [pc, #136]	@ (8018674 <tcp_receive+0xd00>)
 80185ea:	681a      	ldr	r2, [r3, #0]
 80185ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80185ee:	68db      	ldr	r3, [r3, #12]
 80185f0:	685b      	ldr	r3, [r3, #4]
 80185f2:	1ad3      	subs	r3, r2, r3
 80185f4:	3b01      	subs	r3, #1
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	db3e      	blt.n	8018678 <tcp_receive+0xd04>
 80185fa:	4b1e      	ldr	r3, [pc, #120]	@ (8018674 <tcp_receive+0xd00>)
 80185fc:	681a      	ldr	r2, [r3, #0]
 80185fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018600:	68db      	ldr	r3, [r3, #12]
 8018602:	685b      	ldr	r3, [r3, #4]
 8018604:	1ad3      	subs	r3, r2, r3
 8018606:	3301      	adds	r3, #1
 8018608:	2b00      	cmp	r3, #0
 801860a:	dc35      	bgt.n	8018678 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801860c:	4818      	ldr	r0, [pc, #96]	@ (8018670 <tcp_receive+0xcfc>)
 801860e:	f7fd fa8f 	bl	8015b30 <tcp_seg_copy>
 8018612:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8018614:	69fb      	ldr	r3, [r7, #28]
 8018616:	2b00      	cmp	r3, #0
 8018618:	f000 8108 	beq.w	801882c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801861c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801861e:	68db      	ldr	r3, [r3, #12]
 8018620:	685b      	ldr	r3, [r3, #4]
 8018622:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018624:	8912      	ldrh	r2, [r2, #8]
 8018626:	441a      	add	r2, r3
 8018628:	4b12      	ldr	r3, [pc, #72]	@ (8018674 <tcp_receive+0xd00>)
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	1ad3      	subs	r3, r2, r3
 801862e:	2b00      	cmp	r3, #0
 8018630:	dd12      	ble.n	8018658 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018632:	4b10      	ldr	r3, [pc, #64]	@ (8018674 <tcp_receive+0xd00>)
 8018634:	681b      	ldr	r3, [r3, #0]
 8018636:	b29a      	uxth	r2, r3
 8018638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801863a:	68db      	ldr	r3, [r3, #12]
 801863c:	685b      	ldr	r3, [r3, #4]
 801863e:	b29b      	uxth	r3, r3
 8018640:	1ad3      	subs	r3, r2, r3
 8018642:	b29a      	uxth	r2, r3
 8018644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018646:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8018648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801864a:	685a      	ldr	r2, [r3, #4]
 801864c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801864e:	891b      	ldrh	r3, [r3, #8]
 8018650:	4619      	mov	r1, r3
 8018652:	4610      	mov	r0, r2
 8018654:	f7fb fc82 	bl	8013f5c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8018658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801865a:	69fa      	ldr	r2, [r7, #28]
 801865c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801865e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018660:	69f8      	ldr	r0, [r7, #28]
 8018662:	f7ff f883 	bl	801776c <tcp_oos_insert_segment>
                  }
                  break;
 8018666:	e0e1      	b.n	801882c <tcp_receive+0xeb8>
 8018668:	2400cb44 	.word	0x2400cb44
 801866c:	2400cb41 	.word	0x2400cb41
 8018670:	2400cb14 	.word	0x2400cb14
 8018674:	2400cb34 	.word	0x2400cb34
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8018678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801867a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801867c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	2b00      	cmp	r3, #0
 8018682:	f040 80c5 	bne.w	8018810 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8018686:	4b7f      	ldr	r3, [pc, #508]	@ (8018884 <tcp_receive+0xf10>)
 8018688:	681a      	ldr	r2, [r3, #0]
 801868a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801868c:	68db      	ldr	r3, [r3, #12]
 801868e:	685b      	ldr	r3, [r3, #4]
 8018690:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8018692:	2b00      	cmp	r3, #0
 8018694:	f340 80bc 	ble.w	8018810 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801869a:	68db      	ldr	r3, [r3, #12]
 801869c:	899b      	ldrh	r3, [r3, #12]
 801869e:	b29b      	uxth	r3, r3
 80186a0:	4618      	mov	r0, r3
 80186a2:	f7fa f92b 	bl	80128fc <lwip_htons>
 80186a6:	4603      	mov	r3, r0
 80186a8:	b2db      	uxtb	r3, r3
 80186aa:	f003 0301 	and.w	r3, r3, #1
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	f040 80be 	bne.w	8018830 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80186b4:	4874      	ldr	r0, [pc, #464]	@ (8018888 <tcp_receive+0xf14>)
 80186b6:	f7fd fa3b 	bl	8015b30 <tcp_seg_copy>
 80186ba:	4602      	mov	r2, r0
 80186bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80186be:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80186c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	f000 80b5 	beq.w	8018834 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80186ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80186cc:	68db      	ldr	r3, [r3, #12]
 80186ce:	685b      	ldr	r3, [r3, #4]
 80186d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80186d2:	8912      	ldrh	r2, [r2, #8]
 80186d4:	441a      	add	r2, r3
 80186d6:	4b6b      	ldr	r3, [pc, #428]	@ (8018884 <tcp_receive+0xf10>)
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	1ad3      	subs	r3, r2, r3
 80186dc:	2b00      	cmp	r3, #0
 80186de:	dd12      	ble.n	8018706 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80186e0:	4b68      	ldr	r3, [pc, #416]	@ (8018884 <tcp_receive+0xf10>)
 80186e2:	681b      	ldr	r3, [r3, #0]
 80186e4:	b29a      	uxth	r2, r3
 80186e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80186e8:	68db      	ldr	r3, [r3, #12]
 80186ea:	685b      	ldr	r3, [r3, #4]
 80186ec:	b29b      	uxth	r3, r3
 80186ee:	1ad3      	subs	r3, r2, r3
 80186f0:	b29a      	uxth	r2, r3
 80186f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80186f4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80186f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80186f8:	685a      	ldr	r2, [r3, #4]
 80186fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80186fc:	891b      	ldrh	r3, [r3, #8]
 80186fe:	4619      	mov	r1, r3
 8018700:	4610      	mov	r0, r2
 8018702:	f7fb fc2b 	bl	8013f5c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8018706:	4b61      	ldr	r3, [pc, #388]	@ (801888c <tcp_receive+0xf18>)
 8018708:	881b      	ldrh	r3, [r3, #0]
 801870a:	461a      	mov	r2, r3
 801870c:	4b5d      	ldr	r3, [pc, #372]	@ (8018884 <tcp_receive+0xf10>)
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	441a      	add	r2, r3
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018716:	6879      	ldr	r1, [r7, #4]
 8018718:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801871a:	440b      	add	r3, r1
 801871c:	1ad3      	subs	r3, r2, r3
 801871e:	2b00      	cmp	r3, #0
 8018720:	f340 8088 	ble.w	8018834 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	68db      	ldr	r3, [r3, #12]
 801872a:	899b      	ldrh	r3, [r3, #12]
 801872c:	b29b      	uxth	r3, r3
 801872e:	4618      	mov	r0, r3
 8018730:	f7fa f8e4 	bl	80128fc <lwip_htons>
 8018734:	4603      	mov	r3, r0
 8018736:	b2db      	uxtb	r3, r3
 8018738:	f003 0301 	and.w	r3, r3, #1
 801873c:	2b00      	cmp	r3, #0
 801873e:	d021      	beq.n	8018784 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8018740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	68db      	ldr	r3, [r3, #12]
 8018746:	899b      	ldrh	r3, [r3, #12]
 8018748:	b29b      	uxth	r3, r3
 801874a:	b21b      	sxth	r3, r3
 801874c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8018750:	b21c      	sxth	r4, r3
 8018752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	68db      	ldr	r3, [r3, #12]
 8018758:	899b      	ldrh	r3, [r3, #12]
 801875a:	b29b      	uxth	r3, r3
 801875c:	4618      	mov	r0, r3
 801875e:	f7fa f8cd 	bl	80128fc <lwip_htons>
 8018762:	4603      	mov	r3, r0
 8018764:	b2db      	uxtb	r3, r3
 8018766:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801876a:	b29b      	uxth	r3, r3
 801876c:	4618      	mov	r0, r3
 801876e:	f7fa f8c5 	bl	80128fc <lwip_htons>
 8018772:	4603      	mov	r3, r0
 8018774:	b21b      	sxth	r3, r3
 8018776:	4323      	orrs	r3, r4
 8018778:	b21a      	sxth	r2, r3
 801877a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	68db      	ldr	r3, [r3, #12]
 8018780:	b292      	uxth	r2, r2
 8018782:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018788:	b29a      	uxth	r2, r3
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801878e:	4413      	add	r3, r2
 8018790:	b299      	uxth	r1, r3
 8018792:	4b3c      	ldr	r3, [pc, #240]	@ (8018884 <tcp_receive+0xf10>)
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	b29a      	uxth	r2, r3
 8018798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801879a:	681b      	ldr	r3, [r3, #0]
 801879c:	1a8a      	subs	r2, r1, r2
 801879e:	b292      	uxth	r2, r2
 80187a0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80187a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	685a      	ldr	r2, [r3, #4]
 80187a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	891b      	ldrh	r3, [r3, #8]
 80187ae:	4619      	mov	r1, r3
 80187b0:	4610      	mov	r0, r2
 80187b2:	f7fb fbd3 	bl	8013f5c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80187b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	891c      	ldrh	r4, [r3, #8]
 80187bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	68db      	ldr	r3, [r3, #12]
 80187c2:	899b      	ldrh	r3, [r3, #12]
 80187c4:	b29b      	uxth	r3, r3
 80187c6:	4618      	mov	r0, r3
 80187c8:	f7fa f898 	bl	80128fc <lwip_htons>
 80187cc:	4603      	mov	r3, r0
 80187ce:	b2db      	uxtb	r3, r3
 80187d0:	f003 0303 	and.w	r3, r3, #3
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d001      	beq.n	80187dc <tcp_receive+0xe68>
 80187d8:	2301      	movs	r3, #1
 80187da:	e000      	b.n	80187de <tcp_receive+0xe6a>
 80187dc:	2300      	movs	r3, #0
 80187de:	4423      	add	r3, r4
 80187e0:	b29a      	uxth	r2, r3
 80187e2:	4b2a      	ldr	r3, [pc, #168]	@ (801888c <tcp_receive+0xf18>)
 80187e4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80187e6:	4b29      	ldr	r3, [pc, #164]	@ (801888c <tcp_receive+0xf18>)
 80187e8:	881b      	ldrh	r3, [r3, #0]
 80187ea:	461a      	mov	r2, r3
 80187ec:	4b25      	ldr	r3, [pc, #148]	@ (8018884 <tcp_receive+0xf10>)
 80187ee:	681b      	ldr	r3, [r3, #0]
 80187f0:	441a      	add	r2, r3
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80187f6:	6879      	ldr	r1, [r7, #4]
 80187f8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80187fa:	440b      	add	r3, r1
 80187fc:	429a      	cmp	r2, r3
 80187fe:	d019      	beq.n	8018834 <tcp_receive+0xec0>
 8018800:	4b23      	ldr	r3, [pc, #140]	@ (8018890 <tcp_receive+0xf1c>)
 8018802:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8018806:	4923      	ldr	r1, [pc, #140]	@ (8018894 <tcp_receive+0xf20>)
 8018808:	4823      	ldr	r0, [pc, #140]	@ (8018898 <tcp_receive+0xf24>)
 801880a:	f008 f8bb 	bl	8020984 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801880e:	e011      	b.n	8018834 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018812:	681b      	ldr	r3, [r3, #0]
 8018814:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018818:	2b00      	cmp	r3, #0
 801881a:	f47f aea5 	bne.w	8018568 <tcp_receive+0xbf4>
 801881e:	e00a      	b.n	8018836 <tcp_receive+0xec2>
                break;
 8018820:	bf00      	nop
 8018822:	e008      	b.n	8018836 <tcp_receive+0xec2>
                break;
 8018824:	bf00      	nop
 8018826:	e006      	b.n	8018836 <tcp_receive+0xec2>
                  break;
 8018828:	bf00      	nop
 801882a:	e004      	b.n	8018836 <tcp_receive+0xec2>
                  break;
 801882c:	bf00      	nop
 801882e:	e002      	b.n	8018836 <tcp_receive+0xec2>
                  break;
 8018830:	bf00      	nop
 8018832:	e000      	b.n	8018836 <tcp_receive+0xec2>
                break;
 8018834:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8018836:	6878      	ldr	r0, [r7, #4]
 8018838:	f001 fe88 	bl	801a54c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801883c:	e003      	b.n	8018846 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801883e:	6878      	ldr	r0, [r7, #4]
 8018840:	f001 fe84 	bl	801a54c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018844:	e01a      	b.n	801887c <tcp_receive+0xf08>
 8018846:	e019      	b.n	801887c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8018848:	4b0e      	ldr	r3, [pc, #56]	@ (8018884 <tcp_receive+0xf10>)
 801884a:	681a      	ldr	r2, [r3, #0]
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018850:	1ad3      	subs	r3, r2, r3
 8018852:	2b00      	cmp	r3, #0
 8018854:	db0a      	blt.n	801886c <tcp_receive+0xef8>
 8018856:	4b0b      	ldr	r3, [pc, #44]	@ (8018884 <tcp_receive+0xf10>)
 8018858:	681a      	ldr	r2, [r3, #0]
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801885e:	6879      	ldr	r1, [r7, #4]
 8018860:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018862:	440b      	add	r3, r1
 8018864:	1ad3      	subs	r3, r2, r3
 8018866:	3301      	adds	r3, #1
 8018868:	2b00      	cmp	r3, #0
 801886a:	dd07      	ble.n	801887c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	8b5b      	ldrh	r3, [r3, #26]
 8018870:	f043 0302 	orr.w	r3, r3, #2
 8018874:	b29a      	uxth	r2, r3
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801887a:	e7ff      	b.n	801887c <tcp_receive+0xf08>
 801887c:	bf00      	nop
 801887e:	3750      	adds	r7, #80	@ 0x50
 8018880:	46bd      	mov	sp, r7
 8018882:	bdb0      	pop	{r4, r5, r7, pc}
 8018884:	2400cb34 	.word	0x2400cb34
 8018888:	2400cb14 	.word	0x2400cb14
 801888c:	2400cb3e 	.word	0x2400cb3e
 8018890:	08025088 	.word	0x08025088
 8018894:	08025430 	.word	0x08025430
 8018898:	080250d4 	.word	0x080250d4

0801889c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801889c:	b480      	push	{r7}
 801889e:	b083      	sub	sp, #12
 80188a0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80188a2:	4b15      	ldr	r3, [pc, #84]	@ (80188f8 <tcp_get_next_optbyte+0x5c>)
 80188a4:	881b      	ldrh	r3, [r3, #0]
 80188a6:	1c5a      	adds	r2, r3, #1
 80188a8:	b291      	uxth	r1, r2
 80188aa:	4a13      	ldr	r2, [pc, #76]	@ (80188f8 <tcp_get_next_optbyte+0x5c>)
 80188ac:	8011      	strh	r1, [r2, #0]
 80188ae:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80188b0:	4b12      	ldr	r3, [pc, #72]	@ (80188fc <tcp_get_next_optbyte+0x60>)
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d004      	beq.n	80188c2 <tcp_get_next_optbyte+0x26>
 80188b8:	4b11      	ldr	r3, [pc, #68]	@ (8018900 <tcp_get_next_optbyte+0x64>)
 80188ba:	881b      	ldrh	r3, [r3, #0]
 80188bc:	88fa      	ldrh	r2, [r7, #6]
 80188be:	429a      	cmp	r2, r3
 80188c0:	d208      	bcs.n	80188d4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80188c2:	4b10      	ldr	r3, [pc, #64]	@ (8018904 <tcp_get_next_optbyte+0x68>)
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	3314      	adds	r3, #20
 80188c8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80188ca:	88fb      	ldrh	r3, [r7, #6]
 80188cc:	683a      	ldr	r2, [r7, #0]
 80188ce:	4413      	add	r3, r2
 80188d0:	781b      	ldrb	r3, [r3, #0]
 80188d2:	e00b      	b.n	80188ec <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80188d4:	88fb      	ldrh	r3, [r7, #6]
 80188d6:	b2da      	uxtb	r2, r3
 80188d8:	4b09      	ldr	r3, [pc, #36]	@ (8018900 <tcp_get_next_optbyte+0x64>)
 80188da:	881b      	ldrh	r3, [r3, #0]
 80188dc:	b2db      	uxtb	r3, r3
 80188de:	1ad3      	subs	r3, r2, r3
 80188e0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80188e2:	4b06      	ldr	r3, [pc, #24]	@ (80188fc <tcp_get_next_optbyte+0x60>)
 80188e4:	681a      	ldr	r2, [r3, #0]
 80188e6:	797b      	ldrb	r3, [r7, #5]
 80188e8:	4413      	add	r3, r2
 80188ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 80188ec:	4618      	mov	r0, r3
 80188ee:	370c      	adds	r7, #12
 80188f0:	46bd      	mov	sp, r7
 80188f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188f6:	4770      	bx	lr
 80188f8:	2400cb30 	.word	0x2400cb30
 80188fc:	2400cb2c 	.word	0x2400cb2c
 8018900:	2400cb2a 	.word	0x2400cb2a
 8018904:	2400cb24 	.word	0x2400cb24

08018908 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8018908:	b580      	push	{r7, lr}
 801890a:	b084      	sub	sp, #16
 801890c:	af00      	add	r7, sp, #0
 801890e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	2b00      	cmp	r3, #0
 8018914:	d106      	bne.n	8018924 <tcp_parseopt+0x1c>
 8018916:	4b32      	ldr	r3, [pc, #200]	@ (80189e0 <tcp_parseopt+0xd8>)
 8018918:	f240 727d 	movw	r2, #1917	@ 0x77d
 801891c:	4931      	ldr	r1, [pc, #196]	@ (80189e4 <tcp_parseopt+0xdc>)
 801891e:	4832      	ldr	r0, [pc, #200]	@ (80189e8 <tcp_parseopt+0xe0>)
 8018920:	f008 f830 	bl	8020984 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8018924:	4b31      	ldr	r3, [pc, #196]	@ (80189ec <tcp_parseopt+0xe4>)
 8018926:	881b      	ldrh	r3, [r3, #0]
 8018928:	2b00      	cmp	r3, #0
 801892a:	d056      	beq.n	80189da <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801892c:	4b30      	ldr	r3, [pc, #192]	@ (80189f0 <tcp_parseopt+0xe8>)
 801892e:	2200      	movs	r2, #0
 8018930:	801a      	strh	r2, [r3, #0]
 8018932:	e046      	b.n	80189c2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8018934:	f7ff ffb2 	bl	801889c <tcp_get_next_optbyte>
 8018938:	4603      	mov	r3, r0
 801893a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801893c:	7bfb      	ldrb	r3, [r7, #15]
 801893e:	2b02      	cmp	r3, #2
 8018940:	d006      	beq.n	8018950 <tcp_parseopt+0x48>
 8018942:	2b02      	cmp	r3, #2
 8018944:	dc2a      	bgt.n	801899c <tcp_parseopt+0x94>
 8018946:	2b00      	cmp	r3, #0
 8018948:	d042      	beq.n	80189d0 <tcp_parseopt+0xc8>
 801894a:	2b01      	cmp	r3, #1
 801894c:	d038      	beq.n	80189c0 <tcp_parseopt+0xb8>
 801894e:	e025      	b.n	801899c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8018950:	f7ff ffa4 	bl	801889c <tcp_get_next_optbyte>
 8018954:	4603      	mov	r3, r0
 8018956:	2b04      	cmp	r3, #4
 8018958:	d13c      	bne.n	80189d4 <tcp_parseopt+0xcc>
 801895a:	4b25      	ldr	r3, [pc, #148]	@ (80189f0 <tcp_parseopt+0xe8>)
 801895c:	881b      	ldrh	r3, [r3, #0]
 801895e:	3301      	adds	r3, #1
 8018960:	4a22      	ldr	r2, [pc, #136]	@ (80189ec <tcp_parseopt+0xe4>)
 8018962:	8812      	ldrh	r2, [r2, #0]
 8018964:	4293      	cmp	r3, r2
 8018966:	da35      	bge.n	80189d4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8018968:	f7ff ff98 	bl	801889c <tcp_get_next_optbyte>
 801896c:	4603      	mov	r3, r0
 801896e:	021b      	lsls	r3, r3, #8
 8018970:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8018972:	f7ff ff93 	bl	801889c <tcp_get_next_optbyte>
 8018976:	4603      	mov	r3, r0
 8018978:	461a      	mov	r2, r3
 801897a:	89bb      	ldrh	r3, [r7, #12]
 801897c:	4313      	orrs	r3, r2
 801897e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8018980:	89bb      	ldrh	r3, [r7, #12]
 8018982:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8018986:	d804      	bhi.n	8018992 <tcp_parseopt+0x8a>
 8018988:	89bb      	ldrh	r3, [r7, #12]
 801898a:	2b00      	cmp	r3, #0
 801898c:	d001      	beq.n	8018992 <tcp_parseopt+0x8a>
 801898e:	89ba      	ldrh	r2, [r7, #12]
 8018990:	e001      	b.n	8018996 <tcp_parseopt+0x8e>
 8018992:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801899a:	e012      	b.n	80189c2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801899c:	f7ff ff7e 	bl	801889c <tcp_get_next_optbyte>
 80189a0:	4603      	mov	r3, r0
 80189a2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80189a4:	7afb      	ldrb	r3, [r7, #11]
 80189a6:	2b01      	cmp	r3, #1
 80189a8:	d916      	bls.n	80189d8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80189aa:	7afb      	ldrb	r3, [r7, #11]
 80189ac:	b29a      	uxth	r2, r3
 80189ae:	4b10      	ldr	r3, [pc, #64]	@ (80189f0 <tcp_parseopt+0xe8>)
 80189b0:	881b      	ldrh	r3, [r3, #0]
 80189b2:	4413      	add	r3, r2
 80189b4:	b29b      	uxth	r3, r3
 80189b6:	3b02      	subs	r3, #2
 80189b8:	b29a      	uxth	r2, r3
 80189ba:	4b0d      	ldr	r3, [pc, #52]	@ (80189f0 <tcp_parseopt+0xe8>)
 80189bc:	801a      	strh	r2, [r3, #0]
 80189be:	e000      	b.n	80189c2 <tcp_parseopt+0xba>
          break;
 80189c0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80189c2:	4b0b      	ldr	r3, [pc, #44]	@ (80189f0 <tcp_parseopt+0xe8>)
 80189c4:	881a      	ldrh	r2, [r3, #0]
 80189c6:	4b09      	ldr	r3, [pc, #36]	@ (80189ec <tcp_parseopt+0xe4>)
 80189c8:	881b      	ldrh	r3, [r3, #0]
 80189ca:	429a      	cmp	r2, r3
 80189cc:	d3b2      	bcc.n	8018934 <tcp_parseopt+0x2c>
 80189ce:	e004      	b.n	80189da <tcp_parseopt+0xd2>
          return;
 80189d0:	bf00      	nop
 80189d2:	e002      	b.n	80189da <tcp_parseopt+0xd2>
            return;
 80189d4:	bf00      	nop
 80189d6:	e000      	b.n	80189da <tcp_parseopt+0xd2>
            return;
 80189d8:	bf00      	nop
      }
    }
  }
}
 80189da:	3710      	adds	r7, #16
 80189dc:	46bd      	mov	sp, r7
 80189de:	bd80      	pop	{r7, pc}
 80189e0:	08025088 	.word	0x08025088
 80189e4:	080254ec 	.word	0x080254ec
 80189e8:	080250d4 	.word	0x080250d4
 80189ec:	2400cb28 	.word	0x2400cb28
 80189f0:	2400cb30 	.word	0x2400cb30

080189f4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80189f4:	b480      	push	{r7}
 80189f6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80189f8:	4b05      	ldr	r3, [pc, #20]	@ (8018a10 <tcp_trigger_input_pcb_close+0x1c>)
 80189fa:	781b      	ldrb	r3, [r3, #0]
 80189fc:	f043 0310 	orr.w	r3, r3, #16
 8018a00:	b2da      	uxtb	r2, r3
 8018a02:	4b03      	ldr	r3, [pc, #12]	@ (8018a10 <tcp_trigger_input_pcb_close+0x1c>)
 8018a04:	701a      	strb	r2, [r3, #0]
}
 8018a06:	bf00      	nop
 8018a08:	46bd      	mov	sp, r7
 8018a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a0e:	4770      	bx	lr
 8018a10:	2400cb41 	.word	0x2400cb41

08018a14 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8018a14:	b580      	push	{r7, lr}
 8018a16:	b084      	sub	sp, #16
 8018a18:	af00      	add	r7, sp, #0
 8018a1a:	60f8      	str	r0, [r7, #12]
 8018a1c:	60b9      	str	r1, [r7, #8]
 8018a1e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8018a20:	68fb      	ldr	r3, [r7, #12]
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	d00a      	beq.n	8018a3c <tcp_route+0x28>
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	7a1b      	ldrb	r3, [r3, #8]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d006      	beq.n	8018a3c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8018a2e:	68fb      	ldr	r3, [r7, #12]
 8018a30:	7a1b      	ldrb	r3, [r3, #8]
 8018a32:	4618      	mov	r0, r3
 8018a34:	f7fb f88a 	bl	8013b4c <netif_get_by_index>
 8018a38:	4603      	mov	r3, r0
 8018a3a:	e003      	b.n	8018a44 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8018a3c:	6878      	ldr	r0, [r7, #4]
 8018a3e:	f005 fd81 	bl	801e544 <ip4_route>
 8018a42:	4603      	mov	r3, r0
  }
}
 8018a44:	4618      	mov	r0, r3
 8018a46:	3710      	adds	r7, #16
 8018a48:	46bd      	mov	sp, r7
 8018a4a:	bd80      	pop	{r7, pc}

08018a4c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8018a4c:	b590      	push	{r4, r7, lr}
 8018a4e:	b087      	sub	sp, #28
 8018a50:	af00      	add	r7, sp, #0
 8018a52:	60f8      	str	r0, [r7, #12]
 8018a54:	60b9      	str	r1, [r7, #8]
 8018a56:	603b      	str	r3, [r7, #0]
 8018a58:	4613      	mov	r3, r2
 8018a5a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d105      	bne.n	8018a6e <tcp_create_segment+0x22>
 8018a62:	4b43      	ldr	r3, [pc, #268]	@ (8018b70 <tcp_create_segment+0x124>)
 8018a64:	22a3      	movs	r2, #163	@ 0xa3
 8018a66:	4943      	ldr	r1, [pc, #268]	@ (8018b74 <tcp_create_segment+0x128>)
 8018a68:	4843      	ldr	r0, [pc, #268]	@ (8018b78 <tcp_create_segment+0x12c>)
 8018a6a:	f007 ff8b 	bl	8020984 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8018a6e:	68bb      	ldr	r3, [r7, #8]
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d105      	bne.n	8018a80 <tcp_create_segment+0x34>
 8018a74:	4b3e      	ldr	r3, [pc, #248]	@ (8018b70 <tcp_create_segment+0x124>)
 8018a76:	22a4      	movs	r2, #164	@ 0xa4
 8018a78:	4940      	ldr	r1, [pc, #256]	@ (8018b7c <tcp_create_segment+0x130>)
 8018a7a:	483f      	ldr	r0, [pc, #252]	@ (8018b78 <tcp_create_segment+0x12c>)
 8018a7c:	f007 ff82 	bl	8020984 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018a80:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018a84:	009b      	lsls	r3, r3, #2
 8018a86:	b2db      	uxtb	r3, r3
 8018a88:	f003 0304 	and.w	r3, r3, #4
 8018a8c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8018a8e:	2003      	movs	r0, #3
 8018a90:	f7fa fcc4 	bl	801341c <memp_malloc>
 8018a94:	6138      	str	r0, [r7, #16]
 8018a96:	693b      	ldr	r3, [r7, #16]
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d104      	bne.n	8018aa6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8018a9c:	68b8      	ldr	r0, [r7, #8]
 8018a9e:	f7fb fbe3 	bl	8014268 <pbuf_free>
    return NULL;
 8018aa2:	2300      	movs	r3, #0
 8018aa4:	e060      	b.n	8018b68 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8018aa6:	693b      	ldr	r3, [r7, #16]
 8018aa8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8018aac:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8018aae:	693b      	ldr	r3, [r7, #16]
 8018ab0:	2200      	movs	r2, #0
 8018ab2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8018ab4:	693b      	ldr	r3, [r7, #16]
 8018ab6:	68ba      	ldr	r2, [r7, #8]
 8018ab8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8018aba:	68bb      	ldr	r3, [r7, #8]
 8018abc:	891a      	ldrh	r2, [r3, #8]
 8018abe:	7dfb      	ldrb	r3, [r7, #23]
 8018ac0:	b29b      	uxth	r3, r3
 8018ac2:	429a      	cmp	r2, r3
 8018ac4:	d205      	bcs.n	8018ad2 <tcp_create_segment+0x86>
 8018ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8018b70 <tcp_create_segment+0x124>)
 8018ac8:	22b0      	movs	r2, #176	@ 0xb0
 8018aca:	492d      	ldr	r1, [pc, #180]	@ (8018b80 <tcp_create_segment+0x134>)
 8018acc:	482a      	ldr	r0, [pc, #168]	@ (8018b78 <tcp_create_segment+0x12c>)
 8018ace:	f007 ff59 	bl	8020984 <iprintf>
  seg->len = p->tot_len - optlen;
 8018ad2:	68bb      	ldr	r3, [r7, #8]
 8018ad4:	891a      	ldrh	r2, [r3, #8]
 8018ad6:	7dfb      	ldrb	r3, [r7, #23]
 8018ad8:	b29b      	uxth	r3, r3
 8018ada:	1ad3      	subs	r3, r2, r3
 8018adc:	b29a      	uxth	r2, r3
 8018ade:	693b      	ldr	r3, [r7, #16]
 8018ae0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018ae2:	2114      	movs	r1, #20
 8018ae4:	68b8      	ldr	r0, [r7, #8]
 8018ae6:	f7fb fb29 	bl	801413c <pbuf_add_header>
 8018aea:	4603      	mov	r3, r0
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d004      	beq.n	8018afa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018af0:	6938      	ldr	r0, [r7, #16]
 8018af2:	f7fd f804 	bl	8015afe <tcp_seg_free>
    return NULL;
 8018af6:	2300      	movs	r3, #0
 8018af8:	e036      	b.n	8018b68 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8018afa:	693b      	ldr	r3, [r7, #16]
 8018afc:	685b      	ldr	r3, [r3, #4]
 8018afe:	685a      	ldr	r2, [r3, #4]
 8018b00:	693b      	ldr	r3, [r7, #16]
 8018b02:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018b04:	68fb      	ldr	r3, [r7, #12]
 8018b06:	8ada      	ldrh	r2, [r3, #22]
 8018b08:	693b      	ldr	r3, [r7, #16]
 8018b0a:	68dc      	ldr	r4, [r3, #12]
 8018b0c:	4610      	mov	r0, r2
 8018b0e:	f7f9 fef5 	bl	80128fc <lwip_htons>
 8018b12:	4603      	mov	r3, r0
 8018b14:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8018b16:	68fb      	ldr	r3, [r7, #12]
 8018b18:	8b1a      	ldrh	r2, [r3, #24]
 8018b1a:	693b      	ldr	r3, [r7, #16]
 8018b1c:	68dc      	ldr	r4, [r3, #12]
 8018b1e:	4610      	mov	r0, r2
 8018b20:	f7f9 feec 	bl	80128fc <lwip_htons>
 8018b24:	4603      	mov	r3, r0
 8018b26:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8018b28:	693b      	ldr	r3, [r7, #16]
 8018b2a:	68dc      	ldr	r4, [r3, #12]
 8018b2c:	6838      	ldr	r0, [r7, #0]
 8018b2e:	f7f9 fefa 	bl	8012926 <lwip_htonl>
 8018b32:	4603      	mov	r3, r0
 8018b34:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8018b36:	7dfb      	ldrb	r3, [r7, #23]
 8018b38:	089b      	lsrs	r3, r3, #2
 8018b3a:	b2db      	uxtb	r3, r3
 8018b3c:	3305      	adds	r3, #5
 8018b3e:	b29b      	uxth	r3, r3
 8018b40:	031b      	lsls	r3, r3, #12
 8018b42:	b29a      	uxth	r2, r3
 8018b44:	79fb      	ldrb	r3, [r7, #7]
 8018b46:	b29b      	uxth	r3, r3
 8018b48:	4313      	orrs	r3, r2
 8018b4a:	b29a      	uxth	r2, r3
 8018b4c:	693b      	ldr	r3, [r7, #16]
 8018b4e:	68dc      	ldr	r4, [r3, #12]
 8018b50:	4610      	mov	r0, r2
 8018b52:	f7f9 fed3 	bl	80128fc <lwip_htons>
 8018b56:	4603      	mov	r3, r0
 8018b58:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8018b5a:	693b      	ldr	r3, [r7, #16]
 8018b5c:	68db      	ldr	r3, [r3, #12]
 8018b5e:	2200      	movs	r2, #0
 8018b60:	749a      	strb	r2, [r3, #18]
 8018b62:	2200      	movs	r2, #0
 8018b64:	74da      	strb	r2, [r3, #19]
  return seg;
 8018b66:	693b      	ldr	r3, [r7, #16]
}
 8018b68:	4618      	mov	r0, r3
 8018b6a:	371c      	adds	r7, #28
 8018b6c:	46bd      	mov	sp, r7
 8018b6e:	bd90      	pop	{r4, r7, pc}
 8018b70:	08025508 	.word	0x08025508
 8018b74:	0802553c 	.word	0x0802553c
 8018b78:	0802555c 	.word	0x0802555c
 8018b7c:	08025584 	.word	0x08025584
 8018b80:	080255a8 	.word	0x080255a8

08018b84 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8018b84:	b580      	push	{r7, lr}
 8018b86:	b086      	sub	sp, #24
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	607b      	str	r3, [r7, #4]
 8018b8c:	4603      	mov	r3, r0
 8018b8e:	73fb      	strb	r3, [r7, #15]
 8018b90:	460b      	mov	r3, r1
 8018b92:	81bb      	strh	r3, [r7, #12]
 8018b94:	4613      	mov	r3, r2
 8018b96:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8018b98:	89bb      	ldrh	r3, [r7, #12]
 8018b9a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d105      	bne.n	8018bae <tcp_pbuf_prealloc+0x2a>
 8018ba2:	4b30      	ldr	r3, [pc, #192]	@ (8018c64 <tcp_pbuf_prealloc+0xe0>)
 8018ba4:	22e8      	movs	r2, #232	@ 0xe8
 8018ba6:	4930      	ldr	r1, [pc, #192]	@ (8018c68 <tcp_pbuf_prealloc+0xe4>)
 8018ba8:	4830      	ldr	r0, [pc, #192]	@ (8018c6c <tcp_pbuf_prealloc+0xe8>)
 8018baa:	f007 feeb 	bl	8020984 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8018bae:	6a3b      	ldr	r3, [r7, #32]
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d105      	bne.n	8018bc0 <tcp_pbuf_prealloc+0x3c>
 8018bb4:	4b2b      	ldr	r3, [pc, #172]	@ (8018c64 <tcp_pbuf_prealloc+0xe0>)
 8018bb6:	22e9      	movs	r2, #233	@ 0xe9
 8018bb8:	492d      	ldr	r1, [pc, #180]	@ (8018c70 <tcp_pbuf_prealloc+0xec>)
 8018bba:	482c      	ldr	r0, [pc, #176]	@ (8018c6c <tcp_pbuf_prealloc+0xe8>)
 8018bbc:	f007 fee2 	bl	8020984 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8018bc0:	89ba      	ldrh	r2, [r7, #12]
 8018bc2:	897b      	ldrh	r3, [r7, #10]
 8018bc4:	429a      	cmp	r2, r3
 8018bc6:	d221      	bcs.n	8018c0c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018bc8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018bcc:	f003 0302 	and.w	r3, r3, #2
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d111      	bne.n	8018bf8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8018bd4:	6a3b      	ldr	r3, [r7, #32]
 8018bd6:	8b5b      	ldrh	r3, [r3, #26]
 8018bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	d115      	bne.n	8018c0c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8018be0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d007      	beq.n	8018bf8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8018be8:	6a3b      	ldr	r3, [r7, #32]
 8018bea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d103      	bne.n	8018bf8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8018bf0:	6a3b      	ldr	r3, [r7, #32]
 8018bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d009      	beq.n	8018c0c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8018bf8:	89bb      	ldrh	r3, [r7, #12]
 8018bfa:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8018bfe:	f023 0203 	bic.w	r2, r3, #3
 8018c02:	897b      	ldrh	r3, [r7, #10]
 8018c04:	4293      	cmp	r3, r2
 8018c06:	bf28      	it	cs
 8018c08:	4613      	movcs	r3, r2
 8018c0a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8018c0c:	8af9      	ldrh	r1, [r7, #22]
 8018c0e:	7bfb      	ldrb	r3, [r7, #15]
 8018c10:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018c14:	4618      	mov	r0, r3
 8018c16:	f7fb f843 	bl	8013ca0 <pbuf_alloc>
 8018c1a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018c1c:	693b      	ldr	r3, [r7, #16]
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d101      	bne.n	8018c26 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8018c22:	2300      	movs	r3, #0
 8018c24:	e019      	b.n	8018c5a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8018c26:	693b      	ldr	r3, [r7, #16]
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d006      	beq.n	8018c3c <tcp_pbuf_prealloc+0xb8>
 8018c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8018c64 <tcp_pbuf_prealloc+0xe0>)
 8018c30:	f240 120b 	movw	r2, #267	@ 0x10b
 8018c34:	490f      	ldr	r1, [pc, #60]	@ (8018c74 <tcp_pbuf_prealloc+0xf0>)
 8018c36:	480d      	ldr	r0, [pc, #52]	@ (8018c6c <tcp_pbuf_prealloc+0xe8>)
 8018c38:	f007 fea4 	bl	8020984 <iprintf>
  *oversize = p->len - length;
 8018c3c:	693b      	ldr	r3, [r7, #16]
 8018c3e:	895a      	ldrh	r2, [r3, #10]
 8018c40:	89bb      	ldrh	r3, [r7, #12]
 8018c42:	1ad3      	subs	r3, r2, r3
 8018c44:	b29a      	uxth	r2, r3
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8018c4a:	693b      	ldr	r3, [r7, #16]
 8018c4c:	89ba      	ldrh	r2, [r7, #12]
 8018c4e:	811a      	strh	r2, [r3, #8]
 8018c50:	693b      	ldr	r3, [r7, #16]
 8018c52:	891a      	ldrh	r2, [r3, #8]
 8018c54:	693b      	ldr	r3, [r7, #16]
 8018c56:	815a      	strh	r2, [r3, #10]
  return p;
 8018c58:	693b      	ldr	r3, [r7, #16]
}
 8018c5a:	4618      	mov	r0, r3
 8018c5c:	3718      	adds	r7, #24
 8018c5e:	46bd      	mov	sp, r7
 8018c60:	bd80      	pop	{r7, pc}
 8018c62:	bf00      	nop
 8018c64:	08025508 	.word	0x08025508
 8018c68:	080255c0 	.word	0x080255c0
 8018c6c:	0802555c 	.word	0x0802555c
 8018c70:	080255e4 	.word	0x080255e4
 8018c74:	08025604 	.word	0x08025604

08018c78 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8018c78:	b580      	push	{r7, lr}
 8018c7a:	b082      	sub	sp, #8
 8018c7c:	af00      	add	r7, sp, #0
 8018c7e:	6078      	str	r0, [r7, #4]
 8018c80:	460b      	mov	r3, r1
 8018c82:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d106      	bne.n	8018c98 <tcp_write_checks+0x20>
 8018c8a:	4b33      	ldr	r3, [pc, #204]	@ (8018d58 <tcp_write_checks+0xe0>)
 8018c8c:	f240 1233 	movw	r2, #307	@ 0x133
 8018c90:	4932      	ldr	r1, [pc, #200]	@ (8018d5c <tcp_write_checks+0xe4>)
 8018c92:	4833      	ldr	r0, [pc, #204]	@ (8018d60 <tcp_write_checks+0xe8>)
 8018c94:	f007 fe76 	bl	8020984 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	7d1b      	ldrb	r3, [r3, #20]
 8018c9c:	2b04      	cmp	r3, #4
 8018c9e:	d00e      	beq.n	8018cbe <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8018ca4:	2b07      	cmp	r3, #7
 8018ca6:	d00a      	beq.n	8018cbe <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8018cac:	2b02      	cmp	r3, #2
 8018cae:	d006      	beq.n	8018cbe <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8018cb4:	2b03      	cmp	r3, #3
 8018cb6:	d002      	beq.n	8018cbe <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8018cb8:	f06f 030a 	mvn.w	r3, #10
 8018cbc:	e048      	b.n	8018d50 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8018cbe:	887b      	ldrh	r3, [r7, #2]
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d101      	bne.n	8018cc8 <tcp_write_checks+0x50>
    return ERR_OK;
 8018cc4:	2300      	movs	r3, #0
 8018cc6:	e043      	b.n	8018d50 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8018cce:	887a      	ldrh	r2, [r7, #2]
 8018cd0:	429a      	cmp	r2, r3
 8018cd2:	d909      	bls.n	8018ce8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	8b5b      	ldrh	r3, [r3, #26]
 8018cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018cdc:	b29a      	uxth	r2, r3
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8018ce6:	e033      	b.n	8018d50 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018cee:	2b08      	cmp	r3, #8
 8018cf0:	d909      	bls.n	8018d06 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	8b5b      	ldrh	r3, [r3, #26]
 8018cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018cfa:	b29a      	uxth	r2, r3
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018d00:	f04f 33ff 	mov.w	r3, #4294967295
 8018d04:	e024      	b.n	8018d50 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d00f      	beq.n	8018d30 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d11a      	bne.n	8018d4e <tcp_write_checks+0xd6>
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	d116      	bne.n	8018d4e <tcp_write_checks+0xd6>
 8018d20:	4b0d      	ldr	r3, [pc, #52]	@ (8018d58 <tcp_write_checks+0xe0>)
 8018d22:	f240 1255 	movw	r2, #341	@ 0x155
 8018d26:	490f      	ldr	r1, [pc, #60]	@ (8018d64 <tcp_write_checks+0xec>)
 8018d28:	480d      	ldr	r0, [pc, #52]	@ (8018d60 <tcp_write_checks+0xe8>)
 8018d2a:	f007 fe2b 	bl	8020984 <iprintf>
 8018d2e:	e00e      	b.n	8018d4e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d103      	bne.n	8018d40 <tcp_write_checks+0xc8>
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d006      	beq.n	8018d4e <tcp_write_checks+0xd6>
 8018d40:	4b05      	ldr	r3, [pc, #20]	@ (8018d58 <tcp_write_checks+0xe0>)
 8018d42:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8018d46:	4908      	ldr	r1, [pc, #32]	@ (8018d68 <tcp_write_checks+0xf0>)
 8018d48:	4805      	ldr	r0, [pc, #20]	@ (8018d60 <tcp_write_checks+0xe8>)
 8018d4a:	f007 fe1b 	bl	8020984 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8018d4e:	2300      	movs	r3, #0
}
 8018d50:	4618      	mov	r0, r3
 8018d52:	3708      	adds	r7, #8
 8018d54:	46bd      	mov	sp, r7
 8018d56:	bd80      	pop	{r7, pc}
 8018d58:	08025508 	.word	0x08025508
 8018d5c:	08025618 	.word	0x08025618
 8018d60:	0802555c 	.word	0x0802555c
 8018d64:	08025638 	.word	0x08025638
 8018d68:	08025674 	.word	0x08025674

08018d6c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8018d6c:	b590      	push	{r4, r7, lr}
 8018d6e:	b09b      	sub	sp, #108	@ 0x6c
 8018d70:	af04      	add	r7, sp, #16
 8018d72:	60f8      	str	r0, [r7, #12]
 8018d74:	60b9      	str	r1, [r7, #8]
 8018d76:	4611      	mov	r1, r2
 8018d78:	461a      	mov	r2, r3
 8018d7a:	460b      	mov	r3, r1
 8018d7c:	80fb      	strh	r3, [r7, #6]
 8018d7e:	4613      	mov	r3, r2
 8018d80:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8018d82:	2300      	movs	r3, #0
 8018d84:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8018d86:	2300      	movs	r3, #0
 8018d88:	653b      	str	r3, [r7, #80]	@ 0x50
 8018d8a:	2300      	movs	r3, #0
 8018d8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018d8e:	2300      	movs	r3, #0
 8018d90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018d92:	2300      	movs	r3, #0
 8018d94:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8018d96:	2300      	movs	r3, #0
 8018d98:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8018da2:	2300      	movs	r3, #0
 8018da4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8018da6:	2300      	movs	r3, #0
 8018da8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8018daa:	2300      	movs	r3, #0
 8018dac:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8018dae:	68fb      	ldr	r3, [r7, #12]
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	d109      	bne.n	8018dc8 <tcp_write+0x5c>
 8018db4:	4ba4      	ldr	r3, [pc, #656]	@ (8019048 <tcp_write+0x2dc>)
 8018db6:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8018dba:	49a4      	ldr	r1, [pc, #656]	@ (801904c <tcp_write+0x2e0>)
 8018dbc:	48a4      	ldr	r0, [pc, #656]	@ (8019050 <tcp_write+0x2e4>)
 8018dbe:	f007 fde1 	bl	8020984 <iprintf>
 8018dc2:	f06f 030f 	mvn.w	r3, #15
 8018dc6:	e32a      	b.n	801941e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8018dce:	085b      	lsrs	r3, r3, #1
 8018dd0:	b29a      	uxth	r2, r3
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018dd6:	4293      	cmp	r3, r2
 8018dd8:	bf28      	it	cs
 8018dda:	4613      	movcs	r3, r2
 8018ddc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8018dde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d102      	bne.n	8018dea <tcp_write+0x7e>
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018de8:	e000      	b.n	8018dec <tcp_write+0x80>
 8018dea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018dec:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8018dee:	68bb      	ldr	r3, [r7, #8]
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d109      	bne.n	8018e08 <tcp_write+0x9c>
 8018df4:	4b94      	ldr	r3, [pc, #592]	@ (8019048 <tcp_write+0x2dc>)
 8018df6:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8018dfa:	4996      	ldr	r1, [pc, #600]	@ (8019054 <tcp_write+0x2e8>)
 8018dfc:	4894      	ldr	r0, [pc, #592]	@ (8019050 <tcp_write+0x2e4>)
 8018dfe:	f007 fdc1 	bl	8020984 <iprintf>
 8018e02:	f06f 030f 	mvn.w	r3, #15
 8018e06:	e30a      	b.n	801941e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8018e08:	88fb      	ldrh	r3, [r7, #6]
 8018e0a:	4619      	mov	r1, r3
 8018e0c:	68f8      	ldr	r0, [r7, #12]
 8018e0e:	f7ff ff33 	bl	8018c78 <tcp_write_checks>
 8018e12:	4603      	mov	r3, r0
 8018e14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8018e18:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d002      	beq.n	8018e26 <tcp_write+0xba>
    return err;
 8018e20:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8018e24:	e2fb      	b.n	801941e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8018e26:	68fb      	ldr	r3, [r7, #12]
 8018e28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018e2c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018e30:	2300      	movs	r3, #0
 8018e32:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	f000 80f6 	beq.w	801902c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018e44:	653b      	str	r3, [r7, #80]	@ 0x50
 8018e46:	e002      	b.n	8018e4e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8018e48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018e4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d1f8      	bne.n	8018e48 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8018e56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018e58:	7a9b      	ldrb	r3, [r3, #10]
 8018e5a:	009b      	lsls	r3, r3, #2
 8018e5c:	b29b      	uxth	r3, r3
 8018e5e:	f003 0304 	and.w	r3, r3, #4
 8018e62:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8018e64:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018e66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018e68:	891b      	ldrh	r3, [r3, #8]
 8018e6a:	4619      	mov	r1, r3
 8018e6c:	8c3b      	ldrh	r3, [r7, #32]
 8018e6e:	440b      	add	r3, r1
 8018e70:	429a      	cmp	r2, r3
 8018e72:	da06      	bge.n	8018e82 <tcp_write+0x116>
 8018e74:	4b74      	ldr	r3, [pc, #464]	@ (8019048 <tcp_write+0x2dc>)
 8018e76:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8018e7a:	4977      	ldr	r1, [pc, #476]	@ (8019058 <tcp_write+0x2ec>)
 8018e7c:	4874      	ldr	r0, [pc, #464]	@ (8019050 <tcp_write+0x2e4>)
 8018e7e:	f007 fd81 	bl	8020984 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8018e82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018e84:	891a      	ldrh	r2, [r3, #8]
 8018e86:	8c3b      	ldrh	r3, [r7, #32]
 8018e88:	4413      	add	r3, r2
 8018e8a:	b29b      	uxth	r3, r3
 8018e8c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018e8e:	1ad3      	subs	r3, r2, r3
 8018e90:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8018e92:	68fb      	ldr	r3, [r7, #12]
 8018e94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8018e98:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8018e9a:	8a7b      	ldrh	r3, [r7, #18]
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d026      	beq.n	8018eee <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8018ea0:	8a7b      	ldrh	r3, [r7, #18]
 8018ea2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018ea4:	429a      	cmp	r2, r3
 8018ea6:	d206      	bcs.n	8018eb6 <tcp_write+0x14a>
 8018ea8:	4b67      	ldr	r3, [pc, #412]	@ (8019048 <tcp_write+0x2dc>)
 8018eaa:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8018eae:	496b      	ldr	r1, [pc, #428]	@ (801905c <tcp_write+0x2f0>)
 8018eb0:	4867      	ldr	r0, [pc, #412]	@ (8019050 <tcp_write+0x2e4>)
 8018eb2:	f007 fd67 	bl	8020984 <iprintf>
      seg = last_unsent;
 8018eb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8018eba:	8a7b      	ldrh	r3, [r7, #18]
 8018ebc:	88fa      	ldrh	r2, [r7, #6]
 8018ebe:	4293      	cmp	r3, r2
 8018ec0:	bf28      	it	cs
 8018ec2:	4613      	movcs	r3, r2
 8018ec4:	b29b      	uxth	r3, r3
 8018ec6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018ec8:	4293      	cmp	r3, r2
 8018eca:	bf28      	it	cs
 8018ecc:	4613      	movcs	r3, r2
 8018ece:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8018ed0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018ed4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018ed6:	4413      	add	r3, r2
 8018ed8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8018edc:	8a7a      	ldrh	r2, [r7, #18]
 8018ede:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018ee0:	1ad3      	subs	r3, r2, r3
 8018ee2:	b29b      	uxth	r3, r3
 8018ee4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8018ee6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018ee8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018eea:	1ad3      	subs	r3, r2, r3
 8018eec:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8018eee:	8a7b      	ldrh	r3, [r7, #18]
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d00b      	beq.n	8018f0c <tcp_write+0x1a0>
 8018ef4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018ef8:	88fb      	ldrh	r3, [r7, #6]
 8018efa:	429a      	cmp	r2, r3
 8018efc:	d006      	beq.n	8018f0c <tcp_write+0x1a0>
 8018efe:	4b52      	ldr	r3, [pc, #328]	@ (8019048 <tcp_write+0x2dc>)
 8018f00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018f04:	4956      	ldr	r1, [pc, #344]	@ (8019060 <tcp_write+0x2f4>)
 8018f06:	4852      	ldr	r0, [pc, #328]	@ (8019050 <tcp_write+0x2e4>)
 8018f08:	f007 fd3c 	bl	8020984 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8018f0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018f10:	88fb      	ldrh	r3, [r7, #6]
 8018f12:	429a      	cmp	r2, r3
 8018f14:	f080 8167 	bcs.w	80191e6 <tcp_write+0x47a>
 8018f18:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	f000 8163 	beq.w	80191e6 <tcp_write+0x47a>
 8018f20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018f22:	891b      	ldrh	r3, [r3, #8]
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	f000 815e 	beq.w	80191e6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8018f2a:	88fa      	ldrh	r2, [r7, #6]
 8018f2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018f30:	1ad2      	subs	r2, r2, r3
 8018f32:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018f34:	4293      	cmp	r3, r2
 8018f36:	bfa8      	it	ge
 8018f38:	4613      	movge	r3, r2
 8018f3a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8018f3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8018f40:	797b      	ldrb	r3, [r7, #5]
 8018f42:	f003 0301 	and.w	r3, r3, #1
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d027      	beq.n	8018f9a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8018f4a:	f107 0012 	add.w	r0, r7, #18
 8018f4e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018f50:	8bf9      	ldrh	r1, [r7, #30]
 8018f52:	2301      	movs	r3, #1
 8018f54:	9302      	str	r3, [sp, #8]
 8018f56:	797b      	ldrb	r3, [r7, #5]
 8018f58:	9301      	str	r3, [sp, #4]
 8018f5a:	68fb      	ldr	r3, [r7, #12]
 8018f5c:	9300      	str	r3, [sp, #0]
 8018f5e:	4603      	mov	r3, r0
 8018f60:	2000      	movs	r0, #0
 8018f62:	f7ff fe0f 	bl	8018b84 <tcp_pbuf_prealloc>
 8018f66:	6578      	str	r0, [r7, #84]	@ 0x54
 8018f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	f000 8225 	beq.w	80193ba <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8018f70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018f72:	6858      	ldr	r0, [r3, #4]
 8018f74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018f78:	68ba      	ldr	r2, [r7, #8]
 8018f7a:	4413      	add	r3, r2
 8018f7c:	8bfa      	ldrh	r2, [r7, #30]
 8018f7e:	4619      	mov	r1, r3
 8018f80:	f007 ff75 	bl	8020e6e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8018f84:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018f86:	f7fb f9fd 	bl	8014384 <pbuf_clen>
 8018f8a:	4603      	mov	r3, r0
 8018f8c:	461a      	mov	r2, r3
 8018f8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018f92:	4413      	add	r3, r2
 8018f94:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8018f98:	e041      	b.n	801901e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8018f9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018f9c:	685b      	ldr	r3, [r3, #4]
 8018f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8018fa0:	e002      	b.n	8018fa8 <tcp_write+0x23c>
 8018fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018fa4:	681b      	ldr	r3, [r3, #0]
 8018fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8018fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d1f8      	bne.n	8018fa2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8018fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018fb2:	7b1b      	ldrb	r3, [r3, #12]
 8018fb4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d115      	bne.n	8018fe8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8018fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018fbe:	685b      	ldr	r3, [r3, #4]
 8018fc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018fc2:	8952      	ldrh	r2, [r2, #10]
 8018fc4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8018fc6:	68ba      	ldr	r2, [r7, #8]
 8018fc8:	429a      	cmp	r2, r3
 8018fca:	d10d      	bne.n	8018fe8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8018fcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d006      	beq.n	8018fe2 <tcp_write+0x276>
 8018fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8019048 <tcp_write+0x2dc>)
 8018fd6:	f240 2231 	movw	r2, #561	@ 0x231
 8018fda:	4922      	ldr	r1, [pc, #136]	@ (8019064 <tcp_write+0x2f8>)
 8018fdc:	481c      	ldr	r0, [pc, #112]	@ (8019050 <tcp_write+0x2e4>)
 8018fde:	f007 fcd1 	bl	8020984 <iprintf>
          extendlen = seglen;
 8018fe2:	8bfb      	ldrh	r3, [r7, #30]
 8018fe4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8018fe6:	e01a      	b.n	801901e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8018fe8:	8bfb      	ldrh	r3, [r7, #30]
 8018fea:	2201      	movs	r2, #1
 8018fec:	4619      	mov	r1, r3
 8018fee:	2000      	movs	r0, #0
 8018ff0:	f7fa fe56 	bl	8013ca0 <pbuf_alloc>
 8018ff4:	6578      	str	r0, [r7, #84]	@ 0x54
 8018ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	f000 81e0 	beq.w	80193be <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8018ffe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019002:	68ba      	ldr	r2, [r7, #8]
 8019004:	441a      	add	r2, r3
 8019006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019008:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801900a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801900c:	f7fb f9ba 	bl	8014384 <pbuf_clen>
 8019010:	4603      	mov	r3, r0
 8019012:	461a      	mov	r2, r3
 8019014:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019018:	4413      	add	r3, r2
 801901a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801901e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019022:	8bfb      	ldrh	r3, [r7, #30]
 8019024:	4413      	add	r3, r2
 8019026:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801902a:	e0dc      	b.n	80191e6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801902c:	68fb      	ldr	r3, [r7, #12]
 801902e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019032:	2b00      	cmp	r3, #0
 8019034:	f000 80d7 	beq.w	80191e6 <tcp_write+0x47a>
 8019038:	4b03      	ldr	r3, [pc, #12]	@ (8019048 <tcp_write+0x2dc>)
 801903a:	f240 224a 	movw	r2, #586	@ 0x24a
 801903e:	490a      	ldr	r1, [pc, #40]	@ (8019068 <tcp_write+0x2fc>)
 8019040:	4803      	ldr	r0, [pc, #12]	@ (8019050 <tcp_write+0x2e4>)
 8019042:	f007 fc9f 	bl	8020984 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8019046:	e0ce      	b.n	80191e6 <tcp_write+0x47a>
 8019048:	08025508 	.word	0x08025508
 801904c:	080256a8 	.word	0x080256a8
 8019050:	0802555c 	.word	0x0802555c
 8019054:	080256c0 	.word	0x080256c0
 8019058:	080256f4 	.word	0x080256f4
 801905c:	0802570c 	.word	0x0802570c
 8019060:	0802572c 	.word	0x0802572c
 8019064:	0802574c 	.word	0x0802574c
 8019068:	08025778 	.word	0x08025778
    struct pbuf *p;
    u16_t left = len - pos;
 801906c:	88fa      	ldrh	r2, [r7, #6]
 801906e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019072:	1ad3      	subs	r3, r2, r3
 8019074:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8019076:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801907a:	b29b      	uxth	r3, r3
 801907c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801907e:	1ad3      	subs	r3, r2, r3
 8019080:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8019082:	8b7a      	ldrh	r2, [r7, #26]
 8019084:	8bbb      	ldrh	r3, [r7, #28]
 8019086:	4293      	cmp	r3, r2
 8019088:	bf28      	it	cs
 801908a:	4613      	movcs	r3, r2
 801908c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801908e:	797b      	ldrb	r3, [r7, #5]
 8019090:	f003 0301 	and.w	r3, r3, #1
 8019094:	2b00      	cmp	r3, #0
 8019096:	d036      	beq.n	8019106 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8019098:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801909c:	b29a      	uxth	r2, r3
 801909e:	8b3b      	ldrh	r3, [r7, #24]
 80190a0:	4413      	add	r3, r2
 80190a2:	b299      	uxth	r1, r3
 80190a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	bf0c      	ite	eq
 80190aa:	2301      	moveq	r3, #1
 80190ac:	2300      	movne	r3, #0
 80190ae:	b2db      	uxtb	r3, r3
 80190b0:	f107 0012 	add.w	r0, r7, #18
 80190b4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80190b6:	9302      	str	r3, [sp, #8]
 80190b8:	797b      	ldrb	r3, [r7, #5]
 80190ba:	9301      	str	r3, [sp, #4]
 80190bc:	68fb      	ldr	r3, [r7, #12]
 80190be:	9300      	str	r3, [sp, #0]
 80190c0:	4603      	mov	r3, r0
 80190c2:	2036      	movs	r0, #54	@ 0x36
 80190c4:	f7ff fd5e 	bl	8018b84 <tcp_pbuf_prealloc>
 80190c8:	6338      	str	r0, [r7, #48]	@ 0x30
 80190ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	f000 8178 	beq.w	80193c2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80190d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80190d4:	895b      	ldrh	r3, [r3, #10]
 80190d6:	8b3a      	ldrh	r2, [r7, #24]
 80190d8:	429a      	cmp	r2, r3
 80190da:	d906      	bls.n	80190ea <tcp_write+0x37e>
 80190dc:	4b8c      	ldr	r3, [pc, #560]	@ (8019310 <tcp_write+0x5a4>)
 80190de:	f240 2266 	movw	r2, #614	@ 0x266
 80190e2:	498c      	ldr	r1, [pc, #560]	@ (8019314 <tcp_write+0x5a8>)
 80190e4:	488c      	ldr	r0, [pc, #560]	@ (8019318 <tcp_write+0x5ac>)
 80190e6:	f007 fc4d 	bl	8020984 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80190ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80190ec:	685a      	ldr	r2, [r3, #4]
 80190ee:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80190f2:	18d0      	adds	r0, r2, r3
 80190f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80190f8:	68ba      	ldr	r2, [r7, #8]
 80190fa:	4413      	add	r3, r2
 80190fc:	8b3a      	ldrh	r2, [r7, #24]
 80190fe:	4619      	mov	r1, r3
 8019100:	f007 feb5 	bl	8020e6e <memcpy>
 8019104:	e02f      	b.n	8019166 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8019106:	8a7b      	ldrh	r3, [r7, #18]
 8019108:	2b00      	cmp	r3, #0
 801910a:	d006      	beq.n	801911a <tcp_write+0x3ae>
 801910c:	4b80      	ldr	r3, [pc, #512]	@ (8019310 <tcp_write+0x5a4>)
 801910e:	f240 2271 	movw	r2, #625	@ 0x271
 8019112:	4982      	ldr	r1, [pc, #520]	@ (801931c <tcp_write+0x5b0>)
 8019114:	4880      	ldr	r0, [pc, #512]	@ (8019318 <tcp_write+0x5ac>)
 8019116:	f007 fc35 	bl	8020984 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801911a:	8b3b      	ldrh	r3, [r7, #24]
 801911c:	2201      	movs	r2, #1
 801911e:	4619      	mov	r1, r3
 8019120:	2036      	movs	r0, #54	@ 0x36
 8019122:	f7fa fdbd 	bl	8013ca0 <pbuf_alloc>
 8019126:	6178      	str	r0, [r7, #20]
 8019128:	697b      	ldr	r3, [r7, #20]
 801912a:	2b00      	cmp	r3, #0
 801912c:	f000 814b 	beq.w	80193c6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8019130:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019134:	68ba      	ldr	r2, [r7, #8]
 8019136:	441a      	add	r2, r3
 8019138:	697b      	ldr	r3, [r7, #20]
 801913a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801913c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019140:	b29b      	uxth	r3, r3
 8019142:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019146:	4619      	mov	r1, r3
 8019148:	2036      	movs	r0, #54	@ 0x36
 801914a:	f7fa fda9 	bl	8013ca0 <pbuf_alloc>
 801914e:	6338      	str	r0, [r7, #48]	@ 0x30
 8019150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019152:	2b00      	cmp	r3, #0
 8019154:	d103      	bne.n	801915e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8019156:	6978      	ldr	r0, [r7, #20]
 8019158:	f7fb f886 	bl	8014268 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801915c:	e136      	b.n	80193cc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801915e:	6979      	ldr	r1, [r7, #20]
 8019160:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019162:	f7fb f94f 	bl	8014404 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8019166:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019168:	f7fb f90c 	bl	8014384 <pbuf_clen>
 801916c:	4603      	mov	r3, r0
 801916e:	461a      	mov	r2, r3
 8019170:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019174:	4413      	add	r3, r2
 8019176:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801917a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801917e:	2b09      	cmp	r3, #9
 8019180:	d903      	bls.n	801918a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8019182:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019184:	f7fb f870 	bl	8014268 <pbuf_free>
      goto memerr;
 8019188:	e120      	b.n	80193cc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801918a:	68fb      	ldr	r3, [r7, #12]
 801918c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801918e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019192:	441a      	add	r2, r3
 8019194:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019198:	9300      	str	r3, [sp, #0]
 801919a:	4613      	mov	r3, r2
 801919c:	2200      	movs	r2, #0
 801919e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80191a0:	68f8      	ldr	r0, [r7, #12]
 80191a2:	f7ff fc53 	bl	8018a4c <tcp_create_segment>
 80191a6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80191a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	f000 810d 	beq.w	80193ca <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80191b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d102      	bne.n	80191bc <tcp_write+0x450>
      queue = seg;
 80191b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80191b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80191ba:	e00c      	b.n	80191d6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80191bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d106      	bne.n	80191d0 <tcp_write+0x464>
 80191c2:	4b53      	ldr	r3, [pc, #332]	@ (8019310 <tcp_write+0x5a4>)
 80191c4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80191c8:	4955      	ldr	r1, [pc, #340]	@ (8019320 <tcp_write+0x5b4>)
 80191ca:	4853      	ldr	r0, [pc, #332]	@ (8019318 <tcp_write+0x5ac>)
 80191cc:	f007 fbda 	bl	8020984 <iprintf>
      prev_seg->next = seg;
 80191d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80191d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80191d4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80191d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80191d8:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80191da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80191de:	8b3b      	ldrh	r3, [r7, #24]
 80191e0:	4413      	add	r3, r2
 80191e2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 80191e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80191ea:	88fb      	ldrh	r3, [r7, #6]
 80191ec:	429a      	cmp	r2, r3
 80191ee:	f4ff af3d 	bcc.w	801906c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80191f2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d02c      	beq.n	8019252 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80191f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80191fa:	685b      	ldr	r3, [r3, #4]
 80191fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80191fe:	e01e      	b.n	801923e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8019200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019202:	891a      	ldrh	r2, [r3, #8]
 8019204:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019206:	4413      	add	r3, r2
 8019208:	b29a      	uxth	r2, r3
 801920a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801920c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801920e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	2b00      	cmp	r3, #0
 8019214:	d110      	bne.n	8019238 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8019216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019218:	685b      	ldr	r3, [r3, #4]
 801921a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801921c:	8952      	ldrh	r2, [r2, #10]
 801921e:	4413      	add	r3, r2
 8019220:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8019222:	68b9      	ldr	r1, [r7, #8]
 8019224:	4618      	mov	r0, r3
 8019226:	f007 fe22 	bl	8020e6e <memcpy>
        p->len += oversize_used;
 801922a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801922c:	895a      	ldrh	r2, [r3, #10]
 801922e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019230:	4413      	add	r3, r2
 8019232:	b29a      	uxth	r2, r3
 8019234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019236:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8019238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801923e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019240:	2b00      	cmp	r3, #0
 8019242:	d1dd      	bne.n	8019200 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8019244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019246:	891a      	ldrh	r2, [r3, #8]
 8019248:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801924a:	4413      	add	r3, r2
 801924c:	b29a      	uxth	r2, r3
 801924e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019250:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8019252:	8a7a      	ldrh	r2, [r7, #18]
 8019254:	68fb      	ldr	r3, [r7, #12]
 8019256:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801925a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801925c:	2b00      	cmp	r3, #0
 801925e:	d018      	beq.n	8019292 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8019260:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019262:	2b00      	cmp	r3, #0
 8019264:	d106      	bne.n	8019274 <tcp_write+0x508>
 8019266:	4b2a      	ldr	r3, [pc, #168]	@ (8019310 <tcp_write+0x5a4>)
 8019268:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 801926c:	492d      	ldr	r1, [pc, #180]	@ (8019324 <tcp_write+0x5b8>)
 801926e:	482a      	ldr	r0, [pc, #168]	@ (8019318 <tcp_write+0x5ac>)
 8019270:	f007 fb88 	bl	8020984 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8019274:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019276:	685b      	ldr	r3, [r3, #4]
 8019278:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801927a:	4618      	mov	r0, r3
 801927c:	f7fb f8c2 	bl	8014404 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8019280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019282:	891a      	ldrh	r2, [r3, #8]
 8019284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019286:	891b      	ldrh	r3, [r3, #8]
 8019288:	4413      	add	r3, r2
 801928a:	b29a      	uxth	r2, r3
 801928c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801928e:	811a      	strh	r2, [r3, #8]
 8019290:	e037      	b.n	8019302 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8019292:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019294:	2b00      	cmp	r3, #0
 8019296:	d034      	beq.n	8019302 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8019298:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801929a:	2b00      	cmp	r3, #0
 801929c:	d003      	beq.n	80192a6 <tcp_write+0x53a>
 801929e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80192a0:	685b      	ldr	r3, [r3, #4]
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d106      	bne.n	80192b4 <tcp_write+0x548>
 80192a6:	4b1a      	ldr	r3, [pc, #104]	@ (8019310 <tcp_write+0x5a4>)
 80192a8:	f240 22e6 	movw	r2, #742	@ 0x2e6
 80192ac:	491e      	ldr	r1, [pc, #120]	@ (8019328 <tcp_write+0x5bc>)
 80192ae:	481a      	ldr	r0, [pc, #104]	@ (8019318 <tcp_write+0x5ac>)
 80192b0:	f007 fb68 	bl	8020984 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80192b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80192b6:	685b      	ldr	r3, [r3, #4]
 80192b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80192ba:	e009      	b.n	80192d0 <tcp_write+0x564>
      p->tot_len += extendlen;
 80192bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192be:	891a      	ldrh	r2, [r3, #8]
 80192c0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80192c2:	4413      	add	r3, r2
 80192c4:	b29a      	uxth	r2, r3
 80192c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192c8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80192ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80192d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d1f1      	bne.n	80192bc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80192d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192da:	891a      	ldrh	r2, [r3, #8]
 80192dc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80192de:	4413      	add	r3, r2
 80192e0:	b29a      	uxth	r2, r3
 80192e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192e4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80192e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192e8:	895a      	ldrh	r2, [r3, #10]
 80192ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80192ec:	4413      	add	r3, r2
 80192ee:	b29a      	uxth	r2, r3
 80192f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192f2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80192f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80192f6:	891a      	ldrh	r2, [r3, #8]
 80192f8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80192fa:	4413      	add	r3, r2
 80192fc:	b29a      	uxth	r2, r3
 80192fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019300:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8019302:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019304:	2b00      	cmp	r3, #0
 8019306:	d111      	bne.n	801932c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8019308:	68fb      	ldr	r3, [r7, #12]
 801930a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801930c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801930e:	e010      	b.n	8019332 <tcp_write+0x5c6>
 8019310:	08025508 	.word	0x08025508
 8019314:	080257a8 	.word	0x080257a8
 8019318:	0802555c 	.word	0x0802555c
 801931c:	080257e8 	.word	0x080257e8
 8019320:	080257f8 	.word	0x080257f8
 8019324:	0802580c 	.word	0x0802580c
 8019328:	08025844 	.word	0x08025844
  } else {
    last_unsent->next = queue;
 801932c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801932e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019330:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8019332:	68fb      	ldr	r3, [r7, #12]
 8019334:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8019336:	88fb      	ldrh	r3, [r7, #6]
 8019338:	441a      	add	r2, r3
 801933a:	68fb      	ldr	r3, [r7, #12]
 801933c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8019344:	88fb      	ldrh	r3, [r7, #6]
 8019346:	1ad3      	subs	r3, r2, r3
 8019348:	b29a      	uxth	r2, r3
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8019356:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801935a:	68fb      	ldr	r3, [r7, #12]
 801935c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019360:	2b00      	cmp	r3, #0
 8019362:	d00e      	beq.n	8019382 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8019364:	68fb      	ldr	r3, [r7, #12]
 8019366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019368:	2b00      	cmp	r3, #0
 801936a:	d10a      	bne.n	8019382 <tcp_write+0x616>
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019370:	2b00      	cmp	r3, #0
 8019372:	d106      	bne.n	8019382 <tcp_write+0x616>
 8019374:	4b2c      	ldr	r3, [pc, #176]	@ (8019428 <tcp_write+0x6bc>)
 8019376:	f240 3212 	movw	r2, #786	@ 0x312
 801937a:	492c      	ldr	r1, [pc, #176]	@ (801942c <tcp_write+0x6c0>)
 801937c:	482c      	ldr	r0, [pc, #176]	@ (8019430 <tcp_write+0x6c4>)
 801937e:	f007 fb01 	bl	8020984 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8019382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019384:	2b00      	cmp	r3, #0
 8019386:	d016      	beq.n	80193b6 <tcp_write+0x64a>
 8019388:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801938a:	68db      	ldr	r3, [r3, #12]
 801938c:	2b00      	cmp	r3, #0
 801938e:	d012      	beq.n	80193b6 <tcp_write+0x64a>
 8019390:	797b      	ldrb	r3, [r7, #5]
 8019392:	f003 0302 	and.w	r3, r3, #2
 8019396:	2b00      	cmp	r3, #0
 8019398:	d10d      	bne.n	80193b6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801939a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801939c:	68db      	ldr	r3, [r3, #12]
 801939e:	899b      	ldrh	r3, [r3, #12]
 80193a0:	b29c      	uxth	r4, r3
 80193a2:	2008      	movs	r0, #8
 80193a4:	f7f9 faaa 	bl	80128fc <lwip_htons>
 80193a8:	4603      	mov	r3, r0
 80193aa:	461a      	mov	r2, r3
 80193ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80193ae:	68db      	ldr	r3, [r3, #12]
 80193b0:	4322      	orrs	r2, r4
 80193b2:	b292      	uxth	r2, r2
 80193b4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80193b6:	2300      	movs	r3, #0
 80193b8:	e031      	b.n	801941e <tcp_write+0x6b2>
          goto memerr;
 80193ba:	bf00      	nop
 80193bc:	e006      	b.n	80193cc <tcp_write+0x660>
            goto memerr;
 80193be:	bf00      	nop
 80193c0:	e004      	b.n	80193cc <tcp_write+0x660>
        goto memerr;
 80193c2:	bf00      	nop
 80193c4:	e002      	b.n	80193cc <tcp_write+0x660>
        goto memerr;
 80193c6:	bf00      	nop
 80193c8:	e000      	b.n	80193cc <tcp_write+0x660>
      goto memerr;
 80193ca:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	8b5b      	ldrh	r3, [r3, #26]
 80193d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80193d4:	b29a      	uxth	r2, r3
 80193d6:	68fb      	ldr	r3, [r7, #12]
 80193d8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80193da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d002      	beq.n	80193e6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80193e0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80193e2:	f7fa ff41 	bl	8014268 <pbuf_free>
  }
  if (queue != NULL) {
 80193e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d002      	beq.n	80193f2 <tcp_write+0x686>
    tcp_segs_free(queue);
 80193ec:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80193ee:	f7fc fb71 	bl	8015ad4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80193f2:	68fb      	ldr	r3, [r7, #12]
 80193f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d00e      	beq.n	801941a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80193fc:	68fb      	ldr	r3, [r7, #12]
 80193fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019400:	2b00      	cmp	r3, #0
 8019402:	d10a      	bne.n	801941a <tcp_write+0x6ae>
 8019404:	68fb      	ldr	r3, [r7, #12]
 8019406:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019408:	2b00      	cmp	r3, #0
 801940a:	d106      	bne.n	801941a <tcp_write+0x6ae>
 801940c:	4b06      	ldr	r3, [pc, #24]	@ (8019428 <tcp_write+0x6bc>)
 801940e:	f240 3227 	movw	r2, #807	@ 0x327
 8019412:	4906      	ldr	r1, [pc, #24]	@ (801942c <tcp_write+0x6c0>)
 8019414:	4806      	ldr	r0, [pc, #24]	@ (8019430 <tcp_write+0x6c4>)
 8019416:	f007 fab5 	bl	8020984 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801941a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801941e:	4618      	mov	r0, r3
 8019420:	375c      	adds	r7, #92	@ 0x5c
 8019422:	46bd      	mov	sp, r7
 8019424:	bd90      	pop	{r4, r7, pc}
 8019426:	bf00      	nop
 8019428:	08025508 	.word	0x08025508
 801942c:	0802587c 	.word	0x0802587c
 8019430:	0802555c 	.word	0x0802555c

08019434 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8019434:	b590      	push	{r4, r7, lr}
 8019436:	b08b      	sub	sp, #44	@ 0x2c
 8019438:	af02      	add	r7, sp, #8
 801943a:	6078      	str	r0, [r7, #4]
 801943c:	460b      	mov	r3, r1
 801943e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8019440:	2300      	movs	r3, #0
 8019442:	61fb      	str	r3, [r7, #28]
 8019444:	2300      	movs	r3, #0
 8019446:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8019448:	2300      	movs	r3, #0
 801944a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	2b00      	cmp	r3, #0
 8019450:	d106      	bne.n	8019460 <tcp_split_unsent_seg+0x2c>
 8019452:	4b95      	ldr	r3, [pc, #596]	@ (80196a8 <tcp_split_unsent_seg+0x274>)
 8019454:	f240 324b 	movw	r2, #843	@ 0x34b
 8019458:	4994      	ldr	r1, [pc, #592]	@ (80196ac <tcp_split_unsent_seg+0x278>)
 801945a:	4895      	ldr	r0, [pc, #596]	@ (80196b0 <tcp_split_unsent_seg+0x27c>)
 801945c:	f007 fa92 	bl	8020984 <iprintf>

  useg = pcb->unsent;
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019464:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8019466:	697b      	ldr	r3, [r7, #20]
 8019468:	2b00      	cmp	r3, #0
 801946a:	d102      	bne.n	8019472 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801946c:	f04f 33ff 	mov.w	r3, #4294967295
 8019470:	e116      	b.n	80196a0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8019472:	887b      	ldrh	r3, [r7, #2]
 8019474:	2b00      	cmp	r3, #0
 8019476:	d109      	bne.n	801948c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8019478:	4b8b      	ldr	r3, [pc, #556]	@ (80196a8 <tcp_split_unsent_seg+0x274>)
 801947a:	f240 3253 	movw	r2, #851	@ 0x353
 801947e:	498d      	ldr	r1, [pc, #564]	@ (80196b4 <tcp_split_unsent_seg+0x280>)
 8019480:	488b      	ldr	r0, [pc, #556]	@ (80196b0 <tcp_split_unsent_seg+0x27c>)
 8019482:	f007 fa7f 	bl	8020984 <iprintf>
    return ERR_VAL;
 8019486:	f06f 0305 	mvn.w	r3, #5
 801948a:	e109      	b.n	80196a0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801948c:	697b      	ldr	r3, [r7, #20]
 801948e:	891b      	ldrh	r3, [r3, #8]
 8019490:	887a      	ldrh	r2, [r7, #2]
 8019492:	429a      	cmp	r2, r3
 8019494:	d301      	bcc.n	801949a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8019496:	2300      	movs	r3, #0
 8019498:	e102      	b.n	80196a0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801949e:	887a      	ldrh	r2, [r7, #2]
 80194a0:	429a      	cmp	r2, r3
 80194a2:	d906      	bls.n	80194b2 <tcp_split_unsent_seg+0x7e>
 80194a4:	4b80      	ldr	r3, [pc, #512]	@ (80196a8 <tcp_split_unsent_seg+0x274>)
 80194a6:	f240 325b 	movw	r2, #859	@ 0x35b
 80194aa:	4983      	ldr	r1, [pc, #524]	@ (80196b8 <tcp_split_unsent_seg+0x284>)
 80194ac:	4880      	ldr	r0, [pc, #512]	@ (80196b0 <tcp_split_unsent_seg+0x27c>)
 80194ae:	f007 fa69 	bl	8020984 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80194b2:	697b      	ldr	r3, [r7, #20]
 80194b4:	891b      	ldrh	r3, [r3, #8]
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d106      	bne.n	80194c8 <tcp_split_unsent_seg+0x94>
 80194ba:	4b7b      	ldr	r3, [pc, #492]	@ (80196a8 <tcp_split_unsent_seg+0x274>)
 80194bc:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80194c0:	497e      	ldr	r1, [pc, #504]	@ (80196bc <tcp_split_unsent_seg+0x288>)
 80194c2:	487b      	ldr	r0, [pc, #492]	@ (80196b0 <tcp_split_unsent_seg+0x27c>)
 80194c4:	f007 fa5e 	bl	8020984 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80194c8:	697b      	ldr	r3, [r7, #20]
 80194ca:	7a9b      	ldrb	r3, [r3, #10]
 80194cc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80194ce:	7bfb      	ldrb	r3, [r7, #15]
 80194d0:	009b      	lsls	r3, r3, #2
 80194d2:	b2db      	uxtb	r3, r3
 80194d4:	f003 0304 	and.w	r3, r3, #4
 80194d8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80194da:	697b      	ldr	r3, [r7, #20]
 80194dc:	891a      	ldrh	r2, [r3, #8]
 80194de:	887b      	ldrh	r3, [r7, #2]
 80194e0:	1ad3      	subs	r3, r2, r3
 80194e2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80194e4:	7bbb      	ldrb	r3, [r7, #14]
 80194e6:	b29a      	uxth	r2, r3
 80194e8:	89bb      	ldrh	r3, [r7, #12]
 80194ea:	4413      	add	r3, r2
 80194ec:	b29b      	uxth	r3, r3
 80194ee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80194f2:	4619      	mov	r1, r3
 80194f4:	2036      	movs	r0, #54	@ 0x36
 80194f6:	f7fa fbd3 	bl	8013ca0 <pbuf_alloc>
 80194fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80194fc:	693b      	ldr	r3, [r7, #16]
 80194fe:	2b00      	cmp	r3, #0
 8019500:	f000 80b7 	beq.w	8019672 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8019504:	697b      	ldr	r3, [r7, #20]
 8019506:	685b      	ldr	r3, [r3, #4]
 8019508:	891a      	ldrh	r2, [r3, #8]
 801950a:	697b      	ldr	r3, [r7, #20]
 801950c:	891b      	ldrh	r3, [r3, #8]
 801950e:	1ad3      	subs	r3, r2, r3
 8019510:	b29a      	uxth	r2, r3
 8019512:	887b      	ldrh	r3, [r7, #2]
 8019514:	4413      	add	r3, r2
 8019516:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8019518:	697b      	ldr	r3, [r7, #20]
 801951a:	6858      	ldr	r0, [r3, #4]
 801951c:	693b      	ldr	r3, [r7, #16]
 801951e:	685a      	ldr	r2, [r3, #4]
 8019520:	7bbb      	ldrb	r3, [r7, #14]
 8019522:	18d1      	adds	r1, r2, r3
 8019524:	897b      	ldrh	r3, [r7, #10]
 8019526:	89ba      	ldrh	r2, [r7, #12]
 8019528:	f7fb f8a4 	bl	8014674 <pbuf_copy_partial>
 801952c:	4603      	mov	r3, r0
 801952e:	461a      	mov	r2, r3
 8019530:	89bb      	ldrh	r3, [r7, #12]
 8019532:	4293      	cmp	r3, r2
 8019534:	f040 809f 	bne.w	8019676 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8019538:	697b      	ldr	r3, [r7, #20]
 801953a:	68db      	ldr	r3, [r3, #12]
 801953c:	899b      	ldrh	r3, [r3, #12]
 801953e:	b29b      	uxth	r3, r3
 8019540:	4618      	mov	r0, r3
 8019542:	f7f9 f9db 	bl	80128fc <lwip_htons>
 8019546:	4603      	mov	r3, r0
 8019548:	b2db      	uxtb	r3, r3
 801954a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801954e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8019550:	2300      	movs	r3, #0
 8019552:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8019554:	7efb      	ldrb	r3, [r7, #27]
 8019556:	f003 0308 	and.w	r3, r3, #8
 801955a:	2b00      	cmp	r3, #0
 801955c:	d007      	beq.n	801956e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801955e:	7efb      	ldrb	r3, [r7, #27]
 8019560:	f023 0308 	bic.w	r3, r3, #8
 8019564:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8019566:	7ebb      	ldrb	r3, [r7, #26]
 8019568:	f043 0308 	orr.w	r3, r3, #8
 801956c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801956e:	7efb      	ldrb	r3, [r7, #27]
 8019570:	f003 0301 	and.w	r3, r3, #1
 8019574:	2b00      	cmp	r3, #0
 8019576:	d007      	beq.n	8019588 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8019578:	7efb      	ldrb	r3, [r7, #27]
 801957a:	f023 0301 	bic.w	r3, r3, #1
 801957e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8019580:	7ebb      	ldrb	r3, [r7, #26]
 8019582:	f043 0301 	orr.w	r3, r3, #1
 8019586:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8019588:	697b      	ldr	r3, [r7, #20]
 801958a:	68db      	ldr	r3, [r3, #12]
 801958c:	685b      	ldr	r3, [r3, #4]
 801958e:	4618      	mov	r0, r3
 8019590:	f7f9 f9c9 	bl	8012926 <lwip_htonl>
 8019594:	4602      	mov	r2, r0
 8019596:	887b      	ldrh	r3, [r7, #2]
 8019598:	18d1      	adds	r1, r2, r3
 801959a:	7eba      	ldrb	r2, [r7, #26]
 801959c:	7bfb      	ldrb	r3, [r7, #15]
 801959e:	9300      	str	r3, [sp, #0]
 80195a0:	460b      	mov	r3, r1
 80195a2:	6939      	ldr	r1, [r7, #16]
 80195a4:	6878      	ldr	r0, [r7, #4]
 80195a6:	f7ff fa51 	bl	8018a4c <tcp_create_segment>
 80195aa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80195ac:	69fb      	ldr	r3, [r7, #28]
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d063      	beq.n	801967a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80195b2:	697b      	ldr	r3, [r7, #20]
 80195b4:	685b      	ldr	r3, [r3, #4]
 80195b6:	4618      	mov	r0, r3
 80195b8:	f7fa fee4 	bl	8014384 <pbuf_clen>
 80195bc:	4603      	mov	r3, r0
 80195be:	461a      	mov	r2, r3
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80195c6:	1a9b      	subs	r3, r3, r2
 80195c8:	b29a      	uxth	r2, r3
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80195d0:	697b      	ldr	r3, [r7, #20]
 80195d2:	6858      	ldr	r0, [r3, #4]
 80195d4:	697b      	ldr	r3, [r7, #20]
 80195d6:	685b      	ldr	r3, [r3, #4]
 80195d8:	891a      	ldrh	r2, [r3, #8]
 80195da:	89bb      	ldrh	r3, [r7, #12]
 80195dc:	1ad3      	subs	r3, r2, r3
 80195de:	b29b      	uxth	r3, r3
 80195e0:	4619      	mov	r1, r3
 80195e2:	f7fa fcbb 	bl	8013f5c <pbuf_realloc>
  useg->len -= remainder;
 80195e6:	697b      	ldr	r3, [r7, #20]
 80195e8:	891a      	ldrh	r2, [r3, #8]
 80195ea:	89bb      	ldrh	r3, [r7, #12]
 80195ec:	1ad3      	subs	r3, r2, r3
 80195ee:	b29a      	uxth	r2, r3
 80195f0:	697b      	ldr	r3, [r7, #20]
 80195f2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80195f4:	697b      	ldr	r3, [r7, #20]
 80195f6:	68db      	ldr	r3, [r3, #12]
 80195f8:	899b      	ldrh	r3, [r3, #12]
 80195fa:	b29c      	uxth	r4, r3
 80195fc:	7efb      	ldrb	r3, [r7, #27]
 80195fe:	b29b      	uxth	r3, r3
 8019600:	4618      	mov	r0, r3
 8019602:	f7f9 f97b 	bl	80128fc <lwip_htons>
 8019606:	4603      	mov	r3, r0
 8019608:	461a      	mov	r2, r3
 801960a:	697b      	ldr	r3, [r7, #20]
 801960c:	68db      	ldr	r3, [r3, #12]
 801960e:	4322      	orrs	r2, r4
 8019610:	b292      	uxth	r2, r2
 8019612:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8019614:	697b      	ldr	r3, [r7, #20]
 8019616:	685b      	ldr	r3, [r3, #4]
 8019618:	4618      	mov	r0, r3
 801961a:	f7fa feb3 	bl	8014384 <pbuf_clen>
 801961e:	4603      	mov	r3, r0
 8019620:	461a      	mov	r2, r3
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019628:	4413      	add	r3, r2
 801962a:	b29a      	uxth	r2, r3
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019632:	69fb      	ldr	r3, [r7, #28]
 8019634:	685b      	ldr	r3, [r3, #4]
 8019636:	4618      	mov	r0, r3
 8019638:	f7fa fea4 	bl	8014384 <pbuf_clen>
 801963c:	4603      	mov	r3, r0
 801963e:	461a      	mov	r2, r3
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019646:	4413      	add	r3, r2
 8019648:	b29a      	uxth	r2, r3
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8019650:	697b      	ldr	r3, [r7, #20]
 8019652:	681a      	ldr	r2, [r3, #0]
 8019654:	69fb      	ldr	r3, [r7, #28]
 8019656:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8019658:	697b      	ldr	r3, [r7, #20]
 801965a:	69fa      	ldr	r2, [r7, #28]
 801965c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801965e:	69fb      	ldr	r3, [r7, #28]
 8019660:	681b      	ldr	r3, [r3, #0]
 8019662:	2b00      	cmp	r3, #0
 8019664:	d103      	bne.n	801966e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	2200      	movs	r2, #0
 801966a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801966e:	2300      	movs	r3, #0
 8019670:	e016      	b.n	80196a0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8019672:	bf00      	nop
 8019674:	e002      	b.n	801967c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8019676:	bf00      	nop
 8019678:	e000      	b.n	801967c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801967a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801967c:	69fb      	ldr	r3, [r7, #28]
 801967e:	2b00      	cmp	r3, #0
 8019680:	d006      	beq.n	8019690 <tcp_split_unsent_seg+0x25c>
 8019682:	4b09      	ldr	r3, [pc, #36]	@ (80196a8 <tcp_split_unsent_seg+0x274>)
 8019684:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8019688:	490d      	ldr	r1, [pc, #52]	@ (80196c0 <tcp_split_unsent_seg+0x28c>)
 801968a:	4809      	ldr	r0, [pc, #36]	@ (80196b0 <tcp_split_unsent_seg+0x27c>)
 801968c:	f007 f97a 	bl	8020984 <iprintf>
  if (p != NULL) {
 8019690:	693b      	ldr	r3, [r7, #16]
 8019692:	2b00      	cmp	r3, #0
 8019694:	d002      	beq.n	801969c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8019696:	6938      	ldr	r0, [r7, #16]
 8019698:	f7fa fde6 	bl	8014268 <pbuf_free>
  }

  return ERR_MEM;
 801969c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80196a0:	4618      	mov	r0, r3
 80196a2:	3724      	adds	r7, #36	@ 0x24
 80196a4:	46bd      	mov	sp, r7
 80196a6:	bd90      	pop	{r4, r7, pc}
 80196a8:	08025508 	.word	0x08025508
 80196ac:	0802589c 	.word	0x0802589c
 80196b0:	0802555c 	.word	0x0802555c
 80196b4:	080258c0 	.word	0x080258c0
 80196b8:	080258e4 	.word	0x080258e4
 80196bc:	080258f4 	.word	0x080258f4
 80196c0:	08025904 	.word	0x08025904

080196c4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80196c4:	b590      	push	{r4, r7, lr}
 80196c6:	b085      	sub	sp, #20
 80196c8:	af00      	add	r7, sp, #0
 80196ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d106      	bne.n	80196e0 <tcp_send_fin+0x1c>
 80196d2:	4b21      	ldr	r3, [pc, #132]	@ (8019758 <tcp_send_fin+0x94>)
 80196d4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80196d8:	4920      	ldr	r1, [pc, #128]	@ (801975c <tcp_send_fin+0x98>)
 80196da:	4821      	ldr	r0, [pc, #132]	@ (8019760 <tcp_send_fin+0x9c>)
 80196dc:	f007 f952 	bl	8020984 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d02e      	beq.n	8019746 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80196ec:	60fb      	str	r3, [r7, #12]
 80196ee:	e002      	b.n	80196f6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	681b      	ldr	r3, [r3, #0]
 80196f4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80196f6:	68fb      	ldr	r3, [r7, #12]
 80196f8:	681b      	ldr	r3, [r3, #0]
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d1f8      	bne.n	80196f0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	68db      	ldr	r3, [r3, #12]
 8019702:	899b      	ldrh	r3, [r3, #12]
 8019704:	b29b      	uxth	r3, r3
 8019706:	4618      	mov	r0, r3
 8019708:	f7f9 f8f8 	bl	80128fc <lwip_htons>
 801970c:	4603      	mov	r3, r0
 801970e:	b2db      	uxtb	r3, r3
 8019710:	f003 0307 	and.w	r3, r3, #7
 8019714:	2b00      	cmp	r3, #0
 8019716:	d116      	bne.n	8019746 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8019718:	68fb      	ldr	r3, [r7, #12]
 801971a:	68db      	ldr	r3, [r3, #12]
 801971c:	899b      	ldrh	r3, [r3, #12]
 801971e:	b29c      	uxth	r4, r3
 8019720:	2001      	movs	r0, #1
 8019722:	f7f9 f8eb 	bl	80128fc <lwip_htons>
 8019726:	4603      	mov	r3, r0
 8019728:	461a      	mov	r2, r3
 801972a:	68fb      	ldr	r3, [r7, #12]
 801972c:	68db      	ldr	r3, [r3, #12]
 801972e:	4322      	orrs	r2, r4
 8019730:	b292      	uxth	r2, r2
 8019732:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	8b5b      	ldrh	r3, [r3, #26]
 8019738:	f043 0320 	orr.w	r3, r3, #32
 801973c:	b29a      	uxth	r2, r3
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8019742:	2300      	movs	r3, #0
 8019744:	e004      	b.n	8019750 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8019746:	2101      	movs	r1, #1
 8019748:	6878      	ldr	r0, [r7, #4]
 801974a:	f000 f80b 	bl	8019764 <tcp_enqueue_flags>
 801974e:	4603      	mov	r3, r0
}
 8019750:	4618      	mov	r0, r3
 8019752:	3714      	adds	r7, #20
 8019754:	46bd      	mov	sp, r7
 8019756:	bd90      	pop	{r4, r7, pc}
 8019758:	08025508 	.word	0x08025508
 801975c:	08025910 	.word	0x08025910
 8019760:	0802555c 	.word	0x0802555c

08019764 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8019764:	b580      	push	{r7, lr}
 8019766:	b08a      	sub	sp, #40	@ 0x28
 8019768:	af02      	add	r7, sp, #8
 801976a:	6078      	str	r0, [r7, #4]
 801976c:	460b      	mov	r3, r1
 801976e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8019770:	2300      	movs	r3, #0
 8019772:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8019774:	2300      	movs	r3, #0
 8019776:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8019778:	78fb      	ldrb	r3, [r7, #3]
 801977a:	f003 0303 	and.w	r3, r3, #3
 801977e:	2b00      	cmp	r3, #0
 8019780:	d106      	bne.n	8019790 <tcp_enqueue_flags+0x2c>
 8019782:	4b67      	ldr	r3, [pc, #412]	@ (8019920 <tcp_enqueue_flags+0x1bc>)
 8019784:	f240 4211 	movw	r2, #1041	@ 0x411
 8019788:	4966      	ldr	r1, [pc, #408]	@ (8019924 <tcp_enqueue_flags+0x1c0>)
 801978a:	4867      	ldr	r0, [pc, #412]	@ (8019928 <tcp_enqueue_flags+0x1c4>)
 801978c:	f007 f8fa 	bl	8020984 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	2b00      	cmp	r3, #0
 8019794:	d106      	bne.n	80197a4 <tcp_enqueue_flags+0x40>
 8019796:	4b62      	ldr	r3, [pc, #392]	@ (8019920 <tcp_enqueue_flags+0x1bc>)
 8019798:	f240 4213 	movw	r2, #1043	@ 0x413
 801979c:	4963      	ldr	r1, [pc, #396]	@ (801992c <tcp_enqueue_flags+0x1c8>)
 801979e:	4862      	ldr	r0, [pc, #392]	@ (8019928 <tcp_enqueue_flags+0x1c4>)
 80197a0:	f007 f8f0 	bl	8020984 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80197a4:	78fb      	ldrb	r3, [r7, #3]
 80197a6:	f003 0302 	and.w	r3, r3, #2
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	d001      	beq.n	80197b2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80197ae:	2301      	movs	r3, #1
 80197b0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80197b2:	7ffb      	ldrb	r3, [r7, #31]
 80197b4:	009b      	lsls	r3, r3, #2
 80197b6:	b2db      	uxtb	r3, r3
 80197b8:	f003 0304 	and.w	r3, r3, #4
 80197bc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80197be:	7dfb      	ldrb	r3, [r7, #23]
 80197c0:	b29b      	uxth	r3, r3
 80197c2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80197c6:	4619      	mov	r1, r3
 80197c8:	2036      	movs	r0, #54	@ 0x36
 80197ca:	f7fa fa69 	bl	8013ca0 <pbuf_alloc>
 80197ce:	6138      	str	r0, [r7, #16]
 80197d0:	693b      	ldr	r3, [r7, #16]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d109      	bne.n	80197ea <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	8b5b      	ldrh	r3, [r3, #26]
 80197da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80197de:	b29a      	uxth	r2, r3
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80197e4:	f04f 33ff 	mov.w	r3, #4294967295
 80197e8:	e095      	b.n	8019916 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80197ea:	693b      	ldr	r3, [r7, #16]
 80197ec:	895a      	ldrh	r2, [r3, #10]
 80197ee:	7dfb      	ldrb	r3, [r7, #23]
 80197f0:	b29b      	uxth	r3, r3
 80197f2:	429a      	cmp	r2, r3
 80197f4:	d206      	bcs.n	8019804 <tcp_enqueue_flags+0xa0>
 80197f6:	4b4a      	ldr	r3, [pc, #296]	@ (8019920 <tcp_enqueue_flags+0x1bc>)
 80197f8:	f240 4239 	movw	r2, #1081	@ 0x439
 80197fc:	494c      	ldr	r1, [pc, #304]	@ (8019930 <tcp_enqueue_flags+0x1cc>)
 80197fe:	484a      	ldr	r0, [pc, #296]	@ (8019928 <tcp_enqueue_flags+0x1c4>)
 8019800:	f007 f8c0 	bl	8020984 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8019808:	78fa      	ldrb	r2, [r7, #3]
 801980a:	7ffb      	ldrb	r3, [r7, #31]
 801980c:	9300      	str	r3, [sp, #0]
 801980e:	460b      	mov	r3, r1
 8019810:	6939      	ldr	r1, [r7, #16]
 8019812:	6878      	ldr	r0, [r7, #4]
 8019814:	f7ff f91a 	bl	8018a4c <tcp_create_segment>
 8019818:	60f8      	str	r0, [r7, #12]
 801981a:	68fb      	ldr	r3, [r7, #12]
 801981c:	2b00      	cmp	r3, #0
 801981e:	d109      	bne.n	8019834 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	8b5b      	ldrh	r3, [r3, #26]
 8019824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019828:	b29a      	uxth	r2, r3
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801982e:	f04f 33ff 	mov.w	r3, #4294967295
 8019832:	e070      	b.n	8019916 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8019834:	68fb      	ldr	r3, [r7, #12]
 8019836:	68db      	ldr	r3, [r3, #12]
 8019838:	f003 0303 	and.w	r3, r3, #3
 801983c:	2b00      	cmp	r3, #0
 801983e:	d006      	beq.n	801984e <tcp_enqueue_flags+0xea>
 8019840:	4b37      	ldr	r3, [pc, #220]	@ (8019920 <tcp_enqueue_flags+0x1bc>)
 8019842:	f240 4242 	movw	r2, #1090	@ 0x442
 8019846:	493b      	ldr	r1, [pc, #236]	@ (8019934 <tcp_enqueue_flags+0x1d0>)
 8019848:	4837      	ldr	r0, [pc, #220]	@ (8019928 <tcp_enqueue_flags+0x1c4>)
 801984a:	f007 f89b 	bl	8020984 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801984e:	68fb      	ldr	r3, [r7, #12]
 8019850:	891b      	ldrh	r3, [r3, #8]
 8019852:	2b00      	cmp	r3, #0
 8019854:	d006      	beq.n	8019864 <tcp_enqueue_flags+0x100>
 8019856:	4b32      	ldr	r3, [pc, #200]	@ (8019920 <tcp_enqueue_flags+0x1bc>)
 8019858:	f240 4243 	movw	r2, #1091	@ 0x443
 801985c:	4936      	ldr	r1, [pc, #216]	@ (8019938 <tcp_enqueue_flags+0x1d4>)
 801985e:	4832      	ldr	r0, [pc, #200]	@ (8019928 <tcp_enqueue_flags+0x1c4>)
 8019860:	f007 f890 	bl	8020984 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019868:	2b00      	cmp	r3, #0
 801986a:	d103      	bne.n	8019874 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	68fa      	ldr	r2, [r7, #12]
 8019870:	66da      	str	r2, [r3, #108]	@ 0x6c
 8019872:	e00d      	b.n	8019890 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019878:	61bb      	str	r3, [r7, #24]
 801987a:	e002      	b.n	8019882 <tcp_enqueue_flags+0x11e>
 801987c:	69bb      	ldr	r3, [r7, #24]
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	61bb      	str	r3, [r7, #24]
 8019882:	69bb      	ldr	r3, [r7, #24]
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	2b00      	cmp	r3, #0
 8019888:	d1f8      	bne.n	801987c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801988a:	69bb      	ldr	r3, [r7, #24]
 801988c:	68fa      	ldr	r2, [r7, #12]
 801988e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	2200      	movs	r2, #0
 8019894:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8019898:	78fb      	ldrb	r3, [r7, #3]
 801989a:	f003 0302 	and.w	r3, r3, #2
 801989e:	2b00      	cmp	r3, #0
 80198a0:	d104      	bne.n	80198ac <tcp_enqueue_flags+0x148>
 80198a2:	78fb      	ldrb	r3, [r7, #3]
 80198a4:	f003 0301 	and.w	r3, r3, #1
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d004      	beq.n	80198b6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80198b0:	1c5a      	adds	r2, r3, #1
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80198b6:	78fb      	ldrb	r3, [r7, #3]
 80198b8:	f003 0301 	and.w	r3, r3, #1
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d006      	beq.n	80198ce <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	8b5b      	ldrh	r3, [r3, #26]
 80198c4:	f043 0320 	orr.w	r3, r3, #32
 80198c8:	b29a      	uxth	r2, r3
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80198ce:	68fb      	ldr	r3, [r7, #12]
 80198d0:	685b      	ldr	r3, [r3, #4]
 80198d2:	4618      	mov	r0, r3
 80198d4:	f7fa fd56 	bl	8014384 <pbuf_clen>
 80198d8:	4603      	mov	r3, r0
 80198da:	461a      	mov	r2, r3
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80198e2:	4413      	add	r3, r2
 80198e4:	b29a      	uxth	r2, r3
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	d00e      	beq.n	8019914 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d10a      	bne.n	8019914 <tcp_enqueue_flags+0x1b0>
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019902:	2b00      	cmp	r3, #0
 8019904:	d106      	bne.n	8019914 <tcp_enqueue_flags+0x1b0>
 8019906:	4b06      	ldr	r3, [pc, #24]	@ (8019920 <tcp_enqueue_flags+0x1bc>)
 8019908:	f240 4265 	movw	r2, #1125	@ 0x465
 801990c:	490b      	ldr	r1, [pc, #44]	@ (801993c <tcp_enqueue_flags+0x1d8>)
 801990e:	4806      	ldr	r0, [pc, #24]	@ (8019928 <tcp_enqueue_flags+0x1c4>)
 8019910:	f007 f838 	bl	8020984 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8019914:	2300      	movs	r3, #0
}
 8019916:	4618      	mov	r0, r3
 8019918:	3720      	adds	r7, #32
 801991a:	46bd      	mov	sp, r7
 801991c:	bd80      	pop	{r7, pc}
 801991e:	bf00      	nop
 8019920:	08025508 	.word	0x08025508
 8019924:	0802592c 	.word	0x0802592c
 8019928:	0802555c 	.word	0x0802555c
 801992c:	08025984 	.word	0x08025984
 8019930:	080259a4 	.word	0x080259a4
 8019934:	080259e0 	.word	0x080259e0
 8019938:	080259f8 	.word	0x080259f8
 801993c:	08025a24 	.word	0x08025a24

08019940 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8019940:	b5b0      	push	{r4, r5, r7, lr}
 8019942:	b08a      	sub	sp, #40	@ 0x28
 8019944:	af00      	add	r7, sp, #0
 8019946:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	2b00      	cmp	r3, #0
 801994c:	d106      	bne.n	801995c <tcp_output+0x1c>
 801994e:	4b8a      	ldr	r3, [pc, #552]	@ (8019b78 <tcp_output+0x238>)
 8019950:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8019954:	4989      	ldr	r1, [pc, #548]	@ (8019b7c <tcp_output+0x23c>)
 8019956:	488a      	ldr	r0, [pc, #552]	@ (8019b80 <tcp_output+0x240>)
 8019958:	f007 f814 	bl	8020984 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	7d1b      	ldrb	r3, [r3, #20]
 8019960:	2b01      	cmp	r3, #1
 8019962:	d106      	bne.n	8019972 <tcp_output+0x32>
 8019964:	4b84      	ldr	r3, [pc, #528]	@ (8019b78 <tcp_output+0x238>)
 8019966:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801996a:	4986      	ldr	r1, [pc, #536]	@ (8019b84 <tcp_output+0x244>)
 801996c:	4884      	ldr	r0, [pc, #528]	@ (8019b80 <tcp_output+0x240>)
 801996e:	f007 f809 	bl	8020984 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8019972:	4b85      	ldr	r3, [pc, #532]	@ (8019b88 <tcp_output+0x248>)
 8019974:	681b      	ldr	r3, [r3, #0]
 8019976:	687a      	ldr	r2, [r7, #4]
 8019978:	429a      	cmp	r2, r3
 801997a:	d101      	bne.n	8019980 <tcp_output+0x40>
    return ERR_OK;
 801997c:	2300      	movs	r3, #0
 801997e:	e1ce      	b.n	8019d1e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801998c:	4293      	cmp	r3, r2
 801998e:	bf28      	it	cs
 8019990:	4613      	movcs	r3, r2
 8019992:	b29b      	uxth	r3, r3
 8019994:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801999a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801999c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801999e:	2b00      	cmp	r3, #0
 80199a0:	d10b      	bne.n	80199ba <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	8b5b      	ldrh	r3, [r3, #26]
 80199a6:	f003 0302 	and.w	r3, r3, #2
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	f000 81aa 	beq.w	8019d04 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80199b0:	6878      	ldr	r0, [r7, #4]
 80199b2:	f000 fdcb 	bl	801a54c <tcp_send_empty_ack>
 80199b6:	4603      	mov	r3, r0
 80199b8:	e1b1      	b.n	8019d1e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80199ba:	6879      	ldr	r1, [r7, #4]
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	3304      	adds	r3, #4
 80199c0:	461a      	mov	r2, r3
 80199c2:	6878      	ldr	r0, [r7, #4]
 80199c4:	f7ff f826 	bl	8018a14 <tcp_route>
 80199c8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80199ca:	697b      	ldr	r3, [r7, #20]
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	d102      	bne.n	80199d6 <tcp_output+0x96>
    return ERR_RTE;
 80199d0:	f06f 0303 	mvn.w	r3, #3
 80199d4:	e1a3      	b.n	8019d1e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d003      	beq.n	80199e4 <tcp_output+0xa4>
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d111      	bne.n	8019a08 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80199e4:	697b      	ldr	r3, [r7, #20]
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d002      	beq.n	80199f0 <tcp_output+0xb0>
 80199ea:	697b      	ldr	r3, [r7, #20]
 80199ec:	3304      	adds	r3, #4
 80199ee:	e000      	b.n	80199f2 <tcp_output+0xb2>
 80199f0:	2300      	movs	r3, #0
 80199f2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80199f4:	693b      	ldr	r3, [r7, #16]
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d102      	bne.n	8019a00 <tcp_output+0xc0>
      return ERR_RTE;
 80199fa:	f06f 0303 	mvn.w	r3, #3
 80199fe:	e18e      	b.n	8019d1e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019a00:	693b      	ldr	r3, [r7, #16]
 8019a02:	681a      	ldr	r2, [r3, #0]
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8019a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a0a:	68db      	ldr	r3, [r3, #12]
 8019a0c:	685b      	ldr	r3, [r3, #4]
 8019a0e:	4618      	mov	r0, r3
 8019a10:	f7f8 ff89 	bl	8012926 <lwip_htonl>
 8019a14:	4602      	mov	r2, r0
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019a1a:	1ad3      	subs	r3, r2, r3
 8019a1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019a1e:	8912      	ldrh	r2, [r2, #8]
 8019a20:	4413      	add	r3, r2
 8019a22:	69ba      	ldr	r2, [r7, #24]
 8019a24:	429a      	cmp	r2, r3
 8019a26:	d227      	bcs.n	8019a78 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019a2e:	461a      	mov	r2, r3
 8019a30:	69bb      	ldr	r3, [r7, #24]
 8019a32:	4293      	cmp	r3, r2
 8019a34:	d114      	bne.n	8019a60 <tcp_output+0x120>
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	d110      	bne.n	8019a60 <tcp_output+0x120>
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d10b      	bne.n	8019a60 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	2200      	movs	r2, #0
 8019a4c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	2201      	movs	r2, #1
 8019a54:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	2200      	movs	r2, #0
 8019a5c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	8b5b      	ldrh	r3, [r3, #26]
 8019a64:	f003 0302 	and.w	r3, r3, #2
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	f000 814d 	beq.w	8019d08 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8019a6e:	6878      	ldr	r0, [r7, #4]
 8019a70:	f000 fd6c 	bl	801a54c <tcp_send_empty_ack>
 8019a74:	4603      	mov	r3, r0
 8019a76:	e152      	b.n	8019d1e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	2200      	movs	r2, #0
 8019a7c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019a84:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8019a86:	6a3b      	ldr	r3, [r7, #32]
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	f000 811c 	beq.w	8019cc6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8019a8e:	e002      	b.n	8019a96 <tcp_output+0x156>
 8019a90:	6a3b      	ldr	r3, [r7, #32]
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	623b      	str	r3, [r7, #32]
 8019a96:	6a3b      	ldr	r3, [r7, #32]
 8019a98:	681b      	ldr	r3, [r3, #0]
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d1f8      	bne.n	8019a90 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8019a9e:	e112      	b.n	8019cc6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8019aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019aa2:	68db      	ldr	r3, [r3, #12]
 8019aa4:	899b      	ldrh	r3, [r3, #12]
 8019aa6:	b29b      	uxth	r3, r3
 8019aa8:	4618      	mov	r0, r3
 8019aaa:	f7f8 ff27 	bl	80128fc <lwip_htons>
 8019aae:	4603      	mov	r3, r0
 8019ab0:	b2db      	uxtb	r3, r3
 8019ab2:	f003 0304 	and.w	r3, r3, #4
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d006      	beq.n	8019ac8 <tcp_output+0x188>
 8019aba:	4b2f      	ldr	r3, [pc, #188]	@ (8019b78 <tcp_output+0x238>)
 8019abc:	f240 5236 	movw	r2, #1334	@ 0x536
 8019ac0:	4932      	ldr	r1, [pc, #200]	@ (8019b8c <tcp_output+0x24c>)
 8019ac2:	482f      	ldr	r0, [pc, #188]	@ (8019b80 <tcp_output+0x240>)
 8019ac4:	f006 ff5e 	bl	8020984 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d01f      	beq.n	8019b10 <tcp_output+0x1d0>
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	8b5b      	ldrh	r3, [r3, #26]
 8019ad4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d119      	bne.n	8019b10 <tcp_output+0x1d0>
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	d00b      	beq.n	8019afc <tcp_output+0x1bc>
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019ae8:	681b      	ldr	r3, [r3, #0]
 8019aea:	2b00      	cmp	r3, #0
 8019aec:	d110      	bne.n	8019b10 <tcp_output+0x1d0>
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019af2:	891a      	ldrh	r2, [r3, #8]
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019af8:	429a      	cmp	r2, r3
 8019afa:	d209      	bcs.n	8019b10 <tcp_output+0x1d0>
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d004      	beq.n	8019b10 <tcp_output+0x1d0>
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019b0c:	2b08      	cmp	r3, #8
 8019b0e:	d901      	bls.n	8019b14 <tcp_output+0x1d4>
 8019b10:	2301      	movs	r3, #1
 8019b12:	e000      	b.n	8019b16 <tcp_output+0x1d6>
 8019b14:	2300      	movs	r3, #0
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	d106      	bne.n	8019b28 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	8b5b      	ldrh	r3, [r3, #26]
 8019b1e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	f000 80e4 	beq.w	8019cf0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	7d1b      	ldrb	r3, [r3, #20]
 8019b2c:	2b02      	cmp	r3, #2
 8019b2e:	d00d      	beq.n	8019b4c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8019b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b32:	68db      	ldr	r3, [r3, #12]
 8019b34:	899b      	ldrh	r3, [r3, #12]
 8019b36:	b29c      	uxth	r4, r3
 8019b38:	2010      	movs	r0, #16
 8019b3a:	f7f8 fedf 	bl	80128fc <lwip_htons>
 8019b3e:	4603      	mov	r3, r0
 8019b40:	461a      	mov	r2, r3
 8019b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b44:	68db      	ldr	r3, [r3, #12]
 8019b46:	4322      	orrs	r2, r4
 8019b48:	b292      	uxth	r2, r2
 8019b4a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8019b4c:	697a      	ldr	r2, [r7, #20]
 8019b4e:	6879      	ldr	r1, [r7, #4]
 8019b50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019b52:	f000 f909 	bl	8019d68 <tcp_output_segment>
 8019b56:	4603      	mov	r3, r0
 8019b58:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8019b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d016      	beq.n	8019b90 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	8b5b      	ldrh	r3, [r3, #26]
 8019b66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019b6a:	b29a      	uxth	r2, r3
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	835a      	strh	r2, [r3, #26]
      return err;
 8019b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019b74:	e0d3      	b.n	8019d1e <tcp_output+0x3de>
 8019b76:	bf00      	nop
 8019b78:	08025508 	.word	0x08025508
 8019b7c:	08025a4c 	.word	0x08025a4c
 8019b80:	0802555c 	.word	0x0802555c
 8019b84:	08025a64 	.word	0x08025a64
 8019b88:	2400cb48 	.word	0x2400cb48
 8019b8c:	08025a8c 	.word	0x08025a8c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8019b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b92:	681a      	ldr	r2, [r3, #0]
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	7d1b      	ldrb	r3, [r3, #20]
 8019b9c:	2b02      	cmp	r3, #2
 8019b9e:	d006      	beq.n	8019bae <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	8b5b      	ldrh	r3, [r3, #26]
 8019ba4:	f023 0303 	bic.w	r3, r3, #3
 8019ba8:	b29a      	uxth	r2, r3
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bb0:	68db      	ldr	r3, [r3, #12]
 8019bb2:	685b      	ldr	r3, [r3, #4]
 8019bb4:	4618      	mov	r0, r3
 8019bb6:	f7f8 feb6 	bl	8012926 <lwip_htonl>
 8019bba:	4604      	mov	r4, r0
 8019bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bbe:	891b      	ldrh	r3, [r3, #8]
 8019bc0:	461d      	mov	r5, r3
 8019bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bc4:	68db      	ldr	r3, [r3, #12]
 8019bc6:	899b      	ldrh	r3, [r3, #12]
 8019bc8:	b29b      	uxth	r3, r3
 8019bca:	4618      	mov	r0, r3
 8019bcc:	f7f8 fe96 	bl	80128fc <lwip_htons>
 8019bd0:	4603      	mov	r3, r0
 8019bd2:	b2db      	uxtb	r3, r3
 8019bd4:	f003 0303 	and.w	r3, r3, #3
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d001      	beq.n	8019be0 <tcp_output+0x2a0>
 8019bdc:	2301      	movs	r3, #1
 8019bde:	e000      	b.n	8019be2 <tcp_output+0x2a2>
 8019be0:	2300      	movs	r3, #0
 8019be2:	442b      	add	r3, r5
 8019be4:	4423      	add	r3, r4
 8019be6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019bec:	68bb      	ldr	r3, [r7, #8]
 8019bee:	1ad3      	subs	r3, r2, r3
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	da02      	bge.n	8019bfa <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	68ba      	ldr	r2, [r7, #8]
 8019bf8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8019bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bfc:	891b      	ldrh	r3, [r3, #8]
 8019bfe:	461c      	mov	r4, r3
 8019c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c02:	68db      	ldr	r3, [r3, #12]
 8019c04:	899b      	ldrh	r3, [r3, #12]
 8019c06:	b29b      	uxth	r3, r3
 8019c08:	4618      	mov	r0, r3
 8019c0a:	f7f8 fe77 	bl	80128fc <lwip_htons>
 8019c0e:	4603      	mov	r3, r0
 8019c10:	b2db      	uxtb	r3, r3
 8019c12:	f003 0303 	and.w	r3, r3, #3
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d001      	beq.n	8019c1e <tcp_output+0x2de>
 8019c1a:	2301      	movs	r3, #1
 8019c1c:	e000      	b.n	8019c20 <tcp_output+0x2e0>
 8019c1e:	2300      	movs	r3, #0
 8019c20:	4423      	add	r3, r4
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d049      	beq.n	8019cba <tcp_output+0x37a>
      seg->next = NULL;
 8019c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c28:	2200      	movs	r2, #0
 8019c2a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d105      	bne.n	8019c40 <tcp_output+0x300>
        pcb->unacked = seg;
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019c38:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8019c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c3c:	623b      	str	r3, [r7, #32]
 8019c3e:	e03f      	b.n	8019cc0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8019c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c42:	68db      	ldr	r3, [r3, #12]
 8019c44:	685b      	ldr	r3, [r3, #4]
 8019c46:	4618      	mov	r0, r3
 8019c48:	f7f8 fe6d 	bl	8012926 <lwip_htonl>
 8019c4c:	4604      	mov	r4, r0
 8019c4e:	6a3b      	ldr	r3, [r7, #32]
 8019c50:	68db      	ldr	r3, [r3, #12]
 8019c52:	685b      	ldr	r3, [r3, #4]
 8019c54:	4618      	mov	r0, r3
 8019c56:	f7f8 fe66 	bl	8012926 <lwip_htonl>
 8019c5a:	4603      	mov	r3, r0
 8019c5c:	1ae3      	subs	r3, r4, r3
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	da24      	bge.n	8019cac <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	3370      	adds	r3, #112	@ 0x70
 8019c66:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019c68:	e002      	b.n	8019c70 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8019c6a:	69fb      	ldr	r3, [r7, #28]
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019c70:	69fb      	ldr	r3, [r7, #28]
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	d011      	beq.n	8019c9c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019c78:	69fb      	ldr	r3, [r7, #28]
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	68db      	ldr	r3, [r3, #12]
 8019c7e:	685b      	ldr	r3, [r3, #4]
 8019c80:	4618      	mov	r0, r3
 8019c82:	f7f8 fe50 	bl	8012926 <lwip_htonl>
 8019c86:	4604      	mov	r4, r0
 8019c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c8a:	68db      	ldr	r3, [r3, #12]
 8019c8c:	685b      	ldr	r3, [r3, #4]
 8019c8e:	4618      	mov	r0, r3
 8019c90:	f7f8 fe49 	bl	8012926 <lwip_htonl>
 8019c94:	4603      	mov	r3, r0
 8019c96:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	dbe6      	blt.n	8019c6a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8019c9c:	69fb      	ldr	r3, [r7, #28]
 8019c9e:	681a      	ldr	r2, [r3, #0]
 8019ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ca2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8019ca4:	69fb      	ldr	r3, [r7, #28]
 8019ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019ca8:	601a      	str	r2, [r3, #0]
 8019caa:	e009      	b.n	8019cc0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8019cac:	6a3b      	ldr	r3, [r7, #32]
 8019cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019cb0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8019cb2:	6a3b      	ldr	r3, [r7, #32]
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	623b      	str	r3, [r7, #32]
 8019cb8:	e002      	b.n	8019cc0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8019cba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019cbc:	f7fb ff1f 	bl	8015afe <tcp_seg_free>
    }
    seg = pcb->unsent;
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8019cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d012      	beq.n	8019cf2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8019ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cce:	68db      	ldr	r3, [r3, #12]
 8019cd0:	685b      	ldr	r3, [r3, #4]
 8019cd2:	4618      	mov	r0, r3
 8019cd4:	f7f8 fe27 	bl	8012926 <lwip_htonl>
 8019cd8:	4602      	mov	r2, r0
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019cde:	1ad3      	subs	r3, r2, r3
 8019ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019ce2:	8912      	ldrh	r2, [r2, #8]
 8019ce4:	4413      	add	r3, r2
  while (seg != NULL &&
 8019ce6:	69ba      	ldr	r2, [r7, #24]
 8019ce8:	429a      	cmp	r2, r3
 8019cea:	f4bf aed9 	bcs.w	8019aa0 <tcp_output+0x160>
 8019cee:	e000      	b.n	8019cf2 <tcp_output+0x3b2>
      break;
 8019cf0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d108      	bne.n	8019d0c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	2200      	movs	r2, #0
 8019cfe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8019d02:	e004      	b.n	8019d0e <tcp_output+0x3ce>
    goto output_done;
 8019d04:	bf00      	nop
 8019d06:	e002      	b.n	8019d0e <tcp_output+0x3ce>
    goto output_done;
 8019d08:	bf00      	nop
 8019d0a:	e000      	b.n	8019d0e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8019d0c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	8b5b      	ldrh	r3, [r3, #26]
 8019d12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019d16:	b29a      	uxth	r2, r3
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8019d1c:	2300      	movs	r3, #0
}
 8019d1e:	4618      	mov	r0, r3
 8019d20:	3728      	adds	r7, #40	@ 0x28
 8019d22:	46bd      	mov	sp, r7
 8019d24:	bdb0      	pop	{r4, r5, r7, pc}
 8019d26:	bf00      	nop

08019d28 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8019d28:	b580      	push	{r7, lr}
 8019d2a:	b082      	sub	sp, #8
 8019d2c:	af00      	add	r7, sp, #0
 8019d2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d106      	bne.n	8019d44 <tcp_output_segment_busy+0x1c>
 8019d36:	4b09      	ldr	r3, [pc, #36]	@ (8019d5c <tcp_output_segment_busy+0x34>)
 8019d38:	f240 529a 	movw	r2, #1434	@ 0x59a
 8019d3c:	4908      	ldr	r1, [pc, #32]	@ (8019d60 <tcp_output_segment_busy+0x38>)
 8019d3e:	4809      	ldr	r0, [pc, #36]	@ (8019d64 <tcp_output_segment_busy+0x3c>)
 8019d40:	f006 fe20 	bl	8020984 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	685b      	ldr	r3, [r3, #4]
 8019d48:	7b9b      	ldrb	r3, [r3, #14]
 8019d4a:	2b01      	cmp	r3, #1
 8019d4c:	d001      	beq.n	8019d52 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8019d4e:	2301      	movs	r3, #1
 8019d50:	e000      	b.n	8019d54 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8019d52:	2300      	movs	r3, #0
}
 8019d54:	4618      	mov	r0, r3
 8019d56:	3708      	adds	r7, #8
 8019d58:	46bd      	mov	sp, r7
 8019d5a:	bd80      	pop	{r7, pc}
 8019d5c:	08025508 	.word	0x08025508
 8019d60:	08025aa4 	.word	0x08025aa4
 8019d64:	0802555c 	.word	0x0802555c

08019d68 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8019d68:	b5b0      	push	{r4, r5, r7, lr}
 8019d6a:	b08c      	sub	sp, #48	@ 0x30
 8019d6c:	af04      	add	r7, sp, #16
 8019d6e:	60f8      	str	r0, [r7, #12]
 8019d70:	60b9      	str	r1, [r7, #8]
 8019d72:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8019d74:	68fb      	ldr	r3, [r7, #12]
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d106      	bne.n	8019d88 <tcp_output_segment+0x20>
 8019d7a:	4b64      	ldr	r3, [pc, #400]	@ (8019f0c <tcp_output_segment+0x1a4>)
 8019d7c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8019d80:	4963      	ldr	r1, [pc, #396]	@ (8019f10 <tcp_output_segment+0x1a8>)
 8019d82:	4864      	ldr	r0, [pc, #400]	@ (8019f14 <tcp_output_segment+0x1ac>)
 8019d84:	f006 fdfe 	bl	8020984 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8019d88:	68bb      	ldr	r3, [r7, #8]
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d106      	bne.n	8019d9c <tcp_output_segment+0x34>
 8019d8e:	4b5f      	ldr	r3, [pc, #380]	@ (8019f0c <tcp_output_segment+0x1a4>)
 8019d90:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8019d94:	4960      	ldr	r1, [pc, #384]	@ (8019f18 <tcp_output_segment+0x1b0>)
 8019d96:	485f      	ldr	r0, [pc, #380]	@ (8019f14 <tcp_output_segment+0x1ac>)
 8019d98:	f006 fdf4 	bl	8020984 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d106      	bne.n	8019db0 <tcp_output_segment+0x48>
 8019da2:	4b5a      	ldr	r3, [pc, #360]	@ (8019f0c <tcp_output_segment+0x1a4>)
 8019da4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8019da8:	495c      	ldr	r1, [pc, #368]	@ (8019f1c <tcp_output_segment+0x1b4>)
 8019daa:	485a      	ldr	r0, [pc, #360]	@ (8019f14 <tcp_output_segment+0x1ac>)
 8019dac:	f006 fdea 	bl	8020984 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8019db0:	68f8      	ldr	r0, [r7, #12]
 8019db2:	f7ff ffb9 	bl	8019d28 <tcp_output_segment_busy>
 8019db6:	4603      	mov	r3, r0
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d001      	beq.n	8019dc0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8019dbc:	2300      	movs	r3, #0
 8019dbe:	e0a1      	b.n	8019f04 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8019dc0:	68bb      	ldr	r3, [r7, #8]
 8019dc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019dc4:	68fb      	ldr	r3, [r7, #12]
 8019dc6:	68dc      	ldr	r4, [r3, #12]
 8019dc8:	4610      	mov	r0, r2
 8019dca:	f7f8 fdac 	bl	8012926 <lwip_htonl>
 8019dce:	4603      	mov	r3, r0
 8019dd0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8019dd2:	68bb      	ldr	r3, [r7, #8]
 8019dd4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	68dc      	ldr	r4, [r3, #12]
 8019dda:	4610      	mov	r0, r2
 8019ddc:	f7f8 fd8e 	bl	80128fc <lwip_htons>
 8019de0:	4603      	mov	r3, r0
 8019de2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019de4:	68bb      	ldr	r3, [r7, #8]
 8019de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019de8:	68ba      	ldr	r2, [r7, #8]
 8019dea:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8019dec:	441a      	add	r2, r3
 8019dee:	68bb      	ldr	r3, [r7, #8]
 8019df0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8019df2:	68fb      	ldr	r3, [r7, #12]
 8019df4:	68db      	ldr	r3, [r3, #12]
 8019df6:	3314      	adds	r3, #20
 8019df8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	7a9b      	ldrb	r3, [r3, #10]
 8019dfe:	f003 0301 	and.w	r3, r3, #1
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d015      	beq.n	8019e32 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8019e06:	68bb      	ldr	r3, [r7, #8]
 8019e08:	3304      	adds	r3, #4
 8019e0a:	461a      	mov	r2, r3
 8019e0c:	6879      	ldr	r1, [r7, #4]
 8019e0e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8019e12:	f7fc fa39 	bl	8016288 <tcp_eff_send_mss_netif>
 8019e16:	4603      	mov	r3, r0
 8019e18:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8019e1a:	8b7b      	ldrh	r3, [r7, #26]
 8019e1c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8019e20:	4618      	mov	r0, r3
 8019e22:	f7f8 fd80 	bl	8012926 <lwip_htonl>
 8019e26:	4602      	mov	r2, r0
 8019e28:	69fb      	ldr	r3, [r7, #28]
 8019e2a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8019e2c:	69fb      	ldr	r3, [r7, #28]
 8019e2e:	3304      	adds	r3, #4
 8019e30:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8019e32:	68bb      	ldr	r3, [r7, #8]
 8019e34:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	da02      	bge.n	8019e42 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8019e3c:	68bb      	ldr	r3, [r7, #8]
 8019e3e:	2200      	movs	r2, #0
 8019e40:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8019e42:	68bb      	ldr	r3, [r7, #8]
 8019e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d10c      	bne.n	8019e64 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8019e4a:	4b35      	ldr	r3, [pc, #212]	@ (8019f20 <tcp_output_segment+0x1b8>)
 8019e4c:	681a      	ldr	r2, [r3, #0]
 8019e4e:	68bb      	ldr	r3, [r7, #8]
 8019e50:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8019e52:	68fb      	ldr	r3, [r7, #12]
 8019e54:	68db      	ldr	r3, [r3, #12]
 8019e56:	685b      	ldr	r3, [r3, #4]
 8019e58:	4618      	mov	r0, r3
 8019e5a:	f7f8 fd64 	bl	8012926 <lwip_htonl>
 8019e5e:	4602      	mov	r2, r0
 8019e60:	68bb      	ldr	r3, [r7, #8]
 8019e62:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8019e64:	68fb      	ldr	r3, [r7, #12]
 8019e66:	68da      	ldr	r2, [r3, #12]
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	685b      	ldr	r3, [r3, #4]
 8019e6c:	685b      	ldr	r3, [r3, #4]
 8019e6e:	1ad3      	subs	r3, r2, r3
 8019e70:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8019e72:	68fb      	ldr	r3, [r7, #12]
 8019e74:	685b      	ldr	r3, [r3, #4]
 8019e76:	8959      	ldrh	r1, [r3, #10]
 8019e78:	68fb      	ldr	r3, [r7, #12]
 8019e7a:	685b      	ldr	r3, [r3, #4]
 8019e7c:	8b3a      	ldrh	r2, [r7, #24]
 8019e7e:	1a8a      	subs	r2, r1, r2
 8019e80:	b292      	uxth	r2, r2
 8019e82:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8019e84:	68fb      	ldr	r3, [r7, #12]
 8019e86:	685b      	ldr	r3, [r3, #4]
 8019e88:	8919      	ldrh	r1, [r3, #8]
 8019e8a:	68fb      	ldr	r3, [r7, #12]
 8019e8c:	685b      	ldr	r3, [r3, #4]
 8019e8e:	8b3a      	ldrh	r2, [r7, #24]
 8019e90:	1a8a      	subs	r2, r1, r2
 8019e92:	b292      	uxth	r2, r2
 8019e94:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	685b      	ldr	r3, [r3, #4]
 8019e9a:	68fa      	ldr	r2, [r7, #12]
 8019e9c:	68d2      	ldr	r2, [r2, #12]
 8019e9e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8019ea0:	68fb      	ldr	r3, [r7, #12]
 8019ea2:	68db      	ldr	r3, [r3, #12]
 8019ea4:	2200      	movs	r2, #0
 8019ea6:	741a      	strb	r2, [r3, #16]
 8019ea8:	2200      	movs	r2, #0
 8019eaa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8019eac:	68fb      	ldr	r3, [r7, #12]
 8019eae:	68da      	ldr	r2, [r3, #12]
 8019eb0:	68fb      	ldr	r3, [r7, #12]
 8019eb2:	7a9b      	ldrb	r3, [r3, #10]
 8019eb4:	f003 0301 	and.w	r3, r3, #1
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d001      	beq.n	8019ec0 <tcp_output_segment+0x158>
 8019ebc:	2318      	movs	r3, #24
 8019ebe:	e000      	b.n	8019ec2 <tcp_output_segment+0x15a>
 8019ec0:	2314      	movs	r3, #20
 8019ec2:	4413      	add	r3, r2
 8019ec4:	69fa      	ldr	r2, [r7, #28]
 8019ec6:	429a      	cmp	r2, r3
 8019ec8:	d006      	beq.n	8019ed8 <tcp_output_segment+0x170>
 8019eca:	4b10      	ldr	r3, [pc, #64]	@ (8019f0c <tcp_output_segment+0x1a4>)
 8019ecc:	f240 621c 	movw	r2, #1564	@ 0x61c
 8019ed0:	4914      	ldr	r1, [pc, #80]	@ (8019f24 <tcp_output_segment+0x1bc>)
 8019ed2:	4810      	ldr	r0, [pc, #64]	@ (8019f14 <tcp_output_segment+0x1ac>)
 8019ed4:	f006 fd56 	bl	8020984 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8019ed8:	68fb      	ldr	r3, [r7, #12]
 8019eda:	6858      	ldr	r0, [r3, #4]
 8019edc:	68b9      	ldr	r1, [r7, #8]
 8019ede:	68bb      	ldr	r3, [r7, #8]
 8019ee0:	1d1c      	adds	r4, r3, #4
 8019ee2:	68bb      	ldr	r3, [r7, #8]
 8019ee4:	7add      	ldrb	r5, [r3, #11]
 8019ee6:	68bb      	ldr	r3, [r7, #8]
 8019ee8:	7a9b      	ldrb	r3, [r3, #10]
 8019eea:	687a      	ldr	r2, [r7, #4]
 8019eec:	9202      	str	r2, [sp, #8]
 8019eee:	2206      	movs	r2, #6
 8019ef0:	9201      	str	r2, [sp, #4]
 8019ef2:	9300      	str	r3, [sp, #0]
 8019ef4:	462b      	mov	r3, r5
 8019ef6:	4622      	mov	r2, r4
 8019ef8:	f004 fd00 	bl	801e8fc <ip4_output_if>
 8019efc:	4603      	mov	r3, r0
 8019efe:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8019f00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019f04:	4618      	mov	r0, r3
 8019f06:	3720      	adds	r7, #32
 8019f08:	46bd      	mov	sp, r7
 8019f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8019f0c:	08025508 	.word	0x08025508
 8019f10:	08025acc 	.word	0x08025acc
 8019f14:	0802555c 	.word	0x0802555c
 8019f18:	08025aec 	.word	0x08025aec
 8019f1c:	08025b0c 	.word	0x08025b0c
 8019f20:	2400cafc 	.word	0x2400cafc
 8019f24:	08025b30 	.word	0x08025b30

08019f28 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8019f28:	b5b0      	push	{r4, r5, r7, lr}
 8019f2a:	b084      	sub	sp, #16
 8019f2c:	af00      	add	r7, sp, #0
 8019f2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d106      	bne.n	8019f44 <tcp_rexmit_rto_prepare+0x1c>
 8019f36:	4b31      	ldr	r3, [pc, #196]	@ (8019ffc <tcp_rexmit_rto_prepare+0xd4>)
 8019f38:	f240 6263 	movw	r2, #1635	@ 0x663
 8019f3c:	4930      	ldr	r1, [pc, #192]	@ (801a000 <tcp_rexmit_rto_prepare+0xd8>)
 8019f3e:	4831      	ldr	r0, [pc, #196]	@ (801a004 <tcp_rexmit_rto_prepare+0xdc>)
 8019f40:	f006 fd20 	bl	8020984 <iprintf>

  if (pcb->unacked == NULL) {
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d102      	bne.n	8019f52 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8019f4c:	f06f 0305 	mvn.w	r3, #5
 8019f50:	e050      	b.n	8019ff4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019f56:	60fb      	str	r3, [r7, #12]
 8019f58:	e00b      	b.n	8019f72 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8019f5a:	68f8      	ldr	r0, [r7, #12]
 8019f5c:	f7ff fee4 	bl	8019d28 <tcp_output_segment_busy>
 8019f60:	4603      	mov	r3, r0
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	d002      	beq.n	8019f6c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8019f66:	f06f 0305 	mvn.w	r3, #5
 8019f6a:	e043      	b.n	8019ff4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019f6c:	68fb      	ldr	r3, [r7, #12]
 8019f6e:	681b      	ldr	r3, [r3, #0]
 8019f70:	60fb      	str	r3, [r7, #12]
 8019f72:	68fb      	ldr	r3, [r7, #12]
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	d1ef      	bne.n	8019f5a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8019f7a:	68f8      	ldr	r0, [r7, #12]
 8019f7c:	f7ff fed4 	bl	8019d28 <tcp_output_segment_busy>
 8019f80:	4603      	mov	r3, r0
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d002      	beq.n	8019f8c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8019f86:	f06f 0305 	mvn.w	r3, #5
 8019f8a:	e033      	b.n	8019ff4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8019f90:	68fb      	ldr	r3, [r7, #12]
 8019f92:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	2200      	movs	r2, #0
 8019fa0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	8b5b      	ldrh	r3, [r3, #26]
 8019fa6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8019faa:	b29a      	uxth	r2, r3
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019fb0:	68fb      	ldr	r3, [r7, #12]
 8019fb2:	68db      	ldr	r3, [r3, #12]
 8019fb4:	685b      	ldr	r3, [r3, #4]
 8019fb6:	4618      	mov	r0, r3
 8019fb8:	f7f8 fcb5 	bl	8012926 <lwip_htonl>
 8019fbc:	4604      	mov	r4, r0
 8019fbe:	68fb      	ldr	r3, [r7, #12]
 8019fc0:	891b      	ldrh	r3, [r3, #8]
 8019fc2:	461d      	mov	r5, r3
 8019fc4:	68fb      	ldr	r3, [r7, #12]
 8019fc6:	68db      	ldr	r3, [r3, #12]
 8019fc8:	899b      	ldrh	r3, [r3, #12]
 8019fca:	b29b      	uxth	r3, r3
 8019fcc:	4618      	mov	r0, r3
 8019fce:	f7f8 fc95 	bl	80128fc <lwip_htons>
 8019fd2:	4603      	mov	r3, r0
 8019fd4:	b2db      	uxtb	r3, r3
 8019fd6:	f003 0303 	and.w	r3, r3, #3
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d001      	beq.n	8019fe2 <tcp_rexmit_rto_prepare+0xba>
 8019fde:	2301      	movs	r3, #1
 8019fe0:	e000      	b.n	8019fe4 <tcp_rexmit_rto_prepare+0xbc>
 8019fe2:	2300      	movs	r3, #0
 8019fe4:	442b      	add	r3, r5
 8019fe6:	18e2      	adds	r2, r4, r3
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	2200      	movs	r2, #0
 8019ff0:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8019ff2:	2300      	movs	r3, #0
}
 8019ff4:	4618      	mov	r0, r3
 8019ff6:	3710      	adds	r7, #16
 8019ff8:	46bd      	mov	sp, r7
 8019ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8019ffc:	08025508 	.word	0x08025508
 801a000:	08025b44 	.word	0x08025b44
 801a004:	0802555c 	.word	0x0802555c

0801a008 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801a008:	b580      	push	{r7, lr}
 801a00a:	b082      	sub	sp, #8
 801a00c:	af00      	add	r7, sp, #0
 801a00e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	2b00      	cmp	r3, #0
 801a014:	d106      	bne.n	801a024 <tcp_rexmit_rto_commit+0x1c>
 801a016:	4b0d      	ldr	r3, [pc, #52]	@ (801a04c <tcp_rexmit_rto_commit+0x44>)
 801a018:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801a01c:	490c      	ldr	r1, [pc, #48]	@ (801a050 <tcp_rexmit_rto_commit+0x48>)
 801a01e:	480d      	ldr	r0, [pc, #52]	@ (801a054 <tcp_rexmit_rto_commit+0x4c>)
 801a020:	f006 fcb0 	bl	8020984 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801a02a:	2bff      	cmp	r3, #255	@ 0xff
 801a02c:	d007      	beq.n	801a03e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801a034:	3301      	adds	r3, #1
 801a036:	b2da      	uxtb	r2, r3
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801a03e:	6878      	ldr	r0, [r7, #4]
 801a040:	f7ff fc7e 	bl	8019940 <tcp_output>
}
 801a044:	bf00      	nop
 801a046:	3708      	adds	r7, #8
 801a048:	46bd      	mov	sp, r7
 801a04a:	bd80      	pop	{r7, pc}
 801a04c:	08025508 	.word	0x08025508
 801a050:	08025b68 	.word	0x08025b68
 801a054:	0802555c 	.word	0x0802555c

0801a058 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801a058:	b580      	push	{r7, lr}
 801a05a:	b082      	sub	sp, #8
 801a05c:	af00      	add	r7, sp, #0
 801a05e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	2b00      	cmp	r3, #0
 801a064:	d106      	bne.n	801a074 <tcp_rexmit_rto+0x1c>
 801a066:	4b0a      	ldr	r3, [pc, #40]	@ (801a090 <tcp_rexmit_rto+0x38>)
 801a068:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801a06c:	4909      	ldr	r1, [pc, #36]	@ (801a094 <tcp_rexmit_rto+0x3c>)
 801a06e:	480a      	ldr	r0, [pc, #40]	@ (801a098 <tcp_rexmit_rto+0x40>)
 801a070:	f006 fc88 	bl	8020984 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801a074:	6878      	ldr	r0, [r7, #4]
 801a076:	f7ff ff57 	bl	8019f28 <tcp_rexmit_rto_prepare>
 801a07a:	4603      	mov	r3, r0
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d102      	bne.n	801a086 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801a080:	6878      	ldr	r0, [r7, #4]
 801a082:	f7ff ffc1 	bl	801a008 <tcp_rexmit_rto_commit>
  }
}
 801a086:	bf00      	nop
 801a088:	3708      	adds	r7, #8
 801a08a:	46bd      	mov	sp, r7
 801a08c:	bd80      	pop	{r7, pc}
 801a08e:	bf00      	nop
 801a090:	08025508 	.word	0x08025508
 801a094:	08025b8c 	.word	0x08025b8c
 801a098:	0802555c 	.word	0x0802555c

0801a09c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801a09c:	b590      	push	{r4, r7, lr}
 801a09e:	b085      	sub	sp, #20
 801a0a0:	af00      	add	r7, sp, #0
 801a0a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d106      	bne.n	801a0b8 <tcp_rexmit+0x1c>
 801a0aa:	4b2f      	ldr	r3, [pc, #188]	@ (801a168 <tcp_rexmit+0xcc>)
 801a0ac:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801a0b0:	492e      	ldr	r1, [pc, #184]	@ (801a16c <tcp_rexmit+0xd0>)
 801a0b2:	482f      	ldr	r0, [pc, #188]	@ (801a170 <tcp_rexmit+0xd4>)
 801a0b4:	f006 fc66 	bl	8020984 <iprintf>

  if (pcb->unacked == NULL) {
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d102      	bne.n	801a0c6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801a0c0:	f06f 0305 	mvn.w	r3, #5
 801a0c4:	e04c      	b.n	801a160 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a0ca:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801a0cc:	68b8      	ldr	r0, [r7, #8]
 801a0ce:	f7ff fe2b 	bl	8019d28 <tcp_output_segment_busy>
 801a0d2:	4603      	mov	r3, r0
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d002      	beq.n	801a0de <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801a0d8:	f06f 0305 	mvn.w	r3, #5
 801a0dc:	e040      	b.n	801a160 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801a0de:	68bb      	ldr	r3, [r7, #8]
 801a0e0:	681a      	ldr	r2, [r3, #0]
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801a0e6:	687b      	ldr	r3, [r7, #4]
 801a0e8:	336c      	adds	r3, #108	@ 0x6c
 801a0ea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a0ec:	e002      	b.n	801a0f4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801a0ee:	68fb      	ldr	r3, [r7, #12]
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a0f4:	68fb      	ldr	r3, [r7, #12]
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	d011      	beq.n	801a120 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a0fc:	68fb      	ldr	r3, [r7, #12]
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	68db      	ldr	r3, [r3, #12]
 801a102:	685b      	ldr	r3, [r3, #4]
 801a104:	4618      	mov	r0, r3
 801a106:	f7f8 fc0e 	bl	8012926 <lwip_htonl>
 801a10a:	4604      	mov	r4, r0
 801a10c:	68bb      	ldr	r3, [r7, #8]
 801a10e:	68db      	ldr	r3, [r3, #12]
 801a110:	685b      	ldr	r3, [r3, #4]
 801a112:	4618      	mov	r0, r3
 801a114:	f7f8 fc07 	bl	8012926 <lwip_htonl>
 801a118:	4603      	mov	r3, r0
 801a11a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	dbe6      	blt.n	801a0ee <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	681a      	ldr	r2, [r3, #0]
 801a124:	68bb      	ldr	r3, [r7, #8]
 801a126:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801a128:	68fb      	ldr	r3, [r7, #12]
 801a12a:	68ba      	ldr	r2, [r7, #8]
 801a12c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801a12e:	68bb      	ldr	r3, [r7, #8]
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	2b00      	cmp	r3, #0
 801a134:	d103      	bne.n	801a13e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	2200      	movs	r2, #0
 801a13a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801a144:	2bff      	cmp	r3, #255	@ 0xff
 801a146:	d007      	beq.n	801a158 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801a14e:	3301      	adds	r3, #1
 801a150:	b2da      	uxtb	r2, r3
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	2200      	movs	r2, #0
 801a15c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801a15e:	2300      	movs	r3, #0
}
 801a160:	4618      	mov	r0, r3
 801a162:	3714      	adds	r7, #20
 801a164:	46bd      	mov	sp, r7
 801a166:	bd90      	pop	{r4, r7, pc}
 801a168:	08025508 	.word	0x08025508
 801a16c:	08025ba8 	.word	0x08025ba8
 801a170:	0802555c 	.word	0x0802555c

0801a174 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801a174:	b580      	push	{r7, lr}
 801a176:	b082      	sub	sp, #8
 801a178:	af00      	add	r7, sp, #0
 801a17a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	2b00      	cmp	r3, #0
 801a180:	d106      	bne.n	801a190 <tcp_rexmit_fast+0x1c>
 801a182:	4b2a      	ldr	r3, [pc, #168]	@ (801a22c <tcp_rexmit_fast+0xb8>)
 801a184:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801a188:	4929      	ldr	r1, [pc, #164]	@ (801a230 <tcp_rexmit_fast+0xbc>)
 801a18a:	482a      	ldr	r0, [pc, #168]	@ (801a234 <tcp_rexmit_fast+0xc0>)
 801a18c:	f006 fbfa 	bl	8020984 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a194:	2b00      	cmp	r3, #0
 801a196:	d045      	beq.n	801a224 <tcp_rexmit_fast+0xb0>
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	8b5b      	ldrh	r3, [r3, #26]
 801a19c:	f003 0304 	and.w	r3, r3, #4
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	d13f      	bne.n	801a224 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801a1a4:	6878      	ldr	r0, [r7, #4]
 801a1a6:	f7ff ff79 	bl	801a09c <tcp_rexmit>
 801a1aa:	4603      	mov	r3, r0
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	d139      	bne.n	801a224 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801a1bc:	4293      	cmp	r3, r2
 801a1be:	bf28      	it	cs
 801a1c0:	4613      	movcs	r3, r2
 801a1c2:	b29b      	uxth	r3, r3
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	da00      	bge.n	801a1ca <tcp_rexmit_fast+0x56>
 801a1c8:	3301      	adds	r3, #1
 801a1ca:	105b      	asrs	r3, r3, #1
 801a1cc:	b29a      	uxth	r2, r3
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801a1da:	461a      	mov	r2, r3
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a1e0:	005b      	lsls	r3, r3, #1
 801a1e2:	429a      	cmp	r2, r3
 801a1e4:	d206      	bcs.n	801a1f4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a1ea:	005b      	lsls	r3, r3, #1
 801a1ec:	b29a      	uxth	r2, r3
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a1fe:	4619      	mov	r1, r3
 801a200:	0049      	lsls	r1, r1, #1
 801a202:	440b      	add	r3, r1
 801a204:	b29b      	uxth	r3, r3
 801a206:	4413      	add	r3, r2
 801a208:	b29a      	uxth	r2, r3
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	8b5b      	ldrh	r3, [r3, #26]
 801a214:	f043 0304 	orr.w	r3, r3, #4
 801a218:	b29a      	uxth	r2, r3
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	2200      	movs	r2, #0
 801a222:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801a224:	bf00      	nop
 801a226:	3708      	adds	r7, #8
 801a228:	46bd      	mov	sp, r7
 801a22a:	bd80      	pop	{r7, pc}
 801a22c:	08025508 	.word	0x08025508
 801a230:	08025bc0 	.word	0x08025bc0
 801a234:	0802555c 	.word	0x0802555c

0801a238 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801a238:	b580      	push	{r7, lr}
 801a23a:	b086      	sub	sp, #24
 801a23c:	af00      	add	r7, sp, #0
 801a23e:	60f8      	str	r0, [r7, #12]
 801a240:	607b      	str	r3, [r7, #4]
 801a242:	460b      	mov	r3, r1
 801a244:	817b      	strh	r3, [r7, #10]
 801a246:	4613      	mov	r3, r2
 801a248:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a24a:	897a      	ldrh	r2, [r7, #10]
 801a24c:	893b      	ldrh	r3, [r7, #8]
 801a24e:	4413      	add	r3, r2
 801a250:	b29b      	uxth	r3, r3
 801a252:	3314      	adds	r3, #20
 801a254:	b29b      	uxth	r3, r3
 801a256:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a25a:	4619      	mov	r1, r3
 801a25c:	2022      	movs	r0, #34	@ 0x22
 801a25e:	f7f9 fd1f 	bl	8013ca0 <pbuf_alloc>
 801a262:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801a264:	697b      	ldr	r3, [r7, #20]
 801a266:	2b00      	cmp	r3, #0
 801a268:	d04d      	beq.n	801a306 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a26a:	897b      	ldrh	r3, [r7, #10]
 801a26c:	3313      	adds	r3, #19
 801a26e:	697a      	ldr	r2, [r7, #20]
 801a270:	8952      	ldrh	r2, [r2, #10]
 801a272:	4293      	cmp	r3, r2
 801a274:	db06      	blt.n	801a284 <tcp_output_alloc_header_common+0x4c>
 801a276:	4b26      	ldr	r3, [pc, #152]	@ (801a310 <tcp_output_alloc_header_common+0xd8>)
 801a278:	f240 7223 	movw	r2, #1827	@ 0x723
 801a27c:	4925      	ldr	r1, [pc, #148]	@ (801a314 <tcp_output_alloc_header_common+0xdc>)
 801a27e:	4826      	ldr	r0, [pc, #152]	@ (801a318 <tcp_output_alloc_header_common+0xe0>)
 801a280:	f006 fb80 	bl	8020984 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801a284:	697b      	ldr	r3, [r7, #20]
 801a286:	685b      	ldr	r3, [r3, #4]
 801a288:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801a28a:	8c3b      	ldrh	r3, [r7, #32]
 801a28c:	4618      	mov	r0, r3
 801a28e:	f7f8 fb35 	bl	80128fc <lwip_htons>
 801a292:	4603      	mov	r3, r0
 801a294:	461a      	mov	r2, r3
 801a296:	693b      	ldr	r3, [r7, #16]
 801a298:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801a29a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a29c:	4618      	mov	r0, r3
 801a29e:	f7f8 fb2d 	bl	80128fc <lwip_htons>
 801a2a2:	4603      	mov	r3, r0
 801a2a4:	461a      	mov	r2, r3
 801a2a6:	693b      	ldr	r3, [r7, #16]
 801a2a8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801a2aa:	693b      	ldr	r3, [r7, #16]
 801a2ac:	687a      	ldr	r2, [r7, #4]
 801a2ae:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801a2b0:	68f8      	ldr	r0, [r7, #12]
 801a2b2:	f7f8 fb38 	bl	8012926 <lwip_htonl>
 801a2b6:	4602      	mov	r2, r0
 801a2b8:	693b      	ldr	r3, [r7, #16]
 801a2ba:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801a2bc:	897b      	ldrh	r3, [r7, #10]
 801a2be:	089b      	lsrs	r3, r3, #2
 801a2c0:	b29b      	uxth	r3, r3
 801a2c2:	3305      	adds	r3, #5
 801a2c4:	b29b      	uxth	r3, r3
 801a2c6:	031b      	lsls	r3, r3, #12
 801a2c8:	b29a      	uxth	r2, r3
 801a2ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801a2ce:	b29b      	uxth	r3, r3
 801a2d0:	4313      	orrs	r3, r2
 801a2d2:	b29b      	uxth	r3, r3
 801a2d4:	4618      	mov	r0, r3
 801a2d6:	f7f8 fb11 	bl	80128fc <lwip_htons>
 801a2da:	4603      	mov	r3, r0
 801a2dc:	461a      	mov	r2, r3
 801a2de:	693b      	ldr	r3, [r7, #16]
 801a2e0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801a2e2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801a2e4:	4618      	mov	r0, r3
 801a2e6:	f7f8 fb09 	bl	80128fc <lwip_htons>
 801a2ea:	4603      	mov	r3, r0
 801a2ec:	461a      	mov	r2, r3
 801a2ee:	693b      	ldr	r3, [r7, #16]
 801a2f0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801a2f2:	693b      	ldr	r3, [r7, #16]
 801a2f4:	2200      	movs	r2, #0
 801a2f6:	741a      	strb	r2, [r3, #16]
 801a2f8:	2200      	movs	r2, #0
 801a2fa:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801a2fc:	693b      	ldr	r3, [r7, #16]
 801a2fe:	2200      	movs	r2, #0
 801a300:	749a      	strb	r2, [r3, #18]
 801a302:	2200      	movs	r2, #0
 801a304:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801a306:	697b      	ldr	r3, [r7, #20]
}
 801a308:	4618      	mov	r0, r3
 801a30a:	3718      	adds	r7, #24
 801a30c:	46bd      	mov	sp, r7
 801a30e:	bd80      	pop	{r7, pc}
 801a310:	08025508 	.word	0x08025508
 801a314:	08025be0 	.word	0x08025be0
 801a318:	0802555c 	.word	0x0802555c

0801a31c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801a31c:	b5b0      	push	{r4, r5, r7, lr}
 801a31e:	b08a      	sub	sp, #40	@ 0x28
 801a320:	af04      	add	r7, sp, #16
 801a322:	60f8      	str	r0, [r7, #12]
 801a324:	607b      	str	r3, [r7, #4]
 801a326:	460b      	mov	r3, r1
 801a328:	817b      	strh	r3, [r7, #10]
 801a32a:	4613      	mov	r3, r2
 801a32c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801a32e:	68fb      	ldr	r3, [r7, #12]
 801a330:	2b00      	cmp	r3, #0
 801a332:	d106      	bne.n	801a342 <tcp_output_alloc_header+0x26>
 801a334:	4b15      	ldr	r3, [pc, #84]	@ (801a38c <tcp_output_alloc_header+0x70>)
 801a336:	f240 7242 	movw	r2, #1858	@ 0x742
 801a33a:	4915      	ldr	r1, [pc, #84]	@ (801a390 <tcp_output_alloc_header+0x74>)
 801a33c:	4815      	ldr	r0, [pc, #84]	@ (801a394 <tcp_output_alloc_header+0x78>)
 801a33e:	f006 fb21 	bl	8020984 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801a342:	68fb      	ldr	r3, [r7, #12]
 801a344:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801a346:	68fb      	ldr	r3, [r7, #12]
 801a348:	8adb      	ldrh	r3, [r3, #22]
 801a34a:	68fa      	ldr	r2, [r7, #12]
 801a34c:	8b12      	ldrh	r2, [r2, #24]
 801a34e:	68f9      	ldr	r1, [r7, #12]
 801a350:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801a352:	893d      	ldrh	r5, [r7, #8]
 801a354:	897c      	ldrh	r4, [r7, #10]
 801a356:	9103      	str	r1, [sp, #12]
 801a358:	2110      	movs	r1, #16
 801a35a:	9102      	str	r1, [sp, #8]
 801a35c:	9201      	str	r2, [sp, #4]
 801a35e:	9300      	str	r3, [sp, #0]
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	462a      	mov	r2, r5
 801a364:	4621      	mov	r1, r4
 801a366:	f7ff ff67 	bl	801a238 <tcp_output_alloc_header_common>
 801a36a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801a36c:	697b      	ldr	r3, [r7, #20]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d006      	beq.n	801a380 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a372:	68fb      	ldr	r3, [r7, #12]
 801a374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a376:	68fa      	ldr	r2, [r7, #12]
 801a378:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801a37a:	441a      	add	r2, r3
 801a37c:	68fb      	ldr	r3, [r7, #12]
 801a37e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801a380:	697b      	ldr	r3, [r7, #20]
}
 801a382:	4618      	mov	r0, r3
 801a384:	3718      	adds	r7, #24
 801a386:	46bd      	mov	sp, r7
 801a388:	bdb0      	pop	{r4, r5, r7, pc}
 801a38a:	bf00      	nop
 801a38c:	08025508 	.word	0x08025508
 801a390:	08025c10 	.word	0x08025c10
 801a394:	0802555c 	.word	0x0802555c

0801a398 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801a398:	b580      	push	{r7, lr}
 801a39a:	b088      	sub	sp, #32
 801a39c:	af00      	add	r7, sp, #0
 801a39e:	60f8      	str	r0, [r7, #12]
 801a3a0:	60b9      	str	r1, [r7, #8]
 801a3a2:	4611      	mov	r1, r2
 801a3a4:	461a      	mov	r2, r3
 801a3a6:	460b      	mov	r3, r1
 801a3a8:	71fb      	strb	r3, [r7, #7]
 801a3aa:	4613      	mov	r3, r2
 801a3ac:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801a3ae:	2300      	movs	r3, #0
 801a3b0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801a3b2:	68bb      	ldr	r3, [r7, #8]
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	d106      	bne.n	801a3c6 <tcp_output_fill_options+0x2e>
 801a3b8:	4b12      	ldr	r3, [pc, #72]	@ (801a404 <tcp_output_fill_options+0x6c>)
 801a3ba:	f240 7256 	movw	r2, #1878	@ 0x756
 801a3be:	4912      	ldr	r1, [pc, #72]	@ (801a408 <tcp_output_fill_options+0x70>)
 801a3c0:	4812      	ldr	r0, [pc, #72]	@ (801a40c <tcp_output_fill_options+0x74>)
 801a3c2:	f006 fadf 	bl	8020984 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801a3c6:	68bb      	ldr	r3, [r7, #8]
 801a3c8:	685b      	ldr	r3, [r3, #4]
 801a3ca:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801a3cc:	69bb      	ldr	r3, [r7, #24]
 801a3ce:	3314      	adds	r3, #20
 801a3d0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801a3d2:	8bfb      	ldrh	r3, [r7, #30]
 801a3d4:	009b      	lsls	r3, r3, #2
 801a3d6:	461a      	mov	r2, r3
 801a3d8:	79fb      	ldrb	r3, [r7, #7]
 801a3da:	009b      	lsls	r3, r3, #2
 801a3dc:	f003 0304 	and.w	r3, r3, #4
 801a3e0:	4413      	add	r3, r2
 801a3e2:	3314      	adds	r3, #20
 801a3e4:	69ba      	ldr	r2, [r7, #24]
 801a3e6:	4413      	add	r3, r2
 801a3e8:	697a      	ldr	r2, [r7, #20]
 801a3ea:	429a      	cmp	r2, r3
 801a3ec:	d006      	beq.n	801a3fc <tcp_output_fill_options+0x64>
 801a3ee:	4b05      	ldr	r3, [pc, #20]	@ (801a404 <tcp_output_fill_options+0x6c>)
 801a3f0:	f240 7275 	movw	r2, #1909	@ 0x775
 801a3f4:	4906      	ldr	r1, [pc, #24]	@ (801a410 <tcp_output_fill_options+0x78>)
 801a3f6:	4805      	ldr	r0, [pc, #20]	@ (801a40c <tcp_output_fill_options+0x74>)
 801a3f8:	f006 fac4 	bl	8020984 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801a3fc:	bf00      	nop
 801a3fe:	3720      	adds	r7, #32
 801a400:	46bd      	mov	sp, r7
 801a402:	bd80      	pop	{r7, pc}
 801a404:	08025508 	.word	0x08025508
 801a408:	08025c38 	.word	0x08025c38
 801a40c:	0802555c 	.word	0x0802555c
 801a410:	08025b30 	.word	0x08025b30

0801a414 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801a414:	b580      	push	{r7, lr}
 801a416:	b08a      	sub	sp, #40	@ 0x28
 801a418:	af04      	add	r7, sp, #16
 801a41a:	60f8      	str	r0, [r7, #12]
 801a41c:	60b9      	str	r1, [r7, #8]
 801a41e:	607a      	str	r2, [r7, #4]
 801a420:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801a422:	68bb      	ldr	r3, [r7, #8]
 801a424:	2b00      	cmp	r3, #0
 801a426:	d106      	bne.n	801a436 <tcp_output_control_segment+0x22>
 801a428:	4b1c      	ldr	r3, [pc, #112]	@ (801a49c <tcp_output_control_segment+0x88>)
 801a42a:	f240 7287 	movw	r2, #1927	@ 0x787
 801a42e:	491c      	ldr	r1, [pc, #112]	@ (801a4a0 <tcp_output_control_segment+0x8c>)
 801a430:	481c      	ldr	r0, [pc, #112]	@ (801a4a4 <tcp_output_control_segment+0x90>)
 801a432:	f006 faa7 	bl	8020984 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801a436:	683a      	ldr	r2, [r7, #0]
 801a438:	6879      	ldr	r1, [r7, #4]
 801a43a:	68f8      	ldr	r0, [r7, #12]
 801a43c:	f7fe faea 	bl	8018a14 <tcp_route>
 801a440:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801a442:	693b      	ldr	r3, [r7, #16]
 801a444:	2b00      	cmp	r3, #0
 801a446:	d102      	bne.n	801a44e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801a448:	23fc      	movs	r3, #252	@ 0xfc
 801a44a:	75fb      	strb	r3, [r7, #23]
 801a44c:	e01c      	b.n	801a488 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801a44e:	68fb      	ldr	r3, [r7, #12]
 801a450:	2b00      	cmp	r3, #0
 801a452:	d006      	beq.n	801a462 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801a454:	68fb      	ldr	r3, [r7, #12]
 801a456:	7adb      	ldrb	r3, [r3, #11]
 801a458:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801a45a:	68fb      	ldr	r3, [r7, #12]
 801a45c:	7a9b      	ldrb	r3, [r3, #10]
 801a45e:	757b      	strb	r3, [r7, #21]
 801a460:	e003      	b.n	801a46a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801a462:	23ff      	movs	r3, #255	@ 0xff
 801a464:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801a466:	2300      	movs	r3, #0
 801a468:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a46a:	7dba      	ldrb	r2, [r7, #22]
 801a46c:	693b      	ldr	r3, [r7, #16]
 801a46e:	9302      	str	r3, [sp, #8]
 801a470:	2306      	movs	r3, #6
 801a472:	9301      	str	r3, [sp, #4]
 801a474:	7d7b      	ldrb	r3, [r7, #21]
 801a476:	9300      	str	r3, [sp, #0]
 801a478:	4613      	mov	r3, r2
 801a47a:	683a      	ldr	r2, [r7, #0]
 801a47c:	6879      	ldr	r1, [r7, #4]
 801a47e:	68b8      	ldr	r0, [r7, #8]
 801a480:	f004 fa3c 	bl	801e8fc <ip4_output_if>
 801a484:	4603      	mov	r3, r0
 801a486:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801a488:	68b8      	ldr	r0, [r7, #8]
 801a48a:	f7f9 feed 	bl	8014268 <pbuf_free>
  return err;
 801a48e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a492:	4618      	mov	r0, r3
 801a494:	3718      	adds	r7, #24
 801a496:	46bd      	mov	sp, r7
 801a498:	bd80      	pop	{r7, pc}
 801a49a:	bf00      	nop
 801a49c:	08025508 	.word	0x08025508
 801a4a0:	08025c60 	.word	0x08025c60
 801a4a4:	0802555c 	.word	0x0802555c

0801a4a8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801a4a8:	b590      	push	{r4, r7, lr}
 801a4aa:	b08b      	sub	sp, #44	@ 0x2c
 801a4ac:	af04      	add	r7, sp, #16
 801a4ae:	60f8      	str	r0, [r7, #12]
 801a4b0:	60b9      	str	r1, [r7, #8]
 801a4b2:	607a      	str	r2, [r7, #4]
 801a4b4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801a4b6:	683b      	ldr	r3, [r7, #0]
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d106      	bne.n	801a4ca <tcp_rst+0x22>
 801a4bc:	4b1f      	ldr	r3, [pc, #124]	@ (801a53c <tcp_rst+0x94>)
 801a4be:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801a4c2:	491f      	ldr	r1, [pc, #124]	@ (801a540 <tcp_rst+0x98>)
 801a4c4:	481f      	ldr	r0, [pc, #124]	@ (801a544 <tcp_rst+0x9c>)
 801a4c6:	f006 fa5d 	bl	8020984 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801a4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d106      	bne.n	801a4de <tcp_rst+0x36>
 801a4d0:	4b1a      	ldr	r3, [pc, #104]	@ (801a53c <tcp_rst+0x94>)
 801a4d2:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801a4d6:	491c      	ldr	r1, [pc, #112]	@ (801a548 <tcp_rst+0xa0>)
 801a4d8:	481a      	ldr	r0, [pc, #104]	@ (801a544 <tcp_rst+0x9c>)
 801a4da:	f006 fa53 	bl	8020984 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a4de:	2300      	movs	r3, #0
 801a4e0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801a4e2:	f246 0308 	movw	r3, #24584	@ 0x6008
 801a4e6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801a4e8:	7dfb      	ldrb	r3, [r7, #23]
 801a4ea:	b29c      	uxth	r4, r3
 801a4ec:	68b8      	ldr	r0, [r7, #8]
 801a4ee:	f7f8 fa1a 	bl	8012926 <lwip_htonl>
 801a4f2:	4602      	mov	r2, r0
 801a4f4:	8abb      	ldrh	r3, [r7, #20]
 801a4f6:	9303      	str	r3, [sp, #12]
 801a4f8:	2314      	movs	r3, #20
 801a4fa:	9302      	str	r3, [sp, #8]
 801a4fc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801a4fe:	9301      	str	r3, [sp, #4]
 801a500:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801a502:	9300      	str	r3, [sp, #0]
 801a504:	4613      	mov	r3, r2
 801a506:	2200      	movs	r2, #0
 801a508:	4621      	mov	r1, r4
 801a50a:	6878      	ldr	r0, [r7, #4]
 801a50c:	f7ff fe94 	bl	801a238 <tcp_output_alloc_header_common>
 801a510:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801a512:	693b      	ldr	r3, [r7, #16]
 801a514:	2b00      	cmp	r3, #0
 801a516:	d00c      	beq.n	801a532 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a518:	7dfb      	ldrb	r3, [r7, #23]
 801a51a:	2200      	movs	r2, #0
 801a51c:	6939      	ldr	r1, [r7, #16]
 801a51e:	68f8      	ldr	r0, [r7, #12]
 801a520:	f7ff ff3a 	bl	801a398 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801a524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a526:	683a      	ldr	r2, [r7, #0]
 801a528:	6939      	ldr	r1, [r7, #16]
 801a52a:	68f8      	ldr	r0, [r7, #12]
 801a52c:	f7ff ff72 	bl	801a414 <tcp_output_control_segment>
 801a530:	e000      	b.n	801a534 <tcp_rst+0x8c>
    return;
 801a532:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801a534:	371c      	adds	r7, #28
 801a536:	46bd      	mov	sp, r7
 801a538:	bd90      	pop	{r4, r7, pc}
 801a53a:	bf00      	nop
 801a53c:	08025508 	.word	0x08025508
 801a540:	08025c8c 	.word	0x08025c8c
 801a544:	0802555c 	.word	0x0802555c
 801a548:	08025ca8 	.word	0x08025ca8

0801a54c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801a54c:	b590      	push	{r4, r7, lr}
 801a54e:	b087      	sub	sp, #28
 801a550:	af00      	add	r7, sp, #0
 801a552:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801a554:	2300      	movs	r3, #0
 801a556:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801a558:	2300      	movs	r3, #0
 801a55a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	2b00      	cmp	r3, #0
 801a560:	d106      	bne.n	801a570 <tcp_send_empty_ack+0x24>
 801a562:	4b28      	ldr	r3, [pc, #160]	@ (801a604 <tcp_send_empty_ack+0xb8>)
 801a564:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801a568:	4927      	ldr	r1, [pc, #156]	@ (801a608 <tcp_send_empty_ack+0xbc>)
 801a56a:	4828      	ldr	r0, [pc, #160]	@ (801a60c <tcp_send_empty_ack+0xc0>)
 801a56c:	f006 fa0a 	bl	8020984 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a570:	7dfb      	ldrb	r3, [r7, #23]
 801a572:	009b      	lsls	r3, r3, #2
 801a574:	b2db      	uxtb	r3, r3
 801a576:	f003 0304 	and.w	r3, r3, #4
 801a57a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801a57c:	7d7b      	ldrb	r3, [r7, #21]
 801a57e:	b29c      	uxth	r4, r3
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a584:	4618      	mov	r0, r3
 801a586:	f7f8 f9ce 	bl	8012926 <lwip_htonl>
 801a58a:	4603      	mov	r3, r0
 801a58c:	2200      	movs	r2, #0
 801a58e:	4621      	mov	r1, r4
 801a590:	6878      	ldr	r0, [r7, #4]
 801a592:	f7ff fec3 	bl	801a31c <tcp_output_alloc_header>
 801a596:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a598:	693b      	ldr	r3, [r7, #16]
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d109      	bne.n	801a5b2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	8b5b      	ldrh	r3, [r3, #26]
 801a5a2:	f043 0303 	orr.w	r3, r3, #3
 801a5a6:	b29a      	uxth	r2, r3
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801a5ac:	f06f 0301 	mvn.w	r3, #1
 801a5b0:	e023      	b.n	801a5fa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801a5b2:	7dbb      	ldrb	r3, [r7, #22]
 801a5b4:	7dfa      	ldrb	r2, [r7, #23]
 801a5b6:	6939      	ldr	r1, [r7, #16]
 801a5b8:	6878      	ldr	r0, [r7, #4]
 801a5ba:	f7ff feed 	bl	801a398 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a5be:	687a      	ldr	r2, [r7, #4]
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	3304      	adds	r3, #4
 801a5c4:	6939      	ldr	r1, [r7, #16]
 801a5c6:	6878      	ldr	r0, [r7, #4]
 801a5c8:	f7ff ff24 	bl	801a414 <tcp_output_control_segment>
 801a5cc:	4603      	mov	r3, r0
 801a5ce:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801a5d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d007      	beq.n	801a5e8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	8b5b      	ldrh	r3, [r3, #26]
 801a5dc:	f043 0303 	orr.w	r3, r3, #3
 801a5e0:	b29a      	uxth	r2, r3
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	835a      	strh	r2, [r3, #26]
 801a5e6:	e006      	b.n	801a5f6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	8b5b      	ldrh	r3, [r3, #26]
 801a5ec:	f023 0303 	bic.w	r3, r3, #3
 801a5f0:	b29a      	uxth	r2, r3
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801a5f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a5fa:	4618      	mov	r0, r3
 801a5fc:	371c      	adds	r7, #28
 801a5fe:	46bd      	mov	sp, r7
 801a600:	bd90      	pop	{r4, r7, pc}
 801a602:	bf00      	nop
 801a604:	08025508 	.word	0x08025508
 801a608:	08025cc4 	.word	0x08025cc4
 801a60c:	0802555c 	.word	0x0802555c

0801a610 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801a610:	b590      	push	{r4, r7, lr}
 801a612:	b087      	sub	sp, #28
 801a614:	af00      	add	r7, sp, #0
 801a616:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a618:	2300      	movs	r3, #0
 801a61a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d106      	bne.n	801a630 <tcp_keepalive+0x20>
 801a622:	4b18      	ldr	r3, [pc, #96]	@ (801a684 <tcp_keepalive+0x74>)
 801a624:	f640 0224 	movw	r2, #2084	@ 0x824
 801a628:	4917      	ldr	r1, [pc, #92]	@ (801a688 <tcp_keepalive+0x78>)
 801a62a:	4818      	ldr	r0, [pc, #96]	@ (801a68c <tcp_keepalive+0x7c>)
 801a62c:	f006 f9aa 	bl	8020984 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801a630:	7dfb      	ldrb	r3, [r7, #23]
 801a632:	b29c      	uxth	r4, r3
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a638:	3b01      	subs	r3, #1
 801a63a:	4618      	mov	r0, r3
 801a63c:	f7f8 f973 	bl	8012926 <lwip_htonl>
 801a640:	4603      	mov	r3, r0
 801a642:	2200      	movs	r2, #0
 801a644:	4621      	mov	r1, r4
 801a646:	6878      	ldr	r0, [r7, #4]
 801a648:	f7ff fe68 	bl	801a31c <tcp_output_alloc_header>
 801a64c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a64e:	693b      	ldr	r3, [r7, #16]
 801a650:	2b00      	cmp	r3, #0
 801a652:	d102      	bne.n	801a65a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801a654:	f04f 33ff 	mov.w	r3, #4294967295
 801a658:	e010      	b.n	801a67c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a65a:	7dfb      	ldrb	r3, [r7, #23]
 801a65c:	2200      	movs	r2, #0
 801a65e:	6939      	ldr	r1, [r7, #16]
 801a660:	6878      	ldr	r0, [r7, #4]
 801a662:	f7ff fe99 	bl	801a398 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a666:	687a      	ldr	r2, [r7, #4]
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	3304      	adds	r3, #4
 801a66c:	6939      	ldr	r1, [r7, #16]
 801a66e:	6878      	ldr	r0, [r7, #4]
 801a670:	f7ff fed0 	bl	801a414 <tcp_output_control_segment>
 801a674:	4603      	mov	r3, r0
 801a676:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a678:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a67c:	4618      	mov	r0, r3
 801a67e:	371c      	adds	r7, #28
 801a680:	46bd      	mov	sp, r7
 801a682:	bd90      	pop	{r4, r7, pc}
 801a684:	08025508 	.word	0x08025508
 801a688:	08025ce4 	.word	0x08025ce4
 801a68c:	0802555c 	.word	0x0802555c

0801a690 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801a690:	b590      	push	{r4, r7, lr}
 801a692:	b08b      	sub	sp, #44	@ 0x2c
 801a694:	af00      	add	r7, sp, #0
 801a696:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a698:	2300      	movs	r3, #0
 801a69a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	d106      	bne.n	801a6b2 <tcp_zero_window_probe+0x22>
 801a6a4:	4b4c      	ldr	r3, [pc, #304]	@ (801a7d8 <tcp_zero_window_probe+0x148>)
 801a6a6:	f640 024f 	movw	r2, #2127	@ 0x84f
 801a6aa:	494c      	ldr	r1, [pc, #304]	@ (801a7dc <tcp_zero_window_probe+0x14c>)
 801a6ac:	484c      	ldr	r0, [pc, #304]	@ (801a7e0 <tcp_zero_window_probe+0x150>)
 801a6ae:	f006 f969 	bl	8020984 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a6b6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801a6b8:	6a3b      	ldr	r3, [r7, #32]
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	d101      	bne.n	801a6c2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801a6be:	2300      	movs	r3, #0
 801a6c0:	e086      	b.n	801a7d0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801a6c2:	687b      	ldr	r3, [r7, #4]
 801a6c4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801a6c8:	2bff      	cmp	r3, #255	@ 0xff
 801a6ca:	d007      	beq.n	801a6dc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801a6d2:	3301      	adds	r3, #1
 801a6d4:	b2da      	uxtb	r2, r3
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801a6dc:	6a3b      	ldr	r3, [r7, #32]
 801a6de:	68db      	ldr	r3, [r3, #12]
 801a6e0:	899b      	ldrh	r3, [r3, #12]
 801a6e2:	b29b      	uxth	r3, r3
 801a6e4:	4618      	mov	r0, r3
 801a6e6:	f7f8 f909 	bl	80128fc <lwip_htons>
 801a6ea:	4603      	mov	r3, r0
 801a6ec:	b2db      	uxtb	r3, r3
 801a6ee:	f003 0301 	and.w	r3, r3, #1
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d005      	beq.n	801a702 <tcp_zero_window_probe+0x72>
 801a6f6:	6a3b      	ldr	r3, [r7, #32]
 801a6f8:	891b      	ldrh	r3, [r3, #8]
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	d101      	bne.n	801a702 <tcp_zero_window_probe+0x72>
 801a6fe:	2301      	movs	r3, #1
 801a700:	e000      	b.n	801a704 <tcp_zero_window_probe+0x74>
 801a702:	2300      	movs	r3, #0
 801a704:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801a706:	7ffb      	ldrb	r3, [r7, #31]
 801a708:	2b00      	cmp	r3, #0
 801a70a:	bf0c      	ite	eq
 801a70c:	2301      	moveq	r3, #1
 801a70e:	2300      	movne	r3, #0
 801a710:	b2db      	uxtb	r3, r3
 801a712:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801a714:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a718:	b299      	uxth	r1, r3
 801a71a:	6a3b      	ldr	r3, [r7, #32]
 801a71c:	68db      	ldr	r3, [r3, #12]
 801a71e:	685b      	ldr	r3, [r3, #4]
 801a720:	8bba      	ldrh	r2, [r7, #28]
 801a722:	6878      	ldr	r0, [r7, #4]
 801a724:	f7ff fdfa 	bl	801a31c <tcp_output_alloc_header>
 801a728:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801a72a:	69bb      	ldr	r3, [r7, #24]
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d102      	bne.n	801a736 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801a730:	f04f 33ff 	mov.w	r3, #4294967295
 801a734:	e04c      	b.n	801a7d0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801a736:	69bb      	ldr	r3, [r7, #24]
 801a738:	685b      	ldr	r3, [r3, #4]
 801a73a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801a73c:	7ffb      	ldrb	r3, [r7, #31]
 801a73e:	2b00      	cmp	r3, #0
 801a740:	d011      	beq.n	801a766 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801a742:	697b      	ldr	r3, [r7, #20]
 801a744:	899b      	ldrh	r3, [r3, #12]
 801a746:	b29b      	uxth	r3, r3
 801a748:	b21b      	sxth	r3, r3
 801a74a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801a74e:	b21c      	sxth	r4, r3
 801a750:	2011      	movs	r0, #17
 801a752:	f7f8 f8d3 	bl	80128fc <lwip_htons>
 801a756:	4603      	mov	r3, r0
 801a758:	b21b      	sxth	r3, r3
 801a75a:	4323      	orrs	r3, r4
 801a75c:	b21b      	sxth	r3, r3
 801a75e:	b29a      	uxth	r2, r3
 801a760:	697b      	ldr	r3, [r7, #20]
 801a762:	819a      	strh	r2, [r3, #12]
 801a764:	e010      	b.n	801a788 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801a766:	69bb      	ldr	r3, [r7, #24]
 801a768:	685b      	ldr	r3, [r3, #4]
 801a76a:	3314      	adds	r3, #20
 801a76c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801a76e:	6a3b      	ldr	r3, [r7, #32]
 801a770:	6858      	ldr	r0, [r3, #4]
 801a772:	6a3b      	ldr	r3, [r7, #32]
 801a774:	685b      	ldr	r3, [r3, #4]
 801a776:	891a      	ldrh	r2, [r3, #8]
 801a778:	6a3b      	ldr	r3, [r7, #32]
 801a77a:	891b      	ldrh	r3, [r3, #8]
 801a77c:	1ad3      	subs	r3, r2, r3
 801a77e:	b29b      	uxth	r3, r3
 801a780:	2201      	movs	r2, #1
 801a782:	6939      	ldr	r1, [r7, #16]
 801a784:	f7f9 ff76 	bl	8014674 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801a788:	6a3b      	ldr	r3, [r7, #32]
 801a78a:	68db      	ldr	r3, [r3, #12]
 801a78c:	685b      	ldr	r3, [r3, #4]
 801a78e:	4618      	mov	r0, r3
 801a790:	f7f8 f8c9 	bl	8012926 <lwip_htonl>
 801a794:	4603      	mov	r3, r0
 801a796:	3301      	adds	r3, #1
 801a798:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a79e:	68fb      	ldr	r3, [r7, #12]
 801a7a0:	1ad3      	subs	r3, r2, r3
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	da02      	bge.n	801a7ac <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	68fa      	ldr	r2, [r7, #12]
 801a7aa:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a7ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a7b0:	2200      	movs	r2, #0
 801a7b2:	69b9      	ldr	r1, [r7, #24]
 801a7b4:	6878      	ldr	r0, [r7, #4]
 801a7b6:	f7ff fdef 	bl	801a398 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a7ba:	687a      	ldr	r2, [r7, #4]
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	3304      	adds	r3, #4
 801a7c0:	69b9      	ldr	r1, [r7, #24]
 801a7c2:	6878      	ldr	r0, [r7, #4]
 801a7c4:	f7ff fe26 	bl	801a414 <tcp_output_control_segment>
 801a7c8:	4603      	mov	r3, r0
 801a7ca:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a7cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801a7d0:	4618      	mov	r0, r3
 801a7d2:	372c      	adds	r7, #44	@ 0x2c
 801a7d4:	46bd      	mov	sp, r7
 801a7d6:	bd90      	pop	{r4, r7, pc}
 801a7d8:	08025508 	.word	0x08025508
 801a7dc:	08025d00 	.word	0x08025d00
 801a7e0:	0802555c 	.word	0x0802555c

0801a7e4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801a7e4:	b580      	push	{r7, lr}
 801a7e6:	b082      	sub	sp, #8
 801a7e8:	af00      	add	r7, sp, #0
 801a7ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801a7ec:	f7fa f830 	bl	8014850 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801a7f0:	4b0a      	ldr	r3, [pc, #40]	@ (801a81c <tcpip_tcp_timer+0x38>)
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d103      	bne.n	801a800 <tcpip_tcp_timer+0x1c>
 801a7f8:	4b09      	ldr	r3, [pc, #36]	@ (801a820 <tcpip_tcp_timer+0x3c>)
 801a7fa:	681b      	ldr	r3, [r3, #0]
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	d005      	beq.n	801a80c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a800:	2200      	movs	r2, #0
 801a802:	4908      	ldr	r1, [pc, #32]	@ (801a824 <tcpip_tcp_timer+0x40>)
 801a804:	20fa      	movs	r0, #250	@ 0xfa
 801a806:	f000 f8f3 	bl	801a9f0 <sys_timeout>
 801a80a:	e003      	b.n	801a814 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801a80c:	4b06      	ldr	r3, [pc, #24]	@ (801a828 <tcpip_tcp_timer+0x44>)
 801a80e:	2200      	movs	r2, #0
 801a810:	601a      	str	r2, [r3, #0]
  }
}
 801a812:	bf00      	nop
 801a814:	bf00      	nop
 801a816:	3708      	adds	r7, #8
 801a818:	46bd      	mov	sp, r7
 801a81a:	bd80      	pop	{r7, pc}
 801a81c:	2400cb08 	.word	0x2400cb08
 801a820:	2400cb0c 	.word	0x2400cb0c
 801a824:	0801a7e5 	.word	0x0801a7e5
 801a828:	2400cb54 	.word	0x2400cb54

0801a82c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801a82c:	b580      	push	{r7, lr}
 801a82e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801a830:	4b0a      	ldr	r3, [pc, #40]	@ (801a85c <tcp_timer_needed+0x30>)
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	2b00      	cmp	r3, #0
 801a836:	d10f      	bne.n	801a858 <tcp_timer_needed+0x2c>
 801a838:	4b09      	ldr	r3, [pc, #36]	@ (801a860 <tcp_timer_needed+0x34>)
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d103      	bne.n	801a848 <tcp_timer_needed+0x1c>
 801a840:	4b08      	ldr	r3, [pc, #32]	@ (801a864 <tcp_timer_needed+0x38>)
 801a842:	681b      	ldr	r3, [r3, #0]
 801a844:	2b00      	cmp	r3, #0
 801a846:	d007      	beq.n	801a858 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801a848:	4b04      	ldr	r3, [pc, #16]	@ (801a85c <tcp_timer_needed+0x30>)
 801a84a:	2201      	movs	r2, #1
 801a84c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a84e:	2200      	movs	r2, #0
 801a850:	4905      	ldr	r1, [pc, #20]	@ (801a868 <tcp_timer_needed+0x3c>)
 801a852:	20fa      	movs	r0, #250	@ 0xfa
 801a854:	f000 f8cc 	bl	801a9f0 <sys_timeout>
  }
}
 801a858:	bf00      	nop
 801a85a:	bd80      	pop	{r7, pc}
 801a85c:	2400cb54 	.word	0x2400cb54
 801a860:	2400cb08 	.word	0x2400cb08
 801a864:	2400cb0c 	.word	0x2400cb0c
 801a868:	0801a7e5 	.word	0x0801a7e5

0801a86c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801a86c:	b580      	push	{r7, lr}
 801a86e:	b086      	sub	sp, #24
 801a870:	af00      	add	r7, sp, #0
 801a872:	60f8      	str	r0, [r7, #12]
 801a874:	60b9      	str	r1, [r7, #8]
 801a876:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801a878:	200a      	movs	r0, #10
 801a87a:	f7f8 fdcf 	bl	801341c <memp_malloc>
 801a87e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801a880:	693b      	ldr	r3, [r7, #16]
 801a882:	2b00      	cmp	r3, #0
 801a884:	d109      	bne.n	801a89a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801a886:	693b      	ldr	r3, [r7, #16]
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d151      	bne.n	801a930 <sys_timeout_abs+0xc4>
 801a88c:	4b2a      	ldr	r3, [pc, #168]	@ (801a938 <sys_timeout_abs+0xcc>)
 801a88e:	22be      	movs	r2, #190	@ 0xbe
 801a890:	492a      	ldr	r1, [pc, #168]	@ (801a93c <sys_timeout_abs+0xd0>)
 801a892:	482b      	ldr	r0, [pc, #172]	@ (801a940 <sys_timeout_abs+0xd4>)
 801a894:	f006 f876 	bl	8020984 <iprintf>
    return;
 801a898:	e04a      	b.n	801a930 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801a89a:	693b      	ldr	r3, [r7, #16]
 801a89c:	2200      	movs	r2, #0
 801a89e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801a8a0:	693b      	ldr	r3, [r7, #16]
 801a8a2:	68ba      	ldr	r2, [r7, #8]
 801a8a4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801a8a6:	693b      	ldr	r3, [r7, #16]
 801a8a8:	687a      	ldr	r2, [r7, #4]
 801a8aa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801a8ac:	693b      	ldr	r3, [r7, #16]
 801a8ae:	68fa      	ldr	r2, [r7, #12]
 801a8b0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801a8b2:	4b24      	ldr	r3, [pc, #144]	@ (801a944 <sys_timeout_abs+0xd8>)
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	d103      	bne.n	801a8c2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801a8ba:	4a22      	ldr	r2, [pc, #136]	@ (801a944 <sys_timeout_abs+0xd8>)
 801a8bc:	693b      	ldr	r3, [r7, #16]
 801a8be:	6013      	str	r3, [r2, #0]
    return;
 801a8c0:	e037      	b.n	801a932 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801a8c2:	693b      	ldr	r3, [r7, #16]
 801a8c4:	685a      	ldr	r2, [r3, #4]
 801a8c6:	4b1f      	ldr	r3, [pc, #124]	@ (801a944 <sys_timeout_abs+0xd8>)
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	685b      	ldr	r3, [r3, #4]
 801a8cc:	1ad3      	subs	r3, r2, r3
 801a8ce:	0fdb      	lsrs	r3, r3, #31
 801a8d0:	f003 0301 	and.w	r3, r3, #1
 801a8d4:	b2db      	uxtb	r3, r3
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d007      	beq.n	801a8ea <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801a8da:	4b1a      	ldr	r3, [pc, #104]	@ (801a944 <sys_timeout_abs+0xd8>)
 801a8dc:	681a      	ldr	r2, [r3, #0]
 801a8de:	693b      	ldr	r3, [r7, #16]
 801a8e0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801a8e2:	4a18      	ldr	r2, [pc, #96]	@ (801a944 <sys_timeout_abs+0xd8>)
 801a8e4:	693b      	ldr	r3, [r7, #16]
 801a8e6:	6013      	str	r3, [r2, #0]
 801a8e8:	e023      	b.n	801a932 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801a8ea:	4b16      	ldr	r3, [pc, #88]	@ (801a944 <sys_timeout_abs+0xd8>)
 801a8ec:	681b      	ldr	r3, [r3, #0]
 801a8ee:	617b      	str	r3, [r7, #20]
 801a8f0:	e01a      	b.n	801a928 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801a8f2:	697b      	ldr	r3, [r7, #20]
 801a8f4:	681b      	ldr	r3, [r3, #0]
 801a8f6:	2b00      	cmp	r3, #0
 801a8f8:	d00b      	beq.n	801a912 <sys_timeout_abs+0xa6>
 801a8fa:	693b      	ldr	r3, [r7, #16]
 801a8fc:	685a      	ldr	r2, [r3, #4]
 801a8fe:	697b      	ldr	r3, [r7, #20]
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	685b      	ldr	r3, [r3, #4]
 801a904:	1ad3      	subs	r3, r2, r3
 801a906:	0fdb      	lsrs	r3, r3, #31
 801a908:	f003 0301 	and.w	r3, r3, #1
 801a90c:	b2db      	uxtb	r3, r3
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d007      	beq.n	801a922 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801a912:	697b      	ldr	r3, [r7, #20]
 801a914:	681a      	ldr	r2, [r3, #0]
 801a916:	693b      	ldr	r3, [r7, #16]
 801a918:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801a91a:	697b      	ldr	r3, [r7, #20]
 801a91c:	693a      	ldr	r2, [r7, #16]
 801a91e:	601a      	str	r2, [r3, #0]
        break;
 801a920:	e007      	b.n	801a932 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801a922:	697b      	ldr	r3, [r7, #20]
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	617b      	str	r3, [r7, #20]
 801a928:	697b      	ldr	r3, [r7, #20]
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	d1e1      	bne.n	801a8f2 <sys_timeout_abs+0x86>
 801a92e:	e000      	b.n	801a932 <sys_timeout_abs+0xc6>
    return;
 801a930:	bf00      	nop
      }
    }
  }
}
 801a932:	3718      	adds	r7, #24
 801a934:	46bd      	mov	sp, r7
 801a936:	bd80      	pop	{r7, pc}
 801a938:	08025d24 	.word	0x08025d24
 801a93c:	08025d58 	.word	0x08025d58
 801a940:	08025d98 	.word	0x08025d98
 801a944:	2400cb4c 	.word	0x2400cb4c

0801a948 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801a948:	b580      	push	{r7, lr}
 801a94a:	b086      	sub	sp, #24
 801a94c:	af00      	add	r7, sp, #0
 801a94e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801a954:	697b      	ldr	r3, [r7, #20]
 801a956:	685b      	ldr	r3, [r3, #4]
 801a958:	4798      	blx	r3

  now = sys_now();
 801a95a:	f7f1 f96b 	bl	800bc34 <sys_now>
 801a95e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801a960:	697b      	ldr	r3, [r7, #20]
 801a962:	681a      	ldr	r2, [r3, #0]
 801a964:	4b0f      	ldr	r3, [pc, #60]	@ (801a9a4 <lwip_cyclic_timer+0x5c>)
 801a966:	681b      	ldr	r3, [r3, #0]
 801a968:	4413      	add	r3, r2
 801a96a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801a96c:	68fa      	ldr	r2, [r7, #12]
 801a96e:	693b      	ldr	r3, [r7, #16]
 801a970:	1ad3      	subs	r3, r2, r3
 801a972:	0fdb      	lsrs	r3, r3, #31
 801a974:	f003 0301 	and.w	r3, r3, #1
 801a978:	b2db      	uxtb	r3, r3
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	d009      	beq.n	801a992 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801a97e:	697b      	ldr	r3, [r7, #20]
 801a980:	681a      	ldr	r2, [r3, #0]
 801a982:	693b      	ldr	r3, [r7, #16]
 801a984:	4413      	add	r3, r2
 801a986:	687a      	ldr	r2, [r7, #4]
 801a988:	4907      	ldr	r1, [pc, #28]	@ (801a9a8 <lwip_cyclic_timer+0x60>)
 801a98a:	4618      	mov	r0, r3
 801a98c:	f7ff ff6e 	bl	801a86c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801a990:	e004      	b.n	801a99c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801a992:	687a      	ldr	r2, [r7, #4]
 801a994:	4904      	ldr	r1, [pc, #16]	@ (801a9a8 <lwip_cyclic_timer+0x60>)
 801a996:	68f8      	ldr	r0, [r7, #12]
 801a998:	f7ff ff68 	bl	801a86c <sys_timeout_abs>
}
 801a99c:	bf00      	nop
 801a99e:	3718      	adds	r7, #24
 801a9a0:	46bd      	mov	sp, r7
 801a9a2:	bd80      	pop	{r7, pc}
 801a9a4:	2400cb50 	.word	0x2400cb50
 801a9a8:	0801a949 	.word	0x0801a949

0801a9ac <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801a9ac:	b580      	push	{r7, lr}
 801a9ae:	b082      	sub	sp, #8
 801a9b0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a9b2:	2301      	movs	r3, #1
 801a9b4:	607b      	str	r3, [r7, #4]
 801a9b6:	e00e      	b.n	801a9d6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801a9b8:	4a0b      	ldr	r2, [pc, #44]	@ (801a9e8 <sys_timeouts_init+0x3c>)
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	00db      	lsls	r3, r3, #3
 801a9c4:	4a08      	ldr	r2, [pc, #32]	@ (801a9e8 <sys_timeouts_init+0x3c>)
 801a9c6:	4413      	add	r3, r2
 801a9c8:	461a      	mov	r2, r3
 801a9ca:	4908      	ldr	r1, [pc, #32]	@ (801a9ec <sys_timeouts_init+0x40>)
 801a9cc:	f000 f810 	bl	801a9f0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	3301      	adds	r3, #1
 801a9d4:	607b      	str	r3, [r7, #4]
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	2b04      	cmp	r3, #4
 801a9da:	d9ed      	bls.n	801a9b8 <sys_timeouts_init+0xc>
  }
}
 801a9dc:	bf00      	nop
 801a9de:	bf00      	nop
 801a9e0:	3708      	adds	r7, #8
 801a9e2:	46bd      	mov	sp, r7
 801a9e4:	bd80      	pop	{r7, pc}
 801a9e6:	bf00      	nop
 801a9e8:	08026e34 	.word	0x08026e34
 801a9ec:	0801a949 	.word	0x0801a949

0801a9f0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801a9f0:	b580      	push	{r7, lr}
 801a9f2:	b086      	sub	sp, #24
 801a9f4:	af00      	add	r7, sp, #0
 801a9f6:	60f8      	str	r0, [r7, #12]
 801a9f8:	60b9      	str	r1, [r7, #8]
 801a9fa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801a9fc:	68fb      	ldr	r3, [r7, #12]
 801a9fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801aa02:	d306      	bcc.n	801aa12 <sys_timeout+0x22>
 801aa04:	4b0a      	ldr	r3, [pc, #40]	@ (801aa30 <sys_timeout+0x40>)
 801aa06:	f240 1229 	movw	r2, #297	@ 0x129
 801aa0a:	490a      	ldr	r1, [pc, #40]	@ (801aa34 <sys_timeout+0x44>)
 801aa0c:	480a      	ldr	r0, [pc, #40]	@ (801aa38 <sys_timeout+0x48>)
 801aa0e:	f005 ffb9 	bl	8020984 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801aa12:	f7f1 f90f 	bl	800bc34 <sys_now>
 801aa16:	4602      	mov	r2, r0
 801aa18:	68fb      	ldr	r3, [r7, #12]
 801aa1a:	4413      	add	r3, r2
 801aa1c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801aa1e:	687a      	ldr	r2, [r7, #4]
 801aa20:	68b9      	ldr	r1, [r7, #8]
 801aa22:	6978      	ldr	r0, [r7, #20]
 801aa24:	f7ff ff22 	bl	801a86c <sys_timeout_abs>
#endif
}
 801aa28:	bf00      	nop
 801aa2a:	3718      	adds	r7, #24
 801aa2c:	46bd      	mov	sp, r7
 801aa2e:	bd80      	pop	{r7, pc}
 801aa30:	08025d24 	.word	0x08025d24
 801aa34:	08025dc0 	.word	0x08025dc0
 801aa38:	08025d98 	.word	0x08025d98

0801aa3c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801aa3c:	b580      	push	{r7, lr}
 801aa3e:	b084      	sub	sp, #16
 801aa40:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801aa42:	f7f1 f8f7 	bl	800bc34 <sys_now>
 801aa46:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801aa48:	4b17      	ldr	r3, [pc, #92]	@ (801aaa8 <sys_check_timeouts+0x6c>)
 801aa4a:	681b      	ldr	r3, [r3, #0]
 801aa4c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801aa4e:	68bb      	ldr	r3, [r7, #8]
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d022      	beq.n	801aa9a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801aa54:	68bb      	ldr	r3, [r7, #8]
 801aa56:	685b      	ldr	r3, [r3, #4]
 801aa58:	68fa      	ldr	r2, [r7, #12]
 801aa5a:	1ad3      	subs	r3, r2, r3
 801aa5c:	0fdb      	lsrs	r3, r3, #31
 801aa5e:	f003 0301 	and.w	r3, r3, #1
 801aa62:	b2db      	uxtb	r3, r3
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	d11a      	bne.n	801aa9e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801aa68:	68bb      	ldr	r3, [r7, #8]
 801aa6a:	681b      	ldr	r3, [r3, #0]
 801aa6c:	4a0e      	ldr	r2, [pc, #56]	@ (801aaa8 <sys_check_timeouts+0x6c>)
 801aa6e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801aa70:	68bb      	ldr	r3, [r7, #8]
 801aa72:	689b      	ldr	r3, [r3, #8]
 801aa74:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801aa76:	68bb      	ldr	r3, [r7, #8]
 801aa78:	68db      	ldr	r3, [r3, #12]
 801aa7a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801aa7c:	68bb      	ldr	r3, [r7, #8]
 801aa7e:	685b      	ldr	r3, [r3, #4]
 801aa80:	4a0a      	ldr	r2, [pc, #40]	@ (801aaac <sys_check_timeouts+0x70>)
 801aa82:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801aa84:	68b9      	ldr	r1, [r7, #8]
 801aa86:	200a      	movs	r0, #10
 801aa88:	f7f8 fd3e 	bl	8013508 <memp_free>
    if (handler != NULL) {
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	d0da      	beq.n	801aa48 <sys_check_timeouts+0xc>
      handler(arg);
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	6838      	ldr	r0, [r7, #0]
 801aa96:	4798      	blx	r3
  do {
 801aa98:	e7d6      	b.n	801aa48 <sys_check_timeouts+0xc>
      return;
 801aa9a:	bf00      	nop
 801aa9c:	e000      	b.n	801aaa0 <sys_check_timeouts+0x64>
      return;
 801aa9e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801aaa0:	3710      	adds	r7, #16
 801aaa2:	46bd      	mov	sp, r7
 801aaa4:	bd80      	pop	{r7, pc}
 801aaa6:	bf00      	nop
 801aaa8:	2400cb4c 	.word	0x2400cb4c
 801aaac:	2400cb50 	.word	0x2400cb50

0801aab0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801aab0:	b580      	push	{r7, lr}
 801aab2:	b082      	sub	sp, #8
 801aab4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801aab6:	4b16      	ldr	r3, [pc, #88]	@ (801ab10 <sys_timeouts_sleeptime+0x60>)
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	d102      	bne.n	801aac4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801aabe:	f04f 33ff 	mov.w	r3, #4294967295
 801aac2:	e020      	b.n	801ab06 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801aac4:	f7f1 f8b6 	bl	800bc34 <sys_now>
 801aac8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801aaca:	4b11      	ldr	r3, [pc, #68]	@ (801ab10 <sys_timeouts_sleeptime+0x60>)
 801aacc:	681b      	ldr	r3, [r3, #0]
 801aace:	685a      	ldr	r2, [r3, #4]
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	1ad3      	subs	r3, r2, r3
 801aad4:	0fdb      	lsrs	r3, r3, #31
 801aad6:	f003 0301 	and.w	r3, r3, #1
 801aada:	b2db      	uxtb	r3, r3
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d001      	beq.n	801aae4 <sys_timeouts_sleeptime+0x34>
    return 0;
 801aae0:	2300      	movs	r3, #0
 801aae2:	e010      	b.n	801ab06 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801aae4:	4b0a      	ldr	r3, [pc, #40]	@ (801ab10 <sys_timeouts_sleeptime+0x60>)
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	685a      	ldr	r2, [r3, #4]
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	1ad3      	subs	r3, r2, r3
 801aaee:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801aaf0:	683b      	ldr	r3, [r7, #0]
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	da06      	bge.n	801ab04 <sys_timeouts_sleeptime+0x54>
 801aaf6:	4b07      	ldr	r3, [pc, #28]	@ (801ab14 <sys_timeouts_sleeptime+0x64>)
 801aaf8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801aafc:	4906      	ldr	r1, [pc, #24]	@ (801ab18 <sys_timeouts_sleeptime+0x68>)
 801aafe:	4807      	ldr	r0, [pc, #28]	@ (801ab1c <sys_timeouts_sleeptime+0x6c>)
 801ab00:	f005 ff40 	bl	8020984 <iprintf>
    return ret;
 801ab04:	683b      	ldr	r3, [r7, #0]
  }
}
 801ab06:	4618      	mov	r0, r3
 801ab08:	3708      	adds	r7, #8
 801ab0a:	46bd      	mov	sp, r7
 801ab0c:	bd80      	pop	{r7, pc}
 801ab0e:	bf00      	nop
 801ab10:	2400cb4c 	.word	0x2400cb4c
 801ab14:	08025d24 	.word	0x08025d24
 801ab18:	08025df8 	.word	0x08025df8
 801ab1c:	08025d98 	.word	0x08025d98

0801ab20 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801ab20:	b580      	push	{r7, lr}
 801ab22:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801ab24:	f005 f9f8 	bl	801ff18 <rand>
 801ab28:	4603      	mov	r3, r0
 801ab2a:	b29b      	uxth	r3, r3
 801ab2c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ab30:	b29b      	uxth	r3, r3
 801ab32:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801ab36:	b29a      	uxth	r2, r3
 801ab38:	4b01      	ldr	r3, [pc, #4]	@ (801ab40 <udp_init+0x20>)
 801ab3a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801ab3c:	bf00      	nop
 801ab3e:	bd80      	pop	{r7, pc}
 801ab40:	24000030 	.word	0x24000030

0801ab44 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801ab44:	b480      	push	{r7}
 801ab46:	b083      	sub	sp, #12
 801ab48:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801ab4a:	2300      	movs	r3, #0
 801ab4c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801ab4e:	4b17      	ldr	r3, [pc, #92]	@ (801abac <udp_new_port+0x68>)
 801ab50:	881b      	ldrh	r3, [r3, #0]
 801ab52:	1c5a      	adds	r2, r3, #1
 801ab54:	b291      	uxth	r1, r2
 801ab56:	4a15      	ldr	r2, [pc, #84]	@ (801abac <udp_new_port+0x68>)
 801ab58:	8011      	strh	r1, [r2, #0]
 801ab5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ab5e:	4293      	cmp	r3, r2
 801ab60:	d103      	bne.n	801ab6a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801ab62:	4b12      	ldr	r3, [pc, #72]	@ (801abac <udp_new_port+0x68>)
 801ab64:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801ab68:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ab6a:	4b11      	ldr	r3, [pc, #68]	@ (801abb0 <udp_new_port+0x6c>)
 801ab6c:	681b      	ldr	r3, [r3, #0]
 801ab6e:	603b      	str	r3, [r7, #0]
 801ab70:	e011      	b.n	801ab96 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801ab72:	683b      	ldr	r3, [r7, #0]
 801ab74:	8a5a      	ldrh	r2, [r3, #18]
 801ab76:	4b0d      	ldr	r3, [pc, #52]	@ (801abac <udp_new_port+0x68>)
 801ab78:	881b      	ldrh	r3, [r3, #0]
 801ab7a:	429a      	cmp	r2, r3
 801ab7c:	d108      	bne.n	801ab90 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801ab7e:	88fb      	ldrh	r3, [r7, #6]
 801ab80:	3301      	adds	r3, #1
 801ab82:	80fb      	strh	r3, [r7, #6]
 801ab84:	88fb      	ldrh	r3, [r7, #6]
 801ab86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ab8a:	d3e0      	bcc.n	801ab4e <udp_new_port+0xa>
        return 0;
 801ab8c:	2300      	movs	r3, #0
 801ab8e:	e007      	b.n	801aba0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ab90:	683b      	ldr	r3, [r7, #0]
 801ab92:	68db      	ldr	r3, [r3, #12]
 801ab94:	603b      	str	r3, [r7, #0]
 801ab96:	683b      	ldr	r3, [r7, #0]
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d1ea      	bne.n	801ab72 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801ab9c:	4b03      	ldr	r3, [pc, #12]	@ (801abac <udp_new_port+0x68>)
 801ab9e:	881b      	ldrh	r3, [r3, #0]
}
 801aba0:	4618      	mov	r0, r3
 801aba2:	370c      	adds	r7, #12
 801aba4:	46bd      	mov	sp, r7
 801aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abaa:	4770      	bx	lr
 801abac:	24000030 	.word	0x24000030
 801abb0:	2400cb58 	.word	0x2400cb58

0801abb4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801abb4:	b580      	push	{r7, lr}
 801abb6:	b084      	sub	sp, #16
 801abb8:	af00      	add	r7, sp, #0
 801abba:	60f8      	str	r0, [r7, #12]
 801abbc:	60b9      	str	r1, [r7, #8]
 801abbe:	4613      	mov	r3, r2
 801abc0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801abc2:	68fb      	ldr	r3, [r7, #12]
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d105      	bne.n	801abd4 <udp_input_local_match+0x20>
 801abc8:	4b27      	ldr	r3, [pc, #156]	@ (801ac68 <udp_input_local_match+0xb4>)
 801abca:	2287      	movs	r2, #135	@ 0x87
 801abcc:	4927      	ldr	r1, [pc, #156]	@ (801ac6c <udp_input_local_match+0xb8>)
 801abce:	4828      	ldr	r0, [pc, #160]	@ (801ac70 <udp_input_local_match+0xbc>)
 801abd0:	f005 fed8 	bl	8020984 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801abd4:	68bb      	ldr	r3, [r7, #8]
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	d105      	bne.n	801abe6 <udp_input_local_match+0x32>
 801abda:	4b23      	ldr	r3, [pc, #140]	@ (801ac68 <udp_input_local_match+0xb4>)
 801abdc:	2288      	movs	r2, #136	@ 0x88
 801abde:	4925      	ldr	r1, [pc, #148]	@ (801ac74 <udp_input_local_match+0xc0>)
 801abe0:	4823      	ldr	r0, [pc, #140]	@ (801ac70 <udp_input_local_match+0xbc>)
 801abe2:	f005 fecf 	bl	8020984 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801abe6:	68fb      	ldr	r3, [r7, #12]
 801abe8:	7a1b      	ldrb	r3, [r3, #8]
 801abea:	2b00      	cmp	r3, #0
 801abec:	d00b      	beq.n	801ac06 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801abee:	68fb      	ldr	r3, [r7, #12]
 801abf0:	7a1a      	ldrb	r2, [r3, #8]
 801abf2:	4b21      	ldr	r3, [pc, #132]	@ (801ac78 <udp_input_local_match+0xc4>)
 801abf4:	685b      	ldr	r3, [r3, #4]
 801abf6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801abfa:	3301      	adds	r3, #1
 801abfc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801abfe:	429a      	cmp	r2, r3
 801ac00:	d001      	beq.n	801ac06 <udp_input_local_match+0x52>
    return 0;
 801ac02:	2300      	movs	r3, #0
 801ac04:	e02b      	b.n	801ac5e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801ac06:	79fb      	ldrb	r3, [r7, #7]
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	d018      	beq.n	801ac3e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ac0c:	68fb      	ldr	r3, [r7, #12]
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	d013      	beq.n	801ac3a <udp_input_local_match+0x86>
 801ac12:	68fb      	ldr	r3, [r7, #12]
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d00f      	beq.n	801ac3a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ac1a:	4b17      	ldr	r3, [pc, #92]	@ (801ac78 <udp_input_local_match+0xc4>)
 801ac1c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ac1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ac22:	d00a      	beq.n	801ac3a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801ac24:	68fb      	ldr	r3, [r7, #12]
 801ac26:	681a      	ldr	r2, [r3, #0]
 801ac28:	4b13      	ldr	r3, [pc, #76]	@ (801ac78 <udp_input_local_match+0xc4>)
 801ac2a:	695b      	ldr	r3, [r3, #20]
 801ac2c:	405a      	eors	r2, r3
 801ac2e:	68bb      	ldr	r3, [r7, #8]
 801ac30:	3308      	adds	r3, #8
 801ac32:	681b      	ldr	r3, [r3, #0]
 801ac34:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	d110      	bne.n	801ac5c <udp_input_local_match+0xa8>
          return 1;
 801ac3a:	2301      	movs	r3, #1
 801ac3c:	e00f      	b.n	801ac5e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801ac3e:	68fb      	ldr	r3, [r7, #12]
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	d009      	beq.n	801ac58 <udp_input_local_match+0xa4>
 801ac44:	68fb      	ldr	r3, [r7, #12]
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	d005      	beq.n	801ac58 <udp_input_local_match+0xa4>
 801ac4c:	68fb      	ldr	r3, [r7, #12]
 801ac4e:	681a      	ldr	r2, [r3, #0]
 801ac50:	4b09      	ldr	r3, [pc, #36]	@ (801ac78 <udp_input_local_match+0xc4>)
 801ac52:	695b      	ldr	r3, [r3, #20]
 801ac54:	429a      	cmp	r2, r3
 801ac56:	d101      	bne.n	801ac5c <udp_input_local_match+0xa8>
        return 1;
 801ac58:	2301      	movs	r3, #1
 801ac5a:	e000      	b.n	801ac5e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801ac5c:	2300      	movs	r3, #0
}
 801ac5e:	4618      	mov	r0, r3
 801ac60:	3710      	adds	r7, #16
 801ac62:	46bd      	mov	sp, r7
 801ac64:	bd80      	pop	{r7, pc}
 801ac66:	bf00      	nop
 801ac68:	08025e0c 	.word	0x08025e0c
 801ac6c:	08025e3c 	.word	0x08025e3c
 801ac70:	08025e60 	.word	0x08025e60
 801ac74:	08025e88 	.word	0x08025e88
 801ac78:	240099dc 	.word	0x240099dc

0801ac7c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801ac7c:	b590      	push	{r4, r7, lr}
 801ac7e:	b08d      	sub	sp, #52	@ 0x34
 801ac80:	af02      	add	r7, sp, #8
 801ac82:	6078      	str	r0, [r7, #4]
 801ac84:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801ac86:	2300      	movs	r3, #0
 801ac88:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d105      	bne.n	801ac9c <udp_input+0x20>
 801ac90:	4b7c      	ldr	r3, [pc, #496]	@ (801ae84 <udp_input+0x208>)
 801ac92:	22cf      	movs	r2, #207	@ 0xcf
 801ac94:	497c      	ldr	r1, [pc, #496]	@ (801ae88 <udp_input+0x20c>)
 801ac96:	487d      	ldr	r0, [pc, #500]	@ (801ae8c <udp_input+0x210>)
 801ac98:	f005 fe74 	bl	8020984 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801ac9c:	683b      	ldr	r3, [r7, #0]
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	d105      	bne.n	801acae <udp_input+0x32>
 801aca2:	4b78      	ldr	r3, [pc, #480]	@ (801ae84 <udp_input+0x208>)
 801aca4:	22d0      	movs	r2, #208	@ 0xd0
 801aca6:	497a      	ldr	r1, [pc, #488]	@ (801ae90 <udp_input+0x214>)
 801aca8:	4878      	ldr	r0, [pc, #480]	@ (801ae8c <udp_input+0x210>)
 801acaa:	f005 fe6b 	bl	8020984 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	895b      	ldrh	r3, [r3, #10]
 801acb2:	2b07      	cmp	r3, #7
 801acb4:	d803      	bhi.n	801acbe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801acb6:	6878      	ldr	r0, [r7, #4]
 801acb8:	f7f9 fad6 	bl	8014268 <pbuf_free>
    goto end;
 801acbc:	e0de      	b.n	801ae7c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	685b      	ldr	r3, [r3, #4]
 801acc2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801acc4:	4b73      	ldr	r3, [pc, #460]	@ (801ae94 <udp_input+0x218>)
 801acc6:	695b      	ldr	r3, [r3, #20]
 801acc8:	4a72      	ldr	r2, [pc, #456]	@ (801ae94 <udp_input+0x218>)
 801acca:	6812      	ldr	r2, [r2, #0]
 801accc:	4611      	mov	r1, r2
 801acce:	4618      	mov	r0, r3
 801acd0:	f003 feec 	bl	801eaac <ip4_addr_isbroadcast_u32>
 801acd4:	4603      	mov	r3, r0
 801acd6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801acd8:	697b      	ldr	r3, [r7, #20]
 801acda:	881b      	ldrh	r3, [r3, #0]
 801acdc:	b29b      	uxth	r3, r3
 801acde:	4618      	mov	r0, r3
 801ace0:	f7f7 fe0c 	bl	80128fc <lwip_htons>
 801ace4:	4603      	mov	r3, r0
 801ace6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801ace8:	697b      	ldr	r3, [r7, #20]
 801acea:	885b      	ldrh	r3, [r3, #2]
 801acec:	b29b      	uxth	r3, r3
 801acee:	4618      	mov	r0, r3
 801acf0:	f7f7 fe04 	bl	80128fc <lwip_htons>
 801acf4:	4603      	mov	r3, r0
 801acf6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801acf8:	2300      	movs	r3, #0
 801acfa:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801acfc:	2300      	movs	r3, #0
 801acfe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801ad00:	2300      	movs	r3, #0
 801ad02:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ad04:	4b64      	ldr	r3, [pc, #400]	@ (801ae98 <udp_input+0x21c>)
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	627b      	str	r3, [r7, #36]	@ 0x24
 801ad0a:	e054      	b.n	801adb6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801ad0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad0e:	8a5b      	ldrh	r3, [r3, #18]
 801ad10:	89fa      	ldrh	r2, [r7, #14]
 801ad12:	429a      	cmp	r2, r3
 801ad14:	d14a      	bne.n	801adac <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801ad16:	7cfb      	ldrb	r3, [r7, #19]
 801ad18:	461a      	mov	r2, r3
 801ad1a:	6839      	ldr	r1, [r7, #0]
 801ad1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ad1e:	f7ff ff49 	bl	801abb4 <udp_input_local_match>
 801ad22:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801ad24:	2b00      	cmp	r3, #0
 801ad26:	d041      	beq.n	801adac <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801ad28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad2a:	7c1b      	ldrb	r3, [r3, #16]
 801ad2c:	f003 0304 	and.w	r3, r3, #4
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d11d      	bne.n	801ad70 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801ad34:	69fb      	ldr	r3, [r7, #28]
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d102      	bne.n	801ad40 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801ad3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad3c:	61fb      	str	r3, [r7, #28]
 801ad3e:	e017      	b.n	801ad70 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801ad40:	7cfb      	ldrb	r3, [r7, #19]
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d014      	beq.n	801ad70 <udp_input+0xf4>
 801ad46:	4b53      	ldr	r3, [pc, #332]	@ (801ae94 <udp_input+0x218>)
 801ad48:	695b      	ldr	r3, [r3, #20]
 801ad4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad4e:	d10f      	bne.n	801ad70 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801ad50:	69fb      	ldr	r3, [r7, #28]
 801ad52:	681a      	ldr	r2, [r3, #0]
 801ad54:	683b      	ldr	r3, [r7, #0]
 801ad56:	3304      	adds	r3, #4
 801ad58:	681b      	ldr	r3, [r3, #0]
 801ad5a:	429a      	cmp	r2, r3
 801ad5c:	d008      	beq.n	801ad70 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801ad5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad60:	681a      	ldr	r2, [r3, #0]
 801ad62:	683b      	ldr	r3, [r7, #0]
 801ad64:	3304      	adds	r3, #4
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	429a      	cmp	r2, r3
 801ad6a:	d101      	bne.n	801ad70 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801ad6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad6e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801ad70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad72:	8a9b      	ldrh	r3, [r3, #20]
 801ad74:	8a3a      	ldrh	r2, [r7, #16]
 801ad76:	429a      	cmp	r2, r3
 801ad78:	d118      	bne.n	801adac <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801ad7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad7c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801ad7e:	2b00      	cmp	r3, #0
 801ad80:	d005      	beq.n	801ad8e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801ad82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad84:	685a      	ldr	r2, [r3, #4]
 801ad86:	4b43      	ldr	r3, [pc, #268]	@ (801ae94 <udp_input+0x218>)
 801ad88:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801ad8a:	429a      	cmp	r2, r3
 801ad8c:	d10e      	bne.n	801adac <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801ad8e:	6a3b      	ldr	r3, [r7, #32]
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	d014      	beq.n	801adbe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801ad94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad96:	68da      	ldr	r2, [r3, #12]
 801ad98:	6a3b      	ldr	r3, [r7, #32]
 801ad9a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801ad9c:	4b3e      	ldr	r3, [pc, #248]	@ (801ae98 <udp_input+0x21c>)
 801ad9e:	681a      	ldr	r2, [r3, #0]
 801ada0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ada2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801ada4:	4a3c      	ldr	r2, [pc, #240]	@ (801ae98 <udp_input+0x21c>)
 801ada6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ada8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801adaa:	e008      	b.n	801adbe <udp_input+0x142>
      }
    }

    prev = pcb;
 801adac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801adae:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801adb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801adb2:	68db      	ldr	r3, [r3, #12]
 801adb4:	627b      	str	r3, [r7, #36]	@ 0x24
 801adb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d1a7      	bne.n	801ad0c <udp_input+0x90>
 801adbc:	e000      	b.n	801adc0 <udp_input+0x144>
        break;
 801adbe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801adc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	d101      	bne.n	801adca <udp_input+0x14e>
    pcb = uncon_pcb;
 801adc6:	69fb      	ldr	r3, [r7, #28]
 801adc8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801adca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801adcc:	2b00      	cmp	r3, #0
 801adce:	d002      	beq.n	801add6 <udp_input+0x15a>
    for_us = 1;
 801add0:	2301      	movs	r3, #1
 801add2:	76fb      	strb	r3, [r7, #27]
 801add4:	e00a      	b.n	801adec <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801add6:	683b      	ldr	r3, [r7, #0]
 801add8:	3304      	adds	r3, #4
 801adda:	681a      	ldr	r2, [r3, #0]
 801addc:	4b2d      	ldr	r3, [pc, #180]	@ (801ae94 <udp_input+0x218>)
 801adde:	695b      	ldr	r3, [r3, #20]
 801ade0:	429a      	cmp	r2, r3
 801ade2:	bf0c      	ite	eq
 801ade4:	2301      	moveq	r3, #1
 801ade6:	2300      	movne	r3, #0
 801ade8:	b2db      	uxtb	r3, r3
 801adea:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801adec:	7efb      	ldrb	r3, [r7, #27]
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d041      	beq.n	801ae76 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801adf2:	2108      	movs	r1, #8
 801adf4:	6878      	ldr	r0, [r7, #4]
 801adf6:	f7f9 f9b1 	bl	801415c <pbuf_remove_header>
 801adfa:	4603      	mov	r3, r0
 801adfc:	2b00      	cmp	r3, #0
 801adfe:	d00a      	beq.n	801ae16 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801ae00:	4b20      	ldr	r3, [pc, #128]	@ (801ae84 <udp_input+0x208>)
 801ae02:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801ae06:	4925      	ldr	r1, [pc, #148]	@ (801ae9c <udp_input+0x220>)
 801ae08:	4820      	ldr	r0, [pc, #128]	@ (801ae8c <udp_input+0x210>)
 801ae0a:	f005 fdbb 	bl	8020984 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801ae0e:	6878      	ldr	r0, [r7, #4]
 801ae10:	f7f9 fa2a 	bl	8014268 <pbuf_free>
      goto end;
 801ae14:	e032      	b.n	801ae7c <udp_input+0x200>
    }

    if (pcb != NULL) {
 801ae16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	d012      	beq.n	801ae42 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801ae1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae1e:	699b      	ldr	r3, [r3, #24]
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d00a      	beq.n	801ae3a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801ae24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae26:	699c      	ldr	r4, [r3, #24]
 801ae28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae2a:	69d8      	ldr	r0, [r3, #28]
 801ae2c:	8a3b      	ldrh	r3, [r7, #16]
 801ae2e:	9300      	str	r3, [sp, #0]
 801ae30:	4b1b      	ldr	r3, [pc, #108]	@ (801aea0 <udp_input+0x224>)
 801ae32:	687a      	ldr	r2, [r7, #4]
 801ae34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ae36:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801ae38:	e021      	b.n	801ae7e <udp_input+0x202>
        pbuf_free(p);
 801ae3a:	6878      	ldr	r0, [r7, #4]
 801ae3c:	f7f9 fa14 	bl	8014268 <pbuf_free>
        goto end;
 801ae40:	e01c      	b.n	801ae7c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801ae42:	7cfb      	ldrb	r3, [r7, #19]
 801ae44:	2b00      	cmp	r3, #0
 801ae46:	d112      	bne.n	801ae6e <udp_input+0x1f2>
 801ae48:	4b12      	ldr	r3, [pc, #72]	@ (801ae94 <udp_input+0x218>)
 801ae4a:	695b      	ldr	r3, [r3, #20]
 801ae4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ae50:	2be0      	cmp	r3, #224	@ 0xe0
 801ae52:	d00c      	beq.n	801ae6e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801ae54:	4b0f      	ldr	r3, [pc, #60]	@ (801ae94 <udp_input+0x218>)
 801ae56:	899b      	ldrh	r3, [r3, #12]
 801ae58:	3308      	adds	r3, #8
 801ae5a:	b29b      	uxth	r3, r3
 801ae5c:	b21b      	sxth	r3, r3
 801ae5e:	4619      	mov	r1, r3
 801ae60:	6878      	ldr	r0, [r7, #4]
 801ae62:	f7f9 f9ee 	bl	8014242 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801ae66:	2103      	movs	r1, #3
 801ae68:	6878      	ldr	r0, [r7, #4]
 801ae6a:	f003 fad7 	bl	801e41c <icmp_dest_unreach>
      pbuf_free(p);
 801ae6e:	6878      	ldr	r0, [r7, #4]
 801ae70:	f7f9 f9fa 	bl	8014268 <pbuf_free>
  return;
 801ae74:	e003      	b.n	801ae7e <udp_input+0x202>
    pbuf_free(p);
 801ae76:	6878      	ldr	r0, [r7, #4]
 801ae78:	f7f9 f9f6 	bl	8014268 <pbuf_free>
  return;
 801ae7c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801ae7e:	372c      	adds	r7, #44	@ 0x2c
 801ae80:	46bd      	mov	sp, r7
 801ae82:	bd90      	pop	{r4, r7, pc}
 801ae84:	08025e0c 	.word	0x08025e0c
 801ae88:	08025eb0 	.word	0x08025eb0
 801ae8c:	08025e60 	.word	0x08025e60
 801ae90:	08025ec8 	.word	0x08025ec8
 801ae94:	240099dc 	.word	0x240099dc
 801ae98:	2400cb58 	.word	0x2400cb58
 801ae9c:	08025ee4 	.word	0x08025ee4
 801aea0:	240099ec 	.word	0x240099ec

0801aea4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801aea4:	b580      	push	{r7, lr}
 801aea6:	b082      	sub	sp, #8
 801aea8:	af00      	add	r7, sp, #0
 801aeaa:	6078      	str	r0, [r7, #4]
 801aeac:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	2b00      	cmp	r3, #0
 801aeb2:	d109      	bne.n	801aec8 <udp_send+0x24>
 801aeb4:	4b11      	ldr	r3, [pc, #68]	@ (801aefc <udp_send+0x58>)
 801aeb6:	f240 12d5 	movw	r2, #469	@ 0x1d5
 801aeba:	4911      	ldr	r1, [pc, #68]	@ (801af00 <udp_send+0x5c>)
 801aebc:	4811      	ldr	r0, [pc, #68]	@ (801af04 <udp_send+0x60>)
 801aebe:	f005 fd61 	bl	8020984 <iprintf>
 801aec2:	f06f 030f 	mvn.w	r3, #15
 801aec6:	e015      	b.n	801aef4 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801aec8:	683b      	ldr	r3, [r7, #0]
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	d109      	bne.n	801aee2 <udp_send+0x3e>
 801aece:	4b0b      	ldr	r3, [pc, #44]	@ (801aefc <udp_send+0x58>)
 801aed0:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 801aed4:	490c      	ldr	r1, [pc, #48]	@ (801af08 <udp_send+0x64>)
 801aed6:	480b      	ldr	r0, [pc, #44]	@ (801af04 <udp_send+0x60>)
 801aed8:	f005 fd54 	bl	8020984 <iprintf>
 801aedc:	f06f 030f 	mvn.w	r3, #15
 801aee0:	e008      	b.n	801aef4 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	1d1a      	adds	r2, r3, #4
 801aee6:	687b      	ldr	r3, [r7, #4]
 801aee8:	8a9b      	ldrh	r3, [r3, #20]
 801aeea:	6839      	ldr	r1, [r7, #0]
 801aeec:	6878      	ldr	r0, [r7, #4]
 801aeee:	f000 f80d 	bl	801af0c <udp_sendto>
 801aef2:	4603      	mov	r3, r0
}
 801aef4:	4618      	mov	r0, r3
 801aef6:	3708      	adds	r7, #8
 801aef8:	46bd      	mov	sp, r7
 801aefa:	bd80      	pop	{r7, pc}
 801aefc:	08025e0c 	.word	0x08025e0c
 801af00:	08025f00 	.word	0x08025f00
 801af04:	08025e60 	.word	0x08025e60
 801af08:	08025f18 	.word	0x08025f18

0801af0c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801af0c:	b580      	push	{r7, lr}
 801af0e:	b088      	sub	sp, #32
 801af10:	af02      	add	r7, sp, #8
 801af12:	60f8      	str	r0, [r7, #12]
 801af14:	60b9      	str	r1, [r7, #8]
 801af16:	607a      	str	r2, [r7, #4]
 801af18:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801af1a:	68fb      	ldr	r3, [r7, #12]
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	d109      	bne.n	801af34 <udp_sendto+0x28>
 801af20:	4b23      	ldr	r3, [pc, #140]	@ (801afb0 <udp_sendto+0xa4>)
 801af22:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801af26:	4923      	ldr	r1, [pc, #140]	@ (801afb4 <udp_sendto+0xa8>)
 801af28:	4823      	ldr	r0, [pc, #140]	@ (801afb8 <udp_sendto+0xac>)
 801af2a:	f005 fd2b 	bl	8020984 <iprintf>
 801af2e:	f06f 030f 	mvn.w	r3, #15
 801af32:	e038      	b.n	801afa6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801af34:	68bb      	ldr	r3, [r7, #8]
 801af36:	2b00      	cmp	r3, #0
 801af38:	d109      	bne.n	801af4e <udp_sendto+0x42>
 801af3a:	4b1d      	ldr	r3, [pc, #116]	@ (801afb0 <udp_sendto+0xa4>)
 801af3c:	f240 2219 	movw	r2, #537	@ 0x219
 801af40:	491e      	ldr	r1, [pc, #120]	@ (801afbc <udp_sendto+0xb0>)
 801af42:	481d      	ldr	r0, [pc, #116]	@ (801afb8 <udp_sendto+0xac>)
 801af44:	f005 fd1e 	bl	8020984 <iprintf>
 801af48:	f06f 030f 	mvn.w	r3, #15
 801af4c:	e02b      	b.n	801afa6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	2b00      	cmp	r3, #0
 801af52:	d109      	bne.n	801af68 <udp_sendto+0x5c>
 801af54:	4b16      	ldr	r3, [pc, #88]	@ (801afb0 <udp_sendto+0xa4>)
 801af56:	f240 221a 	movw	r2, #538	@ 0x21a
 801af5a:	4919      	ldr	r1, [pc, #100]	@ (801afc0 <udp_sendto+0xb4>)
 801af5c:	4816      	ldr	r0, [pc, #88]	@ (801afb8 <udp_sendto+0xac>)
 801af5e:	f005 fd11 	bl	8020984 <iprintf>
 801af62:	f06f 030f 	mvn.w	r3, #15
 801af66:	e01e      	b.n	801afa6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801af68:	68fb      	ldr	r3, [r7, #12]
 801af6a:	7a1b      	ldrb	r3, [r3, #8]
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	d006      	beq.n	801af7e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801af70:	68fb      	ldr	r3, [r7, #12]
 801af72:	7a1b      	ldrb	r3, [r3, #8]
 801af74:	4618      	mov	r0, r3
 801af76:	f7f8 fde9 	bl	8013b4c <netif_get_by_index>
 801af7a:	6178      	str	r0, [r7, #20]
 801af7c:	e003      	b.n	801af86 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801af7e:	6878      	ldr	r0, [r7, #4]
 801af80:	f003 fae0 	bl	801e544 <ip4_route>
 801af84:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801af86:	697b      	ldr	r3, [r7, #20]
 801af88:	2b00      	cmp	r3, #0
 801af8a:	d102      	bne.n	801af92 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801af8c:	f06f 0303 	mvn.w	r3, #3
 801af90:	e009      	b.n	801afa6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801af92:	887a      	ldrh	r2, [r7, #2]
 801af94:	697b      	ldr	r3, [r7, #20]
 801af96:	9300      	str	r3, [sp, #0]
 801af98:	4613      	mov	r3, r2
 801af9a:	687a      	ldr	r2, [r7, #4]
 801af9c:	68b9      	ldr	r1, [r7, #8]
 801af9e:	68f8      	ldr	r0, [r7, #12]
 801afa0:	f000 f810 	bl	801afc4 <udp_sendto_if>
 801afa4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801afa6:	4618      	mov	r0, r3
 801afa8:	3718      	adds	r7, #24
 801afaa:	46bd      	mov	sp, r7
 801afac:	bd80      	pop	{r7, pc}
 801afae:	bf00      	nop
 801afb0:	08025e0c 	.word	0x08025e0c
 801afb4:	08025f30 	.word	0x08025f30
 801afb8:	08025e60 	.word	0x08025e60
 801afbc:	08025f48 	.word	0x08025f48
 801afc0:	08025f64 	.word	0x08025f64

0801afc4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801afc4:	b580      	push	{r7, lr}
 801afc6:	b088      	sub	sp, #32
 801afc8:	af02      	add	r7, sp, #8
 801afca:	60f8      	str	r0, [r7, #12]
 801afcc:	60b9      	str	r1, [r7, #8]
 801afce:	607a      	str	r2, [r7, #4]
 801afd0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801afd2:	68fb      	ldr	r3, [r7, #12]
 801afd4:	2b00      	cmp	r3, #0
 801afd6:	d109      	bne.n	801afec <udp_sendto_if+0x28>
 801afd8:	4b2e      	ldr	r3, [pc, #184]	@ (801b094 <udp_sendto_if+0xd0>)
 801afda:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801afde:	492e      	ldr	r1, [pc, #184]	@ (801b098 <udp_sendto_if+0xd4>)
 801afe0:	482e      	ldr	r0, [pc, #184]	@ (801b09c <udp_sendto_if+0xd8>)
 801afe2:	f005 fccf 	bl	8020984 <iprintf>
 801afe6:	f06f 030f 	mvn.w	r3, #15
 801afea:	e04f      	b.n	801b08c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801afec:	68bb      	ldr	r3, [r7, #8]
 801afee:	2b00      	cmp	r3, #0
 801aff0:	d109      	bne.n	801b006 <udp_sendto_if+0x42>
 801aff2:	4b28      	ldr	r3, [pc, #160]	@ (801b094 <udp_sendto_if+0xd0>)
 801aff4:	f240 2281 	movw	r2, #641	@ 0x281
 801aff8:	4929      	ldr	r1, [pc, #164]	@ (801b0a0 <udp_sendto_if+0xdc>)
 801affa:	4828      	ldr	r0, [pc, #160]	@ (801b09c <udp_sendto_if+0xd8>)
 801affc:	f005 fcc2 	bl	8020984 <iprintf>
 801b000:	f06f 030f 	mvn.w	r3, #15
 801b004:	e042      	b.n	801b08c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	2b00      	cmp	r3, #0
 801b00a:	d109      	bne.n	801b020 <udp_sendto_if+0x5c>
 801b00c:	4b21      	ldr	r3, [pc, #132]	@ (801b094 <udp_sendto_if+0xd0>)
 801b00e:	f240 2282 	movw	r2, #642	@ 0x282
 801b012:	4924      	ldr	r1, [pc, #144]	@ (801b0a4 <udp_sendto_if+0xe0>)
 801b014:	4821      	ldr	r0, [pc, #132]	@ (801b09c <udp_sendto_if+0xd8>)
 801b016:	f005 fcb5 	bl	8020984 <iprintf>
 801b01a:	f06f 030f 	mvn.w	r3, #15
 801b01e:	e035      	b.n	801b08c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801b020:	6a3b      	ldr	r3, [r7, #32]
 801b022:	2b00      	cmp	r3, #0
 801b024:	d109      	bne.n	801b03a <udp_sendto_if+0x76>
 801b026:	4b1b      	ldr	r3, [pc, #108]	@ (801b094 <udp_sendto_if+0xd0>)
 801b028:	f240 2283 	movw	r2, #643	@ 0x283
 801b02c:	491e      	ldr	r1, [pc, #120]	@ (801b0a8 <udp_sendto_if+0xe4>)
 801b02e:	481b      	ldr	r0, [pc, #108]	@ (801b09c <udp_sendto_if+0xd8>)
 801b030:	f005 fca8 	bl	8020984 <iprintf>
 801b034:	f06f 030f 	mvn.w	r3, #15
 801b038:	e028      	b.n	801b08c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	2b00      	cmp	r3, #0
 801b03e:	d009      	beq.n	801b054 <udp_sendto_if+0x90>
 801b040:	68fb      	ldr	r3, [r7, #12]
 801b042:	681b      	ldr	r3, [r3, #0]
 801b044:	2b00      	cmp	r3, #0
 801b046:	d005      	beq.n	801b054 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801b048:	68fb      	ldr	r3, [r7, #12]
 801b04a:	681b      	ldr	r3, [r3, #0]
 801b04c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b050:	2be0      	cmp	r3, #224	@ 0xe0
 801b052:	d103      	bne.n	801b05c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801b054:	6a3b      	ldr	r3, [r7, #32]
 801b056:	3304      	adds	r3, #4
 801b058:	617b      	str	r3, [r7, #20]
 801b05a:	e00b      	b.n	801b074 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801b05c:	68fb      	ldr	r3, [r7, #12]
 801b05e:	681a      	ldr	r2, [r3, #0]
 801b060:	6a3b      	ldr	r3, [r7, #32]
 801b062:	3304      	adds	r3, #4
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	429a      	cmp	r2, r3
 801b068:	d002      	beq.n	801b070 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801b06a:	f06f 0303 	mvn.w	r3, #3
 801b06e:	e00d      	b.n	801b08c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801b070:	68fb      	ldr	r3, [r7, #12]
 801b072:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801b074:	887a      	ldrh	r2, [r7, #2]
 801b076:	697b      	ldr	r3, [r7, #20]
 801b078:	9301      	str	r3, [sp, #4]
 801b07a:	6a3b      	ldr	r3, [r7, #32]
 801b07c:	9300      	str	r3, [sp, #0]
 801b07e:	4613      	mov	r3, r2
 801b080:	687a      	ldr	r2, [r7, #4]
 801b082:	68b9      	ldr	r1, [r7, #8]
 801b084:	68f8      	ldr	r0, [r7, #12]
 801b086:	f000 f811 	bl	801b0ac <udp_sendto_if_src>
 801b08a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801b08c:	4618      	mov	r0, r3
 801b08e:	3718      	adds	r7, #24
 801b090:	46bd      	mov	sp, r7
 801b092:	bd80      	pop	{r7, pc}
 801b094:	08025e0c 	.word	0x08025e0c
 801b098:	08025f80 	.word	0x08025f80
 801b09c:	08025e60 	.word	0x08025e60
 801b0a0:	08025f9c 	.word	0x08025f9c
 801b0a4:	08025fb8 	.word	0x08025fb8
 801b0a8:	08025fd8 	.word	0x08025fd8

0801b0ac <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801b0ac:	b580      	push	{r7, lr}
 801b0ae:	b08c      	sub	sp, #48	@ 0x30
 801b0b0:	af04      	add	r7, sp, #16
 801b0b2:	60f8      	str	r0, [r7, #12]
 801b0b4:	60b9      	str	r1, [r7, #8]
 801b0b6:	607a      	str	r2, [r7, #4]
 801b0b8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801b0ba:	68fb      	ldr	r3, [r7, #12]
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	d109      	bne.n	801b0d4 <udp_sendto_if_src+0x28>
 801b0c0:	4b65      	ldr	r3, [pc, #404]	@ (801b258 <udp_sendto_if_src+0x1ac>)
 801b0c2:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801b0c6:	4965      	ldr	r1, [pc, #404]	@ (801b25c <udp_sendto_if_src+0x1b0>)
 801b0c8:	4865      	ldr	r0, [pc, #404]	@ (801b260 <udp_sendto_if_src+0x1b4>)
 801b0ca:	f005 fc5b 	bl	8020984 <iprintf>
 801b0ce:	f06f 030f 	mvn.w	r3, #15
 801b0d2:	e0bc      	b.n	801b24e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801b0d4:	68bb      	ldr	r3, [r7, #8]
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d109      	bne.n	801b0ee <udp_sendto_if_src+0x42>
 801b0da:	4b5f      	ldr	r3, [pc, #380]	@ (801b258 <udp_sendto_if_src+0x1ac>)
 801b0dc:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801b0e0:	4960      	ldr	r1, [pc, #384]	@ (801b264 <udp_sendto_if_src+0x1b8>)
 801b0e2:	485f      	ldr	r0, [pc, #380]	@ (801b260 <udp_sendto_if_src+0x1b4>)
 801b0e4:	f005 fc4e 	bl	8020984 <iprintf>
 801b0e8:	f06f 030f 	mvn.w	r3, #15
 801b0ec:	e0af      	b.n	801b24e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	2b00      	cmp	r3, #0
 801b0f2:	d109      	bne.n	801b108 <udp_sendto_if_src+0x5c>
 801b0f4:	4b58      	ldr	r3, [pc, #352]	@ (801b258 <udp_sendto_if_src+0x1ac>)
 801b0f6:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801b0fa:	495b      	ldr	r1, [pc, #364]	@ (801b268 <udp_sendto_if_src+0x1bc>)
 801b0fc:	4858      	ldr	r0, [pc, #352]	@ (801b260 <udp_sendto_if_src+0x1b4>)
 801b0fe:	f005 fc41 	bl	8020984 <iprintf>
 801b102:	f06f 030f 	mvn.w	r3, #15
 801b106:	e0a2      	b.n	801b24e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801b108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d109      	bne.n	801b122 <udp_sendto_if_src+0x76>
 801b10e:	4b52      	ldr	r3, [pc, #328]	@ (801b258 <udp_sendto_if_src+0x1ac>)
 801b110:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801b114:	4955      	ldr	r1, [pc, #340]	@ (801b26c <udp_sendto_if_src+0x1c0>)
 801b116:	4852      	ldr	r0, [pc, #328]	@ (801b260 <udp_sendto_if_src+0x1b4>)
 801b118:	f005 fc34 	bl	8020984 <iprintf>
 801b11c:	f06f 030f 	mvn.w	r3, #15
 801b120:	e095      	b.n	801b24e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801b122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b124:	2b00      	cmp	r3, #0
 801b126:	d109      	bne.n	801b13c <udp_sendto_if_src+0x90>
 801b128:	4b4b      	ldr	r3, [pc, #300]	@ (801b258 <udp_sendto_if_src+0x1ac>)
 801b12a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801b12e:	4950      	ldr	r1, [pc, #320]	@ (801b270 <udp_sendto_if_src+0x1c4>)
 801b130:	484b      	ldr	r0, [pc, #300]	@ (801b260 <udp_sendto_if_src+0x1b4>)
 801b132:	f005 fc27 	bl	8020984 <iprintf>
 801b136:	f06f 030f 	mvn.w	r3, #15
 801b13a:	e088      	b.n	801b24e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801b13c:	68fb      	ldr	r3, [r7, #12]
 801b13e:	8a5b      	ldrh	r3, [r3, #18]
 801b140:	2b00      	cmp	r3, #0
 801b142:	d10f      	bne.n	801b164 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b144:	68f9      	ldr	r1, [r7, #12]
 801b146:	68fb      	ldr	r3, [r7, #12]
 801b148:	8a5b      	ldrh	r3, [r3, #18]
 801b14a:	461a      	mov	r2, r3
 801b14c:	68f8      	ldr	r0, [r7, #12]
 801b14e:	f000 f893 	bl	801b278 <udp_bind>
 801b152:	4603      	mov	r3, r0
 801b154:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801b156:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b15a:	2b00      	cmp	r3, #0
 801b15c:	d002      	beq.n	801b164 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801b15e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b162:	e074      	b.n	801b24e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801b164:	68bb      	ldr	r3, [r7, #8]
 801b166:	891b      	ldrh	r3, [r3, #8]
 801b168:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801b16c:	4293      	cmp	r3, r2
 801b16e:	d902      	bls.n	801b176 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801b170:	f04f 33ff 	mov.w	r3, #4294967295
 801b174:	e06b      	b.n	801b24e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801b176:	2108      	movs	r1, #8
 801b178:	68b8      	ldr	r0, [r7, #8]
 801b17a:	f7f8 ffdf 	bl	801413c <pbuf_add_header>
 801b17e:	4603      	mov	r3, r0
 801b180:	2b00      	cmp	r3, #0
 801b182:	d015      	beq.n	801b1b0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801b184:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b188:	2108      	movs	r1, #8
 801b18a:	2022      	movs	r0, #34	@ 0x22
 801b18c:	f7f8 fd88 	bl	8013ca0 <pbuf_alloc>
 801b190:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801b192:	69fb      	ldr	r3, [r7, #28]
 801b194:	2b00      	cmp	r3, #0
 801b196:	d102      	bne.n	801b19e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801b198:	f04f 33ff 	mov.w	r3, #4294967295
 801b19c:	e057      	b.n	801b24e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801b19e:	68bb      	ldr	r3, [r7, #8]
 801b1a0:	891b      	ldrh	r3, [r3, #8]
 801b1a2:	2b00      	cmp	r3, #0
 801b1a4:	d006      	beq.n	801b1b4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801b1a6:	68b9      	ldr	r1, [r7, #8]
 801b1a8:	69f8      	ldr	r0, [r7, #28]
 801b1aa:	f7f9 f981 	bl	80144b0 <pbuf_chain>
 801b1ae:	e001      	b.n	801b1b4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801b1b0:	68bb      	ldr	r3, [r7, #8]
 801b1b2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801b1b4:	69fb      	ldr	r3, [r7, #28]
 801b1b6:	895b      	ldrh	r3, [r3, #10]
 801b1b8:	2b07      	cmp	r3, #7
 801b1ba:	d806      	bhi.n	801b1ca <udp_sendto_if_src+0x11e>
 801b1bc:	4b26      	ldr	r3, [pc, #152]	@ (801b258 <udp_sendto_if_src+0x1ac>)
 801b1be:	f240 320d 	movw	r2, #781	@ 0x30d
 801b1c2:	492c      	ldr	r1, [pc, #176]	@ (801b274 <udp_sendto_if_src+0x1c8>)
 801b1c4:	4826      	ldr	r0, [pc, #152]	@ (801b260 <udp_sendto_if_src+0x1b4>)
 801b1c6:	f005 fbdd 	bl	8020984 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801b1ca:	69fb      	ldr	r3, [r7, #28]
 801b1cc:	685b      	ldr	r3, [r3, #4]
 801b1ce:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801b1d0:	68fb      	ldr	r3, [r7, #12]
 801b1d2:	8a5b      	ldrh	r3, [r3, #18]
 801b1d4:	4618      	mov	r0, r3
 801b1d6:	f7f7 fb91 	bl	80128fc <lwip_htons>
 801b1da:	4603      	mov	r3, r0
 801b1dc:	461a      	mov	r2, r3
 801b1de:	697b      	ldr	r3, [r7, #20]
 801b1e0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801b1e2:	887b      	ldrh	r3, [r7, #2]
 801b1e4:	4618      	mov	r0, r3
 801b1e6:	f7f7 fb89 	bl	80128fc <lwip_htons>
 801b1ea:	4603      	mov	r3, r0
 801b1ec:	461a      	mov	r2, r3
 801b1ee:	697b      	ldr	r3, [r7, #20]
 801b1f0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801b1f2:	697b      	ldr	r3, [r7, #20]
 801b1f4:	2200      	movs	r2, #0
 801b1f6:	719a      	strb	r2, [r3, #6]
 801b1f8:	2200      	movs	r2, #0
 801b1fa:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801b1fc:	69fb      	ldr	r3, [r7, #28]
 801b1fe:	891b      	ldrh	r3, [r3, #8]
 801b200:	4618      	mov	r0, r3
 801b202:	f7f7 fb7b 	bl	80128fc <lwip_htons>
 801b206:	4603      	mov	r3, r0
 801b208:	461a      	mov	r2, r3
 801b20a:	697b      	ldr	r3, [r7, #20]
 801b20c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801b20e:	2311      	movs	r3, #17
 801b210:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801b212:	68fb      	ldr	r3, [r7, #12]
 801b214:	7adb      	ldrb	r3, [r3, #11]
 801b216:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801b218:	68fb      	ldr	r3, [r7, #12]
 801b21a:	7a9b      	ldrb	r3, [r3, #10]
 801b21c:	7cb9      	ldrb	r1, [r7, #18]
 801b21e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b220:	9202      	str	r2, [sp, #8]
 801b222:	7cfa      	ldrb	r2, [r7, #19]
 801b224:	9201      	str	r2, [sp, #4]
 801b226:	9300      	str	r3, [sp, #0]
 801b228:	460b      	mov	r3, r1
 801b22a:	687a      	ldr	r2, [r7, #4]
 801b22c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b22e:	69f8      	ldr	r0, [r7, #28]
 801b230:	f003 fb8e 	bl	801e950 <ip4_output_if_src>
 801b234:	4603      	mov	r3, r0
 801b236:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801b238:	69fa      	ldr	r2, [r7, #28]
 801b23a:	68bb      	ldr	r3, [r7, #8]
 801b23c:	429a      	cmp	r2, r3
 801b23e:	d004      	beq.n	801b24a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801b240:	69f8      	ldr	r0, [r7, #28]
 801b242:	f7f9 f811 	bl	8014268 <pbuf_free>
    q = NULL;
 801b246:	2300      	movs	r3, #0
 801b248:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801b24a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801b24e:	4618      	mov	r0, r3
 801b250:	3720      	adds	r7, #32
 801b252:	46bd      	mov	sp, r7
 801b254:	bd80      	pop	{r7, pc}
 801b256:	bf00      	nop
 801b258:	08025e0c 	.word	0x08025e0c
 801b25c:	08025ff8 	.word	0x08025ff8
 801b260:	08025e60 	.word	0x08025e60
 801b264:	08026018 	.word	0x08026018
 801b268:	08026038 	.word	0x08026038
 801b26c:	0802605c 	.word	0x0802605c
 801b270:	08026080 	.word	0x08026080
 801b274:	080260a4 	.word	0x080260a4

0801b278 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b278:	b580      	push	{r7, lr}
 801b27a:	b086      	sub	sp, #24
 801b27c:	af00      	add	r7, sp, #0
 801b27e:	60f8      	str	r0, [r7, #12]
 801b280:	60b9      	str	r1, [r7, #8]
 801b282:	4613      	mov	r3, r2
 801b284:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801b286:	68bb      	ldr	r3, [r7, #8]
 801b288:	2b00      	cmp	r3, #0
 801b28a:	d101      	bne.n	801b290 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801b28c:	4b39      	ldr	r3, [pc, #228]	@ (801b374 <udp_bind+0xfc>)
 801b28e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b290:	68fb      	ldr	r3, [r7, #12]
 801b292:	2b00      	cmp	r3, #0
 801b294:	d109      	bne.n	801b2aa <udp_bind+0x32>
 801b296:	4b38      	ldr	r3, [pc, #224]	@ (801b378 <udp_bind+0x100>)
 801b298:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801b29c:	4937      	ldr	r1, [pc, #220]	@ (801b37c <udp_bind+0x104>)
 801b29e:	4838      	ldr	r0, [pc, #224]	@ (801b380 <udp_bind+0x108>)
 801b2a0:	f005 fb70 	bl	8020984 <iprintf>
 801b2a4:	f06f 030f 	mvn.w	r3, #15
 801b2a8:	e060      	b.n	801b36c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801b2aa:	2300      	movs	r3, #0
 801b2ac:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b2ae:	4b35      	ldr	r3, [pc, #212]	@ (801b384 <udp_bind+0x10c>)
 801b2b0:	681b      	ldr	r3, [r3, #0]
 801b2b2:	617b      	str	r3, [r7, #20]
 801b2b4:	e009      	b.n	801b2ca <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801b2b6:	68fa      	ldr	r2, [r7, #12]
 801b2b8:	697b      	ldr	r3, [r7, #20]
 801b2ba:	429a      	cmp	r2, r3
 801b2bc:	d102      	bne.n	801b2c4 <udp_bind+0x4c>
      rebind = 1;
 801b2be:	2301      	movs	r3, #1
 801b2c0:	74fb      	strb	r3, [r7, #19]
      break;
 801b2c2:	e005      	b.n	801b2d0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b2c4:	697b      	ldr	r3, [r7, #20]
 801b2c6:	68db      	ldr	r3, [r3, #12]
 801b2c8:	617b      	str	r3, [r7, #20]
 801b2ca:	697b      	ldr	r3, [r7, #20]
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	d1f2      	bne.n	801b2b6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801b2d0:	88fb      	ldrh	r3, [r7, #6]
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	d109      	bne.n	801b2ea <udp_bind+0x72>
    port = udp_new_port();
 801b2d6:	f7ff fc35 	bl	801ab44 <udp_new_port>
 801b2da:	4603      	mov	r3, r0
 801b2dc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801b2de:	88fb      	ldrh	r3, [r7, #6]
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d12c      	bne.n	801b33e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801b2e4:	f06f 0307 	mvn.w	r3, #7
 801b2e8:	e040      	b.n	801b36c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b2ea:	4b26      	ldr	r3, [pc, #152]	@ (801b384 <udp_bind+0x10c>)
 801b2ec:	681b      	ldr	r3, [r3, #0]
 801b2ee:	617b      	str	r3, [r7, #20]
 801b2f0:	e022      	b.n	801b338 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801b2f2:	68fa      	ldr	r2, [r7, #12]
 801b2f4:	697b      	ldr	r3, [r7, #20]
 801b2f6:	429a      	cmp	r2, r3
 801b2f8:	d01b      	beq.n	801b332 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801b2fa:	697b      	ldr	r3, [r7, #20]
 801b2fc:	8a5b      	ldrh	r3, [r3, #18]
 801b2fe:	88fa      	ldrh	r2, [r7, #6]
 801b300:	429a      	cmp	r2, r3
 801b302:	d116      	bne.n	801b332 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b304:	697b      	ldr	r3, [r7, #20]
 801b306:	681a      	ldr	r2, [r3, #0]
 801b308:	68bb      	ldr	r3, [r7, #8]
 801b30a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801b30c:	429a      	cmp	r2, r3
 801b30e:	d00d      	beq.n	801b32c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b310:	68bb      	ldr	r3, [r7, #8]
 801b312:	2b00      	cmp	r3, #0
 801b314:	d00a      	beq.n	801b32c <udp_bind+0xb4>
 801b316:	68bb      	ldr	r3, [r7, #8]
 801b318:	681b      	ldr	r3, [r3, #0]
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d006      	beq.n	801b32c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b31e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b320:	2b00      	cmp	r3, #0
 801b322:	d003      	beq.n	801b32c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b324:	697b      	ldr	r3, [r7, #20]
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d102      	bne.n	801b332 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801b32c:	f06f 0307 	mvn.w	r3, #7
 801b330:	e01c      	b.n	801b36c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b332:	697b      	ldr	r3, [r7, #20]
 801b334:	68db      	ldr	r3, [r3, #12]
 801b336:	617b      	str	r3, [r7, #20]
 801b338:	697b      	ldr	r3, [r7, #20]
 801b33a:	2b00      	cmp	r3, #0
 801b33c:	d1d9      	bne.n	801b2f2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801b33e:	68bb      	ldr	r3, [r7, #8]
 801b340:	2b00      	cmp	r3, #0
 801b342:	d002      	beq.n	801b34a <udp_bind+0xd2>
 801b344:	68bb      	ldr	r3, [r7, #8]
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	e000      	b.n	801b34c <udp_bind+0xd4>
 801b34a:	2300      	movs	r3, #0
 801b34c:	68fa      	ldr	r2, [r7, #12]
 801b34e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801b350:	68fb      	ldr	r3, [r7, #12]
 801b352:	88fa      	ldrh	r2, [r7, #6]
 801b354:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801b356:	7cfb      	ldrb	r3, [r7, #19]
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d106      	bne.n	801b36a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801b35c:	4b09      	ldr	r3, [pc, #36]	@ (801b384 <udp_bind+0x10c>)
 801b35e:	681a      	ldr	r2, [r3, #0]
 801b360:	68fb      	ldr	r3, [r7, #12]
 801b362:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801b364:	4a07      	ldr	r2, [pc, #28]	@ (801b384 <udp_bind+0x10c>)
 801b366:	68fb      	ldr	r3, [r7, #12]
 801b368:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801b36a:	2300      	movs	r3, #0
}
 801b36c:	4618      	mov	r0, r3
 801b36e:	3718      	adds	r7, #24
 801b370:	46bd      	mov	sp, r7
 801b372:	bd80      	pop	{r7, pc}
 801b374:	08026e5c 	.word	0x08026e5c
 801b378:	08025e0c 	.word	0x08025e0c
 801b37c:	080260d4 	.word	0x080260d4
 801b380:	08025e60 	.word	0x08025e60
 801b384:	2400cb58 	.word	0x2400cb58

0801b388 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b388:	b580      	push	{r7, lr}
 801b38a:	b086      	sub	sp, #24
 801b38c:	af00      	add	r7, sp, #0
 801b38e:	60f8      	str	r0, [r7, #12]
 801b390:	60b9      	str	r1, [r7, #8]
 801b392:	4613      	mov	r3, r2
 801b394:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801b396:	68fb      	ldr	r3, [r7, #12]
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d109      	bne.n	801b3b0 <udp_connect+0x28>
 801b39c:	4b2c      	ldr	r3, [pc, #176]	@ (801b450 <udp_connect+0xc8>)
 801b39e:	f240 4235 	movw	r2, #1077	@ 0x435
 801b3a2:	492c      	ldr	r1, [pc, #176]	@ (801b454 <udp_connect+0xcc>)
 801b3a4:	482c      	ldr	r0, [pc, #176]	@ (801b458 <udp_connect+0xd0>)
 801b3a6:	f005 faed 	bl	8020984 <iprintf>
 801b3aa:	f06f 030f 	mvn.w	r3, #15
 801b3ae:	e04b      	b.n	801b448 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801b3b0:	68bb      	ldr	r3, [r7, #8]
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	d109      	bne.n	801b3ca <udp_connect+0x42>
 801b3b6:	4b26      	ldr	r3, [pc, #152]	@ (801b450 <udp_connect+0xc8>)
 801b3b8:	f240 4236 	movw	r2, #1078	@ 0x436
 801b3bc:	4927      	ldr	r1, [pc, #156]	@ (801b45c <udp_connect+0xd4>)
 801b3be:	4826      	ldr	r0, [pc, #152]	@ (801b458 <udp_connect+0xd0>)
 801b3c0:	f005 fae0 	bl	8020984 <iprintf>
 801b3c4:	f06f 030f 	mvn.w	r3, #15
 801b3c8:	e03e      	b.n	801b448 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801b3ca:	68fb      	ldr	r3, [r7, #12]
 801b3cc:	8a5b      	ldrh	r3, [r3, #18]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d10f      	bne.n	801b3f2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b3d2:	68f9      	ldr	r1, [r7, #12]
 801b3d4:	68fb      	ldr	r3, [r7, #12]
 801b3d6:	8a5b      	ldrh	r3, [r3, #18]
 801b3d8:	461a      	mov	r2, r3
 801b3da:	68f8      	ldr	r0, [r7, #12]
 801b3dc:	f7ff ff4c 	bl	801b278 <udp_bind>
 801b3e0:	4603      	mov	r3, r0
 801b3e2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801b3e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b3e8:	2b00      	cmp	r3, #0
 801b3ea:	d002      	beq.n	801b3f2 <udp_connect+0x6a>
      return err;
 801b3ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b3f0:	e02a      	b.n	801b448 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801b3f2:	68bb      	ldr	r3, [r7, #8]
 801b3f4:	2b00      	cmp	r3, #0
 801b3f6:	d002      	beq.n	801b3fe <udp_connect+0x76>
 801b3f8:	68bb      	ldr	r3, [r7, #8]
 801b3fa:	681b      	ldr	r3, [r3, #0]
 801b3fc:	e000      	b.n	801b400 <udp_connect+0x78>
 801b3fe:	2300      	movs	r3, #0
 801b400:	68fa      	ldr	r2, [r7, #12]
 801b402:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801b404:	68fb      	ldr	r3, [r7, #12]
 801b406:	88fa      	ldrh	r2, [r7, #6]
 801b408:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801b40a:	68fb      	ldr	r3, [r7, #12]
 801b40c:	7c1b      	ldrb	r3, [r3, #16]
 801b40e:	f043 0304 	orr.w	r3, r3, #4
 801b412:	b2da      	uxtb	r2, r3
 801b414:	68fb      	ldr	r3, [r7, #12]
 801b416:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b418:	4b11      	ldr	r3, [pc, #68]	@ (801b460 <udp_connect+0xd8>)
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	617b      	str	r3, [r7, #20]
 801b41e:	e008      	b.n	801b432 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801b420:	68fa      	ldr	r2, [r7, #12]
 801b422:	697b      	ldr	r3, [r7, #20]
 801b424:	429a      	cmp	r2, r3
 801b426:	d101      	bne.n	801b42c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801b428:	2300      	movs	r3, #0
 801b42a:	e00d      	b.n	801b448 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b42c:	697b      	ldr	r3, [r7, #20]
 801b42e:	68db      	ldr	r3, [r3, #12]
 801b430:	617b      	str	r3, [r7, #20]
 801b432:	697b      	ldr	r3, [r7, #20]
 801b434:	2b00      	cmp	r3, #0
 801b436:	d1f3      	bne.n	801b420 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801b438:	4b09      	ldr	r3, [pc, #36]	@ (801b460 <udp_connect+0xd8>)
 801b43a:	681a      	ldr	r2, [r3, #0]
 801b43c:	68fb      	ldr	r3, [r7, #12]
 801b43e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801b440:	4a07      	ldr	r2, [pc, #28]	@ (801b460 <udp_connect+0xd8>)
 801b442:	68fb      	ldr	r3, [r7, #12]
 801b444:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801b446:	2300      	movs	r3, #0
}
 801b448:	4618      	mov	r0, r3
 801b44a:	3718      	adds	r7, #24
 801b44c:	46bd      	mov	sp, r7
 801b44e:	bd80      	pop	{r7, pc}
 801b450:	08025e0c 	.word	0x08025e0c
 801b454:	080260ec 	.word	0x080260ec
 801b458:	08025e60 	.word	0x08025e60
 801b45c:	08026108 	.word	0x08026108
 801b460:	2400cb58 	.word	0x2400cb58

0801b464 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801b464:	b580      	push	{r7, lr}
 801b466:	b082      	sub	sp, #8
 801b468:	af00      	add	r7, sp, #0
 801b46a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d107      	bne.n	801b482 <udp_disconnect+0x1e>
 801b472:	4b0d      	ldr	r3, [pc, #52]	@ (801b4a8 <udp_disconnect+0x44>)
 801b474:	f240 426a 	movw	r2, #1130	@ 0x46a
 801b478:	490c      	ldr	r1, [pc, #48]	@ (801b4ac <udp_disconnect+0x48>)
 801b47a:	480d      	ldr	r0, [pc, #52]	@ (801b4b0 <udp_disconnect+0x4c>)
 801b47c:	f005 fa82 	bl	8020984 <iprintf>
 801b480:	e00f      	b.n	801b4a2 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	2200      	movs	r2, #0
 801b486:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	2200      	movs	r2, #0
 801b48c:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	2200      	movs	r2, #0
 801b492:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	7c1b      	ldrb	r3, [r3, #16]
 801b498:	f023 0304 	bic.w	r3, r3, #4
 801b49c:	b2da      	uxtb	r2, r3
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	741a      	strb	r2, [r3, #16]
}
 801b4a2:	3708      	adds	r7, #8
 801b4a4:	46bd      	mov	sp, r7
 801b4a6:	bd80      	pop	{r7, pc}
 801b4a8:	08025e0c 	.word	0x08025e0c
 801b4ac:	08026124 	.word	0x08026124
 801b4b0:	08025e60 	.word	0x08025e60

0801b4b4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801b4b4:	b580      	push	{r7, lr}
 801b4b6:	b084      	sub	sp, #16
 801b4b8:	af00      	add	r7, sp, #0
 801b4ba:	60f8      	str	r0, [r7, #12]
 801b4bc:	60b9      	str	r1, [r7, #8]
 801b4be:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801b4c0:	68fb      	ldr	r3, [r7, #12]
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	d107      	bne.n	801b4d6 <udp_recv+0x22>
 801b4c6:	4b08      	ldr	r3, [pc, #32]	@ (801b4e8 <udp_recv+0x34>)
 801b4c8:	f240 428a 	movw	r2, #1162	@ 0x48a
 801b4cc:	4907      	ldr	r1, [pc, #28]	@ (801b4ec <udp_recv+0x38>)
 801b4ce:	4808      	ldr	r0, [pc, #32]	@ (801b4f0 <udp_recv+0x3c>)
 801b4d0:	f005 fa58 	bl	8020984 <iprintf>
 801b4d4:	e005      	b.n	801b4e2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801b4d6:	68fb      	ldr	r3, [r7, #12]
 801b4d8:	68ba      	ldr	r2, [r7, #8]
 801b4da:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801b4dc:	68fb      	ldr	r3, [r7, #12]
 801b4de:	687a      	ldr	r2, [r7, #4]
 801b4e0:	61da      	str	r2, [r3, #28]
}
 801b4e2:	3710      	adds	r7, #16
 801b4e4:	46bd      	mov	sp, r7
 801b4e6:	bd80      	pop	{r7, pc}
 801b4e8:	08025e0c 	.word	0x08025e0c
 801b4ec:	08026140 	.word	0x08026140
 801b4f0:	08025e60 	.word	0x08025e60

0801b4f4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801b4f4:	b580      	push	{r7, lr}
 801b4f6:	b084      	sub	sp, #16
 801b4f8:	af00      	add	r7, sp, #0
 801b4fa:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d107      	bne.n	801b512 <udp_remove+0x1e>
 801b502:	4b19      	ldr	r3, [pc, #100]	@ (801b568 <udp_remove+0x74>)
 801b504:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801b508:	4918      	ldr	r1, [pc, #96]	@ (801b56c <udp_remove+0x78>)
 801b50a:	4819      	ldr	r0, [pc, #100]	@ (801b570 <udp_remove+0x7c>)
 801b50c:	f005 fa3a 	bl	8020984 <iprintf>
 801b510:	e026      	b.n	801b560 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801b512:	4b18      	ldr	r3, [pc, #96]	@ (801b574 <udp_remove+0x80>)
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	687a      	ldr	r2, [r7, #4]
 801b518:	429a      	cmp	r2, r3
 801b51a:	d105      	bne.n	801b528 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801b51c:	4b15      	ldr	r3, [pc, #84]	@ (801b574 <udp_remove+0x80>)
 801b51e:	681b      	ldr	r3, [r3, #0]
 801b520:	68db      	ldr	r3, [r3, #12]
 801b522:	4a14      	ldr	r2, [pc, #80]	@ (801b574 <udp_remove+0x80>)
 801b524:	6013      	str	r3, [r2, #0]
 801b526:	e017      	b.n	801b558 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b528:	4b12      	ldr	r3, [pc, #72]	@ (801b574 <udp_remove+0x80>)
 801b52a:	681b      	ldr	r3, [r3, #0]
 801b52c:	60fb      	str	r3, [r7, #12]
 801b52e:	e010      	b.n	801b552 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801b530:	68fb      	ldr	r3, [r7, #12]
 801b532:	68db      	ldr	r3, [r3, #12]
 801b534:	2b00      	cmp	r3, #0
 801b536:	d009      	beq.n	801b54c <udp_remove+0x58>
 801b538:	68fb      	ldr	r3, [r7, #12]
 801b53a:	68db      	ldr	r3, [r3, #12]
 801b53c:	687a      	ldr	r2, [r7, #4]
 801b53e:	429a      	cmp	r2, r3
 801b540:	d104      	bne.n	801b54c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	68da      	ldr	r2, [r3, #12]
 801b546:	68fb      	ldr	r3, [r7, #12]
 801b548:	60da      	str	r2, [r3, #12]
        break;
 801b54a:	e005      	b.n	801b558 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b54c:	68fb      	ldr	r3, [r7, #12]
 801b54e:	68db      	ldr	r3, [r3, #12]
 801b550:	60fb      	str	r3, [r7, #12]
 801b552:	68fb      	ldr	r3, [r7, #12]
 801b554:	2b00      	cmp	r3, #0
 801b556:	d1eb      	bne.n	801b530 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801b558:	6879      	ldr	r1, [r7, #4]
 801b55a:	2000      	movs	r0, #0
 801b55c:	f7f7 ffd4 	bl	8013508 <memp_free>
}
 801b560:	3710      	adds	r7, #16
 801b562:	46bd      	mov	sp, r7
 801b564:	bd80      	pop	{r7, pc}
 801b566:	bf00      	nop
 801b568:	08025e0c 	.word	0x08025e0c
 801b56c:	08026158 	.word	0x08026158
 801b570:	08025e60 	.word	0x08025e60
 801b574:	2400cb58 	.word	0x2400cb58

0801b578 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801b578:	b580      	push	{r7, lr}
 801b57a:	b082      	sub	sp, #8
 801b57c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801b57e:	2000      	movs	r0, #0
 801b580:	f7f7 ff4c 	bl	801341c <memp_malloc>
 801b584:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	2b00      	cmp	r3, #0
 801b58a:	d007      	beq.n	801b59c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801b58c:	2220      	movs	r2, #32
 801b58e:	2100      	movs	r1, #0
 801b590:	6878      	ldr	r0, [r7, #4]
 801b592:	f005 fb9d 	bl	8020cd0 <memset>
    pcb->ttl = UDP_TTL;
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	22ff      	movs	r2, #255	@ 0xff
 801b59a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801b59c:	687b      	ldr	r3, [r7, #4]
}
 801b59e:	4618      	mov	r0, r3
 801b5a0:	3708      	adds	r7, #8
 801b5a2:	46bd      	mov	sp, r7
 801b5a4:	bd80      	pop	{r7, pc}

0801b5a6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801b5a6:	b580      	push	{r7, lr}
 801b5a8:	b084      	sub	sp, #16
 801b5aa:	af00      	add	r7, sp, #0
 801b5ac:	4603      	mov	r3, r0
 801b5ae:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801b5b0:	f7ff ffe2 	bl	801b578 <udp_new>
 801b5b4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801b5b6:	68fb      	ldr	r3, [r7, #12]
}
 801b5b8:	4618      	mov	r0, r3
 801b5ba:	3710      	adds	r7, #16
 801b5bc:	46bd      	mov	sp, r7
 801b5be:	bd80      	pop	{r7, pc}

0801b5c0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801b5c0:	b480      	push	{r7}
 801b5c2:	b085      	sub	sp, #20
 801b5c4:	af00      	add	r7, sp, #0
 801b5c6:	6078      	str	r0, [r7, #4]
 801b5c8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	d01e      	beq.n	801b60e <udp_netif_ip_addr_changed+0x4e>
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	681b      	ldr	r3, [r3, #0]
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	d01a      	beq.n	801b60e <udp_netif_ip_addr_changed+0x4e>
 801b5d8:	683b      	ldr	r3, [r7, #0]
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	d017      	beq.n	801b60e <udp_netif_ip_addr_changed+0x4e>
 801b5de:	683b      	ldr	r3, [r7, #0]
 801b5e0:	681b      	ldr	r3, [r3, #0]
 801b5e2:	2b00      	cmp	r3, #0
 801b5e4:	d013      	beq.n	801b60e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b5e6:	4b0d      	ldr	r3, [pc, #52]	@ (801b61c <udp_netif_ip_addr_changed+0x5c>)
 801b5e8:	681b      	ldr	r3, [r3, #0]
 801b5ea:	60fb      	str	r3, [r7, #12]
 801b5ec:	e00c      	b.n	801b608 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801b5ee:	68fb      	ldr	r3, [r7, #12]
 801b5f0:	681a      	ldr	r2, [r3, #0]
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	681b      	ldr	r3, [r3, #0]
 801b5f6:	429a      	cmp	r2, r3
 801b5f8:	d103      	bne.n	801b602 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801b5fa:	683b      	ldr	r3, [r7, #0]
 801b5fc:	681a      	ldr	r2, [r3, #0]
 801b5fe:	68fb      	ldr	r3, [r7, #12]
 801b600:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b602:	68fb      	ldr	r3, [r7, #12]
 801b604:	68db      	ldr	r3, [r3, #12]
 801b606:	60fb      	str	r3, [r7, #12]
 801b608:	68fb      	ldr	r3, [r7, #12]
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	d1ef      	bne.n	801b5ee <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801b60e:	bf00      	nop
 801b610:	3714      	adds	r7, #20
 801b612:	46bd      	mov	sp, r7
 801b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b618:	4770      	bx	lr
 801b61a:	bf00      	nop
 801b61c:	2400cb58 	.word	0x2400cb58

0801b620 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801b620:	b580      	push	{r7, lr}
 801b622:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801b624:	4b20      	ldr	r3, [pc, #128]	@ (801b6a8 <dhcp_inc_pcb_refcount+0x88>)
 801b626:	781b      	ldrb	r3, [r3, #0]
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d133      	bne.n	801b694 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801b62c:	4b1f      	ldr	r3, [pc, #124]	@ (801b6ac <dhcp_inc_pcb_refcount+0x8c>)
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	2b00      	cmp	r3, #0
 801b632:	d005      	beq.n	801b640 <dhcp_inc_pcb_refcount+0x20>
 801b634:	4b1e      	ldr	r3, [pc, #120]	@ (801b6b0 <dhcp_inc_pcb_refcount+0x90>)
 801b636:	22e5      	movs	r2, #229	@ 0xe5
 801b638:	491e      	ldr	r1, [pc, #120]	@ (801b6b4 <dhcp_inc_pcb_refcount+0x94>)
 801b63a:	481f      	ldr	r0, [pc, #124]	@ (801b6b8 <dhcp_inc_pcb_refcount+0x98>)
 801b63c:	f005 f9a2 	bl	8020984 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801b640:	f7ff ff9a 	bl	801b578 <udp_new>
 801b644:	4603      	mov	r3, r0
 801b646:	4a19      	ldr	r2, [pc, #100]	@ (801b6ac <dhcp_inc_pcb_refcount+0x8c>)
 801b648:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801b64a:	4b18      	ldr	r3, [pc, #96]	@ (801b6ac <dhcp_inc_pcb_refcount+0x8c>)
 801b64c:	681b      	ldr	r3, [r3, #0]
 801b64e:	2b00      	cmp	r3, #0
 801b650:	d102      	bne.n	801b658 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801b652:	f04f 33ff 	mov.w	r3, #4294967295
 801b656:	e024      	b.n	801b6a2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801b658:	4b14      	ldr	r3, [pc, #80]	@ (801b6ac <dhcp_inc_pcb_refcount+0x8c>)
 801b65a:	681b      	ldr	r3, [r3, #0]
 801b65c:	7a5a      	ldrb	r2, [r3, #9]
 801b65e:	4b13      	ldr	r3, [pc, #76]	@ (801b6ac <dhcp_inc_pcb_refcount+0x8c>)
 801b660:	681b      	ldr	r3, [r3, #0]
 801b662:	f042 0220 	orr.w	r2, r2, #32
 801b666:	b2d2      	uxtb	r2, r2
 801b668:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801b66a:	4b10      	ldr	r3, [pc, #64]	@ (801b6ac <dhcp_inc_pcb_refcount+0x8c>)
 801b66c:	681b      	ldr	r3, [r3, #0]
 801b66e:	2244      	movs	r2, #68	@ 0x44
 801b670:	4912      	ldr	r1, [pc, #72]	@ (801b6bc <dhcp_inc_pcb_refcount+0x9c>)
 801b672:	4618      	mov	r0, r3
 801b674:	f7ff fe00 	bl	801b278 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801b678:	4b0c      	ldr	r3, [pc, #48]	@ (801b6ac <dhcp_inc_pcb_refcount+0x8c>)
 801b67a:	681b      	ldr	r3, [r3, #0]
 801b67c:	2243      	movs	r2, #67	@ 0x43
 801b67e:	490f      	ldr	r1, [pc, #60]	@ (801b6bc <dhcp_inc_pcb_refcount+0x9c>)
 801b680:	4618      	mov	r0, r3
 801b682:	f7ff fe81 	bl	801b388 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801b686:	4b09      	ldr	r3, [pc, #36]	@ (801b6ac <dhcp_inc_pcb_refcount+0x8c>)
 801b688:	681b      	ldr	r3, [r3, #0]
 801b68a:	2200      	movs	r2, #0
 801b68c:	490c      	ldr	r1, [pc, #48]	@ (801b6c0 <dhcp_inc_pcb_refcount+0xa0>)
 801b68e:	4618      	mov	r0, r3
 801b690:	f7ff ff10 	bl	801b4b4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 801b694:	4b04      	ldr	r3, [pc, #16]	@ (801b6a8 <dhcp_inc_pcb_refcount+0x88>)
 801b696:	781b      	ldrb	r3, [r3, #0]
 801b698:	3301      	adds	r3, #1
 801b69a:	b2da      	uxtb	r2, r3
 801b69c:	4b02      	ldr	r3, [pc, #8]	@ (801b6a8 <dhcp_inc_pcb_refcount+0x88>)
 801b69e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801b6a0:	2300      	movs	r3, #0
}
 801b6a2:	4618      	mov	r0, r3
 801b6a4:	bd80      	pop	{r7, pc}
 801b6a6:	bf00      	nop
 801b6a8:	2400cb88 	.word	0x2400cb88
 801b6ac:	2400cb84 	.word	0x2400cb84
 801b6b0:	08026170 	.word	0x08026170
 801b6b4:	080261a8 	.word	0x080261a8
 801b6b8:	080261d0 	.word	0x080261d0
 801b6bc:	08026e5c 	.word	0x08026e5c
 801b6c0:	0801cf4d 	.word	0x0801cf4d

0801b6c4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801b6c4:	b580      	push	{r7, lr}
 801b6c6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801b6c8:	4b0e      	ldr	r3, [pc, #56]	@ (801b704 <dhcp_dec_pcb_refcount+0x40>)
 801b6ca:	781b      	ldrb	r3, [r3, #0]
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	d105      	bne.n	801b6dc <dhcp_dec_pcb_refcount+0x18>
 801b6d0:	4b0d      	ldr	r3, [pc, #52]	@ (801b708 <dhcp_dec_pcb_refcount+0x44>)
 801b6d2:	22ff      	movs	r2, #255	@ 0xff
 801b6d4:	490d      	ldr	r1, [pc, #52]	@ (801b70c <dhcp_dec_pcb_refcount+0x48>)
 801b6d6:	480e      	ldr	r0, [pc, #56]	@ (801b710 <dhcp_dec_pcb_refcount+0x4c>)
 801b6d8:	f005 f954 	bl	8020984 <iprintf>
  dhcp_pcb_refcount--;
 801b6dc:	4b09      	ldr	r3, [pc, #36]	@ (801b704 <dhcp_dec_pcb_refcount+0x40>)
 801b6de:	781b      	ldrb	r3, [r3, #0]
 801b6e0:	3b01      	subs	r3, #1
 801b6e2:	b2da      	uxtb	r2, r3
 801b6e4:	4b07      	ldr	r3, [pc, #28]	@ (801b704 <dhcp_dec_pcb_refcount+0x40>)
 801b6e6:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801b6e8:	4b06      	ldr	r3, [pc, #24]	@ (801b704 <dhcp_dec_pcb_refcount+0x40>)
 801b6ea:	781b      	ldrb	r3, [r3, #0]
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	d107      	bne.n	801b700 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801b6f0:	4b08      	ldr	r3, [pc, #32]	@ (801b714 <dhcp_dec_pcb_refcount+0x50>)
 801b6f2:	681b      	ldr	r3, [r3, #0]
 801b6f4:	4618      	mov	r0, r3
 801b6f6:	f7ff fefd 	bl	801b4f4 <udp_remove>
    dhcp_pcb = NULL;
 801b6fa:	4b06      	ldr	r3, [pc, #24]	@ (801b714 <dhcp_dec_pcb_refcount+0x50>)
 801b6fc:	2200      	movs	r2, #0
 801b6fe:	601a      	str	r2, [r3, #0]
  }
}
 801b700:	bf00      	nop
 801b702:	bd80      	pop	{r7, pc}
 801b704:	2400cb88 	.word	0x2400cb88
 801b708:	08026170 	.word	0x08026170
 801b70c:	080261f8 	.word	0x080261f8
 801b710:	080261d0 	.word	0x080261d0
 801b714:	2400cb84 	.word	0x2400cb84

0801b718 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801b718:	b580      	push	{r7, lr}
 801b71a:	b084      	sub	sp, #16
 801b71c:	af00      	add	r7, sp, #0
 801b71e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b724:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801b726:	210c      	movs	r1, #12
 801b728:	68f8      	ldr	r0, [r7, #12]
 801b72a:	f001 f851 	bl	801c7d0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801b72e:	4b06      	ldr	r3, [pc, #24]	@ (801b748 <dhcp_handle_nak+0x30>)
 801b730:	4a05      	ldr	r2, [pc, #20]	@ (801b748 <dhcp_handle_nak+0x30>)
 801b732:	4905      	ldr	r1, [pc, #20]	@ (801b748 <dhcp_handle_nak+0x30>)
 801b734:	6878      	ldr	r0, [r7, #4]
 801b736:	f7f8 f889 	bl	801384c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801b73a:	6878      	ldr	r0, [r7, #4]
 801b73c:	f000 fc4a 	bl	801bfd4 <dhcp_discover>
}
 801b740:	bf00      	nop
 801b742:	3710      	adds	r7, #16
 801b744:	46bd      	mov	sp, r7
 801b746:	bd80      	pop	{r7, pc}
 801b748:	08026e5c 	.word	0x08026e5c

0801b74c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801b74c:	b580      	push	{r7, lr}
 801b74e:	b084      	sub	sp, #16
 801b750:	af00      	add	r7, sp, #0
 801b752:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b754:	687b      	ldr	r3, [r7, #4]
 801b756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b758:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801b75a:	2108      	movs	r1, #8
 801b75c:	68f8      	ldr	r0, [r7, #12]
 801b75e:	f001 f837 	bl	801c7d0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801b762:	68fb      	ldr	r3, [r7, #12]
 801b764:	331c      	adds	r3, #28
 801b766:	2200      	movs	r2, #0
 801b768:	4619      	mov	r1, r3
 801b76a:	6878      	ldr	r0, [r7, #4]
 801b76c:	f002 fb38 	bl	801dde0 <etharp_query>
 801b770:	4603      	mov	r3, r0
 801b772:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801b774:	68fb      	ldr	r3, [r7, #12]
 801b776:	799b      	ldrb	r3, [r3, #6]
 801b778:	2bff      	cmp	r3, #255	@ 0xff
 801b77a:	d005      	beq.n	801b788 <dhcp_check+0x3c>
    dhcp->tries++;
 801b77c:	68fb      	ldr	r3, [r7, #12]
 801b77e:	799b      	ldrb	r3, [r3, #6]
 801b780:	3301      	adds	r3, #1
 801b782:	b2da      	uxtb	r2, r3
 801b784:	68fb      	ldr	r3, [r7, #12]
 801b786:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801b788:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801b78c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801b78e:	893b      	ldrh	r3, [r7, #8]
 801b790:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801b794:	4a06      	ldr	r2, [pc, #24]	@ (801b7b0 <dhcp_check+0x64>)
 801b796:	fb82 1203 	smull	r1, r2, r2, r3
 801b79a:	1152      	asrs	r2, r2, #5
 801b79c:	17db      	asrs	r3, r3, #31
 801b79e:	1ad3      	subs	r3, r2, r3
 801b7a0:	b29a      	uxth	r2, r3
 801b7a2:	68fb      	ldr	r3, [r7, #12]
 801b7a4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801b7a6:	bf00      	nop
 801b7a8:	3710      	adds	r7, #16
 801b7aa:	46bd      	mov	sp, r7
 801b7ac:	bd80      	pop	{r7, pc}
 801b7ae:	bf00      	nop
 801b7b0:	10624dd3 	.word	0x10624dd3

0801b7b4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801b7b4:	b580      	push	{r7, lr}
 801b7b6:	b084      	sub	sp, #16
 801b7b8:	af00      	add	r7, sp, #0
 801b7ba:	6078      	str	r0, [r7, #4]
 801b7bc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b7c2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801b7c4:	4b0c      	ldr	r3, [pc, #48]	@ (801b7f8 <dhcp_handle_offer+0x44>)
 801b7c6:	789b      	ldrb	r3, [r3, #2]
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	d011      	beq.n	801b7f0 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801b7cc:	68fb      	ldr	r3, [r7, #12]
 801b7ce:	2200      	movs	r2, #0
 801b7d0:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801b7d2:	4b0a      	ldr	r3, [pc, #40]	@ (801b7fc <dhcp_handle_offer+0x48>)
 801b7d4:	689b      	ldr	r3, [r3, #8]
 801b7d6:	4618      	mov	r0, r3
 801b7d8:	f7f7 f8a5 	bl	8012926 <lwip_htonl>
 801b7dc:	4602      	mov	r2, r0
 801b7de:	68fb      	ldr	r3, [r7, #12]
 801b7e0:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801b7e2:	683b      	ldr	r3, [r7, #0]
 801b7e4:	691a      	ldr	r2, [r3, #16]
 801b7e6:	68fb      	ldr	r3, [r7, #12]
 801b7e8:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801b7ea:	6878      	ldr	r0, [r7, #4]
 801b7ec:	f000 f808 	bl	801b800 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801b7f0:	bf00      	nop
 801b7f2:	3710      	adds	r7, #16
 801b7f4:	46bd      	mov	sp, r7
 801b7f6:	bd80      	pop	{r7, pc}
 801b7f8:	2400cb7c 	.word	0x2400cb7c
 801b7fc:	2400cb5c 	.word	0x2400cb5c

0801b800 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801b800:	b5b0      	push	{r4, r5, r7, lr}
 801b802:	b08a      	sub	sp, #40	@ 0x28
 801b804:	af02      	add	r7, sp, #8
 801b806:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	2b00      	cmp	r3, #0
 801b80c:	d109      	bne.n	801b822 <dhcp_select+0x22>
 801b80e:	4b71      	ldr	r3, [pc, #452]	@ (801b9d4 <dhcp_select+0x1d4>)
 801b810:	f240 1277 	movw	r2, #375	@ 0x177
 801b814:	4970      	ldr	r1, [pc, #448]	@ (801b9d8 <dhcp_select+0x1d8>)
 801b816:	4871      	ldr	r0, [pc, #452]	@ (801b9dc <dhcp_select+0x1dc>)
 801b818:	f005 f8b4 	bl	8020984 <iprintf>
 801b81c:	f06f 030f 	mvn.w	r3, #15
 801b820:	e0d3      	b.n	801b9ca <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801b822:	687b      	ldr	r3, [r7, #4]
 801b824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b826:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801b828:	69bb      	ldr	r3, [r7, #24]
 801b82a:	2b00      	cmp	r3, #0
 801b82c:	d109      	bne.n	801b842 <dhcp_select+0x42>
 801b82e:	4b69      	ldr	r3, [pc, #420]	@ (801b9d4 <dhcp_select+0x1d4>)
 801b830:	f240 1279 	movw	r2, #377	@ 0x179
 801b834:	496a      	ldr	r1, [pc, #424]	@ (801b9e0 <dhcp_select+0x1e0>)
 801b836:	4869      	ldr	r0, [pc, #420]	@ (801b9dc <dhcp_select+0x1dc>)
 801b838:	f005 f8a4 	bl	8020984 <iprintf>
 801b83c:	f06f 0305 	mvn.w	r3, #5
 801b840:	e0c3      	b.n	801b9ca <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801b842:	2101      	movs	r1, #1
 801b844:	69b8      	ldr	r0, [r7, #24]
 801b846:	f000 ffc3 	bl	801c7d0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801b84a:	f107 030c 	add.w	r3, r7, #12
 801b84e:	2203      	movs	r2, #3
 801b850:	69b9      	ldr	r1, [r7, #24]
 801b852:	6878      	ldr	r0, [r7, #4]
 801b854:	f001 fc48 	bl	801d0e8 <dhcp_create_msg>
 801b858:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801b85a:	697b      	ldr	r3, [r7, #20]
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	f000 8085 	beq.w	801b96c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801b862:	697b      	ldr	r3, [r7, #20]
 801b864:	685b      	ldr	r3, [r3, #4]
 801b866:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801b868:	89b8      	ldrh	r0, [r7, #12]
 801b86a:	693b      	ldr	r3, [r7, #16]
 801b86c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801b870:	2302      	movs	r3, #2
 801b872:	2239      	movs	r2, #57	@ 0x39
 801b874:	f000 ffc6 	bl	801c804 <dhcp_option>
 801b878:	4603      	mov	r3, r0
 801b87a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801b87c:	89b8      	ldrh	r0, [r7, #12]
 801b87e:	693b      	ldr	r3, [r7, #16]
 801b880:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801b888:	461a      	mov	r2, r3
 801b88a:	f001 f815 	bl	801c8b8 <dhcp_option_short>
 801b88e:	4603      	mov	r3, r0
 801b890:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801b892:	89b8      	ldrh	r0, [r7, #12]
 801b894:	693b      	ldr	r3, [r7, #16]
 801b896:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801b89a:	2304      	movs	r3, #4
 801b89c:	2232      	movs	r2, #50	@ 0x32
 801b89e:	f000 ffb1 	bl	801c804 <dhcp_option>
 801b8a2:	4603      	mov	r3, r0
 801b8a4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801b8a6:	89bc      	ldrh	r4, [r7, #12]
 801b8a8:	693b      	ldr	r3, [r7, #16]
 801b8aa:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801b8ae:	69bb      	ldr	r3, [r7, #24]
 801b8b0:	69db      	ldr	r3, [r3, #28]
 801b8b2:	4618      	mov	r0, r3
 801b8b4:	f7f7 f837 	bl	8012926 <lwip_htonl>
 801b8b8:	4603      	mov	r3, r0
 801b8ba:	461a      	mov	r2, r3
 801b8bc:	4629      	mov	r1, r5
 801b8be:	4620      	mov	r0, r4
 801b8c0:	f001 f82c 	bl	801c91c <dhcp_option_long>
 801b8c4:	4603      	mov	r3, r0
 801b8c6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801b8c8:	89b8      	ldrh	r0, [r7, #12]
 801b8ca:	693b      	ldr	r3, [r7, #16]
 801b8cc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801b8d0:	2304      	movs	r3, #4
 801b8d2:	2236      	movs	r2, #54	@ 0x36
 801b8d4:	f000 ff96 	bl	801c804 <dhcp_option>
 801b8d8:	4603      	mov	r3, r0
 801b8da:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801b8dc:	89bc      	ldrh	r4, [r7, #12]
 801b8de:	693b      	ldr	r3, [r7, #16]
 801b8e0:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801b8e4:	69bb      	ldr	r3, [r7, #24]
 801b8e6:	699b      	ldr	r3, [r3, #24]
 801b8e8:	4618      	mov	r0, r3
 801b8ea:	f7f7 f81c 	bl	8012926 <lwip_htonl>
 801b8ee:	4603      	mov	r3, r0
 801b8f0:	461a      	mov	r2, r3
 801b8f2:	4629      	mov	r1, r5
 801b8f4:	4620      	mov	r0, r4
 801b8f6:	f001 f811 	bl	801c91c <dhcp_option_long>
 801b8fa:	4603      	mov	r3, r0
 801b8fc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801b8fe:	89b8      	ldrh	r0, [r7, #12]
 801b900:	693b      	ldr	r3, [r7, #16]
 801b902:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801b906:	2303      	movs	r3, #3
 801b908:	2237      	movs	r2, #55	@ 0x37
 801b90a:	f000 ff7b 	bl	801c804 <dhcp_option>
 801b90e:	4603      	mov	r3, r0
 801b910:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b912:	2300      	movs	r3, #0
 801b914:	77bb      	strb	r3, [r7, #30]
 801b916:	e00e      	b.n	801b936 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801b918:	89b8      	ldrh	r0, [r7, #12]
 801b91a:	693b      	ldr	r3, [r7, #16]
 801b91c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801b920:	7fbb      	ldrb	r3, [r7, #30]
 801b922:	4a30      	ldr	r2, [pc, #192]	@ (801b9e4 <dhcp_select+0x1e4>)
 801b924:	5cd3      	ldrb	r3, [r2, r3]
 801b926:	461a      	mov	r2, r3
 801b928:	f000 ffa0 	bl	801c86c <dhcp_option_byte>
 801b92c:	4603      	mov	r3, r0
 801b92e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b930:	7fbb      	ldrb	r3, [r7, #30]
 801b932:	3301      	adds	r3, #1
 801b934:	77bb      	strb	r3, [r7, #30]
 801b936:	7fbb      	ldrb	r3, [r7, #30]
 801b938:	2b02      	cmp	r3, #2
 801b93a:	d9ed      	bls.n	801b918 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801b93c:	89b8      	ldrh	r0, [r7, #12]
 801b93e:	693b      	ldr	r3, [r7, #16]
 801b940:	33f0      	adds	r3, #240	@ 0xf0
 801b942:	697a      	ldr	r2, [r7, #20]
 801b944:	4619      	mov	r1, r3
 801b946:	f001 fca5 	bl	801d294 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801b94a:	4b27      	ldr	r3, [pc, #156]	@ (801b9e8 <dhcp_select+0x1e8>)
 801b94c:	6818      	ldr	r0, [r3, #0]
 801b94e:	4b27      	ldr	r3, [pc, #156]	@ (801b9ec <dhcp_select+0x1ec>)
 801b950:	9301      	str	r3, [sp, #4]
 801b952:	687b      	ldr	r3, [r7, #4]
 801b954:	9300      	str	r3, [sp, #0]
 801b956:	2343      	movs	r3, #67	@ 0x43
 801b958:	4a25      	ldr	r2, [pc, #148]	@ (801b9f0 <dhcp_select+0x1f0>)
 801b95a:	6979      	ldr	r1, [r7, #20]
 801b95c:	f7ff fba6 	bl	801b0ac <udp_sendto_if_src>
 801b960:	4603      	mov	r3, r0
 801b962:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801b964:	6978      	ldr	r0, [r7, #20]
 801b966:	f7f8 fc7f 	bl	8014268 <pbuf_free>
 801b96a:	e001      	b.n	801b970 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801b96c:	23ff      	movs	r3, #255	@ 0xff
 801b96e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801b970:	69bb      	ldr	r3, [r7, #24]
 801b972:	799b      	ldrb	r3, [r3, #6]
 801b974:	2bff      	cmp	r3, #255	@ 0xff
 801b976:	d005      	beq.n	801b984 <dhcp_select+0x184>
    dhcp->tries++;
 801b978:	69bb      	ldr	r3, [r7, #24]
 801b97a:	799b      	ldrb	r3, [r3, #6]
 801b97c:	3301      	adds	r3, #1
 801b97e:	b2da      	uxtb	r2, r3
 801b980:	69bb      	ldr	r3, [r7, #24]
 801b982:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801b984:	69bb      	ldr	r3, [r7, #24]
 801b986:	799b      	ldrb	r3, [r3, #6]
 801b988:	2b05      	cmp	r3, #5
 801b98a:	d80d      	bhi.n	801b9a8 <dhcp_select+0x1a8>
 801b98c:	69bb      	ldr	r3, [r7, #24]
 801b98e:	799b      	ldrb	r3, [r3, #6]
 801b990:	461a      	mov	r2, r3
 801b992:	2301      	movs	r3, #1
 801b994:	4093      	lsls	r3, r2
 801b996:	b29b      	uxth	r3, r3
 801b998:	461a      	mov	r2, r3
 801b99a:	0152      	lsls	r2, r2, #5
 801b99c:	1ad2      	subs	r2, r2, r3
 801b99e:	0092      	lsls	r2, r2, #2
 801b9a0:	4413      	add	r3, r2
 801b9a2:	00db      	lsls	r3, r3, #3
 801b9a4:	b29b      	uxth	r3, r3
 801b9a6:	e001      	b.n	801b9ac <dhcp_select+0x1ac>
 801b9a8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801b9ac:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801b9ae:	89fb      	ldrh	r3, [r7, #14]
 801b9b0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801b9b4:	4a0f      	ldr	r2, [pc, #60]	@ (801b9f4 <dhcp_select+0x1f4>)
 801b9b6:	fb82 1203 	smull	r1, r2, r2, r3
 801b9ba:	1152      	asrs	r2, r2, #5
 801b9bc:	17db      	asrs	r3, r3, #31
 801b9be:	1ad3      	subs	r3, r2, r3
 801b9c0:	b29a      	uxth	r2, r3
 801b9c2:	69bb      	ldr	r3, [r7, #24]
 801b9c4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801b9c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b9ca:	4618      	mov	r0, r3
 801b9cc:	3720      	adds	r7, #32
 801b9ce:	46bd      	mov	sp, r7
 801b9d0:	bdb0      	pop	{r4, r5, r7, pc}
 801b9d2:	bf00      	nop
 801b9d4:	08026170 	.word	0x08026170
 801b9d8:	0802621c 	.word	0x0802621c
 801b9dc:	080261d0 	.word	0x080261d0
 801b9e0:	08026238 	.word	0x08026238
 801b9e4:	24000034 	.word	0x24000034
 801b9e8:	2400cb84 	.word	0x2400cb84
 801b9ec:	08026e5c 	.word	0x08026e5c
 801b9f0:	08026e60 	.word	0x08026e60
 801b9f4:	10624dd3 	.word	0x10624dd3

0801b9f8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801b9f8:	b580      	push	{r7, lr}
 801b9fa:	b082      	sub	sp, #8
 801b9fc:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801b9fe:	4b27      	ldr	r3, [pc, #156]	@ (801ba9c <dhcp_coarse_tmr+0xa4>)
 801ba00:	681b      	ldr	r3, [r3, #0]
 801ba02:	607b      	str	r3, [r7, #4]
 801ba04:	e042      	b.n	801ba8c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ba0a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801ba0c:	683b      	ldr	r3, [r7, #0]
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	d039      	beq.n	801ba86 <dhcp_coarse_tmr+0x8e>
 801ba12:	683b      	ldr	r3, [r7, #0]
 801ba14:	795b      	ldrb	r3, [r3, #5]
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	d035      	beq.n	801ba86 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801ba1a:	683b      	ldr	r3, [r7, #0]
 801ba1c:	8a9b      	ldrh	r3, [r3, #20]
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	d012      	beq.n	801ba48 <dhcp_coarse_tmr+0x50>
 801ba22:	683b      	ldr	r3, [r7, #0]
 801ba24:	8a5b      	ldrh	r3, [r3, #18]
 801ba26:	3301      	adds	r3, #1
 801ba28:	b29a      	uxth	r2, r3
 801ba2a:	683b      	ldr	r3, [r7, #0]
 801ba2c:	825a      	strh	r2, [r3, #18]
 801ba2e:	683b      	ldr	r3, [r7, #0]
 801ba30:	8a5a      	ldrh	r2, [r3, #18]
 801ba32:	683b      	ldr	r3, [r7, #0]
 801ba34:	8a9b      	ldrh	r3, [r3, #20]
 801ba36:	429a      	cmp	r2, r3
 801ba38:	d106      	bne.n	801ba48 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801ba3a:	6878      	ldr	r0, [r7, #4]
 801ba3c:	f000 fe2e 	bl	801c69c <dhcp_release_and_stop>
        dhcp_start(netif);
 801ba40:	6878      	ldr	r0, [r7, #4]
 801ba42:	f000 f96b 	bl	801bd1c <dhcp_start>
 801ba46:	e01e      	b.n	801ba86 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801ba48:	683b      	ldr	r3, [r7, #0]
 801ba4a:	8a1b      	ldrh	r3, [r3, #16]
 801ba4c:	2b00      	cmp	r3, #0
 801ba4e:	d00b      	beq.n	801ba68 <dhcp_coarse_tmr+0x70>
 801ba50:	683b      	ldr	r3, [r7, #0]
 801ba52:	8a1b      	ldrh	r3, [r3, #16]
 801ba54:	1e5a      	subs	r2, r3, #1
 801ba56:	b291      	uxth	r1, r2
 801ba58:	683a      	ldr	r2, [r7, #0]
 801ba5a:	8211      	strh	r1, [r2, #16]
 801ba5c:	2b01      	cmp	r3, #1
 801ba5e:	d103      	bne.n	801ba68 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801ba60:	6878      	ldr	r0, [r7, #4]
 801ba62:	f000 f8c7 	bl	801bbf4 <dhcp_t2_timeout>
 801ba66:	e00e      	b.n	801ba86 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801ba68:	683b      	ldr	r3, [r7, #0]
 801ba6a:	89db      	ldrh	r3, [r3, #14]
 801ba6c:	2b00      	cmp	r3, #0
 801ba6e:	d00a      	beq.n	801ba86 <dhcp_coarse_tmr+0x8e>
 801ba70:	683b      	ldr	r3, [r7, #0]
 801ba72:	89db      	ldrh	r3, [r3, #14]
 801ba74:	1e5a      	subs	r2, r3, #1
 801ba76:	b291      	uxth	r1, r2
 801ba78:	683a      	ldr	r2, [r7, #0]
 801ba7a:	81d1      	strh	r1, [r2, #14]
 801ba7c:	2b01      	cmp	r3, #1
 801ba7e:	d102      	bne.n	801ba86 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801ba80:	6878      	ldr	r0, [r7, #4]
 801ba82:	f000 f888 	bl	801bb96 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	681b      	ldr	r3, [r3, #0]
 801ba8a:	607b      	str	r3, [r7, #4]
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	d1b9      	bne.n	801ba06 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801ba92:	bf00      	nop
 801ba94:	bf00      	nop
 801ba96:	3708      	adds	r7, #8
 801ba98:	46bd      	mov	sp, r7
 801ba9a:	bd80      	pop	{r7, pc}
 801ba9c:	2400caf0 	.word	0x2400caf0

0801baa0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801baa0:	b580      	push	{r7, lr}
 801baa2:	b082      	sub	sp, #8
 801baa4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801baa6:	4b16      	ldr	r3, [pc, #88]	@ (801bb00 <dhcp_fine_tmr+0x60>)
 801baa8:	681b      	ldr	r3, [r3, #0]
 801baaa:	607b      	str	r3, [r7, #4]
 801baac:	e020      	b.n	801baf0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801baae:	687b      	ldr	r3, [r7, #4]
 801bab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bab2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801bab4:	683b      	ldr	r3, [r7, #0]
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	d017      	beq.n	801baea <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801baba:	683b      	ldr	r3, [r7, #0]
 801babc:	891b      	ldrh	r3, [r3, #8]
 801babe:	2b01      	cmp	r3, #1
 801bac0:	d906      	bls.n	801bad0 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801bac2:	683b      	ldr	r3, [r7, #0]
 801bac4:	891b      	ldrh	r3, [r3, #8]
 801bac6:	3b01      	subs	r3, #1
 801bac8:	b29a      	uxth	r2, r3
 801baca:	683b      	ldr	r3, [r7, #0]
 801bacc:	811a      	strh	r2, [r3, #8]
 801bace:	e00c      	b.n	801baea <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801bad0:	683b      	ldr	r3, [r7, #0]
 801bad2:	891b      	ldrh	r3, [r3, #8]
 801bad4:	2b01      	cmp	r3, #1
 801bad6:	d108      	bne.n	801baea <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801bad8:	683b      	ldr	r3, [r7, #0]
 801bada:	891b      	ldrh	r3, [r3, #8]
 801badc:	3b01      	subs	r3, #1
 801bade:	b29a      	uxth	r2, r3
 801bae0:	683b      	ldr	r3, [r7, #0]
 801bae2:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801bae4:	6878      	ldr	r0, [r7, #4]
 801bae6:	f000 f80d 	bl	801bb04 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	681b      	ldr	r3, [r3, #0]
 801baee:	607b      	str	r3, [r7, #4]
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	2b00      	cmp	r3, #0
 801baf4:	d1db      	bne.n	801baae <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801baf6:	bf00      	nop
 801baf8:	bf00      	nop
 801bafa:	3708      	adds	r7, #8
 801bafc:	46bd      	mov	sp, r7
 801bafe:	bd80      	pop	{r7, pc}
 801bb00:	2400caf0 	.word	0x2400caf0

0801bb04 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801bb04:	b580      	push	{r7, lr}
 801bb06:	b084      	sub	sp, #16
 801bb08:	af00      	add	r7, sp, #0
 801bb0a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bb10:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801bb12:	68fb      	ldr	r3, [r7, #12]
 801bb14:	795b      	ldrb	r3, [r3, #5]
 801bb16:	2b0c      	cmp	r3, #12
 801bb18:	d003      	beq.n	801bb22 <dhcp_timeout+0x1e>
 801bb1a:	68fb      	ldr	r3, [r7, #12]
 801bb1c:	795b      	ldrb	r3, [r3, #5]
 801bb1e:	2b06      	cmp	r3, #6
 801bb20:	d103      	bne.n	801bb2a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801bb22:	6878      	ldr	r0, [r7, #4]
 801bb24:	f000 fa56 	bl	801bfd4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801bb28:	e031      	b.n	801bb8e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801bb2a:	68fb      	ldr	r3, [r7, #12]
 801bb2c:	795b      	ldrb	r3, [r3, #5]
 801bb2e:	2b01      	cmp	r3, #1
 801bb30:	d10e      	bne.n	801bb50 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801bb32:	68fb      	ldr	r3, [r7, #12]
 801bb34:	799b      	ldrb	r3, [r3, #6]
 801bb36:	2b05      	cmp	r3, #5
 801bb38:	d803      	bhi.n	801bb42 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801bb3a:	6878      	ldr	r0, [r7, #4]
 801bb3c:	f7ff fe60 	bl	801b800 <dhcp_select>
}
 801bb40:	e025      	b.n	801bb8e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801bb42:	6878      	ldr	r0, [r7, #4]
 801bb44:	f000 fdaa 	bl	801c69c <dhcp_release_and_stop>
      dhcp_start(netif);
 801bb48:	6878      	ldr	r0, [r7, #4]
 801bb4a:	f000 f8e7 	bl	801bd1c <dhcp_start>
}
 801bb4e:	e01e      	b.n	801bb8e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801bb50:	68fb      	ldr	r3, [r7, #12]
 801bb52:	795b      	ldrb	r3, [r3, #5]
 801bb54:	2b08      	cmp	r3, #8
 801bb56:	d10b      	bne.n	801bb70 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801bb58:	68fb      	ldr	r3, [r7, #12]
 801bb5a:	799b      	ldrb	r3, [r3, #6]
 801bb5c:	2b01      	cmp	r3, #1
 801bb5e:	d803      	bhi.n	801bb68 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801bb60:	6878      	ldr	r0, [r7, #4]
 801bb62:	f7ff fdf3 	bl	801b74c <dhcp_check>
}
 801bb66:	e012      	b.n	801bb8e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801bb68:	6878      	ldr	r0, [r7, #4]
 801bb6a:	f000 fad5 	bl	801c118 <dhcp_bind>
}
 801bb6e:	e00e      	b.n	801bb8e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801bb70:	68fb      	ldr	r3, [r7, #12]
 801bb72:	795b      	ldrb	r3, [r3, #5]
 801bb74:	2b03      	cmp	r3, #3
 801bb76:	d10a      	bne.n	801bb8e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801bb78:	68fb      	ldr	r3, [r7, #12]
 801bb7a:	799b      	ldrb	r3, [r3, #6]
 801bb7c:	2b01      	cmp	r3, #1
 801bb7e:	d803      	bhi.n	801bb88 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801bb80:	6878      	ldr	r0, [r7, #4]
 801bb82:	f000 fcd7 	bl	801c534 <dhcp_reboot>
}
 801bb86:	e002      	b.n	801bb8e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801bb88:	6878      	ldr	r0, [r7, #4]
 801bb8a:	f000 fa23 	bl	801bfd4 <dhcp_discover>
}
 801bb8e:	bf00      	nop
 801bb90:	3710      	adds	r7, #16
 801bb92:	46bd      	mov	sp, r7
 801bb94:	bd80      	pop	{r7, pc}

0801bb96 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801bb96:	b580      	push	{r7, lr}
 801bb98:	b084      	sub	sp, #16
 801bb9a:	af00      	add	r7, sp, #0
 801bb9c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bba2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801bba4:	68fb      	ldr	r3, [r7, #12]
 801bba6:	795b      	ldrb	r3, [r3, #5]
 801bba8:	2b01      	cmp	r3, #1
 801bbaa:	d007      	beq.n	801bbbc <dhcp_t1_timeout+0x26>
 801bbac:	68fb      	ldr	r3, [r7, #12]
 801bbae:	795b      	ldrb	r3, [r3, #5]
 801bbb0:	2b0a      	cmp	r3, #10
 801bbb2:	d003      	beq.n	801bbbc <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801bbb4:	68fb      	ldr	r3, [r7, #12]
 801bbb6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801bbb8:	2b05      	cmp	r3, #5
 801bbba:	d117      	bne.n	801bbec <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801bbbc:	6878      	ldr	r0, [r7, #4]
 801bbbe:	f000 fb85 	bl	801c2cc <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801bbc2:	68fb      	ldr	r3, [r7, #12]
 801bbc4:	899b      	ldrh	r3, [r3, #12]
 801bbc6:	461a      	mov	r2, r3
 801bbc8:	68fb      	ldr	r3, [r7, #12]
 801bbca:	8a5b      	ldrh	r3, [r3, #18]
 801bbcc:	1ad3      	subs	r3, r2, r3
 801bbce:	2b01      	cmp	r3, #1
 801bbd0:	dd0c      	ble.n	801bbec <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801bbd2:	68fb      	ldr	r3, [r7, #12]
 801bbd4:	899b      	ldrh	r3, [r3, #12]
 801bbd6:	461a      	mov	r2, r3
 801bbd8:	68fb      	ldr	r3, [r7, #12]
 801bbda:	8a5b      	ldrh	r3, [r3, #18]
 801bbdc:	1ad3      	subs	r3, r2, r3
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	da00      	bge.n	801bbe4 <dhcp_t1_timeout+0x4e>
 801bbe2:	3301      	adds	r3, #1
 801bbe4:	105b      	asrs	r3, r3, #1
 801bbe6:	b29a      	uxth	r2, r3
 801bbe8:	68fb      	ldr	r3, [r7, #12]
 801bbea:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801bbec:	bf00      	nop
 801bbee:	3710      	adds	r7, #16
 801bbf0:	46bd      	mov	sp, r7
 801bbf2:	bd80      	pop	{r7, pc}

0801bbf4 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801bbf4:	b580      	push	{r7, lr}
 801bbf6:	b084      	sub	sp, #16
 801bbf8:	af00      	add	r7, sp, #0
 801bbfa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bbfc:	687b      	ldr	r3, [r7, #4]
 801bbfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bc00:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801bc02:	68fb      	ldr	r3, [r7, #12]
 801bc04:	795b      	ldrb	r3, [r3, #5]
 801bc06:	2b01      	cmp	r3, #1
 801bc08:	d00b      	beq.n	801bc22 <dhcp_t2_timeout+0x2e>
 801bc0a:	68fb      	ldr	r3, [r7, #12]
 801bc0c:	795b      	ldrb	r3, [r3, #5]
 801bc0e:	2b0a      	cmp	r3, #10
 801bc10:	d007      	beq.n	801bc22 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801bc12:	68fb      	ldr	r3, [r7, #12]
 801bc14:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801bc16:	2b05      	cmp	r3, #5
 801bc18:	d003      	beq.n	801bc22 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801bc1a:	68fb      	ldr	r3, [r7, #12]
 801bc1c:	795b      	ldrb	r3, [r3, #5]
 801bc1e:	2b04      	cmp	r3, #4
 801bc20:	d117      	bne.n	801bc52 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801bc22:	6878      	ldr	r0, [r7, #4]
 801bc24:	f000 fbec 	bl	801c400 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801bc28:	68fb      	ldr	r3, [r7, #12]
 801bc2a:	8a9b      	ldrh	r3, [r3, #20]
 801bc2c:	461a      	mov	r2, r3
 801bc2e:	68fb      	ldr	r3, [r7, #12]
 801bc30:	8a5b      	ldrh	r3, [r3, #18]
 801bc32:	1ad3      	subs	r3, r2, r3
 801bc34:	2b01      	cmp	r3, #1
 801bc36:	dd0c      	ble.n	801bc52 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801bc38:	68fb      	ldr	r3, [r7, #12]
 801bc3a:	8a9b      	ldrh	r3, [r3, #20]
 801bc3c:	461a      	mov	r2, r3
 801bc3e:	68fb      	ldr	r3, [r7, #12]
 801bc40:	8a5b      	ldrh	r3, [r3, #18]
 801bc42:	1ad3      	subs	r3, r2, r3
 801bc44:	2b00      	cmp	r3, #0
 801bc46:	da00      	bge.n	801bc4a <dhcp_t2_timeout+0x56>
 801bc48:	3301      	adds	r3, #1
 801bc4a:	105b      	asrs	r3, r3, #1
 801bc4c:	b29a      	uxth	r2, r3
 801bc4e:	68fb      	ldr	r3, [r7, #12]
 801bc50:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801bc52:	bf00      	nop
 801bc54:	3710      	adds	r7, #16
 801bc56:	46bd      	mov	sp, r7
 801bc58:	bd80      	pop	{r7, pc}
	...

0801bc5c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801bc5c:	b580      	push	{r7, lr}
 801bc5e:	b084      	sub	sp, #16
 801bc60:	af00      	add	r7, sp, #0
 801bc62:	6078      	str	r0, [r7, #4]
 801bc64:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bc6a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801bc6c:	68fb      	ldr	r3, [r7, #12]
 801bc6e:	2200      	movs	r2, #0
 801bc70:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801bc72:	68fb      	ldr	r3, [r7, #12]
 801bc74:	2200      	movs	r2, #0
 801bc76:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801bc78:	4b26      	ldr	r3, [pc, #152]	@ (801bd14 <dhcp_handle_ack+0xb8>)
 801bc7a:	78db      	ldrb	r3, [r3, #3]
 801bc7c:	2b00      	cmp	r3, #0
 801bc7e:	d003      	beq.n	801bc88 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801bc80:	4b25      	ldr	r3, [pc, #148]	@ (801bd18 <dhcp_handle_ack+0xbc>)
 801bc82:	68da      	ldr	r2, [r3, #12]
 801bc84:	68fb      	ldr	r3, [r7, #12]
 801bc86:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801bc88:	4b22      	ldr	r3, [pc, #136]	@ (801bd14 <dhcp_handle_ack+0xb8>)
 801bc8a:	791b      	ldrb	r3, [r3, #4]
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d004      	beq.n	801bc9a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801bc90:	4b21      	ldr	r3, [pc, #132]	@ (801bd18 <dhcp_handle_ack+0xbc>)
 801bc92:	691a      	ldr	r2, [r3, #16]
 801bc94:	68fb      	ldr	r3, [r7, #12]
 801bc96:	62da      	str	r2, [r3, #44]	@ 0x2c
 801bc98:	e004      	b.n	801bca4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801bc9a:	68fb      	ldr	r3, [r7, #12]
 801bc9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bc9e:	085a      	lsrs	r2, r3, #1
 801bca0:	68fb      	ldr	r3, [r7, #12]
 801bca2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801bca4:	4b1b      	ldr	r3, [pc, #108]	@ (801bd14 <dhcp_handle_ack+0xb8>)
 801bca6:	795b      	ldrb	r3, [r3, #5]
 801bca8:	2b00      	cmp	r3, #0
 801bcaa:	d004      	beq.n	801bcb6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801bcac:	4b1a      	ldr	r3, [pc, #104]	@ (801bd18 <dhcp_handle_ack+0xbc>)
 801bcae:	695a      	ldr	r2, [r3, #20]
 801bcb0:	68fb      	ldr	r3, [r7, #12]
 801bcb2:	631a      	str	r2, [r3, #48]	@ 0x30
 801bcb4:	e007      	b.n	801bcc6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801bcb6:	68fb      	ldr	r3, [r7, #12]
 801bcb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801bcba:	4613      	mov	r3, r2
 801bcbc:	00db      	lsls	r3, r3, #3
 801bcbe:	1a9b      	subs	r3, r3, r2
 801bcc0:	08da      	lsrs	r2, r3, #3
 801bcc2:	68fb      	ldr	r3, [r7, #12]
 801bcc4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801bcc6:	683b      	ldr	r3, [r7, #0]
 801bcc8:	691a      	ldr	r2, [r3, #16]
 801bcca:	68fb      	ldr	r3, [r7, #12]
 801bccc:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801bcce:	4b11      	ldr	r3, [pc, #68]	@ (801bd14 <dhcp_handle_ack+0xb8>)
 801bcd0:	799b      	ldrb	r3, [r3, #6]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	d00b      	beq.n	801bcee <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801bcd6:	4b10      	ldr	r3, [pc, #64]	@ (801bd18 <dhcp_handle_ack+0xbc>)
 801bcd8:	699b      	ldr	r3, [r3, #24]
 801bcda:	4618      	mov	r0, r3
 801bcdc:	f7f6 fe23 	bl	8012926 <lwip_htonl>
 801bce0:	4602      	mov	r2, r0
 801bce2:	68fb      	ldr	r3, [r7, #12]
 801bce4:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801bce6:	68fb      	ldr	r3, [r7, #12]
 801bce8:	2201      	movs	r2, #1
 801bcea:	71da      	strb	r2, [r3, #7]
 801bcec:	e002      	b.n	801bcf4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801bcee:	68fb      	ldr	r3, [r7, #12]
 801bcf0:	2200      	movs	r2, #0
 801bcf2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801bcf4:	4b07      	ldr	r3, [pc, #28]	@ (801bd14 <dhcp_handle_ack+0xb8>)
 801bcf6:	79db      	ldrb	r3, [r3, #7]
 801bcf8:	2b00      	cmp	r3, #0
 801bcfa:	d007      	beq.n	801bd0c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801bcfc:	4b06      	ldr	r3, [pc, #24]	@ (801bd18 <dhcp_handle_ack+0xbc>)
 801bcfe:	69db      	ldr	r3, [r3, #28]
 801bd00:	4618      	mov	r0, r3
 801bd02:	f7f6 fe10 	bl	8012926 <lwip_htonl>
 801bd06:	4602      	mov	r2, r0
 801bd08:	68fb      	ldr	r3, [r7, #12]
 801bd0a:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801bd0c:	bf00      	nop
 801bd0e:	3710      	adds	r7, #16
 801bd10:	46bd      	mov	sp, r7
 801bd12:	bd80      	pop	{r7, pc}
 801bd14:	2400cb7c 	.word	0x2400cb7c
 801bd18:	2400cb5c 	.word	0x2400cb5c

0801bd1c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801bd1c:	b580      	push	{r7, lr}
 801bd1e:	b084      	sub	sp, #16
 801bd20:	af00      	add	r7, sp, #0
 801bd22:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	2b00      	cmp	r3, #0
 801bd28:	d109      	bne.n	801bd3e <dhcp_start+0x22>
 801bd2a:	4b37      	ldr	r3, [pc, #220]	@ (801be08 <dhcp_start+0xec>)
 801bd2c:	f240 22e7 	movw	r2, #743	@ 0x2e7
 801bd30:	4936      	ldr	r1, [pc, #216]	@ (801be0c <dhcp_start+0xf0>)
 801bd32:	4837      	ldr	r0, [pc, #220]	@ (801be10 <dhcp_start+0xf4>)
 801bd34:	f004 fe26 	bl	8020984 <iprintf>
 801bd38:	f06f 030f 	mvn.w	r3, #15
 801bd3c:	e060      	b.n	801be00 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bd44:	f003 0301 	and.w	r3, r3, #1
 801bd48:	2b00      	cmp	r3, #0
 801bd4a:	d109      	bne.n	801bd60 <dhcp_start+0x44>
 801bd4c:	4b2e      	ldr	r3, [pc, #184]	@ (801be08 <dhcp_start+0xec>)
 801bd4e:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 801bd52:	4930      	ldr	r1, [pc, #192]	@ (801be14 <dhcp_start+0xf8>)
 801bd54:	482e      	ldr	r0, [pc, #184]	@ (801be10 <dhcp_start+0xf4>)
 801bd56:	f004 fe15 	bl	8020984 <iprintf>
 801bd5a:	f06f 030f 	mvn.w	r3, #15
 801bd5e:	e04f      	b.n	801be00 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801bd60:	687b      	ldr	r3, [r7, #4]
 801bd62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bd64:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801bd6a:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 801bd6e:	d202      	bcs.n	801bd76 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801bd70:	f04f 33ff 	mov.w	r3, #4294967295
 801bd74:	e044      	b.n	801be00 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801bd76:	68fb      	ldr	r3, [r7, #12]
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	d10d      	bne.n	801bd98 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801bd7c:	2034      	movs	r0, #52	@ 0x34
 801bd7e:	f7f7 f9a9 	bl	80130d4 <mem_malloc>
 801bd82:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801bd84:	68fb      	ldr	r3, [r7, #12]
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	d102      	bne.n	801bd90 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801bd8a:	f04f 33ff 	mov.w	r3, #4294967295
 801bd8e:	e037      	b.n	801be00 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	68fa      	ldr	r2, [r7, #12]
 801bd94:	625a      	str	r2, [r3, #36]	@ 0x24
 801bd96:	e005      	b.n	801bda4 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801bd98:	68fb      	ldr	r3, [r7, #12]
 801bd9a:	791b      	ldrb	r3, [r3, #4]
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	d001      	beq.n	801bda4 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801bda0:	f7ff fc90 	bl	801b6c4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801bda4:	2234      	movs	r2, #52	@ 0x34
 801bda6:	2100      	movs	r1, #0
 801bda8:	68f8      	ldr	r0, [r7, #12]
 801bdaa:	f004 ff91 	bl	8020cd0 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801bdae:	f7ff fc37 	bl	801b620 <dhcp_inc_pcb_refcount>
 801bdb2:	4603      	mov	r3, r0
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	d002      	beq.n	801bdbe <dhcp_start+0xa2>
    return ERR_MEM;
 801bdb8:	f04f 33ff 	mov.w	r3, #4294967295
 801bdbc:	e020      	b.n	801be00 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801bdbe:	68fb      	ldr	r3, [r7, #12]
 801bdc0:	2201      	movs	r2, #1
 801bdc2:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bdca:	f003 0304 	and.w	r3, r3, #4
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	d105      	bne.n	801bdde <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801bdd2:	2102      	movs	r1, #2
 801bdd4:	68f8      	ldr	r0, [r7, #12]
 801bdd6:	f000 fcfb 	bl	801c7d0 <dhcp_set_state>
    return ERR_OK;
 801bdda:	2300      	movs	r3, #0
 801bddc:	e010      	b.n	801be00 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801bdde:	6878      	ldr	r0, [r7, #4]
 801bde0:	f000 f8f8 	bl	801bfd4 <dhcp_discover>
 801bde4:	4603      	mov	r3, r0
 801bde6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801bde8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801bdec:	2b00      	cmp	r3, #0
 801bdee:	d005      	beq.n	801bdfc <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801bdf0:	6878      	ldr	r0, [r7, #4]
 801bdf2:	f000 fc53 	bl	801c69c <dhcp_release_and_stop>
    return ERR_MEM;
 801bdf6:	f04f 33ff 	mov.w	r3, #4294967295
 801bdfa:	e001      	b.n	801be00 <dhcp_start+0xe4>
  }
  return result;
 801bdfc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801be00:	4618      	mov	r0, r3
 801be02:	3710      	adds	r7, #16
 801be04:	46bd      	mov	sp, r7
 801be06:	bd80      	pop	{r7, pc}
 801be08:	08026170 	.word	0x08026170
 801be0c:	08026254 	.word	0x08026254
 801be10:	080261d0 	.word	0x080261d0
 801be14:	08026298 	.word	0x08026298

0801be18 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801be18:	b580      	push	{r7, lr}
 801be1a:	b084      	sub	sp, #16
 801be1c:	af00      	add	r7, sp, #0
 801be1e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801be24:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801be26:	68fb      	ldr	r3, [r7, #12]
 801be28:	2b00      	cmp	r3, #0
 801be2a:	d025      	beq.n	801be78 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801be2c:	68fb      	ldr	r3, [r7, #12]
 801be2e:	795b      	ldrb	r3, [r3, #5]
 801be30:	2b0a      	cmp	r3, #10
 801be32:	d008      	beq.n	801be46 <dhcp_network_changed+0x2e>
 801be34:	2b0a      	cmp	r3, #10
 801be36:	dc0d      	bgt.n	801be54 <dhcp_network_changed+0x3c>
 801be38:	2b00      	cmp	r3, #0
 801be3a:	d01f      	beq.n	801be7c <dhcp_network_changed+0x64>
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	db09      	blt.n	801be54 <dhcp_network_changed+0x3c>
 801be40:	3b03      	subs	r3, #3
 801be42:	2b02      	cmp	r3, #2
 801be44:	d806      	bhi.n	801be54 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801be46:	68fb      	ldr	r3, [r7, #12]
 801be48:	2200      	movs	r2, #0
 801be4a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801be4c:	6878      	ldr	r0, [r7, #4]
 801be4e:	f000 fb71 	bl	801c534 <dhcp_reboot>
      break;
 801be52:	e014      	b.n	801be7e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801be54:	68fb      	ldr	r3, [r7, #12]
 801be56:	795b      	ldrb	r3, [r3, #5]
 801be58:	2b0c      	cmp	r3, #12
 801be5a:	d906      	bls.n	801be6a <dhcp_network_changed+0x52>
 801be5c:	4b09      	ldr	r3, [pc, #36]	@ (801be84 <dhcp_network_changed+0x6c>)
 801be5e:	f240 326d 	movw	r2, #877	@ 0x36d
 801be62:	4909      	ldr	r1, [pc, #36]	@ (801be88 <dhcp_network_changed+0x70>)
 801be64:	4809      	ldr	r0, [pc, #36]	@ (801be8c <dhcp_network_changed+0x74>)
 801be66:	f004 fd8d 	bl	8020984 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801be6a:	68fb      	ldr	r3, [r7, #12]
 801be6c:	2200      	movs	r2, #0
 801be6e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801be70:	6878      	ldr	r0, [r7, #4]
 801be72:	f000 f8af 	bl	801bfd4 <dhcp_discover>
      break;
 801be76:	e002      	b.n	801be7e <dhcp_network_changed+0x66>
    return;
 801be78:	bf00      	nop
 801be7a:	e000      	b.n	801be7e <dhcp_network_changed+0x66>
      break;
 801be7c:	bf00      	nop
  }
}
 801be7e:	3710      	adds	r7, #16
 801be80:	46bd      	mov	sp, r7
 801be82:	bd80      	pop	{r7, pc}
 801be84:	08026170 	.word	0x08026170
 801be88:	080262bc 	.word	0x080262bc
 801be8c:	080261d0 	.word	0x080261d0

0801be90 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801be90:	b580      	push	{r7, lr}
 801be92:	b084      	sub	sp, #16
 801be94:	af00      	add	r7, sp, #0
 801be96:	6078      	str	r0, [r7, #4]
 801be98:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	2b00      	cmp	r3, #0
 801be9e:	d107      	bne.n	801beb0 <dhcp_arp_reply+0x20>
 801bea0:	4b0e      	ldr	r3, [pc, #56]	@ (801bedc <dhcp_arp_reply+0x4c>)
 801bea2:	f240 328b 	movw	r2, #907	@ 0x38b
 801bea6:	490e      	ldr	r1, [pc, #56]	@ (801bee0 <dhcp_arp_reply+0x50>)
 801bea8:	480e      	ldr	r0, [pc, #56]	@ (801bee4 <dhcp_arp_reply+0x54>)
 801beaa:	f004 fd6b 	bl	8020984 <iprintf>
 801beae:	e012      	b.n	801bed6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801beb4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801beb6:	68fb      	ldr	r3, [r7, #12]
 801beb8:	2b00      	cmp	r3, #0
 801beba:	d00c      	beq.n	801bed6 <dhcp_arp_reply+0x46>
 801bebc:	68fb      	ldr	r3, [r7, #12]
 801bebe:	795b      	ldrb	r3, [r3, #5]
 801bec0:	2b08      	cmp	r3, #8
 801bec2:	d108      	bne.n	801bed6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801bec4:	683b      	ldr	r3, [r7, #0]
 801bec6:	681a      	ldr	r2, [r3, #0]
 801bec8:	68fb      	ldr	r3, [r7, #12]
 801beca:	69db      	ldr	r3, [r3, #28]
 801becc:	429a      	cmp	r2, r3
 801bece:	d102      	bne.n	801bed6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801bed0:	6878      	ldr	r0, [r7, #4]
 801bed2:	f000 f809 	bl	801bee8 <dhcp_decline>
    }
  }
}
 801bed6:	3710      	adds	r7, #16
 801bed8:	46bd      	mov	sp, r7
 801beda:	bd80      	pop	{r7, pc}
 801bedc:	08026170 	.word	0x08026170
 801bee0:	08026254 	.word	0x08026254
 801bee4:	080261d0 	.word	0x080261d0

0801bee8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801bee8:	b5b0      	push	{r4, r5, r7, lr}
 801beea:	b08a      	sub	sp, #40	@ 0x28
 801beec:	af02      	add	r7, sp, #8
 801beee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bef4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801bef6:	210c      	movs	r1, #12
 801bef8:	69b8      	ldr	r0, [r7, #24]
 801befa:	f000 fc69 	bl	801c7d0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801befe:	f107 030c 	add.w	r3, r7, #12
 801bf02:	2204      	movs	r2, #4
 801bf04:	69b9      	ldr	r1, [r7, #24]
 801bf06:	6878      	ldr	r0, [r7, #4]
 801bf08:	f001 f8ee 	bl	801d0e8 <dhcp_create_msg>
 801bf0c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801bf0e:	697b      	ldr	r3, [r7, #20]
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d035      	beq.n	801bf80 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801bf14:	697b      	ldr	r3, [r7, #20]
 801bf16:	685b      	ldr	r3, [r3, #4]
 801bf18:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801bf1a:	89b8      	ldrh	r0, [r7, #12]
 801bf1c:	693b      	ldr	r3, [r7, #16]
 801bf1e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801bf22:	2304      	movs	r3, #4
 801bf24:	2232      	movs	r2, #50	@ 0x32
 801bf26:	f000 fc6d 	bl	801c804 <dhcp_option>
 801bf2a:	4603      	mov	r3, r0
 801bf2c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801bf2e:	89bc      	ldrh	r4, [r7, #12]
 801bf30:	693b      	ldr	r3, [r7, #16]
 801bf32:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801bf36:	69bb      	ldr	r3, [r7, #24]
 801bf38:	69db      	ldr	r3, [r3, #28]
 801bf3a:	4618      	mov	r0, r3
 801bf3c:	f7f6 fcf3 	bl	8012926 <lwip_htonl>
 801bf40:	4603      	mov	r3, r0
 801bf42:	461a      	mov	r2, r3
 801bf44:	4629      	mov	r1, r5
 801bf46:	4620      	mov	r0, r4
 801bf48:	f000 fce8 	bl	801c91c <dhcp_option_long>
 801bf4c:	4603      	mov	r3, r0
 801bf4e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801bf50:	89b8      	ldrh	r0, [r7, #12]
 801bf52:	693b      	ldr	r3, [r7, #16]
 801bf54:	33f0      	adds	r3, #240	@ 0xf0
 801bf56:	697a      	ldr	r2, [r7, #20]
 801bf58:	4619      	mov	r1, r3
 801bf5a:	f001 f99b 	bl	801d294 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801bf5e:	4b19      	ldr	r3, [pc, #100]	@ (801bfc4 <dhcp_decline+0xdc>)
 801bf60:	6818      	ldr	r0, [r3, #0]
 801bf62:	4b19      	ldr	r3, [pc, #100]	@ (801bfc8 <dhcp_decline+0xe0>)
 801bf64:	9301      	str	r3, [sp, #4]
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	9300      	str	r3, [sp, #0]
 801bf6a:	2343      	movs	r3, #67	@ 0x43
 801bf6c:	4a17      	ldr	r2, [pc, #92]	@ (801bfcc <dhcp_decline+0xe4>)
 801bf6e:	6979      	ldr	r1, [r7, #20]
 801bf70:	f7ff f89c 	bl	801b0ac <udp_sendto_if_src>
 801bf74:	4603      	mov	r3, r0
 801bf76:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801bf78:	6978      	ldr	r0, [r7, #20]
 801bf7a:	f7f8 f975 	bl	8014268 <pbuf_free>
 801bf7e:	e001      	b.n	801bf84 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801bf80:	23ff      	movs	r3, #255	@ 0xff
 801bf82:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801bf84:	69bb      	ldr	r3, [r7, #24]
 801bf86:	799b      	ldrb	r3, [r3, #6]
 801bf88:	2bff      	cmp	r3, #255	@ 0xff
 801bf8a:	d005      	beq.n	801bf98 <dhcp_decline+0xb0>
    dhcp->tries++;
 801bf8c:	69bb      	ldr	r3, [r7, #24]
 801bf8e:	799b      	ldrb	r3, [r3, #6]
 801bf90:	3301      	adds	r3, #1
 801bf92:	b2da      	uxtb	r2, r3
 801bf94:	69bb      	ldr	r3, [r7, #24]
 801bf96:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801bf98:	f242 7310 	movw	r3, #10000	@ 0x2710
 801bf9c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801bf9e:	89fb      	ldrh	r3, [r7, #14]
 801bfa0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801bfa4:	4a0a      	ldr	r2, [pc, #40]	@ (801bfd0 <dhcp_decline+0xe8>)
 801bfa6:	fb82 1203 	smull	r1, r2, r2, r3
 801bfaa:	1152      	asrs	r2, r2, #5
 801bfac:	17db      	asrs	r3, r3, #31
 801bfae:	1ad3      	subs	r3, r2, r3
 801bfb0:	b29a      	uxth	r2, r3
 801bfb2:	69bb      	ldr	r3, [r7, #24]
 801bfb4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801bfb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801bfba:	4618      	mov	r0, r3
 801bfbc:	3720      	adds	r7, #32
 801bfbe:	46bd      	mov	sp, r7
 801bfc0:	bdb0      	pop	{r4, r5, r7, pc}
 801bfc2:	bf00      	nop
 801bfc4:	2400cb84 	.word	0x2400cb84
 801bfc8:	08026e5c 	.word	0x08026e5c
 801bfcc:	08026e60 	.word	0x08026e60
 801bfd0:	10624dd3 	.word	0x10624dd3

0801bfd4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801bfd4:	b580      	push	{r7, lr}
 801bfd6:	b08a      	sub	sp, #40	@ 0x28
 801bfd8:	af02      	add	r7, sp, #8
 801bfda:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bfe0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801bfe2:	2300      	movs	r3, #0
 801bfe4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801bfe6:	69bb      	ldr	r3, [r7, #24]
 801bfe8:	2200      	movs	r2, #0
 801bfea:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801bfec:	2106      	movs	r1, #6
 801bfee:	69b8      	ldr	r0, [r7, #24]
 801bff0:	f000 fbee 	bl	801c7d0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801bff4:	f107 0308 	add.w	r3, r7, #8
 801bff8:	2201      	movs	r2, #1
 801bffa:	69b9      	ldr	r1, [r7, #24]
 801bffc:	6878      	ldr	r0, [r7, #4]
 801bffe:	f001 f873 	bl	801d0e8 <dhcp_create_msg>
 801c002:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801c004:	693b      	ldr	r3, [r7, #16]
 801c006:	2b00      	cmp	r3, #0
 801c008:	d04b      	beq.n	801c0a2 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c00a:	693b      	ldr	r3, [r7, #16]
 801c00c:	685b      	ldr	r3, [r3, #4]
 801c00e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c010:	8938      	ldrh	r0, [r7, #8]
 801c012:	68fb      	ldr	r3, [r7, #12]
 801c014:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c018:	2302      	movs	r3, #2
 801c01a:	2239      	movs	r2, #57	@ 0x39
 801c01c:	f000 fbf2 	bl	801c804 <dhcp_option>
 801c020:	4603      	mov	r3, r0
 801c022:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c024:	8938      	ldrh	r0, [r7, #8]
 801c026:	68fb      	ldr	r3, [r7, #12]
 801c028:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c02c:	687b      	ldr	r3, [r7, #4]
 801c02e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c030:	461a      	mov	r2, r3
 801c032:	f000 fc41 	bl	801c8b8 <dhcp_option_short>
 801c036:	4603      	mov	r3, r0
 801c038:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c03a:	8938      	ldrh	r0, [r7, #8]
 801c03c:	68fb      	ldr	r3, [r7, #12]
 801c03e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c042:	2303      	movs	r3, #3
 801c044:	2237      	movs	r2, #55	@ 0x37
 801c046:	f000 fbdd 	bl	801c804 <dhcp_option>
 801c04a:	4603      	mov	r3, r0
 801c04c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c04e:	2300      	movs	r3, #0
 801c050:	77fb      	strb	r3, [r7, #31]
 801c052:	e00e      	b.n	801c072 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c054:	8938      	ldrh	r0, [r7, #8]
 801c056:	68fb      	ldr	r3, [r7, #12]
 801c058:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c05c:	7ffb      	ldrb	r3, [r7, #31]
 801c05e:	4a29      	ldr	r2, [pc, #164]	@ (801c104 <dhcp_discover+0x130>)
 801c060:	5cd3      	ldrb	r3, [r2, r3]
 801c062:	461a      	mov	r2, r3
 801c064:	f000 fc02 	bl	801c86c <dhcp_option_byte>
 801c068:	4603      	mov	r3, r0
 801c06a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c06c:	7ffb      	ldrb	r3, [r7, #31]
 801c06e:	3301      	adds	r3, #1
 801c070:	77fb      	strb	r3, [r7, #31]
 801c072:	7ffb      	ldrb	r3, [r7, #31]
 801c074:	2b02      	cmp	r3, #2
 801c076:	d9ed      	bls.n	801c054 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c078:	8938      	ldrh	r0, [r7, #8]
 801c07a:	68fb      	ldr	r3, [r7, #12]
 801c07c:	33f0      	adds	r3, #240	@ 0xf0
 801c07e:	693a      	ldr	r2, [r7, #16]
 801c080:	4619      	mov	r1, r3
 801c082:	f001 f907 	bl	801d294 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801c086:	4b20      	ldr	r3, [pc, #128]	@ (801c108 <dhcp_discover+0x134>)
 801c088:	6818      	ldr	r0, [r3, #0]
 801c08a:	4b20      	ldr	r3, [pc, #128]	@ (801c10c <dhcp_discover+0x138>)
 801c08c:	9301      	str	r3, [sp, #4]
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	9300      	str	r3, [sp, #0]
 801c092:	2343      	movs	r3, #67	@ 0x43
 801c094:	4a1e      	ldr	r2, [pc, #120]	@ (801c110 <dhcp_discover+0x13c>)
 801c096:	6939      	ldr	r1, [r7, #16]
 801c098:	f7ff f808 	bl	801b0ac <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801c09c:	6938      	ldr	r0, [r7, #16]
 801c09e:	f7f8 f8e3 	bl	8014268 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801c0a2:	69bb      	ldr	r3, [r7, #24]
 801c0a4:	799b      	ldrb	r3, [r3, #6]
 801c0a6:	2bff      	cmp	r3, #255	@ 0xff
 801c0a8:	d005      	beq.n	801c0b6 <dhcp_discover+0xe2>
    dhcp->tries++;
 801c0aa:	69bb      	ldr	r3, [r7, #24]
 801c0ac:	799b      	ldrb	r3, [r3, #6]
 801c0ae:	3301      	adds	r3, #1
 801c0b0:	b2da      	uxtb	r2, r3
 801c0b2:	69bb      	ldr	r3, [r7, #24]
 801c0b4:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801c0b6:	69bb      	ldr	r3, [r7, #24]
 801c0b8:	799b      	ldrb	r3, [r3, #6]
 801c0ba:	2b05      	cmp	r3, #5
 801c0bc:	d80d      	bhi.n	801c0da <dhcp_discover+0x106>
 801c0be:	69bb      	ldr	r3, [r7, #24]
 801c0c0:	799b      	ldrb	r3, [r3, #6]
 801c0c2:	461a      	mov	r2, r3
 801c0c4:	2301      	movs	r3, #1
 801c0c6:	4093      	lsls	r3, r2
 801c0c8:	b29b      	uxth	r3, r3
 801c0ca:	461a      	mov	r2, r3
 801c0cc:	0152      	lsls	r2, r2, #5
 801c0ce:	1ad2      	subs	r2, r2, r3
 801c0d0:	0092      	lsls	r2, r2, #2
 801c0d2:	4413      	add	r3, r2
 801c0d4:	00db      	lsls	r3, r3, #3
 801c0d6:	b29b      	uxth	r3, r3
 801c0d8:	e001      	b.n	801c0de <dhcp_discover+0x10a>
 801c0da:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801c0de:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c0e0:	897b      	ldrh	r3, [r7, #10]
 801c0e2:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801c0e6:	4a0b      	ldr	r2, [pc, #44]	@ (801c114 <dhcp_discover+0x140>)
 801c0e8:	fb82 1203 	smull	r1, r2, r2, r3
 801c0ec:	1152      	asrs	r2, r2, #5
 801c0ee:	17db      	asrs	r3, r3, #31
 801c0f0:	1ad3      	subs	r3, r2, r3
 801c0f2:	b29a      	uxth	r2, r3
 801c0f4:	69bb      	ldr	r3, [r7, #24]
 801c0f6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c0f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c0fc:	4618      	mov	r0, r3
 801c0fe:	3720      	adds	r7, #32
 801c100:	46bd      	mov	sp, r7
 801c102:	bd80      	pop	{r7, pc}
 801c104:	24000034 	.word	0x24000034
 801c108:	2400cb84 	.word	0x2400cb84
 801c10c:	08026e5c 	.word	0x08026e5c
 801c110:	08026e60 	.word	0x08026e60
 801c114:	10624dd3 	.word	0x10624dd3

0801c118 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801c118:	b580      	push	{r7, lr}
 801c11a:	b088      	sub	sp, #32
 801c11c:	af00      	add	r7, sp, #0
 801c11e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	2b00      	cmp	r3, #0
 801c124:	d107      	bne.n	801c136 <dhcp_bind+0x1e>
 801c126:	4b64      	ldr	r3, [pc, #400]	@ (801c2b8 <dhcp_bind+0x1a0>)
 801c128:	f240 4215 	movw	r2, #1045	@ 0x415
 801c12c:	4963      	ldr	r1, [pc, #396]	@ (801c2bc <dhcp_bind+0x1a4>)
 801c12e:	4864      	ldr	r0, [pc, #400]	@ (801c2c0 <dhcp_bind+0x1a8>)
 801c130:	f004 fc28 	bl	8020984 <iprintf>
 801c134:	e0bc      	b.n	801c2b0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c13a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801c13c:	69bb      	ldr	r3, [r7, #24]
 801c13e:	2b00      	cmp	r3, #0
 801c140:	d107      	bne.n	801c152 <dhcp_bind+0x3a>
 801c142:	4b5d      	ldr	r3, [pc, #372]	@ (801c2b8 <dhcp_bind+0x1a0>)
 801c144:	f240 4217 	movw	r2, #1047	@ 0x417
 801c148:	495e      	ldr	r1, [pc, #376]	@ (801c2c4 <dhcp_bind+0x1ac>)
 801c14a:	485d      	ldr	r0, [pc, #372]	@ (801c2c0 <dhcp_bind+0x1a8>)
 801c14c:	f004 fc1a 	bl	8020984 <iprintf>
 801c150:	e0ae      	b.n	801c2b0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801c152:	69bb      	ldr	r3, [r7, #24]
 801c154:	2200      	movs	r2, #0
 801c156:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801c158:	69bb      	ldr	r3, [r7, #24]
 801c15a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c15c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c160:	d019      	beq.n	801c196 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c162:	69bb      	ldr	r3, [r7, #24]
 801c164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c166:	331e      	adds	r3, #30
 801c168:	4a57      	ldr	r2, [pc, #348]	@ (801c2c8 <dhcp_bind+0x1b0>)
 801c16a:	fba2 2303 	umull	r2, r3, r2, r3
 801c16e:	095b      	lsrs	r3, r3, #5
 801c170:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801c172:	69fb      	ldr	r3, [r7, #28]
 801c174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c178:	d302      	bcc.n	801c180 <dhcp_bind+0x68>
      timeout = 0xffff;
 801c17a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c17e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801c180:	69fb      	ldr	r3, [r7, #28]
 801c182:	b29a      	uxth	r2, r3
 801c184:	69bb      	ldr	r3, [r7, #24]
 801c186:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801c188:	69bb      	ldr	r3, [r7, #24]
 801c18a:	8a9b      	ldrh	r3, [r3, #20]
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	d102      	bne.n	801c196 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801c190:	69bb      	ldr	r3, [r7, #24]
 801c192:	2201      	movs	r2, #1
 801c194:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801c196:	69bb      	ldr	r3, [r7, #24]
 801c198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c19e:	d01d      	beq.n	801c1dc <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c1a0:	69bb      	ldr	r3, [r7, #24]
 801c1a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c1a4:	331e      	adds	r3, #30
 801c1a6:	4a48      	ldr	r2, [pc, #288]	@ (801c2c8 <dhcp_bind+0x1b0>)
 801c1a8:	fba2 2303 	umull	r2, r3, r2, r3
 801c1ac:	095b      	lsrs	r3, r3, #5
 801c1ae:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801c1b0:	69fb      	ldr	r3, [r7, #28]
 801c1b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c1b6:	d302      	bcc.n	801c1be <dhcp_bind+0xa6>
      timeout = 0xffff;
 801c1b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c1bc:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801c1be:	69fb      	ldr	r3, [r7, #28]
 801c1c0:	b29a      	uxth	r2, r3
 801c1c2:	69bb      	ldr	r3, [r7, #24]
 801c1c4:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801c1c6:	69bb      	ldr	r3, [r7, #24]
 801c1c8:	895b      	ldrh	r3, [r3, #10]
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	d102      	bne.n	801c1d4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801c1ce:	69bb      	ldr	r3, [r7, #24]
 801c1d0:	2201      	movs	r2, #1
 801c1d2:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801c1d4:	69bb      	ldr	r3, [r7, #24]
 801c1d6:	895a      	ldrh	r2, [r3, #10]
 801c1d8:	69bb      	ldr	r3, [r7, #24]
 801c1da:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801c1dc:	69bb      	ldr	r3, [r7, #24]
 801c1de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c1e4:	d01d      	beq.n	801c222 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c1e6:	69bb      	ldr	r3, [r7, #24]
 801c1e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c1ea:	331e      	adds	r3, #30
 801c1ec:	4a36      	ldr	r2, [pc, #216]	@ (801c2c8 <dhcp_bind+0x1b0>)
 801c1ee:	fba2 2303 	umull	r2, r3, r2, r3
 801c1f2:	095b      	lsrs	r3, r3, #5
 801c1f4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801c1f6:	69fb      	ldr	r3, [r7, #28]
 801c1f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c1fc:	d302      	bcc.n	801c204 <dhcp_bind+0xec>
      timeout = 0xffff;
 801c1fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c202:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801c204:	69fb      	ldr	r3, [r7, #28]
 801c206:	b29a      	uxth	r2, r3
 801c208:	69bb      	ldr	r3, [r7, #24]
 801c20a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801c20c:	69bb      	ldr	r3, [r7, #24]
 801c20e:	899b      	ldrh	r3, [r3, #12]
 801c210:	2b00      	cmp	r3, #0
 801c212:	d102      	bne.n	801c21a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801c214:	69bb      	ldr	r3, [r7, #24]
 801c216:	2201      	movs	r2, #1
 801c218:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801c21a:	69bb      	ldr	r3, [r7, #24]
 801c21c:	899a      	ldrh	r2, [r3, #12]
 801c21e:	69bb      	ldr	r3, [r7, #24]
 801c220:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801c222:	69bb      	ldr	r3, [r7, #24]
 801c224:	895a      	ldrh	r2, [r3, #10]
 801c226:	69bb      	ldr	r3, [r7, #24]
 801c228:	899b      	ldrh	r3, [r3, #12]
 801c22a:	429a      	cmp	r2, r3
 801c22c:	d306      	bcc.n	801c23c <dhcp_bind+0x124>
 801c22e:	69bb      	ldr	r3, [r7, #24]
 801c230:	899b      	ldrh	r3, [r3, #12]
 801c232:	2b00      	cmp	r3, #0
 801c234:	d002      	beq.n	801c23c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801c236:	69bb      	ldr	r3, [r7, #24]
 801c238:	2200      	movs	r2, #0
 801c23a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801c23c:	69bb      	ldr	r3, [r7, #24]
 801c23e:	79db      	ldrb	r3, [r3, #7]
 801c240:	2b00      	cmp	r3, #0
 801c242:	d003      	beq.n	801c24c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801c244:	69bb      	ldr	r3, [r7, #24]
 801c246:	6a1b      	ldr	r3, [r3, #32]
 801c248:	613b      	str	r3, [r7, #16]
 801c24a:	e014      	b.n	801c276 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801c24c:	69bb      	ldr	r3, [r7, #24]
 801c24e:	331c      	adds	r3, #28
 801c250:	781b      	ldrb	r3, [r3, #0]
 801c252:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801c254:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c258:	2b00      	cmp	r3, #0
 801c25a:	db02      	blt.n	801c262 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801c25c:	23ff      	movs	r3, #255	@ 0xff
 801c25e:	613b      	str	r3, [r7, #16]
 801c260:	e009      	b.n	801c276 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801c262:	7dfb      	ldrb	r3, [r7, #23]
 801c264:	2bbf      	cmp	r3, #191	@ 0xbf
 801c266:	d903      	bls.n	801c270 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801c268:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 801c26c:	613b      	str	r3, [r7, #16]
 801c26e:	e002      	b.n	801c276 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801c270:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c274:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801c276:	69bb      	ldr	r3, [r7, #24]
 801c278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c27a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801c27c:	68fb      	ldr	r3, [r7, #12]
 801c27e:	2b00      	cmp	r3, #0
 801c280:	d108      	bne.n	801c294 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801c282:	69bb      	ldr	r3, [r7, #24]
 801c284:	69da      	ldr	r2, [r3, #28]
 801c286:	693b      	ldr	r3, [r7, #16]
 801c288:	4013      	ands	r3, r2
 801c28a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801c28c:	68fb      	ldr	r3, [r7, #12]
 801c28e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801c292:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801c294:	210a      	movs	r1, #10
 801c296:	69b8      	ldr	r0, [r7, #24]
 801c298:	f000 fa9a 	bl	801c7d0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801c29c:	69bb      	ldr	r3, [r7, #24]
 801c29e:	f103 011c 	add.w	r1, r3, #28
 801c2a2:	f107 030c 	add.w	r3, r7, #12
 801c2a6:	f107 0210 	add.w	r2, r7, #16
 801c2aa:	6878      	ldr	r0, [r7, #4]
 801c2ac:	f7f7 face 	bl	801384c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801c2b0:	3720      	adds	r7, #32
 801c2b2:	46bd      	mov	sp, r7
 801c2b4:	bd80      	pop	{r7, pc}
 801c2b6:	bf00      	nop
 801c2b8:	08026170 	.word	0x08026170
 801c2bc:	080262d0 	.word	0x080262d0
 801c2c0:	080261d0 	.word	0x080261d0
 801c2c4:	080262ec 	.word	0x080262ec
 801c2c8:	88888889 	.word	0x88888889

0801c2cc <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801c2cc:	b580      	push	{r7, lr}
 801c2ce:	b08a      	sub	sp, #40	@ 0x28
 801c2d0:	af02      	add	r7, sp, #8
 801c2d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c2d8:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801c2da:	2105      	movs	r1, #5
 801c2dc:	69b8      	ldr	r0, [r7, #24]
 801c2de:	f000 fa77 	bl	801c7d0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c2e2:	f107 030c 	add.w	r3, r7, #12
 801c2e6:	2203      	movs	r2, #3
 801c2e8:	69b9      	ldr	r1, [r7, #24]
 801c2ea:	6878      	ldr	r0, [r7, #4]
 801c2ec:	f000 fefc 	bl	801d0e8 <dhcp_create_msg>
 801c2f0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c2f2:	697b      	ldr	r3, [r7, #20]
 801c2f4:	2b00      	cmp	r3, #0
 801c2f6:	d04e      	beq.n	801c396 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c2f8:	697b      	ldr	r3, [r7, #20]
 801c2fa:	685b      	ldr	r3, [r3, #4]
 801c2fc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c2fe:	89b8      	ldrh	r0, [r7, #12]
 801c300:	693b      	ldr	r3, [r7, #16]
 801c302:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c306:	2302      	movs	r3, #2
 801c308:	2239      	movs	r2, #57	@ 0x39
 801c30a:	f000 fa7b 	bl	801c804 <dhcp_option>
 801c30e:	4603      	mov	r3, r0
 801c310:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c312:	89b8      	ldrh	r0, [r7, #12]
 801c314:	693b      	ldr	r3, [r7, #16]
 801c316:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c31e:	461a      	mov	r2, r3
 801c320:	f000 faca 	bl	801c8b8 <dhcp_option_short>
 801c324:	4603      	mov	r3, r0
 801c326:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c328:	89b8      	ldrh	r0, [r7, #12]
 801c32a:	693b      	ldr	r3, [r7, #16]
 801c32c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c330:	2303      	movs	r3, #3
 801c332:	2237      	movs	r2, #55	@ 0x37
 801c334:	f000 fa66 	bl	801c804 <dhcp_option>
 801c338:	4603      	mov	r3, r0
 801c33a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c33c:	2300      	movs	r3, #0
 801c33e:	77bb      	strb	r3, [r7, #30]
 801c340:	e00e      	b.n	801c360 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c342:	89b8      	ldrh	r0, [r7, #12]
 801c344:	693b      	ldr	r3, [r7, #16]
 801c346:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c34a:	7fbb      	ldrb	r3, [r7, #30]
 801c34c:	4a29      	ldr	r2, [pc, #164]	@ (801c3f4 <dhcp_renew+0x128>)
 801c34e:	5cd3      	ldrb	r3, [r2, r3]
 801c350:	461a      	mov	r2, r3
 801c352:	f000 fa8b 	bl	801c86c <dhcp_option_byte>
 801c356:	4603      	mov	r3, r0
 801c358:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c35a:	7fbb      	ldrb	r3, [r7, #30]
 801c35c:	3301      	adds	r3, #1
 801c35e:	77bb      	strb	r3, [r7, #30]
 801c360:	7fbb      	ldrb	r3, [r7, #30]
 801c362:	2b02      	cmp	r3, #2
 801c364:	d9ed      	bls.n	801c342 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c366:	89b8      	ldrh	r0, [r7, #12]
 801c368:	693b      	ldr	r3, [r7, #16]
 801c36a:	33f0      	adds	r3, #240	@ 0xf0
 801c36c:	697a      	ldr	r2, [r7, #20]
 801c36e:	4619      	mov	r1, r3
 801c370:	f000 ff90 	bl	801d294 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801c374:	4b20      	ldr	r3, [pc, #128]	@ (801c3f8 <dhcp_renew+0x12c>)
 801c376:	6818      	ldr	r0, [r3, #0]
 801c378:	69bb      	ldr	r3, [r7, #24]
 801c37a:	f103 0218 	add.w	r2, r3, #24
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	9300      	str	r3, [sp, #0]
 801c382:	2343      	movs	r3, #67	@ 0x43
 801c384:	6979      	ldr	r1, [r7, #20]
 801c386:	f7fe fe1d 	bl	801afc4 <udp_sendto_if>
 801c38a:	4603      	mov	r3, r0
 801c38c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801c38e:	6978      	ldr	r0, [r7, #20]
 801c390:	f7f7 ff6a 	bl	8014268 <pbuf_free>
 801c394:	e001      	b.n	801c39a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c396:	23ff      	movs	r3, #255	@ 0xff
 801c398:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801c39a:	69bb      	ldr	r3, [r7, #24]
 801c39c:	799b      	ldrb	r3, [r3, #6]
 801c39e:	2bff      	cmp	r3, #255	@ 0xff
 801c3a0:	d005      	beq.n	801c3ae <dhcp_renew+0xe2>
    dhcp->tries++;
 801c3a2:	69bb      	ldr	r3, [r7, #24]
 801c3a4:	799b      	ldrb	r3, [r3, #6]
 801c3a6:	3301      	adds	r3, #1
 801c3a8:	b2da      	uxtb	r2, r3
 801c3aa:	69bb      	ldr	r3, [r7, #24]
 801c3ac:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801c3ae:	69bb      	ldr	r3, [r7, #24]
 801c3b0:	799b      	ldrb	r3, [r3, #6]
 801c3b2:	2b09      	cmp	r3, #9
 801c3b4:	d809      	bhi.n	801c3ca <dhcp_renew+0xfe>
 801c3b6:	69bb      	ldr	r3, [r7, #24]
 801c3b8:	799b      	ldrb	r3, [r3, #6]
 801c3ba:	461a      	mov	r2, r3
 801c3bc:	0152      	lsls	r2, r2, #5
 801c3be:	1ad2      	subs	r2, r2, r3
 801c3c0:	0092      	lsls	r2, r2, #2
 801c3c2:	4413      	add	r3, r2
 801c3c4:	011b      	lsls	r3, r3, #4
 801c3c6:	b29b      	uxth	r3, r3
 801c3c8:	e001      	b.n	801c3ce <dhcp_renew+0x102>
 801c3ca:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801c3ce:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c3d0:	89fb      	ldrh	r3, [r7, #14]
 801c3d2:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801c3d6:	4a09      	ldr	r2, [pc, #36]	@ (801c3fc <dhcp_renew+0x130>)
 801c3d8:	fb82 1203 	smull	r1, r2, r2, r3
 801c3dc:	1152      	asrs	r2, r2, #5
 801c3de:	17db      	asrs	r3, r3, #31
 801c3e0:	1ad3      	subs	r3, r2, r3
 801c3e2:	b29a      	uxth	r2, r3
 801c3e4:	69bb      	ldr	r3, [r7, #24]
 801c3e6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c3e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c3ec:	4618      	mov	r0, r3
 801c3ee:	3720      	adds	r7, #32
 801c3f0:	46bd      	mov	sp, r7
 801c3f2:	bd80      	pop	{r7, pc}
 801c3f4:	24000034 	.word	0x24000034
 801c3f8:	2400cb84 	.word	0x2400cb84
 801c3fc:	10624dd3 	.word	0x10624dd3

0801c400 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801c400:	b580      	push	{r7, lr}
 801c402:	b08a      	sub	sp, #40	@ 0x28
 801c404:	af02      	add	r7, sp, #8
 801c406:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c408:	687b      	ldr	r3, [r7, #4]
 801c40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c40c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801c40e:	2104      	movs	r1, #4
 801c410:	69b8      	ldr	r0, [r7, #24]
 801c412:	f000 f9dd 	bl	801c7d0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c416:	f107 030c 	add.w	r3, r7, #12
 801c41a:	2203      	movs	r2, #3
 801c41c:	69b9      	ldr	r1, [r7, #24]
 801c41e:	6878      	ldr	r0, [r7, #4]
 801c420:	f000 fe62 	bl	801d0e8 <dhcp_create_msg>
 801c424:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c426:	697b      	ldr	r3, [r7, #20]
 801c428:	2b00      	cmp	r3, #0
 801c42a:	d04c      	beq.n	801c4c6 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c42c:	697b      	ldr	r3, [r7, #20]
 801c42e:	685b      	ldr	r3, [r3, #4]
 801c430:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c432:	89b8      	ldrh	r0, [r7, #12]
 801c434:	693b      	ldr	r3, [r7, #16]
 801c436:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c43a:	2302      	movs	r3, #2
 801c43c:	2239      	movs	r2, #57	@ 0x39
 801c43e:	f000 f9e1 	bl	801c804 <dhcp_option>
 801c442:	4603      	mov	r3, r0
 801c444:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c446:	89b8      	ldrh	r0, [r7, #12]
 801c448:	693b      	ldr	r3, [r7, #16]
 801c44a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c452:	461a      	mov	r2, r3
 801c454:	f000 fa30 	bl	801c8b8 <dhcp_option_short>
 801c458:	4603      	mov	r3, r0
 801c45a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c45c:	89b8      	ldrh	r0, [r7, #12]
 801c45e:	693b      	ldr	r3, [r7, #16]
 801c460:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c464:	2303      	movs	r3, #3
 801c466:	2237      	movs	r2, #55	@ 0x37
 801c468:	f000 f9cc 	bl	801c804 <dhcp_option>
 801c46c:	4603      	mov	r3, r0
 801c46e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c470:	2300      	movs	r3, #0
 801c472:	77bb      	strb	r3, [r7, #30]
 801c474:	e00e      	b.n	801c494 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c476:	89b8      	ldrh	r0, [r7, #12]
 801c478:	693b      	ldr	r3, [r7, #16]
 801c47a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c47e:	7fbb      	ldrb	r3, [r7, #30]
 801c480:	4a28      	ldr	r2, [pc, #160]	@ (801c524 <dhcp_rebind+0x124>)
 801c482:	5cd3      	ldrb	r3, [r2, r3]
 801c484:	461a      	mov	r2, r3
 801c486:	f000 f9f1 	bl	801c86c <dhcp_option_byte>
 801c48a:	4603      	mov	r3, r0
 801c48c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c48e:	7fbb      	ldrb	r3, [r7, #30]
 801c490:	3301      	adds	r3, #1
 801c492:	77bb      	strb	r3, [r7, #30]
 801c494:	7fbb      	ldrb	r3, [r7, #30]
 801c496:	2b02      	cmp	r3, #2
 801c498:	d9ed      	bls.n	801c476 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c49a:	89b8      	ldrh	r0, [r7, #12]
 801c49c:	693b      	ldr	r3, [r7, #16]
 801c49e:	33f0      	adds	r3, #240	@ 0xf0
 801c4a0:	697a      	ldr	r2, [r7, #20]
 801c4a2:	4619      	mov	r1, r3
 801c4a4:	f000 fef6 	bl	801d294 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801c4a8:	4b1f      	ldr	r3, [pc, #124]	@ (801c528 <dhcp_rebind+0x128>)
 801c4aa:	6818      	ldr	r0, [r3, #0]
 801c4ac:	687b      	ldr	r3, [r7, #4]
 801c4ae:	9300      	str	r3, [sp, #0]
 801c4b0:	2343      	movs	r3, #67	@ 0x43
 801c4b2:	4a1e      	ldr	r2, [pc, #120]	@ (801c52c <dhcp_rebind+0x12c>)
 801c4b4:	6979      	ldr	r1, [r7, #20]
 801c4b6:	f7fe fd85 	bl	801afc4 <udp_sendto_if>
 801c4ba:	4603      	mov	r3, r0
 801c4bc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801c4be:	6978      	ldr	r0, [r7, #20]
 801c4c0:	f7f7 fed2 	bl	8014268 <pbuf_free>
 801c4c4:	e001      	b.n	801c4ca <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c4c6:	23ff      	movs	r3, #255	@ 0xff
 801c4c8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801c4ca:	69bb      	ldr	r3, [r7, #24]
 801c4cc:	799b      	ldrb	r3, [r3, #6]
 801c4ce:	2bff      	cmp	r3, #255	@ 0xff
 801c4d0:	d005      	beq.n	801c4de <dhcp_rebind+0xde>
    dhcp->tries++;
 801c4d2:	69bb      	ldr	r3, [r7, #24]
 801c4d4:	799b      	ldrb	r3, [r3, #6]
 801c4d6:	3301      	adds	r3, #1
 801c4d8:	b2da      	uxtb	r2, r3
 801c4da:	69bb      	ldr	r3, [r7, #24]
 801c4dc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801c4de:	69bb      	ldr	r3, [r7, #24]
 801c4e0:	799b      	ldrb	r3, [r3, #6]
 801c4e2:	2b09      	cmp	r3, #9
 801c4e4:	d809      	bhi.n	801c4fa <dhcp_rebind+0xfa>
 801c4e6:	69bb      	ldr	r3, [r7, #24]
 801c4e8:	799b      	ldrb	r3, [r3, #6]
 801c4ea:	461a      	mov	r2, r3
 801c4ec:	0152      	lsls	r2, r2, #5
 801c4ee:	1ad2      	subs	r2, r2, r3
 801c4f0:	0092      	lsls	r2, r2, #2
 801c4f2:	4413      	add	r3, r2
 801c4f4:	00db      	lsls	r3, r3, #3
 801c4f6:	b29b      	uxth	r3, r3
 801c4f8:	e001      	b.n	801c4fe <dhcp_rebind+0xfe>
 801c4fa:	f242 7310 	movw	r3, #10000	@ 0x2710
 801c4fe:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c500:	89fb      	ldrh	r3, [r7, #14]
 801c502:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801c506:	4a0a      	ldr	r2, [pc, #40]	@ (801c530 <dhcp_rebind+0x130>)
 801c508:	fb82 1203 	smull	r1, r2, r2, r3
 801c50c:	1152      	asrs	r2, r2, #5
 801c50e:	17db      	asrs	r3, r3, #31
 801c510:	1ad3      	subs	r3, r2, r3
 801c512:	b29a      	uxth	r2, r3
 801c514:	69bb      	ldr	r3, [r7, #24]
 801c516:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c518:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c51c:	4618      	mov	r0, r3
 801c51e:	3720      	adds	r7, #32
 801c520:	46bd      	mov	sp, r7
 801c522:	bd80      	pop	{r7, pc}
 801c524:	24000034 	.word	0x24000034
 801c528:	2400cb84 	.word	0x2400cb84
 801c52c:	08026e60 	.word	0x08026e60
 801c530:	10624dd3 	.word	0x10624dd3

0801c534 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801c534:	b5b0      	push	{r4, r5, r7, lr}
 801c536:	b08a      	sub	sp, #40	@ 0x28
 801c538:	af02      	add	r7, sp, #8
 801c53a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c53c:	687b      	ldr	r3, [r7, #4]
 801c53e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c540:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801c542:	2103      	movs	r1, #3
 801c544:	69b8      	ldr	r0, [r7, #24]
 801c546:	f000 f943 	bl	801c7d0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c54a:	f107 030c 	add.w	r3, r7, #12
 801c54e:	2203      	movs	r2, #3
 801c550:	69b9      	ldr	r1, [r7, #24]
 801c552:	6878      	ldr	r0, [r7, #4]
 801c554:	f000 fdc8 	bl	801d0e8 <dhcp_create_msg>
 801c558:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c55a:	697b      	ldr	r3, [r7, #20]
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	d066      	beq.n	801c62e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c560:	697b      	ldr	r3, [r7, #20]
 801c562:	685b      	ldr	r3, [r3, #4]
 801c564:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c566:	89b8      	ldrh	r0, [r7, #12]
 801c568:	693b      	ldr	r3, [r7, #16]
 801c56a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c56e:	2302      	movs	r3, #2
 801c570:	2239      	movs	r2, #57	@ 0x39
 801c572:	f000 f947 	bl	801c804 <dhcp_option>
 801c576:	4603      	mov	r3, r0
 801c578:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801c57a:	89b8      	ldrh	r0, [r7, #12]
 801c57c:	693b      	ldr	r3, [r7, #16]
 801c57e:	33f0      	adds	r3, #240	@ 0xf0
 801c580:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801c584:	4619      	mov	r1, r3
 801c586:	f000 f997 	bl	801c8b8 <dhcp_option_short>
 801c58a:	4603      	mov	r3, r0
 801c58c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c58e:	89b8      	ldrh	r0, [r7, #12]
 801c590:	693b      	ldr	r3, [r7, #16]
 801c592:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c596:	2304      	movs	r3, #4
 801c598:	2232      	movs	r2, #50	@ 0x32
 801c59a:	f000 f933 	bl	801c804 <dhcp_option>
 801c59e:	4603      	mov	r3, r0
 801c5a0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c5a2:	89bc      	ldrh	r4, [r7, #12]
 801c5a4:	693b      	ldr	r3, [r7, #16]
 801c5a6:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801c5aa:	69bb      	ldr	r3, [r7, #24]
 801c5ac:	69db      	ldr	r3, [r3, #28]
 801c5ae:	4618      	mov	r0, r3
 801c5b0:	f7f6 f9b9 	bl	8012926 <lwip_htonl>
 801c5b4:	4603      	mov	r3, r0
 801c5b6:	461a      	mov	r2, r3
 801c5b8:	4629      	mov	r1, r5
 801c5ba:	4620      	mov	r0, r4
 801c5bc:	f000 f9ae 	bl	801c91c <dhcp_option_long>
 801c5c0:	4603      	mov	r3, r0
 801c5c2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c5c4:	89b8      	ldrh	r0, [r7, #12]
 801c5c6:	693b      	ldr	r3, [r7, #16]
 801c5c8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c5cc:	2303      	movs	r3, #3
 801c5ce:	2237      	movs	r2, #55	@ 0x37
 801c5d0:	f000 f918 	bl	801c804 <dhcp_option>
 801c5d4:	4603      	mov	r3, r0
 801c5d6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c5d8:	2300      	movs	r3, #0
 801c5da:	77bb      	strb	r3, [r7, #30]
 801c5dc:	e00e      	b.n	801c5fc <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c5de:	89b8      	ldrh	r0, [r7, #12]
 801c5e0:	693b      	ldr	r3, [r7, #16]
 801c5e2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c5e6:	7fbb      	ldrb	r3, [r7, #30]
 801c5e8:	4a28      	ldr	r2, [pc, #160]	@ (801c68c <dhcp_reboot+0x158>)
 801c5ea:	5cd3      	ldrb	r3, [r2, r3]
 801c5ec:	461a      	mov	r2, r3
 801c5ee:	f000 f93d 	bl	801c86c <dhcp_option_byte>
 801c5f2:	4603      	mov	r3, r0
 801c5f4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c5f6:	7fbb      	ldrb	r3, [r7, #30]
 801c5f8:	3301      	adds	r3, #1
 801c5fa:	77bb      	strb	r3, [r7, #30]
 801c5fc:	7fbb      	ldrb	r3, [r7, #30]
 801c5fe:	2b02      	cmp	r3, #2
 801c600:	d9ed      	bls.n	801c5de <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c602:	89b8      	ldrh	r0, [r7, #12]
 801c604:	693b      	ldr	r3, [r7, #16]
 801c606:	33f0      	adds	r3, #240	@ 0xf0
 801c608:	697a      	ldr	r2, [r7, #20]
 801c60a:	4619      	mov	r1, r3
 801c60c:	f000 fe42 	bl	801d294 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801c610:	4b1f      	ldr	r3, [pc, #124]	@ (801c690 <dhcp_reboot+0x15c>)
 801c612:	6818      	ldr	r0, [r3, #0]
 801c614:	687b      	ldr	r3, [r7, #4]
 801c616:	9300      	str	r3, [sp, #0]
 801c618:	2343      	movs	r3, #67	@ 0x43
 801c61a:	4a1e      	ldr	r2, [pc, #120]	@ (801c694 <dhcp_reboot+0x160>)
 801c61c:	6979      	ldr	r1, [r7, #20]
 801c61e:	f7fe fcd1 	bl	801afc4 <udp_sendto_if>
 801c622:	4603      	mov	r3, r0
 801c624:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801c626:	6978      	ldr	r0, [r7, #20]
 801c628:	f7f7 fe1e 	bl	8014268 <pbuf_free>
 801c62c:	e001      	b.n	801c632 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c62e:	23ff      	movs	r3, #255	@ 0xff
 801c630:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801c632:	69bb      	ldr	r3, [r7, #24]
 801c634:	799b      	ldrb	r3, [r3, #6]
 801c636:	2bff      	cmp	r3, #255	@ 0xff
 801c638:	d005      	beq.n	801c646 <dhcp_reboot+0x112>
    dhcp->tries++;
 801c63a:	69bb      	ldr	r3, [r7, #24]
 801c63c:	799b      	ldrb	r3, [r3, #6]
 801c63e:	3301      	adds	r3, #1
 801c640:	b2da      	uxtb	r2, r3
 801c642:	69bb      	ldr	r3, [r7, #24]
 801c644:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801c646:	69bb      	ldr	r3, [r7, #24]
 801c648:	799b      	ldrb	r3, [r3, #6]
 801c64a:	2b09      	cmp	r3, #9
 801c64c:	d809      	bhi.n	801c662 <dhcp_reboot+0x12e>
 801c64e:	69bb      	ldr	r3, [r7, #24]
 801c650:	799b      	ldrb	r3, [r3, #6]
 801c652:	461a      	mov	r2, r3
 801c654:	0152      	lsls	r2, r2, #5
 801c656:	1ad2      	subs	r2, r2, r3
 801c658:	0092      	lsls	r2, r2, #2
 801c65a:	4413      	add	r3, r2
 801c65c:	00db      	lsls	r3, r3, #3
 801c65e:	b29b      	uxth	r3, r3
 801c660:	e001      	b.n	801c666 <dhcp_reboot+0x132>
 801c662:	f242 7310 	movw	r3, #10000	@ 0x2710
 801c666:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c668:	89fb      	ldrh	r3, [r7, #14]
 801c66a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801c66e:	4a0a      	ldr	r2, [pc, #40]	@ (801c698 <dhcp_reboot+0x164>)
 801c670:	fb82 1203 	smull	r1, r2, r2, r3
 801c674:	1152      	asrs	r2, r2, #5
 801c676:	17db      	asrs	r3, r3, #31
 801c678:	1ad3      	subs	r3, r2, r3
 801c67a:	b29a      	uxth	r2, r3
 801c67c:	69bb      	ldr	r3, [r7, #24]
 801c67e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c680:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c684:	4618      	mov	r0, r3
 801c686:	3720      	adds	r7, #32
 801c688:	46bd      	mov	sp, r7
 801c68a:	bdb0      	pop	{r4, r5, r7, pc}
 801c68c:	24000034 	.word	0x24000034
 801c690:	2400cb84 	.word	0x2400cb84
 801c694:	08026e60 	.word	0x08026e60
 801c698:	10624dd3 	.word	0x10624dd3

0801c69c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801c69c:	b5b0      	push	{r4, r5, r7, lr}
 801c69e:	b08a      	sub	sp, #40	@ 0x28
 801c6a0:	af02      	add	r7, sp, #8
 801c6a2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c6a8:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801c6aa:	69fb      	ldr	r3, [r7, #28]
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	f000 8084 	beq.w	801c7ba <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801c6b2:	69fb      	ldr	r3, [r7, #28]
 801c6b4:	795b      	ldrb	r3, [r3, #5]
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	f000 8081 	beq.w	801c7be <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801c6bc:	69fb      	ldr	r3, [r7, #28]
 801c6be:	699b      	ldr	r3, [r3, #24]
 801c6c0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801c6c2:	69fb      	ldr	r3, [r7, #28]
 801c6c4:	2200      	movs	r2, #0
 801c6c6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801c6c8:	69fb      	ldr	r3, [r7, #28]
 801c6ca:	2200      	movs	r2, #0
 801c6cc:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801c6ce:	69fb      	ldr	r3, [r7, #28]
 801c6d0:	2200      	movs	r2, #0
 801c6d2:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801c6d4:	69fb      	ldr	r3, [r7, #28]
 801c6d6:	2200      	movs	r2, #0
 801c6d8:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801c6da:	69fb      	ldr	r3, [r7, #28]
 801c6dc:	2200      	movs	r2, #0
 801c6de:	631a      	str	r2, [r3, #48]	@ 0x30
 801c6e0:	69fb      	ldr	r3, [r7, #28]
 801c6e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801c6e4:	69fb      	ldr	r3, [r7, #28]
 801c6e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 801c6e8:	69fb      	ldr	r3, [r7, #28]
 801c6ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801c6ec:	69fb      	ldr	r3, [r7, #28]
 801c6ee:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801c6f0:	69fb      	ldr	r3, [r7, #28]
 801c6f2:	2200      	movs	r2, #0
 801c6f4:	829a      	strh	r2, [r3, #20]
 801c6f6:	69fb      	ldr	r3, [r7, #28]
 801c6f8:	8a9a      	ldrh	r2, [r3, #20]
 801c6fa:	69fb      	ldr	r3, [r7, #28]
 801c6fc:	825a      	strh	r2, [r3, #18]
 801c6fe:	69fb      	ldr	r3, [r7, #28]
 801c700:	8a5a      	ldrh	r2, [r3, #18]
 801c702:	69fb      	ldr	r3, [r7, #28]
 801c704:	821a      	strh	r2, [r3, #16]
 801c706:	69fb      	ldr	r3, [r7, #28]
 801c708:	8a1a      	ldrh	r2, [r3, #16]
 801c70a:	69fb      	ldr	r3, [r7, #28]
 801c70c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801c70e:	6878      	ldr	r0, [r7, #4]
 801c710:	f000 fdee 	bl	801d2f0 <dhcp_supplied_address>
 801c714:	4603      	mov	r3, r0
 801c716:	2b00      	cmp	r3, #0
 801c718:	d03b      	beq.n	801c792 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801c71a:	f107 030e 	add.w	r3, r7, #14
 801c71e:	2207      	movs	r2, #7
 801c720:	69f9      	ldr	r1, [r7, #28]
 801c722:	6878      	ldr	r0, [r7, #4]
 801c724:	f000 fce0 	bl	801d0e8 <dhcp_create_msg>
 801c728:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801c72a:	69bb      	ldr	r3, [r7, #24]
 801c72c:	2b00      	cmp	r3, #0
 801c72e:	d030      	beq.n	801c792 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c730:	69bb      	ldr	r3, [r7, #24]
 801c732:	685b      	ldr	r3, [r3, #4]
 801c734:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801c736:	89f8      	ldrh	r0, [r7, #14]
 801c738:	697b      	ldr	r3, [r7, #20]
 801c73a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c73e:	2304      	movs	r3, #4
 801c740:	2236      	movs	r2, #54	@ 0x36
 801c742:	f000 f85f 	bl	801c804 <dhcp_option>
 801c746:	4603      	mov	r3, r0
 801c748:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801c74a:	89fc      	ldrh	r4, [r7, #14]
 801c74c:	697b      	ldr	r3, [r7, #20]
 801c74e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801c752:	693b      	ldr	r3, [r7, #16]
 801c754:	4618      	mov	r0, r3
 801c756:	f7f6 f8e6 	bl	8012926 <lwip_htonl>
 801c75a:	4603      	mov	r3, r0
 801c75c:	461a      	mov	r2, r3
 801c75e:	4629      	mov	r1, r5
 801c760:	4620      	mov	r0, r4
 801c762:	f000 f8db 	bl	801c91c <dhcp_option_long>
 801c766:	4603      	mov	r3, r0
 801c768:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c76a:	89f8      	ldrh	r0, [r7, #14]
 801c76c:	697b      	ldr	r3, [r7, #20]
 801c76e:	33f0      	adds	r3, #240	@ 0xf0
 801c770:	69ba      	ldr	r2, [r7, #24]
 801c772:	4619      	mov	r1, r3
 801c774:	f000 fd8e 	bl	801d294 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801c778:	4b13      	ldr	r3, [pc, #76]	@ (801c7c8 <dhcp_release_and_stop+0x12c>)
 801c77a:	6818      	ldr	r0, [r3, #0]
 801c77c:	f107 0210 	add.w	r2, r7, #16
 801c780:	687b      	ldr	r3, [r7, #4]
 801c782:	9300      	str	r3, [sp, #0]
 801c784:	2343      	movs	r3, #67	@ 0x43
 801c786:	69b9      	ldr	r1, [r7, #24]
 801c788:	f7fe fc1c 	bl	801afc4 <udp_sendto_if>
      pbuf_free(p_out);
 801c78c:	69b8      	ldr	r0, [r7, #24]
 801c78e:	f7f7 fd6b 	bl	8014268 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801c792:	4b0e      	ldr	r3, [pc, #56]	@ (801c7cc <dhcp_release_and_stop+0x130>)
 801c794:	4a0d      	ldr	r2, [pc, #52]	@ (801c7cc <dhcp_release_and_stop+0x130>)
 801c796:	490d      	ldr	r1, [pc, #52]	@ (801c7cc <dhcp_release_and_stop+0x130>)
 801c798:	6878      	ldr	r0, [r7, #4]
 801c79a:	f7f7 f857 	bl	801384c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801c79e:	2100      	movs	r1, #0
 801c7a0:	69f8      	ldr	r0, [r7, #28]
 801c7a2:	f000 f815 	bl	801c7d0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801c7a6:	69fb      	ldr	r3, [r7, #28]
 801c7a8:	791b      	ldrb	r3, [r3, #4]
 801c7aa:	2b00      	cmp	r3, #0
 801c7ac:	d008      	beq.n	801c7c0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801c7ae:	f7fe ff89 	bl	801b6c4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801c7b2:	69fb      	ldr	r3, [r7, #28]
 801c7b4:	2200      	movs	r2, #0
 801c7b6:	711a      	strb	r2, [r3, #4]
 801c7b8:	e002      	b.n	801c7c0 <dhcp_release_and_stop+0x124>
    return;
 801c7ba:	bf00      	nop
 801c7bc:	e000      	b.n	801c7c0 <dhcp_release_and_stop+0x124>
    return;
 801c7be:	bf00      	nop
  }
}
 801c7c0:	3720      	adds	r7, #32
 801c7c2:	46bd      	mov	sp, r7
 801c7c4:	bdb0      	pop	{r4, r5, r7, pc}
 801c7c6:	bf00      	nop
 801c7c8:	2400cb84 	.word	0x2400cb84
 801c7cc:	08026e5c 	.word	0x08026e5c

0801c7d0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801c7d0:	b480      	push	{r7}
 801c7d2:	b083      	sub	sp, #12
 801c7d4:	af00      	add	r7, sp, #0
 801c7d6:	6078      	str	r0, [r7, #4]
 801c7d8:	460b      	mov	r3, r1
 801c7da:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801c7dc:	687b      	ldr	r3, [r7, #4]
 801c7de:	795b      	ldrb	r3, [r3, #5]
 801c7e0:	78fa      	ldrb	r2, [r7, #3]
 801c7e2:	429a      	cmp	r2, r3
 801c7e4:	d008      	beq.n	801c7f8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801c7e6:	687b      	ldr	r3, [r7, #4]
 801c7e8:	78fa      	ldrb	r2, [r7, #3]
 801c7ea:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801c7ec:	687b      	ldr	r3, [r7, #4]
 801c7ee:	2200      	movs	r2, #0
 801c7f0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801c7f2:	687b      	ldr	r3, [r7, #4]
 801c7f4:	2200      	movs	r2, #0
 801c7f6:	811a      	strh	r2, [r3, #8]
  }
}
 801c7f8:	bf00      	nop
 801c7fa:	370c      	adds	r7, #12
 801c7fc:	46bd      	mov	sp, r7
 801c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c802:	4770      	bx	lr

0801c804 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801c804:	b580      	push	{r7, lr}
 801c806:	b082      	sub	sp, #8
 801c808:	af00      	add	r7, sp, #0
 801c80a:	6039      	str	r1, [r7, #0]
 801c80c:	4611      	mov	r1, r2
 801c80e:	461a      	mov	r2, r3
 801c810:	4603      	mov	r3, r0
 801c812:	80fb      	strh	r3, [r7, #6]
 801c814:	460b      	mov	r3, r1
 801c816:	717b      	strb	r3, [r7, #5]
 801c818:	4613      	mov	r3, r2
 801c81a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801c81c:	88fa      	ldrh	r2, [r7, #6]
 801c81e:	793b      	ldrb	r3, [r7, #4]
 801c820:	4413      	add	r3, r2
 801c822:	3302      	adds	r3, #2
 801c824:	2b44      	cmp	r3, #68	@ 0x44
 801c826:	d906      	bls.n	801c836 <dhcp_option+0x32>
 801c828:	4b0d      	ldr	r3, [pc, #52]	@ (801c860 <dhcp_option+0x5c>)
 801c82a:	f240 529a 	movw	r2, #1434	@ 0x59a
 801c82e:	490d      	ldr	r1, [pc, #52]	@ (801c864 <dhcp_option+0x60>)
 801c830:	480d      	ldr	r0, [pc, #52]	@ (801c868 <dhcp_option+0x64>)
 801c832:	f004 f8a7 	bl	8020984 <iprintf>
  options[options_out_len++] = option_type;
 801c836:	88fb      	ldrh	r3, [r7, #6]
 801c838:	1c5a      	adds	r2, r3, #1
 801c83a:	80fa      	strh	r2, [r7, #6]
 801c83c:	461a      	mov	r2, r3
 801c83e:	683b      	ldr	r3, [r7, #0]
 801c840:	4413      	add	r3, r2
 801c842:	797a      	ldrb	r2, [r7, #5]
 801c844:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801c846:	88fb      	ldrh	r3, [r7, #6]
 801c848:	1c5a      	adds	r2, r3, #1
 801c84a:	80fa      	strh	r2, [r7, #6]
 801c84c:	461a      	mov	r2, r3
 801c84e:	683b      	ldr	r3, [r7, #0]
 801c850:	4413      	add	r3, r2
 801c852:	793a      	ldrb	r2, [r7, #4]
 801c854:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801c856:	88fb      	ldrh	r3, [r7, #6]
}
 801c858:	4618      	mov	r0, r3
 801c85a:	3708      	adds	r7, #8
 801c85c:	46bd      	mov	sp, r7
 801c85e:	bd80      	pop	{r7, pc}
 801c860:	08026170 	.word	0x08026170
 801c864:	08026304 	.word	0x08026304
 801c868:	080261d0 	.word	0x080261d0

0801c86c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801c86c:	b580      	push	{r7, lr}
 801c86e:	b082      	sub	sp, #8
 801c870:	af00      	add	r7, sp, #0
 801c872:	4603      	mov	r3, r0
 801c874:	6039      	str	r1, [r7, #0]
 801c876:	80fb      	strh	r3, [r7, #6]
 801c878:	4613      	mov	r3, r2
 801c87a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801c87c:	88fb      	ldrh	r3, [r7, #6]
 801c87e:	2b43      	cmp	r3, #67	@ 0x43
 801c880:	d906      	bls.n	801c890 <dhcp_option_byte+0x24>
 801c882:	4b0a      	ldr	r3, [pc, #40]	@ (801c8ac <dhcp_option_byte+0x40>)
 801c884:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 801c888:	4909      	ldr	r1, [pc, #36]	@ (801c8b0 <dhcp_option_byte+0x44>)
 801c88a:	480a      	ldr	r0, [pc, #40]	@ (801c8b4 <dhcp_option_byte+0x48>)
 801c88c:	f004 f87a 	bl	8020984 <iprintf>
  options[options_out_len++] = value;
 801c890:	88fb      	ldrh	r3, [r7, #6]
 801c892:	1c5a      	adds	r2, r3, #1
 801c894:	80fa      	strh	r2, [r7, #6]
 801c896:	461a      	mov	r2, r3
 801c898:	683b      	ldr	r3, [r7, #0]
 801c89a:	4413      	add	r3, r2
 801c89c:	797a      	ldrb	r2, [r7, #5]
 801c89e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801c8a0:	88fb      	ldrh	r3, [r7, #6]
}
 801c8a2:	4618      	mov	r0, r3
 801c8a4:	3708      	adds	r7, #8
 801c8a6:	46bd      	mov	sp, r7
 801c8a8:	bd80      	pop	{r7, pc}
 801c8aa:	bf00      	nop
 801c8ac:	08026170 	.word	0x08026170
 801c8b0:	08026348 	.word	0x08026348
 801c8b4:	080261d0 	.word	0x080261d0

0801c8b8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801c8b8:	b580      	push	{r7, lr}
 801c8ba:	b082      	sub	sp, #8
 801c8bc:	af00      	add	r7, sp, #0
 801c8be:	4603      	mov	r3, r0
 801c8c0:	6039      	str	r1, [r7, #0]
 801c8c2:	80fb      	strh	r3, [r7, #6]
 801c8c4:	4613      	mov	r3, r2
 801c8c6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801c8c8:	88fb      	ldrh	r3, [r7, #6]
 801c8ca:	3302      	adds	r3, #2
 801c8cc:	2b44      	cmp	r3, #68	@ 0x44
 801c8ce:	d906      	bls.n	801c8de <dhcp_option_short+0x26>
 801c8d0:	4b0f      	ldr	r3, [pc, #60]	@ (801c910 <dhcp_option_short+0x58>)
 801c8d2:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 801c8d6:	490f      	ldr	r1, [pc, #60]	@ (801c914 <dhcp_option_short+0x5c>)
 801c8d8:	480f      	ldr	r0, [pc, #60]	@ (801c918 <dhcp_option_short+0x60>)
 801c8da:	f004 f853 	bl	8020984 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801c8de:	88bb      	ldrh	r3, [r7, #4]
 801c8e0:	0a1b      	lsrs	r3, r3, #8
 801c8e2:	b29a      	uxth	r2, r3
 801c8e4:	88fb      	ldrh	r3, [r7, #6]
 801c8e6:	1c59      	adds	r1, r3, #1
 801c8e8:	80f9      	strh	r1, [r7, #6]
 801c8ea:	4619      	mov	r1, r3
 801c8ec:	683b      	ldr	r3, [r7, #0]
 801c8ee:	440b      	add	r3, r1
 801c8f0:	b2d2      	uxtb	r2, r2
 801c8f2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801c8f4:	88fb      	ldrh	r3, [r7, #6]
 801c8f6:	1c5a      	adds	r2, r3, #1
 801c8f8:	80fa      	strh	r2, [r7, #6]
 801c8fa:	461a      	mov	r2, r3
 801c8fc:	683b      	ldr	r3, [r7, #0]
 801c8fe:	4413      	add	r3, r2
 801c900:	88ba      	ldrh	r2, [r7, #4]
 801c902:	b2d2      	uxtb	r2, r2
 801c904:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801c906:	88fb      	ldrh	r3, [r7, #6]
}
 801c908:	4618      	mov	r0, r3
 801c90a:	3708      	adds	r7, #8
 801c90c:	46bd      	mov	sp, r7
 801c90e:	bd80      	pop	{r7, pc}
 801c910:	08026170 	.word	0x08026170
 801c914:	08026380 	.word	0x08026380
 801c918:	080261d0 	.word	0x080261d0

0801c91c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801c91c:	b580      	push	{r7, lr}
 801c91e:	b084      	sub	sp, #16
 801c920:	af00      	add	r7, sp, #0
 801c922:	4603      	mov	r3, r0
 801c924:	60b9      	str	r1, [r7, #8]
 801c926:	607a      	str	r2, [r7, #4]
 801c928:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801c92a:	89fb      	ldrh	r3, [r7, #14]
 801c92c:	3304      	adds	r3, #4
 801c92e:	2b44      	cmp	r3, #68	@ 0x44
 801c930:	d906      	bls.n	801c940 <dhcp_option_long+0x24>
 801c932:	4b19      	ldr	r3, [pc, #100]	@ (801c998 <dhcp_option_long+0x7c>)
 801c934:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 801c938:	4918      	ldr	r1, [pc, #96]	@ (801c99c <dhcp_option_long+0x80>)
 801c93a:	4819      	ldr	r0, [pc, #100]	@ (801c9a0 <dhcp_option_long+0x84>)
 801c93c:	f004 f822 	bl	8020984 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	0e1a      	lsrs	r2, r3, #24
 801c944:	89fb      	ldrh	r3, [r7, #14]
 801c946:	1c59      	adds	r1, r3, #1
 801c948:	81f9      	strh	r1, [r7, #14]
 801c94a:	4619      	mov	r1, r3
 801c94c:	68bb      	ldr	r3, [r7, #8]
 801c94e:	440b      	add	r3, r1
 801c950:	b2d2      	uxtb	r2, r2
 801c952:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801c954:	687b      	ldr	r3, [r7, #4]
 801c956:	0c1a      	lsrs	r2, r3, #16
 801c958:	89fb      	ldrh	r3, [r7, #14]
 801c95a:	1c59      	adds	r1, r3, #1
 801c95c:	81f9      	strh	r1, [r7, #14]
 801c95e:	4619      	mov	r1, r3
 801c960:	68bb      	ldr	r3, [r7, #8]
 801c962:	440b      	add	r3, r1
 801c964:	b2d2      	uxtb	r2, r2
 801c966:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	0a1a      	lsrs	r2, r3, #8
 801c96c:	89fb      	ldrh	r3, [r7, #14]
 801c96e:	1c59      	adds	r1, r3, #1
 801c970:	81f9      	strh	r1, [r7, #14]
 801c972:	4619      	mov	r1, r3
 801c974:	68bb      	ldr	r3, [r7, #8]
 801c976:	440b      	add	r3, r1
 801c978:	b2d2      	uxtb	r2, r2
 801c97a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801c97c:	89fb      	ldrh	r3, [r7, #14]
 801c97e:	1c5a      	adds	r2, r3, #1
 801c980:	81fa      	strh	r2, [r7, #14]
 801c982:	461a      	mov	r2, r3
 801c984:	68bb      	ldr	r3, [r7, #8]
 801c986:	4413      	add	r3, r2
 801c988:	687a      	ldr	r2, [r7, #4]
 801c98a:	b2d2      	uxtb	r2, r2
 801c98c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801c98e:	89fb      	ldrh	r3, [r7, #14]
}
 801c990:	4618      	mov	r0, r3
 801c992:	3710      	adds	r7, #16
 801c994:	46bd      	mov	sp, r7
 801c996:	bd80      	pop	{r7, pc}
 801c998:	08026170 	.word	0x08026170
 801c99c:	080263bc 	.word	0x080263bc
 801c9a0:	080261d0 	.word	0x080261d0

0801c9a4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801c9a4:	b580      	push	{r7, lr}
 801c9a6:	b090      	sub	sp, #64	@ 0x40
 801c9a8:	af00      	add	r7, sp, #0
 801c9aa:	6078      	str	r0, [r7, #4]
 801c9ac:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801c9ae:	2300      	movs	r3, #0
 801c9b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 801c9b2:	2300      	movs	r3, #0
 801c9b4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801c9b6:	2208      	movs	r2, #8
 801c9b8:	2100      	movs	r1, #0
 801c9ba:	48b5      	ldr	r0, [pc, #724]	@ (801cc90 <dhcp_parse_reply+0x2ec>)
 801c9bc:	f004 f988 	bl	8020cd0 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801c9c0:	687b      	ldr	r3, [r7, #4]
 801c9c2:	895b      	ldrh	r3, [r3, #10]
 801c9c4:	2b2b      	cmp	r3, #43	@ 0x2b
 801c9c6:	d802      	bhi.n	801c9ce <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801c9c8:	f06f 0301 	mvn.w	r3, #1
 801c9cc:	e2a7      	b.n	801cf1e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	685b      	ldr	r3, [r3, #4]
 801c9d2:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801c9d4:	23f0      	movs	r3, #240	@ 0xf0
 801c9d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	891b      	ldrh	r3, [r3, #8]
 801c9dc:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 801c9de:	687b      	ldr	r3, [r7, #4]
 801c9e0:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801c9e2:	e00c      	b.n	801c9fe <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801c9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c9e6:	895b      	ldrh	r3, [r3, #10]
 801c9e8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801c9ea:	1ad3      	subs	r3, r2, r3
 801c9ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801c9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c9f0:	895b      	ldrh	r3, [r3, #10]
 801c9f2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 801c9f4:	1ad3      	subs	r3, r2, r3
 801c9f6:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 801c9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c9fa:	681b      	ldr	r3, [r3, #0]
 801c9fc:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801c9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	d004      	beq.n	801ca0e <dhcp_parse_reply+0x6a>
 801ca04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca06:	895b      	ldrh	r3, [r3, #10]
 801ca08:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801ca0a:	429a      	cmp	r2, r3
 801ca0c:	d2ea      	bcs.n	801c9e4 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801ca0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	d102      	bne.n	801ca1a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801ca14:	f06f 0301 	mvn.w	r3, #1
 801ca18:	e281      	b.n	801cf1e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801ca1a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801ca1c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 801ca1e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801ca20:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 801ca22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca24:	685b      	ldr	r3, [r3, #4]
 801ca26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801ca28:	e239      	b.n	801ce9e <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801ca2a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ca2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ca2e:	4413      	add	r3, r2
 801ca30:	781b      	ldrb	r3, [r3, #0]
 801ca32:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801ca34:	2300      	movs	r3, #0
 801ca36:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 801ca3a:	f04f 33ff 	mov.w	r3, #4294967295
 801ca3e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801ca40:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ca42:	3302      	adds	r3, #2
 801ca44:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801ca46:	8bfa      	ldrh	r2, [r7, #30]
 801ca48:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ca4a:	429a      	cmp	r2, r3
 801ca4c:	d202      	bcs.n	801ca54 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801ca4e:	f06f 0301 	mvn.w	r3, #1
 801ca52:	e264      	b.n	801cf1e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801ca54:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ca56:	3301      	adds	r3, #1
 801ca58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ca5a:	8952      	ldrh	r2, [r2, #10]
 801ca5c:	4293      	cmp	r3, r2
 801ca5e:	da07      	bge.n	801ca70 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801ca60:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ca62:	3301      	adds	r3, #1
 801ca64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ca66:	4413      	add	r3, r2
 801ca68:	781b      	ldrb	r3, [r3, #0]
 801ca6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ca6e:	e00b      	b.n	801ca88 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801ca70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca72:	681b      	ldr	r3, [r3, #0]
 801ca74:	2b00      	cmp	r3, #0
 801ca76:	d004      	beq.n	801ca82 <dhcp_parse_reply+0xde>
 801ca78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca7a:	681b      	ldr	r3, [r3, #0]
 801ca7c:	685b      	ldr	r3, [r3, #4]
 801ca7e:	781b      	ldrb	r3, [r3, #0]
 801ca80:	e000      	b.n	801ca84 <dhcp_parse_reply+0xe0>
 801ca82:	2300      	movs	r3, #0
 801ca84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801ca88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ca8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 801ca90:	7dfb      	ldrb	r3, [r7, #23]
 801ca92:	2b3b      	cmp	r3, #59	@ 0x3b
 801ca94:	f200 812c 	bhi.w	801ccf0 <dhcp_parse_reply+0x34c>
 801ca98:	a201      	add	r2, pc, #4	@ (adr r2, 801caa0 <dhcp_parse_reply+0xfc>)
 801ca9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ca9e:	bf00      	nop
 801caa0:	0801cb91 	.word	0x0801cb91
 801caa4:	0801cba1 	.word	0x0801cba1
 801caa8:	0801ccf1 	.word	0x0801ccf1
 801caac:	0801cbc3 	.word	0x0801cbc3
 801cab0:	0801ccf1 	.word	0x0801ccf1
 801cab4:	0801ccf1 	.word	0x0801ccf1
 801cab8:	0801ccf1 	.word	0x0801ccf1
 801cabc:	0801ccf1 	.word	0x0801ccf1
 801cac0:	0801ccf1 	.word	0x0801ccf1
 801cac4:	0801ccf1 	.word	0x0801ccf1
 801cac8:	0801ccf1 	.word	0x0801ccf1
 801cacc:	0801ccf1 	.word	0x0801ccf1
 801cad0:	0801ccf1 	.word	0x0801ccf1
 801cad4:	0801ccf1 	.word	0x0801ccf1
 801cad8:	0801ccf1 	.word	0x0801ccf1
 801cadc:	0801ccf1 	.word	0x0801ccf1
 801cae0:	0801ccf1 	.word	0x0801ccf1
 801cae4:	0801ccf1 	.word	0x0801ccf1
 801cae8:	0801ccf1 	.word	0x0801ccf1
 801caec:	0801ccf1 	.word	0x0801ccf1
 801caf0:	0801ccf1 	.word	0x0801ccf1
 801caf4:	0801ccf1 	.word	0x0801ccf1
 801caf8:	0801ccf1 	.word	0x0801ccf1
 801cafc:	0801ccf1 	.word	0x0801ccf1
 801cb00:	0801ccf1 	.word	0x0801ccf1
 801cb04:	0801ccf1 	.word	0x0801ccf1
 801cb08:	0801ccf1 	.word	0x0801ccf1
 801cb0c:	0801ccf1 	.word	0x0801ccf1
 801cb10:	0801ccf1 	.word	0x0801ccf1
 801cb14:	0801ccf1 	.word	0x0801ccf1
 801cb18:	0801ccf1 	.word	0x0801ccf1
 801cb1c:	0801ccf1 	.word	0x0801ccf1
 801cb20:	0801ccf1 	.word	0x0801ccf1
 801cb24:	0801ccf1 	.word	0x0801ccf1
 801cb28:	0801ccf1 	.word	0x0801ccf1
 801cb2c:	0801ccf1 	.word	0x0801ccf1
 801cb30:	0801ccf1 	.word	0x0801ccf1
 801cb34:	0801ccf1 	.word	0x0801ccf1
 801cb38:	0801ccf1 	.word	0x0801ccf1
 801cb3c:	0801ccf1 	.word	0x0801ccf1
 801cb40:	0801ccf1 	.word	0x0801ccf1
 801cb44:	0801ccf1 	.word	0x0801ccf1
 801cb48:	0801ccf1 	.word	0x0801ccf1
 801cb4c:	0801ccf1 	.word	0x0801ccf1
 801cb50:	0801ccf1 	.word	0x0801ccf1
 801cb54:	0801ccf1 	.word	0x0801ccf1
 801cb58:	0801ccf1 	.word	0x0801ccf1
 801cb5c:	0801ccf1 	.word	0x0801ccf1
 801cb60:	0801ccf1 	.word	0x0801ccf1
 801cb64:	0801ccf1 	.word	0x0801ccf1
 801cb68:	0801ccf1 	.word	0x0801ccf1
 801cb6c:	0801cbef 	.word	0x0801cbef
 801cb70:	0801cc11 	.word	0x0801cc11
 801cb74:	0801cc4d 	.word	0x0801cc4d
 801cb78:	0801cc6f 	.word	0x0801cc6f
 801cb7c:	0801ccf1 	.word	0x0801ccf1
 801cb80:	0801ccf1 	.word	0x0801ccf1
 801cb84:	0801ccf1 	.word	0x0801ccf1
 801cb88:	0801ccad 	.word	0x0801ccad
 801cb8c:	0801cccf 	.word	0x0801cccf
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801cb90:	2300      	movs	r3, #0
 801cb92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cb96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cb9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 801cb9e:	e0ab      	b.n	801ccf8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cba0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cba4:	2b04      	cmp	r3, #4
 801cba6:	d009      	beq.n	801cbbc <dhcp_parse_reply+0x218>
 801cba8:	4b3a      	ldr	r3, [pc, #232]	@ (801cc94 <dhcp_parse_reply+0x2f0>)
 801cbaa:	f240 622e 	movw	r2, #1582	@ 0x62e
 801cbae:	493a      	ldr	r1, [pc, #232]	@ (801cc98 <dhcp_parse_reply+0x2f4>)
 801cbb0:	483a      	ldr	r0, [pc, #232]	@ (801cc9c <dhcp_parse_reply+0x2f8>)
 801cbb2:	f003 fee7 	bl	8020984 <iprintf>
 801cbb6:	f06f 0305 	mvn.w	r3, #5
 801cbba:	e1b0      	b.n	801cf1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801cbbc:	2306      	movs	r3, #6
 801cbbe:	623b      	str	r3, [r7, #32]
        break;
 801cbc0:	e09a      	b.n	801ccf8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801cbc2:	2304      	movs	r3, #4
 801cbc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801cbc8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801cbcc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cbd0:	429a      	cmp	r2, r3
 801cbd2:	d209      	bcs.n	801cbe8 <dhcp_parse_reply+0x244>
 801cbd4:	4b2f      	ldr	r3, [pc, #188]	@ (801cc94 <dhcp_parse_reply+0x2f0>)
 801cbd6:	f240 6233 	movw	r2, #1587	@ 0x633
 801cbda:	4931      	ldr	r1, [pc, #196]	@ (801cca0 <dhcp_parse_reply+0x2fc>)
 801cbdc:	482f      	ldr	r0, [pc, #188]	@ (801cc9c <dhcp_parse_reply+0x2f8>)
 801cbde:	f003 fed1 	bl	8020984 <iprintf>
 801cbe2:	f06f 0305 	mvn.w	r3, #5
 801cbe6:	e19a      	b.n	801cf1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801cbe8:	2307      	movs	r3, #7
 801cbea:	623b      	str	r3, [r7, #32]
        break;
 801cbec:	e084      	b.n	801ccf8 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cbee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cbf2:	2b04      	cmp	r3, #4
 801cbf4:	d009      	beq.n	801cc0a <dhcp_parse_reply+0x266>
 801cbf6:	4b27      	ldr	r3, [pc, #156]	@ (801cc94 <dhcp_parse_reply+0x2f0>)
 801cbf8:	f240 6241 	movw	r2, #1601	@ 0x641
 801cbfc:	4926      	ldr	r1, [pc, #152]	@ (801cc98 <dhcp_parse_reply+0x2f4>)
 801cbfe:	4827      	ldr	r0, [pc, #156]	@ (801cc9c <dhcp_parse_reply+0x2f8>)
 801cc00:	f003 fec0 	bl	8020984 <iprintf>
 801cc04:	f06f 0305 	mvn.w	r3, #5
 801cc08:	e189      	b.n	801cf1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801cc0a:	2303      	movs	r3, #3
 801cc0c:	623b      	str	r3, [r7, #32]
        break;
 801cc0e:	e073      	b.n	801ccf8 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801cc10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc14:	2b01      	cmp	r3, #1
 801cc16:	d009      	beq.n	801cc2c <dhcp_parse_reply+0x288>
 801cc18:	4b1e      	ldr	r3, [pc, #120]	@ (801cc94 <dhcp_parse_reply+0x2f0>)
 801cc1a:	f240 624f 	movw	r2, #1615	@ 0x64f
 801cc1e:	4921      	ldr	r1, [pc, #132]	@ (801cca4 <dhcp_parse_reply+0x300>)
 801cc20:	481e      	ldr	r0, [pc, #120]	@ (801cc9c <dhcp_parse_reply+0x2f8>)
 801cc22:	f003 feaf 	bl	8020984 <iprintf>
 801cc26:	f06f 0305 	mvn.w	r3, #5
 801cc2a:	e178      	b.n	801cf1e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801cc2c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801cc2e:	2bf0      	cmp	r3, #240	@ 0xf0
 801cc30:	d009      	beq.n	801cc46 <dhcp_parse_reply+0x2a2>
 801cc32:	4b18      	ldr	r3, [pc, #96]	@ (801cc94 <dhcp_parse_reply+0x2f0>)
 801cc34:	f240 6251 	movw	r2, #1617	@ 0x651
 801cc38:	491b      	ldr	r1, [pc, #108]	@ (801cca8 <dhcp_parse_reply+0x304>)
 801cc3a:	4818      	ldr	r0, [pc, #96]	@ (801cc9c <dhcp_parse_reply+0x2f8>)
 801cc3c:	f003 fea2 	bl	8020984 <iprintf>
 801cc40:	f06f 0305 	mvn.w	r3, #5
 801cc44:	e16b      	b.n	801cf1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801cc46:	2300      	movs	r3, #0
 801cc48:	623b      	str	r3, [r7, #32]
        break;
 801cc4a:	e055      	b.n	801ccf8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801cc4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc50:	2b01      	cmp	r3, #1
 801cc52:	d009      	beq.n	801cc68 <dhcp_parse_reply+0x2c4>
 801cc54:	4b0f      	ldr	r3, [pc, #60]	@ (801cc94 <dhcp_parse_reply+0x2f0>)
 801cc56:	f240 6255 	movw	r2, #1621	@ 0x655
 801cc5a:	4912      	ldr	r1, [pc, #72]	@ (801cca4 <dhcp_parse_reply+0x300>)
 801cc5c:	480f      	ldr	r0, [pc, #60]	@ (801cc9c <dhcp_parse_reply+0x2f8>)
 801cc5e:	f003 fe91 	bl	8020984 <iprintf>
 801cc62:	f06f 0305 	mvn.w	r3, #5
 801cc66:	e15a      	b.n	801cf1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801cc68:	2301      	movs	r3, #1
 801cc6a:	623b      	str	r3, [r7, #32]
        break;
 801cc6c:	e044      	b.n	801ccf8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cc6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc72:	2b04      	cmp	r3, #4
 801cc74:	d009      	beq.n	801cc8a <dhcp_parse_reply+0x2e6>
 801cc76:	4b07      	ldr	r3, [pc, #28]	@ (801cc94 <dhcp_parse_reply+0x2f0>)
 801cc78:	f240 6259 	movw	r2, #1625	@ 0x659
 801cc7c:	4906      	ldr	r1, [pc, #24]	@ (801cc98 <dhcp_parse_reply+0x2f4>)
 801cc7e:	4807      	ldr	r0, [pc, #28]	@ (801cc9c <dhcp_parse_reply+0x2f8>)
 801cc80:	f003 fe80 	bl	8020984 <iprintf>
 801cc84:	f06f 0305 	mvn.w	r3, #5
 801cc88:	e149      	b.n	801cf1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801cc8a:	2302      	movs	r3, #2
 801cc8c:	623b      	str	r3, [r7, #32]
        break;
 801cc8e:	e033      	b.n	801ccf8 <dhcp_parse_reply+0x354>
 801cc90:	2400cb7c 	.word	0x2400cb7c
 801cc94:	08026170 	.word	0x08026170
 801cc98:	080263f8 	.word	0x080263f8
 801cc9c:	080261d0 	.word	0x080261d0
 801cca0:	08026404 	.word	0x08026404
 801cca4:	08026418 	.word	0x08026418
 801cca8:	08026424 	.word	0x08026424
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ccac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ccb0:	2b04      	cmp	r3, #4
 801ccb2:	d009      	beq.n	801ccc8 <dhcp_parse_reply+0x324>
 801ccb4:	4b9c      	ldr	r3, [pc, #624]	@ (801cf28 <dhcp_parse_reply+0x584>)
 801ccb6:	f240 625d 	movw	r2, #1629	@ 0x65d
 801ccba:	499c      	ldr	r1, [pc, #624]	@ (801cf2c <dhcp_parse_reply+0x588>)
 801ccbc:	489c      	ldr	r0, [pc, #624]	@ (801cf30 <dhcp_parse_reply+0x58c>)
 801ccbe:	f003 fe61 	bl	8020984 <iprintf>
 801ccc2:	f06f 0305 	mvn.w	r3, #5
 801ccc6:	e12a      	b.n	801cf1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 801ccc8:	2304      	movs	r3, #4
 801ccca:	623b      	str	r3, [r7, #32]
        break;
 801cccc:	e014      	b.n	801ccf8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ccce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ccd2:	2b04      	cmp	r3, #4
 801ccd4:	d009      	beq.n	801ccea <dhcp_parse_reply+0x346>
 801ccd6:	4b94      	ldr	r3, [pc, #592]	@ (801cf28 <dhcp_parse_reply+0x584>)
 801ccd8:	f240 6261 	movw	r2, #1633	@ 0x661
 801ccdc:	4993      	ldr	r1, [pc, #588]	@ (801cf2c <dhcp_parse_reply+0x588>)
 801ccde:	4894      	ldr	r0, [pc, #592]	@ (801cf30 <dhcp_parse_reply+0x58c>)
 801cce0:	f003 fe50 	bl	8020984 <iprintf>
 801cce4:	f06f 0305 	mvn.w	r3, #5
 801cce8:	e119      	b.n	801cf1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801ccea:	2305      	movs	r3, #5
 801ccec:	623b      	str	r3, [r7, #32]
        break;
 801ccee:	e003      	b.n	801ccf8 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 801ccf0:	2300      	movs	r3, #0
 801ccf2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801ccf6:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801ccf8:	7dfb      	ldrb	r3, [r7, #23]
 801ccfa:	2b00      	cmp	r3, #0
 801ccfc:	d103      	bne.n	801cd06 <dhcp_parse_reply+0x362>
      offset++;
 801ccfe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801cd00:	3301      	adds	r3, #1
 801cd02:	877b      	strh	r3, [r7, #58]	@ 0x3a
 801cd04:	e0a1      	b.n	801ce4a <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801cd06:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801cd08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cd0c:	4413      	add	r3, r2
 801cd0e:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 801cd12:	4293      	cmp	r3, r2
 801cd14:	dd02      	ble.n	801cd1c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801cd16:	f06f 0301 	mvn.w	r3, #1
 801cd1a:	e100      	b.n	801cf1e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 801cd1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cd20:	b29a      	uxth	r2, r3
 801cd22:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801cd24:	4413      	add	r3, r2
 801cd26:	b29b      	uxth	r3, r3
 801cd28:	3302      	adds	r3, #2
 801cd2a:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 801cd2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cd30:	2b00      	cmp	r3, #0
 801cd32:	f000 808a 	beq.w	801ce4a <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801cd36:	2300      	movs	r3, #0
 801cd38:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801cd3a:	6a3b      	ldr	r3, [r7, #32]
 801cd3c:	2b00      	cmp	r3, #0
 801cd3e:	db02      	blt.n	801cd46 <dhcp_parse_reply+0x3a2>
 801cd40:	6a3b      	ldr	r3, [r7, #32]
 801cd42:	2b07      	cmp	r3, #7
 801cd44:	dd06      	ble.n	801cd54 <dhcp_parse_reply+0x3b0>
 801cd46:	4b78      	ldr	r3, [pc, #480]	@ (801cf28 <dhcp_parse_reply+0x584>)
 801cd48:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 801cd4c:	4979      	ldr	r1, [pc, #484]	@ (801cf34 <dhcp_parse_reply+0x590>)
 801cd4e:	4878      	ldr	r0, [pc, #480]	@ (801cf30 <dhcp_parse_reply+0x58c>)
 801cd50:	f003 fe18 	bl	8020984 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801cd54:	4a78      	ldr	r2, [pc, #480]	@ (801cf38 <dhcp_parse_reply+0x594>)
 801cd56:	6a3b      	ldr	r3, [r7, #32]
 801cd58:	4413      	add	r3, r2
 801cd5a:	781b      	ldrb	r3, [r3, #0]
 801cd5c:	2b00      	cmp	r3, #0
 801cd5e:	d174      	bne.n	801ce4a <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 801cd60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cd64:	2b04      	cmp	r3, #4
 801cd66:	bf28      	it	cs
 801cd68:	2304      	movcs	r3, #4
 801cd6a:	b2db      	uxtb	r3, r3
 801cd6c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801cd6e:	8bfb      	ldrh	r3, [r7, #30]
 801cd70:	8aba      	ldrh	r2, [r7, #20]
 801cd72:	f107 0108 	add.w	r1, r7, #8
 801cd76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801cd78:	f7f7 fc7c 	bl	8014674 <pbuf_copy_partial>
 801cd7c:	4603      	mov	r3, r0
 801cd7e:	461a      	mov	r2, r3
 801cd80:	8abb      	ldrh	r3, [r7, #20]
 801cd82:	4293      	cmp	r3, r2
 801cd84:	d002      	beq.n	801cd8c <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801cd86:	f06f 0301 	mvn.w	r3, #1
 801cd8a:	e0c8      	b.n	801cf1e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 801cd8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cd90:	2b04      	cmp	r3, #4
 801cd92:	d933      	bls.n	801cdfc <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801cd94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cd98:	f003 0303 	and.w	r3, r3, #3
 801cd9c:	b2db      	uxtb	r3, r3
 801cd9e:	2b00      	cmp	r3, #0
 801cda0:	d009      	beq.n	801cdb6 <dhcp_parse_reply+0x412>
 801cda2:	4b61      	ldr	r3, [pc, #388]	@ (801cf28 <dhcp_parse_reply+0x584>)
 801cda4:	f240 6281 	movw	r2, #1665	@ 0x681
 801cda8:	4964      	ldr	r1, [pc, #400]	@ (801cf3c <dhcp_parse_reply+0x598>)
 801cdaa:	4861      	ldr	r0, [pc, #388]	@ (801cf30 <dhcp_parse_reply+0x58c>)
 801cdac:	f003 fdea 	bl	8020984 <iprintf>
 801cdb0:	f06f 0305 	mvn.w	r3, #5
 801cdb4:	e0b3      	b.n	801cf1e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801cdb6:	4a60      	ldr	r2, [pc, #384]	@ (801cf38 <dhcp_parse_reply+0x594>)
 801cdb8:	6a3b      	ldr	r3, [r7, #32]
 801cdba:	4413      	add	r3, r2
 801cdbc:	2201      	movs	r2, #1
 801cdbe:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801cdc0:	68bb      	ldr	r3, [r7, #8]
 801cdc2:	4618      	mov	r0, r3
 801cdc4:	f7f5 fdaf 	bl	8012926 <lwip_htonl>
 801cdc8:	4602      	mov	r2, r0
 801cdca:	495d      	ldr	r1, [pc, #372]	@ (801cf40 <dhcp_parse_reply+0x59c>)
 801cdcc:	6a3b      	ldr	r3, [r7, #32]
 801cdce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801cdd2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cdd6:	3b04      	subs	r3, #4
 801cdd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801cddc:	8bfb      	ldrh	r3, [r7, #30]
 801cdde:	3304      	adds	r3, #4
 801cde0:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801cde2:	8a7a      	ldrh	r2, [r7, #18]
 801cde4:	8bfb      	ldrh	r3, [r7, #30]
 801cde6:	429a      	cmp	r2, r3
 801cde8:	d202      	bcs.n	801cdf0 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801cdea:	f06f 0301 	mvn.w	r3, #1
 801cdee:	e096      	b.n	801cf1e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 801cdf0:	8a7b      	ldrh	r3, [r7, #18]
 801cdf2:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801cdf4:	6a3b      	ldr	r3, [r7, #32]
 801cdf6:	3301      	adds	r3, #1
 801cdf8:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801cdfa:	e79e      	b.n	801cd3a <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 801cdfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ce00:	2b04      	cmp	r3, #4
 801ce02:	d106      	bne.n	801ce12 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 801ce04:	68bb      	ldr	r3, [r7, #8]
 801ce06:	4618      	mov	r0, r3
 801ce08:	f7f5 fd8d 	bl	8012926 <lwip_htonl>
 801ce0c:	4603      	mov	r3, r0
 801ce0e:	60bb      	str	r3, [r7, #8]
 801ce10:	e011      	b.n	801ce36 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801ce12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ce16:	2b01      	cmp	r3, #1
 801ce18:	d009      	beq.n	801ce2e <dhcp_parse_reply+0x48a>
 801ce1a:	4b43      	ldr	r3, [pc, #268]	@ (801cf28 <dhcp_parse_reply+0x584>)
 801ce1c:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 801ce20:	4948      	ldr	r1, [pc, #288]	@ (801cf44 <dhcp_parse_reply+0x5a0>)
 801ce22:	4843      	ldr	r0, [pc, #268]	@ (801cf30 <dhcp_parse_reply+0x58c>)
 801ce24:	f003 fdae 	bl	8020984 <iprintf>
 801ce28:	f06f 0305 	mvn.w	r3, #5
 801ce2c:	e077      	b.n	801cf1e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 801ce2e:	f107 0308 	add.w	r3, r7, #8
 801ce32:	781b      	ldrb	r3, [r3, #0]
 801ce34:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801ce36:	4a40      	ldr	r2, [pc, #256]	@ (801cf38 <dhcp_parse_reply+0x594>)
 801ce38:	6a3b      	ldr	r3, [r7, #32]
 801ce3a:	4413      	add	r3, r2
 801ce3c:	2201      	movs	r2, #1
 801ce3e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801ce40:	68ba      	ldr	r2, [r7, #8]
 801ce42:	493f      	ldr	r1, [pc, #252]	@ (801cf40 <dhcp_parse_reply+0x59c>)
 801ce44:	6a3b      	ldr	r3, [r7, #32]
 801ce46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801ce4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce4c:	895b      	ldrh	r3, [r3, #10]
 801ce4e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801ce50:	429a      	cmp	r2, r3
 801ce52:	d324      	bcc.n	801ce9e <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 801ce54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce56:	895b      	ldrh	r3, [r3, #10]
 801ce58:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801ce5a:	1ad3      	subs	r3, r2, r3
 801ce5c:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801ce5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce60:	895b      	ldrh	r3, [r3, #10]
 801ce62:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801ce64:	1ad3      	subs	r3, r2, r3
 801ce66:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 801ce68:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801ce6a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801ce6c:	429a      	cmp	r2, r3
 801ce6e:	d213      	bcs.n	801ce98 <dhcp_parse_reply+0x4f4>
        q = q->next;
 801ce70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801ce76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce78:	2b00      	cmp	r3, #0
 801ce7a:	d109      	bne.n	801ce90 <dhcp_parse_reply+0x4ec>
 801ce7c:	4b2a      	ldr	r3, [pc, #168]	@ (801cf28 <dhcp_parse_reply+0x584>)
 801ce7e:	f240 629d 	movw	r2, #1693	@ 0x69d
 801ce82:	4931      	ldr	r1, [pc, #196]	@ (801cf48 <dhcp_parse_reply+0x5a4>)
 801ce84:	482a      	ldr	r0, [pc, #168]	@ (801cf30 <dhcp_parse_reply+0x58c>)
 801ce86:	f003 fd7d 	bl	8020984 <iprintf>
 801ce8a:	f06f 0305 	mvn.w	r3, #5
 801ce8e:	e046      	b.n	801cf1e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 801ce90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce92:	685b      	ldr	r3, [r3, #4]
 801ce94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ce96:	e002      	b.n	801ce9e <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801ce98:	f06f 0301 	mvn.w	r3, #1
 801ce9c:	e03f      	b.n	801cf1e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801ce9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	d00a      	beq.n	801ceba <dhcp_parse_reply+0x516>
 801cea4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801cea6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801cea8:	429a      	cmp	r2, r3
 801ceaa:	d206      	bcs.n	801ceba <dhcp_parse_reply+0x516>
 801ceac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ceae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ceb0:	4413      	add	r3, r2
 801ceb2:	781b      	ldrb	r3, [r3, #0]
 801ceb4:	2bff      	cmp	r3, #255	@ 0xff
 801ceb6:	f47f adb8 	bne.w	801ca2a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801ceba:	4b1f      	ldr	r3, [pc, #124]	@ (801cf38 <dhcp_parse_reply+0x594>)
 801cebc:	781b      	ldrb	r3, [r3, #0]
 801cebe:	2b00      	cmp	r3, #0
 801cec0:	d018      	beq.n	801cef4 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801cec2:	4b1f      	ldr	r3, [pc, #124]	@ (801cf40 <dhcp_parse_reply+0x59c>)
 801cec4:	681b      	ldr	r3, [r3, #0]
 801cec6:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801cec8:	4b1b      	ldr	r3, [pc, #108]	@ (801cf38 <dhcp_parse_reply+0x594>)
 801ceca:	2200      	movs	r2, #0
 801cecc:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801cece:	68fb      	ldr	r3, [r7, #12]
 801ced0:	2b01      	cmp	r3, #1
 801ced2:	d102      	bne.n	801ceda <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801ced4:	2301      	movs	r3, #1
 801ced6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ced8:	e00c      	b.n	801cef4 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801ceda:	68fb      	ldr	r3, [r7, #12]
 801cedc:	2b02      	cmp	r3, #2
 801cede:	d102      	bne.n	801cee6 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 801cee0:	2301      	movs	r3, #1
 801cee2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801cee4:	e006      	b.n	801cef4 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801cee6:	68fb      	ldr	r3, [r7, #12]
 801cee8:	2b03      	cmp	r3, #3
 801ceea:	d103      	bne.n	801cef4 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 801ceec:	2301      	movs	r3, #1
 801ceee:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 801cef0:	2301      	movs	r3, #1
 801cef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801cef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	d006      	beq.n	801cf08 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801cefa:	2300      	movs	r3, #0
 801cefc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 801cefe:	236c      	movs	r3, #108	@ 0x6c
 801cf00:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801cf02:	23ec      	movs	r3, #236	@ 0xec
 801cf04:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801cf06:	e56a      	b.n	801c9de <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801cf08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf0a:	2b00      	cmp	r3, #0
 801cf0c:	d006      	beq.n	801cf1c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801cf0e:	2300      	movs	r3, #0
 801cf10:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 801cf12:	232c      	movs	r3, #44	@ 0x2c
 801cf14:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801cf16:	236c      	movs	r3, #108	@ 0x6c
 801cf18:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 801cf1a:	e560      	b.n	801c9de <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801cf1c:	2300      	movs	r3, #0
}
 801cf1e:	4618      	mov	r0, r3
 801cf20:	3740      	adds	r7, #64	@ 0x40
 801cf22:	46bd      	mov	sp, r7
 801cf24:	bd80      	pop	{r7, pc}
 801cf26:	bf00      	nop
 801cf28:	08026170 	.word	0x08026170
 801cf2c:	080263f8 	.word	0x080263f8
 801cf30:	080261d0 	.word	0x080261d0
 801cf34:	0802643c 	.word	0x0802643c
 801cf38:	2400cb7c 	.word	0x2400cb7c
 801cf3c:	08026450 	.word	0x08026450
 801cf40:	2400cb5c 	.word	0x2400cb5c
 801cf44:	08026468 	.word	0x08026468
 801cf48:	0802647c 	.word	0x0802647c

0801cf4c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801cf4c:	b580      	push	{r7, lr}
 801cf4e:	b08a      	sub	sp, #40	@ 0x28
 801cf50:	af00      	add	r7, sp, #0
 801cf52:	60f8      	str	r0, [r7, #12]
 801cf54:	60b9      	str	r1, [r7, #8]
 801cf56:	607a      	str	r2, [r7, #4]
 801cf58:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801cf5a:	4b60      	ldr	r3, [pc, #384]	@ (801d0dc <dhcp_recv+0x190>)
 801cf5c:	685b      	ldr	r3, [r3, #4]
 801cf5e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cf60:	6a3b      	ldr	r3, [r7, #32]
 801cf62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cf64:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	685b      	ldr	r3, [r3, #4]
 801cf6a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801cf6c:	69fb      	ldr	r3, [r7, #28]
 801cf6e:	2b00      	cmp	r3, #0
 801cf70:	f000 809d 	beq.w	801d0ae <dhcp_recv+0x162>
 801cf74:	69fb      	ldr	r3, [r7, #28]
 801cf76:	791b      	ldrb	r3, [r3, #4]
 801cf78:	2b00      	cmp	r3, #0
 801cf7a:	f000 8098 	beq.w	801d0ae <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	895b      	ldrh	r3, [r3, #10]
 801cf82:	2b2b      	cmp	r3, #43	@ 0x2b
 801cf84:	f240 8095 	bls.w	801d0b2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801cf88:	69bb      	ldr	r3, [r7, #24]
 801cf8a:	781b      	ldrb	r3, [r3, #0]
 801cf8c:	2b02      	cmp	r3, #2
 801cf8e:	f040 8092 	bne.w	801d0b6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801cf92:	2300      	movs	r3, #0
 801cf94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cf98:	e012      	b.n	801cfc0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801cf9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cf9e:	6a3a      	ldr	r2, [r7, #32]
 801cfa0:	4413      	add	r3, r2
 801cfa2:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 801cfa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cfaa:	69b9      	ldr	r1, [r7, #24]
 801cfac:	440b      	add	r3, r1
 801cfae:	7f1b      	ldrb	r3, [r3, #28]
 801cfb0:	429a      	cmp	r2, r3
 801cfb2:	f040 8082 	bne.w	801d0ba <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801cfb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cfba:	3301      	adds	r3, #1
 801cfbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cfc0:	6a3b      	ldr	r3, [r7, #32]
 801cfc2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801cfc6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801cfca:	429a      	cmp	r2, r3
 801cfcc:	d203      	bcs.n	801cfd6 <dhcp_recv+0x8a>
 801cfce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cfd2:	2b05      	cmp	r3, #5
 801cfd4:	d9e1      	bls.n	801cf9a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801cfd6:	69bb      	ldr	r3, [r7, #24]
 801cfd8:	685b      	ldr	r3, [r3, #4]
 801cfda:	4618      	mov	r0, r3
 801cfdc:	f7f5 fca3 	bl	8012926 <lwip_htonl>
 801cfe0:	4602      	mov	r2, r0
 801cfe2:	69fb      	ldr	r3, [r7, #28]
 801cfe4:	681b      	ldr	r3, [r3, #0]
 801cfe6:	429a      	cmp	r2, r3
 801cfe8:	d169      	bne.n	801d0be <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801cfea:	69f9      	ldr	r1, [r7, #28]
 801cfec:	6878      	ldr	r0, [r7, #4]
 801cfee:	f7ff fcd9 	bl	801c9a4 <dhcp_parse_reply>
 801cff2:	4603      	mov	r3, r0
 801cff4:	2b00      	cmp	r3, #0
 801cff6:	d164      	bne.n	801d0c2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801cff8:	4b39      	ldr	r3, [pc, #228]	@ (801d0e0 <dhcp_recv+0x194>)
 801cffa:	785b      	ldrb	r3, [r3, #1]
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	d062      	beq.n	801d0c6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801d000:	687b      	ldr	r3, [r7, #4]
 801d002:	685b      	ldr	r3, [r3, #4]
 801d004:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801d006:	4b37      	ldr	r3, [pc, #220]	@ (801d0e4 <dhcp_recv+0x198>)
 801d008:	685b      	ldr	r3, [r3, #4]
 801d00a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801d00c:	7cfb      	ldrb	r3, [r7, #19]
 801d00e:	2b05      	cmp	r3, #5
 801d010:	d12a      	bne.n	801d068 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801d012:	69fb      	ldr	r3, [r7, #28]
 801d014:	795b      	ldrb	r3, [r3, #5]
 801d016:	2b01      	cmp	r3, #1
 801d018:	d112      	bne.n	801d040 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801d01a:	6979      	ldr	r1, [r7, #20]
 801d01c:	6a38      	ldr	r0, [r7, #32]
 801d01e:	f7fe fe1d 	bl	801bc5c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801d022:	6a3b      	ldr	r3, [r7, #32]
 801d024:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801d028:	f003 0308 	and.w	r3, r3, #8
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	d003      	beq.n	801d038 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801d030:	6a38      	ldr	r0, [r7, #32]
 801d032:	f7fe fb8b 	bl	801b74c <dhcp_check>
 801d036:	e049      	b.n	801d0cc <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801d038:	6a38      	ldr	r0, [r7, #32]
 801d03a:	f7ff f86d 	bl	801c118 <dhcp_bind>
 801d03e:	e045      	b.n	801d0cc <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801d040:	69fb      	ldr	r3, [r7, #28]
 801d042:	795b      	ldrb	r3, [r3, #5]
 801d044:	2b03      	cmp	r3, #3
 801d046:	d007      	beq.n	801d058 <dhcp_recv+0x10c>
 801d048:	69fb      	ldr	r3, [r7, #28]
 801d04a:	795b      	ldrb	r3, [r3, #5]
 801d04c:	2b04      	cmp	r3, #4
 801d04e:	d003      	beq.n	801d058 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801d050:	69fb      	ldr	r3, [r7, #28]
 801d052:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801d054:	2b05      	cmp	r3, #5
 801d056:	d139      	bne.n	801d0cc <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801d058:	6979      	ldr	r1, [r7, #20]
 801d05a:	6a38      	ldr	r0, [r7, #32]
 801d05c:	f7fe fdfe 	bl	801bc5c <dhcp_handle_ack>
      dhcp_bind(netif);
 801d060:	6a38      	ldr	r0, [r7, #32]
 801d062:	f7ff f859 	bl	801c118 <dhcp_bind>
 801d066:	e031      	b.n	801d0cc <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801d068:	7cfb      	ldrb	r3, [r7, #19]
 801d06a:	2b06      	cmp	r3, #6
 801d06c:	d113      	bne.n	801d096 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801d06e:	69fb      	ldr	r3, [r7, #28]
 801d070:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801d072:	2b03      	cmp	r3, #3
 801d074:	d00b      	beq.n	801d08e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801d076:	69fb      	ldr	r3, [r7, #28]
 801d078:	795b      	ldrb	r3, [r3, #5]
 801d07a:	2b01      	cmp	r3, #1
 801d07c:	d007      	beq.n	801d08e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801d07e:	69fb      	ldr	r3, [r7, #28]
 801d080:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801d082:	2b04      	cmp	r3, #4
 801d084:	d003      	beq.n	801d08e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801d086:	69fb      	ldr	r3, [r7, #28]
 801d088:	795b      	ldrb	r3, [r3, #5]
 801d08a:	2b05      	cmp	r3, #5
 801d08c:	d103      	bne.n	801d096 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801d08e:	6a38      	ldr	r0, [r7, #32]
 801d090:	f7fe fb42 	bl	801b718 <dhcp_handle_nak>
 801d094:	e01a      	b.n	801d0cc <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801d096:	7cfb      	ldrb	r3, [r7, #19]
 801d098:	2b02      	cmp	r3, #2
 801d09a:	d116      	bne.n	801d0ca <dhcp_recv+0x17e>
 801d09c:	69fb      	ldr	r3, [r7, #28]
 801d09e:	795b      	ldrb	r3, [r3, #5]
 801d0a0:	2b06      	cmp	r3, #6
 801d0a2:	d112      	bne.n	801d0ca <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801d0a4:	6979      	ldr	r1, [r7, #20]
 801d0a6:	6a38      	ldr	r0, [r7, #32]
 801d0a8:	f7fe fb84 	bl	801b7b4 <dhcp_handle_offer>
 801d0ac:	e00e      	b.n	801d0cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801d0ae:	bf00      	nop
 801d0b0:	e00c      	b.n	801d0cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801d0b2:	bf00      	nop
 801d0b4:	e00a      	b.n	801d0cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801d0b6:	bf00      	nop
 801d0b8:	e008      	b.n	801d0cc <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801d0ba:	bf00      	nop
 801d0bc:	e006      	b.n	801d0cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801d0be:	bf00      	nop
 801d0c0:	e004      	b.n	801d0cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801d0c2:	bf00      	nop
 801d0c4:	e002      	b.n	801d0cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801d0c6:	bf00      	nop
 801d0c8:	e000      	b.n	801d0cc <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801d0ca:	bf00      	nop
  pbuf_free(p);
 801d0cc:	6878      	ldr	r0, [r7, #4]
 801d0ce:	f7f7 f8cb 	bl	8014268 <pbuf_free>
}
 801d0d2:	bf00      	nop
 801d0d4:	3728      	adds	r7, #40	@ 0x28
 801d0d6:	46bd      	mov	sp, r7
 801d0d8:	bd80      	pop	{r7, pc}
 801d0da:	bf00      	nop
 801d0dc:	240099dc 	.word	0x240099dc
 801d0e0:	2400cb7c 	.word	0x2400cb7c
 801d0e4:	2400cb5c 	.word	0x2400cb5c

0801d0e8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801d0e8:	b580      	push	{r7, lr}
 801d0ea:	b088      	sub	sp, #32
 801d0ec:	af00      	add	r7, sp, #0
 801d0ee:	60f8      	str	r0, [r7, #12]
 801d0f0:	60b9      	str	r1, [r7, #8]
 801d0f2:	603b      	str	r3, [r7, #0]
 801d0f4:	4613      	mov	r3, r2
 801d0f6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801d0f8:	68fb      	ldr	r3, [r7, #12]
 801d0fa:	2b00      	cmp	r3, #0
 801d0fc:	d108      	bne.n	801d110 <dhcp_create_msg+0x28>
 801d0fe:	4b5f      	ldr	r3, [pc, #380]	@ (801d27c <dhcp_create_msg+0x194>)
 801d100:	f240 7269 	movw	r2, #1897	@ 0x769
 801d104:	495e      	ldr	r1, [pc, #376]	@ (801d280 <dhcp_create_msg+0x198>)
 801d106:	485f      	ldr	r0, [pc, #380]	@ (801d284 <dhcp_create_msg+0x19c>)
 801d108:	f003 fc3c 	bl	8020984 <iprintf>
 801d10c:	2300      	movs	r3, #0
 801d10e:	e0b1      	b.n	801d274 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801d110:	68bb      	ldr	r3, [r7, #8]
 801d112:	2b00      	cmp	r3, #0
 801d114:	d108      	bne.n	801d128 <dhcp_create_msg+0x40>
 801d116:	4b59      	ldr	r3, [pc, #356]	@ (801d27c <dhcp_create_msg+0x194>)
 801d118:	f240 726a 	movw	r2, #1898	@ 0x76a
 801d11c:	495a      	ldr	r1, [pc, #360]	@ (801d288 <dhcp_create_msg+0x1a0>)
 801d11e:	4859      	ldr	r0, [pc, #356]	@ (801d284 <dhcp_create_msg+0x19c>)
 801d120:	f003 fc30 	bl	8020984 <iprintf>
 801d124:	2300      	movs	r3, #0
 801d126:	e0a5      	b.n	801d274 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801d128:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801d12c:	f44f 719a 	mov.w	r1, #308	@ 0x134
 801d130:	2036      	movs	r0, #54	@ 0x36
 801d132:	f7f6 fdb5 	bl	8013ca0 <pbuf_alloc>
 801d136:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801d138:	69bb      	ldr	r3, [r7, #24]
 801d13a:	2b00      	cmp	r3, #0
 801d13c:	d101      	bne.n	801d142 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801d13e:	2300      	movs	r3, #0
 801d140:	e098      	b.n	801d274 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801d142:	69bb      	ldr	r3, [r7, #24]
 801d144:	895b      	ldrh	r3, [r3, #10]
 801d146:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801d14a:	d206      	bcs.n	801d15a <dhcp_create_msg+0x72>
 801d14c:	4b4b      	ldr	r3, [pc, #300]	@ (801d27c <dhcp_create_msg+0x194>)
 801d14e:	f240 7271 	movw	r2, #1905	@ 0x771
 801d152:	494e      	ldr	r1, [pc, #312]	@ (801d28c <dhcp_create_msg+0x1a4>)
 801d154:	484b      	ldr	r0, [pc, #300]	@ (801d284 <dhcp_create_msg+0x19c>)
 801d156:	f003 fc15 	bl	8020984 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801d15a:	79fb      	ldrb	r3, [r7, #7]
 801d15c:	2b03      	cmp	r3, #3
 801d15e:	d103      	bne.n	801d168 <dhcp_create_msg+0x80>
 801d160:	68bb      	ldr	r3, [r7, #8]
 801d162:	795b      	ldrb	r3, [r3, #5]
 801d164:	2b03      	cmp	r3, #3
 801d166:	d10d      	bne.n	801d184 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801d168:	68bb      	ldr	r3, [r7, #8]
 801d16a:	799b      	ldrb	r3, [r3, #6]
 801d16c:	2b00      	cmp	r3, #0
 801d16e:	d105      	bne.n	801d17c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801d170:	f002 fed2 	bl	801ff18 <rand>
 801d174:	4603      	mov	r3, r0
 801d176:	461a      	mov	r2, r3
 801d178:	4b45      	ldr	r3, [pc, #276]	@ (801d290 <dhcp_create_msg+0x1a8>)
 801d17a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801d17c:	4b44      	ldr	r3, [pc, #272]	@ (801d290 <dhcp_create_msg+0x1a8>)
 801d17e:	681a      	ldr	r2, [r3, #0]
 801d180:	68bb      	ldr	r3, [r7, #8]
 801d182:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801d184:	69bb      	ldr	r3, [r7, #24]
 801d186:	685b      	ldr	r3, [r3, #4]
 801d188:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801d18a:	f44f 729a 	mov.w	r2, #308	@ 0x134
 801d18e:	2100      	movs	r1, #0
 801d190:	6978      	ldr	r0, [r7, #20]
 801d192:	f003 fd9d 	bl	8020cd0 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801d196:	697b      	ldr	r3, [r7, #20]
 801d198:	2201      	movs	r2, #1
 801d19a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801d19c:	697b      	ldr	r3, [r7, #20]
 801d19e:	2201      	movs	r2, #1
 801d1a0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801d1a2:	68fb      	ldr	r3, [r7, #12]
 801d1a4:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801d1a8:	697b      	ldr	r3, [r7, #20]
 801d1aa:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801d1ac:	68bb      	ldr	r3, [r7, #8]
 801d1ae:	681b      	ldr	r3, [r3, #0]
 801d1b0:	4618      	mov	r0, r3
 801d1b2:	f7f5 fbb8 	bl	8012926 <lwip_htonl>
 801d1b6:	4602      	mov	r2, r0
 801d1b8:	697b      	ldr	r3, [r7, #20]
 801d1ba:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801d1bc:	79fb      	ldrb	r3, [r7, #7]
 801d1be:	2b08      	cmp	r3, #8
 801d1c0:	d010      	beq.n	801d1e4 <dhcp_create_msg+0xfc>
 801d1c2:	79fb      	ldrb	r3, [r7, #7]
 801d1c4:	2b04      	cmp	r3, #4
 801d1c6:	d00d      	beq.n	801d1e4 <dhcp_create_msg+0xfc>
 801d1c8:	79fb      	ldrb	r3, [r7, #7]
 801d1ca:	2b07      	cmp	r3, #7
 801d1cc:	d00a      	beq.n	801d1e4 <dhcp_create_msg+0xfc>
 801d1ce:	79fb      	ldrb	r3, [r7, #7]
 801d1d0:	2b03      	cmp	r3, #3
 801d1d2:	d10c      	bne.n	801d1ee <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801d1d4:	68bb      	ldr	r3, [r7, #8]
 801d1d6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801d1d8:	2b05      	cmp	r3, #5
 801d1da:	d003      	beq.n	801d1e4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801d1dc:	68bb      	ldr	r3, [r7, #8]
 801d1de:	795b      	ldrb	r3, [r3, #5]
 801d1e0:	2b04      	cmp	r3, #4
 801d1e2:	d104      	bne.n	801d1ee <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801d1e4:	68fb      	ldr	r3, [r7, #12]
 801d1e6:	3304      	adds	r3, #4
 801d1e8:	681a      	ldr	r2, [r3, #0]
 801d1ea:	697b      	ldr	r3, [r7, #20]
 801d1ec:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801d1ee:	2300      	movs	r3, #0
 801d1f0:	83fb      	strh	r3, [r7, #30]
 801d1f2:	e00c      	b.n	801d20e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801d1f4:	8bfa      	ldrh	r2, [r7, #30]
 801d1f6:	8bfb      	ldrh	r3, [r7, #30]
 801d1f8:	68f9      	ldr	r1, [r7, #12]
 801d1fa:	440a      	add	r2, r1
 801d1fc:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 801d200:	697a      	ldr	r2, [r7, #20]
 801d202:	4413      	add	r3, r2
 801d204:	460a      	mov	r2, r1
 801d206:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801d208:	8bfb      	ldrh	r3, [r7, #30]
 801d20a:	3301      	adds	r3, #1
 801d20c:	83fb      	strh	r3, [r7, #30]
 801d20e:	8bfb      	ldrh	r3, [r7, #30]
 801d210:	2b05      	cmp	r3, #5
 801d212:	d9ef      	bls.n	801d1f4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801d214:	697b      	ldr	r3, [r7, #20]
 801d216:	2200      	movs	r2, #0
 801d218:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801d21c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801d220:	2200      	movs	r2, #0
 801d222:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801d226:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801d22a:	2200      	movs	r2, #0
 801d22c:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 801d230:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 801d234:	2200      	movs	r2, #0
 801d236:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801d23a:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801d23e:	697b      	ldr	r3, [r7, #20]
 801d240:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801d244:	2301      	movs	r3, #1
 801d246:	2235      	movs	r2, #53	@ 0x35
 801d248:	2000      	movs	r0, #0
 801d24a:	f7ff fadb 	bl	801c804 <dhcp_option>
 801d24e:	4603      	mov	r3, r0
 801d250:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801d252:	697b      	ldr	r3, [r7, #20]
 801d254:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801d258:	79fa      	ldrb	r2, [r7, #7]
 801d25a:	8a7b      	ldrh	r3, [r7, #18]
 801d25c:	4618      	mov	r0, r3
 801d25e:	f7ff fb05 	bl	801c86c <dhcp_option_byte>
 801d262:	4603      	mov	r3, r0
 801d264:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801d266:	683b      	ldr	r3, [r7, #0]
 801d268:	2b00      	cmp	r3, #0
 801d26a:	d002      	beq.n	801d272 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801d26c:	683b      	ldr	r3, [r7, #0]
 801d26e:	8a7a      	ldrh	r2, [r7, #18]
 801d270:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801d272:	69bb      	ldr	r3, [r7, #24]
}
 801d274:	4618      	mov	r0, r3
 801d276:	3720      	adds	r7, #32
 801d278:	46bd      	mov	sp, r7
 801d27a:	bd80      	pop	{r7, pc}
 801d27c:	08026170 	.word	0x08026170
 801d280:	08026490 	.word	0x08026490
 801d284:	080261d0 	.word	0x080261d0
 801d288:	080264b0 	.word	0x080264b0
 801d28c:	080264d0 	.word	0x080264d0
 801d290:	2400cb8c 	.word	0x2400cb8c

0801d294 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801d294:	b580      	push	{r7, lr}
 801d296:	b084      	sub	sp, #16
 801d298:	af00      	add	r7, sp, #0
 801d29a:	4603      	mov	r3, r0
 801d29c:	60b9      	str	r1, [r7, #8]
 801d29e:	607a      	str	r2, [r7, #4]
 801d2a0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801d2a2:	89fb      	ldrh	r3, [r7, #14]
 801d2a4:	1c5a      	adds	r2, r3, #1
 801d2a6:	81fa      	strh	r2, [r7, #14]
 801d2a8:	461a      	mov	r2, r3
 801d2aa:	68bb      	ldr	r3, [r7, #8]
 801d2ac:	4413      	add	r3, r2
 801d2ae:	22ff      	movs	r2, #255	@ 0xff
 801d2b0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801d2b2:	e007      	b.n	801d2c4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801d2b4:	89fb      	ldrh	r3, [r7, #14]
 801d2b6:	1c5a      	adds	r2, r3, #1
 801d2b8:	81fa      	strh	r2, [r7, #14]
 801d2ba:	461a      	mov	r2, r3
 801d2bc:	68bb      	ldr	r3, [r7, #8]
 801d2be:	4413      	add	r3, r2
 801d2c0:	2200      	movs	r2, #0
 801d2c2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801d2c4:	89fb      	ldrh	r3, [r7, #14]
 801d2c6:	2b43      	cmp	r3, #67	@ 0x43
 801d2c8:	d904      	bls.n	801d2d4 <dhcp_option_trailer+0x40>
 801d2ca:	89fb      	ldrh	r3, [r7, #14]
 801d2cc:	f003 0303 	and.w	r3, r3, #3
 801d2d0:	2b00      	cmp	r3, #0
 801d2d2:	d002      	beq.n	801d2da <dhcp_option_trailer+0x46>
 801d2d4:	89fb      	ldrh	r3, [r7, #14]
 801d2d6:	2b43      	cmp	r3, #67	@ 0x43
 801d2d8:	d9ec      	bls.n	801d2b4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801d2da:	89fb      	ldrh	r3, [r7, #14]
 801d2dc:	33f0      	adds	r3, #240	@ 0xf0
 801d2de:	b29b      	uxth	r3, r3
 801d2e0:	4619      	mov	r1, r3
 801d2e2:	6878      	ldr	r0, [r7, #4]
 801d2e4:	f7f6 fe3a 	bl	8013f5c <pbuf_realloc>
}
 801d2e8:	bf00      	nop
 801d2ea:	3710      	adds	r7, #16
 801d2ec:	46bd      	mov	sp, r7
 801d2ee:	bd80      	pop	{r7, pc}

0801d2f0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801d2f0:	b480      	push	{r7}
 801d2f2:	b085      	sub	sp, #20
 801d2f4:	af00      	add	r7, sp, #0
 801d2f6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	2b00      	cmp	r3, #0
 801d2fc:	d017      	beq.n	801d32e <dhcp_supplied_address+0x3e>
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d302:	2b00      	cmp	r3, #0
 801d304:	d013      	beq.n	801d32e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801d306:	687b      	ldr	r3, [r7, #4]
 801d308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d30a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801d30c:	68fb      	ldr	r3, [r7, #12]
 801d30e:	795b      	ldrb	r3, [r3, #5]
 801d310:	2b0a      	cmp	r3, #10
 801d312:	d007      	beq.n	801d324 <dhcp_supplied_address+0x34>
 801d314:	68fb      	ldr	r3, [r7, #12]
 801d316:	795b      	ldrb	r3, [r3, #5]
 801d318:	2b05      	cmp	r3, #5
 801d31a:	d003      	beq.n	801d324 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801d31c:	68fb      	ldr	r3, [r7, #12]
 801d31e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801d320:	2b04      	cmp	r3, #4
 801d322:	d101      	bne.n	801d328 <dhcp_supplied_address+0x38>
 801d324:	2301      	movs	r3, #1
 801d326:	e000      	b.n	801d32a <dhcp_supplied_address+0x3a>
 801d328:	2300      	movs	r3, #0
 801d32a:	b2db      	uxtb	r3, r3
 801d32c:	e000      	b.n	801d330 <dhcp_supplied_address+0x40>
  }
  return 0;
 801d32e:	2300      	movs	r3, #0
}
 801d330:	4618      	mov	r0, r3
 801d332:	3714      	adds	r7, #20
 801d334:	46bd      	mov	sp, r7
 801d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d33a:	4770      	bx	lr

0801d33c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801d33c:	b580      	push	{r7, lr}
 801d33e:	b082      	sub	sp, #8
 801d340:	af00      	add	r7, sp, #0
 801d342:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801d344:	4915      	ldr	r1, [pc, #84]	@ (801d39c <etharp_free_entry+0x60>)
 801d346:	687a      	ldr	r2, [r7, #4]
 801d348:	4613      	mov	r3, r2
 801d34a:	005b      	lsls	r3, r3, #1
 801d34c:	4413      	add	r3, r2
 801d34e:	00db      	lsls	r3, r3, #3
 801d350:	440b      	add	r3, r1
 801d352:	681b      	ldr	r3, [r3, #0]
 801d354:	2b00      	cmp	r3, #0
 801d356:	d013      	beq.n	801d380 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801d358:	4910      	ldr	r1, [pc, #64]	@ (801d39c <etharp_free_entry+0x60>)
 801d35a:	687a      	ldr	r2, [r7, #4]
 801d35c:	4613      	mov	r3, r2
 801d35e:	005b      	lsls	r3, r3, #1
 801d360:	4413      	add	r3, r2
 801d362:	00db      	lsls	r3, r3, #3
 801d364:	440b      	add	r3, r1
 801d366:	681b      	ldr	r3, [r3, #0]
 801d368:	4618      	mov	r0, r3
 801d36a:	f7f6 ff7d 	bl	8014268 <pbuf_free>
    arp_table[i].q = NULL;
 801d36e:	490b      	ldr	r1, [pc, #44]	@ (801d39c <etharp_free_entry+0x60>)
 801d370:	687a      	ldr	r2, [r7, #4]
 801d372:	4613      	mov	r3, r2
 801d374:	005b      	lsls	r3, r3, #1
 801d376:	4413      	add	r3, r2
 801d378:	00db      	lsls	r3, r3, #3
 801d37a:	440b      	add	r3, r1
 801d37c:	2200      	movs	r2, #0
 801d37e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801d380:	4906      	ldr	r1, [pc, #24]	@ (801d39c <etharp_free_entry+0x60>)
 801d382:	687a      	ldr	r2, [r7, #4]
 801d384:	4613      	mov	r3, r2
 801d386:	005b      	lsls	r3, r3, #1
 801d388:	4413      	add	r3, r2
 801d38a:	00db      	lsls	r3, r3, #3
 801d38c:	440b      	add	r3, r1
 801d38e:	3314      	adds	r3, #20
 801d390:	2200      	movs	r2, #0
 801d392:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801d394:	bf00      	nop
 801d396:	3708      	adds	r7, #8
 801d398:	46bd      	mov	sp, r7
 801d39a:	bd80      	pop	{r7, pc}
 801d39c:	2400cb90 	.word	0x2400cb90

0801d3a0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801d3a0:	b580      	push	{r7, lr}
 801d3a2:	b082      	sub	sp, #8
 801d3a4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d3a6:	2300      	movs	r3, #0
 801d3a8:	607b      	str	r3, [r7, #4]
 801d3aa:	e096      	b.n	801d4da <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801d3ac:	494f      	ldr	r1, [pc, #316]	@ (801d4ec <etharp_tmr+0x14c>)
 801d3ae:	687a      	ldr	r2, [r7, #4]
 801d3b0:	4613      	mov	r3, r2
 801d3b2:	005b      	lsls	r3, r3, #1
 801d3b4:	4413      	add	r3, r2
 801d3b6:	00db      	lsls	r3, r3, #3
 801d3b8:	440b      	add	r3, r1
 801d3ba:	3314      	adds	r3, #20
 801d3bc:	781b      	ldrb	r3, [r3, #0]
 801d3be:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801d3c0:	78fb      	ldrb	r3, [r7, #3]
 801d3c2:	2b00      	cmp	r3, #0
 801d3c4:	f000 8086 	beq.w	801d4d4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801d3c8:	4948      	ldr	r1, [pc, #288]	@ (801d4ec <etharp_tmr+0x14c>)
 801d3ca:	687a      	ldr	r2, [r7, #4]
 801d3cc:	4613      	mov	r3, r2
 801d3ce:	005b      	lsls	r3, r3, #1
 801d3d0:	4413      	add	r3, r2
 801d3d2:	00db      	lsls	r3, r3, #3
 801d3d4:	440b      	add	r3, r1
 801d3d6:	3312      	adds	r3, #18
 801d3d8:	881b      	ldrh	r3, [r3, #0]
 801d3da:	3301      	adds	r3, #1
 801d3dc:	b298      	uxth	r0, r3
 801d3de:	4943      	ldr	r1, [pc, #268]	@ (801d4ec <etharp_tmr+0x14c>)
 801d3e0:	687a      	ldr	r2, [r7, #4]
 801d3e2:	4613      	mov	r3, r2
 801d3e4:	005b      	lsls	r3, r3, #1
 801d3e6:	4413      	add	r3, r2
 801d3e8:	00db      	lsls	r3, r3, #3
 801d3ea:	440b      	add	r3, r1
 801d3ec:	3312      	adds	r3, #18
 801d3ee:	4602      	mov	r2, r0
 801d3f0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d3f2:	493e      	ldr	r1, [pc, #248]	@ (801d4ec <etharp_tmr+0x14c>)
 801d3f4:	687a      	ldr	r2, [r7, #4]
 801d3f6:	4613      	mov	r3, r2
 801d3f8:	005b      	lsls	r3, r3, #1
 801d3fa:	4413      	add	r3, r2
 801d3fc:	00db      	lsls	r3, r3, #3
 801d3fe:	440b      	add	r3, r1
 801d400:	3312      	adds	r3, #18
 801d402:	881b      	ldrh	r3, [r3, #0]
 801d404:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801d408:	d215      	bcs.n	801d436 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801d40a:	4938      	ldr	r1, [pc, #224]	@ (801d4ec <etharp_tmr+0x14c>)
 801d40c:	687a      	ldr	r2, [r7, #4]
 801d40e:	4613      	mov	r3, r2
 801d410:	005b      	lsls	r3, r3, #1
 801d412:	4413      	add	r3, r2
 801d414:	00db      	lsls	r3, r3, #3
 801d416:	440b      	add	r3, r1
 801d418:	3314      	adds	r3, #20
 801d41a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d41c:	2b01      	cmp	r3, #1
 801d41e:	d10e      	bne.n	801d43e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801d420:	4932      	ldr	r1, [pc, #200]	@ (801d4ec <etharp_tmr+0x14c>)
 801d422:	687a      	ldr	r2, [r7, #4]
 801d424:	4613      	mov	r3, r2
 801d426:	005b      	lsls	r3, r3, #1
 801d428:	4413      	add	r3, r2
 801d42a:	00db      	lsls	r3, r3, #3
 801d42c:	440b      	add	r3, r1
 801d42e:	3312      	adds	r3, #18
 801d430:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801d432:	2b04      	cmp	r3, #4
 801d434:	d903      	bls.n	801d43e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801d436:	6878      	ldr	r0, [r7, #4]
 801d438:	f7ff ff80 	bl	801d33c <etharp_free_entry>
 801d43c:	e04a      	b.n	801d4d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801d43e:	492b      	ldr	r1, [pc, #172]	@ (801d4ec <etharp_tmr+0x14c>)
 801d440:	687a      	ldr	r2, [r7, #4]
 801d442:	4613      	mov	r3, r2
 801d444:	005b      	lsls	r3, r3, #1
 801d446:	4413      	add	r3, r2
 801d448:	00db      	lsls	r3, r3, #3
 801d44a:	440b      	add	r3, r1
 801d44c:	3314      	adds	r3, #20
 801d44e:	781b      	ldrb	r3, [r3, #0]
 801d450:	2b03      	cmp	r3, #3
 801d452:	d10a      	bne.n	801d46a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801d454:	4925      	ldr	r1, [pc, #148]	@ (801d4ec <etharp_tmr+0x14c>)
 801d456:	687a      	ldr	r2, [r7, #4]
 801d458:	4613      	mov	r3, r2
 801d45a:	005b      	lsls	r3, r3, #1
 801d45c:	4413      	add	r3, r2
 801d45e:	00db      	lsls	r3, r3, #3
 801d460:	440b      	add	r3, r1
 801d462:	3314      	adds	r3, #20
 801d464:	2204      	movs	r2, #4
 801d466:	701a      	strb	r2, [r3, #0]
 801d468:	e034      	b.n	801d4d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801d46a:	4920      	ldr	r1, [pc, #128]	@ (801d4ec <etharp_tmr+0x14c>)
 801d46c:	687a      	ldr	r2, [r7, #4]
 801d46e:	4613      	mov	r3, r2
 801d470:	005b      	lsls	r3, r3, #1
 801d472:	4413      	add	r3, r2
 801d474:	00db      	lsls	r3, r3, #3
 801d476:	440b      	add	r3, r1
 801d478:	3314      	adds	r3, #20
 801d47a:	781b      	ldrb	r3, [r3, #0]
 801d47c:	2b04      	cmp	r3, #4
 801d47e:	d10a      	bne.n	801d496 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801d480:	491a      	ldr	r1, [pc, #104]	@ (801d4ec <etharp_tmr+0x14c>)
 801d482:	687a      	ldr	r2, [r7, #4]
 801d484:	4613      	mov	r3, r2
 801d486:	005b      	lsls	r3, r3, #1
 801d488:	4413      	add	r3, r2
 801d48a:	00db      	lsls	r3, r3, #3
 801d48c:	440b      	add	r3, r1
 801d48e:	3314      	adds	r3, #20
 801d490:	2202      	movs	r2, #2
 801d492:	701a      	strb	r2, [r3, #0]
 801d494:	e01e      	b.n	801d4d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801d496:	4915      	ldr	r1, [pc, #84]	@ (801d4ec <etharp_tmr+0x14c>)
 801d498:	687a      	ldr	r2, [r7, #4]
 801d49a:	4613      	mov	r3, r2
 801d49c:	005b      	lsls	r3, r3, #1
 801d49e:	4413      	add	r3, r2
 801d4a0:	00db      	lsls	r3, r3, #3
 801d4a2:	440b      	add	r3, r1
 801d4a4:	3314      	adds	r3, #20
 801d4a6:	781b      	ldrb	r3, [r3, #0]
 801d4a8:	2b01      	cmp	r3, #1
 801d4aa:	d113      	bne.n	801d4d4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801d4ac:	490f      	ldr	r1, [pc, #60]	@ (801d4ec <etharp_tmr+0x14c>)
 801d4ae:	687a      	ldr	r2, [r7, #4]
 801d4b0:	4613      	mov	r3, r2
 801d4b2:	005b      	lsls	r3, r3, #1
 801d4b4:	4413      	add	r3, r2
 801d4b6:	00db      	lsls	r3, r3, #3
 801d4b8:	440b      	add	r3, r1
 801d4ba:	3308      	adds	r3, #8
 801d4bc:	6818      	ldr	r0, [r3, #0]
 801d4be:	687a      	ldr	r2, [r7, #4]
 801d4c0:	4613      	mov	r3, r2
 801d4c2:	005b      	lsls	r3, r3, #1
 801d4c4:	4413      	add	r3, r2
 801d4c6:	00db      	lsls	r3, r3, #3
 801d4c8:	4a08      	ldr	r2, [pc, #32]	@ (801d4ec <etharp_tmr+0x14c>)
 801d4ca:	4413      	add	r3, r2
 801d4cc:	3304      	adds	r3, #4
 801d4ce:	4619      	mov	r1, r3
 801d4d0:	f000 fe72 	bl	801e1b8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d4d4:	687b      	ldr	r3, [r7, #4]
 801d4d6:	3301      	adds	r3, #1
 801d4d8:	607b      	str	r3, [r7, #4]
 801d4da:	687b      	ldr	r3, [r7, #4]
 801d4dc:	2b09      	cmp	r3, #9
 801d4de:	f77f af65 	ble.w	801d3ac <etharp_tmr+0xc>
      }
    }
  }
}
 801d4e2:	bf00      	nop
 801d4e4:	bf00      	nop
 801d4e6:	3708      	adds	r7, #8
 801d4e8:	46bd      	mov	sp, r7
 801d4ea:	bd80      	pop	{r7, pc}
 801d4ec:	2400cb90 	.word	0x2400cb90

0801d4f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801d4f0:	b580      	push	{r7, lr}
 801d4f2:	b08a      	sub	sp, #40	@ 0x28
 801d4f4:	af00      	add	r7, sp, #0
 801d4f6:	60f8      	str	r0, [r7, #12]
 801d4f8:	460b      	mov	r3, r1
 801d4fa:	607a      	str	r2, [r7, #4]
 801d4fc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801d4fe:	230a      	movs	r3, #10
 801d500:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801d502:	230a      	movs	r3, #10
 801d504:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801d506:	230a      	movs	r3, #10
 801d508:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801d50a:	2300      	movs	r3, #0
 801d50c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801d50e:	230a      	movs	r3, #10
 801d510:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801d512:	2300      	movs	r3, #0
 801d514:	83bb      	strh	r3, [r7, #28]
 801d516:	2300      	movs	r3, #0
 801d518:	837b      	strh	r3, [r7, #26]
 801d51a:	2300      	movs	r3, #0
 801d51c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d51e:	2300      	movs	r3, #0
 801d520:	843b      	strh	r3, [r7, #32]
 801d522:	e0ae      	b.n	801d682 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801d524:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d528:	49a6      	ldr	r1, [pc, #664]	@ (801d7c4 <etharp_find_entry+0x2d4>)
 801d52a:	4613      	mov	r3, r2
 801d52c:	005b      	lsls	r3, r3, #1
 801d52e:	4413      	add	r3, r2
 801d530:	00db      	lsls	r3, r3, #3
 801d532:	440b      	add	r3, r1
 801d534:	3314      	adds	r3, #20
 801d536:	781b      	ldrb	r3, [r3, #0]
 801d538:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801d53a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801d53e:	2b0a      	cmp	r3, #10
 801d540:	d105      	bne.n	801d54e <etharp_find_entry+0x5e>
 801d542:	7dfb      	ldrb	r3, [r7, #23]
 801d544:	2b00      	cmp	r3, #0
 801d546:	d102      	bne.n	801d54e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801d548:	8c3b      	ldrh	r3, [r7, #32]
 801d54a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801d54c:	e095      	b.n	801d67a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801d54e:	7dfb      	ldrb	r3, [r7, #23]
 801d550:	2b00      	cmp	r3, #0
 801d552:	f000 8092 	beq.w	801d67a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801d556:	7dfb      	ldrb	r3, [r7, #23]
 801d558:	2b01      	cmp	r3, #1
 801d55a:	d009      	beq.n	801d570 <etharp_find_entry+0x80>
 801d55c:	7dfb      	ldrb	r3, [r7, #23]
 801d55e:	2b01      	cmp	r3, #1
 801d560:	d806      	bhi.n	801d570 <etharp_find_entry+0x80>
 801d562:	4b99      	ldr	r3, [pc, #612]	@ (801d7c8 <etharp_find_entry+0x2d8>)
 801d564:	f240 1223 	movw	r2, #291	@ 0x123
 801d568:	4998      	ldr	r1, [pc, #608]	@ (801d7cc <etharp_find_entry+0x2dc>)
 801d56a:	4899      	ldr	r0, [pc, #612]	@ (801d7d0 <etharp_find_entry+0x2e0>)
 801d56c:	f003 fa0a 	bl	8020984 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801d570:	68fb      	ldr	r3, [r7, #12]
 801d572:	2b00      	cmp	r3, #0
 801d574:	d020      	beq.n	801d5b8 <etharp_find_entry+0xc8>
 801d576:	68fb      	ldr	r3, [r7, #12]
 801d578:	6819      	ldr	r1, [r3, #0]
 801d57a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d57e:	4891      	ldr	r0, [pc, #580]	@ (801d7c4 <etharp_find_entry+0x2d4>)
 801d580:	4613      	mov	r3, r2
 801d582:	005b      	lsls	r3, r3, #1
 801d584:	4413      	add	r3, r2
 801d586:	00db      	lsls	r3, r3, #3
 801d588:	4403      	add	r3, r0
 801d58a:	3304      	adds	r3, #4
 801d58c:	681b      	ldr	r3, [r3, #0]
 801d58e:	4299      	cmp	r1, r3
 801d590:	d112      	bne.n	801d5b8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801d592:	687b      	ldr	r3, [r7, #4]
 801d594:	2b00      	cmp	r3, #0
 801d596:	d00c      	beq.n	801d5b2 <etharp_find_entry+0xc2>
 801d598:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d59c:	4989      	ldr	r1, [pc, #548]	@ (801d7c4 <etharp_find_entry+0x2d4>)
 801d59e:	4613      	mov	r3, r2
 801d5a0:	005b      	lsls	r3, r3, #1
 801d5a2:	4413      	add	r3, r2
 801d5a4:	00db      	lsls	r3, r3, #3
 801d5a6:	440b      	add	r3, r1
 801d5a8:	3308      	adds	r3, #8
 801d5aa:	681b      	ldr	r3, [r3, #0]
 801d5ac:	687a      	ldr	r2, [r7, #4]
 801d5ae:	429a      	cmp	r2, r3
 801d5b0:	d102      	bne.n	801d5b8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801d5b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d5b6:	e100      	b.n	801d7ba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801d5b8:	7dfb      	ldrb	r3, [r7, #23]
 801d5ba:	2b01      	cmp	r3, #1
 801d5bc:	d140      	bne.n	801d640 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801d5be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d5c2:	4980      	ldr	r1, [pc, #512]	@ (801d7c4 <etharp_find_entry+0x2d4>)
 801d5c4:	4613      	mov	r3, r2
 801d5c6:	005b      	lsls	r3, r3, #1
 801d5c8:	4413      	add	r3, r2
 801d5ca:	00db      	lsls	r3, r3, #3
 801d5cc:	440b      	add	r3, r1
 801d5ce:	681b      	ldr	r3, [r3, #0]
 801d5d0:	2b00      	cmp	r3, #0
 801d5d2:	d01a      	beq.n	801d60a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801d5d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d5d8:	497a      	ldr	r1, [pc, #488]	@ (801d7c4 <etharp_find_entry+0x2d4>)
 801d5da:	4613      	mov	r3, r2
 801d5dc:	005b      	lsls	r3, r3, #1
 801d5de:	4413      	add	r3, r2
 801d5e0:	00db      	lsls	r3, r3, #3
 801d5e2:	440b      	add	r3, r1
 801d5e4:	3312      	adds	r3, #18
 801d5e6:	881b      	ldrh	r3, [r3, #0]
 801d5e8:	8bba      	ldrh	r2, [r7, #28]
 801d5ea:	429a      	cmp	r2, r3
 801d5ec:	d845      	bhi.n	801d67a <etharp_find_entry+0x18a>
            old_queue = i;
 801d5ee:	8c3b      	ldrh	r3, [r7, #32]
 801d5f0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801d5f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d5f6:	4973      	ldr	r1, [pc, #460]	@ (801d7c4 <etharp_find_entry+0x2d4>)
 801d5f8:	4613      	mov	r3, r2
 801d5fa:	005b      	lsls	r3, r3, #1
 801d5fc:	4413      	add	r3, r2
 801d5fe:	00db      	lsls	r3, r3, #3
 801d600:	440b      	add	r3, r1
 801d602:	3312      	adds	r3, #18
 801d604:	881b      	ldrh	r3, [r3, #0]
 801d606:	83bb      	strh	r3, [r7, #28]
 801d608:	e037      	b.n	801d67a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801d60a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d60e:	496d      	ldr	r1, [pc, #436]	@ (801d7c4 <etharp_find_entry+0x2d4>)
 801d610:	4613      	mov	r3, r2
 801d612:	005b      	lsls	r3, r3, #1
 801d614:	4413      	add	r3, r2
 801d616:	00db      	lsls	r3, r3, #3
 801d618:	440b      	add	r3, r1
 801d61a:	3312      	adds	r3, #18
 801d61c:	881b      	ldrh	r3, [r3, #0]
 801d61e:	8b7a      	ldrh	r2, [r7, #26]
 801d620:	429a      	cmp	r2, r3
 801d622:	d82a      	bhi.n	801d67a <etharp_find_entry+0x18a>
            old_pending = i;
 801d624:	8c3b      	ldrh	r3, [r7, #32]
 801d626:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801d628:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d62c:	4965      	ldr	r1, [pc, #404]	@ (801d7c4 <etharp_find_entry+0x2d4>)
 801d62e:	4613      	mov	r3, r2
 801d630:	005b      	lsls	r3, r3, #1
 801d632:	4413      	add	r3, r2
 801d634:	00db      	lsls	r3, r3, #3
 801d636:	440b      	add	r3, r1
 801d638:	3312      	adds	r3, #18
 801d63a:	881b      	ldrh	r3, [r3, #0]
 801d63c:	837b      	strh	r3, [r7, #26]
 801d63e:	e01c      	b.n	801d67a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801d640:	7dfb      	ldrb	r3, [r7, #23]
 801d642:	2b01      	cmp	r3, #1
 801d644:	d919      	bls.n	801d67a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801d646:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d64a:	495e      	ldr	r1, [pc, #376]	@ (801d7c4 <etharp_find_entry+0x2d4>)
 801d64c:	4613      	mov	r3, r2
 801d64e:	005b      	lsls	r3, r3, #1
 801d650:	4413      	add	r3, r2
 801d652:	00db      	lsls	r3, r3, #3
 801d654:	440b      	add	r3, r1
 801d656:	3312      	adds	r3, #18
 801d658:	881b      	ldrh	r3, [r3, #0]
 801d65a:	8b3a      	ldrh	r2, [r7, #24]
 801d65c:	429a      	cmp	r2, r3
 801d65e:	d80c      	bhi.n	801d67a <etharp_find_entry+0x18a>
            old_stable = i;
 801d660:	8c3b      	ldrh	r3, [r7, #32]
 801d662:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801d664:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d668:	4956      	ldr	r1, [pc, #344]	@ (801d7c4 <etharp_find_entry+0x2d4>)
 801d66a:	4613      	mov	r3, r2
 801d66c:	005b      	lsls	r3, r3, #1
 801d66e:	4413      	add	r3, r2
 801d670:	00db      	lsls	r3, r3, #3
 801d672:	440b      	add	r3, r1
 801d674:	3312      	adds	r3, #18
 801d676:	881b      	ldrh	r3, [r3, #0]
 801d678:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d67a:	8c3b      	ldrh	r3, [r7, #32]
 801d67c:	3301      	adds	r3, #1
 801d67e:	b29b      	uxth	r3, r3
 801d680:	843b      	strh	r3, [r7, #32]
 801d682:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d686:	2b09      	cmp	r3, #9
 801d688:	f77f af4c 	ble.w	801d524 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801d68c:	7afb      	ldrb	r3, [r7, #11]
 801d68e:	f003 0302 	and.w	r3, r3, #2
 801d692:	2b00      	cmp	r3, #0
 801d694:	d108      	bne.n	801d6a8 <etharp_find_entry+0x1b8>
 801d696:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801d69a:	2b0a      	cmp	r3, #10
 801d69c:	d107      	bne.n	801d6ae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801d69e:	7afb      	ldrb	r3, [r7, #11]
 801d6a0:	f003 0301 	and.w	r3, r3, #1
 801d6a4:	2b00      	cmp	r3, #0
 801d6a6:	d102      	bne.n	801d6ae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801d6a8:	f04f 33ff 	mov.w	r3, #4294967295
 801d6ac:	e085      	b.n	801d7ba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801d6ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801d6b2:	2b09      	cmp	r3, #9
 801d6b4:	dc02      	bgt.n	801d6bc <etharp_find_entry+0x1cc>
    i = empty;
 801d6b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d6b8:	843b      	strh	r3, [r7, #32]
 801d6ba:	e039      	b.n	801d730 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801d6bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801d6c0:	2b09      	cmp	r3, #9
 801d6c2:	dc14      	bgt.n	801d6ee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801d6c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d6c6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801d6c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d6cc:	493d      	ldr	r1, [pc, #244]	@ (801d7c4 <etharp_find_entry+0x2d4>)
 801d6ce:	4613      	mov	r3, r2
 801d6d0:	005b      	lsls	r3, r3, #1
 801d6d2:	4413      	add	r3, r2
 801d6d4:	00db      	lsls	r3, r3, #3
 801d6d6:	440b      	add	r3, r1
 801d6d8:	681b      	ldr	r3, [r3, #0]
 801d6da:	2b00      	cmp	r3, #0
 801d6dc:	d018      	beq.n	801d710 <etharp_find_entry+0x220>
 801d6de:	4b3a      	ldr	r3, [pc, #232]	@ (801d7c8 <etharp_find_entry+0x2d8>)
 801d6e0:	f240 126d 	movw	r2, #365	@ 0x16d
 801d6e4:	493b      	ldr	r1, [pc, #236]	@ (801d7d4 <etharp_find_entry+0x2e4>)
 801d6e6:	483a      	ldr	r0, [pc, #232]	@ (801d7d0 <etharp_find_entry+0x2e0>)
 801d6e8:	f003 f94c 	bl	8020984 <iprintf>
 801d6ec:	e010      	b.n	801d710 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801d6ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801d6f2:	2b09      	cmp	r3, #9
 801d6f4:	dc02      	bgt.n	801d6fc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801d6f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801d6f8:	843b      	strh	r3, [r7, #32]
 801d6fa:	e009      	b.n	801d710 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801d6fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801d700:	2b09      	cmp	r3, #9
 801d702:	dc02      	bgt.n	801d70a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801d704:	8bfb      	ldrh	r3, [r7, #30]
 801d706:	843b      	strh	r3, [r7, #32]
 801d708:	e002      	b.n	801d710 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801d70a:	f04f 33ff 	mov.w	r3, #4294967295
 801d70e:	e054      	b.n	801d7ba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801d710:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d714:	2b09      	cmp	r3, #9
 801d716:	dd06      	ble.n	801d726 <etharp_find_entry+0x236>
 801d718:	4b2b      	ldr	r3, [pc, #172]	@ (801d7c8 <etharp_find_entry+0x2d8>)
 801d71a:	f240 127f 	movw	r2, #383	@ 0x17f
 801d71e:	492e      	ldr	r1, [pc, #184]	@ (801d7d8 <etharp_find_entry+0x2e8>)
 801d720:	482b      	ldr	r0, [pc, #172]	@ (801d7d0 <etharp_find_entry+0x2e0>)
 801d722:	f003 f92f 	bl	8020984 <iprintf>
    etharp_free_entry(i);
 801d726:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d72a:	4618      	mov	r0, r3
 801d72c:	f7ff fe06 	bl	801d33c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801d730:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d734:	2b09      	cmp	r3, #9
 801d736:	dd06      	ble.n	801d746 <etharp_find_entry+0x256>
 801d738:	4b23      	ldr	r3, [pc, #140]	@ (801d7c8 <etharp_find_entry+0x2d8>)
 801d73a:	f240 1283 	movw	r2, #387	@ 0x183
 801d73e:	4926      	ldr	r1, [pc, #152]	@ (801d7d8 <etharp_find_entry+0x2e8>)
 801d740:	4823      	ldr	r0, [pc, #140]	@ (801d7d0 <etharp_find_entry+0x2e0>)
 801d742:	f003 f91f 	bl	8020984 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801d746:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d74a:	491e      	ldr	r1, [pc, #120]	@ (801d7c4 <etharp_find_entry+0x2d4>)
 801d74c:	4613      	mov	r3, r2
 801d74e:	005b      	lsls	r3, r3, #1
 801d750:	4413      	add	r3, r2
 801d752:	00db      	lsls	r3, r3, #3
 801d754:	440b      	add	r3, r1
 801d756:	3314      	adds	r3, #20
 801d758:	781b      	ldrb	r3, [r3, #0]
 801d75a:	2b00      	cmp	r3, #0
 801d75c:	d006      	beq.n	801d76c <etharp_find_entry+0x27c>
 801d75e:	4b1a      	ldr	r3, [pc, #104]	@ (801d7c8 <etharp_find_entry+0x2d8>)
 801d760:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801d764:	491d      	ldr	r1, [pc, #116]	@ (801d7dc <etharp_find_entry+0x2ec>)
 801d766:	481a      	ldr	r0, [pc, #104]	@ (801d7d0 <etharp_find_entry+0x2e0>)
 801d768:	f003 f90c 	bl	8020984 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801d76c:	68fb      	ldr	r3, [r7, #12]
 801d76e:	2b00      	cmp	r3, #0
 801d770:	d00b      	beq.n	801d78a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801d772:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d776:	68fb      	ldr	r3, [r7, #12]
 801d778:	6819      	ldr	r1, [r3, #0]
 801d77a:	4812      	ldr	r0, [pc, #72]	@ (801d7c4 <etharp_find_entry+0x2d4>)
 801d77c:	4613      	mov	r3, r2
 801d77e:	005b      	lsls	r3, r3, #1
 801d780:	4413      	add	r3, r2
 801d782:	00db      	lsls	r3, r3, #3
 801d784:	4403      	add	r3, r0
 801d786:	3304      	adds	r3, #4
 801d788:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801d78a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d78e:	490d      	ldr	r1, [pc, #52]	@ (801d7c4 <etharp_find_entry+0x2d4>)
 801d790:	4613      	mov	r3, r2
 801d792:	005b      	lsls	r3, r3, #1
 801d794:	4413      	add	r3, r2
 801d796:	00db      	lsls	r3, r3, #3
 801d798:	440b      	add	r3, r1
 801d79a:	3312      	adds	r3, #18
 801d79c:	2200      	movs	r2, #0
 801d79e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801d7a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d7a4:	4907      	ldr	r1, [pc, #28]	@ (801d7c4 <etharp_find_entry+0x2d4>)
 801d7a6:	4613      	mov	r3, r2
 801d7a8:	005b      	lsls	r3, r3, #1
 801d7aa:	4413      	add	r3, r2
 801d7ac:	00db      	lsls	r3, r3, #3
 801d7ae:	440b      	add	r3, r1
 801d7b0:	3308      	adds	r3, #8
 801d7b2:	687a      	ldr	r2, [r7, #4]
 801d7b4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801d7b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801d7ba:	4618      	mov	r0, r3
 801d7bc:	3728      	adds	r7, #40	@ 0x28
 801d7be:	46bd      	mov	sp, r7
 801d7c0:	bd80      	pop	{r7, pc}
 801d7c2:	bf00      	nop
 801d7c4:	2400cb90 	.word	0x2400cb90
 801d7c8:	08026510 	.word	0x08026510
 801d7cc:	08026548 	.word	0x08026548
 801d7d0:	08026588 	.word	0x08026588
 801d7d4:	080265b0 	.word	0x080265b0
 801d7d8:	080265c8 	.word	0x080265c8
 801d7dc:	080265dc 	.word	0x080265dc

0801d7e0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801d7e0:	b580      	push	{r7, lr}
 801d7e2:	b088      	sub	sp, #32
 801d7e4:	af02      	add	r7, sp, #8
 801d7e6:	60f8      	str	r0, [r7, #12]
 801d7e8:	60b9      	str	r1, [r7, #8]
 801d7ea:	607a      	str	r2, [r7, #4]
 801d7ec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801d7ee:	68fb      	ldr	r3, [r7, #12]
 801d7f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801d7f4:	2b06      	cmp	r3, #6
 801d7f6:	d006      	beq.n	801d806 <etharp_update_arp_entry+0x26>
 801d7f8:	4b48      	ldr	r3, [pc, #288]	@ (801d91c <etharp_update_arp_entry+0x13c>)
 801d7fa:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801d7fe:	4948      	ldr	r1, [pc, #288]	@ (801d920 <etharp_update_arp_entry+0x140>)
 801d800:	4848      	ldr	r0, [pc, #288]	@ (801d924 <etharp_update_arp_entry+0x144>)
 801d802:	f003 f8bf 	bl	8020984 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801d806:	68bb      	ldr	r3, [r7, #8]
 801d808:	2b00      	cmp	r3, #0
 801d80a:	d012      	beq.n	801d832 <etharp_update_arp_entry+0x52>
 801d80c:	68bb      	ldr	r3, [r7, #8]
 801d80e:	681b      	ldr	r3, [r3, #0]
 801d810:	2b00      	cmp	r3, #0
 801d812:	d00e      	beq.n	801d832 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801d814:	68bb      	ldr	r3, [r7, #8]
 801d816:	681b      	ldr	r3, [r3, #0]
 801d818:	68f9      	ldr	r1, [r7, #12]
 801d81a:	4618      	mov	r0, r3
 801d81c:	f001 f946 	bl	801eaac <ip4_addr_isbroadcast_u32>
 801d820:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801d822:	2b00      	cmp	r3, #0
 801d824:	d105      	bne.n	801d832 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801d826:	68bb      	ldr	r3, [r7, #8]
 801d828:	681b      	ldr	r3, [r3, #0]
 801d82a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801d82e:	2be0      	cmp	r3, #224	@ 0xe0
 801d830:	d102      	bne.n	801d838 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801d832:	f06f 030f 	mvn.w	r3, #15
 801d836:	e06c      	b.n	801d912 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801d838:	78fb      	ldrb	r3, [r7, #3]
 801d83a:	68fa      	ldr	r2, [r7, #12]
 801d83c:	4619      	mov	r1, r3
 801d83e:	68b8      	ldr	r0, [r7, #8]
 801d840:	f7ff fe56 	bl	801d4f0 <etharp_find_entry>
 801d844:	4603      	mov	r3, r0
 801d846:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801d848:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801d84c:	2b00      	cmp	r3, #0
 801d84e:	da02      	bge.n	801d856 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801d850:	8afb      	ldrh	r3, [r7, #22]
 801d852:	b25b      	sxtb	r3, r3
 801d854:	e05d      	b.n	801d912 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801d856:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d85a:	4933      	ldr	r1, [pc, #204]	@ (801d928 <etharp_update_arp_entry+0x148>)
 801d85c:	4613      	mov	r3, r2
 801d85e:	005b      	lsls	r3, r3, #1
 801d860:	4413      	add	r3, r2
 801d862:	00db      	lsls	r3, r3, #3
 801d864:	440b      	add	r3, r1
 801d866:	3314      	adds	r3, #20
 801d868:	2202      	movs	r2, #2
 801d86a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801d86c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d870:	492d      	ldr	r1, [pc, #180]	@ (801d928 <etharp_update_arp_entry+0x148>)
 801d872:	4613      	mov	r3, r2
 801d874:	005b      	lsls	r3, r3, #1
 801d876:	4413      	add	r3, r2
 801d878:	00db      	lsls	r3, r3, #3
 801d87a:	440b      	add	r3, r1
 801d87c:	3308      	adds	r3, #8
 801d87e:	68fa      	ldr	r2, [r7, #12]
 801d880:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801d882:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d886:	4613      	mov	r3, r2
 801d888:	005b      	lsls	r3, r3, #1
 801d88a:	4413      	add	r3, r2
 801d88c:	00db      	lsls	r3, r3, #3
 801d88e:	3308      	adds	r3, #8
 801d890:	4a25      	ldr	r2, [pc, #148]	@ (801d928 <etharp_update_arp_entry+0x148>)
 801d892:	4413      	add	r3, r2
 801d894:	3304      	adds	r3, #4
 801d896:	2206      	movs	r2, #6
 801d898:	6879      	ldr	r1, [r7, #4]
 801d89a:	4618      	mov	r0, r3
 801d89c:	f003 fae7 	bl	8020e6e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801d8a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d8a4:	4920      	ldr	r1, [pc, #128]	@ (801d928 <etharp_update_arp_entry+0x148>)
 801d8a6:	4613      	mov	r3, r2
 801d8a8:	005b      	lsls	r3, r3, #1
 801d8aa:	4413      	add	r3, r2
 801d8ac:	00db      	lsls	r3, r3, #3
 801d8ae:	440b      	add	r3, r1
 801d8b0:	3312      	adds	r3, #18
 801d8b2:	2200      	movs	r2, #0
 801d8b4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801d8b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d8ba:	491b      	ldr	r1, [pc, #108]	@ (801d928 <etharp_update_arp_entry+0x148>)
 801d8bc:	4613      	mov	r3, r2
 801d8be:	005b      	lsls	r3, r3, #1
 801d8c0:	4413      	add	r3, r2
 801d8c2:	00db      	lsls	r3, r3, #3
 801d8c4:	440b      	add	r3, r1
 801d8c6:	681b      	ldr	r3, [r3, #0]
 801d8c8:	2b00      	cmp	r3, #0
 801d8ca:	d021      	beq.n	801d910 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801d8cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d8d0:	4915      	ldr	r1, [pc, #84]	@ (801d928 <etharp_update_arp_entry+0x148>)
 801d8d2:	4613      	mov	r3, r2
 801d8d4:	005b      	lsls	r3, r3, #1
 801d8d6:	4413      	add	r3, r2
 801d8d8:	00db      	lsls	r3, r3, #3
 801d8da:	440b      	add	r3, r1
 801d8dc:	681b      	ldr	r3, [r3, #0]
 801d8de:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801d8e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d8e4:	4910      	ldr	r1, [pc, #64]	@ (801d928 <etharp_update_arp_entry+0x148>)
 801d8e6:	4613      	mov	r3, r2
 801d8e8:	005b      	lsls	r3, r3, #1
 801d8ea:	4413      	add	r3, r2
 801d8ec:	00db      	lsls	r3, r3, #3
 801d8ee:	440b      	add	r3, r1
 801d8f0:	2200      	movs	r2, #0
 801d8f2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801d8f4:	68fb      	ldr	r3, [r7, #12]
 801d8f6:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801d8fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801d8fe:	9300      	str	r3, [sp, #0]
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	6939      	ldr	r1, [r7, #16]
 801d904:	68f8      	ldr	r0, [r7, #12]
 801d906:	f002 f909 	bl	801fb1c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801d90a:	6938      	ldr	r0, [r7, #16]
 801d90c:	f7f6 fcac 	bl	8014268 <pbuf_free>
  }
  return ERR_OK;
 801d910:	2300      	movs	r3, #0
}
 801d912:	4618      	mov	r0, r3
 801d914:	3718      	adds	r7, #24
 801d916:	46bd      	mov	sp, r7
 801d918:	bd80      	pop	{r7, pc}
 801d91a:	bf00      	nop
 801d91c:	08026510 	.word	0x08026510
 801d920:	08026608 	.word	0x08026608
 801d924:	08026588 	.word	0x08026588
 801d928:	2400cb90 	.word	0x2400cb90

0801d92c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801d92c:	b580      	push	{r7, lr}
 801d92e:	b084      	sub	sp, #16
 801d930:	af00      	add	r7, sp, #0
 801d932:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d934:	2300      	movs	r3, #0
 801d936:	60fb      	str	r3, [r7, #12]
 801d938:	e01e      	b.n	801d978 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801d93a:	4913      	ldr	r1, [pc, #76]	@ (801d988 <etharp_cleanup_netif+0x5c>)
 801d93c:	68fa      	ldr	r2, [r7, #12]
 801d93e:	4613      	mov	r3, r2
 801d940:	005b      	lsls	r3, r3, #1
 801d942:	4413      	add	r3, r2
 801d944:	00db      	lsls	r3, r3, #3
 801d946:	440b      	add	r3, r1
 801d948:	3314      	adds	r3, #20
 801d94a:	781b      	ldrb	r3, [r3, #0]
 801d94c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801d94e:	7afb      	ldrb	r3, [r7, #11]
 801d950:	2b00      	cmp	r3, #0
 801d952:	d00e      	beq.n	801d972 <etharp_cleanup_netif+0x46>
 801d954:	490c      	ldr	r1, [pc, #48]	@ (801d988 <etharp_cleanup_netif+0x5c>)
 801d956:	68fa      	ldr	r2, [r7, #12]
 801d958:	4613      	mov	r3, r2
 801d95a:	005b      	lsls	r3, r3, #1
 801d95c:	4413      	add	r3, r2
 801d95e:	00db      	lsls	r3, r3, #3
 801d960:	440b      	add	r3, r1
 801d962:	3308      	adds	r3, #8
 801d964:	681b      	ldr	r3, [r3, #0]
 801d966:	687a      	ldr	r2, [r7, #4]
 801d968:	429a      	cmp	r2, r3
 801d96a:	d102      	bne.n	801d972 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801d96c:	68f8      	ldr	r0, [r7, #12]
 801d96e:	f7ff fce5 	bl	801d33c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d972:	68fb      	ldr	r3, [r7, #12]
 801d974:	3301      	adds	r3, #1
 801d976:	60fb      	str	r3, [r7, #12]
 801d978:	68fb      	ldr	r3, [r7, #12]
 801d97a:	2b09      	cmp	r3, #9
 801d97c:	dddd      	ble.n	801d93a <etharp_cleanup_netif+0xe>
    }
  }
}
 801d97e:	bf00      	nop
 801d980:	bf00      	nop
 801d982:	3710      	adds	r7, #16
 801d984:	46bd      	mov	sp, r7
 801d986:	bd80      	pop	{r7, pc}
 801d988:	2400cb90 	.word	0x2400cb90

0801d98c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801d98c:	b5b0      	push	{r4, r5, r7, lr}
 801d98e:	b08a      	sub	sp, #40	@ 0x28
 801d990:	af04      	add	r7, sp, #16
 801d992:	6078      	str	r0, [r7, #4]
 801d994:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801d996:	683b      	ldr	r3, [r7, #0]
 801d998:	2b00      	cmp	r3, #0
 801d99a:	d107      	bne.n	801d9ac <etharp_input+0x20>
 801d99c:	4b3f      	ldr	r3, [pc, #252]	@ (801da9c <etharp_input+0x110>)
 801d99e:	f240 228a 	movw	r2, #650	@ 0x28a
 801d9a2:	493f      	ldr	r1, [pc, #252]	@ (801daa0 <etharp_input+0x114>)
 801d9a4:	483f      	ldr	r0, [pc, #252]	@ (801daa4 <etharp_input+0x118>)
 801d9a6:	f002 ffed 	bl	8020984 <iprintf>
 801d9aa:	e074      	b.n	801da96 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	685b      	ldr	r3, [r3, #4]
 801d9b0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801d9b2:	693b      	ldr	r3, [r7, #16]
 801d9b4:	881b      	ldrh	r3, [r3, #0]
 801d9b6:	b29b      	uxth	r3, r3
 801d9b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d9bc:	d10c      	bne.n	801d9d8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801d9be:	693b      	ldr	r3, [r7, #16]
 801d9c0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801d9c2:	2b06      	cmp	r3, #6
 801d9c4:	d108      	bne.n	801d9d8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801d9c6:	693b      	ldr	r3, [r7, #16]
 801d9c8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801d9ca:	2b04      	cmp	r3, #4
 801d9cc:	d104      	bne.n	801d9d8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801d9ce:	693b      	ldr	r3, [r7, #16]
 801d9d0:	885b      	ldrh	r3, [r3, #2]
 801d9d2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801d9d4:	2b08      	cmp	r3, #8
 801d9d6:	d003      	beq.n	801d9e0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801d9d8:	6878      	ldr	r0, [r7, #4]
 801d9da:	f7f6 fc45 	bl	8014268 <pbuf_free>
    return;
 801d9de:	e05a      	b.n	801da96 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801d9e0:	693b      	ldr	r3, [r7, #16]
 801d9e2:	330e      	adds	r3, #14
 801d9e4:	681b      	ldr	r3, [r3, #0]
 801d9e6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801d9e8:	693b      	ldr	r3, [r7, #16]
 801d9ea:	3318      	adds	r3, #24
 801d9ec:	681b      	ldr	r3, [r3, #0]
 801d9ee:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d9f0:	683b      	ldr	r3, [r7, #0]
 801d9f2:	3304      	adds	r3, #4
 801d9f4:	681b      	ldr	r3, [r3, #0]
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	d102      	bne.n	801da00 <etharp_input+0x74>
    for_us = 0;
 801d9fa:	2300      	movs	r3, #0
 801d9fc:	75fb      	strb	r3, [r7, #23]
 801d9fe:	e009      	b.n	801da14 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801da00:	68ba      	ldr	r2, [r7, #8]
 801da02:	683b      	ldr	r3, [r7, #0]
 801da04:	3304      	adds	r3, #4
 801da06:	681b      	ldr	r3, [r3, #0]
 801da08:	429a      	cmp	r2, r3
 801da0a:	bf0c      	ite	eq
 801da0c:	2301      	moveq	r3, #1
 801da0e:	2300      	movne	r3, #0
 801da10:	b2db      	uxtb	r3, r3
 801da12:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801da14:	693b      	ldr	r3, [r7, #16]
 801da16:	f103 0208 	add.w	r2, r3, #8
 801da1a:	7dfb      	ldrb	r3, [r7, #23]
 801da1c:	2b00      	cmp	r3, #0
 801da1e:	d001      	beq.n	801da24 <etharp_input+0x98>
 801da20:	2301      	movs	r3, #1
 801da22:	e000      	b.n	801da26 <etharp_input+0x9a>
 801da24:	2302      	movs	r3, #2
 801da26:	f107 010c 	add.w	r1, r7, #12
 801da2a:	6838      	ldr	r0, [r7, #0]
 801da2c:	f7ff fed8 	bl	801d7e0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801da30:	693b      	ldr	r3, [r7, #16]
 801da32:	88db      	ldrh	r3, [r3, #6]
 801da34:	b29b      	uxth	r3, r3
 801da36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801da3a:	d003      	beq.n	801da44 <etharp_input+0xb8>
 801da3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801da40:	d01e      	beq.n	801da80 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801da42:	e025      	b.n	801da90 <etharp_input+0x104>
      if (for_us) {
 801da44:	7dfb      	ldrb	r3, [r7, #23]
 801da46:	2b00      	cmp	r3, #0
 801da48:	d021      	beq.n	801da8e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801da4a:	683b      	ldr	r3, [r7, #0]
 801da4c:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801da50:	693b      	ldr	r3, [r7, #16]
 801da52:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801da56:	683b      	ldr	r3, [r7, #0]
 801da58:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 801da5c:	683b      	ldr	r3, [r7, #0]
 801da5e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801da60:	693a      	ldr	r2, [r7, #16]
 801da62:	3208      	adds	r2, #8
        etharp_raw(netif,
 801da64:	2102      	movs	r1, #2
 801da66:	9103      	str	r1, [sp, #12]
 801da68:	f107 010c 	add.w	r1, r7, #12
 801da6c:	9102      	str	r1, [sp, #8]
 801da6e:	9201      	str	r2, [sp, #4]
 801da70:	9300      	str	r3, [sp, #0]
 801da72:	462b      	mov	r3, r5
 801da74:	4622      	mov	r2, r4
 801da76:	4601      	mov	r1, r0
 801da78:	6838      	ldr	r0, [r7, #0]
 801da7a:	f000 faef 	bl	801e05c <etharp_raw>
      break;
 801da7e:	e006      	b.n	801da8e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801da80:	f107 030c 	add.w	r3, r7, #12
 801da84:	4619      	mov	r1, r3
 801da86:	6838      	ldr	r0, [r7, #0]
 801da88:	f7fe fa02 	bl	801be90 <dhcp_arp_reply>
      break;
 801da8c:	e000      	b.n	801da90 <etharp_input+0x104>
      break;
 801da8e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801da90:	6878      	ldr	r0, [r7, #4]
 801da92:	f7f6 fbe9 	bl	8014268 <pbuf_free>
}
 801da96:	3718      	adds	r7, #24
 801da98:	46bd      	mov	sp, r7
 801da9a:	bdb0      	pop	{r4, r5, r7, pc}
 801da9c:	08026510 	.word	0x08026510
 801daa0:	08026660 	.word	0x08026660
 801daa4:	08026588 	.word	0x08026588

0801daa8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801daa8:	b580      	push	{r7, lr}
 801daaa:	b086      	sub	sp, #24
 801daac:	af02      	add	r7, sp, #8
 801daae:	60f8      	str	r0, [r7, #12]
 801dab0:	60b9      	str	r1, [r7, #8]
 801dab2:	4613      	mov	r3, r2
 801dab4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801dab6:	79fa      	ldrb	r2, [r7, #7]
 801dab8:	4944      	ldr	r1, [pc, #272]	@ (801dbcc <etharp_output_to_arp_index+0x124>)
 801daba:	4613      	mov	r3, r2
 801dabc:	005b      	lsls	r3, r3, #1
 801dabe:	4413      	add	r3, r2
 801dac0:	00db      	lsls	r3, r3, #3
 801dac2:	440b      	add	r3, r1
 801dac4:	3314      	adds	r3, #20
 801dac6:	781b      	ldrb	r3, [r3, #0]
 801dac8:	2b01      	cmp	r3, #1
 801daca:	d806      	bhi.n	801dada <etharp_output_to_arp_index+0x32>
 801dacc:	4b40      	ldr	r3, [pc, #256]	@ (801dbd0 <etharp_output_to_arp_index+0x128>)
 801dace:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801dad2:	4940      	ldr	r1, [pc, #256]	@ (801dbd4 <etharp_output_to_arp_index+0x12c>)
 801dad4:	4840      	ldr	r0, [pc, #256]	@ (801dbd8 <etharp_output_to_arp_index+0x130>)
 801dad6:	f002 ff55 	bl	8020984 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801dada:	79fa      	ldrb	r2, [r7, #7]
 801dadc:	493b      	ldr	r1, [pc, #236]	@ (801dbcc <etharp_output_to_arp_index+0x124>)
 801dade:	4613      	mov	r3, r2
 801dae0:	005b      	lsls	r3, r3, #1
 801dae2:	4413      	add	r3, r2
 801dae4:	00db      	lsls	r3, r3, #3
 801dae6:	440b      	add	r3, r1
 801dae8:	3314      	adds	r3, #20
 801daea:	781b      	ldrb	r3, [r3, #0]
 801daec:	2b02      	cmp	r3, #2
 801daee:	d153      	bne.n	801db98 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801daf0:	79fa      	ldrb	r2, [r7, #7]
 801daf2:	4936      	ldr	r1, [pc, #216]	@ (801dbcc <etharp_output_to_arp_index+0x124>)
 801daf4:	4613      	mov	r3, r2
 801daf6:	005b      	lsls	r3, r3, #1
 801daf8:	4413      	add	r3, r2
 801dafa:	00db      	lsls	r3, r3, #3
 801dafc:	440b      	add	r3, r1
 801dafe:	3312      	adds	r3, #18
 801db00:	881b      	ldrh	r3, [r3, #0]
 801db02:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801db06:	d919      	bls.n	801db3c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801db08:	79fa      	ldrb	r2, [r7, #7]
 801db0a:	4613      	mov	r3, r2
 801db0c:	005b      	lsls	r3, r3, #1
 801db0e:	4413      	add	r3, r2
 801db10:	00db      	lsls	r3, r3, #3
 801db12:	4a2e      	ldr	r2, [pc, #184]	@ (801dbcc <etharp_output_to_arp_index+0x124>)
 801db14:	4413      	add	r3, r2
 801db16:	3304      	adds	r3, #4
 801db18:	4619      	mov	r1, r3
 801db1a:	68f8      	ldr	r0, [r7, #12]
 801db1c:	f000 fb4c 	bl	801e1b8 <etharp_request>
 801db20:	4603      	mov	r3, r0
 801db22:	2b00      	cmp	r3, #0
 801db24:	d138      	bne.n	801db98 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801db26:	79fa      	ldrb	r2, [r7, #7]
 801db28:	4928      	ldr	r1, [pc, #160]	@ (801dbcc <etharp_output_to_arp_index+0x124>)
 801db2a:	4613      	mov	r3, r2
 801db2c:	005b      	lsls	r3, r3, #1
 801db2e:	4413      	add	r3, r2
 801db30:	00db      	lsls	r3, r3, #3
 801db32:	440b      	add	r3, r1
 801db34:	3314      	adds	r3, #20
 801db36:	2203      	movs	r2, #3
 801db38:	701a      	strb	r2, [r3, #0]
 801db3a:	e02d      	b.n	801db98 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801db3c:	79fa      	ldrb	r2, [r7, #7]
 801db3e:	4923      	ldr	r1, [pc, #140]	@ (801dbcc <etharp_output_to_arp_index+0x124>)
 801db40:	4613      	mov	r3, r2
 801db42:	005b      	lsls	r3, r3, #1
 801db44:	4413      	add	r3, r2
 801db46:	00db      	lsls	r3, r3, #3
 801db48:	440b      	add	r3, r1
 801db4a:	3312      	adds	r3, #18
 801db4c:	881b      	ldrh	r3, [r3, #0]
 801db4e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801db52:	d321      	bcc.n	801db98 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801db54:	79fa      	ldrb	r2, [r7, #7]
 801db56:	4613      	mov	r3, r2
 801db58:	005b      	lsls	r3, r3, #1
 801db5a:	4413      	add	r3, r2
 801db5c:	00db      	lsls	r3, r3, #3
 801db5e:	4a1b      	ldr	r2, [pc, #108]	@ (801dbcc <etharp_output_to_arp_index+0x124>)
 801db60:	4413      	add	r3, r2
 801db62:	1d19      	adds	r1, r3, #4
 801db64:	79fa      	ldrb	r2, [r7, #7]
 801db66:	4613      	mov	r3, r2
 801db68:	005b      	lsls	r3, r3, #1
 801db6a:	4413      	add	r3, r2
 801db6c:	00db      	lsls	r3, r3, #3
 801db6e:	3308      	adds	r3, #8
 801db70:	4a16      	ldr	r2, [pc, #88]	@ (801dbcc <etharp_output_to_arp_index+0x124>)
 801db72:	4413      	add	r3, r2
 801db74:	3304      	adds	r3, #4
 801db76:	461a      	mov	r2, r3
 801db78:	68f8      	ldr	r0, [r7, #12]
 801db7a:	f000 fafb 	bl	801e174 <etharp_request_dst>
 801db7e:	4603      	mov	r3, r0
 801db80:	2b00      	cmp	r3, #0
 801db82:	d109      	bne.n	801db98 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801db84:	79fa      	ldrb	r2, [r7, #7]
 801db86:	4911      	ldr	r1, [pc, #68]	@ (801dbcc <etharp_output_to_arp_index+0x124>)
 801db88:	4613      	mov	r3, r2
 801db8a:	005b      	lsls	r3, r3, #1
 801db8c:	4413      	add	r3, r2
 801db8e:	00db      	lsls	r3, r3, #3
 801db90:	440b      	add	r3, r1
 801db92:	3314      	adds	r3, #20
 801db94:	2203      	movs	r2, #3
 801db96:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801db98:	68fb      	ldr	r3, [r7, #12]
 801db9a:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 801db9e:	79fa      	ldrb	r2, [r7, #7]
 801dba0:	4613      	mov	r3, r2
 801dba2:	005b      	lsls	r3, r3, #1
 801dba4:	4413      	add	r3, r2
 801dba6:	00db      	lsls	r3, r3, #3
 801dba8:	3308      	adds	r3, #8
 801dbaa:	4a08      	ldr	r2, [pc, #32]	@ (801dbcc <etharp_output_to_arp_index+0x124>)
 801dbac:	4413      	add	r3, r2
 801dbae:	3304      	adds	r3, #4
 801dbb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801dbb4:	9200      	str	r2, [sp, #0]
 801dbb6:	460a      	mov	r2, r1
 801dbb8:	68b9      	ldr	r1, [r7, #8]
 801dbba:	68f8      	ldr	r0, [r7, #12]
 801dbbc:	f001 ffae 	bl	801fb1c <ethernet_output>
 801dbc0:	4603      	mov	r3, r0
}
 801dbc2:	4618      	mov	r0, r3
 801dbc4:	3710      	adds	r7, #16
 801dbc6:	46bd      	mov	sp, r7
 801dbc8:	bd80      	pop	{r7, pc}
 801dbca:	bf00      	nop
 801dbcc:	2400cb90 	.word	0x2400cb90
 801dbd0:	08026510 	.word	0x08026510
 801dbd4:	08026680 	.word	0x08026680
 801dbd8:	08026588 	.word	0x08026588

0801dbdc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801dbdc:	b580      	push	{r7, lr}
 801dbde:	b08a      	sub	sp, #40	@ 0x28
 801dbe0:	af02      	add	r7, sp, #8
 801dbe2:	60f8      	str	r0, [r7, #12]
 801dbe4:	60b9      	str	r1, [r7, #8]
 801dbe6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801dbe8:	687b      	ldr	r3, [r7, #4]
 801dbea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801dbec:	68fb      	ldr	r3, [r7, #12]
 801dbee:	2b00      	cmp	r3, #0
 801dbf0:	d106      	bne.n	801dc00 <etharp_output+0x24>
 801dbf2:	4b73      	ldr	r3, [pc, #460]	@ (801ddc0 <etharp_output+0x1e4>)
 801dbf4:	f240 321e 	movw	r2, #798	@ 0x31e
 801dbf8:	4972      	ldr	r1, [pc, #456]	@ (801ddc4 <etharp_output+0x1e8>)
 801dbfa:	4873      	ldr	r0, [pc, #460]	@ (801ddc8 <etharp_output+0x1ec>)
 801dbfc:	f002 fec2 	bl	8020984 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801dc00:	68bb      	ldr	r3, [r7, #8]
 801dc02:	2b00      	cmp	r3, #0
 801dc04:	d106      	bne.n	801dc14 <etharp_output+0x38>
 801dc06:	4b6e      	ldr	r3, [pc, #440]	@ (801ddc0 <etharp_output+0x1e4>)
 801dc08:	f240 321f 	movw	r2, #799	@ 0x31f
 801dc0c:	496f      	ldr	r1, [pc, #444]	@ (801ddcc <etharp_output+0x1f0>)
 801dc0e:	486e      	ldr	r0, [pc, #440]	@ (801ddc8 <etharp_output+0x1ec>)
 801dc10:	f002 feb8 	bl	8020984 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801dc14:	687b      	ldr	r3, [r7, #4]
 801dc16:	2b00      	cmp	r3, #0
 801dc18:	d106      	bne.n	801dc28 <etharp_output+0x4c>
 801dc1a:	4b69      	ldr	r3, [pc, #420]	@ (801ddc0 <etharp_output+0x1e4>)
 801dc1c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801dc20:	496b      	ldr	r1, [pc, #428]	@ (801ddd0 <etharp_output+0x1f4>)
 801dc22:	4869      	ldr	r0, [pc, #420]	@ (801ddc8 <etharp_output+0x1ec>)
 801dc24:	f002 feae 	bl	8020984 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801dc28:	687b      	ldr	r3, [r7, #4]
 801dc2a:	681b      	ldr	r3, [r3, #0]
 801dc2c:	68f9      	ldr	r1, [r7, #12]
 801dc2e:	4618      	mov	r0, r3
 801dc30:	f000 ff3c 	bl	801eaac <ip4_addr_isbroadcast_u32>
 801dc34:	4603      	mov	r3, r0
 801dc36:	2b00      	cmp	r3, #0
 801dc38:	d002      	beq.n	801dc40 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801dc3a:	4b66      	ldr	r3, [pc, #408]	@ (801ddd4 <etharp_output+0x1f8>)
 801dc3c:	61fb      	str	r3, [r7, #28]
 801dc3e:	e0af      	b.n	801dda0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801dc40:	687b      	ldr	r3, [r7, #4]
 801dc42:	681b      	ldr	r3, [r3, #0]
 801dc44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801dc48:	2be0      	cmp	r3, #224	@ 0xe0
 801dc4a:	d118      	bne.n	801dc7e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801dc4c:	2301      	movs	r3, #1
 801dc4e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801dc50:	2300      	movs	r3, #0
 801dc52:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801dc54:	235e      	movs	r3, #94	@ 0x5e
 801dc56:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801dc58:	687b      	ldr	r3, [r7, #4]
 801dc5a:	3301      	adds	r3, #1
 801dc5c:	781b      	ldrb	r3, [r3, #0]
 801dc5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801dc62:	b2db      	uxtb	r3, r3
 801dc64:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801dc66:	687b      	ldr	r3, [r7, #4]
 801dc68:	3302      	adds	r3, #2
 801dc6a:	781b      	ldrb	r3, [r3, #0]
 801dc6c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801dc6e:	687b      	ldr	r3, [r7, #4]
 801dc70:	3303      	adds	r3, #3
 801dc72:	781b      	ldrb	r3, [r3, #0]
 801dc74:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801dc76:	f107 0310 	add.w	r3, r7, #16
 801dc7a:	61fb      	str	r3, [r7, #28]
 801dc7c:	e090      	b.n	801dda0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801dc7e:	687b      	ldr	r3, [r7, #4]
 801dc80:	681a      	ldr	r2, [r3, #0]
 801dc82:	68fb      	ldr	r3, [r7, #12]
 801dc84:	3304      	adds	r3, #4
 801dc86:	681b      	ldr	r3, [r3, #0]
 801dc88:	405a      	eors	r2, r3
 801dc8a:	68fb      	ldr	r3, [r7, #12]
 801dc8c:	3308      	adds	r3, #8
 801dc8e:	681b      	ldr	r3, [r3, #0]
 801dc90:	4013      	ands	r3, r2
 801dc92:	2b00      	cmp	r3, #0
 801dc94:	d012      	beq.n	801dcbc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801dc96:	687b      	ldr	r3, [r7, #4]
 801dc98:	681b      	ldr	r3, [r3, #0]
 801dc9a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801dc9c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801dca0:	4293      	cmp	r3, r2
 801dca2:	d00b      	beq.n	801dcbc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801dca4:	68fb      	ldr	r3, [r7, #12]
 801dca6:	330c      	adds	r3, #12
 801dca8:	681b      	ldr	r3, [r3, #0]
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	d003      	beq.n	801dcb6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801dcae:	68fb      	ldr	r3, [r7, #12]
 801dcb0:	330c      	adds	r3, #12
 801dcb2:	61bb      	str	r3, [r7, #24]
 801dcb4:	e002      	b.n	801dcbc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801dcb6:	f06f 0303 	mvn.w	r3, #3
 801dcba:	e07d      	b.n	801ddb8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801dcbc:	4b46      	ldr	r3, [pc, #280]	@ (801ddd8 <etharp_output+0x1fc>)
 801dcbe:	781b      	ldrb	r3, [r3, #0]
 801dcc0:	4619      	mov	r1, r3
 801dcc2:	4a46      	ldr	r2, [pc, #280]	@ (801dddc <etharp_output+0x200>)
 801dcc4:	460b      	mov	r3, r1
 801dcc6:	005b      	lsls	r3, r3, #1
 801dcc8:	440b      	add	r3, r1
 801dcca:	00db      	lsls	r3, r3, #3
 801dccc:	4413      	add	r3, r2
 801dcce:	3314      	adds	r3, #20
 801dcd0:	781b      	ldrb	r3, [r3, #0]
 801dcd2:	2b01      	cmp	r3, #1
 801dcd4:	d925      	bls.n	801dd22 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801dcd6:	4b40      	ldr	r3, [pc, #256]	@ (801ddd8 <etharp_output+0x1fc>)
 801dcd8:	781b      	ldrb	r3, [r3, #0]
 801dcda:	4619      	mov	r1, r3
 801dcdc:	4a3f      	ldr	r2, [pc, #252]	@ (801dddc <etharp_output+0x200>)
 801dcde:	460b      	mov	r3, r1
 801dce0:	005b      	lsls	r3, r3, #1
 801dce2:	440b      	add	r3, r1
 801dce4:	00db      	lsls	r3, r3, #3
 801dce6:	4413      	add	r3, r2
 801dce8:	3308      	adds	r3, #8
 801dcea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801dcec:	68fa      	ldr	r2, [r7, #12]
 801dcee:	429a      	cmp	r2, r3
 801dcf0:	d117      	bne.n	801dd22 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801dcf2:	69bb      	ldr	r3, [r7, #24]
 801dcf4:	681a      	ldr	r2, [r3, #0]
 801dcf6:	4b38      	ldr	r3, [pc, #224]	@ (801ddd8 <etharp_output+0x1fc>)
 801dcf8:	781b      	ldrb	r3, [r3, #0]
 801dcfa:	4618      	mov	r0, r3
 801dcfc:	4937      	ldr	r1, [pc, #220]	@ (801dddc <etharp_output+0x200>)
 801dcfe:	4603      	mov	r3, r0
 801dd00:	005b      	lsls	r3, r3, #1
 801dd02:	4403      	add	r3, r0
 801dd04:	00db      	lsls	r3, r3, #3
 801dd06:	440b      	add	r3, r1
 801dd08:	3304      	adds	r3, #4
 801dd0a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801dd0c:	429a      	cmp	r2, r3
 801dd0e:	d108      	bne.n	801dd22 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801dd10:	4b31      	ldr	r3, [pc, #196]	@ (801ddd8 <etharp_output+0x1fc>)
 801dd12:	781b      	ldrb	r3, [r3, #0]
 801dd14:	461a      	mov	r2, r3
 801dd16:	68b9      	ldr	r1, [r7, #8]
 801dd18:	68f8      	ldr	r0, [r7, #12]
 801dd1a:	f7ff fec5 	bl	801daa8 <etharp_output_to_arp_index>
 801dd1e:	4603      	mov	r3, r0
 801dd20:	e04a      	b.n	801ddb8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801dd22:	2300      	movs	r3, #0
 801dd24:	75fb      	strb	r3, [r7, #23]
 801dd26:	e031      	b.n	801dd8c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801dd28:	7dfa      	ldrb	r2, [r7, #23]
 801dd2a:	492c      	ldr	r1, [pc, #176]	@ (801dddc <etharp_output+0x200>)
 801dd2c:	4613      	mov	r3, r2
 801dd2e:	005b      	lsls	r3, r3, #1
 801dd30:	4413      	add	r3, r2
 801dd32:	00db      	lsls	r3, r3, #3
 801dd34:	440b      	add	r3, r1
 801dd36:	3314      	adds	r3, #20
 801dd38:	781b      	ldrb	r3, [r3, #0]
 801dd3a:	2b01      	cmp	r3, #1
 801dd3c:	d923      	bls.n	801dd86 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801dd3e:	7dfa      	ldrb	r2, [r7, #23]
 801dd40:	4926      	ldr	r1, [pc, #152]	@ (801dddc <etharp_output+0x200>)
 801dd42:	4613      	mov	r3, r2
 801dd44:	005b      	lsls	r3, r3, #1
 801dd46:	4413      	add	r3, r2
 801dd48:	00db      	lsls	r3, r3, #3
 801dd4a:	440b      	add	r3, r1
 801dd4c:	3308      	adds	r3, #8
 801dd4e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801dd50:	68fa      	ldr	r2, [r7, #12]
 801dd52:	429a      	cmp	r2, r3
 801dd54:	d117      	bne.n	801dd86 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801dd56:	69bb      	ldr	r3, [r7, #24]
 801dd58:	6819      	ldr	r1, [r3, #0]
 801dd5a:	7dfa      	ldrb	r2, [r7, #23]
 801dd5c:	481f      	ldr	r0, [pc, #124]	@ (801dddc <etharp_output+0x200>)
 801dd5e:	4613      	mov	r3, r2
 801dd60:	005b      	lsls	r3, r3, #1
 801dd62:	4413      	add	r3, r2
 801dd64:	00db      	lsls	r3, r3, #3
 801dd66:	4403      	add	r3, r0
 801dd68:	3304      	adds	r3, #4
 801dd6a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801dd6c:	4299      	cmp	r1, r3
 801dd6e:	d10a      	bne.n	801dd86 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801dd70:	4a19      	ldr	r2, [pc, #100]	@ (801ddd8 <etharp_output+0x1fc>)
 801dd72:	7dfb      	ldrb	r3, [r7, #23]
 801dd74:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801dd76:	7dfb      	ldrb	r3, [r7, #23]
 801dd78:	461a      	mov	r2, r3
 801dd7a:	68b9      	ldr	r1, [r7, #8]
 801dd7c:	68f8      	ldr	r0, [r7, #12]
 801dd7e:	f7ff fe93 	bl	801daa8 <etharp_output_to_arp_index>
 801dd82:	4603      	mov	r3, r0
 801dd84:	e018      	b.n	801ddb8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801dd86:	7dfb      	ldrb	r3, [r7, #23]
 801dd88:	3301      	adds	r3, #1
 801dd8a:	75fb      	strb	r3, [r7, #23]
 801dd8c:	7dfb      	ldrb	r3, [r7, #23]
 801dd8e:	2b09      	cmp	r3, #9
 801dd90:	d9ca      	bls.n	801dd28 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801dd92:	68ba      	ldr	r2, [r7, #8]
 801dd94:	69b9      	ldr	r1, [r7, #24]
 801dd96:	68f8      	ldr	r0, [r7, #12]
 801dd98:	f000 f822 	bl	801dde0 <etharp_query>
 801dd9c:	4603      	mov	r3, r0
 801dd9e:	e00b      	b.n	801ddb8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801dda0:	68fb      	ldr	r3, [r7, #12]
 801dda2:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801dda6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801ddaa:	9300      	str	r3, [sp, #0]
 801ddac:	69fb      	ldr	r3, [r7, #28]
 801ddae:	68b9      	ldr	r1, [r7, #8]
 801ddb0:	68f8      	ldr	r0, [r7, #12]
 801ddb2:	f001 feb3 	bl	801fb1c <ethernet_output>
 801ddb6:	4603      	mov	r3, r0
}
 801ddb8:	4618      	mov	r0, r3
 801ddba:	3720      	adds	r7, #32
 801ddbc:	46bd      	mov	sp, r7
 801ddbe:	bd80      	pop	{r7, pc}
 801ddc0:	08026510 	.word	0x08026510
 801ddc4:	08026660 	.word	0x08026660
 801ddc8:	08026588 	.word	0x08026588
 801ddcc:	080266b0 	.word	0x080266b0
 801ddd0:	08026650 	.word	0x08026650
 801ddd4:	08026e64 	.word	0x08026e64
 801ddd8:	2400cc80 	.word	0x2400cc80
 801dddc:	2400cb90 	.word	0x2400cb90

0801dde0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801dde0:	b580      	push	{r7, lr}
 801dde2:	b08c      	sub	sp, #48	@ 0x30
 801dde4:	af02      	add	r7, sp, #8
 801dde6:	60f8      	str	r0, [r7, #12]
 801dde8:	60b9      	str	r1, [r7, #8]
 801ddea:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801ddec:	68fb      	ldr	r3, [r7, #12]
 801ddee:	332a      	adds	r3, #42	@ 0x2a
 801ddf0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801ddf2:	23ff      	movs	r3, #255	@ 0xff
 801ddf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801ddf8:	2300      	movs	r3, #0
 801ddfa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ddfc:	68bb      	ldr	r3, [r7, #8]
 801ddfe:	681b      	ldr	r3, [r3, #0]
 801de00:	68f9      	ldr	r1, [r7, #12]
 801de02:	4618      	mov	r0, r3
 801de04:	f000 fe52 	bl	801eaac <ip4_addr_isbroadcast_u32>
 801de08:	4603      	mov	r3, r0
 801de0a:	2b00      	cmp	r3, #0
 801de0c:	d10c      	bne.n	801de28 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801de0e:	68bb      	ldr	r3, [r7, #8]
 801de10:	681b      	ldr	r3, [r3, #0]
 801de12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801de16:	2be0      	cmp	r3, #224	@ 0xe0
 801de18:	d006      	beq.n	801de28 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801de1a:	68bb      	ldr	r3, [r7, #8]
 801de1c:	2b00      	cmp	r3, #0
 801de1e:	d003      	beq.n	801de28 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801de20:	68bb      	ldr	r3, [r7, #8]
 801de22:	681b      	ldr	r3, [r3, #0]
 801de24:	2b00      	cmp	r3, #0
 801de26:	d102      	bne.n	801de2e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801de28:	f06f 030f 	mvn.w	r3, #15
 801de2c:	e101      	b.n	801e032 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801de2e:	68fa      	ldr	r2, [r7, #12]
 801de30:	2101      	movs	r1, #1
 801de32:	68b8      	ldr	r0, [r7, #8]
 801de34:	f7ff fb5c 	bl	801d4f0 <etharp_find_entry>
 801de38:	4603      	mov	r3, r0
 801de3a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801de3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801de40:	2b00      	cmp	r3, #0
 801de42:	da02      	bge.n	801de4a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801de44:	8a7b      	ldrh	r3, [r7, #18]
 801de46:	b25b      	sxtb	r3, r3
 801de48:	e0f3      	b.n	801e032 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801de4a:	8a7b      	ldrh	r3, [r7, #18]
 801de4c:	2b7e      	cmp	r3, #126	@ 0x7e
 801de4e:	d906      	bls.n	801de5e <etharp_query+0x7e>
 801de50:	4b7a      	ldr	r3, [pc, #488]	@ (801e03c <etharp_query+0x25c>)
 801de52:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801de56:	497a      	ldr	r1, [pc, #488]	@ (801e040 <etharp_query+0x260>)
 801de58:	487a      	ldr	r0, [pc, #488]	@ (801e044 <etharp_query+0x264>)
 801de5a:	f002 fd93 	bl	8020984 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801de5e:	8a7b      	ldrh	r3, [r7, #18]
 801de60:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801de62:	7c7a      	ldrb	r2, [r7, #17]
 801de64:	4978      	ldr	r1, [pc, #480]	@ (801e048 <etharp_query+0x268>)
 801de66:	4613      	mov	r3, r2
 801de68:	005b      	lsls	r3, r3, #1
 801de6a:	4413      	add	r3, r2
 801de6c:	00db      	lsls	r3, r3, #3
 801de6e:	440b      	add	r3, r1
 801de70:	3314      	adds	r3, #20
 801de72:	781b      	ldrb	r3, [r3, #0]
 801de74:	2b00      	cmp	r3, #0
 801de76:	d115      	bne.n	801dea4 <etharp_query+0xc4>
    is_new_entry = 1;
 801de78:	2301      	movs	r3, #1
 801de7a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801de7c:	7c7a      	ldrb	r2, [r7, #17]
 801de7e:	4972      	ldr	r1, [pc, #456]	@ (801e048 <etharp_query+0x268>)
 801de80:	4613      	mov	r3, r2
 801de82:	005b      	lsls	r3, r3, #1
 801de84:	4413      	add	r3, r2
 801de86:	00db      	lsls	r3, r3, #3
 801de88:	440b      	add	r3, r1
 801de8a:	3314      	adds	r3, #20
 801de8c:	2201      	movs	r2, #1
 801de8e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801de90:	7c7a      	ldrb	r2, [r7, #17]
 801de92:	496d      	ldr	r1, [pc, #436]	@ (801e048 <etharp_query+0x268>)
 801de94:	4613      	mov	r3, r2
 801de96:	005b      	lsls	r3, r3, #1
 801de98:	4413      	add	r3, r2
 801de9a:	00db      	lsls	r3, r3, #3
 801de9c:	440b      	add	r3, r1
 801de9e:	3308      	adds	r3, #8
 801dea0:	68fa      	ldr	r2, [r7, #12]
 801dea2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801dea4:	7c7a      	ldrb	r2, [r7, #17]
 801dea6:	4968      	ldr	r1, [pc, #416]	@ (801e048 <etharp_query+0x268>)
 801dea8:	4613      	mov	r3, r2
 801deaa:	005b      	lsls	r3, r3, #1
 801deac:	4413      	add	r3, r2
 801deae:	00db      	lsls	r3, r3, #3
 801deb0:	440b      	add	r3, r1
 801deb2:	3314      	adds	r3, #20
 801deb4:	781b      	ldrb	r3, [r3, #0]
 801deb6:	2b01      	cmp	r3, #1
 801deb8:	d011      	beq.n	801dede <etharp_query+0xfe>
 801deba:	7c7a      	ldrb	r2, [r7, #17]
 801debc:	4962      	ldr	r1, [pc, #392]	@ (801e048 <etharp_query+0x268>)
 801debe:	4613      	mov	r3, r2
 801dec0:	005b      	lsls	r3, r3, #1
 801dec2:	4413      	add	r3, r2
 801dec4:	00db      	lsls	r3, r3, #3
 801dec6:	440b      	add	r3, r1
 801dec8:	3314      	adds	r3, #20
 801deca:	781b      	ldrb	r3, [r3, #0]
 801decc:	2b01      	cmp	r3, #1
 801dece:	d806      	bhi.n	801dede <etharp_query+0xfe>
 801ded0:	4b5a      	ldr	r3, [pc, #360]	@ (801e03c <etharp_query+0x25c>)
 801ded2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801ded6:	495d      	ldr	r1, [pc, #372]	@ (801e04c <etharp_query+0x26c>)
 801ded8:	485a      	ldr	r0, [pc, #360]	@ (801e044 <etharp_query+0x264>)
 801deda:	f002 fd53 	bl	8020984 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801dede:	6a3b      	ldr	r3, [r7, #32]
 801dee0:	2b00      	cmp	r3, #0
 801dee2:	d102      	bne.n	801deea <etharp_query+0x10a>
 801dee4:	687b      	ldr	r3, [r7, #4]
 801dee6:	2b00      	cmp	r3, #0
 801dee8:	d10c      	bne.n	801df04 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801deea:	68b9      	ldr	r1, [r7, #8]
 801deec:	68f8      	ldr	r0, [r7, #12]
 801deee:	f000 f963 	bl	801e1b8 <etharp_request>
 801def2:	4603      	mov	r3, r0
 801def4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801def8:	687b      	ldr	r3, [r7, #4]
 801defa:	2b00      	cmp	r3, #0
 801defc:	d102      	bne.n	801df04 <etharp_query+0x124>
      return result;
 801defe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801df02:	e096      	b.n	801e032 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	2b00      	cmp	r3, #0
 801df08:	d106      	bne.n	801df18 <etharp_query+0x138>
 801df0a:	4b4c      	ldr	r3, [pc, #304]	@ (801e03c <etharp_query+0x25c>)
 801df0c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801df10:	494f      	ldr	r1, [pc, #316]	@ (801e050 <etharp_query+0x270>)
 801df12:	484c      	ldr	r0, [pc, #304]	@ (801e044 <etharp_query+0x264>)
 801df14:	f002 fd36 	bl	8020984 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801df18:	7c7a      	ldrb	r2, [r7, #17]
 801df1a:	494b      	ldr	r1, [pc, #300]	@ (801e048 <etharp_query+0x268>)
 801df1c:	4613      	mov	r3, r2
 801df1e:	005b      	lsls	r3, r3, #1
 801df20:	4413      	add	r3, r2
 801df22:	00db      	lsls	r3, r3, #3
 801df24:	440b      	add	r3, r1
 801df26:	3314      	adds	r3, #20
 801df28:	781b      	ldrb	r3, [r3, #0]
 801df2a:	2b01      	cmp	r3, #1
 801df2c:	d917      	bls.n	801df5e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801df2e:	4a49      	ldr	r2, [pc, #292]	@ (801e054 <etharp_query+0x274>)
 801df30:	7c7b      	ldrb	r3, [r7, #17]
 801df32:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801df34:	7c7a      	ldrb	r2, [r7, #17]
 801df36:	4613      	mov	r3, r2
 801df38:	005b      	lsls	r3, r3, #1
 801df3a:	4413      	add	r3, r2
 801df3c:	00db      	lsls	r3, r3, #3
 801df3e:	3308      	adds	r3, #8
 801df40:	4a41      	ldr	r2, [pc, #260]	@ (801e048 <etharp_query+0x268>)
 801df42:	4413      	add	r3, r2
 801df44:	3304      	adds	r3, #4
 801df46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801df4a:	9200      	str	r2, [sp, #0]
 801df4c:	697a      	ldr	r2, [r7, #20]
 801df4e:	6879      	ldr	r1, [r7, #4]
 801df50:	68f8      	ldr	r0, [r7, #12]
 801df52:	f001 fde3 	bl	801fb1c <ethernet_output>
 801df56:	4603      	mov	r3, r0
 801df58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801df5c:	e067      	b.n	801e02e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801df5e:	7c7a      	ldrb	r2, [r7, #17]
 801df60:	4939      	ldr	r1, [pc, #228]	@ (801e048 <etharp_query+0x268>)
 801df62:	4613      	mov	r3, r2
 801df64:	005b      	lsls	r3, r3, #1
 801df66:	4413      	add	r3, r2
 801df68:	00db      	lsls	r3, r3, #3
 801df6a:	440b      	add	r3, r1
 801df6c:	3314      	adds	r3, #20
 801df6e:	781b      	ldrb	r3, [r3, #0]
 801df70:	2b01      	cmp	r3, #1
 801df72:	d15c      	bne.n	801e02e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801df74:	2300      	movs	r3, #0
 801df76:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801df78:	687b      	ldr	r3, [r7, #4]
 801df7a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801df7c:	e01c      	b.n	801dfb8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801df7e:	69fb      	ldr	r3, [r7, #28]
 801df80:	895a      	ldrh	r2, [r3, #10]
 801df82:	69fb      	ldr	r3, [r7, #28]
 801df84:	891b      	ldrh	r3, [r3, #8]
 801df86:	429a      	cmp	r2, r3
 801df88:	d10a      	bne.n	801dfa0 <etharp_query+0x1c0>
 801df8a:	69fb      	ldr	r3, [r7, #28]
 801df8c:	681b      	ldr	r3, [r3, #0]
 801df8e:	2b00      	cmp	r3, #0
 801df90:	d006      	beq.n	801dfa0 <etharp_query+0x1c0>
 801df92:	4b2a      	ldr	r3, [pc, #168]	@ (801e03c <etharp_query+0x25c>)
 801df94:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801df98:	492f      	ldr	r1, [pc, #188]	@ (801e058 <etharp_query+0x278>)
 801df9a:	482a      	ldr	r0, [pc, #168]	@ (801e044 <etharp_query+0x264>)
 801df9c:	f002 fcf2 	bl	8020984 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801dfa0:	69fb      	ldr	r3, [r7, #28]
 801dfa2:	7b1b      	ldrb	r3, [r3, #12]
 801dfa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801dfa8:	2b00      	cmp	r3, #0
 801dfaa:	d002      	beq.n	801dfb2 <etharp_query+0x1d2>
        copy_needed = 1;
 801dfac:	2301      	movs	r3, #1
 801dfae:	61bb      	str	r3, [r7, #24]
        break;
 801dfb0:	e005      	b.n	801dfbe <etharp_query+0x1de>
      }
      p = p->next;
 801dfb2:	69fb      	ldr	r3, [r7, #28]
 801dfb4:	681b      	ldr	r3, [r3, #0]
 801dfb6:	61fb      	str	r3, [r7, #28]
    while (p) {
 801dfb8:	69fb      	ldr	r3, [r7, #28]
 801dfba:	2b00      	cmp	r3, #0
 801dfbc:	d1df      	bne.n	801df7e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801dfbe:	69bb      	ldr	r3, [r7, #24]
 801dfc0:	2b00      	cmp	r3, #0
 801dfc2:	d007      	beq.n	801dfd4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801dfc4:	687a      	ldr	r2, [r7, #4]
 801dfc6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801dfca:	200e      	movs	r0, #14
 801dfcc:	f7f6 fbc4 	bl	8014758 <pbuf_clone>
 801dfd0:	61f8      	str	r0, [r7, #28]
 801dfd2:	e004      	b.n	801dfde <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801dfd4:	687b      	ldr	r3, [r7, #4]
 801dfd6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801dfd8:	69f8      	ldr	r0, [r7, #28]
 801dfda:	f7f6 f9eb 	bl	80143b4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801dfde:	69fb      	ldr	r3, [r7, #28]
 801dfe0:	2b00      	cmp	r3, #0
 801dfe2:	d021      	beq.n	801e028 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801dfe4:	7c7a      	ldrb	r2, [r7, #17]
 801dfe6:	4918      	ldr	r1, [pc, #96]	@ (801e048 <etharp_query+0x268>)
 801dfe8:	4613      	mov	r3, r2
 801dfea:	005b      	lsls	r3, r3, #1
 801dfec:	4413      	add	r3, r2
 801dfee:	00db      	lsls	r3, r3, #3
 801dff0:	440b      	add	r3, r1
 801dff2:	681b      	ldr	r3, [r3, #0]
 801dff4:	2b00      	cmp	r3, #0
 801dff6:	d00a      	beq.n	801e00e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801dff8:	7c7a      	ldrb	r2, [r7, #17]
 801dffa:	4913      	ldr	r1, [pc, #76]	@ (801e048 <etharp_query+0x268>)
 801dffc:	4613      	mov	r3, r2
 801dffe:	005b      	lsls	r3, r3, #1
 801e000:	4413      	add	r3, r2
 801e002:	00db      	lsls	r3, r3, #3
 801e004:	440b      	add	r3, r1
 801e006:	681b      	ldr	r3, [r3, #0]
 801e008:	4618      	mov	r0, r3
 801e00a:	f7f6 f92d 	bl	8014268 <pbuf_free>
      }
      arp_table[i].q = p;
 801e00e:	7c7a      	ldrb	r2, [r7, #17]
 801e010:	490d      	ldr	r1, [pc, #52]	@ (801e048 <etharp_query+0x268>)
 801e012:	4613      	mov	r3, r2
 801e014:	005b      	lsls	r3, r3, #1
 801e016:	4413      	add	r3, r2
 801e018:	00db      	lsls	r3, r3, #3
 801e01a:	440b      	add	r3, r1
 801e01c:	69fa      	ldr	r2, [r7, #28]
 801e01e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801e020:	2300      	movs	r3, #0
 801e022:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801e026:	e002      	b.n	801e02e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801e028:	23ff      	movs	r3, #255	@ 0xff
 801e02a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801e02e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801e032:	4618      	mov	r0, r3
 801e034:	3728      	adds	r7, #40	@ 0x28
 801e036:	46bd      	mov	sp, r7
 801e038:	bd80      	pop	{r7, pc}
 801e03a:	bf00      	nop
 801e03c:	08026510 	.word	0x08026510
 801e040:	080266bc 	.word	0x080266bc
 801e044:	08026588 	.word	0x08026588
 801e048:	2400cb90 	.word	0x2400cb90
 801e04c:	080266cc 	.word	0x080266cc
 801e050:	080266b0 	.word	0x080266b0
 801e054:	2400cc80 	.word	0x2400cc80
 801e058:	080266f4 	.word	0x080266f4

0801e05c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801e05c:	b580      	push	{r7, lr}
 801e05e:	b08a      	sub	sp, #40	@ 0x28
 801e060:	af02      	add	r7, sp, #8
 801e062:	60f8      	str	r0, [r7, #12]
 801e064:	60b9      	str	r1, [r7, #8]
 801e066:	607a      	str	r2, [r7, #4]
 801e068:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801e06a:	2300      	movs	r3, #0
 801e06c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801e06e:	68fb      	ldr	r3, [r7, #12]
 801e070:	2b00      	cmp	r3, #0
 801e072:	d106      	bne.n	801e082 <etharp_raw+0x26>
 801e074:	4b3a      	ldr	r3, [pc, #232]	@ (801e160 <etharp_raw+0x104>)
 801e076:	f240 4257 	movw	r2, #1111	@ 0x457
 801e07a:	493a      	ldr	r1, [pc, #232]	@ (801e164 <etharp_raw+0x108>)
 801e07c:	483a      	ldr	r0, [pc, #232]	@ (801e168 <etharp_raw+0x10c>)
 801e07e:	f002 fc81 	bl	8020984 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801e082:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801e086:	211c      	movs	r1, #28
 801e088:	200e      	movs	r0, #14
 801e08a:	f7f5 fe09 	bl	8013ca0 <pbuf_alloc>
 801e08e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801e090:	69bb      	ldr	r3, [r7, #24]
 801e092:	2b00      	cmp	r3, #0
 801e094:	d102      	bne.n	801e09c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801e096:	f04f 33ff 	mov.w	r3, #4294967295
 801e09a:	e05d      	b.n	801e158 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801e09c:	69bb      	ldr	r3, [r7, #24]
 801e09e:	895b      	ldrh	r3, [r3, #10]
 801e0a0:	2b1b      	cmp	r3, #27
 801e0a2:	d806      	bhi.n	801e0b2 <etharp_raw+0x56>
 801e0a4:	4b2e      	ldr	r3, [pc, #184]	@ (801e160 <etharp_raw+0x104>)
 801e0a6:	f240 4262 	movw	r2, #1122	@ 0x462
 801e0aa:	4930      	ldr	r1, [pc, #192]	@ (801e16c <etharp_raw+0x110>)
 801e0ac:	482e      	ldr	r0, [pc, #184]	@ (801e168 <etharp_raw+0x10c>)
 801e0ae:	f002 fc69 	bl	8020984 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801e0b2:	69bb      	ldr	r3, [r7, #24]
 801e0b4:	685b      	ldr	r3, [r3, #4]
 801e0b6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801e0b8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801e0ba:	4618      	mov	r0, r3
 801e0bc:	f7f4 fc1e 	bl	80128fc <lwip_htons>
 801e0c0:	4603      	mov	r3, r0
 801e0c2:	461a      	mov	r2, r3
 801e0c4:	697b      	ldr	r3, [r7, #20]
 801e0c6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801e0c8:	68fb      	ldr	r3, [r7, #12]
 801e0ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801e0ce:	2b06      	cmp	r3, #6
 801e0d0:	d006      	beq.n	801e0e0 <etharp_raw+0x84>
 801e0d2:	4b23      	ldr	r3, [pc, #140]	@ (801e160 <etharp_raw+0x104>)
 801e0d4:	f240 4269 	movw	r2, #1129	@ 0x469
 801e0d8:	4925      	ldr	r1, [pc, #148]	@ (801e170 <etharp_raw+0x114>)
 801e0da:	4823      	ldr	r0, [pc, #140]	@ (801e168 <etharp_raw+0x10c>)
 801e0dc:	f002 fc52 	bl	8020984 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801e0e0:	697b      	ldr	r3, [r7, #20]
 801e0e2:	3308      	adds	r3, #8
 801e0e4:	2206      	movs	r2, #6
 801e0e6:	6839      	ldr	r1, [r7, #0]
 801e0e8:	4618      	mov	r0, r3
 801e0ea:	f002 fec0 	bl	8020e6e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801e0ee:	697b      	ldr	r3, [r7, #20]
 801e0f0:	3312      	adds	r3, #18
 801e0f2:	2206      	movs	r2, #6
 801e0f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801e0f6:	4618      	mov	r0, r3
 801e0f8:	f002 feb9 	bl	8020e6e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801e0fc:	697b      	ldr	r3, [r7, #20]
 801e0fe:	330e      	adds	r3, #14
 801e100:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e102:	6812      	ldr	r2, [r2, #0]
 801e104:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801e106:	697b      	ldr	r3, [r7, #20]
 801e108:	3318      	adds	r3, #24
 801e10a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e10c:	6812      	ldr	r2, [r2, #0]
 801e10e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801e110:	697b      	ldr	r3, [r7, #20]
 801e112:	2200      	movs	r2, #0
 801e114:	701a      	strb	r2, [r3, #0]
 801e116:	2200      	movs	r2, #0
 801e118:	f042 0201 	orr.w	r2, r2, #1
 801e11c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801e11e:	697b      	ldr	r3, [r7, #20]
 801e120:	2200      	movs	r2, #0
 801e122:	f042 0208 	orr.w	r2, r2, #8
 801e126:	709a      	strb	r2, [r3, #2]
 801e128:	2200      	movs	r2, #0
 801e12a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801e12c:	697b      	ldr	r3, [r7, #20]
 801e12e:	2206      	movs	r2, #6
 801e130:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801e132:	697b      	ldr	r3, [r7, #20]
 801e134:	2204      	movs	r2, #4
 801e136:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801e138:	f640 0306 	movw	r3, #2054	@ 0x806
 801e13c:	9300      	str	r3, [sp, #0]
 801e13e:	687b      	ldr	r3, [r7, #4]
 801e140:	68ba      	ldr	r2, [r7, #8]
 801e142:	69b9      	ldr	r1, [r7, #24]
 801e144:	68f8      	ldr	r0, [r7, #12]
 801e146:	f001 fce9 	bl	801fb1c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801e14a:	69b8      	ldr	r0, [r7, #24]
 801e14c:	f7f6 f88c 	bl	8014268 <pbuf_free>
  p = NULL;
 801e150:	2300      	movs	r3, #0
 801e152:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801e154:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e158:	4618      	mov	r0, r3
 801e15a:	3720      	adds	r7, #32
 801e15c:	46bd      	mov	sp, r7
 801e15e:	bd80      	pop	{r7, pc}
 801e160:	08026510 	.word	0x08026510
 801e164:	08026660 	.word	0x08026660
 801e168:	08026588 	.word	0x08026588
 801e16c:	08026710 	.word	0x08026710
 801e170:	08026744 	.word	0x08026744

0801e174 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801e174:	b580      	push	{r7, lr}
 801e176:	b088      	sub	sp, #32
 801e178:	af04      	add	r7, sp, #16
 801e17a:	60f8      	str	r0, [r7, #12]
 801e17c:	60b9      	str	r1, [r7, #8]
 801e17e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e180:	68fb      	ldr	r3, [r7, #12]
 801e182:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801e186:	68fb      	ldr	r3, [r7, #12]
 801e188:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801e18c:	68fb      	ldr	r3, [r7, #12]
 801e18e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e190:	2201      	movs	r2, #1
 801e192:	9203      	str	r2, [sp, #12]
 801e194:	68ba      	ldr	r2, [r7, #8]
 801e196:	9202      	str	r2, [sp, #8]
 801e198:	4a06      	ldr	r2, [pc, #24]	@ (801e1b4 <etharp_request_dst+0x40>)
 801e19a:	9201      	str	r2, [sp, #4]
 801e19c:	9300      	str	r3, [sp, #0]
 801e19e:	4603      	mov	r3, r0
 801e1a0:	687a      	ldr	r2, [r7, #4]
 801e1a2:	68f8      	ldr	r0, [r7, #12]
 801e1a4:	f7ff ff5a 	bl	801e05c <etharp_raw>
 801e1a8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801e1aa:	4618      	mov	r0, r3
 801e1ac:	3710      	adds	r7, #16
 801e1ae:	46bd      	mov	sp, r7
 801e1b0:	bd80      	pop	{r7, pc}
 801e1b2:	bf00      	nop
 801e1b4:	08026e6c 	.word	0x08026e6c

0801e1b8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801e1b8:	b580      	push	{r7, lr}
 801e1ba:	b082      	sub	sp, #8
 801e1bc:	af00      	add	r7, sp, #0
 801e1be:	6078      	str	r0, [r7, #4]
 801e1c0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801e1c2:	4a05      	ldr	r2, [pc, #20]	@ (801e1d8 <etharp_request+0x20>)
 801e1c4:	6839      	ldr	r1, [r7, #0]
 801e1c6:	6878      	ldr	r0, [r7, #4]
 801e1c8:	f7ff ffd4 	bl	801e174 <etharp_request_dst>
 801e1cc:	4603      	mov	r3, r0
}
 801e1ce:	4618      	mov	r0, r3
 801e1d0:	3708      	adds	r7, #8
 801e1d2:	46bd      	mov	sp, r7
 801e1d4:	bd80      	pop	{r7, pc}
 801e1d6:	bf00      	nop
 801e1d8:	08026e64 	.word	0x08026e64

0801e1dc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801e1dc:	b580      	push	{r7, lr}
 801e1de:	b08e      	sub	sp, #56	@ 0x38
 801e1e0:	af04      	add	r7, sp, #16
 801e1e2:	6078      	str	r0, [r7, #4]
 801e1e4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801e1e6:	4b87      	ldr	r3, [pc, #540]	@ (801e404 <icmp_input+0x228>)
 801e1e8:	689b      	ldr	r3, [r3, #8]
 801e1ea:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801e1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e1ee:	781b      	ldrb	r3, [r3, #0]
 801e1f0:	f003 030f 	and.w	r3, r3, #15
 801e1f4:	b2db      	uxtb	r3, r3
 801e1f6:	009b      	lsls	r3, r3, #2
 801e1f8:	b2db      	uxtb	r3, r3
 801e1fa:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801e1fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e1fe:	2b13      	cmp	r3, #19
 801e200:	f240 80e8 	bls.w	801e3d4 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801e204:	687b      	ldr	r3, [r7, #4]
 801e206:	895b      	ldrh	r3, [r3, #10]
 801e208:	2b03      	cmp	r3, #3
 801e20a:	f240 80e5 	bls.w	801e3d8 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801e20e:	687b      	ldr	r3, [r7, #4]
 801e210:	685b      	ldr	r3, [r3, #4]
 801e212:	781b      	ldrb	r3, [r3, #0]
 801e214:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801e218:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801e21c:	2b00      	cmp	r3, #0
 801e21e:	f000 80d2 	beq.w	801e3c6 <icmp_input+0x1ea>
 801e222:	2b08      	cmp	r3, #8
 801e224:	f040 80d2 	bne.w	801e3cc <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801e228:	4b77      	ldr	r3, [pc, #476]	@ (801e408 <icmp_input+0x22c>)
 801e22a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e22c:	4b75      	ldr	r3, [pc, #468]	@ (801e404 <icmp_input+0x228>)
 801e22e:	695b      	ldr	r3, [r3, #20]
 801e230:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801e234:	2be0      	cmp	r3, #224	@ 0xe0
 801e236:	f000 80d6 	beq.w	801e3e6 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801e23a:	4b72      	ldr	r3, [pc, #456]	@ (801e404 <icmp_input+0x228>)
 801e23c:	695b      	ldr	r3, [r3, #20]
 801e23e:	4a71      	ldr	r2, [pc, #452]	@ (801e404 <icmp_input+0x228>)
 801e240:	6812      	ldr	r2, [r2, #0]
 801e242:	4611      	mov	r1, r2
 801e244:	4618      	mov	r0, r3
 801e246:	f000 fc31 	bl	801eaac <ip4_addr_isbroadcast_u32>
 801e24a:	4603      	mov	r3, r0
 801e24c:	2b00      	cmp	r3, #0
 801e24e:	f040 80cc 	bne.w	801e3ea <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801e252:	687b      	ldr	r3, [r7, #4]
 801e254:	891b      	ldrh	r3, [r3, #8]
 801e256:	2b07      	cmp	r3, #7
 801e258:	f240 80c0 	bls.w	801e3dc <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 801e25c:	6878      	ldr	r0, [r7, #4]
 801e25e:	f7f4 fbea 	bl	8012a36 <inet_chksum_pbuf>
 801e262:	4603      	mov	r3, r0
 801e264:	2b00      	cmp	r3, #0
 801e266:	d003      	beq.n	801e270 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801e268:	6878      	ldr	r0, [r7, #4]
 801e26a:	f7f5 fffd 	bl	8014268 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801e26e:	e0c5      	b.n	801e3fc <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801e270:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e272:	330e      	adds	r3, #14
 801e274:	4619      	mov	r1, r3
 801e276:	6878      	ldr	r0, [r7, #4]
 801e278:	f7f5 ff60 	bl	801413c <pbuf_add_header>
 801e27c:	4603      	mov	r3, r0
 801e27e:	2b00      	cmp	r3, #0
 801e280:	d04b      	beq.n	801e31a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801e282:	687b      	ldr	r3, [r7, #4]
 801e284:	891a      	ldrh	r2, [r3, #8]
 801e286:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e288:	4413      	add	r3, r2
 801e28a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801e28c:	687b      	ldr	r3, [r7, #4]
 801e28e:	891b      	ldrh	r3, [r3, #8]
 801e290:	8b7a      	ldrh	r2, [r7, #26]
 801e292:	429a      	cmp	r2, r3
 801e294:	f0c0 80ab 	bcc.w	801e3ee <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801e298:	8b7b      	ldrh	r3, [r7, #26]
 801e29a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801e29e:	4619      	mov	r1, r3
 801e2a0:	200e      	movs	r0, #14
 801e2a2:	f7f5 fcfd 	bl	8013ca0 <pbuf_alloc>
 801e2a6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801e2a8:	697b      	ldr	r3, [r7, #20]
 801e2aa:	2b00      	cmp	r3, #0
 801e2ac:	f000 80a1 	beq.w	801e3f2 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801e2b0:	697b      	ldr	r3, [r7, #20]
 801e2b2:	895b      	ldrh	r3, [r3, #10]
 801e2b4:	461a      	mov	r2, r3
 801e2b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e2b8:	3308      	adds	r3, #8
 801e2ba:	429a      	cmp	r2, r3
 801e2bc:	d203      	bcs.n	801e2c6 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801e2be:	6978      	ldr	r0, [r7, #20]
 801e2c0:	f7f5 ffd2 	bl	8014268 <pbuf_free>
          goto icmperr;
 801e2c4:	e096      	b.n	801e3f4 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801e2c6:	697b      	ldr	r3, [r7, #20]
 801e2c8:	685b      	ldr	r3, [r3, #4]
 801e2ca:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801e2cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801e2ce:	4618      	mov	r0, r3
 801e2d0:	f002 fdcd 	bl	8020e6e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801e2d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e2d6:	4619      	mov	r1, r3
 801e2d8:	6978      	ldr	r0, [r7, #20]
 801e2da:	f7f5 ff3f 	bl	801415c <pbuf_remove_header>
 801e2de:	4603      	mov	r3, r0
 801e2e0:	2b00      	cmp	r3, #0
 801e2e2:	d009      	beq.n	801e2f8 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801e2e4:	4b49      	ldr	r3, [pc, #292]	@ (801e40c <icmp_input+0x230>)
 801e2e6:	22b6      	movs	r2, #182	@ 0xb6
 801e2e8:	4949      	ldr	r1, [pc, #292]	@ (801e410 <icmp_input+0x234>)
 801e2ea:	484a      	ldr	r0, [pc, #296]	@ (801e414 <icmp_input+0x238>)
 801e2ec:	f002 fb4a 	bl	8020984 <iprintf>
          pbuf_free(r);
 801e2f0:	6978      	ldr	r0, [r7, #20]
 801e2f2:	f7f5 ffb9 	bl	8014268 <pbuf_free>
          goto icmperr;
 801e2f6:	e07d      	b.n	801e3f4 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801e2f8:	6879      	ldr	r1, [r7, #4]
 801e2fa:	6978      	ldr	r0, [r7, #20]
 801e2fc:	f7f6 f8e8 	bl	80144d0 <pbuf_copy>
 801e300:	4603      	mov	r3, r0
 801e302:	2b00      	cmp	r3, #0
 801e304:	d003      	beq.n	801e30e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801e306:	6978      	ldr	r0, [r7, #20]
 801e308:	f7f5 ffae 	bl	8014268 <pbuf_free>
          goto icmperr;
 801e30c:	e072      	b.n	801e3f4 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801e30e:	6878      	ldr	r0, [r7, #4]
 801e310:	f7f5 ffaa 	bl	8014268 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801e314:	697b      	ldr	r3, [r7, #20]
 801e316:	607b      	str	r3, [r7, #4]
 801e318:	e00f      	b.n	801e33a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801e31a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e31c:	330e      	adds	r3, #14
 801e31e:	4619      	mov	r1, r3
 801e320:	6878      	ldr	r0, [r7, #4]
 801e322:	f7f5 ff1b 	bl	801415c <pbuf_remove_header>
 801e326:	4603      	mov	r3, r0
 801e328:	2b00      	cmp	r3, #0
 801e32a:	d006      	beq.n	801e33a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801e32c:	4b37      	ldr	r3, [pc, #220]	@ (801e40c <icmp_input+0x230>)
 801e32e:	22c7      	movs	r2, #199	@ 0xc7
 801e330:	4939      	ldr	r1, [pc, #228]	@ (801e418 <icmp_input+0x23c>)
 801e332:	4838      	ldr	r0, [pc, #224]	@ (801e414 <icmp_input+0x238>)
 801e334:	f002 fb26 	bl	8020984 <iprintf>
          goto icmperr;
 801e338:	e05c      	b.n	801e3f4 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801e33a:	687b      	ldr	r3, [r7, #4]
 801e33c:	685b      	ldr	r3, [r3, #4]
 801e33e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801e340:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e342:	4619      	mov	r1, r3
 801e344:	6878      	ldr	r0, [r7, #4]
 801e346:	f7f5 fef9 	bl	801413c <pbuf_add_header>
 801e34a:	4603      	mov	r3, r0
 801e34c:	2b00      	cmp	r3, #0
 801e34e:	d13c      	bne.n	801e3ca <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801e350:	687b      	ldr	r3, [r7, #4]
 801e352:	685b      	ldr	r3, [r3, #4]
 801e354:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801e356:	69fb      	ldr	r3, [r7, #28]
 801e358:	681a      	ldr	r2, [r3, #0]
 801e35a:	68fb      	ldr	r3, [r7, #12]
 801e35c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801e35e:	4b29      	ldr	r3, [pc, #164]	@ (801e404 <icmp_input+0x228>)
 801e360:	691a      	ldr	r2, [r3, #16]
 801e362:	68fb      	ldr	r3, [r7, #12]
 801e364:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801e366:	693b      	ldr	r3, [r7, #16]
 801e368:	2200      	movs	r2, #0
 801e36a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801e36c:	693b      	ldr	r3, [r7, #16]
 801e36e:	885b      	ldrh	r3, [r3, #2]
 801e370:	b29b      	uxth	r3, r3
 801e372:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801e376:	4293      	cmp	r3, r2
 801e378:	d907      	bls.n	801e38a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801e37a:	693b      	ldr	r3, [r7, #16]
 801e37c:	885b      	ldrh	r3, [r3, #2]
 801e37e:	b29b      	uxth	r3, r3
 801e380:	3309      	adds	r3, #9
 801e382:	b29a      	uxth	r2, r3
 801e384:	693b      	ldr	r3, [r7, #16]
 801e386:	805a      	strh	r2, [r3, #2]
 801e388:	e006      	b.n	801e398 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801e38a:	693b      	ldr	r3, [r7, #16]
 801e38c:	885b      	ldrh	r3, [r3, #2]
 801e38e:	b29b      	uxth	r3, r3
 801e390:	3308      	adds	r3, #8
 801e392:	b29a      	uxth	r2, r3
 801e394:	693b      	ldr	r3, [r7, #16]
 801e396:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801e398:	68fb      	ldr	r3, [r7, #12]
 801e39a:	22ff      	movs	r2, #255	@ 0xff
 801e39c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801e39e:	68fb      	ldr	r3, [r7, #12]
 801e3a0:	2200      	movs	r2, #0
 801e3a2:	729a      	strb	r2, [r3, #10]
 801e3a4:	2200      	movs	r2, #0
 801e3a6:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801e3a8:	683b      	ldr	r3, [r7, #0]
 801e3aa:	9302      	str	r3, [sp, #8]
 801e3ac:	2301      	movs	r3, #1
 801e3ae:	9301      	str	r3, [sp, #4]
 801e3b0:	2300      	movs	r3, #0
 801e3b2:	9300      	str	r3, [sp, #0]
 801e3b4:	23ff      	movs	r3, #255	@ 0xff
 801e3b6:	2200      	movs	r2, #0
 801e3b8:	69f9      	ldr	r1, [r7, #28]
 801e3ba:	6878      	ldr	r0, [r7, #4]
 801e3bc:	f000 fa9e 	bl	801e8fc <ip4_output_if>
 801e3c0:	4603      	mov	r3, r0
 801e3c2:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801e3c4:	e001      	b.n	801e3ca <icmp_input+0x1ee>
      break;
 801e3c6:	bf00      	nop
 801e3c8:	e000      	b.n	801e3cc <icmp_input+0x1f0>
      break;
 801e3ca:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801e3cc:	6878      	ldr	r0, [r7, #4]
 801e3ce:	f7f5 ff4b 	bl	8014268 <pbuf_free>
  return;
 801e3d2:	e013      	b.n	801e3fc <icmp_input+0x220>
    goto lenerr;
 801e3d4:	bf00      	nop
 801e3d6:	e002      	b.n	801e3de <icmp_input+0x202>
    goto lenerr;
 801e3d8:	bf00      	nop
 801e3da:	e000      	b.n	801e3de <icmp_input+0x202>
        goto lenerr;
 801e3dc:	bf00      	nop
lenerr:
  pbuf_free(p);
 801e3de:	6878      	ldr	r0, [r7, #4]
 801e3e0:	f7f5 ff42 	bl	8014268 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801e3e4:	e00a      	b.n	801e3fc <icmp_input+0x220>
        goto icmperr;
 801e3e6:	bf00      	nop
 801e3e8:	e004      	b.n	801e3f4 <icmp_input+0x218>
        goto icmperr;
 801e3ea:	bf00      	nop
 801e3ec:	e002      	b.n	801e3f4 <icmp_input+0x218>
          goto icmperr;
 801e3ee:	bf00      	nop
 801e3f0:	e000      	b.n	801e3f4 <icmp_input+0x218>
          goto icmperr;
 801e3f2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801e3f4:	6878      	ldr	r0, [r7, #4]
 801e3f6:	f7f5 ff37 	bl	8014268 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801e3fa:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801e3fc:	3728      	adds	r7, #40	@ 0x28
 801e3fe:	46bd      	mov	sp, r7
 801e400:	bd80      	pop	{r7, pc}
 801e402:	bf00      	nop
 801e404:	240099dc 	.word	0x240099dc
 801e408:	240099f0 	.word	0x240099f0
 801e40c:	08026788 	.word	0x08026788
 801e410:	080267c0 	.word	0x080267c0
 801e414:	080267f8 	.word	0x080267f8
 801e418:	08026820 	.word	0x08026820

0801e41c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801e41c:	b580      	push	{r7, lr}
 801e41e:	b082      	sub	sp, #8
 801e420:	af00      	add	r7, sp, #0
 801e422:	6078      	str	r0, [r7, #4]
 801e424:	460b      	mov	r3, r1
 801e426:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801e428:	78fb      	ldrb	r3, [r7, #3]
 801e42a:	461a      	mov	r2, r3
 801e42c:	2103      	movs	r1, #3
 801e42e:	6878      	ldr	r0, [r7, #4]
 801e430:	f000 f814 	bl	801e45c <icmp_send_response>
}
 801e434:	bf00      	nop
 801e436:	3708      	adds	r7, #8
 801e438:	46bd      	mov	sp, r7
 801e43a:	bd80      	pop	{r7, pc}

0801e43c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801e43c:	b580      	push	{r7, lr}
 801e43e:	b082      	sub	sp, #8
 801e440:	af00      	add	r7, sp, #0
 801e442:	6078      	str	r0, [r7, #4]
 801e444:	460b      	mov	r3, r1
 801e446:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801e448:	78fb      	ldrb	r3, [r7, #3]
 801e44a:	461a      	mov	r2, r3
 801e44c:	210b      	movs	r1, #11
 801e44e:	6878      	ldr	r0, [r7, #4]
 801e450:	f000 f804 	bl	801e45c <icmp_send_response>
}
 801e454:	bf00      	nop
 801e456:	3708      	adds	r7, #8
 801e458:	46bd      	mov	sp, r7
 801e45a:	bd80      	pop	{r7, pc}

0801e45c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801e45c:	b580      	push	{r7, lr}
 801e45e:	b08c      	sub	sp, #48	@ 0x30
 801e460:	af04      	add	r7, sp, #16
 801e462:	6078      	str	r0, [r7, #4]
 801e464:	460b      	mov	r3, r1
 801e466:	70fb      	strb	r3, [r7, #3]
 801e468:	4613      	mov	r3, r2
 801e46a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801e46c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801e470:	2124      	movs	r1, #36	@ 0x24
 801e472:	2022      	movs	r0, #34	@ 0x22
 801e474:	f7f5 fc14 	bl	8013ca0 <pbuf_alloc>
 801e478:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801e47a:	69fb      	ldr	r3, [r7, #28]
 801e47c:	2b00      	cmp	r3, #0
 801e47e:	d056      	beq.n	801e52e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801e480:	69fb      	ldr	r3, [r7, #28]
 801e482:	895b      	ldrh	r3, [r3, #10]
 801e484:	2b23      	cmp	r3, #35	@ 0x23
 801e486:	d806      	bhi.n	801e496 <icmp_send_response+0x3a>
 801e488:	4b2b      	ldr	r3, [pc, #172]	@ (801e538 <icmp_send_response+0xdc>)
 801e48a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801e48e:	492b      	ldr	r1, [pc, #172]	@ (801e53c <icmp_send_response+0xe0>)
 801e490:	482b      	ldr	r0, [pc, #172]	@ (801e540 <icmp_send_response+0xe4>)
 801e492:	f002 fa77 	bl	8020984 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801e496:	687b      	ldr	r3, [r7, #4]
 801e498:	685b      	ldr	r3, [r3, #4]
 801e49a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801e49c:	69fb      	ldr	r3, [r7, #28]
 801e49e:	685b      	ldr	r3, [r3, #4]
 801e4a0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801e4a2:	697b      	ldr	r3, [r7, #20]
 801e4a4:	78fa      	ldrb	r2, [r7, #3]
 801e4a6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801e4a8:	697b      	ldr	r3, [r7, #20]
 801e4aa:	78ba      	ldrb	r2, [r7, #2]
 801e4ac:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801e4ae:	697b      	ldr	r3, [r7, #20]
 801e4b0:	2200      	movs	r2, #0
 801e4b2:	711a      	strb	r2, [r3, #4]
 801e4b4:	2200      	movs	r2, #0
 801e4b6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801e4b8:	697b      	ldr	r3, [r7, #20]
 801e4ba:	2200      	movs	r2, #0
 801e4bc:	719a      	strb	r2, [r3, #6]
 801e4be:	2200      	movs	r2, #0
 801e4c0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801e4c2:	69fb      	ldr	r3, [r7, #28]
 801e4c4:	685b      	ldr	r3, [r3, #4]
 801e4c6:	f103 0008 	add.w	r0, r3, #8
 801e4ca:	687b      	ldr	r3, [r7, #4]
 801e4cc:	685b      	ldr	r3, [r3, #4]
 801e4ce:	221c      	movs	r2, #28
 801e4d0:	4619      	mov	r1, r3
 801e4d2:	f002 fccc 	bl	8020e6e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801e4d6:	69bb      	ldr	r3, [r7, #24]
 801e4d8:	68db      	ldr	r3, [r3, #12]
 801e4da:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801e4dc:	f107 030c 	add.w	r3, r7, #12
 801e4e0:	4618      	mov	r0, r3
 801e4e2:	f000 f82f 	bl	801e544 <ip4_route>
 801e4e6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801e4e8:	693b      	ldr	r3, [r7, #16]
 801e4ea:	2b00      	cmp	r3, #0
 801e4ec:	d01b      	beq.n	801e526 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801e4ee:	697b      	ldr	r3, [r7, #20]
 801e4f0:	2200      	movs	r2, #0
 801e4f2:	709a      	strb	r2, [r3, #2]
 801e4f4:	2200      	movs	r2, #0
 801e4f6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801e4f8:	69fb      	ldr	r3, [r7, #28]
 801e4fa:	895b      	ldrh	r3, [r3, #10]
 801e4fc:	4619      	mov	r1, r3
 801e4fe:	6978      	ldr	r0, [r7, #20]
 801e500:	f7f4 fa87 	bl	8012a12 <inet_chksum>
 801e504:	4603      	mov	r3, r0
 801e506:	461a      	mov	r2, r3
 801e508:	697b      	ldr	r3, [r7, #20]
 801e50a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801e50c:	f107 020c 	add.w	r2, r7, #12
 801e510:	693b      	ldr	r3, [r7, #16]
 801e512:	9302      	str	r3, [sp, #8]
 801e514:	2301      	movs	r3, #1
 801e516:	9301      	str	r3, [sp, #4]
 801e518:	2300      	movs	r3, #0
 801e51a:	9300      	str	r3, [sp, #0]
 801e51c:	23ff      	movs	r3, #255	@ 0xff
 801e51e:	2100      	movs	r1, #0
 801e520:	69f8      	ldr	r0, [r7, #28]
 801e522:	f000 f9eb 	bl	801e8fc <ip4_output_if>
  }
  pbuf_free(q);
 801e526:	69f8      	ldr	r0, [r7, #28]
 801e528:	f7f5 fe9e 	bl	8014268 <pbuf_free>
 801e52c:	e000      	b.n	801e530 <icmp_send_response+0xd4>
    return;
 801e52e:	bf00      	nop
}
 801e530:	3720      	adds	r7, #32
 801e532:	46bd      	mov	sp, r7
 801e534:	bd80      	pop	{r7, pc}
 801e536:	bf00      	nop
 801e538:	08026788 	.word	0x08026788
 801e53c:	08026854 	.word	0x08026854
 801e540:	080267f8 	.word	0x080267f8

0801e544 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801e544:	b480      	push	{r7}
 801e546:	b085      	sub	sp, #20
 801e548:	af00      	add	r7, sp, #0
 801e54a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801e54c:	4b33      	ldr	r3, [pc, #204]	@ (801e61c <ip4_route+0xd8>)
 801e54e:	681b      	ldr	r3, [r3, #0]
 801e550:	60fb      	str	r3, [r7, #12]
 801e552:	e036      	b.n	801e5c2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e554:	68fb      	ldr	r3, [r7, #12]
 801e556:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801e55a:	f003 0301 	and.w	r3, r3, #1
 801e55e:	b2db      	uxtb	r3, r3
 801e560:	2b00      	cmp	r3, #0
 801e562:	d02b      	beq.n	801e5bc <ip4_route+0x78>
 801e564:	68fb      	ldr	r3, [r7, #12]
 801e566:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801e56a:	089b      	lsrs	r3, r3, #2
 801e56c:	f003 0301 	and.w	r3, r3, #1
 801e570:	b2db      	uxtb	r3, r3
 801e572:	2b00      	cmp	r3, #0
 801e574:	d022      	beq.n	801e5bc <ip4_route+0x78>
 801e576:	68fb      	ldr	r3, [r7, #12]
 801e578:	3304      	adds	r3, #4
 801e57a:	681b      	ldr	r3, [r3, #0]
 801e57c:	2b00      	cmp	r3, #0
 801e57e:	d01d      	beq.n	801e5bc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801e580:	687b      	ldr	r3, [r7, #4]
 801e582:	681a      	ldr	r2, [r3, #0]
 801e584:	68fb      	ldr	r3, [r7, #12]
 801e586:	3304      	adds	r3, #4
 801e588:	681b      	ldr	r3, [r3, #0]
 801e58a:	405a      	eors	r2, r3
 801e58c:	68fb      	ldr	r3, [r7, #12]
 801e58e:	3308      	adds	r3, #8
 801e590:	681b      	ldr	r3, [r3, #0]
 801e592:	4013      	ands	r3, r2
 801e594:	2b00      	cmp	r3, #0
 801e596:	d101      	bne.n	801e59c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801e598:	68fb      	ldr	r3, [r7, #12]
 801e59a:	e038      	b.n	801e60e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801e59c:	68fb      	ldr	r3, [r7, #12]
 801e59e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801e5a2:	f003 0302 	and.w	r3, r3, #2
 801e5a6:	2b00      	cmp	r3, #0
 801e5a8:	d108      	bne.n	801e5bc <ip4_route+0x78>
 801e5aa:	687b      	ldr	r3, [r7, #4]
 801e5ac:	681a      	ldr	r2, [r3, #0]
 801e5ae:	68fb      	ldr	r3, [r7, #12]
 801e5b0:	330c      	adds	r3, #12
 801e5b2:	681b      	ldr	r3, [r3, #0]
 801e5b4:	429a      	cmp	r2, r3
 801e5b6:	d101      	bne.n	801e5bc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801e5b8:	68fb      	ldr	r3, [r7, #12]
 801e5ba:	e028      	b.n	801e60e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801e5bc:	68fb      	ldr	r3, [r7, #12]
 801e5be:	681b      	ldr	r3, [r3, #0]
 801e5c0:	60fb      	str	r3, [r7, #12]
 801e5c2:	68fb      	ldr	r3, [r7, #12]
 801e5c4:	2b00      	cmp	r3, #0
 801e5c6:	d1c5      	bne.n	801e554 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801e5c8:	4b15      	ldr	r3, [pc, #84]	@ (801e620 <ip4_route+0xdc>)
 801e5ca:	681b      	ldr	r3, [r3, #0]
 801e5cc:	2b00      	cmp	r3, #0
 801e5ce:	d01a      	beq.n	801e606 <ip4_route+0xc2>
 801e5d0:	4b13      	ldr	r3, [pc, #76]	@ (801e620 <ip4_route+0xdc>)
 801e5d2:	681b      	ldr	r3, [r3, #0]
 801e5d4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801e5d8:	f003 0301 	and.w	r3, r3, #1
 801e5dc:	2b00      	cmp	r3, #0
 801e5de:	d012      	beq.n	801e606 <ip4_route+0xc2>
 801e5e0:	4b0f      	ldr	r3, [pc, #60]	@ (801e620 <ip4_route+0xdc>)
 801e5e2:	681b      	ldr	r3, [r3, #0]
 801e5e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801e5e8:	f003 0304 	and.w	r3, r3, #4
 801e5ec:	2b00      	cmp	r3, #0
 801e5ee:	d00a      	beq.n	801e606 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801e5f0:	4b0b      	ldr	r3, [pc, #44]	@ (801e620 <ip4_route+0xdc>)
 801e5f2:	681b      	ldr	r3, [r3, #0]
 801e5f4:	3304      	adds	r3, #4
 801e5f6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801e5f8:	2b00      	cmp	r3, #0
 801e5fa:	d004      	beq.n	801e606 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801e5fc:	687b      	ldr	r3, [r7, #4]
 801e5fe:	681b      	ldr	r3, [r3, #0]
 801e600:	b2db      	uxtb	r3, r3
 801e602:	2b7f      	cmp	r3, #127	@ 0x7f
 801e604:	d101      	bne.n	801e60a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801e606:	2300      	movs	r3, #0
 801e608:	e001      	b.n	801e60e <ip4_route+0xca>
  }

  return netif_default;
 801e60a:	4b05      	ldr	r3, [pc, #20]	@ (801e620 <ip4_route+0xdc>)
 801e60c:	681b      	ldr	r3, [r3, #0]
}
 801e60e:	4618      	mov	r0, r3
 801e610:	3714      	adds	r7, #20
 801e612:	46bd      	mov	sp, r7
 801e614:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e618:	4770      	bx	lr
 801e61a:	bf00      	nop
 801e61c:	2400caf0 	.word	0x2400caf0
 801e620:	2400caf4 	.word	0x2400caf4

0801e624 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801e624:	b580      	push	{r7, lr}
 801e626:	b082      	sub	sp, #8
 801e628:	af00      	add	r7, sp, #0
 801e62a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801e62c:	687b      	ldr	r3, [r7, #4]
 801e62e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801e632:	f003 0301 	and.w	r3, r3, #1
 801e636:	b2db      	uxtb	r3, r3
 801e638:	2b00      	cmp	r3, #0
 801e63a:	d016      	beq.n	801e66a <ip4_input_accept+0x46>
 801e63c:	687b      	ldr	r3, [r7, #4]
 801e63e:	3304      	adds	r3, #4
 801e640:	681b      	ldr	r3, [r3, #0]
 801e642:	2b00      	cmp	r3, #0
 801e644:	d011      	beq.n	801e66a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e646:	4b0b      	ldr	r3, [pc, #44]	@ (801e674 <ip4_input_accept+0x50>)
 801e648:	695a      	ldr	r2, [r3, #20]
 801e64a:	687b      	ldr	r3, [r7, #4]
 801e64c:	3304      	adds	r3, #4
 801e64e:	681b      	ldr	r3, [r3, #0]
 801e650:	429a      	cmp	r2, r3
 801e652:	d008      	beq.n	801e666 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801e654:	4b07      	ldr	r3, [pc, #28]	@ (801e674 <ip4_input_accept+0x50>)
 801e656:	695b      	ldr	r3, [r3, #20]
 801e658:	6879      	ldr	r1, [r7, #4]
 801e65a:	4618      	mov	r0, r3
 801e65c:	f000 fa26 	bl	801eaac <ip4_addr_isbroadcast_u32>
 801e660:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e662:	2b00      	cmp	r3, #0
 801e664:	d001      	beq.n	801e66a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801e666:	2301      	movs	r3, #1
 801e668:	e000      	b.n	801e66c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801e66a:	2300      	movs	r3, #0
}
 801e66c:	4618      	mov	r0, r3
 801e66e:	3708      	adds	r7, #8
 801e670:	46bd      	mov	sp, r7
 801e672:	bd80      	pop	{r7, pc}
 801e674:	240099dc 	.word	0x240099dc

0801e678 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801e678:	b580      	push	{r7, lr}
 801e67a:	b088      	sub	sp, #32
 801e67c:	af00      	add	r7, sp, #0
 801e67e:	6078      	str	r0, [r7, #4]
 801e680:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801e682:	2301      	movs	r3, #1
 801e684:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801e686:	687b      	ldr	r3, [r7, #4]
 801e688:	685b      	ldr	r3, [r3, #4]
 801e68a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801e68c:	69fb      	ldr	r3, [r7, #28]
 801e68e:	781b      	ldrb	r3, [r3, #0]
 801e690:	091b      	lsrs	r3, r3, #4
 801e692:	b2db      	uxtb	r3, r3
 801e694:	2b04      	cmp	r3, #4
 801e696:	d004      	beq.n	801e6a2 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801e698:	6878      	ldr	r0, [r7, #4]
 801e69a:	f7f5 fde5 	bl	8014268 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801e69e:	2300      	movs	r3, #0
 801e6a0:	e123      	b.n	801e8ea <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801e6a2:	69fb      	ldr	r3, [r7, #28]
 801e6a4:	781b      	ldrb	r3, [r3, #0]
 801e6a6:	f003 030f 	and.w	r3, r3, #15
 801e6aa:	b2db      	uxtb	r3, r3
 801e6ac:	009b      	lsls	r3, r3, #2
 801e6ae:	b2db      	uxtb	r3, r3
 801e6b0:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801e6b2:	69fb      	ldr	r3, [r7, #28]
 801e6b4:	885b      	ldrh	r3, [r3, #2]
 801e6b6:	b29b      	uxth	r3, r3
 801e6b8:	4618      	mov	r0, r3
 801e6ba:	f7f4 f91f 	bl	80128fc <lwip_htons>
 801e6be:	4603      	mov	r3, r0
 801e6c0:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801e6c2:	687b      	ldr	r3, [r7, #4]
 801e6c4:	891b      	ldrh	r3, [r3, #8]
 801e6c6:	8a3a      	ldrh	r2, [r7, #16]
 801e6c8:	429a      	cmp	r2, r3
 801e6ca:	d204      	bcs.n	801e6d6 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801e6cc:	8a3b      	ldrh	r3, [r7, #16]
 801e6ce:	4619      	mov	r1, r3
 801e6d0:	6878      	ldr	r0, [r7, #4]
 801e6d2:	f7f5 fc43 	bl	8013f5c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801e6d6:	687b      	ldr	r3, [r7, #4]
 801e6d8:	895b      	ldrh	r3, [r3, #10]
 801e6da:	8a7a      	ldrh	r2, [r7, #18]
 801e6dc:	429a      	cmp	r2, r3
 801e6de:	d807      	bhi.n	801e6f0 <ip4_input+0x78>
 801e6e0:	687b      	ldr	r3, [r7, #4]
 801e6e2:	891b      	ldrh	r3, [r3, #8]
 801e6e4:	8a3a      	ldrh	r2, [r7, #16]
 801e6e6:	429a      	cmp	r2, r3
 801e6e8:	d802      	bhi.n	801e6f0 <ip4_input+0x78>
 801e6ea:	8a7b      	ldrh	r3, [r7, #18]
 801e6ec:	2b13      	cmp	r3, #19
 801e6ee:	d804      	bhi.n	801e6fa <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801e6f0:	6878      	ldr	r0, [r7, #4]
 801e6f2:	f7f5 fdb9 	bl	8014268 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801e6f6:	2300      	movs	r3, #0
 801e6f8:	e0f7      	b.n	801e8ea <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801e6fa:	69fb      	ldr	r3, [r7, #28]
 801e6fc:	691b      	ldr	r3, [r3, #16]
 801e6fe:	4a7d      	ldr	r2, [pc, #500]	@ (801e8f4 <ip4_input+0x27c>)
 801e700:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801e702:	69fb      	ldr	r3, [r7, #28]
 801e704:	68db      	ldr	r3, [r3, #12]
 801e706:	4a7b      	ldr	r2, [pc, #492]	@ (801e8f4 <ip4_input+0x27c>)
 801e708:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e70a:	4b7a      	ldr	r3, [pc, #488]	@ (801e8f4 <ip4_input+0x27c>)
 801e70c:	695b      	ldr	r3, [r3, #20]
 801e70e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801e712:	2be0      	cmp	r3, #224	@ 0xe0
 801e714:	d112      	bne.n	801e73c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801e716:	683b      	ldr	r3, [r7, #0]
 801e718:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801e71c:	f003 0301 	and.w	r3, r3, #1
 801e720:	b2db      	uxtb	r3, r3
 801e722:	2b00      	cmp	r3, #0
 801e724:	d007      	beq.n	801e736 <ip4_input+0xbe>
 801e726:	683b      	ldr	r3, [r7, #0]
 801e728:	3304      	adds	r3, #4
 801e72a:	681b      	ldr	r3, [r3, #0]
 801e72c:	2b00      	cmp	r3, #0
 801e72e:	d002      	beq.n	801e736 <ip4_input+0xbe>
      netif = inp;
 801e730:	683b      	ldr	r3, [r7, #0]
 801e732:	61bb      	str	r3, [r7, #24]
 801e734:	e02a      	b.n	801e78c <ip4_input+0x114>
    } else {
      netif = NULL;
 801e736:	2300      	movs	r3, #0
 801e738:	61bb      	str	r3, [r7, #24]
 801e73a:	e027      	b.n	801e78c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801e73c:	6838      	ldr	r0, [r7, #0]
 801e73e:	f7ff ff71 	bl	801e624 <ip4_input_accept>
 801e742:	4603      	mov	r3, r0
 801e744:	2b00      	cmp	r3, #0
 801e746:	d002      	beq.n	801e74e <ip4_input+0xd6>
      netif = inp;
 801e748:	683b      	ldr	r3, [r7, #0]
 801e74a:	61bb      	str	r3, [r7, #24]
 801e74c:	e01e      	b.n	801e78c <ip4_input+0x114>
    } else {
      netif = NULL;
 801e74e:	2300      	movs	r3, #0
 801e750:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801e752:	4b68      	ldr	r3, [pc, #416]	@ (801e8f4 <ip4_input+0x27c>)
 801e754:	695b      	ldr	r3, [r3, #20]
 801e756:	b2db      	uxtb	r3, r3
 801e758:	2b7f      	cmp	r3, #127	@ 0x7f
 801e75a:	d017      	beq.n	801e78c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801e75c:	4b66      	ldr	r3, [pc, #408]	@ (801e8f8 <ip4_input+0x280>)
 801e75e:	681b      	ldr	r3, [r3, #0]
 801e760:	61bb      	str	r3, [r7, #24]
 801e762:	e00e      	b.n	801e782 <ip4_input+0x10a>
          if (netif == inp) {
 801e764:	69ba      	ldr	r2, [r7, #24]
 801e766:	683b      	ldr	r3, [r7, #0]
 801e768:	429a      	cmp	r2, r3
 801e76a:	d006      	beq.n	801e77a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801e76c:	69b8      	ldr	r0, [r7, #24]
 801e76e:	f7ff ff59 	bl	801e624 <ip4_input_accept>
 801e772:	4603      	mov	r3, r0
 801e774:	2b00      	cmp	r3, #0
 801e776:	d108      	bne.n	801e78a <ip4_input+0x112>
 801e778:	e000      	b.n	801e77c <ip4_input+0x104>
            continue;
 801e77a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801e77c:	69bb      	ldr	r3, [r7, #24]
 801e77e:	681b      	ldr	r3, [r3, #0]
 801e780:	61bb      	str	r3, [r7, #24]
 801e782:	69bb      	ldr	r3, [r7, #24]
 801e784:	2b00      	cmp	r3, #0
 801e786:	d1ed      	bne.n	801e764 <ip4_input+0xec>
 801e788:	e000      	b.n	801e78c <ip4_input+0x114>
            break;
 801e78a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801e78c:	69bb      	ldr	r3, [r7, #24]
 801e78e:	2b00      	cmp	r3, #0
 801e790:	d111      	bne.n	801e7b6 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801e792:	69fb      	ldr	r3, [r7, #28]
 801e794:	7a5b      	ldrb	r3, [r3, #9]
 801e796:	2b11      	cmp	r3, #17
 801e798:	d10d      	bne.n	801e7b6 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801e79a:	8a7b      	ldrh	r3, [r7, #18]
 801e79c:	69fa      	ldr	r2, [r7, #28]
 801e79e:	4413      	add	r3, r2
 801e7a0:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801e7a2:	68fb      	ldr	r3, [r7, #12]
 801e7a4:	885b      	ldrh	r3, [r3, #2]
 801e7a6:	b29b      	uxth	r3, r3
 801e7a8:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801e7ac:	d103      	bne.n	801e7b6 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801e7ae:	683b      	ldr	r3, [r7, #0]
 801e7b0:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801e7b2:	2300      	movs	r3, #0
 801e7b4:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801e7b6:	697b      	ldr	r3, [r7, #20]
 801e7b8:	2b00      	cmp	r3, #0
 801e7ba:	d017      	beq.n	801e7ec <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801e7bc:	4b4d      	ldr	r3, [pc, #308]	@ (801e8f4 <ip4_input+0x27c>)
 801e7be:	691b      	ldr	r3, [r3, #16]
 801e7c0:	2b00      	cmp	r3, #0
 801e7c2:	d013      	beq.n	801e7ec <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801e7c4:	4b4b      	ldr	r3, [pc, #300]	@ (801e8f4 <ip4_input+0x27c>)
 801e7c6:	691b      	ldr	r3, [r3, #16]
 801e7c8:	6839      	ldr	r1, [r7, #0]
 801e7ca:	4618      	mov	r0, r3
 801e7cc:	f000 f96e 	bl	801eaac <ip4_addr_isbroadcast_u32>
 801e7d0:	4603      	mov	r3, r0
 801e7d2:	2b00      	cmp	r3, #0
 801e7d4:	d105      	bne.n	801e7e2 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801e7d6:	4b47      	ldr	r3, [pc, #284]	@ (801e8f4 <ip4_input+0x27c>)
 801e7d8:	691b      	ldr	r3, [r3, #16]
 801e7da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801e7de:	2be0      	cmp	r3, #224	@ 0xe0
 801e7e0:	d104      	bne.n	801e7ec <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801e7e2:	6878      	ldr	r0, [r7, #4]
 801e7e4:	f7f5 fd40 	bl	8014268 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801e7e8:	2300      	movs	r3, #0
 801e7ea:	e07e      	b.n	801e8ea <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801e7ec:	69bb      	ldr	r3, [r7, #24]
 801e7ee:	2b00      	cmp	r3, #0
 801e7f0:	d104      	bne.n	801e7fc <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801e7f2:	6878      	ldr	r0, [r7, #4]
 801e7f4:	f7f5 fd38 	bl	8014268 <pbuf_free>
    return ERR_OK;
 801e7f8:	2300      	movs	r3, #0
 801e7fa:	e076      	b.n	801e8ea <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801e7fc:	69fb      	ldr	r3, [r7, #28]
 801e7fe:	88db      	ldrh	r3, [r3, #6]
 801e800:	b29b      	uxth	r3, r3
 801e802:	461a      	mov	r2, r3
 801e804:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801e808:	4013      	ands	r3, r2
 801e80a:	2b00      	cmp	r3, #0
 801e80c:	d00b      	beq.n	801e826 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801e80e:	6878      	ldr	r0, [r7, #4]
 801e810:	f000 fdbc 	bl	801f38c <ip4_reass>
 801e814:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801e816:	687b      	ldr	r3, [r7, #4]
 801e818:	2b00      	cmp	r3, #0
 801e81a:	d101      	bne.n	801e820 <ip4_input+0x1a8>
      return ERR_OK;
 801e81c:	2300      	movs	r3, #0
 801e81e:	e064      	b.n	801e8ea <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801e820:	687b      	ldr	r3, [r7, #4]
 801e822:	685b      	ldr	r3, [r3, #4]
 801e824:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801e826:	4a33      	ldr	r2, [pc, #204]	@ (801e8f4 <ip4_input+0x27c>)
 801e828:	69bb      	ldr	r3, [r7, #24]
 801e82a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801e82c:	4a31      	ldr	r2, [pc, #196]	@ (801e8f4 <ip4_input+0x27c>)
 801e82e:	683b      	ldr	r3, [r7, #0]
 801e830:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801e832:	4a30      	ldr	r2, [pc, #192]	@ (801e8f4 <ip4_input+0x27c>)
 801e834:	69fb      	ldr	r3, [r7, #28]
 801e836:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801e838:	69fb      	ldr	r3, [r7, #28]
 801e83a:	781b      	ldrb	r3, [r3, #0]
 801e83c:	f003 030f 	and.w	r3, r3, #15
 801e840:	b2db      	uxtb	r3, r3
 801e842:	009b      	lsls	r3, r3, #2
 801e844:	b2db      	uxtb	r3, r3
 801e846:	461a      	mov	r2, r3
 801e848:	4b2a      	ldr	r3, [pc, #168]	@ (801e8f4 <ip4_input+0x27c>)
 801e84a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801e84c:	8a7b      	ldrh	r3, [r7, #18]
 801e84e:	4619      	mov	r1, r3
 801e850:	6878      	ldr	r0, [r7, #4]
 801e852:	f7f5 fc83 	bl	801415c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801e856:	69fb      	ldr	r3, [r7, #28]
 801e858:	7a5b      	ldrb	r3, [r3, #9]
 801e85a:	2b11      	cmp	r3, #17
 801e85c:	d006      	beq.n	801e86c <ip4_input+0x1f4>
 801e85e:	2b11      	cmp	r3, #17
 801e860:	dc13      	bgt.n	801e88a <ip4_input+0x212>
 801e862:	2b01      	cmp	r3, #1
 801e864:	d00c      	beq.n	801e880 <ip4_input+0x208>
 801e866:	2b06      	cmp	r3, #6
 801e868:	d005      	beq.n	801e876 <ip4_input+0x1fe>
 801e86a:	e00e      	b.n	801e88a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801e86c:	6839      	ldr	r1, [r7, #0]
 801e86e:	6878      	ldr	r0, [r7, #4]
 801e870:	f7fc fa04 	bl	801ac7c <udp_input>
        break;
 801e874:	e026      	b.n	801e8c4 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801e876:	6839      	ldr	r1, [r7, #0]
 801e878:	6878      	ldr	r0, [r7, #4]
 801e87a:	f7f7 fdc3 	bl	8016404 <tcp_input>
        break;
 801e87e:	e021      	b.n	801e8c4 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801e880:	6839      	ldr	r1, [r7, #0]
 801e882:	6878      	ldr	r0, [r7, #4]
 801e884:	f7ff fcaa 	bl	801e1dc <icmp_input>
        break;
 801e888:	e01c      	b.n	801e8c4 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801e88a:	4b1a      	ldr	r3, [pc, #104]	@ (801e8f4 <ip4_input+0x27c>)
 801e88c:	695b      	ldr	r3, [r3, #20]
 801e88e:	69b9      	ldr	r1, [r7, #24]
 801e890:	4618      	mov	r0, r3
 801e892:	f000 f90b 	bl	801eaac <ip4_addr_isbroadcast_u32>
 801e896:	4603      	mov	r3, r0
 801e898:	2b00      	cmp	r3, #0
 801e89a:	d10f      	bne.n	801e8bc <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e89c:	4b15      	ldr	r3, [pc, #84]	@ (801e8f4 <ip4_input+0x27c>)
 801e89e:	695b      	ldr	r3, [r3, #20]
 801e8a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801e8a4:	2be0      	cmp	r3, #224	@ 0xe0
 801e8a6:	d009      	beq.n	801e8bc <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801e8a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801e8ac:	4619      	mov	r1, r3
 801e8ae:	6878      	ldr	r0, [r7, #4]
 801e8b0:	f7f5 fcc7 	bl	8014242 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801e8b4:	2102      	movs	r1, #2
 801e8b6:	6878      	ldr	r0, [r7, #4]
 801e8b8:	f7ff fdb0 	bl	801e41c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801e8bc:	6878      	ldr	r0, [r7, #4]
 801e8be:	f7f5 fcd3 	bl	8014268 <pbuf_free>
        break;
 801e8c2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801e8c4:	4b0b      	ldr	r3, [pc, #44]	@ (801e8f4 <ip4_input+0x27c>)
 801e8c6:	2200      	movs	r2, #0
 801e8c8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801e8ca:	4b0a      	ldr	r3, [pc, #40]	@ (801e8f4 <ip4_input+0x27c>)
 801e8cc:	2200      	movs	r2, #0
 801e8ce:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801e8d0:	4b08      	ldr	r3, [pc, #32]	@ (801e8f4 <ip4_input+0x27c>)
 801e8d2:	2200      	movs	r2, #0
 801e8d4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801e8d6:	4b07      	ldr	r3, [pc, #28]	@ (801e8f4 <ip4_input+0x27c>)
 801e8d8:	2200      	movs	r2, #0
 801e8da:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801e8dc:	4b05      	ldr	r3, [pc, #20]	@ (801e8f4 <ip4_input+0x27c>)
 801e8de:	2200      	movs	r2, #0
 801e8e0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801e8e2:	4b04      	ldr	r3, [pc, #16]	@ (801e8f4 <ip4_input+0x27c>)
 801e8e4:	2200      	movs	r2, #0
 801e8e6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801e8e8:	2300      	movs	r3, #0
}
 801e8ea:	4618      	mov	r0, r3
 801e8ec:	3720      	adds	r7, #32
 801e8ee:	46bd      	mov	sp, r7
 801e8f0:	bd80      	pop	{r7, pc}
 801e8f2:	bf00      	nop
 801e8f4:	240099dc 	.word	0x240099dc
 801e8f8:	2400caf0 	.word	0x2400caf0

0801e8fc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801e8fc:	b580      	push	{r7, lr}
 801e8fe:	b08a      	sub	sp, #40	@ 0x28
 801e900:	af04      	add	r7, sp, #16
 801e902:	60f8      	str	r0, [r7, #12]
 801e904:	60b9      	str	r1, [r7, #8]
 801e906:	607a      	str	r2, [r7, #4]
 801e908:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801e90a:	68bb      	ldr	r3, [r7, #8]
 801e90c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801e90e:	687b      	ldr	r3, [r7, #4]
 801e910:	2b00      	cmp	r3, #0
 801e912:	d009      	beq.n	801e928 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801e914:	68bb      	ldr	r3, [r7, #8]
 801e916:	2b00      	cmp	r3, #0
 801e918:	d003      	beq.n	801e922 <ip4_output_if+0x26>
 801e91a:	68bb      	ldr	r3, [r7, #8]
 801e91c:	681b      	ldr	r3, [r3, #0]
 801e91e:	2b00      	cmp	r3, #0
 801e920:	d102      	bne.n	801e928 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801e922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e924:	3304      	adds	r3, #4
 801e926:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801e928:	78fa      	ldrb	r2, [r7, #3]
 801e92a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e92c:	9302      	str	r3, [sp, #8]
 801e92e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801e932:	9301      	str	r3, [sp, #4]
 801e934:	f897 3020 	ldrb.w	r3, [r7, #32]
 801e938:	9300      	str	r3, [sp, #0]
 801e93a:	4613      	mov	r3, r2
 801e93c:	687a      	ldr	r2, [r7, #4]
 801e93e:	6979      	ldr	r1, [r7, #20]
 801e940:	68f8      	ldr	r0, [r7, #12]
 801e942:	f000 f805 	bl	801e950 <ip4_output_if_src>
 801e946:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801e948:	4618      	mov	r0, r3
 801e94a:	3718      	adds	r7, #24
 801e94c:	46bd      	mov	sp, r7
 801e94e:	bd80      	pop	{r7, pc}

0801e950 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801e950:	b580      	push	{r7, lr}
 801e952:	b088      	sub	sp, #32
 801e954:	af00      	add	r7, sp, #0
 801e956:	60f8      	str	r0, [r7, #12]
 801e958:	60b9      	str	r1, [r7, #8]
 801e95a:	607a      	str	r2, [r7, #4]
 801e95c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801e95e:	68fb      	ldr	r3, [r7, #12]
 801e960:	7b9b      	ldrb	r3, [r3, #14]
 801e962:	2b01      	cmp	r3, #1
 801e964:	d006      	beq.n	801e974 <ip4_output_if_src+0x24>
 801e966:	4b4b      	ldr	r3, [pc, #300]	@ (801ea94 <ip4_output_if_src+0x144>)
 801e968:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801e96c:	494a      	ldr	r1, [pc, #296]	@ (801ea98 <ip4_output_if_src+0x148>)
 801e96e:	484b      	ldr	r0, [pc, #300]	@ (801ea9c <ip4_output_if_src+0x14c>)
 801e970:	f002 f808 	bl	8020984 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801e974:	687b      	ldr	r3, [r7, #4]
 801e976:	2b00      	cmp	r3, #0
 801e978:	d060      	beq.n	801ea3c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801e97a:	2314      	movs	r3, #20
 801e97c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801e97e:	2114      	movs	r1, #20
 801e980:	68f8      	ldr	r0, [r7, #12]
 801e982:	f7f5 fbdb 	bl	801413c <pbuf_add_header>
 801e986:	4603      	mov	r3, r0
 801e988:	2b00      	cmp	r3, #0
 801e98a:	d002      	beq.n	801e992 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801e98c:	f06f 0301 	mvn.w	r3, #1
 801e990:	e07c      	b.n	801ea8c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801e992:	68fb      	ldr	r3, [r7, #12]
 801e994:	685b      	ldr	r3, [r3, #4]
 801e996:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801e998:	68fb      	ldr	r3, [r7, #12]
 801e99a:	895b      	ldrh	r3, [r3, #10]
 801e99c:	2b13      	cmp	r3, #19
 801e99e:	d806      	bhi.n	801e9ae <ip4_output_if_src+0x5e>
 801e9a0:	4b3c      	ldr	r3, [pc, #240]	@ (801ea94 <ip4_output_if_src+0x144>)
 801e9a2:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801e9a6:	493e      	ldr	r1, [pc, #248]	@ (801eaa0 <ip4_output_if_src+0x150>)
 801e9a8:	483c      	ldr	r0, [pc, #240]	@ (801ea9c <ip4_output_if_src+0x14c>)
 801e9aa:	f001 ffeb 	bl	8020984 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801e9ae:	69fb      	ldr	r3, [r7, #28]
 801e9b0:	78fa      	ldrb	r2, [r7, #3]
 801e9b2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801e9b4:	69fb      	ldr	r3, [r7, #28]
 801e9b6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801e9ba:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801e9bc:	687b      	ldr	r3, [r7, #4]
 801e9be:	681a      	ldr	r2, [r3, #0]
 801e9c0:	69fb      	ldr	r3, [r7, #28]
 801e9c2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801e9c4:	8b7b      	ldrh	r3, [r7, #26]
 801e9c6:	089b      	lsrs	r3, r3, #2
 801e9c8:	b29b      	uxth	r3, r3
 801e9ca:	b2db      	uxtb	r3, r3
 801e9cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e9d0:	b2da      	uxtb	r2, r3
 801e9d2:	69fb      	ldr	r3, [r7, #28]
 801e9d4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801e9d6:	69fb      	ldr	r3, [r7, #28]
 801e9d8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801e9dc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801e9de:	68fb      	ldr	r3, [r7, #12]
 801e9e0:	891b      	ldrh	r3, [r3, #8]
 801e9e2:	4618      	mov	r0, r3
 801e9e4:	f7f3 ff8a 	bl	80128fc <lwip_htons>
 801e9e8:	4603      	mov	r3, r0
 801e9ea:	461a      	mov	r2, r3
 801e9ec:	69fb      	ldr	r3, [r7, #28]
 801e9ee:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801e9f0:	69fb      	ldr	r3, [r7, #28]
 801e9f2:	2200      	movs	r2, #0
 801e9f4:	719a      	strb	r2, [r3, #6]
 801e9f6:	2200      	movs	r2, #0
 801e9f8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801e9fa:	4b2a      	ldr	r3, [pc, #168]	@ (801eaa4 <ip4_output_if_src+0x154>)
 801e9fc:	881b      	ldrh	r3, [r3, #0]
 801e9fe:	4618      	mov	r0, r3
 801ea00:	f7f3 ff7c 	bl	80128fc <lwip_htons>
 801ea04:	4603      	mov	r3, r0
 801ea06:	461a      	mov	r2, r3
 801ea08:	69fb      	ldr	r3, [r7, #28]
 801ea0a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801ea0c:	4b25      	ldr	r3, [pc, #148]	@ (801eaa4 <ip4_output_if_src+0x154>)
 801ea0e:	881b      	ldrh	r3, [r3, #0]
 801ea10:	3301      	adds	r3, #1
 801ea12:	b29a      	uxth	r2, r3
 801ea14:	4b23      	ldr	r3, [pc, #140]	@ (801eaa4 <ip4_output_if_src+0x154>)
 801ea16:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801ea18:	68bb      	ldr	r3, [r7, #8]
 801ea1a:	2b00      	cmp	r3, #0
 801ea1c:	d104      	bne.n	801ea28 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801ea1e:	4b22      	ldr	r3, [pc, #136]	@ (801eaa8 <ip4_output_if_src+0x158>)
 801ea20:	681a      	ldr	r2, [r3, #0]
 801ea22:	69fb      	ldr	r3, [r7, #28]
 801ea24:	60da      	str	r2, [r3, #12]
 801ea26:	e003      	b.n	801ea30 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801ea28:	68bb      	ldr	r3, [r7, #8]
 801ea2a:	681a      	ldr	r2, [r3, #0]
 801ea2c:	69fb      	ldr	r3, [r7, #28]
 801ea2e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801ea30:	69fb      	ldr	r3, [r7, #28]
 801ea32:	2200      	movs	r2, #0
 801ea34:	729a      	strb	r2, [r3, #10]
 801ea36:	2200      	movs	r2, #0
 801ea38:	72da      	strb	r2, [r3, #11]
 801ea3a:	e00f      	b.n	801ea5c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801ea3c:	68fb      	ldr	r3, [r7, #12]
 801ea3e:	895b      	ldrh	r3, [r3, #10]
 801ea40:	2b13      	cmp	r3, #19
 801ea42:	d802      	bhi.n	801ea4a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801ea44:	f06f 0301 	mvn.w	r3, #1
 801ea48:	e020      	b.n	801ea8c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801ea4a:	68fb      	ldr	r3, [r7, #12]
 801ea4c:	685b      	ldr	r3, [r3, #4]
 801ea4e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801ea50:	69fb      	ldr	r3, [r7, #28]
 801ea52:	691b      	ldr	r3, [r3, #16]
 801ea54:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801ea56:	f107 0314 	add.w	r3, r7, #20
 801ea5a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801ea5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ea5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801ea60:	2b00      	cmp	r3, #0
 801ea62:	d00c      	beq.n	801ea7e <ip4_output_if_src+0x12e>
 801ea64:	68fb      	ldr	r3, [r7, #12]
 801ea66:	891a      	ldrh	r2, [r3, #8]
 801ea68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ea6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801ea6c:	429a      	cmp	r2, r3
 801ea6e:	d906      	bls.n	801ea7e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801ea70:	687a      	ldr	r2, [r7, #4]
 801ea72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801ea74:	68f8      	ldr	r0, [r7, #12]
 801ea76:	f000 fe7d 	bl	801f774 <ip4_frag>
 801ea7a:	4603      	mov	r3, r0
 801ea7c:	e006      	b.n	801ea8c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801ea7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ea80:	695b      	ldr	r3, [r3, #20]
 801ea82:	687a      	ldr	r2, [r7, #4]
 801ea84:	68f9      	ldr	r1, [r7, #12]
 801ea86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801ea88:	4798      	blx	r3
 801ea8a:	4603      	mov	r3, r0
}
 801ea8c:	4618      	mov	r0, r3
 801ea8e:	3720      	adds	r7, #32
 801ea90:	46bd      	mov	sp, r7
 801ea92:	bd80      	pop	{r7, pc}
 801ea94:	08026880 	.word	0x08026880
 801ea98:	080268b4 	.word	0x080268b4
 801ea9c:	080268c0 	.word	0x080268c0
 801eaa0:	080268e8 	.word	0x080268e8
 801eaa4:	2400cc82 	.word	0x2400cc82
 801eaa8:	08026e5c 	.word	0x08026e5c

0801eaac <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801eaac:	b480      	push	{r7}
 801eaae:	b085      	sub	sp, #20
 801eab0:	af00      	add	r7, sp, #0
 801eab2:	6078      	str	r0, [r7, #4]
 801eab4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801eab6:	687b      	ldr	r3, [r7, #4]
 801eab8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801eaba:	687b      	ldr	r3, [r7, #4]
 801eabc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801eac0:	d002      	beq.n	801eac8 <ip4_addr_isbroadcast_u32+0x1c>
 801eac2:	687b      	ldr	r3, [r7, #4]
 801eac4:	2b00      	cmp	r3, #0
 801eac6:	d101      	bne.n	801eacc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801eac8:	2301      	movs	r3, #1
 801eaca:	e02a      	b.n	801eb22 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801eacc:	683b      	ldr	r3, [r7, #0]
 801eace:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801ead2:	f003 0302 	and.w	r3, r3, #2
 801ead6:	2b00      	cmp	r3, #0
 801ead8:	d101      	bne.n	801eade <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801eada:	2300      	movs	r3, #0
 801eadc:	e021      	b.n	801eb22 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801eade:	683b      	ldr	r3, [r7, #0]
 801eae0:	3304      	adds	r3, #4
 801eae2:	681b      	ldr	r3, [r3, #0]
 801eae4:	687a      	ldr	r2, [r7, #4]
 801eae6:	429a      	cmp	r2, r3
 801eae8:	d101      	bne.n	801eaee <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801eaea:	2300      	movs	r3, #0
 801eaec:	e019      	b.n	801eb22 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801eaee:	68fa      	ldr	r2, [r7, #12]
 801eaf0:	683b      	ldr	r3, [r7, #0]
 801eaf2:	3304      	adds	r3, #4
 801eaf4:	681b      	ldr	r3, [r3, #0]
 801eaf6:	405a      	eors	r2, r3
 801eaf8:	683b      	ldr	r3, [r7, #0]
 801eafa:	3308      	adds	r3, #8
 801eafc:	681b      	ldr	r3, [r3, #0]
 801eafe:	4013      	ands	r3, r2
 801eb00:	2b00      	cmp	r3, #0
 801eb02:	d10d      	bne.n	801eb20 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801eb04:	683b      	ldr	r3, [r7, #0]
 801eb06:	3308      	adds	r3, #8
 801eb08:	681b      	ldr	r3, [r3, #0]
 801eb0a:	43da      	mvns	r2, r3
 801eb0c:	687b      	ldr	r3, [r7, #4]
 801eb0e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801eb10:	683b      	ldr	r3, [r7, #0]
 801eb12:	3308      	adds	r3, #8
 801eb14:	681b      	ldr	r3, [r3, #0]
 801eb16:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801eb18:	429a      	cmp	r2, r3
 801eb1a:	d101      	bne.n	801eb20 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801eb1c:	2301      	movs	r3, #1
 801eb1e:	e000      	b.n	801eb22 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801eb20:	2300      	movs	r3, #0
  }
}
 801eb22:	4618      	mov	r0, r3
 801eb24:	3714      	adds	r7, #20
 801eb26:	46bd      	mov	sp, r7
 801eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb2c:	4770      	bx	lr
	...

0801eb30 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801eb30:	b580      	push	{r7, lr}
 801eb32:	b08a      	sub	sp, #40	@ 0x28
 801eb34:	af00      	add	r7, sp, #0
 801eb36:	6078      	str	r0, [r7, #4]
 801eb38:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801eb3a:	f107 030c 	add.w	r3, r7, #12
 801eb3e:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801eb40:	687b      	ldr	r3, [r7, #4]
 801eb42:	781b      	ldrb	r3, [r3, #0]
 801eb44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801eb48:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801eb4c:	3301      	adds	r3, #1
 801eb4e:	4a89      	ldr	r2, [pc, #548]	@ (801ed74 <ip4addr_aton+0x244>)
 801eb50:	4413      	add	r3, r2
 801eb52:	781b      	ldrb	r3, [r3, #0]
 801eb54:	f003 0304 	and.w	r3, r3, #4
 801eb58:	2b00      	cmp	r3, #0
 801eb5a:	d101      	bne.n	801eb60 <ip4addr_aton+0x30>
      return 0;
 801eb5c:	2300      	movs	r3, #0
 801eb5e:	e105      	b.n	801ed6c <ip4addr_aton+0x23c>
    }
    val = 0;
 801eb60:	2300      	movs	r3, #0
 801eb62:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 801eb64:	230a      	movs	r3, #10
 801eb66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 801eb6a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801eb6e:	2b30      	cmp	r3, #48	@ 0x30
 801eb70:	d11c      	bne.n	801ebac <ip4addr_aton+0x7c>
      c = *++cp;
 801eb72:	687b      	ldr	r3, [r7, #4]
 801eb74:	3301      	adds	r3, #1
 801eb76:	607b      	str	r3, [r7, #4]
 801eb78:	687b      	ldr	r3, [r7, #4]
 801eb7a:	781b      	ldrb	r3, [r3, #0]
 801eb7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 801eb80:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801eb84:	2b78      	cmp	r3, #120	@ 0x78
 801eb86:	d003      	beq.n	801eb90 <ip4addr_aton+0x60>
 801eb88:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801eb8c:	2b58      	cmp	r3, #88	@ 0x58
 801eb8e:	d10a      	bne.n	801eba6 <ip4addr_aton+0x76>
        base = 16;
 801eb90:	2310      	movs	r3, #16
 801eb92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 801eb96:	687b      	ldr	r3, [r7, #4]
 801eb98:	3301      	adds	r3, #1
 801eb9a:	607b      	str	r3, [r7, #4]
 801eb9c:	687b      	ldr	r3, [r7, #4]
 801eb9e:	781b      	ldrb	r3, [r3, #0]
 801eba0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801eba4:	e002      	b.n	801ebac <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801eba6:	2308      	movs	r3, #8
 801eba8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801ebac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ebb0:	3301      	adds	r3, #1
 801ebb2:	4a70      	ldr	r2, [pc, #448]	@ (801ed74 <ip4addr_aton+0x244>)
 801ebb4:	4413      	add	r3, r2
 801ebb6:	781b      	ldrb	r3, [r3, #0]
 801ebb8:	f003 0304 	and.w	r3, r3, #4
 801ebbc:	2b00      	cmp	r3, #0
 801ebbe:	d011      	beq.n	801ebe4 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801ebc0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801ebc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ebc6:	fb03 f202 	mul.w	r2, r3, r2
 801ebca:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ebce:	4413      	add	r3, r2
 801ebd0:	3b30      	subs	r3, #48	@ 0x30
 801ebd2:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801ebd4:	687b      	ldr	r3, [r7, #4]
 801ebd6:	3301      	adds	r3, #1
 801ebd8:	607b      	str	r3, [r7, #4]
 801ebda:	687b      	ldr	r3, [r7, #4]
 801ebdc:	781b      	ldrb	r3, [r3, #0]
 801ebde:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801ebe2:	e7e3      	b.n	801ebac <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801ebe4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801ebe8:	2b10      	cmp	r3, #16
 801ebea:	d127      	bne.n	801ec3c <ip4addr_aton+0x10c>
 801ebec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ebf0:	3301      	adds	r3, #1
 801ebf2:	4a60      	ldr	r2, [pc, #384]	@ (801ed74 <ip4addr_aton+0x244>)
 801ebf4:	4413      	add	r3, r2
 801ebf6:	781b      	ldrb	r3, [r3, #0]
 801ebf8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801ebfc:	2b00      	cmp	r3, #0
 801ebfe:	d01d      	beq.n	801ec3c <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801ec00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec02:	011b      	lsls	r3, r3, #4
 801ec04:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801ec08:	f102 010a 	add.w	r1, r2, #10
 801ec0c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801ec10:	3201      	adds	r2, #1
 801ec12:	4858      	ldr	r0, [pc, #352]	@ (801ed74 <ip4addr_aton+0x244>)
 801ec14:	4402      	add	r2, r0
 801ec16:	7812      	ldrb	r2, [r2, #0]
 801ec18:	f002 0203 	and.w	r2, r2, #3
 801ec1c:	2a02      	cmp	r2, #2
 801ec1e:	d101      	bne.n	801ec24 <ip4addr_aton+0xf4>
 801ec20:	2261      	movs	r2, #97	@ 0x61
 801ec22:	e000      	b.n	801ec26 <ip4addr_aton+0xf6>
 801ec24:	2241      	movs	r2, #65	@ 0x41
 801ec26:	1a8a      	subs	r2, r1, r2
 801ec28:	4313      	orrs	r3, r2
 801ec2a:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801ec2c:	687b      	ldr	r3, [r7, #4]
 801ec2e:	3301      	adds	r3, #1
 801ec30:	607b      	str	r3, [r7, #4]
 801ec32:	687b      	ldr	r3, [r7, #4]
 801ec34:	781b      	ldrb	r3, [r3, #0]
 801ec36:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 801ec3a:	e7b7      	b.n	801ebac <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801ec3c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ec40:	2b2e      	cmp	r3, #46	@ 0x2e
 801ec42:	d114      	bne.n	801ec6e <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801ec44:	f107 030c 	add.w	r3, r7, #12
 801ec48:	330c      	adds	r3, #12
 801ec4a:	69fa      	ldr	r2, [r7, #28]
 801ec4c:	429a      	cmp	r2, r3
 801ec4e:	d301      	bcc.n	801ec54 <ip4addr_aton+0x124>
        return 0;
 801ec50:	2300      	movs	r3, #0
 801ec52:	e08b      	b.n	801ed6c <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801ec54:	69fb      	ldr	r3, [r7, #28]
 801ec56:	1d1a      	adds	r2, r3, #4
 801ec58:	61fa      	str	r2, [r7, #28]
 801ec5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ec5c:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801ec5e:	687b      	ldr	r3, [r7, #4]
 801ec60:	3301      	adds	r3, #1
 801ec62:	607b      	str	r3, [r7, #4]
 801ec64:	687b      	ldr	r3, [r7, #4]
 801ec66:	781b      	ldrb	r3, [r3, #0]
 801ec68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 801ec6c:	e76c      	b.n	801eb48 <ip4addr_aton+0x18>
    } else {
      break;
 801ec6e:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801ec70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ec74:	2b00      	cmp	r3, #0
 801ec76:	d00b      	beq.n	801ec90 <ip4addr_aton+0x160>
 801ec78:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ec7c:	3301      	adds	r3, #1
 801ec7e:	4a3d      	ldr	r2, [pc, #244]	@ (801ed74 <ip4addr_aton+0x244>)
 801ec80:	4413      	add	r3, r2
 801ec82:	781b      	ldrb	r3, [r3, #0]
 801ec84:	f003 0308 	and.w	r3, r3, #8
 801ec88:	2b00      	cmp	r3, #0
 801ec8a:	d101      	bne.n	801ec90 <ip4addr_aton+0x160>
    return 0;
 801ec8c:	2300      	movs	r3, #0
 801ec8e:	e06d      	b.n	801ed6c <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801ec90:	f107 030c 	add.w	r3, r7, #12
 801ec94:	69fa      	ldr	r2, [r7, #28]
 801ec96:	1ad3      	subs	r3, r2, r3
 801ec98:	109b      	asrs	r3, r3, #2
 801ec9a:	3301      	adds	r3, #1
 801ec9c:	2b04      	cmp	r3, #4
 801ec9e:	d853      	bhi.n	801ed48 <ip4addr_aton+0x218>
 801eca0:	a201      	add	r2, pc, #4	@ (adr r2, 801eca8 <ip4addr_aton+0x178>)
 801eca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eca6:	bf00      	nop
 801eca8:	0801ecbd 	.word	0x0801ecbd
 801ecac:	0801ed57 	.word	0x0801ed57
 801ecb0:	0801ecc1 	.word	0x0801ecc1
 801ecb4:	0801ece3 	.word	0x0801ece3
 801ecb8:	0801ed11 	.word	0x0801ed11

    case 0:
      return 0;       /* initial nondigit */
 801ecbc:	2300      	movs	r3, #0
 801ecbe:	e055      	b.n	801ed6c <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801ecc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ecc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ecc6:	d301      	bcc.n	801eccc <ip4addr_aton+0x19c>
        return 0;
 801ecc8:	2300      	movs	r3, #0
 801ecca:	e04f      	b.n	801ed6c <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801eccc:	68fb      	ldr	r3, [r7, #12]
 801ecce:	2bff      	cmp	r3, #255	@ 0xff
 801ecd0:	d901      	bls.n	801ecd6 <ip4addr_aton+0x1a6>
        return 0;
 801ecd2:	2300      	movs	r3, #0
 801ecd4:	e04a      	b.n	801ed6c <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801ecd6:	68fb      	ldr	r3, [r7, #12]
 801ecd8:	061b      	lsls	r3, r3, #24
 801ecda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ecdc:	4313      	orrs	r3, r2
 801ecde:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801ece0:	e03a      	b.n	801ed58 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801ece2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ece4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ece8:	d301      	bcc.n	801ecee <ip4addr_aton+0x1be>
        return 0;
 801ecea:	2300      	movs	r3, #0
 801ecec:	e03e      	b.n	801ed6c <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801ecee:	68fb      	ldr	r3, [r7, #12]
 801ecf0:	2bff      	cmp	r3, #255	@ 0xff
 801ecf2:	d802      	bhi.n	801ecfa <ip4addr_aton+0x1ca>
 801ecf4:	693b      	ldr	r3, [r7, #16]
 801ecf6:	2bff      	cmp	r3, #255	@ 0xff
 801ecf8:	d901      	bls.n	801ecfe <ip4addr_aton+0x1ce>
        return 0;
 801ecfa:	2300      	movs	r3, #0
 801ecfc:	e036      	b.n	801ed6c <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801ecfe:	68fb      	ldr	r3, [r7, #12]
 801ed00:	061a      	lsls	r2, r3, #24
 801ed02:	693b      	ldr	r3, [r7, #16]
 801ed04:	041b      	lsls	r3, r3, #16
 801ed06:	4313      	orrs	r3, r2
 801ed08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ed0a:	4313      	orrs	r3, r2
 801ed0c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801ed0e:	e023      	b.n	801ed58 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801ed10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed12:	2bff      	cmp	r3, #255	@ 0xff
 801ed14:	d901      	bls.n	801ed1a <ip4addr_aton+0x1ea>
        return 0;
 801ed16:	2300      	movs	r3, #0
 801ed18:	e028      	b.n	801ed6c <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801ed1a:	68fb      	ldr	r3, [r7, #12]
 801ed1c:	2bff      	cmp	r3, #255	@ 0xff
 801ed1e:	d805      	bhi.n	801ed2c <ip4addr_aton+0x1fc>
 801ed20:	693b      	ldr	r3, [r7, #16]
 801ed22:	2bff      	cmp	r3, #255	@ 0xff
 801ed24:	d802      	bhi.n	801ed2c <ip4addr_aton+0x1fc>
 801ed26:	697b      	ldr	r3, [r7, #20]
 801ed28:	2bff      	cmp	r3, #255	@ 0xff
 801ed2a:	d901      	bls.n	801ed30 <ip4addr_aton+0x200>
        return 0;
 801ed2c:	2300      	movs	r3, #0
 801ed2e:	e01d      	b.n	801ed6c <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801ed30:	68fb      	ldr	r3, [r7, #12]
 801ed32:	061a      	lsls	r2, r3, #24
 801ed34:	693b      	ldr	r3, [r7, #16]
 801ed36:	041b      	lsls	r3, r3, #16
 801ed38:	431a      	orrs	r2, r3
 801ed3a:	697b      	ldr	r3, [r7, #20]
 801ed3c:	021b      	lsls	r3, r3, #8
 801ed3e:	4313      	orrs	r3, r2
 801ed40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ed42:	4313      	orrs	r3, r2
 801ed44:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801ed46:	e007      	b.n	801ed58 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801ed48:	4b0b      	ldr	r3, [pc, #44]	@ (801ed78 <ip4addr_aton+0x248>)
 801ed4a:	22f9      	movs	r2, #249	@ 0xf9
 801ed4c:	490b      	ldr	r1, [pc, #44]	@ (801ed7c <ip4addr_aton+0x24c>)
 801ed4e:	480c      	ldr	r0, [pc, #48]	@ (801ed80 <ip4addr_aton+0x250>)
 801ed50:	f001 fe18 	bl	8020984 <iprintf>
      break;
 801ed54:	e000      	b.n	801ed58 <ip4addr_aton+0x228>
      break;
 801ed56:	bf00      	nop
  }
  if (addr) {
 801ed58:	683b      	ldr	r3, [r7, #0]
 801ed5a:	2b00      	cmp	r3, #0
 801ed5c:	d005      	beq.n	801ed6a <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801ed5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ed60:	f7f3 fde1 	bl	8012926 <lwip_htonl>
 801ed64:	4602      	mov	r2, r0
 801ed66:	683b      	ldr	r3, [r7, #0]
 801ed68:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801ed6a:	2301      	movs	r3, #1
}
 801ed6c:	4618      	mov	r0, r3
 801ed6e:	3728      	adds	r7, #40	@ 0x28
 801ed70:	46bd      	mov	sp, r7
 801ed72:	bd80      	pop	{r7, pc}
 801ed74:	08026ee1 	.word	0x08026ee1
 801ed78:	08026918 	.word	0x08026918
 801ed7c:	08026954 	.word	0x08026954
 801ed80:	08026960 	.word	0x08026960

0801ed84 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801ed84:	b580      	push	{r7, lr}
 801ed86:	b084      	sub	sp, #16
 801ed88:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801ed8a:	2300      	movs	r3, #0
 801ed8c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801ed8e:	4b12      	ldr	r3, [pc, #72]	@ (801edd8 <ip_reass_tmr+0x54>)
 801ed90:	681b      	ldr	r3, [r3, #0]
 801ed92:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801ed94:	e018      	b.n	801edc8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801ed96:	68fb      	ldr	r3, [r7, #12]
 801ed98:	7fdb      	ldrb	r3, [r3, #31]
 801ed9a:	2b00      	cmp	r3, #0
 801ed9c:	d00b      	beq.n	801edb6 <ip_reass_tmr+0x32>
      r->timer--;
 801ed9e:	68fb      	ldr	r3, [r7, #12]
 801eda0:	7fdb      	ldrb	r3, [r3, #31]
 801eda2:	3b01      	subs	r3, #1
 801eda4:	b2da      	uxtb	r2, r3
 801eda6:	68fb      	ldr	r3, [r7, #12]
 801eda8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801edaa:	68fb      	ldr	r3, [r7, #12]
 801edac:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801edae:	68fb      	ldr	r3, [r7, #12]
 801edb0:	681b      	ldr	r3, [r3, #0]
 801edb2:	60fb      	str	r3, [r7, #12]
 801edb4:	e008      	b.n	801edc8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801edb6:	68fb      	ldr	r3, [r7, #12]
 801edb8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801edba:	68fb      	ldr	r3, [r7, #12]
 801edbc:	681b      	ldr	r3, [r3, #0]
 801edbe:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801edc0:	68b9      	ldr	r1, [r7, #8]
 801edc2:	6878      	ldr	r0, [r7, #4]
 801edc4:	f000 f80a 	bl	801eddc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801edc8:	68fb      	ldr	r3, [r7, #12]
 801edca:	2b00      	cmp	r3, #0
 801edcc:	d1e3      	bne.n	801ed96 <ip_reass_tmr+0x12>
    }
  }
}
 801edce:	bf00      	nop
 801edd0:	bf00      	nop
 801edd2:	3710      	adds	r7, #16
 801edd4:	46bd      	mov	sp, r7
 801edd6:	bd80      	pop	{r7, pc}
 801edd8:	2400cc84 	.word	0x2400cc84

0801eddc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801eddc:	b580      	push	{r7, lr}
 801edde:	b088      	sub	sp, #32
 801ede0:	af00      	add	r7, sp, #0
 801ede2:	6078      	str	r0, [r7, #4]
 801ede4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801ede6:	2300      	movs	r3, #0
 801ede8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801edea:	683a      	ldr	r2, [r7, #0]
 801edec:	687b      	ldr	r3, [r7, #4]
 801edee:	429a      	cmp	r2, r3
 801edf0:	d105      	bne.n	801edfe <ip_reass_free_complete_datagram+0x22>
 801edf2:	4b45      	ldr	r3, [pc, #276]	@ (801ef08 <ip_reass_free_complete_datagram+0x12c>)
 801edf4:	22ab      	movs	r2, #171	@ 0xab
 801edf6:	4945      	ldr	r1, [pc, #276]	@ (801ef0c <ip_reass_free_complete_datagram+0x130>)
 801edf8:	4845      	ldr	r0, [pc, #276]	@ (801ef10 <ip_reass_free_complete_datagram+0x134>)
 801edfa:	f001 fdc3 	bl	8020984 <iprintf>
  if (prev != NULL) {
 801edfe:	683b      	ldr	r3, [r7, #0]
 801ee00:	2b00      	cmp	r3, #0
 801ee02:	d00a      	beq.n	801ee1a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801ee04:	683b      	ldr	r3, [r7, #0]
 801ee06:	681b      	ldr	r3, [r3, #0]
 801ee08:	687a      	ldr	r2, [r7, #4]
 801ee0a:	429a      	cmp	r2, r3
 801ee0c:	d005      	beq.n	801ee1a <ip_reass_free_complete_datagram+0x3e>
 801ee0e:	4b3e      	ldr	r3, [pc, #248]	@ (801ef08 <ip_reass_free_complete_datagram+0x12c>)
 801ee10:	22ad      	movs	r2, #173	@ 0xad
 801ee12:	4940      	ldr	r1, [pc, #256]	@ (801ef14 <ip_reass_free_complete_datagram+0x138>)
 801ee14:	483e      	ldr	r0, [pc, #248]	@ (801ef10 <ip_reass_free_complete_datagram+0x134>)
 801ee16:	f001 fdb5 	bl	8020984 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801ee1a:	687b      	ldr	r3, [r7, #4]
 801ee1c:	685b      	ldr	r3, [r3, #4]
 801ee1e:	685b      	ldr	r3, [r3, #4]
 801ee20:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801ee22:	697b      	ldr	r3, [r7, #20]
 801ee24:	889b      	ldrh	r3, [r3, #4]
 801ee26:	b29b      	uxth	r3, r3
 801ee28:	2b00      	cmp	r3, #0
 801ee2a:	d12a      	bne.n	801ee82 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801ee2c:	687b      	ldr	r3, [r7, #4]
 801ee2e:	685b      	ldr	r3, [r3, #4]
 801ee30:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801ee32:	697b      	ldr	r3, [r7, #20]
 801ee34:	681a      	ldr	r2, [r3, #0]
 801ee36:	687b      	ldr	r3, [r7, #4]
 801ee38:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801ee3a:	69bb      	ldr	r3, [r7, #24]
 801ee3c:	6858      	ldr	r0, [r3, #4]
 801ee3e:	687b      	ldr	r3, [r7, #4]
 801ee40:	3308      	adds	r3, #8
 801ee42:	2214      	movs	r2, #20
 801ee44:	4619      	mov	r1, r3
 801ee46:	f002 f812 	bl	8020e6e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801ee4a:	2101      	movs	r1, #1
 801ee4c:	69b8      	ldr	r0, [r7, #24]
 801ee4e:	f7ff faf5 	bl	801e43c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801ee52:	69b8      	ldr	r0, [r7, #24]
 801ee54:	f7f5 fa96 	bl	8014384 <pbuf_clen>
 801ee58:	4603      	mov	r3, r0
 801ee5a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ee5c:	8bfa      	ldrh	r2, [r7, #30]
 801ee5e:	8a7b      	ldrh	r3, [r7, #18]
 801ee60:	4413      	add	r3, r2
 801ee62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ee66:	db05      	blt.n	801ee74 <ip_reass_free_complete_datagram+0x98>
 801ee68:	4b27      	ldr	r3, [pc, #156]	@ (801ef08 <ip_reass_free_complete_datagram+0x12c>)
 801ee6a:	22bc      	movs	r2, #188	@ 0xbc
 801ee6c:	492a      	ldr	r1, [pc, #168]	@ (801ef18 <ip_reass_free_complete_datagram+0x13c>)
 801ee6e:	4828      	ldr	r0, [pc, #160]	@ (801ef10 <ip_reass_free_complete_datagram+0x134>)
 801ee70:	f001 fd88 	bl	8020984 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ee74:	8bfa      	ldrh	r2, [r7, #30]
 801ee76:	8a7b      	ldrh	r3, [r7, #18]
 801ee78:	4413      	add	r3, r2
 801ee7a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801ee7c:	69b8      	ldr	r0, [r7, #24]
 801ee7e:	f7f5 f9f3 	bl	8014268 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801ee82:	687b      	ldr	r3, [r7, #4]
 801ee84:	685b      	ldr	r3, [r3, #4]
 801ee86:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801ee88:	e01f      	b.n	801eeca <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801ee8a:	69bb      	ldr	r3, [r7, #24]
 801ee8c:	685b      	ldr	r3, [r3, #4]
 801ee8e:	617b      	str	r3, [r7, #20]
    pcur = p;
 801ee90:	69bb      	ldr	r3, [r7, #24]
 801ee92:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801ee94:	697b      	ldr	r3, [r7, #20]
 801ee96:	681b      	ldr	r3, [r3, #0]
 801ee98:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801ee9a:	68f8      	ldr	r0, [r7, #12]
 801ee9c:	f7f5 fa72 	bl	8014384 <pbuf_clen>
 801eea0:	4603      	mov	r3, r0
 801eea2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801eea4:	8bfa      	ldrh	r2, [r7, #30]
 801eea6:	8a7b      	ldrh	r3, [r7, #18]
 801eea8:	4413      	add	r3, r2
 801eeaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801eeae:	db05      	blt.n	801eebc <ip_reass_free_complete_datagram+0xe0>
 801eeb0:	4b15      	ldr	r3, [pc, #84]	@ (801ef08 <ip_reass_free_complete_datagram+0x12c>)
 801eeb2:	22cc      	movs	r2, #204	@ 0xcc
 801eeb4:	4918      	ldr	r1, [pc, #96]	@ (801ef18 <ip_reass_free_complete_datagram+0x13c>)
 801eeb6:	4816      	ldr	r0, [pc, #88]	@ (801ef10 <ip_reass_free_complete_datagram+0x134>)
 801eeb8:	f001 fd64 	bl	8020984 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801eebc:	8bfa      	ldrh	r2, [r7, #30]
 801eebe:	8a7b      	ldrh	r3, [r7, #18]
 801eec0:	4413      	add	r3, r2
 801eec2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801eec4:	68f8      	ldr	r0, [r7, #12]
 801eec6:	f7f5 f9cf 	bl	8014268 <pbuf_free>
  while (p != NULL) {
 801eeca:	69bb      	ldr	r3, [r7, #24]
 801eecc:	2b00      	cmp	r3, #0
 801eece:	d1dc      	bne.n	801ee8a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801eed0:	6839      	ldr	r1, [r7, #0]
 801eed2:	6878      	ldr	r0, [r7, #4]
 801eed4:	f000 f8c2 	bl	801f05c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801eed8:	4b10      	ldr	r3, [pc, #64]	@ (801ef1c <ip_reass_free_complete_datagram+0x140>)
 801eeda:	881b      	ldrh	r3, [r3, #0]
 801eedc:	8bfa      	ldrh	r2, [r7, #30]
 801eede:	429a      	cmp	r2, r3
 801eee0:	d905      	bls.n	801eeee <ip_reass_free_complete_datagram+0x112>
 801eee2:	4b09      	ldr	r3, [pc, #36]	@ (801ef08 <ip_reass_free_complete_datagram+0x12c>)
 801eee4:	22d2      	movs	r2, #210	@ 0xd2
 801eee6:	490e      	ldr	r1, [pc, #56]	@ (801ef20 <ip_reass_free_complete_datagram+0x144>)
 801eee8:	4809      	ldr	r0, [pc, #36]	@ (801ef10 <ip_reass_free_complete_datagram+0x134>)
 801eeea:	f001 fd4b 	bl	8020984 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801eeee:	4b0b      	ldr	r3, [pc, #44]	@ (801ef1c <ip_reass_free_complete_datagram+0x140>)
 801eef0:	881a      	ldrh	r2, [r3, #0]
 801eef2:	8bfb      	ldrh	r3, [r7, #30]
 801eef4:	1ad3      	subs	r3, r2, r3
 801eef6:	b29a      	uxth	r2, r3
 801eef8:	4b08      	ldr	r3, [pc, #32]	@ (801ef1c <ip_reass_free_complete_datagram+0x140>)
 801eefa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801eefc:	8bfb      	ldrh	r3, [r7, #30]
}
 801eefe:	4618      	mov	r0, r3
 801ef00:	3720      	adds	r7, #32
 801ef02:	46bd      	mov	sp, r7
 801ef04:	bd80      	pop	{r7, pc}
 801ef06:	bf00      	nop
 801ef08:	08026988 	.word	0x08026988
 801ef0c:	080269c4 	.word	0x080269c4
 801ef10:	080269d0 	.word	0x080269d0
 801ef14:	080269f8 	.word	0x080269f8
 801ef18:	08026a0c 	.word	0x08026a0c
 801ef1c:	2400cc88 	.word	0x2400cc88
 801ef20:	08026a2c 	.word	0x08026a2c

0801ef24 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801ef24:	b580      	push	{r7, lr}
 801ef26:	b08a      	sub	sp, #40	@ 0x28
 801ef28:	af00      	add	r7, sp, #0
 801ef2a:	6078      	str	r0, [r7, #4]
 801ef2c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801ef2e:	2300      	movs	r3, #0
 801ef30:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801ef32:	2300      	movs	r3, #0
 801ef34:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801ef36:	2300      	movs	r3, #0
 801ef38:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801ef3a:	2300      	movs	r3, #0
 801ef3c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801ef3e:	2300      	movs	r3, #0
 801ef40:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801ef42:	4b28      	ldr	r3, [pc, #160]	@ (801efe4 <ip_reass_remove_oldest_datagram+0xc0>)
 801ef44:	681b      	ldr	r3, [r3, #0]
 801ef46:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801ef48:	e030      	b.n	801efac <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801ef4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef4c:	695a      	ldr	r2, [r3, #20]
 801ef4e:	687b      	ldr	r3, [r7, #4]
 801ef50:	68db      	ldr	r3, [r3, #12]
 801ef52:	429a      	cmp	r2, r3
 801ef54:	d10c      	bne.n	801ef70 <ip_reass_remove_oldest_datagram+0x4c>
 801ef56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef58:	699a      	ldr	r2, [r3, #24]
 801ef5a:	687b      	ldr	r3, [r7, #4]
 801ef5c:	691b      	ldr	r3, [r3, #16]
 801ef5e:	429a      	cmp	r2, r3
 801ef60:	d106      	bne.n	801ef70 <ip_reass_remove_oldest_datagram+0x4c>
 801ef62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef64:	899a      	ldrh	r2, [r3, #12]
 801ef66:	687b      	ldr	r3, [r7, #4]
 801ef68:	889b      	ldrh	r3, [r3, #4]
 801ef6a:	b29b      	uxth	r3, r3
 801ef6c:	429a      	cmp	r2, r3
 801ef6e:	d014      	beq.n	801ef9a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801ef70:	693b      	ldr	r3, [r7, #16]
 801ef72:	3301      	adds	r3, #1
 801ef74:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801ef76:	6a3b      	ldr	r3, [r7, #32]
 801ef78:	2b00      	cmp	r3, #0
 801ef7a:	d104      	bne.n	801ef86 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801ef7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef7e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ef80:	69fb      	ldr	r3, [r7, #28]
 801ef82:	61bb      	str	r3, [r7, #24]
 801ef84:	e009      	b.n	801ef9a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801ef86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef88:	7fda      	ldrb	r2, [r3, #31]
 801ef8a:	6a3b      	ldr	r3, [r7, #32]
 801ef8c:	7fdb      	ldrb	r3, [r3, #31]
 801ef8e:	429a      	cmp	r2, r3
 801ef90:	d803      	bhi.n	801ef9a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801ef92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef94:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ef96:	69fb      	ldr	r3, [r7, #28]
 801ef98:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801ef9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef9c:	681b      	ldr	r3, [r3, #0]
 801ef9e:	2b00      	cmp	r3, #0
 801efa0:	d001      	beq.n	801efa6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801efa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801efa4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801efa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801efa8:	681b      	ldr	r3, [r3, #0]
 801efaa:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801efac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801efae:	2b00      	cmp	r3, #0
 801efb0:	d1cb      	bne.n	801ef4a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801efb2:	6a3b      	ldr	r3, [r7, #32]
 801efb4:	2b00      	cmp	r3, #0
 801efb6:	d008      	beq.n	801efca <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801efb8:	69b9      	ldr	r1, [r7, #24]
 801efba:	6a38      	ldr	r0, [r7, #32]
 801efbc:	f7ff ff0e 	bl	801eddc <ip_reass_free_complete_datagram>
 801efc0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801efc2:	697a      	ldr	r2, [r7, #20]
 801efc4:	68fb      	ldr	r3, [r7, #12]
 801efc6:	4413      	add	r3, r2
 801efc8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801efca:	697a      	ldr	r2, [r7, #20]
 801efcc:	683b      	ldr	r3, [r7, #0]
 801efce:	429a      	cmp	r2, r3
 801efd0:	da02      	bge.n	801efd8 <ip_reass_remove_oldest_datagram+0xb4>
 801efd2:	693b      	ldr	r3, [r7, #16]
 801efd4:	2b01      	cmp	r3, #1
 801efd6:	dcac      	bgt.n	801ef32 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801efd8:	697b      	ldr	r3, [r7, #20]
}
 801efda:	4618      	mov	r0, r3
 801efdc:	3728      	adds	r7, #40	@ 0x28
 801efde:	46bd      	mov	sp, r7
 801efe0:	bd80      	pop	{r7, pc}
 801efe2:	bf00      	nop
 801efe4:	2400cc84 	.word	0x2400cc84

0801efe8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801efe8:	b580      	push	{r7, lr}
 801efea:	b084      	sub	sp, #16
 801efec:	af00      	add	r7, sp, #0
 801efee:	6078      	str	r0, [r7, #4]
 801eff0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801eff2:	2004      	movs	r0, #4
 801eff4:	f7f4 fa12 	bl	801341c <memp_malloc>
 801eff8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801effa:	68fb      	ldr	r3, [r7, #12]
 801effc:	2b00      	cmp	r3, #0
 801effe:	d110      	bne.n	801f022 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801f000:	6839      	ldr	r1, [r7, #0]
 801f002:	6878      	ldr	r0, [r7, #4]
 801f004:	f7ff ff8e 	bl	801ef24 <ip_reass_remove_oldest_datagram>
 801f008:	4602      	mov	r2, r0
 801f00a:	683b      	ldr	r3, [r7, #0]
 801f00c:	4293      	cmp	r3, r2
 801f00e:	dc03      	bgt.n	801f018 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801f010:	2004      	movs	r0, #4
 801f012:	f7f4 fa03 	bl	801341c <memp_malloc>
 801f016:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801f018:	68fb      	ldr	r3, [r7, #12]
 801f01a:	2b00      	cmp	r3, #0
 801f01c:	d101      	bne.n	801f022 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801f01e:	2300      	movs	r3, #0
 801f020:	e016      	b.n	801f050 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801f022:	2220      	movs	r2, #32
 801f024:	2100      	movs	r1, #0
 801f026:	68f8      	ldr	r0, [r7, #12]
 801f028:	f001 fe52 	bl	8020cd0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801f02c:	68fb      	ldr	r3, [r7, #12]
 801f02e:	220f      	movs	r2, #15
 801f030:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801f032:	4b09      	ldr	r3, [pc, #36]	@ (801f058 <ip_reass_enqueue_new_datagram+0x70>)
 801f034:	681a      	ldr	r2, [r3, #0]
 801f036:	68fb      	ldr	r3, [r7, #12]
 801f038:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801f03a:	4a07      	ldr	r2, [pc, #28]	@ (801f058 <ip_reass_enqueue_new_datagram+0x70>)
 801f03c:	68fb      	ldr	r3, [r7, #12]
 801f03e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801f040:	68fb      	ldr	r3, [r7, #12]
 801f042:	3308      	adds	r3, #8
 801f044:	2214      	movs	r2, #20
 801f046:	6879      	ldr	r1, [r7, #4]
 801f048:	4618      	mov	r0, r3
 801f04a:	f001 ff10 	bl	8020e6e <memcpy>
  return ipr;
 801f04e:	68fb      	ldr	r3, [r7, #12]
}
 801f050:	4618      	mov	r0, r3
 801f052:	3710      	adds	r7, #16
 801f054:	46bd      	mov	sp, r7
 801f056:	bd80      	pop	{r7, pc}
 801f058:	2400cc84 	.word	0x2400cc84

0801f05c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801f05c:	b580      	push	{r7, lr}
 801f05e:	b082      	sub	sp, #8
 801f060:	af00      	add	r7, sp, #0
 801f062:	6078      	str	r0, [r7, #4]
 801f064:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801f066:	4b10      	ldr	r3, [pc, #64]	@ (801f0a8 <ip_reass_dequeue_datagram+0x4c>)
 801f068:	681b      	ldr	r3, [r3, #0]
 801f06a:	687a      	ldr	r2, [r7, #4]
 801f06c:	429a      	cmp	r2, r3
 801f06e:	d104      	bne.n	801f07a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801f070:	687b      	ldr	r3, [r7, #4]
 801f072:	681b      	ldr	r3, [r3, #0]
 801f074:	4a0c      	ldr	r2, [pc, #48]	@ (801f0a8 <ip_reass_dequeue_datagram+0x4c>)
 801f076:	6013      	str	r3, [r2, #0]
 801f078:	e00d      	b.n	801f096 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801f07a:	683b      	ldr	r3, [r7, #0]
 801f07c:	2b00      	cmp	r3, #0
 801f07e:	d106      	bne.n	801f08e <ip_reass_dequeue_datagram+0x32>
 801f080:	4b0a      	ldr	r3, [pc, #40]	@ (801f0ac <ip_reass_dequeue_datagram+0x50>)
 801f082:	f240 1245 	movw	r2, #325	@ 0x145
 801f086:	490a      	ldr	r1, [pc, #40]	@ (801f0b0 <ip_reass_dequeue_datagram+0x54>)
 801f088:	480a      	ldr	r0, [pc, #40]	@ (801f0b4 <ip_reass_dequeue_datagram+0x58>)
 801f08a:	f001 fc7b 	bl	8020984 <iprintf>
    prev->next = ipr->next;
 801f08e:	687b      	ldr	r3, [r7, #4]
 801f090:	681a      	ldr	r2, [r3, #0]
 801f092:	683b      	ldr	r3, [r7, #0]
 801f094:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801f096:	6879      	ldr	r1, [r7, #4]
 801f098:	2004      	movs	r0, #4
 801f09a:	f7f4 fa35 	bl	8013508 <memp_free>
}
 801f09e:	bf00      	nop
 801f0a0:	3708      	adds	r7, #8
 801f0a2:	46bd      	mov	sp, r7
 801f0a4:	bd80      	pop	{r7, pc}
 801f0a6:	bf00      	nop
 801f0a8:	2400cc84 	.word	0x2400cc84
 801f0ac:	08026988 	.word	0x08026988
 801f0b0:	08026a50 	.word	0x08026a50
 801f0b4:	080269d0 	.word	0x080269d0

0801f0b8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801f0b8:	b580      	push	{r7, lr}
 801f0ba:	b08c      	sub	sp, #48	@ 0x30
 801f0bc:	af00      	add	r7, sp, #0
 801f0be:	60f8      	str	r0, [r7, #12]
 801f0c0:	60b9      	str	r1, [r7, #8]
 801f0c2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801f0c4:	2300      	movs	r3, #0
 801f0c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801f0c8:	2301      	movs	r3, #1
 801f0ca:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801f0cc:	68bb      	ldr	r3, [r7, #8]
 801f0ce:	685b      	ldr	r3, [r3, #4]
 801f0d0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801f0d2:	69fb      	ldr	r3, [r7, #28]
 801f0d4:	885b      	ldrh	r3, [r3, #2]
 801f0d6:	b29b      	uxth	r3, r3
 801f0d8:	4618      	mov	r0, r3
 801f0da:	f7f3 fc0f 	bl	80128fc <lwip_htons>
 801f0de:	4603      	mov	r3, r0
 801f0e0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801f0e2:	69fb      	ldr	r3, [r7, #28]
 801f0e4:	781b      	ldrb	r3, [r3, #0]
 801f0e6:	f003 030f 	and.w	r3, r3, #15
 801f0ea:	b2db      	uxtb	r3, r3
 801f0ec:	009b      	lsls	r3, r3, #2
 801f0ee:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801f0f0:	7e7b      	ldrb	r3, [r7, #25]
 801f0f2:	b29b      	uxth	r3, r3
 801f0f4:	8b7a      	ldrh	r2, [r7, #26]
 801f0f6:	429a      	cmp	r2, r3
 801f0f8:	d202      	bcs.n	801f100 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f0fa:	f04f 33ff 	mov.w	r3, #4294967295
 801f0fe:	e135      	b.n	801f36c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801f100:	7e7b      	ldrb	r3, [r7, #25]
 801f102:	b29b      	uxth	r3, r3
 801f104:	8b7a      	ldrh	r2, [r7, #26]
 801f106:	1ad3      	subs	r3, r2, r3
 801f108:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801f10a:	69fb      	ldr	r3, [r7, #28]
 801f10c:	88db      	ldrh	r3, [r3, #6]
 801f10e:	b29b      	uxth	r3, r3
 801f110:	4618      	mov	r0, r3
 801f112:	f7f3 fbf3 	bl	80128fc <lwip_htons>
 801f116:	4603      	mov	r3, r0
 801f118:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f11c:	b29b      	uxth	r3, r3
 801f11e:	00db      	lsls	r3, r3, #3
 801f120:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801f122:	68bb      	ldr	r3, [r7, #8]
 801f124:	685b      	ldr	r3, [r3, #4]
 801f126:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801f128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f12a:	2200      	movs	r2, #0
 801f12c:	701a      	strb	r2, [r3, #0]
 801f12e:	2200      	movs	r2, #0
 801f130:	705a      	strb	r2, [r3, #1]
 801f132:	2200      	movs	r2, #0
 801f134:	709a      	strb	r2, [r3, #2]
 801f136:	2200      	movs	r2, #0
 801f138:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801f13a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f13c:	8afa      	ldrh	r2, [r7, #22]
 801f13e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801f140:	8afa      	ldrh	r2, [r7, #22]
 801f142:	8b7b      	ldrh	r3, [r7, #26]
 801f144:	4413      	add	r3, r2
 801f146:	b29a      	uxth	r2, r3
 801f148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f14a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801f14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f14e:	88db      	ldrh	r3, [r3, #6]
 801f150:	b29b      	uxth	r3, r3
 801f152:	8afa      	ldrh	r2, [r7, #22]
 801f154:	429a      	cmp	r2, r3
 801f156:	d902      	bls.n	801f15e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f158:	f04f 33ff 	mov.w	r3, #4294967295
 801f15c:	e106      	b.n	801f36c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801f15e:	68fb      	ldr	r3, [r7, #12]
 801f160:	685b      	ldr	r3, [r3, #4]
 801f162:	627b      	str	r3, [r7, #36]	@ 0x24
 801f164:	e068      	b.n	801f238 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801f166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f168:	685b      	ldr	r3, [r3, #4]
 801f16a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801f16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f16e:	889b      	ldrh	r3, [r3, #4]
 801f170:	b29a      	uxth	r2, r3
 801f172:	693b      	ldr	r3, [r7, #16]
 801f174:	889b      	ldrh	r3, [r3, #4]
 801f176:	b29b      	uxth	r3, r3
 801f178:	429a      	cmp	r2, r3
 801f17a:	d235      	bcs.n	801f1e8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801f17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f17e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f180:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801f182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f184:	2b00      	cmp	r3, #0
 801f186:	d020      	beq.n	801f1ca <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801f188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f18a:	889b      	ldrh	r3, [r3, #4]
 801f18c:	b29a      	uxth	r2, r3
 801f18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f190:	88db      	ldrh	r3, [r3, #6]
 801f192:	b29b      	uxth	r3, r3
 801f194:	429a      	cmp	r2, r3
 801f196:	d307      	bcc.n	801f1a8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801f198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f19a:	88db      	ldrh	r3, [r3, #6]
 801f19c:	b29a      	uxth	r2, r3
 801f19e:	693b      	ldr	r3, [r7, #16]
 801f1a0:	889b      	ldrh	r3, [r3, #4]
 801f1a2:	b29b      	uxth	r3, r3
 801f1a4:	429a      	cmp	r2, r3
 801f1a6:	d902      	bls.n	801f1ae <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f1a8:	f04f 33ff 	mov.w	r3, #4294967295
 801f1ac:	e0de      	b.n	801f36c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801f1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f1b0:	68ba      	ldr	r2, [r7, #8]
 801f1b2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801f1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f1b6:	88db      	ldrh	r3, [r3, #6]
 801f1b8:	b29a      	uxth	r2, r3
 801f1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f1bc:	889b      	ldrh	r3, [r3, #4]
 801f1be:	b29b      	uxth	r3, r3
 801f1c0:	429a      	cmp	r2, r3
 801f1c2:	d03d      	beq.n	801f240 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801f1c4:	2300      	movs	r3, #0
 801f1c6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801f1c8:	e03a      	b.n	801f240 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801f1ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f1cc:	88db      	ldrh	r3, [r3, #6]
 801f1ce:	b29a      	uxth	r2, r3
 801f1d0:	693b      	ldr	r3, [r7, #16]
 801f1d2:	889b      	ldrh	r3, [r3, #4]
 801f1d4:	b29b      	uxth	r3, r3
 801f1d6:	429a      	cmp	r2, r3
 801f1d8:	d902      	bls.n	801f1e0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f1da:	f04f 33ff 	mov.w	r3, #4294967295
 801f1de:	e0c5      	b.n	801f36c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801f1e0:	68fb      	ldr	r3, [r7, #12]
 801f1e2:	68ba      	ldr	r2, [r7, #8]
 801f1e4:	605a      	str	r2, [r3, #4]
      break;
 801f1e6:	e02b      	b.n	801f240 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801f1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f1ea:	889b      	ldrh	r3, [r3, #4]
 801f1ec:	b29a      	uxth	r2, r3
 801f1ee:	693b      	ldr	r3, [r7, #16]
 801f1f0:	889b      	ldrh	r3, [r3, #4]
 801f1f2:	b29b      	uxth	r3, r3
 801f1f4:	429a      	cmp	r2, r3
 801f1f6:	d102      	bne.n	801f1fe <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f1f8:	f04f 33ff 	mov.w	r3, #4294967295
 801f1fc:	e0b6      	b.n	801f36c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801f1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f200:	889b      	ldrh	r3, [r3, #4]
 801f202:	b29a      	uxth	r2, r3
 801f204:	693b      	ldr	r3, [r7, #16]
 801f206:	88db      	ldrh	r3, [r3, #6]
 801f208:	b29b      	uxth	r3, r3
 801f20a:	429a      	cmp	r2, r3
 801f20c:	d202      	bcs.n	801f214 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f20e:	f04f 33ff 	mov.w	r3, #4294967295
 801f212:	e0ab      	b.n	801f36c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801f214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f216:	2b00      	cmp	r3, #0
 801f218:	d009      	beq.n	801f22e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801f21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f21c:	88db      	ldrh	r3, [r3, #6]
 801f21e:	b29a      	uxth	r2, r3
 801f220:	693b      	ldr	r3, [r7, #16]
 801f222:	889b      	ldrh	r3, [r3, #4]
 801f224:	b29b      	uxth	r3, r3
 801f226:	429a      	cmp	r2, r3
 801f228:	d001      	beq.n	801f22e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801f22a:	2300      	movs	r3, #0
 801f22c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801f22e:	693b      	ldr	r3, [r7, #16]
 801f230:	681b      	ldr	r3, [r3, #0]
 801f232:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801f234:	693b      	ldr	r3, [r7, #16]
 801f236:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801f238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f23a:	2b00      	cmp	r3, #0
 801f23c:	d193      	bne.n	801f166 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801f23e:	e000      	b.n	801f242 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801f240:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801f242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f244:	2b00      	cmp	r3, #0
 801f246:	d12d      	bne.n	801f2a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801f248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f24a:	2b00      	cmp	r3, #0
 801f24c:	d01c      	beq.n	801f288 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801f24e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f250:	88db      	ldrh	r3, [r3, #6]
 801f252:	b29a      	uxth	r2, r3
 801f254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f256:	889b      	ldrh	r3, [r3, #4]
 801f258:	b29b      	uxth	r3, r3
 801f25a:	429a      	cmp	r2, r3
 801f25c:	d906      	bls.n	801f26c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801f25e:	4b45      	ldr	r3, [pc, #276]	@ (801f374 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f260:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801f264:	4944      	ldr	r1, [pc, #272]	@ (801f378 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801f266:	4845      	ldr	r0, [pc, #276]	@ (801f37c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f268:	f001 fb8c 	bl	8020984 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801f26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f26e:	68ba      	ldr	r2, [r7, #8]
 801f270:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801f272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f274:	88db      	ldrh	r3, [r3, #6]
 801f276:	b29a      	uxth	r2, r3
 801f278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f27a:	889b      	ldrh	r3, [r3, #4]
 801f27c:	b29b      	uxth	r3, r3
 801f27e:	429a      	cmp	r2, r3
 801f280:	d010      	beq.n	801f2a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801f282:	2300      	movs	r3, #0
 801f284:	623b      	str	r3, [r7, #32]
 801f286:	e00d      	b.n	801f2a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801f288:	68fb      	ldr	r3, [r7, #12]
 801f28a:	685b      	ldr	r3, [r3, #4]
 801f28c:	2b00      	cmp	r3, #0
 801f28e:	d006      	beq.n	801f29e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801f290:	4b38      	ldr	r3, [pc, #224]	@ (801f374 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f292:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801f296:	493a      	ldr	r1, [pc, #232]	@ (801f380 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801f298:	4838      	ldr	r0, [pc, #224]	@ (801f37c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f29a:	f001 fb73 	bl	8020984 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801f29e:	68fb      	ldr	r3, [r7, #12]
 801f2a0:	68ba      	ldr	r2, [r7, #8]
 801f2a2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801f2a4:	687b      	ldr	r3, [r7, #4]
 801f2a6:	2b00      	cmp	r3, #0
 801f2a8:	d105      	bne.n	801f2b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801f2aa:	68fb      	ldr	r3, [r7, #12]
 801f2ac:	7f9b      	ldrb	r3, [r3, #30]
 801f2ae:	f003 0301 	and.w	r3, r3, #1
 801f2b2:	2b00      	cmp	r3, #0
 801f2b4:	d059      	beq.n	801f36a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801f2b6:	6a3b      	ldr	r3, [r7, #32]
 801f2b8:	2b00      	cmp	r3, #0
 801f2ba:	d04f      	beq.n	801f35c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801f2bc:	68fb      	ldr	r3, [r7, #12]
 801f2be:	685b      	ldr	r3, [r3, #4]
 801f2c0:	2b00      	cmp	r3, #0
 801f2c2:	d006      	beq.n	801f2d2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801f2c4:	68fb      	ldr	r3, [r7, #12]
 801f2c6:	685b      	ldr	r3, [r3, #4]
 801f2c8:	685b      	ldr	r3, [r3, #4]
 801f2ca:	889b      	ldrh	r3, [r3, #4]
 801f2cc:	b29b      	uxth	r3, r3
 801f2ce:	2b00      	cmp	r3, #0
 801f2d0:	d002      	beq.n	801f2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801f2d2:	2300      	movs	r3, #0
 801f2d4:	623b      	str	r3, [r7, #32]
 801f2d6:	e041      	b.n	801f35c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801f2d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f2da:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801f2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f2de:	681b      	ldr	r3, [r3, #0]
 801f2e0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801f2e2:	e012      	b.n	801f30a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801f2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f2e6:	685b      	ldr	r3, [r3, #4]
 801f2e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801f2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f2ec:	88db      	ldrh	r3, [r3, #6]
 801f2ee:	b29a      	uxth	r2, r3
 801f2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f2f2:	889b      	ldrh	r3, [r3, #4]
 801f2f4:	b29b      	uxth	r3, r3
 801f2f6:	429a      	cmp	r2, r3
 801f2f8:	d002      	beq.n	801f300 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801f2fa:	2300      	movs	r3, #0
 801f2fc:	623b      	str	r3, [r7, #32]
            break;
 801f2fe:	e007      	b.n	801f310 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801f300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f302:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801f304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f306:	681b      	ldr	r3, [r3, #0]
 801f308:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801f30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f30c:	2b00      	cmp	r3, #0
 801f30e:	d1e9      	bne.n	801f2e4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801f310:	6a3b      	ldr	r3, [r7, #32]
 801f312:	2b00      	cmp	r3, #0
 801f314:	d022      	beq.n	801f35c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801f316:	68fb      	ldr	r3, [r7, #12]
 801f318:	685b      	ldr	r3, [r3, #4]
 801f31a:	2b00      	cmp	r3, #0
 801f31c:	d106      	bne.n	801f32c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801f31e:	4b15      	ldr	r3, [pc, #84]	@ (801f374 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f320:	f240 12df 	movw	r2, #479	@ 0x1df
 801f324:	4917      	ldr	r1, [pc, #92]	@ (801f384 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801f326:	4815      	ldr	r0, [pc, #84]	@ (801f37c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f328:	f001 fb2c 	bl	8020984 <iprintf>
          LWIP_ASSERT("sanity check",
 801f32c:	68fb      	ldr	r3, [r7, #12]
 801f32e:	685b      	ldr	r3, [r3, #4]
 801f330:	685b      	ldr	r3, [r3, #4]
 801f332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f334:	429a      	cmp	r2, r3
 801f336:	d106      	bne.n	801f346 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801f338:	4b0e      	ldr	r3, [pc, #56]	@ (801f374 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f33a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801f33e:	4911      	ldr	r1, [pc, #68]	@ (801f384 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801f340:	480e      	ldr	r0, [pc, #56]	@ (801f37c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f342:	f001 fb1f 	bl	8020984 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801f346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f348:	681b      	ldr	r3, [r3, #0]
 801f34a:	2b00      	cmp	r3, #0
 801f34c:	d006      	beq.n	801f35c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801f34e:	4b09      	ldr	r3, [pc, #36]	@ (801f374 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f350:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801f354:	490c      	ldr	r1, [pc, #48]	@ (801f388 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801f356:	4809      	ldr	r0, [pc, #36]	@ (801f37c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f358:	f001 fb14 	bl	8020984 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801f35c:	6a3b      	ldr	r3, [r7, #32]
 801f35e:	2b00      	cmp	r3, #0
 801f360:	bf14      	ite	ne
 801f362:	2301      	movne	r3, #1
 801f364:	2300      	moveq	r3, #0
 801f366:	b2db      	uxtb	r3, r3
 801f368:	e000      	b.n	801f36c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801f36a:	2300      	movs	r3, #0
}
 801f36c:	4618      	mov	r0, r3
 801f36e:	3730      	adds	r7, #48	@ 0x30
 801f370:	46bd      	mov	sp, r7
 801f372:	bd80      	pop	{r7, pc}
 801f374:	08026988 	.word	0x08026988
 801f378:	08026a6c 	.word	0x08026a6c
 801f37c:	080269d0 	.word	0x080269d0
 801f380:	08026a8c 	.word	0x08026a8c
 801f384:	08026ac4 	.word	0x08026ac4
 801f388:	08026ad4 	.word	0x08026ad4

0801f38c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801f38c:	b580      	push	{r7, lr}
 801f38e:	b08e      	sub	sp, #56	@ 0x38
 801f390:	af00      	add	r7, sp, #0
 801f392:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801f394:	687b      	ldr	r3, [r7, #4]
 801f396:	685b      	ldr	r3, [r3, #4]
 801f398:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801f39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f39c:	781b      	ldrb	r3, [r3, #0]
 801f39e:	f003 030f 	and.w	r3, r3, #15
 801f3a2:	b2db      	uxtb	r3, r3
 801f3a4:	009b      	lsls	r3, r3, #2
 801f3a6:	b2db      	uxtb	r3, r3
 801f3a8:	2b14      	cmp	r3, #20
 801f3aa:	f040 8171 	bne.w	801f690 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801f3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3b0:	88db      	ldrh	r3, [r3, #6]
 801f3b2:	b29b      	uxth	r3, r3
 801f3b4:	4618      	mov	r0, r3
 801f3b6:	f7f3 faa1 	bl	80128fc <lwip_htons>
 801f3ba:	4603      	mov	r3, r0
 801f3bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f3c0:	b29b      	uxth	r3, r3
 801f3c2:	00db      	lsls	r3, r3, #3
 801f3c4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801f3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3c8:	885b      	ldrh	r3, [r3, #2]
 801f3ca:	b29b      	uxth	r3, r3
 801f3cc:	4618      	mov	r0, r3
 801f3ce:	f7f3 fa95 	bl	80128fc <lwip_htons>
 801f3d2:	4603      	mov	r3, r0
 801f3d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801f3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3d8:	781b      	ldrb	r3, [r3, #0]
 801f3da:	f003 030f 	and.w	r3, r3, #15
 801f3de:	b2db      	uxtb	r3, r3
 801f3e0:	009b      	lsls	r3, r3, #2
 801f3e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801f3e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801f3ea:	b29b      	uxth	r3, r3
 801f3ec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801f3ee:	429a      	cmp	r2, r3
 801f3f0:	f0c0 8150 	bcc.w	801f694 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801f3f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801f3f8:	b29b      	uxth	r3, r3
 801f3fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801f3fc:	1ad3      	subs	r3, r2, r3
 801f3fe:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801f400:	6878      	ldr	r0, [r7, #4]
 801f402:	f7f4 ffbf 	bl	8014384 <pbuf_clen>
 801f406:	4603      	mov	r3, r0
 801f408:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801f40a:	4b8c      	ldr	r3, [pc, #560]	@ (801f63c <ip4_reass+0x2b0>)
 801f40c:	881b      	ldrh	r3, [r3, #0]
 801f40e:	461a      	mov	r2, r3
 801f410:	8c3b      	ldrh	r3, [r7, #32]
 801f412:	4413      	add	r3, r2
 801f414:	2b0a      	cmp	r3, #10
 801f416:	dd10      	ble.n	801f43a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801f418:	8c3b      	ldrh	r3, [r7, #32]
 801f41a:	4619      	mov	r1, r3
 801f41c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801f41e:	f7ff fd81 	bl	801ef24 <ip_reass_remove_oldest_datagram>
 801f422:	4603      	mov	r3, r0
 801f424:	2b00      	cmp	r3, #0
 801f426:	f000 8137 	beq.w	801f698 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801f42a:	4b84      	ldr	r3, [pc, #528]	@ (801f63c <ip4_reass+0x2b0>)
 801f42c:	881b      	ldrh	r3, [r3, #0]
 801f42e:	461a      	mov	r2, r3
 801f430:	8c3b      	ldrh	r3, [r7, #32]
 801f432:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801f434:	2b0a      	cmp	r3, #10
 801f436:	f300 812f 	bgt.w	801f698 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801f43a:	4b81      	ldr	r3, [pc, #516]	@ (801f640 <ip4_reass+0x2b4>)
 801f43c:	681b      	ldr	r3, [r3, #0]
 801f43e:	633b      	str	r3, [r7, #48]	@ 0x30
 801f440:	e015      	b.n	801f46e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801f442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f444:	695a      	ldr	r2, [r3, #20]
 801f446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f448:	68db      	ldr	r3, [r3, #12]
 801f44a:	429a      	cmp	r2, r3
 801f44c:	d10c      	bne.n	801f468 <ip4_reass+0xdc>
 801f44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f450:	699a      	ldr	r2, [r3, #24]
 801f452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f454:	691b      	ldr	r3, [r3, #16]
 801f456:	429a      	cmp	r2, r3
 801f458:	d106      	bne.n	801f468 <ip4_reass+0xdc>
 801f45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f45c:	899a      	ldrh	r2, [r3, #12]
 801f45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f460:	889b      	ldrh	r3, [r3, #4]
 801f462:	b29b      	uxth	r3, r3
 801f464:	429a      	cmp	r2, r3
 801f466:	d006      	beq.n	801f476 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801f468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f46a:	681b      	ldr	r3, [r3, #0]
 801f46c:	633b      	str	r3, [r7, #48]	@ 0x30
 801f46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f470:	2b00      	cmp	r3, #0
 801f472:	d1e6      	bne.n	801f442 <ip4_reass+0xb6>
 801f474:	e000      	b.n	801f478 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801f476:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801f478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f47a:	2b00      	cmp	r3, #0
 801f47c:	d109      	bne.n	801f492 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801f47e:	8c3b      	ldrh	r3, [r7, #32]
 801f480:	4619      	mov	r1, r3
 801f482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801f484:	f7ff fdb0 	bl	801efe8 <ip_reass_enqueue_new_datagram>
 801f488:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801f48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f48c:	2b00      	cmp	r3, #0
 801f48e:	d11c      	bne.n	801f4ca <ip4_reass+0x13e>
      goto nullreturn;
 801f490:	e105      	b.n	801f69e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801f492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f494:	88db      	ldrh	r3, [r3, #6]
 801f496:	b29b      	uxth	r3, r3
 801f498:	4618      	mov	r0, r3
 801f49a:	f7f3 fa2f 	bl	80128fc <lwip_htons>
 801f49e:	4603      	mov	r3, r0
 801f4a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f4a4:	2b00      	cmp	r3, #0
 801f4a6:	d110      	bne.n	801f4ca <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801f4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f4aa:	89db      	ldrh	r3, [r3, #14]
 801f4ac:	4618      	mov	r0, r3
 801f4ae:	f7f3 fa25 	bl	80128fc <lwip_htons>
 801f4b2:	4603      	mov	r3, r0
 801f4b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801f4b8:	2b00      	cmp	r3, #0
 801f4ba:	d006      	beq.n	801f4ca <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801f4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f4be:	3308      	adds	r3, #8
 801f4c0:	2214      	movs	r2, #20
 801f4c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801f4c4:	4618      	mov	r0, r3
 801f4c6:	f001 fcd2 	bl	8020e6e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801f4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f4cc:	88db      	ldrh	r3, [r3, #6]
 801f4ce:	b29b      	uxth	r3, r3
 801f4d0:	f003 0320 	and.w	r3, r3, #32
 801f4d4:	2b00      	cmp	r3, #0
 801f4d6:	bf0c      	ite	eq
 801f4d8:	2301      	moveq	r3, #1
 801f4da:	2300      	movne	r3, #0
 801f4dc:	b2db      	uxtb	r3, r3
 801f4de:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801f4e0:	69fb      	ldr	r3, [r7, #28]
 801f4e2:	2b00      	cmp	r3, #0
 801f4e4:	d00e      	beq.n	801f504 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801f4e6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801f4e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801f4ea:	4413      	add	r3, r2
 801f4ec:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801f4ee:	8b7a      	ldrh	r2, [r7, #26]
 801f4f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801f4f2:	429a      	cmp	r2, r3
 801f4f4:	f0c0 80a0 	bcc.w	801f638 <ip4_reass+0x2ac>
 801f4f8:	8b7b      	ldrh	r3, [r7, #26]
 801f4fa:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801f4fe:	4293      	cmp	r3, r2
 801f500:	f200 809a 	bhi.w	801f638 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801f504:	69fa      	ldr	r2, [r7, #28]
 801f506:	6879      	ldr	r1, [r7, #4]
 801f508:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f50a:	f7ff fdd5 	bl	801f0b8 <ip_reass_chain_frag_into_datagram_and_validate>
 801f50e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801f510:	697b      	ldr	r3, [r7, #20]
 801f512:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f516:	f000 809b 	beq.w	801f650 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801f51a:	4b48      	ldr	r3, [pc, #288]	@ (801f63c <ip4_reass+0x2b0>)
 801f51c:	881a      	ldrh	r2, [r3, #0]
 801f51e:	8c3b      	ldrh	r3, [r7, #32]
 801f520:	4413      	add	r3, r2
 801f522:	b29a      	uxth	r2, r3
 801f524:	4b45      	ldr	r3, [pc, #276]	@ (801f63c <ip4_reass+0x2b0>)
 801f526:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801f528:	69fb      	ldr	r3, [r7, #28]
 801f52a:	2b00      	cmp	r3, #0
 801f52c:	d00d      	beq.n	801f54a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801f52e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801f530:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801f532:	4413      	add	r3, r2
 801f534:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801f536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f538:	8a7a      	ldrh	r2, [r7, #18]
 801f53a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801f53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f53e:	7f9b      	ldrb	r3, [r3, #30]
 801f540:	f043 0301 	orr.w	r3, r3, #1
 801f544:	b2da      	uxtb	r2, r3
 801f546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f548:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801f54a:	697b      	ldr	r3, [r7, #20]
 801f54c:	2b01      	cmp	r3, #1
 801f54e:	d171      	bne.n	801f634 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801f550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f552:	8b9b      	ldrh	r3, [r3, #28]
 801f554:	3314      	adds	r3, #20
 801f556:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801f558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f55a:	685b      	ldr	r3, [r3, #4]
 801f55c:	685b      	ldr	r3, [r3, #4]
 801f55e:	681b      	ldr	r3, [r3, #0]
 801f560:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801f562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f564:	685b      	ldr	r3, [r3, #4]
 801f566:	685b      	ldr	r3, [r3, #4]
 801f568:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801f56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f56c:	3308      	adds	r3, #8
 801f56e:	2214      	movs	r2, #20
 801f570:	4619      	mov	r1, r3
 801f572:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801f574:	f001 fc7b 	bl	8020e6e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801f578:	8a3b      	ldrh	r3, [r7, #16]
 801f57a:	4618      	mov	r0, r3
 801f57c:	f7f3 f9be 	bl	80128fc <lwip_htons>
 801f580:	4603      	mov	r3, r0
 801f582:	461a      	mov	r2, r3
 801f584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f586:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801f588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f58a:	2200      	movs	r2, #0
 801f58c:	719a      	strb	r2, [r3, #6]
 801f58e:	2200      	movs	r2, #0
 801f590:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801f592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f594:	2200      	movs	r2, #0
 801f596:	729a      	strb	r2, [r3, #10]
 801f598:	2200      	movs	r2, #0
 801f59a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801f59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f59e:	685b      	ldr	r3, [r3, #4]
 801f5a0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801f5a2:	e00d      	b.n	801f5c0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801f5a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f5a6:	685b      	ldr	r3, [r3, #4]
 801f5a8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801f5aa:	2114      	movs	r1, #20
 801f5ac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801f5ae:	f7f4 fdd5 	bl	801415c <pbuf_remove_header>
      pbuf_cat(p, r);
 801f5b2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801f5b4:	6878      	ldr	r0, [r7, #4]
 801f5b6:	f7f4 ff25 	bl	8014404 <pbuf_cat>
      r = iprh->next_pbuf;
 801f5ba:	68fb      	ldr	r3, [r7, #12]
 801f5bc:	681b      	ldr	r3, [r3, #0]
 801f5be:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801f5c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f5c2:	2b00      	cmp	r3, #0
 801f5c4:	d1ee      	bne.n	801f5a4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801f5c6:	4b1e      	ldr	r3, [pc, #120]	@ (801f640 <ip4_reass+0x2b4>)
 801f5c8:	681b      	ldr	r3, [r3, #0]
 801f5ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f5cc:	429a      	cmp	r2, r3
 801f5ce:	d102      	bne.n	801f5d6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801f5d0:	2300      	movs	r3, #0
 801f5d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f5d4:	e010      	b.n	801f5f8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801f5d6:	4b1a      	ldr	r3, [pc, #104]	@ (801f640 <ip4_reass+0x2b4>)
 801f5d8:	681b      	ldr	r3, [r3, #0]
 801f5da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f5dc:	e007      	b.n	801f5ee <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801f5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f5e0:	681b      	ldr	r3, [r3, #0]
 801f5e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f5e4:	429a      	cmp	r2, r3
 801f5e6:	d006      	beq.n	801f5f6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801f5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f5ea:	681b      	ldr	r3, [r3, #0]
 801f5ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f5ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f5f0:	2b00      	cmp	r3, #0
 801f5f2:	d1f4      	bne.n	801f5de <ip4_reass+0x252>
 801f5f4:	e000      	b.n	801f5f8 <ip4_reass+0x26c>
          break;
 801f5f6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801f5f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801f5fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f5fc:	f7ff fd2e 	bl	801f05c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801f600:	6878      	ldr	r0, [r7, #4]
 801f602:	f7f4 febf 	bl	8014384 <pbuf_clen>
 801f606:	4603      	mov	r3, r0
 801f608:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801f60a:	4b0c      	ldr	r3, [pc, #48]	@ (801f63c <ip4_reass+0x2b0>)
 801f60c:	881b      	ldrh	r3, [r3, #0]
 801f60e:	8c3a      	ldrh	r2, [r7, #32]
 801f610:	429a      	cmp	r2, r3
 801f612:	d906      	bls.n	801f622 <ip4_reass+0x296>
 801f614:	4b0b      	ldr	r3, [pc, #44]	@ (801f644 <ip4_reass+0x2b8>)
 801f616:	f240 229b 	movw	r2, #667	@ 0x29b
 801f61a:	490b      	ldr	r1, [pc, #44]	@ (801f648 <ip4_reass+0x2bc>)
 801f61c:	480b      	ldr	r0, [pc, #44]	@ (801f64c <ip4_reass+0x2c0>)
 801f61e:	f001 f9b1 	bl	8020984 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801f622:	4b06      	ldr	r3, [pc, #24]	@ (801f63c <ip4_reass+0x2b0>)
 801f624:	881a      	ldrh	r2, [r3, #0]
 801f626:	8c3b      	ldrh	r3, [r7, #32]
 801f628:	1ad3      	subs	r3, r2, r3
 801f62a:	b29a      	uxth	r2, r3
 801f62c:	4b03      	ldr	r3, [pc, #12]	@ (801f63c <ip4_reass+0x2b0>)
 801f62e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801f630:	687b      	ldr	r3, [r7, #4]
 801f632:	e038      	b.n	801f6a6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801f634:	2300      	movs	r3, #0
 801f636:	e036      	b.n	801f6a6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801f638:	bf00      	nop
 801f63a:	e00a      	b.n	801f652 <ip4_reass+0x2c6>
 801f63c:	2400cc88 	.word	0x2400cc88
 801f640:	2400cc84 	.word	0x2400cc84
 801f644:	08026988 	.word	0x08026988
 801f648:	08026af8 	.word	0x08026af8
 801f64c:	080269d0 	.word	0x080269d0
    goto nullreturn_ipr;
 801f650:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801f652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f654:	2b00      	cmp	r3, #0
 801f656:	d106      	bne.n	801f666 <ip4_reass+0x2da>
 801f658:	4b15      	ldr	r3, [pc, #84]	@ (801f6b0 <ip4_reass+0x324>)
 801f65a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801f65e:	4915      	ldr	r1, [pc, #84]	@ (801f6b4 <ip4_reass+0x328>)
 801f660:	4815      	ldr	r0, [pc, #84]	@ (801f6b8 <ip4_reass+0x32c>)
 801f662:	f001 f98f 	bl	8020984 <iprintf>
  if (ipr->p == NULL) {
 801f666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f668:	685b      	ldr	r3, [r3, #4]
 801f66a:	2b00      	cmp	r3, #0
 801f66c:	d116      	bne.n	801f69c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801f66e:	4b13      	ldr	r3, [pc, #76]	@ (801f6bc <ip4_reass+0x330>)
 801f670:	681b      	ldr	r3, [r3, #0]
 801f672:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f674:	429a      	cmp	r2, r3
 801f676:	d006      	beq.n	801f686 <ip4_reass+0x2fa>
 801f678:	4b0d      	ldr	r3, [pc, #52]	@ (801f6b0 <ip4_reass+0x324>)
 801f67a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801f67e:	4910      	ldr	r1, [pc, #64]	@ (801f6c0 <ip4_reass+0x334>)
 801f680:	480d      	ldr	r0, [pc, #52]	@ (801f6b8 <ip4_reass+0x32c>)
 801f682:	f001 f97f 	bl	8020984 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801f686:	2100      	movs	r1, #0
 801f688:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f68a:	f7ff fce7 	bl	801f05c <ip_reass_dequeue_datagram>
 801f68e:	e006      	b.n	801f69e <ip4_reass+0x312>
    goto nullreturn;
 801f690:	bf00      	nop
 801f692:	e004      	b.n	801f69e <ip4_reass+0x312>
    goto nullreturn;
 801f694:	bf00      	nop
 801f696:	e002      	b.n	801f69e <ip4_reass+0x312>
      goto nullreturn;
 801f698:	bf00      	nop
 801f69a:	e000      	b.n	801f69e <ip4_reass+0x312>
  }

nullreturn:
 801f69c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801f69e:	6878      	ldr	r0, [r7, #4]
 801f6a0:	f7f4 fde2 	bl	8014268 <pbuf_free>
  return NULL;
 801f6a4:	2300      	movs	r3, #0
}
 801f6a6:	4618      	mov	r0, r3
 801f6a8:	3738      	adds	r7, #56	@ 0x38
 801f6aa:	46bd      	mov	sp, r7
 801f6ac:	bd80      	pop	{r7, pc}
 801f6ae:	bf00      	nop
 801f6b0:	08026988 	.word	0x08026988
 801f6b4:	08026b14 	.word	0x08026b14
 801f6b8:	080269d0 	.word	0x080269d0
 801f6bc:	2400cc84 	.word	0x2400cc84
 801f6c0:	08026b20 	.word	0x08026b20

0801f6c4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801f6c4:	b580      	push	{r7, lr}
 801f6c6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801f6c8:	2005      	movs	r0, #5
 801f6ca:	f7f3 fea7 	bl	801341c <memp_malloc>
 801f6ce:	4603      	mov	r3, r0
}
 801f6d0:	4618      	mov	r0, r3
 801f6d2:	bd80      	pop	{r7, pc}

0801f6d4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801f6d4:	b580      	push	{r7, lr}
 801f6d6:	b082      	sub	sp, #8
 801f6d8:	af00      	add	r7, sp, #0
 801f6da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801f6dc:	687b      	ldr	r3, [r7, #4]
 801f6de:	2b00      	cmp	r3, #0
 801f6e0:	d106      	bne.n	801f6f0 <ip_frag_free_pbuf_custom_ref+0x1c>
 801f6e2:	4b07      	ldr	r3, [pc, #28]	@ (801f700 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801f6e4:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801f6e8:	4906      	ldr	r1, [pc, #24]	@ (801f704 <ip_frag_free_pbuf_custom_ref+0x30>)
 801f6ea:	4807      	ldr	r0, [pc, #28]	@ (801f708 <ip_frag_free_pbuf_custom_ref+0x34>)
 801f6ec:	f001 f94a 	bl	8020984 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801f6f0:	6879      	ldr	r1, [r7, #4]
 801f6f2:	2005      	movs	r0, #5
 801f6f4:	f7f3 ff08 	bl	8013508 <memp_free>
}
 801f6f8:	bf00      	nop
 801f6fa:	3708      	adds	r7, #8
 801f6fc:	46bd      	mov	sp, r7
 801f6fe:	bd80      	pop	{r7, pc}
 801f700:	08026988 	.word	0x08026988
 801f704:	08026b40 	.word	0x08026b40
 801f708:	080269d0 	.word	0x080269d0

0801f70c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801f70c:	b580      	push	{r7, lr}
 801f70e:	b084      	sub	sp, #16
 801f710:	af00      	add	r7, sp, #0
 801f712:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801f714:	687b      	ldr	r3, [r7, #4]
 801f716:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801f718:	68fb      	ldr	r3, [r7, #12]
 801f71a:	2b00      	cmp	r3, #0
 801f71c:	d106      	bne.n	801f72c <ipfrag_free_pbuf_custom+0x20>
 801f71e:	4b11      	ldr	r3, [pc, #68]	@ (801f764 <ipfrag_free_pbuf_custom+0x58>)
 801f720:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801f724:	4910      	ldr	r1, [pc, #64]	@ (801f768 <ipfrag_free_pbuf_custom+0x5c>)
 801f726:	4811      	ldr	r0, [pc, #68]	@ (801f76c <ipfrag_free_pbuf_custom+0x60>)
 801f728:	f001 f92c 	bl	8020984 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801f72c:	68fa      	ldr	r2, [r7, #12]
 801f72e:	687b      	ldr	r3, [r7, #4]
 801f730:	429a      	cmp	r2, r3
 801f732:	d006      	beq.n	801f742 <ipfrag_free_pbuf_custom+0x36>
 801f734:	4b0b      	ldr	r3, [pc, #44]	@ (801f764 <ipfrag_free_pbuf_custom+0x58>)
 801f736:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801f73a:	490d      	ldr	r1, [pc, #52]	@ (801f770 <ipfrag_free_pbuf_custom+0x64>)
 801f73c:	480b      	ldr	r0, [pc, #44]	@ (801f76c <ipfrag_free_pbuf_custom+0x60>)
 801f73e:	f001 f921 	bl	8020984 <iprintf>
  if (pcr->original != NULL) {
 801f742:	68fb      	ldr	r3, [r7, #12]
 801f744:	695b      	ldr	r3, [r3, #20]
 801f746:	2b00      	cmp	r3, #0
 801f748:	d004      	beq.n	801f754 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801f74a:	68fb      	ldr	r3, [r7, #12]
 801f74c:	695b      	ldr	r3, [r3, #20]
 801f74e:	4618      	mov	r0, r3
 801f750:	f7f4 fd8a 	bl	8014268 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801f754:	68f8      	ldr	r0, [r7, #12]
 801f756:	f7ff ffbd 	bl	801f6d4 <ip_frag_free_pbuf_custom_ref>
}
 801f75a:	bf00      	nop
 801f75c:	3710      	adds	r7, #16
 801f75e:	46bd      	mov	sp, r7
 801f760:	bd80      	pop	{r7, pc}
 801f762:	bf00      	nop
 801f764:	08026988 	.word	0x08026988
 801f768:	08026b4c 	.word	0x08026b4c
 801f76c:	080269d0 	.word	0x080269d0
 801f770:	08026b58 	.word	0x08026b58

0801f774 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801f774:	b580      	push	{r7, lr}
 801f776:	b094      	sub	sp, #80	@ 0x50
 801f778:	af02      	add	r7, sp, #8
 801f77a:	60f8      	str	r0, [r7, #12]
 801f77c:	60b9      	str	r1, [r7, #8]
 801f77e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801f780:	2300      	movs	r3, #0
 801f782:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801f786:	68bb      	ldr	r3, [r7, #8]
 801f788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801f78a:	3b14      	subs	r3, #20
 801f78c:	2b00      	cmp	r3, #0
 801f78e:	da00      	bge.n	801f792 <ip4_frag+0x1e>
 801f790:	3307      	adds	r3, #7
 801f792:	10db      	asrs	r3, r3, #3
 801f794:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801f796:	2314      	movs	r3, #20
 801f798:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801f79a:	68fb      	ldr	r3, [r7, #12]
 801f79c:	685b      	ldr	r3, [r3, #4]
 801f79e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801f7a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f7a2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801f7a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f7a6:	781b      	ldrb	r3, [r3, #0]
 801f7a8:	f003 030f 	and.w	r3, r3, #15
 801f7ac:	b2db      	uxtb	r3, r3
 801f7ae:	009b      	lsls	r3, r3, #2
 801f7b0:	b2db      	uxtb	r3, r3
 801f7b2:	2b14      	cmp	r3, #20
 801f7b4:	d002      	beq.n	801f7bc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801f7b6:	f06f 0305 	mvn.w	r3, #5
 801f7ba:	e110      	b.n	801f9de <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801f7bc:	68fb      	ldr	r3, [r7, #12]
 801f7be:	895b      	ldrh	r3, [r3, #10]
 801f7c0:	2b13      	cmp	r3, #19
 801f7c2:	d809      	bhi.n	801f7d8 <ip4_frag+0x64>
 801f7c4:	4b88      	ldr	r3, [pc, #544]	@ (801f9e8 <ip4_frag+0x274>)
 801f7c6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801f7ca:	4988      	ldr	r1, [pc, #544]	@ (801f9ec <ip4_frag+0x278>)
 801f7cc:	4888      	ldr	r0, [pc, #544]	@ (801f9f0 <ip4_frag+0x27c>)
 801f7ce:	f001 f8d9 	bl	8020984 <iprintf>
 801f7d2:	f06f 0305 	mvn.w	r3, #5
 801f7d6:	e102      	b.n	801f9de <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801f7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f7da:	88db      	ldrh	r3, [r3, #6]
 801f7dc:	b29b      	uxth	r3, r3
 801f7de:	4618      	mov	r0, r3
 801f7e0:	f7f3 f88c 	bl	80128fc <lwip_htons>
 801f7e4:	4603      	mov	r3, r0
 801f7e6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801f7e8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f7ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f7ee:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801f7f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f7f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801f7f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801f7fa:	68fb      	ldr	r3, [r7, #12]
 801f7fc:	891b      	ldrh	r3, [r3, #8]
 801f7fe:	3b14      	subs	r3, #20
 801f800:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801f804:	e0e1      	b.n	801f9ca <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801f806:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801f808:	00db      	lsls	r3, r3, #3
 801f80a:	b29b      	uxth	r3, r3
 801f80c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f810:	4293      	cmp	r3, r2
 801f812:	bf28      	it	cs
 801f814:	4613      	movcs	r3, r2
 801f816:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801f818:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801f81c:	2114      	movs	r1, #20
 801f81e:	200e      	movs	r0, #14
 801f820:	f7f4 fa3e 	bl	8013ca0 <pbuf_alloc>
 801f824:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801f826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f828:	2b00      	cmp	r3, #0
 801f82a:	f000 80d5 	beq.w	801f9d8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801f82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f830:	895b      	ldrh	r3, [r3, #10]
 801f832:	2b13      	cmp	r3, #19
 801f834:	d806      	bhi.n	801f844 <ip4_frag+0xd0>
 801f836:	4b6c      	ldr	r3, [pc, #432]	@ (801f9e8 <ip4_frag+0x274>)
 801f838:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801f83c:	496d      	ldr	r1, [pc, #436]	@ (801f9f4 <ip4_frag+0x280>)
 801f83e:	486c      	ldr	r0, [pc, #432]	@ (801f9f0 <ip4_frag+0x27c>)
 801f840:	f001 f8a0 	bl	8020984 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801f844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f846:	685b      	ldr	r3, [r3, #4]
 801f848:	2214      	movs	r2, #20
 801f84a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801f84c:	4618      	mov	r0, r3
 801f84e:	f001 fb0e 	bl	8020e6e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801f852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f854:	685b      	ldr	r3, [r3, #4]
 801f856:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801f858:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801f85a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801f85e:	e064      	b.n	801f92a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801f860:	68fb      	ldr	r3, [r7, #12]
 801f862:	895a      	ldrh	r2, [r3, #10]
 801f864:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f866:	1ad3      	subs	r3, r2, r3
 801f868:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801f86a:	68fb      	ldr	r3, [r7, #12]
 801f86c:	895b      	ldrh	r3, [r3, #10]
 801f86e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801f870:	429a      	cmp	r2, r3
 801f872:	d906      	bls.n	801f882 <ip4_frag+0x10e>
 801f874:	4b5c      	ldr	r3, [pc, #368]	@ (801f9e8 <ip4_frag+0x274>)
 801f876:	f240 322d 	movw	r2, #813	@ 0x32d
 801f87a:	495f      	ldr	r1, [pc, #380]	@ (801f9f8 <ip4_frag+0x284>)
 801f87c:	485c      	ldr	r0, [pc, #368]	@ (801f9f0 <ip4_frag+0x27c>)
 801f87e:	f001 f881 	bl	8020984 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801f882:	8bfa      	ldrh	r2, [r7, #30]
 801f884:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801f888:	4293      	cmp	r3, r2
 801f88a:	bf28      	it	cs
 801f88c:	4613      	movcs	r3, r2
 801f88e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801f892:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801f896:	2b00      	cmp	r3, #0
 801f898:	d105      	bne.n	801f8a6 <ip4_frag+0x132>
        poff = 0;
 801f89a:	2300      	movs	r3, #0
 801f89c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801f89e:	68fb      	ldr	r3, [r7, #12]
 801f8a0:	681b      	ldr	r3, [r3, #0]
 801f8a2:	60fb      	str	r3, [r7, #12]
        continue;
 801f8a4:	e041      	b.n	801f92a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801f8a6:	f7ff ff0d 	bl	801f6c4 <ip_frag_alloc_pbuf_custom_ref>
 801f8aa:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801f8ac:	69bb      	ldr	r3, [r7, #24]
 801f8ae:	2b00      	cmp	r3, #0
 801f8b0:	d103      	bne.n	801f8ba <ip4_frag+0x146>
        pbuf_free(rambuf);
 801f8b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f8b4:	f7f4 fcd8 	bl	8014268 <pbuf_free>
        goto memerr;
 801f8b8:	e08f      	b.n	801f9da <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801f8ba:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801f8bc:	68fb      	ldr	r3, [r7, #12]
 801f8be:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801f8c0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f8c2:	4413      	add	r3, r2
 801f8c4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801f8c8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801f8cc:	9201      	str	r2, [sp, #4]
 801f8ce:	9300      	str	r3, [sp, #0]
 801f8d0:	4603      	mov	r3, r0
 801f8d2:	2241      	movs	r2, #65	@ 0x41
 801f8d4:	2000      	movs	r0, #0
 801f8d6:	f7f4 fb0d 	bl	8013ef4 <pbuf_alloced_custom>
 801f8da:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801f8dc:	697b      	ldr	r3, [r7, #20]
 801f8de:	2b00      	cmp	r3, #0
 801f8e0:	d106      	bne.n	801f8f0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801f8e2:	69b8      	ldr	r0, [r7, #24]
 801f8e4:	f7ff fef6 	bl	801f6d4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801f8e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f8ea:	f7f4 fcbd 	bl	8014268 <pbuf_free>
        goto memerr;
 801f8ee:	e074      	b.n	801f9da <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801f8f0:	68f8      	ldr	r0, [r7, #12]
 801f8f2:	f7f4 fd5f 	bl	80143b4 <pbuf_ref>
      pcr->original = p;
 801f8f6:	69bb      	ldr	r3, [r7, #24]
 801f8f8:	68fa      	ldr	r2, [r7, #12]
 801f8fa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801f8fc:	69bb      	ldr	r3, [r7, #24]
 801f8fe:	4a3f      	ldr	r2, [pc, #252]	@ (801f9fc <ip4_frag+0x288>)
 801f900:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801f902:	6979      	ldr	r1, [r7, #20]
 801f904:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f906:	f7f4 fd7d 	bl	8014404 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801f90a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801f90e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801f912:	1ad3      	subs	r3, r2, r3
 801f914:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801f918:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801f91c:	2b00      	cmp	r3, #0
 801f91e:	d004      	beq.n	801f92a <ip4_frag+0x1b6>
        poff = 0;
 801f920:	2300      	movs	r3, #0
 801f922:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801f924:	68fb      	ldr	r3, [r7, #12]
 801f926:	681b      	ldr	r3, [r3, #0]
 801f928:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801f92a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801f92e:	2b00      	cmp	r3, #0
 801f930:	d196      	bne.n	801f860 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801f932:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801f934:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801f938:	4413      	add	r3, r2
 801f93a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801f93c:	68bb      	ldr	r3, [r7, #8]
 801f93e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801f940:	f1a3 0213 	sub.w	r2, r3, #19
 801f944:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f948:	429a      	cmp	r2, r3
 801f94a:	bfcc      	ite	gt
 801f94c:	2301      	movgt	r3, #1
 801f94e:	2300      	movle	r3, #0
 801f950:	b2db      	uxtb	r3, r3
 801f952:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801f954:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801f958:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f95c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801f95e:	6a3b      	ldr	r3, [r7, #32]
 801f960:	2b00      	cmp	r3, #0
 801f962:	d002      	beq.n	801f96a <ip4_frag+0x1f6>
 801f964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f966:	2b00      	cmp	r3, #0
 801f968:	d003      	beq.n	801f972 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801f96a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f96c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801f970:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801f972:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f974:	4618      	mov	r0, r3
 801f976:	f7f2 ffc1 	bl	80128fc <lwip_htons>
 801f97a:	4603      	mov	r3, r0
 801f97c:	461a      	mov	r2, r3
 801f97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f980:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801f982:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801f984:	3314      	adds	r3, #20
 801f986:	b29b      	uxth	r3, r3
 801f988:	4618      	mov	r0, r3
 801f98a:	f7f2 ffb7 	bl	80128fc <lwip_htons>
 801f98e:	4603      	mov	r3, r0
 801f990:	461a      	mov	r2, r3
 801f992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f994:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801f996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f998:	2200      	movs	r2, #0
 801f99a:	729a      	strb	r2, [r3, #10]
 801f99c:	2200      	movs	r2, #0
 801f99e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801f9a0:	68bb      	ldr	r3, [r7, #8]
 801f9a2:	695b      	ldr	r3, [r3, #20]
 801f9a4:	687a      	ldr	r2, [r7, #4]
 801f9a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801f9a8:	68b8      	ldr	r0, [r7, #8]
 801f9aa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801f9ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f9ae:	f7f4 fc5b 	bl	8014268 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801f9b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f9b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801f9b8:	1ad3      	subs	r3, r2, r3
 801f9ba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801f9be:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801f9c2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801f9c4:	4413      	add	r3, r2
 801f9c6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801f9ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f9ce:	2b00      	cmp	r3, #0
 801f9d0:	f47f af19 	bne.w	801f806 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801f9d4:	2300      	movs	r3, #0
 801f9d6:	e002      	b.n	801f9de <ip4_frag+0x26a>
      goto memerr;
 801f9d8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801f9da:	f04f 33ff 	mov.w	r3, #4294967295
}
 801f9de:	4618      	mov	r0, r3
 801f9e0:	3748      	adds	r7, #72	@ 0x48
 801f9e2:	46bd      	mov	sp, r7
 801f9e4:	bd80      	pop	{r7, pc}
 801f9e6:	bf00      	nop
 801f9e8:	08026988 	.word	0x08026988
 801f9ec:	08026b64 	.word	0x08026b64
 801f9f0:	080269d0 	.word	0x080269d0
 801f9f4:	08026b80 	.word	0x08026b80
 801f9f8:	08026ba0 	.word	0x08026ba0
 801f9fc:	0801f70d 	.word	0x0801f70d

0801fa00 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801fa00:	b580      	push	{r7, lr}
 801fa02:	b086      	sub	sp, #24
 801fa04:	af00      	add	r7, sp, #0
 801fa06:	6078      	str	r0, [r7, #4]
 801fa08:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801fa0a:	230e      	movs	r3, #14
 801fa0c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801fa0e:	687b      	ldr	r3, [r7, #4]
 801fa10:	895b      	ldrh	r3, [r3, #10]
 801fa12:	2b0e      	cmp	r3, #14
 801fa14:	d96e      	bls.n	801faf4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801fa16:	687b      	ldr	r3, [r7, #4]
 801fa18:	7bdb      	ldrb	r3, [r3, #15]
 801fa1a:	2b00      	cmp	r3, #0
 801fa1c:	d106      	bne.n	801fa2c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801fa1e:	683b      	ldr	r3, [r7, #0]
 801fa20:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801fa24:	3301      	adds	r3, #1
 801fa26:	b2da      	uxtb	r2, r3
 801fa28:	687b      	ldr	r3, [r7, #4]
 801fa2a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801fa2c:	687b      	ldr	r3, [r7, #4]
 801fa2e:	685b      	ldr	r3, [r3, #4]
 801fa30:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801fa32:	693b      	ldr	r3, [r7, #16]
 801fa34:	7b1a      	ldrb	r2, [r3, #12]
 801fa36:	7b5b      	ldrb	r3, [r3, #13]
 801fa38:	021b      	lsls	r3, r3, #8
 801fa3a:	4313      	orrs	r3, r2
 801fa3c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801fa3e:	693b      	ldr	r3, [r7, #16]
 801fa40:	781b      	ldrb	r3, [r3, #0]
 801fa42:	f003 0301 	and.w	r3, r3, #1
 801fa46:	2b00      	cmp	r3, #0
 801fa48:	d023      	beq.n	801fa92 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801fa4a:	693b      	ldr	r3, [r7, #16]
 801fa4c:	781b      	ldrb	r3, [r3, #0]
 801fa4e:	2b01      	cmp	r3, #1
 801fa50:	d10f      	bne.n	801fa72 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801fa52:	693b      	ldr	r3, [r7, #16]
 801fa54:	785b      	ldrb	r3, [r3, #1]
 801fa56:	2b00      	cmp	r3, #0
 801fa58:	d11b      	bne.n	801fa92 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801fa5a:	693b      	ldr	r3, [r7, #16]
 801fa5c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801fa5e:	2b5e      	cmp	r3, #94	@ 0x5e
 801fa60:	d117      	bne.n	801fa92 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801fa62:	687b      	ldr	r3, [r7, #4]
 801fa64:	7b5b      	ldrb	r3, [r3, #13]
 801fa66:	f043 0310 	orr.w	r3, r3, #16
 801fa6a:	b2da      	uxtb	r2, r3
 801fa6c:	687b      	ldr	r3, [r7, #4]
 801fa6e:	735a      	strb	r2, [r3, #13]
 801fa70:	e00f      	b.n	801fa92 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801fa72:	693b      	ldr	r3, [r7, #16]
 801fa74:	2206      	movs	r2, #6
 801fa76:	4928      	ldr	r1, [pc, #160]	@ (801fb18 <ethernet_input+0x118>)
 801fa78:	4618      	mov	r0, r3
 801fa7a:	f001 f8ff 	bl	8020c7c <memcmp>
 801fa7e:	4603      	mov	r3, r0
 801fa80:	2b00      	cmp	r3, #0
 801fa82:	d106      	bne.n	801fa92 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801fa84:	687b      	ldr	r3, [r7, #4]
 801fa86:	7b5b      	ldrb	r3, [r3, #13]
 801fa88:	f043 0308 	orr.w	r3, r3, #8
 801fa8c:	b2da      	uxtb	r2, r3
 801fa8e:	687b      	ldr	r3, [r7, #4]
 801fa90:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801fa92:	89fb      	ldrh	r3, [r7, #14]
 801fa94:	2b08      	cmp	r3, #8
 801fa96:	d003      	beq.n	801faa0 <ethernet_input+0xa0>
 801fa98:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801fa9c:	d014      	beq.n	801fac8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801fa9e:	e032      	b.n	801fb06 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801faa0:	683b      	ldr	r3, [r7, #0]
 801faa2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801faa6:	f003 0308 	and.w	r3, r3, #8
 801faaa:	2b00      	cmp	r3, #0
 801faac:	d024      	beq.n	801faf8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801faae:	8afb      	ldrh	r3, [r7, #22]
 801fab0:	4619      	mov	r1, r3
 801fab2:	6878      	ldr	r0, [r7, #4]
 801fab4:	f7f4 fb52 	bl	801415c <pbuf_remove_header>
 801fab8:	4603      	mov	r3, r0
 801faba:	2b00      	cmp	r3, #0
 801fabc:	d11e      	bne.n	801fafc <ethernet_input+0xfc>
        ip4_input(p, netif);
 801fabe:	6839      	ldr	r1, [r7, #0]
 801fac0:	6878      	ldr	r0, [r7, #4]
 801fac2:	f7fe fdd9 	bl	801e678 <ip4_input>
      break;
 801fac6:	e013      	b.n	801faf0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801fac8:	683b      	ldr	r3, [r7, #0]
 801faca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801face:	f003 0308 	and.w	r3, r3, #8
 801fad2:	2b00      	cmp	r3, #0
 801fad4:	d014      	beq.n	801fb00 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801fad6:	8afb      	ldrh	r3, [r7, #22]
 801fad8:	4619      	mov	r1, r3
 801fada:	6878      	ldr	r0, [r7, #4]
 801fadc:	f7f4 fb3e 	bl	801415c <pbuf_remove_header>
 801fae0:	4603      	mov	r3, r0
 801fae2:	2b00      	cmp	r3, #0
 801fae4:	d10e      	bne.n	801fb04 <ethernet_input+0x104>
        etharp_input(p, netif);
 801fae6:	6839      	ldr	r1, [r7, #0]
 801fae8:	6878      	ldr	r0, [r7, #4]
 801faea:	f7fd ff4f 	bl	801d98c <etharp_input>
      break;
 801faee:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801faf0:	2300      	movs	r3, #0
 801faf2:	e00c      	b.n	801fb0e <ethernet_input+0x10e>
    goto free_and_return;
 801faf4:	bf00      	nop
 801faf6:	e006      	b.n	801fb06 <ethernet_input+0x106>
        goto free_and_return;
 801faf8:	bf00      	nop
 801fafa:	e004      	b.n	801fb06 <ethernet_input+0x106>
        goto free_and_return;
 801fafc:	bf00      	nop
 801fafe:	e002      	b.n	801fb06 <ethernet_input+0x106>
        goto free_and_return;
 801fb00:	bf00      	nop
 801fb02:	e000      	b.n	801fb06 <ethernet_input+0x106>
        goto free_and_return;
 801fb04:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801fb06:	6878      	ldr	r0, [r7, #4]
 801fb08:	f7f4 fbae 	bl	8014268 <pbuf_free>
  return ERR_OK;
 801fb0c:	2300      	movs	r3, #0
}
 801fb0e:	4618      	mov	r0, r3
 801fb10:	3718      	adds	r7, #24
 801fb12:	46bd      	mov	sp, r7
 801fb14:	bd80      	pop	{r7, pc}
 801fb16:	bf00      	nop
 801fb18:	08026e64 	.word	0x08026e64

0801fb1c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801fb1c:	b580      	push	{r7, lr}
 801fb1e:	b086      	sub	sp, #24
 801fb20:	af00      	add	r7, sp, #0
 801fb22:	60f8      	str	r0, [r7, #12]
 801fb24:	60b9      	str	r1, [r7, #8]
 801fb26:	607a      	str	r2, [r7, #4]
 801fb28:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801fb2a:	8c3b      	ldrh	r3, [r7, #32]
 801fb2c:	4618      	mov	r0, r3
 801fb2e:	f7f2 fee5 	bl	80128fc <lwip_htons>
 801fb32:	4603      	mov	r3, r0
 801fb34:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801fb36:	210e      	movs	r1, #14
 801fb38:	68b8      	ldr	r0, [r7, #8]
 801fb3a:	f7f4 faff 	bl	801413c <pbuf_add_header>
 801fb3e:	4603      	mov	r3, r0
 801fb40:	2b00      	cmp	r3, #0
 801fb42:	d125      	bne.n	801fb90 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801fb44:	68bb      	ldr	r3, [r7, #8]
 801fb46:	685b      	ldr	r3, [r3, #4]
 801fb48:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801fb4a:	693b      	ldr	r3, [r7, #16]
 801fb4c:	8afa      	ldrh	r2, [r7, #22]
 801fb4e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801fb50:	693b      	ldr	r3, [r7, #16]
 801fb52:	2206      	movs	r2, #6
 801fb54:	6839      	ldr	r1, [r7, #0]
 801fb56:	4618      	mov	r0, r3
 801fb58:	f001 f989 	bl	8020e6e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801fb5c:	693b      	ldr	r3, [r7, #16]
 801fb5e:	3306      	adds	r3, #6
 801fb60:	2206      	movs	r2, #6
 801fb62:	6879      	ldr	r1, [r7, #4]
 801fb64:	4618      	mov	r0, r3
 801fb66:	f001 f982 	bl	8020e6e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801fb6a:	68fb      	ldr	r3, [r7, #12]
 801fb6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801fb70:	2b06      	cmp	r3, #6
 801fb72:	d006      	beq.n	801fb82 <ethernet_output+0x66>
 801fb74:	4b0a      	ldr	r3, [pc, #40]	@ (801fba0 <ethernet_output+0x84>)
 801fb76:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801fb7a:	490a      	ldr	r1, [pc, #40]	@ (801fba4 <ethernet_output+0x88>)
 801fb7c:	480a      	ldr	r0, [pc, #40]	@ (801fba8 <ethernet_output+0x8c>)
 801fb7e:	f000 ff01 	bl	8020984 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801fb82:	68fb      	ldr	r3, [r7, #12]
 801fb84:	699b      	ldr	r3, [r3, #24]
 801fb86:	68b9      	ldr	r1, [r7, #8]
 801fb88:	68f8      	ldr	r0, [r7, #12]
 801fb8a:	4798      	blx	r3
 801fb8c:	4603      	mov	r3, r0
 801fb8e:	e002      	b.n	801fb96 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801fb90:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801fb92:	f06f 0301 	mvn.w	r3, #1
}
 801fb96:	4618      	mov	r0, r3
 801fb98:	3718      	adds	r7, #24
 801fb9a:	46bd      	mov	sp, r7
 801fb9c:	bd80      	pop	{r7, pc}
 801fb9e:	bf00      	nop
 801fba0:	08026bb0 	.word	0x08026bb0
 801fba4:	08026be8 	.word	0x08026be8
 801fba8:	08026c1c 	.word	0x08026c1c

0801fbac <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801fbac:	b580      	push	{r7, lr}
 801fbae:	b082      	sub	sp, #8
 801fbb0:	af00      	add	r7, sp, #0
 801fbb2:	6078      	str	r0, [r7, #4]
 801fbb4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801fbb6:	683b      	ldr	r3, [r7, #0]
 801fbb8:	2200      	movs	r2, #0
 801fbba:	2104      	movs	r1, #4
 801fbbc:	4618      	mov	r0, r3
 801fbbe:	f7ec fe31 	bl	800c824 <osMessageQueueNew>
 801fbc2:	4602      	mov	r2, r0
 801fbc4:	687b      	ldr	r3, [r7, #4]
 801fbc6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801fbc8:	687b      	ldr	r3, [r7, #4]
 801fbca:	681b      	ldr	r3, [r3, #0]
 801fbcc:	2b00      	cmp	r3, #0
 801fbce:	d102      	bne.n	801fbd6 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801fbd0:	f04f 33ff 	mov.w	r3, #4294967295
 801fbd4:	e000      	b.n	801fbd8 <sys_mbox_new+0x2c>

  return ERR_OK;
 801fbd6:	2300      	movs	r3, #0
}
 801fbd8:	4618      	mov	r0, r3
 801fbda:	3708      	adds	r7, #8
 801fbdc:	46bd      	mov	sp, r7
 801fbde:	bd80      	pop	{r7, pc}

0801fbe0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801fbe0:	b580      	push	{r7, lr}
 801fbe2:	b082      	sub	sp, #8
 801fbe4:	af00      	add	r7, sp, #0
 801fbe6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801fbe8:	687b      	ldr	r3, [r7, #4]
 801fbea:	681b      	ldr	r3, [r3, #0]
 801fbec:	4618      	mov	r0, r3
 801fbee:	f7ec ff4b 	bl	800ca88 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801fbf2:	687b      	ldr	r3, [r7, #4]
 801fbf4:	681b      	ldr	r3, [r3, #0]
 801fbf6:	4618      	mov	r0, r3
 801fbf8:	f7ec ff66 	bl	800cac8 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801fbfc:	bf00      	nop
 801fbfe:	3708      	adds	r7, #8
 801fc00:	46bd      	mov	sp, r7
 801fc02:	bd80      	pop	{r7, pc}

0801fc04 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801fc04:	b580      	push	{r7, lr}
 801fc06:	b084      	sub	sp, #16
 801fc08:	af00      	add	r7, sp, #0
 801fc0a:	6078      	str	r0, [r7, #4]
 801fc0c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801fc0e:	687b      	ldr	r3, [r7, #4]
 801fc10:	6818      	ldr	r0, [r3, #0]
 801fc12:	4639      	mov	r1, r7
 801fc14:	2300      	movs	r3, #0
 801fc16:	2200      	movs	r2, #0
 801fc18:	f7ec fe78 	bl	800c90c <osMessageQueuePut>
 801fc1c:	4603      	mov	r3, r0
 801fc1e:	2b00      	cmp	r3, #0
 801fc20:	d102      	bne.n	801fc28 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801fc22:	2300      	movs	r3, #0
 801fc24:	73fb      	strb	r3, [r7, #15]
 801fc26:	e001      	b.n	801fc2c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801fc28:	23ff      	movs	r3, #255	@ 0xff
 801fc2a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801fc2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801fc30:	4618      	mov	r0, r3
 801fc32:	3710      	adds	r7, #16
 801fc34:	46bd      	mov	sp, r7
 801fc36:	bd80      	pop	{r7, pc}

0801fc38 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801fc38:	b580      	push	{r7, lr}
 801fc3a:	b086      	sub	sp, #24
 801fc3c:	af00      	add	r7, sp, #0
 801fc3e:	60f8      	str	r0, [r7, #12]
 801fc40:	60b9      	str	r1, [r7, #8]
 801fc42:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801fc44:	f7ec fada 	bl	800c1fc <osKernelGetTickCount>
 801fc48:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801fc4a:	687b      	ldr	r3, [r7, #4]
 801fc4c:	2b00      	cmp	r3, #0
 801fc4e:	d013      	beq.n	801fc78 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801fc50:	68fb      	ldr	r3, [r7, #12]
 801fc52:	6818      	ldr	r0, [r3, #0]
 801fc54:	687b      	ldr	r3, [r7, #4]
 801fc56:	2200      	movs	r2, #0
 801fc58:	68b9      	ldr	r1, [r7, #8]
 801fc5a:	f7ec feb7 	bl	800c9cc <osMessageQueueGet>
 801fc5e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801fc60:	693b      	ldr	r3, [r7, #16]
 801fc62:	2b00      	cmp	r3, #0
 801fc64:	d105      	bne.n	801fc72 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801fc66:	f7ec fac9 	bl	800c1fc <osKernelGetTickCount>
 801fc6a:	4602      	mov	r2, r0
 801fc6c:	697b      	ldr	r3, [r7, #20]
 801fc6e:	1ad3      	subs	r3, r2, r3
 801fc70:	e00f      	b.n	801fc92 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801fc72:	f04f 33ff 	mov.w	r3, #4294967295
 801fc76:	e00c      	b.n	801fc92 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801fc78:	68fb      	ldr	r3, [r7, #12]
 801fc7a:	6818      	ldr	r0, [r3, #0]
 801fc7c:	f04f 33ff 	mov.w	r3, #4294967295
 801fc80:	2200      	movs	r2, #0
 801fc82:	68b9      	ldr	r1, [r7, #8]
 801fc84:	f7ec fea2 	bl	800c9cc <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801fc88:	f7ec fab8 	bl	800c1fc <osKernelGetTickCount>
 801fc8c:	4602      	mov	r2, r0
 801fc8e:	697b      	ldr	r3, [r7, #20]
 801fc90:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801fc92:	4618      	mov	r0, r3
 801fc94:	3718      	adds	r7, #24
 801fc96:	46bd      	mov	sp, r7
 801fc98:	bd80      	pop	{r7, pc}

0801fc9a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801fc9a:	b580      	push	{r7, lr}
 801fc9c:	b082      	sub	sp, #8
 801fc9e:	af00      	add	r7, sp, #0
 801fca0:	6078      	str	r0, [r7, #4]
 801fca2:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801fca4:	687b      	ldr	r3, [r7, #4]
 801fca6:	6818      	ldr	r0, [r3, #0]
 801fca8:	2300      	movs	r3, #0
 801fcaa:	2200      	movs	r2, #0
 801fcac:	6839      	ldr	r1, [r7, #0]
 801fcae:	f7ec fe8d 	bl	800c9cc <osMessageQueueGet>
 801fcb2:	4603      	mov	r3, r0
 801fcb4:	2b00      	cmp	r3, #0
 801fcb6:	d101      	bne.n	801fcbc <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801fcb8:	2300      	movs	r3, #0
 801fcba:	e001      	b.n	801fcc0 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801fcbc:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801fcc0:	4618      	mov	r0, r3
 801fcc2:	3708      	adds	r7, #8
 801fcc4:	46bd      	mov	sp, r7
 801fcc6:	bd80      	pop	{r7, pc}

0801fcc8 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801fcc8:	b480      	push	{r7}
 801fcca:	b083      	sub	sp, #12
 801fccc:	af00      	add	r7, sp, #0
 801fcce:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801fcd0:	687b      	ldr	r3, [r7, #4]
 801fcd2:	681b      	ldr	r3, [r3, #0]
 801fcd4:	2b00      	cmp	r3, #0
 801fcd6:	d101      	bne.n	801fcdc <sys_mbox_valid+0x14>
    return 0;
 801fcd8:	2300      	movs	r3, #0
 801fcda:	e000      	b.n	801fcde <sys_mbox_valid+0x16>
  else
    return 1;
 801fcdc:	2301      	movs	r3, #1
}
 801fcde:	4618      	mov	r0, r3
 801fce0:	370c      	adds	r7, #12
 801fce2:	46bd      	mov	sp, r7
 801fce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fce8:	4770      	bx	lr

0801fcea <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801fcea:	b480      	push	{r7}
 801fcec:	b083      	sub	sp, #12
 801fcee:	af00      	add	r7, sp, #0
 801fcf0:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801fcf2:	687b      	ldr	r3, [r7, #4]
 801fcf4:	2200      	movs	r2, #0
 801fcf6:	601a      	str	r2, [r3, #0]
}
 801fcf8:	bf00      	nop
 801fcfa:	370c      	adds	r7, #12
 801fcfc:	46bd      	mov	sp, r7
 801fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd02:	4770      	bx	lr

0801fd04 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801fd04:	b580      	push	{r7, lr}
 801fd06:	b082      	sub	sp, #8
 801fd08:	af00      	add	r7, sp, #0
 801fd0a:	6078      	str	r0, [r7, #4]
 801fd0c:	460b      	mov	r3, r1
 801fd0e:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801fd10:	78fb      	ldrb	r3, [r7, #3]
 801fd12:	2200      	movs	r2, #0
 801fd14:	4619      	mov	r1, r3
 801fd16:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801fd1a:	f7ec fc3f 	bl	800c59c <osSemaphoreNew>
 801fd1e:	4602      	mov	r2, r0
 801fd20:	687b      	ldr	r3, [r7, #4]
 801fd22:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801fd24:	687b      	ldr	r3, [r7, #4]
 801fd26:	681b      	ldr	r3, [r3, #0]
 801fd28:	2b00      	cmp	r3, #0
 801fd2a:	d102      	bne.n	801fd32 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801fd2c:	f04f 33ff 	mov.w	r3, #4294967295
 801fd30:	e009      	b.n	801fd46 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801fd32:	78fb      	ldrb	r3, [r7, #3]
 801fd34:	2b00      	cmp	r3, #0
 801fd36:	d105      	bne.n	801fd44 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801fd38:	687b      	ldr	r3, [r7, #4]
 801fd3a:	681b      	ldr	r3, [r3, #0]
 801fd3c:	2100      	movs	r1, #0
 801fd3e:	4618      	mov	r0, r3
 801fd40:	f7ec fcb6 	bl	800c6b0 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801fd44:	2300      	movs	r3, #0
}
 801fd46:	4618      	mov	r0, r3
 801fd48:	3708      	adds	r7, #8
 801fd4a:	46bd      	mov	sp, r7
 801fd4c:	bd80      	pop	{r7, pc}

0801fd4e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801fd4e:	b580      	push	{r7, lr}
 801fd50:	b084      	sub	sp, #16
 801fd52:	af00      	add	r7, sp, #0
 801fd54:	6078      	str	r0, [r7, #4]
 801fd56:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801fd58:	f7ec fa50 	bl	800c1fc <osKernelGetTickCount>
 801fd5c:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801fd5e:	683b      	ldr	r3, [r7, #0]
 801fd60:	2b00      	cmp	r3, #0
 801fd62:	d011      	beq.n	801fd88 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801fd64:	687b      	ldr	r3, [r7, #4]
 801fd66:	681b      	ldr	r3, [r3, #0]
 801fd68:	6839      	ldr	r1, [r7, #0]
 801fd6a:	4618      	mov	r0, r3
 801fd6c:	f7ec fca0 	bl	800c6b0 <osSemaphoreAcquire>
 801fd70:	4603      	mov	r3, r0
 801fd72:	2b00      	cmp	r3, #0
 801fd74:	d105      	bne.n	801fd82 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801fd76:	f7ec fa41 	bl	800c1fc <osKernelGetTickCount>
 801fd7a:	4602      	mov	r2, r0
 801fd7c:	68fb      	ldr	r3, [r7, #12]
 801fd7e:	1ad3      	subs	r3, r2, r3
 801fd80:	e012      	b.n	801fda8 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801fd82:	f04f 33ff 	mov.w	r3, #4294967295
 801fd86:	e00f      	b.n	801fda8 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801fd88:	bf00      	nop
 801fd8a:	687b      	ldr	r3, [r7, #4]
 801fd8c:	681b      	ldr	r3, [r3, #0]
 801fd8e:	f04f 31ff 	mov.w	r1, #4294967295
 801fd92:	4618      	mov	r0, r3
 801fd94:	f7ec fc8c 	bl	800c6b0 <osSemaphoreAcquire>
 801fd98:	4603      	mov	r3, r0
 801fd9a:	2b00      	cmp	r3, #0
 801fd9c:	d1f5      	bne.n	801fd8a <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801fd9e:	f7ec fa2d 	bl	800c1fc <osKernelGetTickCount>
 801fda2:	4602      	mov	r2, r0
 801fda4:	68fb      	ldr	r3, [r7, #12]
 801fda6:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801fda8:	4618      	mov	r0, r3
 801fdaa:	3710      	adds	r7, #16
 801fdac:	46bd      	mov	sp, r7
 801fdae:	bd80      	pop	{r7, pc}

0801fdb0 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801fdb0:	b580      	push	{r7, lr}
 801fdb2:	b082      	sub	sp, #8
 801fdb4:	af00      	add	r7, sp, #0
 801fdb6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801fdb8:	687b      	ldr	r3, [r7, #4]
 801fdba:	681b      	ldr	r3, [r3, #0]
 801fdbc:	4618      	mov	r0, r3
 801fdbe:	f7ec fcc9 	bl	800c754 <osSemaphoreRelease>
}
 801fdc2:	bf00      	nop
 801fdc4:	3708      	adds	r7, #8
 801fdc6:	46bd      	mov	sp, r7
 801fdc8:	bd80      	pop	{r7, pc}

0801fdca <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801fdca:	b580      	push	{r7, lr}
 801fdcc:	b082      	sub	sp, #8
 801fdce:	af00      	add	r7, sp, #0
 801fdd0:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801fdd2:	687b      	ldr	r3, [r7, #4]
 801fdd4:	681b      	ldr	r3, [r3, #0]
 801fdd6:	4618      	mov	r0, r3
 801fdd8:	f7ec fd00 	bl	800c7dc <osSemaphoreDelete>
}
 801fddc:	bf00      	nop
 801fdde:	3708      	adds	r7, #8
 801fde0:	46bd      	mov	sp, r7
 801fde2:	bd80      	pop	{r7, pc}

0801fde4 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801fde4:	b480      	push	{r7}
 801fde6:	b083      	sub	sp, #12
 801fde8:	af00      	add	r7, sp, #0
 801fdea:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801fdec:	687b      	ldr	r3, [r7, #4]
 801fdee:	681b      	ldr	r3, [r3, #0]
 801fdf0:	2b00      	cmp	r3, #0
 801fdf2:	d101      	bne.n	801fdf8 <sys_sem_valid+0x14>
    return 0;
 801fdf4:	2300      	movs	r3, #0
 801fdf6:	e000      	b.n	801fdfa <sys_sem_valid+0x16>
  else
    return 1;
 801fdf8:	2301      	movs	r3, #1
}
 801fdfa:	4618      	mov	r0, r3
 801fdfc:	370c      	adds	r7, #12
 801fdfe:	46bd      	mov	sp, r7
 801fe00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe04:	4770      	bx	lr

0801fe06 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801fe06:	b480      	push	{r7}
 801fe08:	b083      	sub	sp, #12
 801fe0a:	af00      	add	r7, sp, #0
 801fe0c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801fe0e:	687b      	ldr	r3, [r7, #4]
 801fe10:	2200      	movs	r2, #0
 801fe12:	601a      	str	r2, [r3, #0]
}
 801fe14:	bf00      	nop
 801fe16:	370c      	adds	r7, #12
 801fe18:	46bd      	mov	sp, r7
 801fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe1e:	4770      	bx	lr

0801fe20 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801fe20:	b580      	push	{r7, lr}
 801fe22:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801fe24:	2000      	movs	r0, #0
 801fe26:	f7ec faab 	bl	800c380 <osMutexNew>
 801fe2a:	4603      	mov	r3, r0
 801fe2c:	4a01      	ldr	r2, [pc, #4]	@ (801fe34 <sys_init+0x14>)
 801fe2e:	6013      	str	r3, [r2, #0]
#endif
}
 801fe30:	bf00      	nop
 801fe32:	bd80      	pop	{r7, pc}
 801fe34:	2400cc8c 	.word	0x2400cc8c

0801fe38 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801fe38:	b580      	push	{r7, lr}
 801fe3a:	b082      	sub	sp, #8
 801fe3c:	af00      	add	r7, sp, #0
 801fe3e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801fe40:	2000      	movs	r0, #0
 801fe42:	f7ec fa9d 	bl	800c380 <osMutexNew>
 801fe46:	4602      	mov	r2, r0
 801fe48:	687b      	ldr	r3, [r7, #4]
 801fe4a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801fe4c:	687b      	ldr	r3, [r7, #4]
 801fe4e:	681b      	ldr	r3, [r3, #0]
 801fe50:	2b00      	cmp	r3, #0
 801fe52:	d102      	bne.n	801fe5a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801fe54:	f04f 33ff 	mov.w	r3, #4294967295
 801fe58:	e000      	b.n	801fe5c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801fe5a:	2300      	movs	r3, #0
}
 801fe5c:	4618      	mov	r0, r3
 801fe5e:	3708      	adds	r7, #8
 801fe60:	46bd      	mov	sp, r7
 801fe62:	bd80      	pop	{r7, pc}

0801fe64 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801fe64:	b580      	push	{r7, lr}
 801fe66:	b082      	sub	sp, #8
 801fe68:	af00      	add	r7, sp, #0
 801fe6a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801fe6c:	687b      	ldr	r3, [r7, #4]
 801fe6e:	681b      	ldr	r3, [r3, #0]
 801fe70:	f04f 31ff 	mov.w	r1, #4294967295
 801fe74:	4618      	mov	r0, r3
 801fe76:	f7ec fb09 	bl	800c48c <osMutexAcquire>
#endif
}
 801fe7a:	bf00      	nop
 801fe7c:	3708      	adds	r7, #8
 801fe7e:	46bd      	mov	sp, r7
 801fe80:	bd80      	pop	{r7, pc}

0801fe82 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801fe82:	b580      	push	{r7, lr}
 801fe84:	b082      	sub	sp, #8
 801fe86:	af00      	add	r7, sp, #0
 801fe88:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801fe8a:	687b      	ldr	r3, [r7, #4]
 801fe8c:	681b      	ldr	r3, [r3, #0]
 801fe8e:	4618      	mov	r0, r3
 801fe90:	f7ec fb47 	bl	800c522 <osMutexRelease>
}
 801fe94:	bf00      	nop
 801fe96:	3708      	adds	r7, #8
 801fe98:	46bd      	mov	sp, r7
 801fe9a:	bd80      	pop	{r7, pc}

0801fe9c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801fe9c:	b580      	push	{r7, lr}
 801fe9e:	b08e      	sub	sp, #56	@ 0x38
 801fea0:	af00      	add	r7, sp, #0
 801fea2:	60f8      	str	r0, [r7, #12]
 801fea4:	60b9      	str	r1, [r7, #8]
 801fea6:	607a      	str	r2, [r7, #4]
 801fea8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801feaa:	f107 0314 	add.w	r3, r7, #20
 801feae:	2224      	movs	r2, #36	@ 0x24
 801feb0:	2100      	movs	r1, #0
 801feb2:	4618      	mov	r0, r3
 801feb4:	f000 ff0c 	bl	8020cd0 <memset>
 801feb8:	68fb      	ldr	r3, [r7, #12]
 801feba:	617b      	str	r3, [r7, #20]
 801febc:	683b      	ldr	r3, [r7, #0]
 801febe:	62bb      	str	r3, [r7, #40]	@ 0x28
 801fec0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801fec4:	f107 0314 	add.w	r3, r7, #20
 801fec8:	461a      	mov	r2, r3
 801feca:	6879      	ldr	r1, [r7, #4]
 801fecc:	68b8      	ldr	r0, [r7, #8]
 801fece:	f7ec f9aa 	bl	800c226 <osThreadNew>
 801fed2:	4603      	mov	r3, r0
#endif
}
 801fed4:	4618      	mov	r0, r3
 801fed6:	3738      	adds	r7, #56	@ 0x38
 801fed8:	46bd      	mov	sp, r7
 801feda:	bd80      	pop	{r7, pc}

0801fedc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801fedc:	b580      	push	{r7, lr}
 801fede:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801fee0:	4b04      	ldr	r3, [pc, #16]	@ (801fef4 <sys_arch_protect+0x18>)
 801fee2:	681b      	ldr	r3, [r3, #0]
 801fee4:	f04f 31ff 	mov.w	r1, #4294967295
 801fee8:	4618      	mov	r0, r3
 801feea:	f7ec facf 	bl	800c48c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801feee:	2301      	movs	r3, #1
}
 801fef0:	4618      	mov	r0, r3
 801fef2:	bd80      	pop	{r7, pc}
 801fef4:	2400cc8c 	.word	0x2400cc8c

0801fef8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801fef8:	b580      	push	{r7, lr}
 801fefa:	b082      	sub	sp, #8
 801fefc:	af00      	add	r7, sp, #0
 801fefe:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801ff00:	4b04      	ldr	r3, [pc, #16]	@ (801ff14 <sys_arch_unprotect+0x1c>)
 801ff02:	681b      	ldr	r3, [r3, #0]
 801ff04:	4618      	mov	r0, r3
 801ff06:	f7ec fb0c 	bl	800c522 <osMutexRelease>
}
 801ff0a:	bf00      	nop
 801ff0c:	3708      	adds	r7, #8
 801ff0e:	46bd      	mov	sp, r7
 801ff10:	bd80      	pop	{r7, pc}
 801ff12:	bf00      	nop
 801ff14:	2400cc8c 	.word	0x2400cc8c

0801ff18 <rand>:
 801ff18:	4b16      	ldr	r3, [pc, #88]	@ (801ff74 <rand+0x5c>)
 801ff1a:	b510      	push	{r4, lr}
 801ff1c:	681c      	ldr	r4, [r3, #0]
 801ff1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ff20:	b9b3      	cbnz	r3, 801ff50 <rand+0x38>
 801ff22:	2018      	movs	r0, #24
 801ff24:	f001 fdf8 	bl	8021b18 <malloc>
 801ff28:	4602      	mov	r2, r0
 801ff2a:	6320      	str	r0, [r4, #48]	@ 0x30
 801ff2c:	b920      	cbnz	r0, 801ff38 <rand+0x20>
 801ff2e:	4b12      	ldr	r3, [pc, #72]	@ (801ff78 <rand+0x60>)
 801ff30:	4812      	ldr	r0, [pc, #72]	@ (801ff7c <rand+0x64>)
 801ff32:	2152      	movs	r1, #82	@ 0x52
 801ff34:	f000 ffaa 	bl	8020e8c <__assert_func>
 801ff38:	4911      	ldr	r1, [pc, #68]	@ (801ff80 <rand+0x68>)
 801ff3a:	4b12      	ldr	r3, [pc, #72]	@ (801ff84 <rand+0x6c>)
 801ff3c:	e9c0 1300 	strd	r1, r3, [r0]
 801ff40:	4b11      	ldr	r3, [pc, #68]	@ (801ff88 <rand+0x70>)
 801ff42:	6083      	str	r3, [r0, #8]
 801ff44:	230b      	movs	r3, #11
 801ff46:	8183      	strh	r3, [r0, #12]
 801ff48:	2100      	movs	r1, #0
 801ff4a:	2001      	movs	r0, #1
 801ff4c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ff50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801ff52:	480e      	ldr	r0, [pc, #56]	@ (801ff8c <rand+0x74>)
 801ff54:	690b      	ldr	r3, [r1, #16]
 801ff56:	694c      	ldr	r4, [r1, #20]
 801ff58:	4a0d      	ldr	r2, [pc, #52]	@ (801ff90 <rand+0x78>)
 801ff5a:	4358      	muls	r0, r3
 801ff5c:	fb02 0004 	mla	r0, r2, r4, r0
 801ff60:	fba3 3202 	umull	r3, r2, r3, r2
 801ff64:	3301      	adds	r3, #1
 801ff66:	eb40 0002 	adc.w	r0, r0, r2
 801ff6a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801ff6e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801ff72:	bd10      	pop	{r4, pc}
 801ff74:	24000044 	.word	0x24000044
 801ff78:	08026e72 	.word	0x08026e72
 801ff7c:	08026e89 	.word	0x08026e89
 801ff80:	abcd330e 	.word	0xabcd330e
 801ff84:	e66d1234 	.word	0xe66d1234
 801ff88:	0005deec 	.word	0x0005deec
 801ff8c:	5851f42d 	.word	0x5851f42d
 801ff90:	4c957f2d 	.word	0x4c957f2d

0801ff94 <__cvt>:
 801ff94:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ff96:	ed2d 8b02 	vpush	{d8}
 801ff9a:	eeb0 8b40 	vmov.f64	d8, d0
 801ff9e:	b085      	sub	sp, #20
 801ffa0:	4617      	mov	r7, r2
 801ffa2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801ffa4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ffa6:	ee18 2a90 	vmov	r2, s17
 801ffaa:	f025 0520 	bic.w	r5, r5, #32
 801ffae:	2a00      	cmp	r2, #0
 801ffb0:	bfb6      	itet	lt
 801ffb2:	222d      	movlt	r2, #45	@ 0x2d
 801ffb4:	2200      	movge	r2, #0
 801ffb6:	eeb1 8b40 	vneglt.f64	d8, d0
 801ffba:	2d46      	cmp	r5, #70	@ 0x46
 801ffbc:	460c      	mov	r4, r1
 801ffbe:	701a      	strb	r2, [r3, #0]
 801ffc0:	d004      	beq.n	801ffcc <__cvt+0x38>
 801ffc2:	2d45      	cmp	r5, #69	@ 0x45
 801ffc4:	d100      	bne.n	801ffc8 <__cvt+0x34>
 801ffc6:	3401      	adds	r4, #1
 801ffc8:	2102      	movs	r1, #2
 801ffca:	e000      	b.n	801ffce <__cvt+0x3a>
 801ffcc:	2103      	movs	r1, #3
 801ffce:	ab03      	add	r3, sp, #12
 801ffd0:	9301      	str	r3, [sp, #4]
 801ffd2:	ab02      	add	r3, sp, #8
 801ffd4:	9300      	str	r3, [sp, #0]
 801ffd6:	4622      	mov	r2, r4
 801ffd8:	4633      	mov	r3, r6
 801ffda:	eeb0 0b48 	vmov.f64	d0, d8
 801ffde:	f000 fffb 	bl	8020fd8 <_dtoa_r>
 801ffe2:	2d47      	cmp	r5, #71	@ 0x47
 801ffe4:	d114      	bne.n	8020010 <__cvt+0x7c>
 801ffe6:	07fb      	lsls	r3, r7, #31
 801ffe8:	d50a      	bpl.n	8020000 <__cvt+0x6c>
 801ffea:	1902      	adds	r2, r0, r4
 801ffec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801fff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fff4:	bf08      	it	eq
 801fff6:	9203      	streq	r2, [sp, #12]
 801fff8:	2130      	movs	r1, #48	@ 0x30
 801fffa:	9b03      	ldr	r3, [sp, #12]
 801fffc:	4293      	cmp	r3, r2
 801fffe:	d319      	bcc.n	8020034 <__cvt+0xa0>
 8020000:	9b03      	ldr	r3, [sp, #12]
 8020002:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020004:	1a1b      	subs	r3, r3, r0
 8020006:	6013      	str	r3, [r2, #0]
 8020008:	b005      	add	sp, #20
 802000a:	ecbd 8b02 	vpop	{d8}
 802000e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020010:	2d46      	cmp	r5, #70	@ 0x46
 8020012:	eb00 0204 	add.w	r2, r0, r4
 8020016:	d1e9      	bne.n	801ffec <__cvt+0x58>
 8020018:	7803      	ldrb	r3, [r0, #0]
 802001a:	2b30      	cmp	r3, #48	@ 0x30
 802001c:	d107      	bne.n	802002e <__cvt+0x9a>
 802001e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8020022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020026:	bf1c      	itt	ne
 8020028:	f1c4 0401 	rsbne	r4, r4, #1
 802002c:	6034      	strne	r4, [r6, #0]
 802002e:	6833      	ldr	r3, [r6, #0]
 8020030:	441a      	add	r2, r3
 8020032:	e7db      	b.n	801ffec <__cvt+0x58>
 8020034:	1c5c      	adds	r4, r3, #1
 8020036:	9403      	str	r4, [sp, #12]
 8020038:	7019      	strb	r1, [r3, #0]
 802003a:	e7de      	b.n	801fffa <__cvt+0x66>

0802003c <__exponent>:
 802003c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802003e:	2900      	cmp	r1, #0
 8020040:	bfba      	itte	lt
 8020042:	4249      	neglt	r1, r1
 8020044:	232d      	movlt	r3, #45	@ 0x2d
 8020046:	232b      	movge	r3, #43	@ 0x2b
 8020048:	2909      	cmp	r1, #9
 802004a:	7002      	strb	r2, [r0, #0]
 802004c:	7043      	strb	r3, [r0, #1]
 802004e:	dd29      	ble.n	80200a4 <__exponent+0x68>
 8020050:	f10d 0307 	add.w	r3, sp, #7
 8020054:	461d      	mov	r5, r3
 8020056:	270a      	movs	r7, #10
 8020058:	461a      	mov	r2, r3
 802005a:	fbb1 f6f7 	udiv	r6, r1, r7
 802005e:	fb07 1416 	mls	r4, r7, r6, r1
 8020062:	3430      	adds	r4, #48	@ 0x30
 8020064:	f802 4c01 	strb.w	r4, [r2, #-1]
 8020068:	460c      	mov	r4, r1
 802006a:	2c63      	cmp	r4, #99	@ 0x63
 802006c:	f103 33ff 	add.w	r3, r3, #4294967295
 8020070:	4631      	mov	r1, r6
 8020072:	dcf1      	bgt.n	8020058 <__exponent+0x1c>
 8020074:	3130      	adds	r1, #48	@ 0x30
 8020076:	1e94      	subs	r4, r2, #2
 8020078:	f803 1c01 	strb.w	r1, [r3, #-1]
 802007c:	1c41      	adds	r1, r0, #1
 802007e:	4623      	mov	r3, r4
 8020080:	42ab      	cmp	r3, r5
 8020082:	d30a      	bcc.n	802009a <__exponent+0x5e>
 8020084:	f10d 0309 	add.w	r3, sp, #9
 8020088:	1a9b      	subs	r3, r3, r2
 802008a:	42ac      	cmp	r4, r5
 802008c:	bf88      	it	hi
 802008e:	2300      	movhi	r3, #0
 8020090:	3302      	adds	r3, #2
 8020092:	4403      	add	r3, r0
 8020094:	1a18      	subs	r0, r3, r0
 8020096:	b003      	add	sp, #12
 8020098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802009a:	f813 6b01 	ldrb.w	r6, [r3], #1
 802009e:	f801 6f01 	strb.w	r6, [r1, #1]!
 80200a2:	e7ed      	b.n	8020080 <__exponent+0x44>
 80200a4:	2330      	movs	r3, #48	@ 0x30
 80200a6:	3130      	adds	r1, #48	@ 0x30
 80200a8:	7083      	strb	r3, [r0, #2]
 80200aa:	70c1      	strb	r1, [r0, #3]
 80200ac:	1d03      	adds	r3, r0, #4
 80200ae:	e7f1      	b.n	8020094 <__exponent+0x58>

080200b0 <_printf_float>:
 80200b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200b4:	b08d      	sub	sp, #52	@ 0x34
 80200b6:	460c      	mov	r4, r1
 80200b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80200bc:	4616      	mov	r6, r2
 80200be:	461f      	mov	r7, r3
 80200c0:	4605      	mov	r5, r0
 80200c2:	f000 fe0d 	bl	8020ce0 <_localeconv_r>
 80200c6:	f8d0 b000 	ldr.w	fp, [r0]
 80200ca:	4658      	mov	r0, fp
 80200cc:	f7e0 f970 	bl	80003b0 <strlen>
 80200d0:	2300      	movs	r3, #0
 80200d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80200d4:	f8d8 3000 	ldr.w	r3, [r8]
 80200d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80200dc:	6822      	ldr	r2, [r4, #0]
 80200de:	9005      	str	r0, [sp, #20]
 80200e0:	3307      	adds	r3, #7
 80200e2:	f023 0307 	bic.w	r3, r3, #7
 80200e6:	f103 0108 	add.w	r1, r3, #8
 80200ea:	f8c8 1000 	str.w	r1, [r8]
 80200ee:	ed93 0b00 	vldr	d0, [r3]
 80200f2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8020350 <_printf_float+0x2a0>
 80200f6:	eeb0 7bc0 	vabs.f64	d7, d0
 80200fa:	eeb4 7b46 	vcmp.f64	d7, d6
 80200fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020102:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8020106:	dd24      	ble.n	8020152 <_printf_float+0xa2>
 8020108:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 802010c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020110:	d502      	bpl.n	8020118 <_printf_float+0x68>
 8020112:	232d      	movs	r3, #45	@ 0x2d
 8020114:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020118:	498f      	ldr	r1, [pc, #572]	@ (8020358 <_printf_float+0x2a8>)
 802011a:	4b90      	ldr	r3, [pc, #576]	@ (802035c <_printf_float+0x2ac>)
 802011c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8020120:	bf94      	ite	ls
 8020122:	4688      	movls	r8, r1
 8020124:	4698      	movhi	r8, r3
 8020126:	f022 0204 	bic.w	r2, r2, #4
 802012a:	2303      	movs	r3, #3
 802012c:	6123      	str	r3, [r4, #16]
 802012e:	6022      	str	r2, [r4, #0]
 8020130:	f04f 0a00 	mov.w	sl, #0
 8020134:	9700      	str	r7, [sp, #0]
 8020136:	4633      	mov	r3, r6
 8020138:	aa0b      	add	r2, sp, #44	@ 0x2c
 802013a:	4621      	mov	r1, r4
 802013c:	4628      	mov	r0, r5
 802013e:	f000 f9d1 	bl	80204e4 <_printf_common>
 8020142:	3001      	adds	r0, #1
 8020144:	f040 8089 	bne.w	802025a <_printf_float+0x1aa>
 8020148:	f04f 30ff 	mov.w	r0, #4294967295
 802014c:	b00d      	add	sp, #52	@ 0x34
 802014e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020152:	eeb4 0b40 	vcmp.f64	d0, d0
 8020156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802015a:	d709      	bvc.n	8020170 <_printf_float+0xc0>
 802015c:	ee10 3a90 	vmov	r3, s1
 8020160:	2b00      	cmp	r3, #0
 8020162:	bfbc      	itt	lt
 8020164:	232d      	movlt	r3, #45	@ 0x2d
 8020166:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 802016a:	497d      	ldr	r1, [pc, #500]	@ (8020360 <_printf_float+0x2b0>)
 802016c:	4b7d      	ldr	r3, [pc, #500]	@ (8020364 <_printf_float+0x2b4>)
 802016e:	e7d5      	b.n	802011c <_printf_float+0x6c>
 8020170:	6863      	ldr	r3, [r4, #4]
 8020172:	1c59      	adds	r1, r3, #1
 8020174:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8020178:	d139      	bne.n	80201ee <_printf_float+0x13e>
 802017a:	2306      	movs	r3, #6
 802017c:	6063      	str	r3, [r4, #4]
 802017e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8020182:	2300      	movs	r3, #0
 8020184:	6022      	str	r2, [r4, #0]
 8020186:	9303      	str	r3, [sp, #12]
 8020188:	ab0a      	add	r3, sp, #40	@ 0x28
 802018a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 802018e:	ab09      	add	r3, sp, #36	@ 0x24
 8020190:	9300      	str	r3, [sp, #0]
 8020192:	6861      	ldr	r1, [r4, #4]
 8020194:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8020198:	4628      	mov	r0, r5
 802019a:	f7ff fefb 	bl	801ff94 <__cvt>
 802019e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80201a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80201a4:	4680      	mov	r8, r0
 80201a6:	d129      	bne.n	80201fc <_printf_float+0x14c>
 80201a8:	1cc8      	adds	r0, r1, #3
 80201aa:	db02      	blt.n	80201b2 <_printf_float+0x102>
 80201ac:	6863      	ldr	r3, [r4, #4]
 80201ae:	4299      	cmp	r1, r3
 80201b0:	dd41      	ble.n	8020236 <_printf_float+0x186>
 80201b2:	f1a9 0902 	sub.w	r9, r9, #2
 80201b6:	fa5f f989 	uxtb.w	r9, r9
 80201ba:	3901      	subs	r1, #1
 80201bc:	464a      	mov	r2, r9
 80201be:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80201c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80201c4:	f7ff ff3a 	bl	802003c <__exponent>
 80201c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80201ca:	1813      	adds	r3, r2, r0
 80201cc:	2a01      	cmp	r2, #1
 80201ce:	4682      	mov	sl, r0
 80201d0:	6123      	str	r3, [r4, #16]
 80201d2:	dc02      	bgt.n	80201da <_printf_float+0x12a>
 80201d4:	6822      	ldr	r2, [r4, #0]
 80201d6:	07d2      	lsls	r2, r2, #31
 80201d8:	d501      	bpl.n	80201de <_printf_float+0x12e>
 80201da:	3301      	adds	r3, #1
 80201dc:	6123      	str	r3, [r4, #16]
 80201de:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80201e2:	2b00      	cmp	r3, #0
 80201e4:	d0a6      	beq.n	8020134 <_printf_float+0x84>
 80201e6:	232d      	movs	r3, #45	@ 0x2d
 80201e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80201ec:	e7a2      	b.n	8020134 <_printf_float+0x84>
 80201ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80201f2:	d1c4      	bne.n	802017e <_printf_float+0xce>
 80201f4:	2b00      	cmp	r3, #0
 80201f6:	d1c2      	bne.n	802017e <_printf_float+0xce>
 80201f8:	2301      	movs	r3, #1
 80201fa:	e7bf      	b.n	802017c <_printf_float+0xcc>
 80201fc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8020200:	d9db      	bls.n	80201ba <_printf_float+0x10a>
 8020202:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8020206:	d118      	bne.n	802023a <_printf_float+0x18a>
 8020208:	2900      	cmp	r1, #0
 802020a:	6863      	ldr	r3, [r4, #4]
 802020c:	dd0b      	ble.n	8020226 <_printf_float+0x176>
 802020e:	6121      	str	r1, [r4, #16]
 8020210:	b913      	cbnz	r3, 8020218 <_printf_float+0x168>
 8020212:	6822      	ldr	r2, [r4, #0]
 8020214:	07d0      	lsls	r0, r2, #31
 8020216:	d502      	bpl.n	802021e <_printf_float+0x16e>
 8020218:	3301      	adds	r3, #1
 802021a:	440b      	add	r3, r1
 802021c:	6123      	str	r3, [r4, #16]
 802021e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8020220:	f04f 0a00 	mov.w	sl, #0
 8020224:	e7db      	b.n	80201de <_printf_float+0x12e>
 8020226:	b913      	cbnz	r3, 802022e <_printf_float+0x17e>
 8020228:	6822      	ldr	r2, [r4, #0]
 802022a:	07d2      	lsls	r2, r2, #31
 802022c:	d501      	bpl.n	8020232 <_printf_float+0x182>
 802022e:	3302      	adds	r3, #2
 8020230:	e7f4      	b.n	802021c <_printf_float+0x16c>
 8020232:	2301      	movs	r3, #1
 8020234:	e7f2      	b.n	802021c <_printf_float+0x16c>
 8020236:	f04f 0967 	mov.w	r9, #103	@ 0x67
 802023a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802023c:	4299      	cmp	r1, r3
 802023e:	db05      	blt.n	802024c <_printf_float+0x19c>
 8020240:	6823      	ldr	r3, [r4, #0]
 8020242:	6121      	str	r1, [r4, #16]
 8020244:	07d8      	lsls	r0, r3, #31
 8020246:	d5ea      	bpl.n	802021e <_printf_float+0x16e>
 8020248:	1c4b      	adds	r3, r1, #1
 802024a:	e7e7      	b.n	802021c <_printf_float+0x16c>
 802024c:	2900      	cmp	r1, #0
 802024e:	bfd4      	ite	le
 8020250:	f1c1 0202 	rsble	r2, r1, #2
 8020254:	2201      	movgt	r2, #1
 8020256:	4413      	add	r3, r2
 8020258:	e7e0      	b.n	802021c <_printf_float+0x16c>
 802025a:	6823      	ldr	r3, [r4, #0]
 802025c:	055a      	lsls	r2, r3, #21
 802025e:	d407      	bmi.n	8020270 <_printf_float+0x1c0>
 8020260:	6923      	ldr	r3, [r4, #16]
 8020262:	4642      	mov	r2, r8
 8020264:	4631      	mov	r1, r6
 8020266:	4628      	mov	r0, r5
 8020268:	47b8      	blx	r7
 802026a:	3001      	adds	r0, #1
 802026c:	d12a      	bne.n	80202c4 <_printf_float+0x214>
 802026e:	e76b      	b.n	8020148 <_printf_float+0x98>
 8020270:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8020274:	f240 80e0 	bls.w	8020438 <_printf_float+0x388>
 8020278:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 802027c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020284:	d133      	bne.n	80202ee <_printf_float+0x23e>
 8020286:	4a38      	ldr	r2, [pc, #224]	@ (8020368 <_printf_float+0x2b8>)
 8020288:	2301      	movs	r3, #1
 802028a:	4631      	mov	r1, r6
 802028c:	4628      	mov	r0, r5
 802028e:	47b8      	blx	r7
 8020290:	3001      	adds	r0, #1
 8020292:	f43f af59 	beq.w	8020148 <_printf_float+0x98>
 8020296:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 802029a:	4543      	cmp	r3, r8
 802029c:	db02      	blt.n	80202a4 <_printf_float+0x1f4>
 802029e:	6823      	ldr	r3, [r4, #0]
 80202a0:	07d8      	lsls	r0, r3, #31
 80202a2:	d50f      	bpl.n	80202c4 <_printf_float+0x214>
 80202a4:	9b05      	ldr	r3, [sp, #20]
 80202a6:	465a      	mov	r2, fp
 80202a8:	4631      	mov	r1, r6
 80202aa:	4628      	mov	r0, r5
 80202ac:	47b8      	blx	r7
 80202ae:	3001      	adds	r0, #1
 80202b0:	f43f af4a 	beq.w	8020148 <_printf_float+0x98>
 80202b4:	f04f 0900 	mov.w	r9, #0
 80202b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80202bc:	f104 0a1a 	add.w	sl, r4, #26
 80202c0:	45c8      	cmp	r8, r9
 80202c2:	dc09      	bgt.n	80202d8 <_printf_float+0x228>
 80202c4:	6823      	ldr	r3, [r4, #0]
 80202c6:	079b      	lsls	r3, r3, #30
 80202c8:	f100 8107 	bmi.w	80204da <_printf_float+0x42a>
 80202cc:	68e0      	ldr	r0, [r4, #12]
 80202ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80202d0:	4298      	cmp	r0, r3
 80202d2:	bfb8      	it	lt
 80202d4:	4618      	movlt	r0, r3
 80202d6:	e739      	b.n	802014c <_printf_float+0x9c>
 80202d8:	2301      	movs	r3, #1
 80202da:	4652      	mov	r2, sl
 80202dc:	4631      	mov	r1, r6
 80202de:	4628      	mov	r0, r5
 80202e0:	47b8      	blx	r7
 80202e2:	3001      	adds	r0, #1
 80202e4:	f43f af30 	beq.w	8020148 <_printf_float+0x98>
 80202e8:	f109 0901 	add.w	r9, r9, #1
 80202ec:	e7e8      	b.n	80202c0 <_printf_float+0x210>
 80202ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80202f0:	2b00      	cmp	r3, #0
 80202f2:	dc3b      	bgt.n	802036c <_printf_float+0x2bc>
 80202f4:	4a1c      	ldr	r2, [pc, #112]	@ (8020368 <_printf_float+0x2b8>)
 80202f6:	2301      	movs	r3, #1
 80202f8:	4631      	mov	r1, r6
 80202fa:	4628      	mov	r0, r5
 80202fc:	47b8      	blx	r7
 80202fe:	3001      	adds	r0, #1
 8020300:	f43f af22 	beq.w	8020148 <_printf_float+0x98>
 8020304:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8020308:	ea59 0303 	orrs.w	r3, r9, r3
 802030c:	d102      	bne.n	8020314 <_printf_float+0x264>
 802030e:	6823      	ldr	r3, [r4, #0]
 8020310:	07d9      	lsls	r1, r3, #31
 8020312:	d5d7      	bpl.n	80202c4 <_printf_float+0x214>
 8020314:	9b05      	ldr	r3, [sp, #20]
 8020316:	465a      	mov	r2, fp
 8020318:	4631      	mov	r1, r6
 802031a:	4628      	mov	r0, r5
 802031c:	47b8      	blx	r7
 802031e:	3001      	adds	r0, #1
 8020320:	f43f af12 	beq.w	8020148 <_printf_float+0x98>
 8020324:	f04f 0a00 	mov.w	sl, #0
 8020328:	f104 0b1a 	add.w	fp, r4, #26
 802032c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802032e:	425b      	negs	r3, r3
 8020330:	4553      	cmp	r3, sl
 8020332:	dc01      	bgt.n	8020338 <_printf_float+0x288>
 8020334:	464b      	mov	r3, r9
 8020336:	e794      	b.n	8020262 <_printf_float+0x1b2>
 8020338:	2301      	movs	r3, #1
 802033a:	465a      	mov	r2, fp
 802033c:	4631      	mov	r1, r6
 802033e:	4628      	mov	r0, r5
 8020340:	47b8      	blx	r7
 8020342:	3001      	adds	r0, #1
 8020344:	f43f af00 	beq.w	8020148 <_printf_float+0x98>
 8020348:	f10a 0a01 	add.w	sl, sl, #1
 802034c:	e7ee      	b.n	802032c <_printf_float+0x27c>
 802034e:	bf00      	nop
 8020350:	ffffffff 	.word	0xffffffff
 8020354:	7fefffff 	.word	0x7fefffff
 8020358:	08026fe2 	.word	0x08026fe2
 802035c:	08026fe6 	.word	0x08026fe6
 8020360:	08026fea 	.word	0x08026fea
 8020364:	08026fee 	.word	0x08026fee
 8020368:	08026ff2 	.word	0x08026ff2
 802036c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802036e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8020372:	4553      	cmp	r3, sl
 8020374:	bfa8      	it	ge
 8020376:	4653      	movge	r3, sl
 8020378:	2b00      	cmp	r3, #0
 802037a:	4699      	mov	r9, r3
 802037c:	dc37      	bgt.n	80203ee <_printf_float+0x33e>
 802037e:	2300      	movs	r3, #0
 8020380:	9307      	str	r3, [sp, #28]
 8020382:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8020386:	f104 021a 	add.w	r2, r4, #26
 802038a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802038c:	9907      	ldr	r1, [sp, #28]
 802038e:	9306      	str	r3, [sp, #24]
 8020390:	eba3 0309 	sub.w	r3, r3, r9
 8020394:	428b      	cmp	r3, r1
 8020396:	dc31      	bgt.n	80203fc <_printf_float+0x34c>
 8020398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802039a:	459a      	cmp	sl, r3
 802039c:	dc3b      	bgt.n	8020416 <_printf_float+0x366>
 802039e:	6823      	ldr	r3, [r4, #0]
 80203a0:	07da      	lsls	r2, r3, #31
 80203a2:	d438      	bmi.n	8020416 <_printf_float+0x366>
 80203a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80203a6:	ebaa 0903 	sub.w	r9, sl, r3
 80203aa:	9b06      	ldr	r3, [sp, #24]
 80203ac:	ebaa 0303 	sub.w	r3, sl, r3
 80203b0:	4599      	cmp	r9, r3
 80203b2:	bfa8      	it	ge
 80203b4:	4699      	movge	r9, r3
 80203b6:	f1b9 0f00 	cmp.w	r9, #0
 80203ba:	dc34      	bgt.n	8020426 <_printf_float+0x376>
 80203bc:	f04f 0800 	mov.w	r8, #0
 80203c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80203c4:	f104 0b1a 	add.w	fp, r4, #26
 80203c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80203ca:	ebaa 0303 	sub.w	r3, sl, r3
 80203ce:	eba3 0309 	sub.w	r3, r3, r9
 80203d2:	4543      	cmp	r3, r8
 80203d4:	f77f af76 	ble.w	80202c4 <_printf_float+0x214>
 80203d8:	2301      	movs	r3, #1
 80203da:	465a      	mov	r2, fp
 80203dc:	4631      	mov	r1, r6
 80203de:	4628      	mov	r0, r5
 80203e0:	47b8      	blx	r7
 80203e2:	3001      	adds	r0, #1
 80203e4:	f43f aeb0 	beq.w	8020148 <_printf_float+0x98>
 80203e8:	f108 0801 	add.w	r8, r8, #1
 80203ec:	e7ec      	b.n	80203c8 <_printf_float+0x318>
 80203ee:	4642      	mov	r2, r8
 80203f0:	4631      	mov	r1, r6
 80203f2:	4628      	mov	r0, r5
 80203f4:	47b8      	blx	r7
 80203f6:	3001      	adds	r0, #1
 80203f8:	d1c1      	bne.n	802037e <_printf_float+0x2ce>
 80203fa:	e6a5      	b.n	8020148 <_printf_float+0x98>
 80203fc:	2301      	movs	r3, #1
 80203fe:	4631      	mov	r1, r6
 8020400:	4628      	mov	r0, r5
 8020402:	9206      	str	r2, [sp, #24]
 8020404:	47b8      	blx	r7
 8020406:	3001      	adds	r0, #1
 8020408:	f43f ae9e 	beq.w	8020148 <_printf_float+0x98>
 802040c:	9b07      	ldr	r3, [sp, #28]
 802040e:	9a06      	ldr	r2, [sp, #24]
 8020410:	3301      	adds	r3, #1
 8020412:	9307      	str	r3, [sp, #28]
 8020414:	e7b9      	b.n	802038a <_printf_float+0x2da>
 8020416:	9b05      	ldr	r3, [sp, #20]
 8020418:	465a      	mov	r2, fp
 802041a:	4631      	mov	r1, r6
 802041c:	4628      	mov	r0, r5
 802041e:	47b8      	blx	r7
 8020420:	3001      	adds	r0, #1
 8020422:	d1bf      	bne.n	80203a4 <_printf_float+0x2f4>
 8020424:	e690      	b.n	8020148 <_printf_float+0x98>
 8020426:	9a06      	ldr	r2, [sp, #24]
 8020428:	464b      	mov	r3, r9
 802042a:	4442      	add	r2, r8
 802042c:	4631      	mov	r1, r6
 802042e:	4628      	mov	r0, r5
 8020430:	47b8      	blx	r7
 8020432:	3001      	adds	r0, #1
 8020434:	d1c2      	bne.n	80203bc <_printf_float+0x30c>
 8020436:	e687      	b.n	8020148 <_printf_float+0x98>
 8020438:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 802043c:	f1b9 0f01 	cmp.w	r9, #1
 8020440:	dc01      	bgt.n	8020446 <_printf_float+0x396>
 8020442:	07db      	lsls	r3, r3, #31
 8020444:	d536      	bpl.n	80204b4 <_printf_float+0x404>
 8020446:	2301      	movs	r3, #1
 8020448:	4642      	mov	r2, r8
 802044a:	4631      	mov	r1, r6
 802044c:	4628      	mov	r0, r5
 802044e:	47b8      	blx	r7
 8020450:	3001      	adds	r0, #1
 8020452:	f43f ae79 	beq.w	8020148 <_printf_float+0x98>
 8020456:	9b05      	ldr	r3, [sp, #20]
 8020458:	465a      	mov	r2, fp
 802045a:	4631      	mov	r1, r6
 802045c:	4628      	mov	r0, r5
 802045e:	47b8      	blx	r7
 8020460:	3001      	adds	r0, #1
 8020462:	f43f ae71 	beq.w	8020148 <_printf_float+0x98>
 8020466:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 802046a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802046e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020472:	f109 39ff 	add.w	r9, r9, #4294967295
 8020476:	d018      	beq.n	80204aa <_printf_float+0x3fa>
 8020478:	464b      	mov	r3, r9
 802047a:	f108 0201 	add.w	r2, r8, #1
 802047e:	4631      	mov	r1, r6
 8020480:	4628      	mov	r0, r5
 8020482:	47b8      	blx	r7
 8020484:	3001      	adds	r0, #1
 8020486:	d10c      	bne.n	80204a2 <_printf_float+0x3f2>
 8020488:	e65e      	b.n	8020148 <_printf_float+0x98>
 802048a:	2301      	movs	r3, #1
 802048c:	465a      	mov	r2, fp
 802048e:	4631      	mov	r1, r6
 8020490:	4628      	mov	r0, r5
 8020492:	47b8      	blx	r7
 8020494:	3001      	adds	r0, #1
 8020496:	f43f ae57 	beq.w	8020148 <_printf_float+0x98>
 802049a:	f108 0801 	add.w	r8, r8, #1
 802049e:	45c8      	cmp	r8, r9
 80204a0:	dbf3      	blt.n	802048a <_printf_float+0x3da>
 80204a2:	4653      	mov	r3, sl
 80204a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80204a8:	e6dc      	b.n	8020264 <_printf_float+0x1b4>
 80204aa:	f04f 0800 	mov.w	r8, #0
 80204ae:	f104 0b1a 	add.w	fp, r4, #26
 80204b2:	e7f4      	b.n	802049e <_printf_float+0x3ee>
 80204b4:	2301      	movs	r3, #1
 80204b6:	4642      	mov	r2, r8
 80204b8:	e7e1      	b.n	802047e <_printf_float+0x3ce>
 80204ba:	2301      	movs	r3, #1
 80204bc:	464a      	mov	r2, r9
 80204be:	4631      	mov	r1, r6
 80204c0:	4628      	mov	r0, r5
 80204c2:	47b8      	blx	r7
 80204c4:	3001      	adds	r0, #1
 80204c6:	f43f ae3f 	beq.w	8020148 <_printf_float+0x98>
 80204ca:	f108 0801 	add.w	r8, r8, #1
 80204ce:	68e3      	ldr	r3, [r4, #12]
 80204d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80204d2:	1a5b      	subs	r3, r3, r1
 80204d4:	4543      	cmp	r3, r8
 80204d6:	dcf0      	bgt.n	80204ba <_printf_float+0x40a>
 80204d8:	e6f8      	b.n	80202cc <_printf_float+0x21c>
 80204da:	f04f 0800 	mov.w	r8, #0
 80204de:	f104 0919 	add.w	r9, r4, #25
 80204e2:	e7f4      	b.n	80204ce <_printf_float+0x41e>

080204e4 <_printf_common>:
 80204e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80204e8:	4616      	mov	r6, r2
 80204ea:	4698      	mov	r8, r3
 80204ec:	688a      	ldr	r2, [r1, #8]
 80204ee:	690b      	ldr	r3, [r1, #16]
 80204f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80204f4:	4293      	cmp	r3, r2
 80204f6:	bfb8      	it	lt
 80204f8:	4613      	movlt	r3, r2
 80204fa:	6033      	str	r3, [r6, #0]
 80204fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8020500:	4607      	mov	r7, r0
 8020502:	460c      	mov	r4, r1
 8020504:	b10a      	cbz	r2, 802050a <_printf_common+0x26>
 8020506:	3301      	adds	r3, #1
 8020508:	6033      	str	r3, [r6, #0]
 802050a:	6823      	ldr	r3, [r4, #0]
 802050c:	0699      	lsls	r1, r3, #26
 802050e:	bf42      	ittt	mi
 8020510:	6833      	ldrmi	r3, [r6, #0]
 8020512:	3302      	addmi	r3, #2
 8020514:	6033      	strmi	r3, [r6, #0]
 8020516:	6825      	ldr	r5, [r4, #0]
 8020518:	f015 0506 	ands.w	r5, r5, #6
 802051c:	d106      	bne.n	802052c <_printf_common+0x48>
 802051e:	f104 0a19 	add.w	sl, r4, #25
 8020522:	68e3      	ldr	r3, [r4, #12]
 8020524:	6832      	ldr	r2, [r6, #0]
 8020526:	1a9b      	subs	r3, r3, r2
 8020528:	42ab      	cmp	r3, r5
 802052a:	dc26      	bgt.n	802057a <_printf_common+0x96>
 802052c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8020530:	6822      	ldr	r2, [r4, #0]
 8020532:	3b00      	subs	r3, #0
 8020534:	bf18      	it	ne
 8020536:	2301      	movne	r3, #1
 8020538:	0692      	lsls	r2, r2, #26
 802053a:	d42b      	bmi.n	8020594 <_printf_common+0xb0>
 802053c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8020540:	4641      	mov	r1, r8
 8020542:	4638      	mov	r0, r7
 8020544:	47c8      	blx	r9
 8020546:	3001      	adds	r0, #1
 8020548:	d01e      	beq.n	8020588 <_printf_common+0xa4>
 802054a:	6823      	ldr	r3, [r4, #0]
 802054c:	6922      	ldr	r2, [r4, #16]
 802054e:	f003 0306 	and.w	r3, r3, #6
 8020552:	2b04      	cmp	r3, #4
 8020554:	bf02      	ittt	eq
 8020556:	68e5      	ldreq	r5, [r4, #12]
 8020558:	6833      	ldreq	r3, [r6, #0]
 802055a:	1aed      	subeq	r5, r5, r3
 802055c:	68a3      	ldr	r3, [r4, #8]
 802055e:	bf0c      	ite	eq
 8020560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020564:	2500      	movne	r5, #0
 8020566:	4293      	cmp	r3, r2
 8020568:	bfc4      	itt	gt
 802056a:	1a9b      	subgt	r3, r3, r2
 802056c:	18ed      	addgt	r5, r5, r3
 802056e:	2600      	movs	r6, #0
 8020570:	341a      	adds	r4, #26
 8020572:	42b5      	cmp	r5, r6
 8020574:	d11a      	bne.n	80205ac <_printf_common+0xc8>
 8020576:	2000      	movs	r0, #0
 8020578:	e008      	b.n	802058c <_printf_common+0xa8>
 802057a:	2301      	movs	r3, #1
 802057c:	4652      	mov	r2, sl
 802057e:	4641      	mov	r1, r8
 8020580:	4638      	mov	r0, r7
 8020582:	47c8      	blx	r9
 8020584:	3001      	adds	r0, #1
 8020586:	d103      	bne.n	8020590 <_printf_common+0xac>
 8020588:	f04f 30ff 	mov.w	r0, #4294967295
 802058c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020590:	3501      	adds	r5, #1
 8020592:	e7c6      	b.n	8020522 <_printf_common+0x3e>
 8020594:	18e1      	adds	r1, r4, r3
 8020596:	1c5a      	adds	r2, r3, #1
 8020598:	2030      	movs	r0, #48	@ 0x30
 802059a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802059e:	4422      	add	r2, r4
 80205a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80205a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80205a8:	3302      	adds	r3, #2
 80205aa:	e7c7      	b.n	802053c <_printf_common+0x58>
 80205ac:	2301      	movs	r3, #1
 80205ae:	4622      	mov	r2, r4
 80205b0:	4641      	mov	r1, r8
 80205b2:	4638      	mov	r0, r7
 80205b4:	47c8      	blx	r9
 80205b6:	3001      	adds	r0, #1
 80205b8:	d0e6      	beq.n	8020588 <_printf_common+0xa4>
 80205ba:	3601      	adds	r6, #1
 80205bc:	e7d9      	b.n	8020572 <_printf_common+0x8e>
	...

080205c0 <_printf_i>:
 80205c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80205c4:	7e0f      	ldrb	r7, [r1, #24]
 80205c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80205c8:	2f78      	cmp	r7, #120	@ 0x78
 80205ca:	4691      	mov	r9, r2
 80205cc:	4680      	mov	r8, r0
 80205ce:	460c      	mov	r4, r1
 80205d0:	469a      	mov	sl, r3
 80205d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80205d6:	d807      	bhi.n	80205e8 <_printf_i+0x28>
 80205d8:	2f62      	cmp	r7, #98	@ 0x62
 80205da:	d80a      	bhi.n	80205f2 <_printf_i+0x32>
 80205dc:	2f00      	cmp	r7, #0
 80205de:	f000 80d2 	beq.w	8020786 <_printf_i+0x1c6>
 80205e2:	2f58      	cmp	r7, #88	@ 0x58
 80205e4:	f000 80b9 	beq.w	802075a <_printf_i+0x19a>
 80205e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80205ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80205f0:	e03a      	b.n	8020668 <_printf_i+0xa8>
 80205f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80205f6:	2b15      	cmp	r3, #21
 80205f8:	d8f6      	bhi.n	80205e8 <_printf_i+0x28>
 80205fa:	a101      	add	r1, pc, #4	@ (adr r1, 8020600 <_printf_i+0x40>)
 80205fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020600:	08020659 	.word	0x08020659
 8020604:	0802066d 	.word	0x0802066d
 8020608:	080205e9 	.word	0x080205e9
 802060c:	080205e9 	.word	0x080205e9
 8020610:	080205e9 	.word	0x080205e9
 8020614:	080205e9 	.word	0x080205e9
 8020618:	0802066d 	.word	0x0802066d
 802061c:	080205e9 	.word	0x080205e9
 8020620:	080205e9 	.word	0x080205e9
 8020624:	080205e9 	.word	0x080205e9
 8020628:	080205e9 	.word	0x080205e9
 802062c:	0802076d 	.word	0x0802076d
 8020630:	08020697 	.word	0x08020697
 8020634:	08020727 	.word	0x08020727
 8020638:	080205e9 	.word	0x080205e9
 802063c:	080205e9 	.word	0x080205e9
 8020640:	0802078f 	.word	0x0802078f
 8020644:	080205e9 	.word	0x080205e9
 8020648:	08020697 	.word	0x08020697
 802064c:	080205e9 	.word	0x080205e9
 8020650:	080205e9 	.word	0x080205e9
 8020654:	0802072f 	.word	0x0802072f
 8020658:	6833      	ldr	r3, [r6, #0]
 802065a:	1d1a      	adds	r2, r3, #4
 802065c:	681b      	ldr	r3, [r3, #0]
 802065e:	6032      	str	r2, [r6, #0]
 8020660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020664:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8020668:	2301      	movs	r3, #1
 802066a:	e09d      	b.n	80207a8 <_printf_i+0x1e8>
 802066c:	6833      	ldr	r3, [r6, #0]
 802066e:	6820      	ldr	r0, [r4, #0]
 8020670:	1d19      	adds	r1, r3, #4
 8020672:	6031      	str	r1, [r6, #0]
 8020674:	0606      	lsls	r6, r0, #24
 8020676:	d501      	bpl.n	802067c <_printf_i+0xbc>
 8020678:	681d      	ldr	r5, [r3, #0]
 802067a:	e003      	b.n	8020684 <_printf_i+0xc4>
 802067c:	0645      	lsls	r5, r0, #25
 802067e:	d5fb      	bpl.n	8020678 <_printf_i+0xb8>
 8020680:	f9b3 5000 	ldrsh.w	r5, [r3]
 8020684:	2d00      	cmp	r5, #0
 8020686:	da03      	bge.n	8020690 <_printf_i+0xd0>
 8020688:	232d      	movs	r3, #45	@ 0x2d
 802068a:	426d      	negs	r5, r5
 802068c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020690:	4859      	ldr	r0, [pc, #356]	@ (80207f8 <_printf_i+0x238>)
 8020692:	230a      	movs	r3, #10
 8020694:	e011      	b.n	80206ba <_printf_i+0xfa>
 8020696:	6821      	ldr	r1, [r4, #0]
 8020698:	6833      	ldr	r3, [r6, #0]
 802069a:	0608      	lsls	r0, r1, #24
 802069c:	f853 5b04 	ldr.w	r5, [r3], #4
 80206a0:	d402      	bmi.n	80206a8 <_printf_i+0xe8>
 80206a2:	0649      	lsls	r1, r1, #25
 80206a4:	bf48      	it	mi
 80206a6:	b2ad      	uxthmi	r5, r5
 80206a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80206aa:	4853      	ldr	r0, [pc, #332]	@ (80207f8 <_printf_i+0x238>)
 80206ac:	6033      	str	r3, [r6, #0]
 80206ae:	bf14      	ite	ne
 80206b0:	230a      	movne	r3, #10
 80206b2:	2308      	moveq	r3, #8
 80206b4:	2100      	movs	r1, #0
 80206b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80206ba:	6866      	ldr	r6, [r4, #4]
 80206bc:	60a6      	str	r6, [r4, #8]
 80206be:	2e00      	cmp	r6, #0
 80206c0:	bfa2      	ittt	ge
 80206c2:	6821      	ldrge	r1, [r4, #0]
 80206c4:	f021 0104 	bicge.w	r1, r1, #4
 80206c8:	6021      	strge	r1, [r4, #0]
 80206ca:	b90d      	cbnz	r5, 80206d0 <_printf_i+0x110>
 80206cc:	2e00      	cmp	r6, #0
 80206ce:	d04b      	beq.n	8020768 <_printf_i+0x1a8>
 80206d0:	4616      	mov	r6, r2
 80206d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80206d6:	fb03 5711 	mls	r7, r3, r1, r5
 80206da:	5dc7      	ldrb	r7, [r0, r7]
 80206dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80206e0:	462f      	mov	r7, r5
 80206e2:	42bb      	cmp	r3, r7
 80206e4:	460d      	mov	r5, r1
 80206e6:	d9f4      	bls.n	80206d2 <_printf_i+0x112>
 80206e8:	2b08      	cmp	r3, #8
 80206ea:	d10b      	bne.n	8020704 <_printf_i+0x144>
 80206ec:	6823      	ldr	r3, [r4, #0]
 80206ee:	07df      	lsls	r7, r3, #31
 80206f0:	d508      	bpl.n	8020704 <_printf_i+0x144>
 80206f2:	6923      	ldr	r3, [r4, #16]
 80206f4:	6861      	ldr	r1, [r4, #4]
 80206f6:	4299      	cmp	r1, r3
 80206f8:	bfde      	ittt	le
 80206fa:	2330      	movle	r3, #48	@ 0x30
 80206fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020700:	f106 36ff 	addle.w	r6, r6, #4294967295
 8020704:	1b92      	subs	r2, r2, r6
 8020706:	6122      	str	r2, [r4, #16]
 8020708:	f8cd a000 	str.w	sl, [sp]
 802070c:	464b      	mov	r3, r9
 802070e:	aa03      	add	r2, sp, #12
 8020710:	4621      	mov	r1, r4
 8020712:	4640      	mov	r0, r8
 8020714:	f7ff fee6 	bl	80204e4 <_printf_common>
 8020718:	3001      	adds	r0, #1
 802071a:	d14a      	bne.n	80207b2 <_printf_i+0x1f2>
 802071c:	f04f 30ff 	mov.w	r0, #4294967295
 8020720:	b004      	add	sp, #16
 8020722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020726:	6823      	ldr	r3, [r4, #0]
 8020728:	f043 0320 	orr.w	r3, r3, #32
 802072c:	6023      	str	r3, [r4, #0]
 802072e:	4833      	ldr	r0, [pc, #204]	@ (80207fc <_printf_i+0x23c>)
 8020730:	2778      	movs	r7, #120	@ 0x78
 8020732:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8020736:	6823      	ldr	r3, [r4, #0]
 8020738:	6831      	ldr	r1, [r6, #0]
 802073a:	061f      	lsls	r7, r3, #24
 802073c:	f851 5b04 	ldr.w	r5, [r1], #4
 8020740:	d402      	bmi.n	8020748 <_printf_i+0x188>
 8020742:	065f      	lsls	r7, r3, #25
 8020744:	bf48      	it	mi
 8020746:	b2ad      	uxthmi	r5, r5
 8020748:	6031      	str	r1, [r6, #0]
 802074a:	07d9      	lsls	r1, r3, #31
 802074c:	bf44      	itt	mi
 802074e:	f043 0320 	orrmi.w	r3, r3, #32
 8020752:	6023      	strmi	r3, [r4, #0]
 8020754:	b11d      	cbz	r5, 802075e <_printf_i+0x19e>
 8020756:	2310      	movs	r3, #16
 8020758:	e7ac      	b.n	80206b4 <_printf_i+0xf4>
 802075a:	4827      	ldr	r0, [pc, #156]	@ (80207f8 <_printf_i+0x238>)
 802075c:	e7e9      	b.n	8020732 <_printf_i+0x172>
 802075e:	6823      	ldr	r3, [r4, #0]
 8020760:	f023 0320 	bic.w	r3, r3, #32
 8020764:	6023      	str	r3, [r4, #0]
 8020766:	e7f6      	b.n	8020756 <_printf_i+0x196>
 8020768:	4616      	mov	r6, r2
 802076a:	e7bd      	b.n	80206e8 <_printf_i+0x128>
 802076c:	6833      	ldr	r3, [r6, #0]
 802076e:	6825      	ldr	r5, [r4, #0]
 8020770:	6961      	ldr	r1, [r4, #20]
 8020772:	1d18      	adds	r0, r3, #4
 8020774:	6030      	str	r0, [r6, #0]
 8020776:	062e      	lsls	r6, r5, #24
 8020778:	681b      	ldr	r3, [r3, #0]
 802077a:	d501      	bpl.n	8020780 <_printf_i+0x1c0>
 802077c:	6019      	str	r1, [r3, #0]
 802077e:	e002      	b.n	8020786 <_printf_i+0x1c6>
 8020780:	0668      	lsls	r0, r5, #25
 8020782:	d5fb      	bpl.n	802077c <_printf_i+0x1bc>
 8020784:	8019      	strh	r1, [r3, #0]
 8020786:	2300      	movs	r3, #0
 8020788:	6123      	str	r3, [r4, #16]
 802078a:	4616      	mov	r6, r2
 802078c:	e7bc      	b.n	8020708 <_printf_i+0x148>
 802078e:	6833      	ldr	r3, [r6, #0]
 8020790:	1d1a      	adds	r2, r3, #4
 8020792:	6032      	str	r2, [r6, #0]
 8020794:	681e      	ldr	r6, [r3, #0]
 8020796:	6862      	ldr	r2, [r4, #4]
 8020798:	2100      	movs	r1, #0
 802079a:	4630      	mov	r0, r6
 802079c:	f7df fdb8 	bl	8000310 <memchr>
 80207a0:	b108      	cbz	r0, 80207a6 <_printf_i+0x1e6>
 80207a2:	1b80      	subs	r0, r0, r6
 80207a4:	6060      	str	r0, [r4, #4]
 80207a6:	6863      	ldr	r3, [r4, #4]
 80207a8:	6123      	str	r3, [r4, #16]
 80207aa:	2300      	movs	r3, #0
 80207ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80207b0:	e7aa      	b.n	8020708 <_printf_i+0x148>
 80207b2:	6923      	ldr	r3, [r4, #16]
 80207b4:	4632      	mov	r2, r6
 80207b6:	4649      	mov	r1, r9
 80207b8:	4640      	mov	r0, r8
 80207ba:	47d0      	blx	sl
 80207bc:	3001      	adds	r0, #1
 80207be:	d0ad      	beq.n	802071c <_printf_i+0x15c>
 80207c0:	6823      	ldr	r3, [r4, #0]
 80207c2:	079b      	lsls	r3, r3, #30
 80207c4:	d413      	bmi.n	80207ee <_printf_i+0x22e>
 80207c6:	68e0      	ldr	r0, [r4, #12]
 80207c8:	9b03      	ldr	r3, [sp, #12]
 80207ca:	4298      	cmp	r0, r3
 80207cc:	bfb8      	it	lt
 80207ce:	4618      	movlt	r0, r3
 80207d0:	e7a6      	b.n	8020720 <_printf_i+0x160>
 80207d2:	2301      	movs	r3, #1
 80207d4:	4632      	mov	r2, r6
 80207d6:	4649      	mov	r1, r9
 80207d8:	4640      	mov	r0, r8
 80207da:	47d0      	blx	sl
 80207dc:	3001      	adds	r0, #1
 80207de:	d09d      	beq.n	802071c <_printf_i+0x15c>
 80207e0:	3501      	adds	r5, #1
 80207e2:	68e3      	ldr	r3, [r4, #12]
 80207e4:	9903      	ldr	r1, [sp, #12]
 80207e6:	1a5b      	subs	r3, r3, r1
 80207e8:	42ab      	cmp	r3, r5
 80207ea:	dcf2      	bgt.n	80207d2 <_printf_i+0x212>
 80207ec:	e7eb      	b.n	80207c6 <_printf_i+0x206>
 80207ee:	2500      	movs	r5, #0
 80207f0:	f104 0619 	add.w	r6, r4, #25
 80207f4:	e7f5      	b.n	80207e2 <_printf_i+0x222>
 80207f6:	bf00      	nop
 80207f8:	08026ff4 	.word	0x08026ff4
 80207fc:	08027005 	.word	0x08027005

08020800 <std>:
 8020800:	2300      	movs	r3, #0
 8020802:	b510      	push	{r4, lr}
 8020804:	4604      	mov	r4, r0
 8020806:	e9c0 3300 	strd	r3, r3, [r0]
 802080a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802080e:	6083      	str	r3, [r0, #8]
 8020810:	8181      	strh	r1, [r0, #12]
 8020812:	6643      	str	r3, [r0, #100]	@ 0x64
 8020814:	81c2      	strh	r2, [r0, #14]
 8020816:	6183      	str	r3, [r0, #24]
 8020818:	4619      	mov	r1, r3
 802081a:	2208      	movs	r2, #8
 802081c:	305c      	adds	r0, #92	@ 0x5c
 802081e:	f000 fa57 	bl	8020cd0 <memset>
 8020822:	4b0d      	ldr	r3, [pc, #52]	@ (8020858 <std+0x58>)
 8020824:	6263      	str	r3, [r4, #36]	@ 0x24
 8020826:	4b0d      	ldr	r3, [pc, #52]	@ (802085c <std+0x5c>)
 8020828:	62a3      	str	r3, [r4, #40]	@ 0x28
 802082a:	4b0d      	ldr	r3, [pc, #52]	@ (8020860 <std+0x60>)
 802082c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802082e:	4b0d      	ldr	r3, [pc, #52]	@ (8020864 <std+0x64>)
 8020830:	6323      	str	r3, [r4, #48]	@ 0x30
 8020832:	4b0d      	ldr	r3, [pc, #52]	@ (8020868 <std+0x68>)
 8020834:	6224      	str	r4, [r4, #32]
 8020836:	429c      	cmp	r4, r3
 8020838:	d006      	beq.n	8020848 <std+0x48>
 802083a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802083e:	4294      	cmp	r4, r2
 8020840:	d002      	beq.n	8020848 <std+0x48>
 8020842:	33d0      	adds	r3, #208	@ 0xd0
 8020844:	429c      	cmp	r4, r3
 8020846:	d105      	bne.n	8020854 <std+0x54>
 8020848:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802084c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020850:	f000 bb0a 	b.w	8020e68 <__retarget_lock_init_recursive>
 8020854:	bd10      	pop	{r4, pc}
 8020856:	bf00      	nop
 8020858:	08020acd 	.word	0x08020acd
 802085c:	08020aef 	.word	0x08020aef
 8020860:	08020b27 	.word	0x08020b27
 8020864:	08020b4b 	.word	0x08020b4b
 8020868:	2400cc90 	.word	0x2400cc90

0802086c <stdio_exit_handler>:
 802086c:	4a02      	ldr	r2, [pc, #8]	@ (8020878 <stdio_exit_handler+0xc>)
 802086e:	4903      	ldr	r1, [pc, #12]	@ (802087c <stdio_exit_handler+0x10>)
 8020870:	4803      	ldr	r0, [pc, #12]	@ (8020880 <stdio_exit_handler+0x14>)
 8020872:	f000 b869 	b.w	8020948 <_fwalk_sglue>
 8020876:	bf00      	nop
 8020878:	24000038 	.word	0x24000038
 802087c:	080229c5 	.word	0x080229c5
 8020880:	24000048 	.word	0x24000048

08020884 <cleanup_stdio>:
 8020884:	6841      	ldr	r1, [r0, #4]
 8020886:	4b0c      	ldr	r3, [pc, #48]	@ (80208b8 <cleanup_stdio+0x34>)
 8020888:	4299      	cmp	r1, r3
 802088a:	b510      	push	{r4, lr}
 802088c:	4604      	mov	r4, r0
 802088e:	d001      	beq.n	8020894 <cleanup_stdio+0x10>
 8020890:	f002 f898 	bl	80229c4 <_fflush_r>
 8020894:	68a1      	ldr	r1, [r4, #8]
 8020896:	4b09      	ldr	r3, [pc, #36]	@ (80208bc <cleanup_stdio+0x38>)
 8020898:	4299      	cmp	r1, r3
 802089a:	d002      	beq.n	80208a2 <cleanup_stdio+0x1e>
 802089c:	4620      	mov	r0, r4
 802089e:	f002 f891 	bl	80229c4 <_fflush_r>
 80208a2:	68e1      	ldr	r1, [r4, #12]
 80208a4:	4b06      	ldr	r3, [pc, #24]	@ (80208c0 <cleanup_stdio+0x3c>)
 80208a6:	4299      	cmp	r1, r3
 80208a8:	d004      	beq.n	80208b4 <cleanup_stdio+0x30>
 80208aa:	4620      	mov	r0, r4
 80208ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80208b0:	f002 b888 	b.w	80229c4 <_fflush_r>
 80208b4:	bd10      	pop	{r4, pc}
 80208b6:	bf00      	nop
 80208b8:	2400cc90 	.word	0x2400cc90
 80208bc:	2400ccf8 	.word	0x2400ccf8
 80208c0:	2400cd60 	.word	0x2400cd60

080208c4 <global_stdio_init.part.0>:
 80208c4:	b510      	push	{r4, lr}
 80208c6:	4b0b      	ldr	r3, [pc, #44]	@ (80208f4 <global_stdio_init.part.0+0x30>)
 80208c8:	4c0b      	ldr	r4, [pc, #44]	@ (80208f8 <global_stdio_init.part.0+0x34>)
 80208ca:	4a0c      	ldr	r2, [pc, #48]	@ (80208fc <global_stdio_init.part.0+0x38>)
 80208cc:	601a      	str	r2, [r3, #0]
 80208ce:	4620      	mov	r0, r4
 80208d0:	2200      	movs	r2, #0
 80208d2:	2104      	movs	r1, #4
 80208d4:	f7ff ff94 	bl	8020800 <std>
 80208d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80208dc:	2201      	movs	r2, #1
 80208de:	2109      	movs	r1, #9
 80208e0:	f7ff ff8e 	bl	8020800 <std>
 80208e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80208e8:	2202      	movs	r2, #2
 80208ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80208ee:	2112      	movs	r1, #18
 80208f0:	f7ff bf86 	b.w	8020800 <std>
 80208f4:	2400cdc8 	.word	0x2400cdc8
 80208f8:	2400cc90 	.word	0x2400cc90
 80208fc:	0802086d 	.word	0x0802086d

08020900 <__sfp_lock_acquire>:
 8020900:	4801      	ldr	r0, [pc, #4]	@ (8020908 <__sfp_lock_acquire+0x8>)
 8020902:	f000 bab2 	b.w	8020e6a <__retarget_lock_acquire_recursive>
 8020906:	bf00      	nop
 8020908:	2400cdd1 	.word	0x2400cdd1

0802090c <__sfp_lock_release>:
 802090c:	4801      	ldr	r0, [pc, #4]	@ (8020914 <__sfp_lock_release+0x8>)
 802090e:	f000 baad 	b.w	8020e6c <__retarget_lock_release_recursive>
 8020912:	bf00      	nop
 8020914:	2400cdd1 	.word	0x2400cdd1

08020918 <__sinit>:
 8020918:	b510      	push	{r4, lr}
 802091a:	4604      	mov	r4, r0
 802091c:	f7ff fff0 	bl	8020900 <__sfp_lock_acquire>
 8020920:	6a23      	ldr	r3, [r4, #32]
 8020922:	b11b      	cbz	r3, 802092c <__sinit+0x14>
 8020924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020928:	f7ff bff0 	b.w	802090c <__sfp_lock_release>
 802092c:	4b04      	ldr	r3, [pc, #16]	@ (8020940 <__sinit+0x28>)
 802092e:	6223      	str	r3, [r4, #32]
 8020930:	4b04      	ldr	r3, [pc, #16]	@ (8020944 <__sinit+0x2c>)
 8020932:	681b      	ldr	r3, [r3, #0]
 8020934:	2b00      	cmp	r3, #0
 8020936:	d1f5      	bne.n	8020924 <__sinit+0xc>
 8020938:	f7ff ffc4 	bl	80208c4 <global_stdio_init.part.0>
 802093c:	e7f2      	b.n	8020924 <__sinit+0xc>
 802093e:	bf00      	nop
 8020940:	08020885 	.word	0x08020885
 8020944:	2400cdc8 	.word	0x2400cdc8

08020948 <_fwalk_sglue>:
 8020948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802094c:	4607      	mov	r7, r0
 802094e:	4688      	mov	r8, r1
 8020950:	4614      	mov	r4, r2
 8020952:	2600      	movs	r6, #0
 8020954:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020958:	f1b9 0901 	subs.w	r9, r9, #1
 802095c:	d505      	bpl.n	802096a <_fwalk_sglue+0x22>
 802095e:	6824      	ldr	r4, [r4, #0]
 8020960:	2c00      	cmp	r4, #0
 8020962:	d1f7      	bne.n	8020954 <_fwalk_sglue+0xc>
 8020964:	4630      	mov	r0, r6
 8020966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802096a:	89ab      	ldrh	r3, [r5, #12]
 802096c:	2b01      	cmp	r3, #1
 802096e:	d907      	bls.n	8020980 <_fwalk_sglue+0x38>
 8020970:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020974:	3301      	adds	r3, #1
 8020976:	d003      	beq.n	8020980 <_fwalk_sglue+0x38>
 8020978:	4629      	mov	r1, r5
 802097a:	4638      	mov	r0, r7
 802097c:	47c0      	blx	r8
 802097e:	4306      	orrs	r6, r0
 8020980:	3568      	adds	r5, #104	@ 0x68
 8020982:	e7e9      	b.n	8020958 <_fwalk_sglue+0x10>

08020984 <iprintf>:
 8020984:	b40f      	push	{r0, r1, r2, r3}
 8020986:	b507      	push	{r0, r1, r2, lr}
 8020988:	4906      	ldr	r1, [pc, #24]	@ (80209a4 <iprintf+0x20>)
 802098a:	ab04      	add	r3, sp, #16
 802098c:	6808      	ldr	r0, [r1, #0]
 802098e:	f853 2b04 	ldr.w	r2, [r3], #4
 8020992:	6881      	ldr	r1, [r0, #8]
 8020994:	9301      	str	r3, [sp, #4]
 8020996:	f001 fe79 	bl	802268c <_vfiprintf_r>
 802099a:	b003      	add	sp, #12
 802099c:	f85d eb04 	ldr.w	lr, [sp], #4
 80209a0:	b004      	add	sp, #16
 80209a2:	4770      	bx	lr
 80209a4:	24000044 	.word	0x24000044

080209a8 <_puts_r>:
 80209a8:	6a03      	ldr	r3, [r0, #32]
 80209aa:	b570      	push	{r4, r5, r6, lr}
 80209ac:	6884      	ldr	r4, [r0, #8]
 80209ae:	4605      	mov	r5, r0
 80209b0:	460e      	mov	r6, r1
 80209b2:	b90b      	cbnz	r3, 80209b8 <_puts_r+0x10>
 80209b4:	f7ff ffb0 	bl	8020918 <__sinit>
 80209b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80209ba:	07db      	lsls	r3, r3, #31
 80209bc:	d405      	bmi.n	80209ca <_puts_r+0x22>
 80209be:	89a3      	ldrh	r3, [r4, #12]
 80209c0:	0598      	lsls	r0, r3, #22
 80209c2:	d402      	bmi.n	80209ca <_puts_r+0x22>
 80209c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80209c6:	f000 fa50 	bl	8020e6a <__retarget_lock_acquire_recursive>
 80209ca:	89a3      	ldrh	r3, [r4, #12]
 80209cc:	0719      	lsls	r1, r3, #28
 80209ce:	d502      	bpl.n	80209d6 <_puts_r+0x2e>
 80209d0:	6923      	ldr	r3, [r4, #16]
 80209d2:	2b00      	cmp	r3, #0
 80209d4:	d135      	bne.n	8020a42 <_puts_r+0x9a>
 80209d6:	4621      	mov	r1, r4
 80209d8:	4628      	mov	r0, r5
 80209da:	f000 f8f9 	bl	8020bd0 <__swsetup_r>
 80209de:	b380      	cbz	r0, 8020a42 <_puts_r+0x9a>
 80209e0:	f04f 35ff 	mov.w	r5, #4294967295
 80209e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80209e6:	07da      	lsls	r2, r3, #31
 80209e8:	d405      	bmi.n	80209f6 <_puts_r+0x4e>
 80209ea:	89a3      	ldrh	r3, [r4, #12]
 80209ec:	059b      	lsls	r3, r3, #22
 80209ee:	d402      	bmi.n	80209f6 <_puts_r+0x4e>
 80209f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80209f2:	f000 fa3b 	bl	8020e6c <__retarget_lock_release_recursive>
 80209f6:	4628      	mov	r0, r5
 80209f8:	bd70      	pop	{r4, r5, r6, pc}
 80209fa:	2b00      	cmp	r3, #0
 80209fc:	da04      	bge.n	8020a08 <_puts_r+0x60>
 80209fe:	69a2      	ldr	r2, [r4, #24]
 8020a00:	429a      	cmp	r2, r3
 8020a02:	dc17      	bgt.n	8020a34 <_puts_r+0x8c>
 8020a04:	290a      	cmp	r1, #10
 8020a06:	d015      	beq.n	8020a34 <_puts_r+0x8c>
 8020a08:	6823      	ldr	r3, [r4, #0]
 8020a0a:	1c5a      	adds	r2, r3, #1
 8020a0c:	6022      	str	r2, [r4, #0]
 8020a0e:	7019      	strb	r1, [r3, #0]
 8020a10:	68a3      	ldr	r3, [r4, #8]
 8020a12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020a16:	3b01      	subs	r3, #1
 8020a18:	60a3      	str	r3, [r4, #8]
 8020a1a:	2900      	cmp	r1, #0
 8020a1c:	d1ed      	bne.n	80209fa <_puts_r+0x52>
 8020a1e:	2b00      	cmp	r3, #0
 8020a20:	da11      	bge.n	8020a46 <_puts_r+0x9e>
 8020a22:	4622      	mov	r2, r4
 8020a24:	210a      	movs	r1, #10
 8020a26:	4628      	mov	r0, r5
 8020a28:	f000 f893 	bl	8020b52 <__swbuf_r>
 8020a2c:	3001      	adds	r0, #1
 8020a2e:	d0d7      	beq.n	80209e0 <_puts_r+0x38>
 8020a30:	250a      	movs	r5, #10
 8020a32:	e7d7      	b.n	80209e4 <_puts_r+0x3c>
 8020a34:	4622      	mov	r2, r4
 8020a36:	4628      	mov	r0, r5
 8020a38:	f000 f88b 	bl	8020b52 <__swbuf_r>
 8020a3c:	3001      	adds	r0, #1
 8020a3e:	d1e7      	bne.n	8020a10 <_puts_r+0x68>
 8020a40:	e7ce      	b.n	80209e0 <_puts_r+0x38>
 8020a42:	3e01      	subs	r6, #1
 8020a44:	e7e4      	b.n	8020a10 <_puts_r+0x68>
 8020a46:	6823      	ldr	r3, [r4, #0]
 8020a48:	1c5a      	adds	r2, r3, #1
 8020a4a:	6022      	str	r2, [r4, #0]
 8020a4c:	220a      	movs	r2, #10
 8020a4e:	701a      	strb	r2, [r3, #0]
 8020a50:	e7ee      	b.n	8020a30 <_puts_r+0x88>
	...

08020a54 <puts>:
 8020a54:	4b02      	ldr	r3, [pc, #8]	@ (8020a60 <puts+0xc>)
 8020a56:	4601      	mov	r1, r0
 8020a58:	6818      	ldr	r0, [r3, #0]
 8020a5a:	f7ff bfa5 	b.w	80209a8 <_puts_r>
 8020a5e:	bf00      	nop
 8020a60:	24000044 	.word	0x24000044

08020a64 <sniprintf>:
 8020a64:	b40c      	push	{r2, r3}
 8020a66:	b530      	push	{r4, r5, lr}
 8020a68:	4b17      	ldr	r3, [pc, #92]	@ (8020ac8 <sniprintf+0x64>)
 8020a6a:	1e0c      	subs	r4, r1, #0
 8020a6c:	681d      	ldr	r5, [r3, #0]
 8020a6e:	b09d      	sub	sp, #116	@ 0x74
 8020a70:	da08      	bge.n	8020a84 <sniprintf+0x20>
 8020a72:	238b      	movs	r3, #139	@ 0x8b
 8020a74:	602b      	str	r3, [r5, #0]
 8020a76:	f04f 30ff 	mov.w	r0, #4294967295
 8020a7a:	b01d      	add	sp, #116	@ 0x74
 8020a7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020a80:	b002      	add	sp, #8
 8020a82:	4770      	bx	lr
 8020a84:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8020a88:	f8ad 3014 	strh.w	r3, [sp, #20]
 8020a8c:	bf14      	ite	ne
 8020a8e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8020a92:	4623      	moveq	r3, r4
 8020a94:	9304      	str	r3, [sp, #16]
 8020a96:	9307      	str	r3, [sp, #28]
 8020a98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8020a9c:	9002      	str	r0, [sp, #8]
 8020a9e:	9006      	str	r0, [sp, #24]
 8020aa0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020aa4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8020aa6:	ab21      	add	r3, sp, #132	@ 0x84
 8020aa8:	a902      	add	r1, sp, #8
 8020aaa:	4628      	mov	r0, r5
 8020aac:	9301      	str	r3, [sp, #4]
 8020aae:	f001 fcc7 	bl	8022440 <_svfiprintf_r>
 8020ab2:	1c43      	adds	r3, r0, #1
 8020ab4:	bfbc      	itt	lt
 8020ab6:	238b      	movlt	r3, #139	@ 0x8b
 8020ab8:	602b      	strlt	r3, [r5, #0]
 8020aba:	2c00      	cmp	r4, #0
 8020abc:	d0dd      	beq.n	8020a7a <sniprintf+0x16>
 8020abe:	9b02      	ldr	r3, [sp, #8]
 8020ac0:	2200      	movs	r2, #0
 8020ac2:	701a      	strb	r2, [r3, #0]
 8020ac4:	e7d9      	b.n	8020a7a <sniprintf+0x16>
 8020ac6:	bf00      	nop
 8020ac8:	24000044 	.word	0x24000044

08020acc <__sread>:
 8020acc:	b510      	push	{r4, lr}
 8020ace:	460c      	mov	r4, r1
 8020ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020ad4:	f000 f980 	bl	8020dd8 <_read_r>
 8020ad8:	2800      	cmp	r0, #0
 8020ada:	bfab      	itete	ge
 8020adc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8020ade:	89a3      	ldrhlt	r3, [r4, #12]
 8020ae0:	181b      	addge	r3, r3, r0
 8020ae2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8020ae6:	bfac      	ite	ge
 8020ae8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8020aea:	81a3      	strhlt	r3, [r4, #12]
 8020aec:	bd10      	pop	{r4, pc}

08020aee <__swrite>:
 8020aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020af2:	461f      	mov	r7, r3
 8020af4:	898b      	ldrh	r3, [r1, #12]
 8020af6:	05db      	lsls	r3, r3, #23
 8020af8:	4605      	mov	r5, r0
 8020afa:	460c      	mov	r4, r1
 8020afc:	4616      	mov	r6, r2
 8020afe:	d505      	bpl.n	8020b0c <__swrite+0x1e>
 8020b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020b04:	2302      	movs	r3, #2
 8020b06:	2200      	movs	r2, #0
 8020b08:	f000 f954 	bl	8020db4 <_lseek_r>
 8020b0c:	89a3      	ldrh	r3, [r4, #12]
 8020b0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020b12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8020b16:	81a3      	strh	r3, [r4, #12]
 8020b18:	4632      	mov	r2, r6
 8020b1a:	463b      	mov	r3, r7
 8020b1c:	4628      	mov	r0, r5
 8020b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020b22:	f000 b96b 	b.w	8020dfc <_write_r>

08020b26 <__sseek>:
 8020b26:	b510      	push	{r4, lr}
 8020b28:	460c      	mov	r4, r1
 8020b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020b2e:	f000 f941 	bl	8020db4 <_lseek_r>
 8020b32:	1c43      	adds	r3, r0, #1
 8020b34:	89a3      	ldrh	r3, [r4, #12]
 8020b36:	bf15      	itete	ne
 8020b38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8020b3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8020b3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8020b42:	81a3      	strheq	r3, [r4, #12]
 8020b44:	bf18      	it	ne
 8020b46:	81a3      	strhne	r3, [r4, #12]
 8020b48:	bd10      	pop	{r4, pc}

08020b4a <__sclose>:
 8020b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020b4e:	f000 b8cb 	b.w	8020ce8 <_close_r>

08020b52 <__swbuf_r>:
 8020b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b54:	460e      	mov	r6, r1
 8020b56:	4614      	mov	r4, r2
 8020b58:	4605      	mov	r5, r0
 8020b5a:	b118      	cbz	r0, 8020b64 <__swbuf_r+0x12>
 8020b5c:	6a03      	ldr	r3, [r0, #32]
 8020b5e:	b90b      	cbnz	r3, 8020b64 <__swbuf_r+0x12>
 8020b60:	f7ff feda 	bl	8020918 <__sinit>
 8020b64:	69a3      	ldr	r3, [r4, #24]
 8020b66:	60a3      	str	r3, [r4, #8]
 8020b68:	89a3      	ldrh	r3, [r4, #12]
 8020b6a:	071a      	lsls	r2, r3, #28
 8020b6c:	d501      	bpl.n	8020b72 <__swbuf_r+0x20>
 8020b6e:	6923      	ldr	r3, [r4, #16]
 8020b70:	b943      	cbnz	r3, 8020b84 <__swbuf_r+0x32>
 8020b72:	4621      	mov	r1, r4
 8020b74:	4628      	mov	r0, r5
 8020b76:	f000 f82b 	bl	8020bd0 <__swsetup_r>
 8020b7a:	b118      	cbz	r0, 8020b84 <__swbuf_r+0x32>
 8020b7c:	f04f 37ff 	mov.w	r7, #4294967295
 8020b80:	4638      	mov	r0, r7
 8020b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020b84:	6823      	ldr	r3, [r4, #0]
 8020b86:	6922      	ldr	r2, [r4, #16]
 8020b88:	1a98      	subs	r0, r3, r2
 8020b8a:	6963      	ldr	r3, [r4, #20]
 8020b8c:	b2f6      	uxtb	r6, r6
 8020b8e:	4283      	cmp	r3, r0
 8020b90:	4637      	mov	r7, r6
 8020b92:	dc05      	bgt.n	8020ba0 <__swbuf_r+0x4e>
 8020b94:	4621      	mov	r1, r4
 8020b96:	4628      	mov	r0, r5
 8020b98:	f001 ff14 	bl	80229c4 <_fflush_r>
 8020b9c:	2800      	cmp	r0, #0
 8020b9e:	d1ed      	bne.n	8020b7c <__swbuf_r+0x2a>
 8020ba0:	68a3      	ldr	r3, [r4, #8]
 8020ba2:	3b01      	subs	r3, #1
 8020ba4:	60a3      	str	r3, [r4, #8]
 8020ba6:	6823      	ldr	r3, [r4, #0]
 8020ba8:	1c5a      	adds	r2, r3, #1
 8020baa:	6022      	str	r2, [r4, #0]
 8020bac:	701e      	strb	r6, [r3, #0]
 8020bae:	6962      	ldr	r2, [r4, #20]
 8020bb0:	1c43      	adds	r3, r0, #1
 8020bb2:	429a      	cmp	r2, r3
 8020bb4:	d004      	beq.n	8020bc0 <__swbuf_r+0x6e>
 8020bb6:	89a3      	ldrh	r3, [r4, #12]
 8020bb8:	07db      	lsls	r3, r3, #31
 8020bba:	d5e1      	bpl.n	8020b80 <__swbuf_r+0x2e>
 8020bbc:	2e0a      	cmp	r6, #10
 8020bbe:	d1df      	bne.n	8020b80 <__swbuf_r+0x2e>
 8020bc0:	4621      	mov	r1, r4
 8020bc2:	4628      	mov	r0, r5
 8020bc4:	f001 fefe 	bl	80229c4 <_fflush_r>
 8020bc8:	2800      	cmp	r0, #0
 8020bca:	d0d9      	beq.n	8020b80 <__swbuf_r+0x2e>
 8020bcc:	e7d6      	b.n	8020b7c <__swbuf_r+0x2a>
	...

08020bd0 <__swsetup_r>:
 8020bd0:	b538      	push	{r3, r4, r5, lr}
 8020bd2:	4b29      	ldr	r3, [pc, #164]	@ (8020c78 <__swsetup_r+0xa8>)
 8020bd4:	4605      	mov	r5, r0
 8020bd6:	6818      	ldr	r0, [r3, #0]
 8020bd8:	460c      	mov	r4, r1
 8020bda:	b118      	cbz	r0, 8020be4 <__swsetup_r+0x14>
 8020bdc:	6a03      	ldr	r3, [r0, #32]
 8020bde:	b90b      	cbnz	r3, 8020be4 <__swsetup_r+0x14>
 8020be0:	f7ff fe9a 	bl	8020918 <__sinit>
 8020be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020be8:	0719      	lsls	r1, r3, #28
 8020bea:	d422      	bmi.n	8020c32 <__swsetup_r+0x62>
 8020bec:	06da      	lsls	r2, r3, #27
 8020bee:	d407      	bmi.n	8020c00 <__swsetup_r+0x30>
 8020bf0:	2209      	movs	r2, #9
 8020bf2:	602a      	str	r2, [r5, #0]
 8020bf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020bf8:	81a3      	strh	r3, [r4, #12]
 8020bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8020bfe:	e033      	b.n	8020c68 <__swsetup_r+0x98>
 8020c00:	0758      	lsls	r0, r3, #29
 8020c02:	d512      	bpl.n	8020c2a <__swsetup_r+0x5a>
 8020c04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020c06:	b141      	cbz	r1, 8020c1a <__swsetup_r+0x4a>
 8020c08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020c0c:	4299      	cmp	r1, r3
 8020c0e:	d002      	beq.n	8020c16 <__swsetup_r+0x46>
 8020c10:	4628      	mov	r0, r5
 8020c12:	f000 ff37 	bl	8021a84 <_free_r>
 8020c16:	2300      	movs	r3, #0
 8020c18:	6363      	str	r3, [r4, #52]	@ 0x34
 8020c1a:	89a3      	ldrh	r3, [r4, #12]
 8020c1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8020c20:	81a3      	strh	r3, [r4, #12]
 8020c22:	2300      	movs	r3, #0
 8020c24:	6063      	str	r3, [r4, #4]
 8020c26:	6923      	ldr	r3, [r4, #16]
 8020c28:	6023      	str	r3, [r4, #0]
 8020c2a:	89a3      	ldrh	r3, [r4, #12]
 8020c2c:	f043 0308 	orr.w	r3, r3, #8
 8020c30:	81a3      	strh	r3, [r4, #12]
 8020c32:	6923      	ldr	r3, [r4, #16]
 8020c34:	b94b      	cbnz	r3, 8020c4a <__swsetup_r+0x7a>
 8020c36:	89a3      	ldrh	r3, [r4, #12]
 8020c38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8020c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020c40:	d003      	beq.n	8020c4a <__swsetup_r+0x7a>
 8020c42:	4621      	mov	r1, r4
 8020c44:	4628      	mov	r0, r5
 8020c46:	f001 ff1d 	bl	8022a84 <__smakebuf_r>
 8020c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020c4e:	f013 0201 	ands.w	r2, r3, #1
 8020c52:	d00a      	beq.n	8020c6a <__swsetup_r+0x9a>
 8020c54:	2200      	movs	r2, #0
 8020c56:	60a2      	str	r2, [r4, #8]
 8020c58:	6962      	ldr	r2, [r4, #20]
 8020c5a:	4252      	negs	r2, r2
 8020c5c:	61a2      	str	r2, [r4, #24]
 8020c5e:	6922      	ldr	r2, [r4, #16]
 8020c60:	b942      	cbnz	r2, 8020c74 <__swsetup_r+0xa4>
 8020c62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8020c66:	d1c5      	bne.n	8020bf4 <__swsetup_r+0x24>
 8020c68:	bd38      	pop	{r3, r4, r5, pc}
 8020c6a:	0799      	lsls	r1, r3, #30
 8020c6c:	bf58      	it	pl
 8020c6e:	6962      	ldrpl	r2, [r4, #20]
 8020c70:	60a2      	str	r2, [r4, #8]
 8020c72:	e7f4      	b.n	8020c5e <__swsetup_r+0x8e>
 8020c74:	2000      	movs	r0, #0
 8020c76:	e7f7      	b.n	8020c68 <__swsetup_r+0x98>
 8020c78:	24000044 	.word	0x24000044

08020c7c <memcmp>:
 8020c7c:	b510      	push	{r4, lr}
 8020c7e:	3901      	subs	r1, #1
 8020c80:	4402      	add	r2, r0
 8020c82:	4290      	cmp	r0, r2
 8020c84:	d101      	bne.n	8020c8a <memcmp+0xe>
 8020c86:	2000      	movs	r0, #0
 8020c88:	e005      	b.n	8020c96 <memcmp+0x1a>
 8020c8a:	7803      	ldrb	r3, [r0, #0]
 8020c8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020c90:	42a3      	cmp	r3, r4
 8020c92:	d001      	beq.n	8020c98 <memcmp+0x1c>
 8020c94:	1b18      	subs	r0, r3, r4
 8020c96:	bd10      	pop	{r4, pc}
 8020c98:	3001      	adds	r0, #1
 8020c9a:	e7f2      	b.n	8020c82 <memcmp+0x6>

08020c9c <memmove>:
 8020c9c:	4288      	cmp	r0, r1
 8020c9e:	b510      	push	{r4, lr}
 8020ca0:	eb01 0402 	add.w	r4, r1, r2
 8020ca4:	d902      	bls.n	8020cac <memmove+0x10>
 8020ca6:	4284      	cmp	r4, r0
 8020ca8:	4623      	mov	r3, r4
 8020caa:	d807      	bhi.n	8020cbc <memmove+0x20>
 8020cac:	1e43      	subs	r3, r0, #1
 8020cae:	42a1      	cmp	r1, r4
 8020cb0:	d008      	beq.n	8020cc4 <memmove+0x28>
 8020cb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020cb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020cba:	e7f8      	b.n	8020cae <memmove+0x12>
 8020cbc:	4402      	add	r2, r0
 8020cbe:	4601      	mov	r1, r0
 8020cc0:	428a      	cmp	r2, r1
 8020cc2:	d100      	bne.n	8020cc6 <memmove+0x2a>
 8020cc4:	bd10      	pop	{r4, pc}
 8020cc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020cca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020cce:	e7f7      	b.n	8020cc0 <memmove+0x24>

08020cd0 <memset>:
 8020cd0:	4402      	add	r2, r0
 8020cd2:	4603      	mov	r3, r0
 8020cd4:	4293      	cmp	r3, r2
 8020cd6:	d100      	bne.n	8020cda <memset+0xa>
 8020cd8:	4770      	bx	lr
 8020cda:	f803 1b01 	strb.w	r1, [r3], #1
 8020cde:	e7f9      	b.n	8020cd4 <memset+0x4>

08020ce0 <_localeconv_r>:
 8020ce0:	4800      	ldr	r0, [pc, #0]	@ (8020ce4 <_localeconv_r+0x4>)
 8020ce2:	4770      	bx	lr
 8020ce4:	24000184 	.word	0x24000184

08020ce8 <_close_r>:
 8020ce8:	b538      	push	{r3, r4, r5, lr}
 8020cea:	4d06      	ldr	r5, [pc, #24]	@ (8020d04 <_close_r+0x1c>)
 8020cec:	2300      	movs	r3, #0
 8020cee:	4604      	mov	r4, r0
 8020cf0:	4608      	mov	r0, r1
 8020cf2:	602b      	str	r3, [r5, #0]
 8020cf4:	f7e0 fc52 	bl	800159c <_close>
 8020cf8:	1c43      	adds	r3, r0, #1
 8020cfa:	d102      	bne.n	8020d02 <_close_r+0x1a>
 8020cfc:	682b      	ldr	r3, [r5, #0]
 8020cfe:	b103      	cbz	r3, 8020d02 <_close_r+0x1a>
 8020d00:	6023      	str	r3, [r4, #0]
 8020d02:	bd38      	pop	{r3, r4, r5, pc}
 8020d04:	2400cdcc 	.word	0x2400cdcc

08020d08 <_reclaim_reent>:
 8020d08:	4b29      	ldr	r3, [pc, #164]	@ (8020db0 <_reclaim_reent+0xa8>)
 8020d0a:	681b      	ldr	r3, [r3, #0]
 8020d0c:	4283      	cmp	r3, r0
 8020d0e:	b570      	push	{r4, r5, r6, lr}
 8020d10:	4604      	mov	r4, r0
 8020d12:	d04b      	beq.n	8020dac <_reclaim_reent+0xa4>
 8020d14:	69c3      	ldr	r3, [r0, #28]
 8020d16:	b1ab      	cbz	r3, 8020d44 <_reclaim_reent+0x3c>
 8020d18:	68db      	ldr	r3, [r3, #12]
 8020d1a:	b16b      	cbz	r3, 8020d38 <_reclaim_reent+0x30>
 8020d1c:	2500      	movs	r5, #0
 8020d1e:	69e3      	ldr	r3, [r4, #28]
 8020d20:	68db      	ldr	r3, [r3, #12]
 8020d22:	5959      	ldr	r1, [r3, r5]
 8020d24:	2900      	cmp	r1, #0
 8020d26:	d13b      	bne.n	8020da0 <_reclaim_reent+0x98>
 8020d28:	3504      	adds	r5, #4
 8020d2a:	2d80      	cmp	r5, #128	@ 0x80
 8020d2c:	d1f7      	bne.n	8020d1e <_reclaim_reent+0x16>
 8020d2e:	69e3      	ldr	r3, [r4, #28]
 8020d30:	4620      	mov	r0, r4
 8020d32:	68d9      	ldr	r1, [r3, #12]
 8020d34:	f000 fea6 	bl	8021a84 <_free_r>
 8020d38:	69e3      	ldr	r3, [r4, #28]
 8020d3a:	6819      	ldr	r1, [r3, #0]
 8020d3c:	b111      	cbz	r1, 8020d44 <_reclaim_reent+0x3c>
 8020d3e:	4620      	mov	r0, r4
 8020d40:	f000 fea0 	bl	8021a84 <_free_r>
 8020d44:	6961      	ldr	r1, [r4, #20]
 8020d46:	b111      	cbz	r1, 8020d4e <_reclaim_reent+0x46>
 8020d48:	4620      	mov	r0, r4
 8020d4a:	f000 fe9b 	bl	8021a84 <_free_r>
 8020d4e:	69e1      	ldr	r1, [r4, #28]
 8020d50:	b111      	cbz	r1, 8020d58 <_reclaim_reent+0x50>
 8020d52:	4620      	mov	r0, r4
 8020d54:	f000 fe96 	bl	8021a84 <_free_r>
 8020d58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8020d5a:	b111      	cbz	r1, 8020d62 <_reclaim_reent+0x5a>
 8020d5c:	4620      	mov	r0, r4
 8020d5e:	f000 fe91 	bl	8021a84 <_free_r>
 8020d62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020d64:	b111      	cbz	r1, 8020d6c <_reclaim_reent+0x64>
 8020d66:	4620      	mov	r0, r4
 8020d68:	f000 fe8c 	bl	8021a84 <_free_r>
 8020d6c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8020d6e:	b111      	cbz	r1, 8020d76 <_reclaim_reent+0x6e>
 8020d70:	4620      	mov	r0, r4
 8020d72:	f000 fe87 	bl	8021a84 <_free_r>
 8020d76:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8020d78:	b111      	cbz	r1, 8020d80 <_reclaim_reent+0x78>
 8020d7a:	4620      	mov	r0, r4
 8020d7c:	f000 fe82 	bl	8021a84 <_free_r>
 8020d80:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8020d82:	b111      	cbz	r1, 8020d8a <_reclaim_reent+0x82>
 8020d84:	4620      	mov	r0, r4
 8020d86:	f000 fe7d 	bl	8021a84 <_free_r>
 8020d8a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8020d8c:	b111      	cbz	r1, 8020d94 <_reclaim_reent+0x8c>
 8020d8e:	4620      	mov	r0, r4
 8020d90:	f000 fe78 	bl	8021a84 <_free_r>
 8020d94:	6a23      	ldr	r3, [r4, #32]
 8020d96:	b14b      	cbz	r3, 8020dac <_reclaim_reent+0xa4>
 8020d98:	4620      	mov	r0, r4
 8020d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020d9e:	4718      	bx	r3
 8020da0:	680e      	ldr	r6, [r1, #0]
 8020da2:	4620      	mov	r0, r4
 8020da4:	f000 fe6e 	bl	8021a84 <_free_r>
 8020da8:	4631      	mov	r1, r6
 8020daa:	e7bb      	b.n	8020d24 <_reclaim_reent+0x1c>
 8020dac:	bd70      	pop	{r4, r5, r6, pc}
 8020dae:	bf00      	nop
 8020db0:	24000044 	.word	0x24000044

08020db4 <_lseek_r>:
 8020db4:	b538      	push	{r3, r4, r5, lr}
 8020db6:	4d07      	ldr	r5, [pc, #28]	@ (8020dd4 <_lseek_r+0x20>)
 8020db8:	4604      	mov	r4, r0
 8020dba:	4608      	mov	r0, r1
 8020dbc:	4611      	mov	r1, r2
 8020dbe:	2200      	movs	r2, #0
 8020dc0:	602a      	str	r2, [r5, #0]
 8020dc2:	461a      	mov	r2, r3
 8020dc4:	f7e0 fc11 	bl	80015ea <_lseek>
 8020dc8:	1c43      	adds	r3, r0, #1
 8020dca:	d102      	bne.n	8020dd2 <_lseek_r+0x1e>
 8020dcc:	682b      	ldr	r3, [r5, #0]
 8020dce:	b103      	cbz	r3, 8020dd2 <_lseek_r+0x1e>
 8020dd0:	6023      	str	r3, [r4, #0]
 8020dd2:	bd38      	pop	{r3, r4, r5, pc}
 8020dd4:	2400cdcc 	.word	0x2400cdcc

08020dd8 <_read_r>:
 8020dd8:	b538      	push	{r3, r4, r5, lr}
 8020dda:	4d07      	ldr	r5, [pc, #28]	@ (8020df8 <_read_r+0x20>)
 8020ddc:	4604      	mov	r4, r0
 8020dde:	4608      	mov	r0, r1
 8020de0:	4611      	mov	r1, r2
 8020de2:	2200      	movs	r2, #0
 8020de4:	602a      	str	r2, [r5, #0]
 8020de6:	461a      	mov	r2, r3
 8020de8:	f7e0 fbbb 	bl	8001562 <_read>
 8020dec:	1c43      	adds	r3, r0, #1
 8020dee:	d102      	bne.n	8020df6 <_read_r+0x1e>
 8020df0:	682b      	ldr	r3, [r5, #0]
 8020df2:	b103      	cbz	r3, 8020df6 <_read_r+0x1e>
 8020df4:	6023      	str	r3, [r4, #0]
 8020df6:	bd38      	pop	{r3, r4, r5, pc}
 8020df8:	2400cdcc 	.word	0x2400cdcc

08020dfc <_write_r>:
 8020dfc:	b538      	push	{r3, r4, r5, lr}
 8020dfe:	4d07      	ldr	r5, [pc, #28]	@ (8020e1c <_write_r+0x20>)
 8020e00:	4604      	mov	r4, r0
 8020e02:	4608      	mov	r0, r1
 8020e04:	4611      	mov	r1, r2
 8020e06:	2200      	movs	r2, #0
 8020e08:	602a      	str	r2, [r5, #0]
 8020e0a:	461a      	mov	r2, r3
 8020e0c:	f7df fdfe 	bl	8000a0c <_write>
 8020e10:	1c43      	adds	r3, r0, #1
 8020e12:	d102      	bne.n	8020e1a <_write_r+0x1e>
 8020e14:	682b      	ldr	r3, [r5, #0]
 8020e16:	b103      	cbz	r3, 8020e1a <_write_r+0x1e>
 8020e18:	6023      	str	r3, [r4, #0]
 8020e1a:	bd38      	pop	{r3, r4, r5, pc}
 8020e1c:	2400cdcc 	.word	0x2400cdcc

08020e20 <__libc_init_array>:
 8020e20:	b570      	push	{r4, r5, r6, lr}
 8020e22:	4d0d      	ldr	r5, [pc, #52]	@ (8020e58 <__libc_init_array+0x38>)
 8020e24:	4c0d      	ldr	r4, [pc, #52]	@ (8020e5c <__libc_init_array+0x3c>)
 8020e26:	1b64      	subs	r4, r4, r5
 8020e28:	10a4      	asrs	r4, r4, #2
 8020e2a:	2600      	movs	r6, #0
 8020e2c:	42a6      	cmp	r6, r4
 8020e2e:	d109      	bne.n	8020e44 <__libc_init_array+0x24>
 8020e30:	4d0b      	ldr	r5, [pc, #44]	@ (8020e60 <__libc_init_array+0x40>)
 8020e32:	4c0c      	ldr	r4, [pc, #48]	@ (8020e64 <__libc_init_array+0x44>)
 8020e34:	f001 ff48 	bl	8022cc8 <_init>
 8020e38:	1b64      	subs	r4, r4, r5
 8020e3a:	10a4      	asrs	r4, r4, #2
 8020e3c:	2600      	movs	r6, #0
 8020e3e:	42a6      	cmp	r6, r4
 8020e40:	d105      	bne.n	8020e4e <__libc_init_array+0x2e>
 8020e42:	bd70      	pop	{r4, r5, r6, pc}
 8020e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8020e48:	4798      	blx	r3
 8020e4a:	3601      	adds	r6, #1
 8020e4c:	e7ee      	b.n	8020e2c <__libc_init_array+0xc>
 8020e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8020e52:	4798      	blx	r3
 8020e54:	3601      	adds	r6, #1
 8020e56:	e7f2      	b.n	8020e3e <__libc_init_array+0x1e>
 8020e58:	08027244 	.word	0x08027244
 8020e5c:	08027244 	.word	0x08027244
 8020e60:	08027244 	.word	0x08027244
 8020e64:	08027248 	.word	0x08027248

08020e68 <__retarget_lock_init_recursive>:
 8020e68:	4770      	bx	lr

08020e6a <__retarget_lock_acquire_recursive>:
 8020e6a:	4770      	bx	lr

08020e6c <__retarget_lock_release_recursive>:
 8020e6c:	4770      	bx	lr

08020e6e <memcpy>:
 8020e6e:	440a      	add	r2, r1
 8020e70:	4291      	cmp	r1, r2
 8020e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8020e76:	d100      	bne.n	8020e7a <memcpy+0xc>
 8020e78:	4770      	bx	lr
 8020e7a:	b510      	push	{r4, lr}
 8020e7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020e80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020e84:	4291      	cmp	r1, r2
 8020e86:	d1f9      	bne.n	8020e7c <memcpy+0xe>
 8020e88:	bd10      	pop	{r4, pc}
	...

08020e8c <__assert_func>:
 8020e8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020e8e:	4614      	mov	r4, r2
 8020e90:	461a      	mov	r2, r3
 8020e92:	4b09      	ldr	r3, [pc, #36]	@ (8020eb8 <__assert_func+0x2c>)
 8020e94:	681b      	ldr	r3, [r3, #0]
 8020e96:	4605      	mov	r5, r0
 8020e98:	68d8      	ldr	r0, [r3, #12]
 8020e9a:	b954      	cbnz	r4, 8020eb2 <__assert_func+0x26>
 8020e9c:	4b07      	ldr	r3, [pc, #28]	@ (8020ebc <__assert_func+0x30>)
 8020e9e:	461c      	mov	r4, r3
 8020ea0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020ea4:	9100      	str	r1, [sp, #0]
 8020ea6:	462b      	mov	r3, r5
 8020ea8:	4905      	ldr	r1, [pc, #20]	@ (8020ec0 <__assert_func+0x34>)
 8020eaa:	f001 fdb3 	bl	8022a14 <fiprintf>
 8020eae:	f001 fe57 	bl	8022b60 <abort>
 8020eb2:	4b04      	ldr	r3, [pc, #16]	@ (8020ec4 <__assert_func+0x38>)
 8020eb4:	e7f4      	b.n	8020ea0 <__assert_func+0x14>
 8020eb6:	bf00      	nop
 8020eb8:	24000044 	.word	0x24000044
 8020ebc:	08027051 	.word	0x08027051
 8020ec0:	08027023 	.word	0x08027023
 8020ec4:	08027016 	.word	0x08027016

08020ec8 <quorem>:
 8020ec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ecc:	6903      	ldr	r3, [r0, #16]
 8020ece:	690c      	ldr	r4, [r1, #16]
 8020ed0:	42a3      	cmp	r3, r4
 8020ed2:	4607      	mov	r7, r0
 8020ed4:	db7e      	blt.n	8020fd4 <quorem+0x10c>
 8020ed6:	3c01      	subs	r4, #1
 8020ed8:	f101 0814 	add.w	r8, r1, #20
 8020edc:	00a3      	lsls	r3, r4, #2
 8020ede:	f100 0514 	add.w	r5, r0, #20
 8020ee2:	9300      	str	r3, [sp, #0]
 8020ee4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020ee8:	9301      	str	r3, [sp, #4]
 8020eea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020eee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020ef2:	3301      	adds	r3, #1
 8020ef4:	429a      	cmp	r2, r3
 8020ef6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020efa:	fbb2 f6f3 	udiv	r6, r2, r3
 8020efe:	d32e      	bcc.n	8020f5e <quorem+0x96>
 8020f00:	f04f 0a00 	mov.w	sl, #0
 8020f04:	46c4      	mov	ip, r8
 8020f06:	46ae      	mov	lr, r5
 8020f08:	46d3      	mov	fp, sl
 8020f0a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8020f0e:	b298      	uxth	r0, r3
 8020f10:	fb06 a000 	mla	r0, r6, r0, sl
 8020f14:	0c02      	lsrs	r2, r0, #16
 8020f16:	0c1b      	lsrs	r3, r3, #16
 8020f18:	fb06 2303 	mla	r3, r6, r3, r2
 8020f1c:	f8de 2000 	ldr.w	r2, [lr]
 8020f20:	b280      	uxth	r0, r0
 8020f22:	b292      	uxth	r2, r2
 8020f24:	1a12      	subs	r2, r2, r0
 8020f26:	445a      	add	r2, fp
 8020f28:	f8de 0000 	ldr.w	r0, [lr]
 8020f2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8020f30:	b29b      	uxth	r3, r3
 8020f32:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8020f36:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8020f3a:	b292      	uxth	r2, r2
 8020f3c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8020f40:	45e1      	cmp	r9, ip
 8020f42:	f84e 2b04 	str.w	r2, [lr], #4
 8020f46:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8020f4a:	d2de      	bcs.n	8020f0a <quorem+0x42>
 8020f4c:	9b00      	ldr	r3, [sp, #0]
 8020f4e:	58eb      	ldr	r3, [r5, r3]
 8020f50:	b92b      	cbnz	r3, 8020f5e <quorem+0x96>
 8020f52:	9b01      	ldr	r3, [sp, #4]
 8020f54:	3b04      	subs	r3, #4
 8020f56:	429d      	cmp	r5, r3
 8020f58:	461a      	mov	r2, r3
 8020f5a:	d32f      	bcc.n	8020fbc <quorem+0xf4>
 8020f5c:	613c      	str	r4, [r7, #16]
 8020f5e:	4638      	mov	r0, r7
 8020f60:	f001 f90a 	bl	8022178 <__mcmp>
 8020f64:	2800      	cmp	r0, #0
 8020f66:	db25      	blt.n	8020fb4 <quorem+0xec>
 8020f68:	4629      	mov	r1, r5
 8020f6a:	2000      	movs	r0, #0
 8020f6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8020f70:	f8d1 c000 	ldr.w	ip, [r1]
 8020f74:	fa1f fe82 	uxth.w	lr, r2
 8020f78:	fa1f f38c 	uxth.w	r3, ip
 8020f7c:	eba3 030e 	sub.w	r3, r3, lr
 8020f80:	4403      	add	r3, r0
 8020f82:	0c12      	lsrs	r2, r2, #16
 8020f84:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8020f88:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8020f8c:	b29b      	uxth	r3, r3
 8020f8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020f92:	45c1      	cmp	r9, r8
 8020f94:	f841 3b04 	str.w	r3, [r1], #4
 8020f98:	ea4f 4022 	mov.w	r0, r2, asr #16
 8020f9c:	d2e6      	bcs.n	8020f6c <quorem+0xa4>
 8020f9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020fa2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020fa6:	b922      	cbnz	r2, 8020fb2 <quorem+0xea>
 8020fa8:	3b04      	subs	r3, #4
 8020faa:	429d      	cmp	r5, r3
 8020fac:	461a      	mov	r2, r3
 8020fae:	d30b      	bcc.n	8020fc8 <quorem+0x100>
 8020fb0:	613c      	str	r4, [r7, #16]
 8020fb2:	3601      	adds	r6, #1
 8020fb4:	4630      	mov	r0, r6
 8020fb6:	b003      	add	sp, #12
 8020fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fbc:	6812      	ldr	r2, [r2, #0]
 8020fbe:	3b04      	subs	r3, #4
 8020fc0:	2a00      	cmp	r2, #0
 8020fc2:	d1cb      	bne.n	8020f5c <quorem+0x94>
 8020fc4:	3c01      	subs	r4, #1
 8020fc6:	e7c6      	b.n	8020f56 <quorem+0x8e>
 8020fc8:	6812      	ldr	r2, [r2, #0]
 8020fca:	3b04      	subs	r3, #4
 8020fcc:	2a00      	cmp	r2, #0
 8020fce:	d1ef      	bne.n	8020fb0 <quorem+0xe8>
 8020fd0:	3c01      	subs	r4, #1
 8020fd2:	e7ea      	b.n	8020faa <quorem+0xe2>
 8020fd4:	2000      	movs	r0, #0
 8020fd6:	e7ee      	b.n	8020fb6 <quorem+0xee>

08020fd8 <_dtoa_r>:
 8020fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fdc:	ed2d 8b02 	vpush	{d8}
 8020fe0:	69c7      	ldr	r7, [r0, #28]
 8020fe2:	b091      	sub	sp, #68	@ 0x44
 8020fe4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8020fe8:	ec55 4b10 	vmov	r4, r5, d0
 8020fec:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8020fee:	9107      	str	r1, [sp, #28]
 8020ff0:	4681      	mov	r9, r0
 8020ff2:	9209      	str	r2, [sp, #36]	@ 0x24
 8020ff4:	930d      	str	r3, [sp, #52]	@ 0x34
 8020ff6:	b97f      	cbnz	r7, 8021018 <_dtoa_r+0x40>
 8020ff8:	2010      	movs	r0, #16
 8020ffa:	f000 fd8d 	bl	8021b18 <malloc>
 8020ffe:	4602      	mov	r2, r0
 8021000:	f8c9 001c 	str.w	r0, [r9, #28]
 8021004:	b920      	cbnz	r0, 8021010 <_dtoa_r+0x38>
 8021006:	4ba0      	ldr	r3, [pc, #640]	@ (8021288 <_dtoa_r+0x2b0>)
 8021008:	21ef      	movs	r1, #239	@ 0xef
 802100a:	48a0      	ldr	r0, [pc, #640]	@ (802128c <_dtoa_r+0x2b4>)
 802100c:	f7ff ff3e 	bl	8020e8c <__assert_func>
 8021010:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8021014:	6007      	str	r7, [r0, #0]
 8021016:	60c7      	str	r7, [r0, #12]
 8021018:	f8d9 301c 	ldr.w	r3, [r9, #28]
 802101c:	6819      	ldr	r1, [r3, #0]
 802101e:	b159      	cbz	r1, 8021038 <_dtoa_r+0x60>
 8021020:	685a      	ldr	r2, [r3, #4]
 8021022:	604a      	str	r2, [r1, #4]
 8021024:	2301      	movs	r3, #1
 8021026:	4093      	lsls	r3, r2
 8021028:	608b      	str	r3, [r1, #8]
 802102a:	4648      	mov	r0, r9
 802102c:	f000 fe6a 	bl	8021d04 <_Bfree>
 8021030:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8021034:	2200      	movs	r2, #0
 8021036:	601a      	str	r2, [r3, #0]
 8021038:	1e2b      	subs	r3, r5, #0
 802103a:	bfbb      	ittet	lt
 802103c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8021040:	9303      	strlt	r3, [sp, #12]
 8021042:	2300      	movge	r3, #0
 8021044:	2201      	movlt	r2, #1
 8021046:	bfac      	ite	ge
 8021048:	6033      	strge	r3, [r6, #0]
 802104a:	6032      	strlt	r2, [r6, #0]
 802104c:	4b90      	ldr	r3, [pc, #576]	@ (8021290 <_dtoa_r+0x2b8>)
 802104e:	9e03      	ldr	r6, [sp, #12]
 8021050:	43b3      	bics	r3, r6
 8021052:	d110      	bne.n	8021076 <_dtoa_r+0x9e>
 8021054:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021056:	f242 730f 	movw	r3, #9999	@ 0x270f
 802105a:	6013      	str	r3, [r2, #0]
 802105c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8021060:	4323      	orrs	r3, r4
 8021062:	f000 84de 	beq.w	8021a22 <_dtoa_r+0xa4a>
 8021066:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021068:	4f8a      	ldr	r7, [pc, #552]	@ (8021294 <_dtoa_r+0x2bc>)
 802106a:	2b00      	cmp	r3, #0
 802106c:	f000 84e0 	beq.w	8021a30 <_dtoa_r+0xa58>
 8021070:	1cfb      	adds	r3, r7, #3
 8021072:	f000 bcdb 	b.w	8021a2c <_dtoa_r+0xa54>
 8021076:	ed9d 8b02 	vldr	d8, [sp, #8]
 802107a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802107e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021082:	d10a      	bne.n	802109a <_dtoa_r+0xc2>
 8021084:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021086:	2301      	movs	r3, #1
 8021088:	6013      	str	r3, [r2, #0]
 802108a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802108c:	b113      	cbz	r3, 8021094 <_dtoa_r+0xbc>
 802108e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8021090:	4b81      	ldr	r3, [pc, #516]	@ (8021298 <_dtoa_r+0x2c0>)
 8021092:	6013      	str	r3, [r2, #0]
 8021094:	4f81      	ldr	r7, [pc, #516]	@ (802129c <_dtoa_r+0x2c4>)
 8021096:	f000 bccb 	b.w	8021a30 <_dtoa_r+0xa58>
 802109a:	aa0e      	add	r2, sp, #56	@ 0x38
 802109c:	a90f      	add	r1, sp, #60	@ 0x3c
 802109e:	4648      	mov	r0, r9
 80210a0:	eeb0 0b48 	vmov.f64	d0, d8
 80210a4:	f001 f918 	bl	80222d8 <__d2b>
 80210a8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80210ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80210ae:	9001      	str	r0, [sp, #4]
 80210b0:	2b00      	cmp	r3, #0
 80210b2:	d045      	beq.n	8021140 <_dtoa_r+0x168>
 80210b4:	eeb0 7b48 	vmov.f64	d7, d8
 80210b8:	ee18 1a90 	vmov	r1, s17
 80210bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80210c0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80210c4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80210c8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80210cc:	2500      	movs	r5, #0
 80210ce:	ee07 1a90 	vmov	s15, r1
 80210d2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80210d6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8021270 <_dtoa_r+0x298>
 80210da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80210de:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8021278 <_dtoa_r+0x2a0>
 80210e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80210e6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8021280 <_dtoa_r+0x2a8>
 80210ea:	ee07 3a90 	vmov	s15, r3
 80210ee:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80210f2:	eeb0 7b46 	vmov.f64	d7, d6
 80210f6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80210fa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80210fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8021102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021106:	ee16 8a90 	vmov	r8, s13
 802110a:	d508      	bpl.n	802111e <_dtoa_r+0x146>
 802110c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8021110:	eeb4 6b47 	vcmp.f64	d6, d7
 8021114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021118:	bf18      	it	ne
 802111a:	f108 38ff 	addne.w	r8, r8, #4294967295
 802111e:	f1b8 0f16 	cmp.w	r8, #22
 8021122:	d82b      	bhi.n	802117c <_dtoa_r+0x1a4>
 8021124:	495e      	ldr	r1, [pc, #376]	@ (80212a0 <_dtoa_r+0x2c8>)
 8021126:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 802112a:	ed91 7b00 	vldr	d7, [r1]
 802112e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8021132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021136:	d501      	bpl.n	802113c <_dtoa_r+0x164>
 8021138:	f108 38ff 	add.w	r8, r8, #4294967295
 802113c:	2100      	movs	r1, #0
 802113e:	e01e      	b.n	802117e <_dtoa_r+0x1a6>
 8021140:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021142:	4413      	add	r3, r2
 8021144:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8021148:	2920      	cmp	r1, #32
 802114a:	bfc1      	itttt	gt
 802114c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8021150:	408e      	lslgt	r6, r1
 8021152:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8021156:	fa24 f101 	lsrgt.w	r1, r4, r1
 802115a:	bfd6      	itet	le
 802115c:	f1c1 0120 	rsble	r1, r1, #32
 8021160:	4331      	orrgt	r1, r6
 8021162:	fa04 f101 	lslle.w	r1, r4, r1
 8021166:	ee07 1a90 	vmov	s15, r1
 802116a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802116e:	3b01      	subs	r3, #1
 8021170:	ee17 1a90 	vmov	r1, s15
 8021174:	2501      	movs	r5, #1
 8021176:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 802117a:	e7a8      	b.n	80210ce <_dtoa_r+0xf6>
 802117c:	2101      	movs	r1, #1
 802117e:	1ad2      	subs	r2, r2, r3
 8021180:	1e53      	subs	r3, r2, #1
 8021182:	9306      	str	r3, [sp, #24]
 8021184:	bf45      	ittet	mi
 8021186:	f1c2 0301 	rsbmi	r3, r2, #1
 802118a:	9305      	strmi	r3, [sp, #20]
 802118c:	2300      	movpl	r3, #0
 802118e:	2300      	movmi	r3, #0
 8021190:	bf4c      	ite	mi
 8021192:	9306      	strmi	r3, [sp, #24]
 8021194:	9305      	strpl	r3, [sp, #20]
 8021196:	f1b8 0f00 	cmp.w	r8, #0
 802119a:	910c      	str	r1, [sp, #48]	@ 0x30
 802119c:	db18      	blt.n	80211d0 <_dtoa_r+0x1f8>
 802119e:	9b06      	ldr	r3, [sp, #24]
 80211a0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80211a4:	4443      	add	r3, r8
 80211a6:	9306      	str	r3, [sp, #24]
 80211a8:	2300      	movs	r3, #0
 80211aa:	9a07      	ldr	r2, [sp, #28]
 80211ac:	2a09      	cmp	r2, #9
 80211ae:	d849      	bhi.n	8021244 <_dtoa_r+0x26c>
 80211b0:	2a05      	cmp	r2, #5
 80211b2:	bfc4      	itt	gt
 80211b4:	3a04      	subgt	r2, #4
 80211b6:	9207      	strgt	r2, [sp, #28]
 80211b8:	9a07      	ldr	r2, [sp, #28]
 80211ba:	f1a2 0202 	sub.w	r2, r2, #2
 80211be:	bfcc      	ite	gt
 80211c0:	2400      	movgt	r4, #0
 80211c2:	2401      	movle	r4, #1
 80211c4:	2a03      	cmp	r2, #3
 80211c6:	d848      	bhi.n	802125a <_dtoa_r+0x282>
 80211c8:	e8df f002 	tbb	[pc, r2]
 80211cc:	3a2c2e0b 	.word	0x3a2c2e0b
 80211d0:	9b05      	ldr	r3, [sp, #20]
 80211d2:	2200      	movs	r2, #0
 80211d4:	eba3 0308 	sub.w	r3, r3, r8
 80211d8:	9305      	str	r3, [sp, #20]
 80211da:	920a      	str	r2, [sp, #40]	@ 0x28
 80211dc:	f1c8 0300 	rsb	r3, r8, #0
 80211e0:	e7e3      	b.n	80211aa <_dtoa_r+0x1d2>
 80211e2:	2200      	movs	r2, #0
 80211e4:	9208      	str	r2, [sp, #32]
 80211e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80211e8:	2a00      	cmp	r2, #0
 80211ea:	dc39      	bgt.n	8021260 <_dtoa_r+0x288>
 80211ec:	f04f 0b01 	mov.w	fp, #1
 80211f0:	46da      	mov	sl, fp
 80211f2:	465a      	mov	r2, fp
 80211f4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80211f8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80211fc:	2100      	movs	r1, #0
 80211fe:	2004      	movs	r0, #4
 8021200:	f100 0614 	add.w	r6, r0, #20
 8021204:	4296      	cmp	r6, r2
 8021206:	d930      	bls.n	802126a <_dtoa_r+0x292>
 8021208:	6079      	str	r1, [r7, #4]
 802120a:	4648      	mov	r0, r9
 802120c:	9304      	str	r3, [sp, #16]
 802120e:	f000 fd39 	bl	8021c84 <_Balloc>
 8021212:	9b04      	ldr	r3, [sp, #16]
 8021214:	4607      	mov	r7, r0
 8021216:	2800      	cmp	r0, #0
 8021218:	d146      	bne.n	80212a8 <_dtoa_r+0x2d0>
 802121a:	4b22      	ldr	r3, [pc, #136]	@ (80212a4 <_dtoa_r+0x2cc>)
 802121c:	4602      	mov	r2, r0
 802121e:	f240 11af 	movw	r1, #431	@ 0x1af
 8021222:	e6f2      	b.n	802100a <_dtoa_r+0x32>
 8021224:	2201      	movs	r2, #1
 8021226:	e7dd      	b.n	80211e4 <_dtoa_r+0x20c>
 8021228:	2200      	movs	r2, #0
 802122a:	9208      	str	r2, [sp, #32]
 802122c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802122e:	eb08 0b02 	add.w	fp, r8, r2
 8021232:	f10b 0a01 	add.w	sl, fp, #1
 8021236:	4652      	mov	r2, sl
 8021238:	2a01      	cmp	r2, #1
 802123a:	bfb8      	it	lt
 802123c:	2201      	movlt	r2, #1
 802123e:	e7db      	b.n	80211f8 <_dtoa_r+0x220>
 8021240:	2201      	movs	r2, #1
 8021242:	e7f2      	b.n	802122a <_dtoa_r+0x252>
 8021244:	2401      	movs	r4, #1
 8021246:	2200      	movs	r2, #0
 8021248:	e9cd 2407 	strd	r2, r4, [sp, #28]
 802124c:	f04f 3bff 	mov.w	fp, #4294967295
 8021250:	2100      	movs	r1, #0
 8021252:	46da      	mov	sl, fp
 8021254:	2212      	movs	r2, #18
 8021256:	9109      	str	r1, [sp, #36]	@ 0x24
 8021258:	e7ce      	b.n	80211f8 <_dtoa_r+0x220>
 802125a:	2201      	movs	r2, #1
 802125c:	9208      	str	r2, [sp, #32]
 802125e:	e7f5      	b.n	802124c <_dtoa_r+0x274>
 8021260:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8021264:	46da      	mov	sl, fp
 8021266:	465a      	mov	r2, fp
 8021268:	e7c6      	b.n	80211f8 <_dtoa_r+0x220>
 802126a:	3101      	adds	r1, #1
 802126c:	0040      	lsls	r0, r0, #1
 802126e:	e7c7      	b.n	8021200 <_dtoa_r+0x228>
 8021270:	636f4361 	.word	0x636f4361
 8021274:	3fd287a7 	.word	0x3fd287a7
 8021278:	8b60c8b3 	.word	0x8b60c8b3
 802127c:	3fc68a28 	.word	0x3fc68a28
 8021280:	509f79fb 	.word	0x509f79fb
 8021284:	3fd34413 	.word	0x3fd34413
 8021288:	08026e72 	.word	0x08026e72
 802128c:	0802705f 	.word	0x0802705f
 8021290:	7ff00000 	.word	0x7ff00000
 8021294:	0802705b 	.word	0x0802705b
 8021298:	08026ff3 	.word	0x08026ff3
 802129c:	08026ff2 	.word	0x08026ff2
 80212a0:	08027158 	.word	0x08027158
 80212a4:	080270b7 	.word	0x080270b7
 80212a8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80212ac:	f1ba 0f0e 	cmp.w	sl, #14
 80212b0:	6010      	str	r0, [r2, #0]
 80212b2:	d86f      	bhi.n	8021394 <_dtoa_r+0x3bc>
 80212b4:	2c00      	cmp	r4, #0
 80212b6:	d06d      	beq.n	8021394 <_dtoa_r+0x3bc>
 80212b8:	f1b8 0f00 	cmp.w	r8, #0
 80212bc:	f340 80c2 	ble.w	8021444 <_dtoa_r+0x46c>
 80212c0:	4aca      	ldr	r2, [pc, #808]	@ (80215ec <_dtoa_r+0x614>)
 80212c2:	f008 010f 	and.w	r1, r8, #15
 80212c6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80212ca:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80212ce:	ed92 7b00 	vldr	d7, [r2]
 80212d2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80212d6:	f000 80a9 	beq.w	802142c <_dtoa_r+0x454>
 80212da:	4ac5      	ldr	r2, [pc, #788]	@ (80215f0 <_dtoa_r+0x618>)
 80212dc:	ed92 6b08 	vldr	d6, [r2, #32]
 80212e0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80212e4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80212e8:	f001 010f 	and.w	r1, r1, #15
 80212ec:	2203      	movs	r2, #3
 80212ee:	48c0      	ldr	r0, [pc, #768]	@ (80215f0 <_dtoa_r+0x618>)
 80212f0:	2900      	cmp	r1, #0
 80212f2:	f040 809d 	bne.w	8021430 <_dtoa_r+0x458>
 80212f6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80212fa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80212fe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021302:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8021304:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021308:	2900      	cmp	r1, #0
 802130a:	f000 80c1 	beq.w	8021490 <_dtoa_r+0x4b8>
 802130e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8021312:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8021316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802131a:	f140 80b9 	bpl.w	8021490 <_dtoa_r+0x4b8>
 802131e:	f1ba 0f00 	cmp.w	sl, #0
 8021322:	f000 80b5 	beq.w	8021490 <_dtoa_r+0x4b8>
 8021326:	f1bb 0f00 	cmp.w	fp, #0
 802132a:	dd31      	ble.n	8021390 <_dtoa_r+0x3b8>
 802132c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8021330:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021334:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021338:	f108 31ff 	add.w	r1, r8, #4294967295
 802133c:	9104      	str	r1, [sp, #16]
 802133e:	3201      	adds	r2, #1
 8021340:	465c      	mov	r4, fp
 8021342:	ed9d 6b02 	vldr	d6, [sp, #8]
 8021346:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 802134a:	ee07 2a90 	vmov	s15, r2
 802134e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8021352:	eea7 5b06 	vfma.f64	d5, d7, d6
 8021356:	ee15 2a90 	vmov	r2, s11
 802135a:	ec51 0b15 	vmov	r0, r1, d5
 802135e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8021362:	2c00      	cmp	r4, #0
 8021364:	f040 8098 	bne.w	8021498 <_dtoa_r+0x4c0>
 8021368:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 802136c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8021370:	ec41 0b17 	vmov	d7, r0, r1
 8021374:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802137c:	f300 8261 	bgt.w	8021842 <_dtoa_r+0x86a>
 8021380:	eeb1 7b47 	vneg.f64	d7, d7
 8021384:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802138c:	f100 80f5 	bmi.w	802157a <_dtoa_r+0x5a2>
 8021390:	ed8d 8b02 	vstr	d8, [sp, #8]
 8021394:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021396:	2a00      	cmp	r2, #0
 8021398:	f2c0 812c 	blt.w	80215f4 <_dtoa_r+0x61c>
 802139c:	f1b8 0f0e 	cmp.w	r8, #14
 80213a0:	f300 8128 	bgt.w	80215f4 <_dtoa_r+0x61c>
 80213a4:	4b91      	ldr	r3, [pc, #580]	@ (80215ec <_dtoa_r+0x614>)
 80213a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80213aa:	ed93 6b00 	vldr	d6, [r3]
 80213ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80213b0:	2b00      	cmp	r3, #0
 80213b2:	da03      	bge.n	80213bc <_dtoa_r+0x3e4>
 80213b4:	f1ba 0f00 	cmp.w	sl, #0
 80213b8:	f340 80d2 	ble.w	8021560 <_dtoa_r+0x588>
 80213bc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80213c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80213c4:	463e      	mov	r6, r7
 80213c6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80213ca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80213ce:	ee15 3a10 	vmov	r3, s10
 80213d2:	3330      	adds	r3, #48	@ 0x30
 80213d4:	f806 3b01 	strb.w	r3, [r6], #1
 80213d8:	1bf3      	subs	r3, r6, r7
 80213da:	459a      	cmp	sl, r3
 80213dc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80213e0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80213e4:	f040 80f8 	bne.w	80215d8 <_dtoa_r+0x600>
 80213e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80213ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80213f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213f4:	f300 80dd 	bgt.w	80215b2 <_dtoa_r+0x5da>
 80213f8:	eeb4 7b46 	vcmp.f64	d7, d6
 80213fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021400:	d104      	bne.n	802140c <_dtoa_r+0x434>
 8021402:	ee15 3a10 	vmov	r3, s10
 8021406:	07db      	lsls	r3, r3, #31
 8021408:	f100 80d3 	bmi.w	80215b2 <_dtoa_r+0x5da>
 802140c:	9901      	ldr	r1, [sp, #4]
 802140e:	4648      	mov	r0, r9
 8021410:	f000 fc78 	bl	8021d04 <_Bfree>
 8021414:	2300      	movs	r3, #0
 8021416:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021418:	7033      	strb	r3, [r6, #0]
 802141a:	f108 0301 	add.w	r3, r8, #1
 802141e:	6013      	str	r3, [r2, #0]
 8021420:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021422:	2b00      	cmp	r3, #0
 8021424:	f000 8304 	beq.w	8021a30 <_dtoa_r+0xa58>
 8021428:	601e      	str	r6, [r3, #0]
 802142a:	e301      	b.n	8021a30 <_dtoa_r+0xa58>
 802142c:	2202      	movs	r2, #2
 802142e:	e75e      	b.n	80212ee <_dtoa_r+0x316>
 8021430:	07cc      	lsls	r4, r1, #31
 8021432:	d504      	bpl.n	802143e <_dtoa_r+0x466>
 8021434:	ed90 6b00 	vldr	d6, [r0]
 8021438:	3201      	adds	r2, #1
 802143a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802143e:	1049      	asrs	r1, r1, #1
 8021440:	3008      	adds	r0, #8
 8021442:	e755      	b.n	80212f0 <_dtoa_r+0x318>
 8021444:	d022      	beq.n	802148c <_dtoa_r+0x4b4>
 8021446:	f1c8 0100 	rsb	r1, r8, #0
 802144a:	4a68      	ldr	r2, [pc, #416]	@ (80215ec <_dtoa_r+0x614>)
 802144c:	f001 000f 	and.w	r0, r1, #15
 8021450:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8021454:	ed92 7b00 	vldr	d7, [r2]
 8021458:	ee28 7b07 	vmul.f64	d7, d8, d7
 802145c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021460:	4863      	ldr	r0, [pc, #396]	@ (80215f0 <_dtoa_r+0x618>)
 8021462:	1109      	asrs	r1, r1, #4
 8021464:	2400      	movs	r4, #0
 8021466:	2202      	movs	r2, #2
 8021468:	b929      	cbnz	r1, 8021476 <_dtoa_r+0x49e>
 802146a:	2c00      	cmp	r4, #0
 802146c:	f43f af49 	beq.w	8021302 <_dtoa_r+0x32a>
 8021470:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021474:	e745      	b.n	8021302 <_dtoa_r+0x32a>
 8021476:	07ce      	lsls	r6, r1, #31
 8021478:	d505      	bpl.n	8021486 <_dtoa_r+0x4ae>
 802147a:	ed90 6b00 	vldr	d6, [r0]
 802147e:	3201      	adds	r2, #1
 8021480:	2401      	movs	r4, #1
 8021482:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021486:	1049      	asrs	r1, r1, #1
 8021488:	3008      	adds	r0, #8
 802148a:	e7ed      	b.n	8021468 <_dtoa_r+0x490>
 802148c:	2202      	movs	r2, #2
 802148e:	e738      	b.n	8021302 <_dtoa_r+0x32a>
 8021490:	f8cd 8010 	str.w	r8, [sp, #16]
 8021494:	4654      	mov	r4, sl
 8021496:	e754      	b.n	8021342 <_dtoa_r+0x36a>
 8021498:	4a54      	ldr	r2, [pc, #336]	@ (80215ec <_dtoa_r+0x614>)
 802149a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 802149e:	ed12 4b02 	vldr	d4, [r2, #-8]
 80214a2:	9a08      	ldr	r2, [sp, #32]
 80214a4:	ec41 0b17 	vmov	d7, r0, r1
 80214a8:	443c      	add	r4, r7
 80214aa:	b34a      	cbz	r2, 8021500 <_dtoa_r+0x528>
 80214ac:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80214b0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80214b4:	463e      	mov	r6, r7
 80214b6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80214ba:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80214be:	ee35 7b47 	vsub.f64	d7, d5, d7
 80214c2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80214c6:	ee14 2a90 	vmov	r2, s9
 80214ca:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80214ce:	3230      	adds	r2, #48	@ 0x30
 80214d0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80214d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80214d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80214dc:	f806 2b01 	strb.w	r2, [r6], #1
 80214e0:	d438      	bmi.n	8021554 <_dtoa_r+0x57c>
 80214e2:	ee32 5b46 	vsub.f64	d5, d2, d6
 80214e6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80214ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80214ee:	d462      	bmi.n	80215b6 <_dtoa_r+0x5de>
 80214f0:	42a6      	cmp	r6, r4
 80214f2:	f43f af4d 	beq.w	8021390 <_dtoa_r+0x3b8>
 80214f6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80214fa:	ee26 6b03 	vmul.f64	d6, d6, d3
 80214fe:	e7e0      	b.n	80214c2 <_dtoa_r+0x4ea>
 8021500:	4621      	mov	r1, r4
 8021502:	463e      	mov	r6, r7
 8021504:	ee27 7b04 	vmul.f64	d7, d7, d4
 8021508:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 802150c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8021510:	ee14 2a90 	vmov	r2, s9
 8021514:	3230      	adds	r2, #48	@ 0x30
 8021516:	f806 2b01 	strb.w	r2, [r6], #1
 802151a:	42a6      	cmp	r6, r4
 802151c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8021520:	ee36 6b45 	vsub.f64	d6, d6, d5
 8021524:	d119      	bne.n	802155a <_dtoa_r+0x582>
 8021526:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 802152a:	ee37 4b05 	vadd.f64	d4, d7, d5
 802152e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8021532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021536:	dc3e      	bgt.n	80215b6 <_dtoa_r+0x5de>
 8021538:	ee35 5b47 	vsub.f64	d5, d5, d7
 802153c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8021540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021544:	f57f af24 	bpl.w	8021390 <_dtoa_r+0x3b8>
 8021548:	460e      	mov	r6, r1
 802154a:	3901      	subs	r1, #1
 802154c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8021550:	2b30      	cmp	r3, #48	@ 0x30
 8021552:	d0f9      	beq.n	8021548 <_dtoa_r+0x570>
 8021554:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8021558:	e758      	b.n	802140c <_dtoa_r+0x434>
 802155a:	ee26 6b03 	vmul.f64	d6, d6, d3
 802155e:	e7d5      	b.n	802150c <_dtoa_r+0x534>
 8021560:	d10b      	bne.n	802157a <_dtoa_r+0x5a2>
 8021562:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8021566:	ee26 6b07 	vmul.f64	d6, d6, d7
 802156a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802156e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021576:	f2c0 8161 	blt.w	802183c <_dtoa_r+0x864>
 802157a:	2400      	movs	r4, #0
 802157c:	4625      	mov	r5, r4
 802157e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021580:	43db      	mvns	r3, r3
 8021582:	9304      	str	r3, [sp, #16]
 8021584:	463e      	mov	r6, r7
 8021586:	f04f 0800 	mov.w	r8, #0
 802158a:	4621      	mov	r1, r4
 802158c:	4648      	mov	r0, r9
 802158e:	f000 fbb9 	bl	8021d04 <_Bfree>
 8021592:	2d00      	cmp	r5, #0
 8021594:	d0de      	beq.n	8021554 <_dtoa_r+0x57c>
 8021596:	f1b8 0f00 	cmp.w	r8, #0
 802159a:	d005      	beq.n	80215a8 <_dtoa_r+0x5d0>
 802159c:	45a8      	cmp	r8, r5
 802159e:	d003      	beq.n	80215a8 <_dtoa_r+0x5d0>
 80215a0:	4641      	mov	r1, r8
 80215a2:	4648      	mov	r0, r9
 80215a4:	f000 fbae 	bl	8021d04 <_Bfree>
 80215a8:	4629      	mov	r1, r5
 80215aa:	4648      	mov	r0, r9
 80215ac:	f000 fbaa 	bl	8021d04 <_Bfree>
 80215b0:	e7d0      	b.n	8021554 <_dtoa_r+0x57c>
 80215b2:	f8cd 8010 	str.w	r8, [sp, #16]
 80215b6:	4633      	mov	r3, r6
 80215b8:	461e      	mov	r6, r3
 80215ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80215be:	2a39      	cmp	r2, #57	@ 0x39
 80215c0:	d106      	bne.n	80215d0 <_dtoa_r+0x5f8>
 80215c2:	429f      	cmp	r7, r3
 80215c4:	d1f8      	bne.n	80215b8 <_dtoa_r+0x5e0>
 80215c6:	9a04      	ldr	r2, [sp, #16]
 80215c8:	3201      	adds	r2, #1
 80215ca:	9204      	str	r2, [sp, #16]
 80215cc:	2230      	movs	r2, #48	@ 0x30
 80215ce:	703a      	strb	r2, [r7, #0]
 80215d0:	781a      	ldrb	r2, [r3, #0]
 80215d2:	3201      	adds	r2, #1
 80215d4:	701a      	strb	r2, [r3, #0]
 80215d6:	e7bd      	b.n	8021554 <_dtoa_r+0x57c>
 80215d8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80215dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80215e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215e4:	f47f aeef 	bne.w	80213c6 <_dtoa_r+0x3ee>
 80215e8:	e710      	b.n	802140c <_dtoa_r+0x434>
 80215ea:	bf00      	nop
 80215ec:	08027158 	.word	0x08027158
 80215f0:	08027130 	.word	0x08027130
 80215f4:	9908      	ldr	r1, [sp, #32]
 80215f6:	2900      	cmp	r1, #0
 80215f8:	f000 80e3 	beq.w	80217c2 <_dtoa_r+0x7ea>
 80215fc:	9907      	ldr	r1, [sp, #28]
 80215fe:	2901      	cmp	r1, #1
 8021600:	f300 80c8 	bgt.w	8021794 <_dtoa_r+0x7bc>
 8021604:	2d00      	cmp	r5, #0
 8021606:	f000 80c1 	beq.w	802178c <_dtoa_r+0x7b4>
 802160a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 802160e:	9e05      	ldr	r6, [sp, #20]
 8021610:	461c      	mov	r4, r3
 8021612:	9304      	str	r3, [sp, #16]
 8021614:	9b05      	ldr	r3, [sp, #20]
 8021616:	4413      	add	r3, r2
 8021618:	9305      	str	r3, [sp, #20]
 802161a:	9b06      	ldr	r3, [sp, #24]
 802161c:	2101      	movs	r1, #1
 802161e:	4413      	add	r3, r2
 8021620:	4648      	mov	r0, r9
 8021622:	9306      	str	r3, [sp, #24]
 8021624:	f000 fc22 	bl	8021e6c <__i2b>
 8021628:	9b04      	ldr	r3, [sp, #16]
 802162a:	4605      	mov	r5, r0
 802162c:	b166      	cbz	r6, 8021648 <_dtoa_r+0x670>
 802162e:	9a06      	ldr	r2, [sp, #24]
 8021630:	2a00      	cmp	r2, #0
 8021632:	dd09      	ble.n	8021648 <_dtoa_r+0x670>
 8021634:	42b2      	cmp	r2, r6
 8021636:	9905      	ldr	r1, [sp, #20]
 8021638:	bfa8      	it	ge
 802163a:	4632      	movge	r2, r6
 802163c:	1a89      	subs	r1, r1, r2
 802163e:	9105      	str	r1, [sp, #20]
 8021640:	9906      	ldr	r1, [sp, #24]
 8021642:	1ab6      	subs	r6, r6, r2
 8021644:	1a8a      	subs	r2, r1, r2
 8021646:	9206      	str	r2, [sp, #24]
 8021648:	b1fb      	cbz	r3, 802168a <_dtoa_r+0x6b2>
 802164a:	9a08      	ldr	r2, [sp, #32]
 802164c:	2a00      	cmp	r2, #0
 802164e:	f000 80bc 	beq.w	80217ca <_dtoa_r+0x7f2>
 8021652:	b19c      	cbz	r4, 802167c <_dtoa_r+0x6a4>
 8021654:	4629      	mov	r1, r5
 8021656:	4622      	mov	r2, r4
 8021658:	4648      	mov	r0, r9
 802165a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802165c:	f000 fcc6 	bl	8021fec <__pow5mult>
 8021660:	9a01      	ldr	r2, [sp, #4]
 8021662:	4601      	mov	r1, r0
 8021664:	4605      	mov	r5, r0
 8021666:	4648      	mov	r0, r9
 8021668:	f000 fc16 	bl	8021e98 <__multiply>
 802166c:	9901      	ldr	r1, [sp, #4]
 802166e:	9004      	str	r0, [sp, #16]
 8021670:	4648      	mov	r0, r9
 8021672:	f000 fb47 	bl	8021d04 <_Bfree>
 8021676:	9a04      	ldr	r2, [sp, #16]
 8021678:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802167a:	9201      	str	r2, [sp, #4]
 802167c:	1b1a      	subs	r2, r3, r4
 802167e:	d004      	beq.n	802168a <_dtoa_r+0x6b2>
 8021680:	9901      	ldr	r1, [sp, #4]
 8021682:	4648      	mov	r0, r9
 8021684:	f000 fcb2 	bl	8021fec <__pow5mult>
 8021688:	9001      	str	r0, [sp, #4]
 802168a:	2101      	movs	r1, #1
 802168c:	4648      	mov	r0, r9
 802168e:	f000 fbed 	bl	8021e6c <__i2b>
 8021692:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021694:	4604      	mov	r4, r0
 8021696:	2b00      	cmp	r3, #0
 8021698:	f000 81d0 	beq.w	8021a3c <_dtoa_r+0xa64>
 802169c:	461a      	mov	r2, r3
 802169e:	4601      	mov	r1, r0
 80216a0:	4648      	mov	r0, r9
 80216a2:	f000 fca3 	bl	8021fec <__pow5mult>
 80216a6:	9b07      	ldr	r3, [sp, #28]
 80216a8:	2b01      	cmp	r3, #1
 80216aa:	4604      	mov	r4, r0
 80216ac:	f300 8095 	bgt.w	80217da <_dtoa_r+0x802>
 80216b0:	9b02      	ldr	r3, [sp, #8]
 80216b2:	2b00      	cmp	r3, #0
 80216b4:	f040 808b 	bne.w	80217ce <_dtoa_r+0x7f6>
 80216b8:	9b03      	ldr	r3, [sp, #12]
 80216ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80216be:	2a00      	cmp	r2, #0
 80216c0:	f040 8087 	bne.w	80217d2 <_dtoa_r+0x7fa>
 80216c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80216c8:	0d12      	lsrs	r2, r2, #20
 80216ca:	0512      	lsls	r2, r2, #20
 80216cc:	2a00      	cmp	r2, #0
 80216ce:	f000 8082 	beq.w	80217d6 <_dtoa_r+0x7fe>
 80216d2:	9b05      	ldr	r3, [sp, #20]
 80216d4:	3301      	adds	r3, #1
 80216d6:	9305      	str	r3, [sp, #20]
 80216d8:	9b06      	ldr	r3, [sp, #24]
 80216da:	3301      	adds	r3, #1
 80216dc:	9306      	str	r3, [sp, #24]
 80216de:	2301      	movs	r3, #1
 80216e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80216e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80216e4:	2b00      	cmp	r3, #0
 80216e6:	f000 81af 	beq.w	8021a48 <_dtoa_r+0xa70>
 80216ea:	6922      	ldr	r2, [r4, #16]
 80216ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80216f0:	6910      	ldr	r0, [r2, #16]
 80216f2:	f000 fb6f 	bl	8021dd4 <__hi0bits>
 80216f6:	f1c0 0020 	rsb	r0, r0, #32
 80216fa:	9b06      	ldr	r3, [sp, #24]
 80216fc:	4418      	add	r0, r3
 80216fe:	f010 001f 	ands.w	r0, r0, #31
 8021702:	d076      	beq.n	80217f2 <_dtoa_r+0x81a>
 8021704:	f1c0 0220 	rsb	r2, r0, #32
 8021708:	2a04      	cmp	r2, #4
 802170a:	dd69      	ble.n	80217e0 <_dtoa_r+0x808>
 802170c:	9b05      	ldr	r3, [sp, #20]
 802170e:	f1c0 001c 	rsb	r0, r0, #28
 8021712:	4403      	add	r3, r0
 8021714:	9305      	str	r3, [sp, #20]
 8021716:	9b06      	ldr	r3, [sp, #24]
 8021718:	4406      	add	r6, r0
 802171a:	4403      	add	r3, r0
 802171c:	9306      	str	r3, [sp, #24]
 802171e:	9b05      	ldr	r3, [sp, #20]
 8021720:	2b00      	cmp	r3, #0
 8021722:	dd05      	ble.n	8021730 <_dtoa_r+0x758>
 8021724:	9901      	ldr	r1, [sp, #4]
 8021726:	461a      	mov	r2, r3
 8021728:	4648      	mov	r0, r9
 802172a:	f000 fcb9 	bl	80220a0 <__lshift>
 802172e:	9001      	str	r0, [sp, #4]
 8021730:	9b06      	ldr	r3, [sp, #24]
 8021732:	2b00      	cmp	r3, #0
 8021734:	dd05      	ble.n	8021742 <_dtoa_r+0x76a>
 8021736:	4621      	mov	r1, r4
 8021738:	461a      	mov	r2, r3
 802173a:	4648      	mov	r0, r9
 802173c:	f000 fcb0 	bl	80220a0 <__lshift>
 8021740:	4604      	mov	r4, r0
 8021742:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021744:	2b00      	cmp	r3, #0
 8021746:	d056      	beq.n	80217f6 <_dtoa_r+0x81e>
 8021748:	9801      	ldr	r0, [sp, #4]
 802174a:	4621      	mov	r1, r4
 802174c:	f000 fd14 	bl	8022178 <__mcmp>
 8021750:	2800      	cmp	r0, #0
 8021752:	da50      	bge.n	80217f6 <_dtoa_r+0x81e>
 8021754:	f108 33ff 	add.w	r3, r8, #4294967295
 8021758:	9304      	str	r3, [sp, #16]
 802175a:	9901      	ldr	r1, [sp, #4]
 802175c:	2300      	movs	r3, #0
 802175e:	220a      	movs	r2, #10
 8021760:	4648      	mov	r0, r9
 8021762:	f000 faf1 	bl	8021d48 <__multadd>
 8021766:	9b08      	ldr	r3, [sp, #32]
 8021768:	9001      	str	r0, [sp, #4]
 802176a:	2b00      	cmp	r3, #0
 802176c:	f000 816e 	beq.w	8021a4c <_dtoa_r+0xa74>
 8021770:	4629      	mov	r1, r5
 8021772:	2300      	movs	r3, #0
 8021774:	220a      	movs	r2, #10
 8021776:	4648      	mov	r0, r9
 8021778:	f000 fae6 	bl	8021d48 <__multadd>
 802177c:	f1bb 0f00 	cmp.w	fp, #0
 8021780:	4605      	mov	r5, r0
 8021782:	dc64      	bgt.n	802184e <_dtoa_r+0x876>
 8021784:	9b07      	ldr	r3, [sp, #28]
 8021786:	2b02      	cmp	r3, #2
 8021788:	dc3e      	bgt.n	8021808 <_dtoa_r+0x830>
 802178a:	e060      	b.n	802184e <_dtoa_r+0x876>
 802178c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802178e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8021792:	e73c      	b.n	802160e <_dtoa_r+0x636>
 8021794:	f10a 34ff 	add.w	r4, sl, #4294967295
 8021798:	42a3      	cmp	r3, r4
 802179a:	bfbf      	itttt	lt
 802179c:	1ae2      	sublt	r2, r4, r3
 802179e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80217a0:	189b      	addlt	r3, r3, r2
 80217a2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80217a4:	bfae      	itee	ge
 80217a6:	1b1c      	subge	r4, r3, r4
 80217a8:	4623      	movlt	r3, r4
 80217aa:	2400      	movlt	r4, #0
 80217ac:	f1ba 0f00 	cmp.w	sl, #0
 80217b0:	bfb5      	itete	lt
 80217b2:	9a05      	ldrlt	r2, [sp, #20]
 80217b4:	9e05      	ldrge	r6, [sp, #20]
 80217b6:	eba2 060a 	sublt.w	r6, r2, sl
 80217ba:	4652      	movge	r2, sl
 80217bc:	bfb8      	it	lt
 80217be:	2200      	movlt	r2, #0
 80217c0:	e727      	b.n	8021612 <_dtoa_r+0x63a>
 80217c2:	9e05      	ldr	r6, [sp, #20]
 80217c4:	9d08      	ldr	r5, [sp, #32]
 80217c6:	461c      	mov	r4, r3
 80217c8:	e730      	b.n	802162c <_dtoa_r+0x654>
 80217ca:	461a      	mov	r2, r3
 80217cc:	e758      	b.n	8021680 <_dtoa_r+0x6a8>
 80217ce:	2300      	movs	r3, #0
 80217d0:	e786      	b.n	80216e0 <_dtoa_r+0x708>
 80217d2:	9b02      	ldr	r3, [sp, #8]
 80217d4:	e784      	b.n	80216e0 <_dtoa_r+0x708>
 80217d6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80217d8:	e783      	b.n	80216e2 <_dtoa_r+0x70a>
 80217da:	2300      	movs	r3, #0
 80217dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80217de:	e784      	b.n	80216ea <_dtoa_r+0x712>
 80217e0:	d09d      	beq.n	802171e <_dtoa_r+0x746>
 80217e2:	9b05      	ldr	r3, [sp, #20]
 80217e4:	321c      	adds	r2, #28
 80217e6:	4413      	add	r3, r2
 80217e8:	9305      	str	r3, [sp, #20]
 80217ea:	9b06      	ldr	r3, [sp, #24]
 80217ec:	4416      	add	r6, r2
 80217ee:	4413      	add	r3, r2
 80217f0:	e794      	b.n	802171c <_dtoa_r+0x744>
 80217f2:	4602      	mov	r2, r0
 80217f4:	e7f5      	b.n	80217e2 <_dtoa_r+0x80a>
 80217f6:	f1ba 0f00 	cmp.w	sl, #0
 80217fa:	f8cd 8010 	str.w	r8, [sp, #16]
 80217fe:	46d3      	mov	fp, sl
 8021800:	dc21      	bgt.n	8021846 <_dtoa_r+0x86e>
 8021802:	9b07      	ldr	r3, [sp, #28]
 8021804:	2b02      	cmp	r3, #2
 8021806:	dd1e      	ble.n	8021846 <_dtoa_r+0x86e>
 8021808:	f1bb 0f00 	cmp.w	fp, #0
 802180c:	f47f aeb7 	bne.w	802157e <_dtoa_r+0x5a6>
 8021810:	4621      	mov	r1, r4
 8021812:	465b      	mov	r3, fp
 8021814:	2205      	movs	r2, #5
 8021816:	4648      	mov	r0, r9
 8021818:	f000 fa96 	bl	8021d48 <__multadd>
 802181c:	4601      	mov	r1, r0
 802181e:	4604      	mov	r4, r0
 8021820:	9801      	ldr	r0, [sp, #4]
 8021822:	f000 fca9 	bl	8022178 <__mcmp>
 8021826:	2800      	cmp	r0, #0
 8021828:	f77f aea9 	ble.w	802157e <_dtoa_r+0x5a6>
 802182c:	463e      	mov	r6, r7
 802182e:	2331      	movs	r3, #49	@ 0x31
 8021830:	f806 3b01 	strb.w	r3, [r6], #1
 8021834:	9b04      	ldr	r3, [sp, #16]
 8021836:	3301      	adds	r3, #1
 8021838:	9304      	str	r3, [sp, #16]
 802183a:	e6a4      	b.n	8021586 <_dtoa_r+0x5ae>
 802183c:	f8cd 8010 	str.w	r8, [sp, #16]
 8021840:	4654      	mov	r4, sl
 8021842:	4625      	mov	r5, r4
 8021844:	e7f2      	b.n	802182c <_dtoa_r+0x854>
 8021846:	9b08      	ldr	r3, [sp, #32]
 8021848:	2b00      	cmp	r3, #0
 802184a:	f000 8103 	beq.w	8021a54 <_dtoa_r+0xa7c>
 802184e:	2e00      	cmp	r6, #0
 8021850:	dd05      	ble.n	802185e <_dtoa_r+0x886>
 8021852:	4629      	mov	r1, r5
 8021854:	4632      	mov	r2, r6
 8021856:	4648      	mov	r0, r9
 8021858:	f000 fc22 	bl	80220a0 <__lshift>
 802185c:	4605      	mov	r5, r0
 802185e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021860:	2b00      	cmp	r3, #0
 8021862:	d058      	beq.n	8021916 <_dtoa_r+0x93e>
 8021864:	6869      	ldr	r1, [r5, #4]
 8021866:	4648      	mov	r0, r9
 8021868:	f000 fa0c 	bl	8021c84 <_Balloc>
 802186c:	4606      	mov	r6, r0
 802186e:	b928      	cbnz	r0, 802187c <_dtoa_r+0x8a4>
 8021870:	4b82      	ldr	r3, [pc, #520]	@ (8021a7c <_dtoa_r+0xaa4>)
 8021872:	4602      	mov	r2, r0
 8021874:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8021878:	f7ff bbc7 	b.w	802100a <_dtoa_r+0x32>
 802187c:	692a      	ldr	r2, [r5, #16]
 802187e:	3202      	adds	r2, #2
 8021880:	0092      	lsls	r2, r2, #2
 8021882:	f105 010c 	add.w	r1, r5, #12
 8021886:	300c      	adds	r0, #12
 8021888:	f7ff faf1 	bl	8020e6e <memcpy>
 802188c:	2201      	movs	r2, #1
 802188e:	4631      	mov	r1, r6
 8021890:	4648      	mov	r0, r9
 8021892:	f000 fc05 	bl	80220a0 <__lshift>
 8021896:	1c7b      	adds	r3, r7, #1
 8021898:	9305      	str	r3, [sp, #20]
 802189a:	eb07 030b 	add.w	r3, r7, fp
 802189e:	9309      	str	r3, [sp, #36]	@ 0x24
 80218a0:	9b02      	ldr	r3, [sp, #8]
 80218a2:	f003 0301 	and.w	r3, r3, #1
 80218a6:	46a8      	mov	r8, r5
 80218a8:	9308      	str	r3, [sp, #32]
 80218aa:	4605      	mov	r5, r0
 80218ac:	9b05      	ldr	r3, [sp, #20]
 80218ae:	9801      	ldr	r0, [sp, #4]
 80218b0:	4621      	mov	r1, r4
 80218b2:	f103 3bff 	add.w	fp, r3, #4294967295
 80218b6:	f7ff fb07 	bl	8020ec8 <quorem>
 80218ba:	4641      	mov	r1, r8
 80218bc:	9002      	str	r0, [sp, #8]
 80218be:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80218c2:	9801      	ldr	r0, [sp, #4]
 80218c4:	f000 fc58 	bl	8022178 <__mcmp>
 80218c8:	462a      	mov	r2, r5
 80218ca:	9006      	str	r0, [sp, #24]
 80218cc:	4621      	mov	r1, r4
 80218ce:	4648      	mov	r0, r9
 80218d0:	f000 fc6e 	bl	80221b0 <__mdiff>
 80218d4:	68c2      	ldr	r2, [r0, #12]
 80218d6:	4606      	mov	r6, r0
 80218d8:	b9fa      	cbnz	r2, 802191a <_dtoa_r+0x942>
 80218da:	4601      	mov	r1, r0
 80218dc:	9801      	ldr	r0, [sp, #4]
 80218de:	f000 fc4b 	bl	8022178 <__mcmp>
 80218e2:	4602      	mov	r2, r0
 80218e4:	4631      	mov	r1, r6
 80218e6:	4648      	mov	r0, r9
 80218e8:	920a      	str	r2, [sp, #40]	@ 0x28
 80218ea:	f000 fa0b 	bl	8021d04 <_Bfree>
 80218ee:	9b07      	ldr	r3, [sp, #28]
 80218f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80218f2:	9e05      	ldr	r6, [sp, #20]
 80218f4:	ea43 0102 	orr.w	r1, r3, r2
 80218f8:	9b08      	ldr	r3, [sp, #32]
 80218fa:	4319      	orrs	r1, r3
 80218fc:	d10f      	bne.n	802191e <_dtoa_r+0x946>
 80218fe:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8021902:	d028      	beq.n	8021956 <_dtoa_r+0x97e>
 8021904:	9b06      	ldr	r3, [sp, #24]
 8021906:	2b00      	cmp	r3, #0
 8021908:	dd02      	ble.n	8021910 <_dtoa_r+0x938>
 802190a:	9b02      	ldr	r3, [sp, #8]
 802190c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8021910:	f88b a000 	strb.w	sl, [fp]
 8021914:	e639      	b.n	802158a <_dtoa_r+0x5b2>
 8021916:	4628      	mov	r0, r5
 8021918:	e7bd      	b.n	8021896 <_dtoa_r+0x8be>
 802191a:	2201      	movs	r2, #1
 802191c:	e7e2      	b.n	80218e4 <_dtoa_r+0x90c>
 802191e:	9b06      	ldr	r3, [sp, #24]
 8021920:	2b00      	cmp	r3, #0
 8021922:	db04      	blt.n	802192e <_dtoa_r+0x956>
 8021924:	9907      	ldr	r1, [sp, #28]
 8021926:	430b      	orrs	r3, r1
 8021928:	9908      	ldr	r1, [sp, #32]
 802192a:	430b      	orrs	r3, r1
 802192c:	d120      	bne.n	8021970 <_dtoa_r+0x998>
 802192e:	2a00      	cmp	r2, #0
 8021930:	ddee      	ble.n	8021910 <_dtoa_r+0x938>
 8021932:	9901      	ldr	r1, [sp, #4]
 8021934:	2201      	movs	r2, #1
 8021936:	4648      	mov	r0, r9
 8021938:	f000 fbb2 	bl	80220a0 <__lshift>
 802193c:	4621      	mov	r1, r4
 802193e:	9001      	str	r0, [sp, #4]
 8021940:	f000 fc1a 	bl	8022178 <__mcmp>
 8021944:	2800      	cmp	r0, #0
 8021946:	dc03      	bgt.n	8021950 <_dtoa_r+0x978>
 8021948:	d1e2      	bne.n	8021910 <_dtoa_r+0x938>
 802194a:	f01a 0f01 	tst.w	sl, #1
 802194e:	d0df      	beq.n	8021910 <_dtoa_r+0x938>
 8021950:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8021954:	d1d9      	bne.n	802190a <_dtoa_r+0x932>
 8021956:	2339      	movs	r3, #57	@ 0x39
 8021958:	f88b 3000 	strb.w	r3, [fp]
 802195c:	4633      	mov	r3, r6
 802195e:	461e      	mov	r6, r3
 8021960:	3b01      	subs	r3, #1
 8021962:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8021966:	2a39      	cmp	r2, #57	@ 0x39
 8021968:	d053      	beq.n	8021a12 <_dtoa_r+0xa3a>
 802196a:	3201      	adds	r2, #1
 802196c:	701a      	strb	r2, [r3, #0]
 802196e:	e60c      	b.n	802158a <_dtoa_r+0x5b2>
 8021970:	2a00      	cmp	r2, #0
 8021972:	dd07      	ble.n	8021984 <_dtoa_r+0x9ac>
 8021974:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8021978:	d0ed      	beq.n	8021956 <_dtoa_r+0x97e>
 802197a:	f10a 0301 	add.w	r3, sl, #1
 802197e:	f88b 3000 	strb.w	r3, [fp]
 8021982:	e602      	b.n	802158a <_dtoa_r+0x5b2>
 8021984:	9b05      	ldr	r3, [sp, #20]
 8021986:	9a05      	ldr	r2, [sp, #20]
 8021988:	f803 ac01 	strb.w	sl, [r3, #-1]
 802198c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802198e:	4293      	cmp	r3, r2
 8021990:	d029      	beq.n	80219e6 <_dtoa_r+0xa0e>
 8021992:	9901      	ldr	r1, [sp, #4]
 8021994:	2300      	movs	r3, #0
 8021996:	220a      	movs	r2, #10
 8021998:	4648      	mov	r0, r9
 802199a:	f000 f9d5 	bl	8021d48 <__multadd>
 802199e:	45a8      	cmp	r8, r5
 80219a0:	9001      	str	r0, [sp, #4]
 80219a2:	f04f 0300 	mov.w	r3, #0
 80219a6:	f04f 020a 	mov.w	r2, #10
 80219aa:	4641      	mov	r1, r8
 80219ac:	4648      	mov	r0, r9
 80219ae:	d107      	bne.n	80219c0 <_dtoa_r+0x9e8>
 80219b0:	f000 f9ca 	bl	8021d48 <__multadd>
 80219b4:	4680      	mov	r8, r0
 80219b6:	4605      	mov	r5, r0
 80219b8:	9b05      	ldr	r3, [sp, #20]
 80219ba:	3301      	adds	r3, #1
 80219bc:	9305      	str	r3, [sp, #20]
 80219be:	e775      	b.n	80218ac <_dtoa_r+0x8d4>
 80219c0:	f000 f9c2 	bl	8021d48 <__multadd>
 80219c4:	4629      	mov	r1, r5
 80219c6:	4680      	mov	r8, r0
 80219c8:	2300      	movs	r3, #0
 80219ca:	220a      	movs	r2, #10
 80219cc:	4648      	mov	r0, r9
 80219ce:	f000 f9bb 	bl	8021d48 <__multadd>
 80219d2:	4605      	mov	r5, r0
 80219d4:	e7f0      	b.n	80219b8 <_dtoa_r+0x9e0>
 80219d6:	f1bb 0f00 	cmp.w	fp, #0
 80219da:	bfcc      	ite	gt
 80219dc:	465e      	movgt	r6, fp
 80219de:	2601      	movle	r6, #1
 80219e0:	443e      	add	r6, r7
 80219e2:	f04f 0800 	mov.w	r8, #0
 80219e6:	9901      	ldr	r1, [sp, #4]
 80219e8:	2201      	movs	r2, #1
 80219ea:	4648      	mov	r0, r9
 80219ec:	f000 fb58 	bl	80220a0 <__lshift>
 80219f0:	4621      	mov	r1, r4
 80219f2:	9001      	str	r0, [sp, #4]
 80219f4:	f000 fbc0 	bl	8022178 <__mcmp>
 80219f8:	2800      	cmp	r0, #0
 80219fa:	dcaf      	bgt.n	802195c <_dtoa_r+0x984>
 80219fc:	d102      	bne.n	8021a04 <_dtoa_r+0xa2c>
 80219fe:	f01a 0f01 	tst.w	sl, #1
 8021a02:	d1ab      	bne.n	802195c <_dtoa_r+0x984>
 8021a04:	4633      	mov	r3, r6
 8021a06:	461e      	mov	r6, r3
 8021a08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021a0c:	2a30      	cmp	r2, #48	@ 0x30
 8021a0e:	d0fa      	beq.n	8021a06 <_dtoa_r+0xa2e>
 8021a10:	e5bb      	b.n	802158a <_dtoa_r+0x5b2>
 8021a12:	429f      	cmp	r7, r3
 8021a14:	d1a3      	bne.n	802195e <_dtoa_r+0x986>
 8021a16:	9b04      	ldr	r3, [sp, #16]
 8021a18:	3301      	adds	r3, #1
 8021a1a:	9304      	str	r3, [sp, #16]
 8021a1c:	2331      	movs	r3, #49	@ 0x31
 8021a1e:	703b      	strb	r3, [r7, #0]
 8021a20:	e5b3      	b.n	802158a <_dtoa_r+0x5b2>
 8021a22:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021a24:	4f16      	ldr	r7, [pc, #88]	@ (8021a80 <_dtoa_r+0xaa8>)
 8021a26:	b11b      	cbz	r3, 8021a30 <_dtoa_r+0xa58>
 8021a28:	f107 0308 	add.w	r3, r7, #8
 8021a2c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8021a2e:	6013      	str	r3, [r2, #0]
 8021a30:	4638      	mov	r0, r7
 8021a32:	b011      	add	sp, #68	@ 0x44
 8021a34:	ecbd 8b02 	vpop	{d8}
 8021a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a3c:	9b07      	ldr	r3, [sp, #28]
 8021a3e:	2b01      	cmp	r3, #1
 8021a40:	f77f ae36 	ble.w	80216b0 <_dtoa_r+0x6d8>
 8021a44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021a46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021a48:	2001      	movs	r0, #1
 8021a4a:	e656      	b.n	80216fa <_dtoa_r+0x722>
 8021a4c:	f1bb 0f00 	cmp.w	fp, #0
 8021a50:	f77f aed7 	ble.w	8021802 <_dtoa_r+0x82a>
 8021a54:	463e      	mov	r6, r7
 8021a56:	9801      	ldr	r0, [sp, #4]
 8021a58:	4621      	mov	r1, r4
 8021a5a:	f7ff fa35 	bl	8020ec8 <quorem>
 8021a5e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8021a62:	f806 ab01 	strb.w	sl, [r6], #1
 8021a66:	1bf2      	subs	r2, r6, r7
 8021a68:	4593      	cmp	fp, r2
 8021a6a:	ddb4      	ble.n	80219d6 <_dtoa_r+0x9fe>
 8021a6c:	9901      	ldr	r1, [sp, #4]
 8021a6e:	2300      	movs	r3, #0
 8021a70:	220a      	movs	r2, #10
 8021a72:	4648      	mov	r0, r9
 8021a74:	f000 f968 	bl	8021d48 <__multadd>
 8021a78:	9001      	str	r0, [sp, #4]
 8021a7a:	e7ec      	b.n	8021a56 <_dtoa_r+0xa7e>
 8021a7c:	080270b7 	.word	0x080270b7
 8021a80:	08027052 	.word	0x08027052

08021a84 <_free_r>:
 8021a84:	b538      	push	{r3, r4, r5, lr}
 8021a86:	4605      	mov	r5, r0
 8021a88:	2900      	cmp	r1, #0
 8021a8a:	d041      	beq.n	8021b10 <_free_r+0x8c>
 8021a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021a90:	1f0c      	subs	r4, r1, #4
 8021a92:	2b00      	cmp	r3, #0
 8021a94:	bfb8      	it	lt
 8021a96:	18e4      	addlt	r4, r4, r3
 8021a98:	f000 f8e8 	bl	8021c6c <__malloc_lock>
 8021a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8021b14 <_free_r+0x90>)
 8021a9e:	6813      	ldr	r3, [r2, #0]
 8021aa0:	b933      	cbnz	r3, 8021ab0 <_free_r+0x2c>
 8021aa2:	6063      	str	r3, [r4, #4]
 8021aa4:	6014      	str	r4, [r2, #0]
 8021aa6:	4628      	mov	r0, r5
 8021aa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021aac:	f000 b8e4 	b.w	8021c78 <__malloc_unlock>
 8021ab0:	42a3      	cmp	r3, r4
 8021ab2:	d908      	bls.n	8021ac6 <_free_r+0x42>
 8021ab4:	6820      	ldr	r0, [r4, #0]
 8021ab6:	1821      	adds	r1, r4, r0
 8021ab8:	428b      	cmp	r3, r1
 8021aba:	bf01      	itttt	eq
 8021abc:	6819      	ldreq	r1, [r3, #0]
 8021abe:	685b      	ldreq	r3, [r3, #4]
 8021ac0:	1809      	addeq	r1, r1, r0
 8021ac2:	6021      	streq	r1, [r4, #0]
 8021ac4:	e7ed      	b.n	8021aa2 <_free_r+0x1e>
 8021ac6:	461a      	mov	r2, r3
 8021ac8:	685b      	ldr	r3, [r3, #4]
 8021aca:	b10b      	cbz	r3, 8021ad0 <_free_r+0x4c>
 8021acc:	42a3      	cmp	r3, r4
 8021ace:	d9fa      	bls.n	8021ac6 <_free_r+0x42>
 8021ad0:	6811      	ldr	r1, [r2, #0]
 8021ad2:	1850      	adds	r0, r2, r1
 8021ad4:	42a0      	cmp	r0, r4
 8021ad6:	d10b      	bne.n	8021af0 <_free_r+0x6c>
 8021ad8:	6820      	ldr	r0, [r4, #0]
 8021ada:	4401      	add	r1, r0
 8021adc:	1850      	adds	r0, r2, r1
 8021ade:	4283      	cmp	r3, r0
 8021ae0:	6011      	str	r1, [r2, #0]
 8021ae2:	d1e0      	bne.n	8021aa6 <_free_r+0x22>
 8021ae4:	6818      	ldr	r0, [r3, #0]
 8021ae6:	685b      	ldr	r3, [r3, #4]
 8021ae8:	6053      	str	r3, [r2, #4]
 8021aea:	4408      	add	r0, r1
 8021aec:	6010      	str	r0, [r2, #0]
 8021aee:	e7da      	b.n	8021aa6 <_free_r+0x22>
 8021af0:	d902      	bls.n	8021af8 <_free_r+0x74>
 8021af2:	230c      	movs	r3, #12
 8021af4:	602b      	str	r3, [r5, #0]
 8021af6:	e7d6      	b.n	8021aa6 <_free_r+0x22>
 8021af8:	6820      	ldr	r0, [r4, #0]
 8021afa:	1821      	adds	r1, r4, r0
 8021afc:	428b      	cmp	r3, r1
 8021afe:	bf04      	itt	eq
 8021b00:	6819      	ldreq	r1, [r3, #0]
 8021b02:	685b      	ldreq	r3, [r3, #4]
 8021b04:	6063      	str	r3, [r4, #4]
 8021b06:	bf04      	itt	eq
 8021b08:	1809      	addeq	r1, r1, r0
 8021b0a:	6021      	streq	r1, [r4, #0]
 8021b0c:	6054      	str	r4, [r2, #4]
 8021b0e:	e7ca      	b.n	8021aa6 <_free_r+0x22>
 8021b10:	bd38      	pop	{r3, r4, r5, pc}
 8021b12:	bf00      	nop
 8021b14:	2400cdd8 	.word	0x2400cdd8

08021b18 <malloc>:
 8021b18:	4b02      	ldr	r3, [pc, #8]	@ (8021b24 <malloc+0xc>)
 8021b1a:	4601      	mov	r1, r0
 8021b1c:	6818      	ldr	r0, [r3, #0]
 8021b1e:	f000 b825 	b.w	8021b6c <_malloc_r>
 8021b22:	bf00      	nop
 8021b24:	24000044 	.word	0x24000044

08021b28 <sbrk_aligned>:
 8021b28:	b570      	push	{r4, r5, r6, lr}
 8021b2a:	4e0f      	ldr	r6, [pc, #60]	@ (8021b68 <sbrk_aligned+0x40>)
 8021b2c:	460c      	mov	r4, r1
 8021b2e:	6831      	ldr	r1, [r6, #0]
 8021b30:	4605      	mov	r5, r0
 8021b32:	b911      	cbnz	r1, 8021b3a <sbrk_aligned+0x12>
 8021b34:	f001 f804 	bl	8022b40 <_sbrk_r>
 8021b38:	6030      	str	r0, [r6, #0]
 8021b3a:	4621      	mov	r1, r4
 8021b3c:	4628      	mov	r0, r5
 8021b3e:	f000 ffff 	bl	8022b40 <_sbrk_r>
 8021b42:	1c43      	adds	r3, r0, #1
 8021b44:	d103      	bne.n	8021b4e <sbrk_aligned+0x26>
 8021b46:	f04f 34ff 	mov.w	r4, #4294967295
 8021b4a:	4620      	mov	r0, r4
 8021b4c:	bd70      	pop	{r4, r5, r6, pc}
 8021b4e:	1cc4      	adds	r4, r0, #3
 8021b50:	f024 0403 	bic.w	r4, r4, #3
 8021b54:	42a0      	cmp	r0, r4
 8021b56:	d0f8      	beq.n	8021b4a <sbrk_aligned+0x22>
 8021b58:	1a21      	subs	r1, r4, r0
 8021b5a:	4628      	mov	r0, r5
 8021b5c:	f000 fff0 	bl	8022b40 <_sbrk_r>
 8021b60:	3001      	adds	r0, #1
 8021b62:	d1f2      	bne.n	8021b4a <sbrk_aligned+0x22>
 8021b64:	e7ef      	b.n	8021b46 <sbrk_aligned+0x1e>
 8021b66:	bf00      	nop
 8021b68:	2400cdd4 	.word	0x2400cdd4

08021b6c <_malloc_r>:
 8021b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021b70:	1ccd      	adds	r5, r1, #3
 8021b72:	f025 0503 	bic.w	r5, r5, #3
 8021b76:	3508      	adds	r5, #8
 8021b78:	2d0c      	cmp	r5, #12
 8021b7a:	bf38      	it	cc
 8021b7c:	250c      	movcc	r5, #12
 8021b7e:	2d00      	cmp	r5, #0
 8021b80:	4606      	mov	r6, r0
 8021b82:	db01      	blt.n	8021b88 <_malloc_r+0x1c>
 8021b84:	42a9      	cmp	r1, r5
 8021b86:	d904      	bls.n	8021b92 <_malloc_r+0x26>
 8021b88:	230c      	movs	r3, #12
 8021b8a:	6033      	str	r3, [r6, #0]
 8021b8c:	2000      	movs	r0, #0
 8021b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021b92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8021c68 <_malloc_r+0xfc>
 8021b96:	f000 f869 	bl	8021c6c <__malloc_lock>
 8021b9a:	f8d8 3000 	ldr.w	r3, [r8]
 8021b9e:	461c      	mov	r4, r3
 8021ba0:	bb44      	cbnz	r4, 8021bf4 <_malloc_r+0x88>
 8021ba2:	4629      	mov	r1, r5
 8021ba4:	4630      	mov	r0, r6
 8021ba6:	f7ff ffbf 	bl	8021b28 <sbrk_aligned>
 8021baa:	1c43      	adds	r3, r0, #1
 8021bac:	4604      	mov	r4, r0
 8021bae:	d158      	bne.n	8021c62 <_malloc_r+0xf6>
 8021bb0:	f8d8 4000 	ldr.w	r4, [r8]
 8021bb4:	4627      	mov	r7, r4
 8021bb6:	2f00      	cmp	r7, #0
 8021bb8:	d143      	bne.n	8021c42 <_malloc_r+0xd6>
 8021bba:	2c00      	cmp	r4, #0
 8021bbc:	d04b      	beq.n	8021c56 <_malloc_r+0xea>
 8021bbe:	6823      	ldr	r3, [r4, #0]
 8021bc0:	4639      	mov	r1, r7
 8021bc2:	4630      	mov	r0, r6
 8021bc4:	eb04 0903 	add.w	r9, r4, r3
 8021bc8:	f000 ffba 	bl	8022b40 <_sbrk_r>
 8021bcc:	4581      	cmp	r9, r0
 8021bce:	d142      	bne.n	8021c56 <_malloc_r+0xea>
 8021bd0:	6821      	ldr	r1, [r4, #0]
 8021bd2:	1a6d      	subs	r5, r5, r1
 8021bd4:	4629      	mov	r1, r5
 8021bd6:	4630      	mov	r0, r6
 8021bd8:	f7ff ffa6 	bl	8021b28 <sbrk_aligned>
 8021bdc:	3001      	adds	r0, #1
 8021bde:	d03a      	beq.n	8021c56 <_malloc_r+0xea>
 8021be0:	6823      	ldr	r3, [r4, #0]
 8021be2:	442b      	add	r3, r5
 8021be4:	6023      	str	r3, [r4, #0]
 8021be6:	f8d8 3000 	ldr.w	r3, [r8]
 8021bea:	685a      	ldr	r2, [r3, #4]
 8021bec:	bb62      	cbnz	r2, 8021c48 <_malloc_r+0xdc>
 8021bee:	f8c8 7000 	str.w	r7, [r8]
 8021bf2:	e00f      	b.n	8021c14 <_malloc_r+0xa8>
 8021bf4:	6822      	ldr	r2, [r4, #0]
 8021bf6:	1b52      	subs	r2, r2, r5
 8021bf8:	d420      	bmi.n	8021c3c <_malloc_r+0xd0>
 8021bfa:	2a0b      	cmp	r2, #11
 8021bfc:	d917      	bls.n	8021c2e <_malloc_r+0xc2>
 8021bfe:	1961      	adds	r1, r4, r5
 8021c00:	42a3      	cmp	r3, r4
 8021c02:	6025      	str	r5, [r4, #0]
 8021c04:	bf18      	it	ne
 8021c06:	6059      	strne	r1, [r3, #4]
 8021c08:	6863      	ldr	r3, [r4, #4]
 8021c0a:	bf08      	it	eq
 8021c0c:	f8c8 1000 	streq.w	r1, [r8]
 8021c10:	5162      	str	r2, [r4, r5]
 8021c12:	604b      	str	r3, [r1, #4]
 8021c14:	4630      	mov	r0, r6
 8021c16:	f000 f82f 	bl	8021c78 <__malloc_unlock>
 8021c1a:	f104 000b 	add.w	r0, r4, #11
 8021c1e:	1d23      	adds	r3, r4, #4
 8021c20:	f020 0007 	bic.w	r0, r0, #7
 8021c24:	1ac2      	subs	r2, r0, r3
 8021c26:	bf1c      	itt	ne
 8021c28:	1a1b      	subne	r3, r3, r0
 8021c2a:	50a3      	strne	r3, [r4, r2]
 8021c2c:	e7af      	b.n	8021b8e <_malloc_r+0x22>
 8021c2e:	6862      	ldr	r2, [r4, #4]
 8021c30:	42a3      	cmp	r3, r4
 8021c32:	bf0c      	ite	eq
 8021c34:	f8c8 2000 	streq.w	r2, [r8]
 8021c38:	605a      	strne	r2, [r3, #4]
 8021c3a:	e7eb      	b.n	8021c14 <_malloc_r+0xa8>
 8021c3c:	4623      	mov	r3, r4
 8021c3e:	6864      	ldr	r4, [r4, #4]
 8021c40:	e7ae      	b.n	8021ba0 <_malloc_r+0x34>
 8021c42:	463c      	mov	r4, r7
 8021c44:	687f      	ldr	r7, [r7, #4]
 8021c46:	e7b6      	b.n	8021bb6 <_malloc_r+0x4a>
 8021c48:	461a      	mov	r2, r3
 8021c4a:	685b      	ldr	r3, [r3, #4]
 8021c4c:	42a3      	cmp	r3, r4
 8021c4e:	d1fb      	bne.n	8021c48 <_malloc_r+0xdc>
 8021c50:	2300      	movs	r3, #0
 8021c52:	6053      	str	r3, [r2, #4]
 8021c54:	e7de      	b.n	8021c14 <_malloc_r+0xa8>
 8021c56:	230c      	movs	r3, #12
 8021c58:	6033      	str	r3, [r6, #0]
 8021c5a:	4630      	mov	r0, r6
 8021c5c:	f000 f80c 	bl	8021c78 <__malloc_unlock>
 8021c60:	e794      	b.n	8021b8c <_malloc_r+0x20>
 8021c62:	6005      	str	r5, [r0, #0]
 8021c64:	e7d6      	b.n	8021c14 <_malloc_r+0xa8>
 8021c66:	bf00      	nop
 8021c68:	2400cdd8 	.word	0x2400cdd8

08021c6c <__malloc_lock>:
 8021c6c:	4801      	ldr	r0, [pc, #4]	@ (8021c74 <__malloc_lock+0x8>)
 8021c6e:	f7ff b8fc 	b.w	8020e6a <__retarget_lock_acquire_recursive>
 8021c72:	bf00      	nop
 8021c74:	2400cdd0 	.word	0x2400cdd0

08021c78 <__malloc_unlock>:
 8021c78:	4801      	ldr	r0, [pc, #4]	@ (8021c80 <__malloc_unlock+0x8>)
 8021c7a:	f7ff b8f7 	b.w	8020e6c <__retarget_lock_release_recursive>
 8021c7e:	bf00      	nop
 8021c80:	2400cdd0 	.word	0x2400cdd0

08021c84 <_Balloc>:
 8021c84:	b570      	push	{r4, r5, r6, lr}
 8021c86:	69c6      	ldr	r6, [r0, #28]
 8021c88:	4604      	mov	r4, r0
 8021c8a:	460d      	mov	r5, r1
 8021c8c:	b976      	cbnz	r6, 8021cac <_Balloc+0x28>
 8021c8e:	2010      	movs	r0, #16
 8021c90:	f7ff ff42 	bl	8021b18 <malloc>
 8021c94:	4602      	mov	r2, r0
 8021c96:	61e0      	str	r0, [r4, #28]
 8021c98:	b920      	cbnz	r0, 8021ca4 <_Balloc+0x20>
 8021c9a:	4b18      	ldr	r3, [pc, #96]	@ (8021cfc <_Balloc+0x78>)
 8021c9c:	4818      	ldr	r0, [pc, #96]	@ (8021d00 <_Balloc+0x7c>)
 8021c9e:	216b      	movs	r1, #107	@ 0x6b
 8021ca0:	f7ff f8f4 	bl	8020e8c <__assert_func>
 8021ca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021ca8:	6006      	str	r6, [r0, #0]
 8021caa:	60c6      	str	r6, [r0, #12]
 8021cac:	69e6      	ldr	r6, [r4, #28]
 8021cae:	68f3      	ldr	r3, [r6, #12]
 8021cb0:	b183      	cbz	r3, 8021cd4 <_Balloc+0x50>
 8021cb2:	69e3      	ldr	r3, [r4, #28]
 8021cb4:	68db      	ldr	r3, [r3, #12]
 8021cb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8021cba:	b9b8      	cbnz	r0, 8021cec <_Balloc+0x68>
 8021cbc:	2101      	movs	r1, #1
 8021cbe:	fa01 f605 	lsl.w	r6, r1, r5
 8021cc2:	1d72      	adds	r2, r6, #5
 8021cc4:	0092      	lsls	r2, r2, #2
 8021cc6:	4620      	mov	r0, r4
 8021cc8:	f000 ff51 	bl	8022b6e <_calloc_r>
 8021ccc:	b160      	cbz	r0, 8021ce8 <_Balloc+0x64>
 8021cce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8021cd2:	e00e      	b.n	8021cf2 <_Balloc+0x6e>
 8021cd4:	2221      	movs	r2, #33	@ 0x21
 8021cd6:	2104      	movs	r1, #4
 8021cd8:	4620      	mov	r0, r4
 8021cda:	f000 ff48 	bl	8022b6e <_calloc_r>
 8021cde:	69e3      	ldr	r3, [r4, #28]
 8021ce0:	60f0      	str	r0, [r6, #12]
 8021ce2:	68db      	ldr	r3, [r3, #12]
 8021ce4:	2b00      	cmp	r3, #0
 8021ce6:	d1e4      	bne.n	8021cb2 <_Balloc+0x2e>
 8021ce8:	2000      	movs	r0, #0
 8021cea:	bd70      	pop	{r4, r5, r6, pc}
 8021cec:	6802      	ldr	r2, [r0, #0]
 8021cee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8021cf2:	2300      	movs	r3, #0
 8021cf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021cf8:	e7f7      	b.n	8021cea <_Balloc+0x66>
 8021cfa:	bf00      	nop
 8021cfc:	08026e72 	.word	0x08026e72
 8021d00:	080270c8 	.word	0x080270c8

08021d04 <_Bfree>:
 8021d04:	b570      	push	{r4, r5, r6, lr}
 8021d06:	69c6      	ldr	r6, [r0, #28]
 8021d08:	4605      	mov	r5, r0
 8021d0a:	460c      	mov	r4, r1
 8021d0c:	b976      	cbnz	r6, 8021d2c <_Bfree+0x28>
 8021d0e:	2010      	movs	r0, #16
 8021d10:	f7ff ff02 	bl	8021b18 <malloc>
 8021d14:	4602      	mov	r2, r0
 8021d16:	61e8      	str	r0, [r5, #28]
 8021d18:	b920      	cbnz	r0, 8021d24 <_Bfree+0x20>
 8021d1a:	4b09      	ldr	r3, [pc, #36]	@ (8021d40 <_Bfree+0x3c>)
 8021d1c:	4809      	ldr	r0, [pc, #36]	@ (8021d44 <_Bfree+0x40>)
 8021d1e:	218f      	movs	r1, #143	@ 0x8f
 8021d20:	f7ff f8b4 	bl	8020e8c <__assert_func>
 8021d24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021d28:	6006      	str	r6, [r0, #0]
 8021d2a:	60c6      	str	r6, [r0, #12]
 8021d2c:	b13c      	cbz	r4, 8021d3e <_Bfree+0x3a>
 8021d2e:	69eb      	ldr	r3, [r5, #28]
 8021d30:	6862      	ldr	r2, [r4, #4]
 8021d32:	68db      	ldr	r3, [r3, #12]
 8021d34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021d38:	6021      	str	r1, [r4, #0]
 8021d3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8021d3e:	bd70      	pop	{r4, r5, r6, pc}
 8021d40:	08026e72 	.word	0x08026e72
 8021d44:	080270c8 	.word	0x080270c8

08021d48 <__multadd>:
 8021d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021d4c:	690d      	ldr	r5, [r1, #16]
 8021d4e:	4607      	mov	r7, r0
 8021d50:	460c      	mov	r4, r1
 8021d52:	461e      	mov	r6, r3
 8021d54:	f101 0c14 	add.w	ip, r1, #20
 8021d58:	2000      	movs	r0, #0
 8021d5a:	f8dc 3000 	ldr.w	r3, [ip]
 8021d5e:	b299      	uxth	r1, r3
 8021d60:	fb02 6101 	mla	r1, r2, r1, r6
 8021d64:	0c1e      	lsrs	r6, r3, #16
 8021d66:	0c0b      	lsrs	r3, r1, #16
 8021d68:	fb02 3306 	mla	r3, r2, r6, r3
 8021d6c:	b289      	uxth	r1, r1
 8021d6e:	3001      	adds	r0, #1
 8021d70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021d74:	4285      	cmp	r5, r0
 8021d76:	f84c 1b04 	str.w	r1, [ip], #4
 8021d7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8021d7e:	dcec      	bgt.n	8021d5a <__multadd+0x12>
 8021d80:	b30e      	cbz	r6, 8021dc6 <__multadd+0x7e>
 8021d82:	68a3      	ldr	r3, [r4, #8]
 8021d84:	42ab      	cmp	r3, r5
 8021d86:	dc19      	bgt.n	8021dbc <__multadd+0x74>
 8021d88:	6861      	ldr	r1, [r4, #4]
 8021d8a:	4638      	mov	r0, r7
 8021d8c:	3101      	adds	r1, #1
 8021d8e:	f7ff ff79 	bl	8021c84 <_Balloc>
 8021d92:	4680      	mov	r8, r0
 8021d94:	b928      	cbnz	r0, 8021da2 <__multadd+0x5a>
 8021d96:	4602      	mov	r2, r0
 8021d98:	4b0c      	ldr	r3, [pc, #48]	@ (8021dcc <__multadd+0x84>)
 8021d9a:	480d      	ldr	r0, [pc, #52]	@ (8021dd0 <__multadd+0x88>)
 8021d9c:	21ba      	movs	r1, #186	@ 0xba
 8021d9e:	f7ff f875 	bl	8020e8c <__assert_func>
 8021da2:	6922      	ldr	r2, [r4, #16]
 8021da4:	3202      	adds	r2, #2
 8021da6:	f104 010c 	add.w	r1, r4, #12
 8021daa:	0092      	lsls	r2, r2, #2
 8021dac:	300c      	adds	r0, #12
 8021dae:	f7ff f85e 	bl	8020e6e <memcpy>
 8021db2:	4621      	mov	r1, r4
 8021db4:	4638      	mov	r0, r7
 8021db6:	f7ff ffa5 	bl	8021d04 <_Bfree>
 8021dba:	4644      	mov	r4, r8
 8021dbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021dc0:	3501      	adds	r5, #1
 8021dc2:	615e      	str	r6, [r3, #20]
 8021dc4:	6125      	str	r5, [r4, #16]
 8021dc6:	4620      	mov	r0, r4
 8021dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021dcc:	080270b7 	.word	0x080270b7
 8021dd0:	080270c8 	.word	0x080270c8

08021dd4 <__hi0bits>:
 8021dd4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8021dd8:	4603      	mov	r3, r0
 8021dda:	bf36      	itet	cc
 8021ddc:	0403      	lslcc	r3, r0, #16
 8021dde:	2000      	movcs	r0, #0
 8021de0:	2010      	movcc	r0, #16
 8021de2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8021de6:	bf3c      	itt	cc
 8021de8:	021b      	lslcc	r3, r3, #8
 8021dea:	3008      	addcc	r0, #8
 8021dec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8021df0:	bf3c      	itt	cc
 8021df2:	011b      	lslcc	r3, r3, #4
 8021df4:	3004      	addcc	r0, #4
 8021df6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8021dfa:	bf3c      	itt	cc
 8021dfc:	009b      	lslcc	r3, r3, #2
 8021dfe:	3002      	addcc	r0, #2
 8021e00:	2b00      	cmp	r3, #0
 8021e02:	db05      	blt.n	8021e10 <__hi0bits+0x3c>
 8021e04:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8021e08:	f100 0001 	add.w	r0, r0, #1
 8021e0c:	bf08      	it	eq
 8021e0e:	2020      	moveq	r0, #32
 8021e10:	4770      	bx	lr

08021e12 <__lo0bits>:
 8021e12:	6803      	ldr	r3, [r0, #0]
 8021e14:	4602      	mov	r2, r0
 8021e16:	f013 0007 	ands.w	r0, r3, #7
 8021e1a:	d00b      	beq.n	8021e34 <__lo0bits+0x22>
 8021e1c:	07d9      	lsls	r1, r3, #31
 8021e1e:	d421      	bmi.n	8021e64 <__lo0bits+0x52>
 8021e20:	0798      	lsls	r0, r3, #30
 8021e22:	bf49      	itett	mi
 8021e24:	085b      	lsrmi	r3, r3, #1
 8021e26:	089b      	lsrpl	r3, r3, #2
 8021e28:	2001      	movmi	r0, #1
 8021e2a:	6013      	strmi	r3, [r2, #0]
 8021e2c:	bf5c      	itt	pl
 8021e2e:	6013      	strpl	r3, [r2, #0]
 8021e30:	2002      	movpl	r0, #2
 8021e32:	4770      	bx	lr
 8021e34:	b299      	uxth	r1, r3
 8021e36:	b909      	cbnz	r1, 8021e3c <__lo0bits+0x2a>
 8021e38:	0c1b      	lsrs	r3, r3, #16
 8021e3a:	2010      	movs	r0, #16
 8021e3c:	b2d9      	uxtb	r1, r3
 8021e3e:	b909      	cbnz	r1, 8021e44 <__lo0bits+0x32>
 8021e40:	3008      	adds	r0, #8
 8021e42:	0a1b      	lsrs	r3, r3, #8
 8021e44:	0719      	lsls	r1, r3, #28
 8021e46:	bf04      	itt	eq
 8021e48:	091b      	lsreq	r3, r3, #4
 8021e4a:	3004      	addeq	r0, #4
 8021e4c:	0799      	lsls	r1, r3, #30
 8021e4e:	bf04      	itt	eq
 8021e50:	089b      	lsreq	r3, r3, #2
 8021e52:	3002      	addeq	r0, #2
 8021e54:	07d9      	lsls	r1, r3, #31
 8021e56:	d403      	bmi.n	8021e60 <__lo0bits+0x4e>
 8021e58:	085b      	lsrs	r3, r3, #1
 8021e5a:	f100 0001 	add.w	r0, r0, #1
 8021e5e:	d003      	beq.n	8021e68 <__lo0bits+0x56>
 8021e60:	6013      	str	r3, [r2, #0]
 8021e62:	4770      	bx	lr
 8021e64:	2000      	movs	r0, #0
 8021e66:	4770      	bx	lr
 8021e68:	2020      	movs	r0, #32
 8021e6a:	4770      	bx	lr

08021e6c <__i2b>:
 8021e6c:	b510      	push	{r4, lr}
 8021e6e:	460c      	mov	r4, r1
 8021e70:	2101      	movs	r1, #1
 8021e72:	f7ff ff07 	bl	8021c84 <_Balloc>
 8021e76:	4602      	mov	r2, r0
 8021e78:	b928      	cbnz	r0, 8021e86 <__i2b+0x1a>
 8021e7a:	4b05      	ldr	r3, [pc, #20]	@ (8021e90 <__i2b+0x24>)
 8021e7c:	4805      	ldr	r0, [pc, #20]	@ (8021e94 <__i2b+0x28>)
 8021e7e:	f240 1145 	movw	r1, #325	@ 0x145
 8021e82:	f7ff f803 	bl	8020e8c <__assert_func>
 8021e86:	2301      	movs	r3, #1
 8021e88:	6144      	str	r4, [r0, #20]
 8021e8a:	6103      	str	r3, [r0, #16]
 8021e8c:	bd10      	pop	{r4, pc}
 8021e8e:	bf00      	nop
 8021e90:	080270b7 	.word	0x080270b7
 8021e94:	080270c8 	.word	0x080270c8

08021e98 <__multiply>:
 8021e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e9c:	4614      	mov	r4, r2
 8021e9e:	690a      	ldr	r2, [r1, #16]
 8021ea0:	6923      	ldr	r3, [r4, #16]
 8021ea2:	429a      	cmp	r2, r3
 8021ea4:	bfa8      	it	ge
 8021ea6:	4623      	movge	r3, r4
 8021ea8:	460f      	mov	r7, r1
 8021eaa:	bfa4      	itt	ge
 8021eac:	460c      	movge	r4, r1
 8021eae:	461f      	movge	r7, r3
 8021eb0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8021eb4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8021eb8:	68a3      	ldr	r3, [r4, #8]
 8021eba:	6861      	ldr	r1, [r4, #4]
 8021ebc:	eb0a 0609 	add.w	r6, sl, r9
 8021ec0:	42b3      	cmp	r3, r6
 8021ec2:	b085      	sub	sp, #20
 8021ec4:	bfb8      	it	lt
 8021ec6:	3101      	addlt	r1, #1
 8021ec8:	f7ff fedc 	bl	8021c84 <_Balloc>
 8021ecc:	b930      	cbnz	r0, 8021edc <__multiply+0x44>
 8021ece:	4602      	mov	r2, r0
 8021ed0:	4b44      	ldr	r3, [pc, #272]	@ (8021fe4 <__multiply+0x14c>)
 8021ed2:	4845      	ldr	r0, [pc, #276]	@ (8021fe8 <__multiply+0x150>)
 8021ed4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8021ed8:	f7fe ffd8 	bl	8020e8c <__assert_func>
 8021edc:	f100 0514 	add.w	r5, r0, #20
 8021ee0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8021ee4:	462b      	mov	r3, r5
 8021ee6:	2200      	movs	r2, #0
 8021ee8:	4543      	cmp	r3, r8
 8021eea:	d321      	bcc.n	8021f30 <__multiply+0x98>
 8021eec:	f107 0114 	add.w	r1, r7, #20
 8021ef0:	f104 0214 	add.w	r2, r4, #20
 8021ef4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8021ef8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8021efc:	9302      	str	r3, [sp, #8]
 8021efe:	1b13      	subs	r3, r2, r4
 8021f00:	3b15      	subs	r3, #21
 8021f02:	f023 0303 	bic.w	r3, r3, #3
 8021f06:	3304      	adds	r3, #4
 8021f08:	f104 0715 	add.w	r7, r4, #21
 8021f0c:	42ba      	cmp	r2, r7
 8021f0e:	bf38      	it	cc
 8021f10:	2304      	movcc	r3, #4
 8021f12:	9301      	str	r3, [sp, #4]
 8021f14:	9b02      	ldr	r3, [sp, #8]
 8021f16:	9103      	str	r1, [sp, #12]
 8021f18:	428b      	cmp	r3, r1
 8021f1a:	d80c      	bhi.n	8021f36 <__multiply+0x9e>
 8021f1c:	2e00      	cmp	r6, #0
 8021f1e:	dd03      	ble.n	8021f28 <__multiply+0x90>
 8021f20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021f24:	2b00      	cmp	r3, #0
 8021f26:	d05b      	beq.n	8021fe0 <__multiply+0x148>
 8021f28:	6106      	str	r6, [r0, #16]
 8021f2a:	b005      	add	sp, #20
 8021f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f30:	f843 2b04 	str.w	r2, [r3], #4
 8021f34:	e7d8      	b.n	8021ee8 <__multiply+0x50>
 8021f36:	f8b1 a000 	ldrh.w	sl, [r1]
 8021f3a:	f1ba 0f00 	cmp.w	sl, #0
 8021f3e:	d024      	beq.n	8021f8a <__multiply+0xf2>
 8021f40:	f104 0e14 	add.w	lr, r4, #20
 8021f44:	46a9      	mov	r9, r5
 8021f46:	f04f 0c00 	mov.w	ip, #0
 8021f4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8021f4e:	f8d9 3000 	ldr.w	r3, [r9]
 8021f52:	fa1f fb87 	uxth.w	fp, r7
 8021f56:	b29b      	uxth	r3, r3
 8021f58:	fb0a 330b 	mla	r3, sl, fp, r3
 8021f5c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8021f60:	f8d9 7000 	ldr.w	r7, [r9]
 8021f64:	4463      	add	r3, ip
 8021f66:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8021f6a:	fb0a c70b 	mla	r7, sl, fp, ip
 8021f6e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8021f72:	b29b      	uxth	r3, r3
 8021f74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8021f78:	4572      	cmp	r2, lr
 8021f7a:	f849 3b04 	str.w	r3, [r9], #4
 8021f7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8021f82:	d8e2      	bhi.n	8021f4a <__multiply+0xb2>
 8021f84:	9b01      	ldr	r3, [sp, #4]
 8021f86:	f845 c003 	str.w	ip, [r5, r3]
 8021f8a:	9b03      	ldr	r3, [sp, #12]
 8021f8c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8021f90:	3104      	adds	r1, #4
 8021f92:	f1b9 0f00 	cmp.w	r9, #0
 8021f96:	d021      	beq.n	8021fdc <__multiply+0x144>
 8021f98:	682b      	ldr	r3, [r5, #0]
 8021f9a:	f104 0c14 	add.w	ip, r4, #20
 8021f9e:	46ae      	mov	lr, r5
 8021fa0:	f04f 0a00 	mov.w	sl, #0
 8021fa4:	f8bc b000 	ldrh.w	fp, [ip]
 8021fa8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8021fac:	fb09 770b 	mla	r7, r9, fp, r7
 8021fb0:	4457      	add	r7, sl
 8021fb2:	b29b      	uxth	r3, r3
 8021fb4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8021fb8:	f84e 3b04 	str.w	r3, [lr], #4
 8021fbc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8021fc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8021fc4:	f8be 3000 	ldrh.w	r3, [lr]
 8021fc8:	fb09 330a 	mla	r3, r9, sl, r3
 8021fcc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8021fd0:	4562      	cmp	r2, ip
 8021fd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8021fd6:	d8e5      	bhi.n	8021fa4 <__multiply+0x10c>
 8021fd8:	9f01      	ldr	r7, [sp, #4]
 8021fda:	51eb      	str	r3, [r5, r7]
 8021fdc:	3504      	adds	r5, #4
 8021fde:	e799      	b.n	8021f14 <__multiply+0x7c>
 8021fe0:	3e01      	subs	r6, #1
 8021fe2:	e79b      	b.n	8021f1c <__multiply+0x84>
 8021fe4:	080270b7 	.word	0x080270b7
 8021fe8:	080270c8 	.word	0x080270c8

08021fec <__pow5mult>:
 8021fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021ff0:	4615      	mov	r5, r2
 8021ff2:	f012 0203 	ands.w	r2, r2, #3
 8021ff6:	4607      	mov	r7, r0
 8021ff8:	460e      	mov	r6, r1
 8021ffa:	d007      	beq.n	802200c <__pow5mult+0x20>
 8021ffc:	4c25      	ldr	r4, [pc, #148]	@ (8022094 <__pow5mult+0xa8>)
 8021ffe:	3a01      	subs	r2, #1
 8022000:	2300      	movs	r3, #0
 8022002:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022006:	f7ff fe9f 	bl	8021d48 <__multadd>
 802200a:	4606      	mov	r6, r0
 802200c:	10ad      	asrs	r5, r5, #2
 802200e:	d03d      	beq.n	802208c <__pow5mult+0xa0>
 8022010:	69fc      	ldr	r4, [r7, #28]
 8022012:	b97c      	cbnz	r4, 8022034 <__pow5mult+0x48>
 8022014:	2010      	movs	r0, #16
 8022016:	f7ff fd7f 	bl	8021b18 <malloc>
 802201a:	4602      	mov	r2, r0
 802201c:	61f8      	str	r0, [r7, #28]
 802201e:	b928      	cbnz	r0, 802202c <__pow5mult+0x40>
 8022020:	4b1d      	ldr	r3, [pc, #116]	@ (8022098 <__pow5mult+0xac>)
 8022022:	481e      	ldr	r0, [pc, #120]	@ (802209c <__pow5mult+0xb0>)
 8022024:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8022028:	f7fe ff30 	bl	8020e8c <__assert_func>
 802202c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8022030:	6004      	str	r4, [r0, #0]
 8022032:	60c4      	str	r4, [r0, #12]
 8022034:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8022038:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802203c:	b94c      	cbnz	r4, 8022052 <__pow5mult+0x66>
 802203e:	f240 2171 	movw	r1, #625	@ 0x271
 8022042:	4638      	mov	r0, r7
 8022044:	f7ff ff12 	bl	8021e6c <__i2b>
 8022048:	2300      	movs	r3, #0
 802204a:	f8c8 0008 	str.w	r0, [r8, #8]
 802204e:	4604      	mov	r4, r0
 8022050:	6003      	str	r3, [r0, #0]
 8022052:	f04f 0900 	mov.w	r9, #0
 8022056:	07eb      	lsls	r3, r5, #31
 8022058:	d50a      	bpl.n	8022070 <__pow5mult+0x84>
 802205a:	4631      	mov	r1, r6
 802205c:	4622      	mov	r2, r4
 802205e:	4638      	mov	r0, r7
 8022060:	f7ff ff1a 	bl	8021e98 <__multiply>
 8022064:	4631      	mov	r1, r6
 8022066:	4680      	mov	r8, r0
 8022068:	4638      	mov	r0, r7
 802206a:	f7ff fe4b 	bl	8021d04 <_Bfree>
 802206e:	4646      	mov	r6, r8
 8022070:	106d      	asrs	r5, r5, #1
 8022072:	d00b      	beq.n	802208c <__pow5mult+0xa0>
 8022074:	6820      	ldr	r0, [r4, #0]
 8022076:	b938      	cbnz	r0, 8022088 <__pow5mult+0x9c>
 8022078:	4622      	mov	r2, r4
 802207a:	4621      	mov	r1, r4
 802207c:	4638      	mov	r0, r7
 802207e:	f7ff ff0b 	bl	8021e98 <__multiply>
 8022082:	6020      	str	r0, [r4, #0]
 8022084:	f8c0 9000 	str.w	r9, [r0]
 8022088:	4604      	mov	r4, r0
 802208a:	e7e4      	b.n	8022056 <__pow5mult+0x6a>
 802208c:	4630      	mov	r0, r6
 802208e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022092:	bf00      	nop
 8022094:	08027124 	.word	0x08027124
 8022098:	08026e72 	.word	0x08026e72
 802209c:	080270c8 	.word	0x080270c8

080220a0 <__lshift>:
 80220a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80220a4:	460c      	mov	r4, r1
 80220a6:	6849      	ldr	r1, [r1, #4]
 80220a8:	6923      	ldr	r3, [r4, #16]
 80220aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80220ae:	68a3      	ldr	r3, [r4, #8]
 80220b0:	4607      	mov	r7, r0
 80220b2:	4691      	mov	r9, r2
 80220b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80220b8:	f108 0601 	add.w	r6, r8, #1
 80220bc:	42b3      	cmp	r3, r6
 80220be:	db0b      	blt.n	80220d8 <__lshift+0x38>
 80220c0:	4638      	mov	r0, r7
 80220c2:	f7ff fddf 	bl	8021c84 <_Balloc>
 80220c6:	4605      	mov	r5, r0
 80220c8:	b948      	cbnz	r0, 80220de <__lshift+0x3e>
 80220ca:	4602      	mov	r2, r0
 80220cc:	4b28      	ldr	r3, [pc, #160]	@ (8022170 <__lshift+0xd0>)
 80220ce:	4829      	ldr	r0, [pc, #164]	@ (8022174 <__lshift+0xd4>)
 80220d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80220d4:	f7fe feda 	bl	8020e8c <__assert_func>
 80220d8:	3101      	adds	r1, #1
 80220da:	005b      	lsls	r3, r3, #1
 80220dc:	e7ee      	b.n	80220bc <__lshift+0x1c>
 80220de:	2300      	movs	r3, #0
 80220e0:	f100 0114 	add.w	r1, r0, #20
 80220e4:	f100 0210 	add.w	r2, r0, #16
 80220e8:	4618      	mov	r0, r3
 80220ea:	4553      	cmp	r3, sl
 80220ec:	db33      	blt.n	8022156 <__lshift+0xb6>
 80220ee:	6920      	ldr	r0, [r4, #16]
 80220f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80220f4:	f104 0314 	add.w	r3, r4, #20
 80220f8:	f019 091f 	ands.w	r9, r9, #31
 80220fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8022100:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8022104:	d02b      	beq.n	802215e <__lshift+0xbe>
 8022106:	f1c9 0e20 	rsb	lr, r9, #32
 802210a:	468a      	mov	sl, r1
 802210c:	2200      	movs	r2, #0
 802210e:	6818      	ldr	r0, [r3, #0]
 8022110:	fa00 f009 	lsl.w	r0, r0, r9
 8022114:	4310      	orrs	r0, r2
 8022116:	f84a 0b04 	str.w	r0, [sl], #4
 802211a:	f853 2b04 	ldr.w	r2, [r3], #4
 802211e:	459c      	cmp	ip, r3
 8022120:	fa22 f20e 	lsr.w	r2, r2, lr
 8022124:	d8f3      	bhi.n	802210e <__lshift+0x6e>
 8022126:	ebac 0304 	sub.w	r3, ip, r4
 802212a:	3b15      	subs	r3, #21
 802212c:	f023 0303 	bic.w	r3, r3, #3
 8022130:	3304      	adds	r3, #4
 8022132:	f104 0015 	add.w	r0, r4, #21
 8022136:	4584      	cmp	ip, r0
 8022138:	bf38      	it	cc
 802213a:	2304      	movcc	r3, #4
 802213c:	50ca      	str	r2, [r1, r3]
 802213e:	b10a      	cbz	r2, 8022144 <__lshift+0xa4>
 8022140:	f108 0602 	add.w	r6, r8, #2
 8022144:	3e01      	subs	r6, #1
 8022146:	4638      	mov	r0, r7
 8022148:	612e      	str	r6, [r5, #16]
 802214a:	4621      	mov	r1, r4
 802214c:	f7ff fdda 	bl	8021d04 <_Bfree>
 8022150:	4628      	mov	r0, r5
 8022152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022156:	f842 0f04 	str.w	r0, [r2, #4]!
 802215a:	3301      	adds	r3, #1
 802215c:	e7c5      	b.n	80220ea <__lshift+0x4a>
 802215e:	3904      	subs	r1, #4
 8022160:	f853 2b04 	ldr.w	r2, [r3], #4
 8022164:	f841 2f04 	str.w	r2, [r1, #4]!
 8022168:	459c      	cmp	ip, r3
 802216a:	d8f9      	bhi.n	8022160 <__lshift+0xc0>
 802216c:	e7ea      	b.n	8022144 <__lshift+0xa4>
 802216e:	bf00      	nop
 8022170:	080270b7 	.word	0x080270b7
 8022174:	080270c8 	.word	0x080270c8

08022178 <__mcmp>:
 8022178:	690a      	ldr	r2, [r1, #16]
 802217a:	4603      	mov	r3, r0
 802217c:	6900      	ldr	r0, [r0, #16]
 802217e:	1a80      	subs	r0, r0, r2
 8022180:	b530      	push	{r4, r5, lr}
 8022182:	d10e      	bne.n	80221a2 <__mcmp+0x2a>
 8022184:	3314      	adds	r3, #20
 8022186:	3114      	adds	r1, #20
 8022188:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 802218c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8022190:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8022194:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8022198:	4295      	cmp	r5, r2
 802219a:	d003      	beq.n	80221a4 <__mcmp+0x2c>
 802219c:	d205      	bcs.n	80221aa <__mcmp+0x32>
 802219e:	f04f 30ff 	mov.w	r0, #4294967295
 80221a2:	bd30      	pop	{r4, r5, pc}
 80221a4:	42a3      	cmp	r3, r4
 80221a6:	d3f3      	bcc.n	8022190 <__mcmp+0x18>
 80221a8:	e7fb      	b.n	80221a2 <__mcmp+0x2a>
 80221aa:	2001      	movs	r0, #1
 80221ac:	e7f9      	b.n	80221a2 <__mcmp+0x2a>
	...

080221b0 <__mdiff>:
 80221b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221b4:	4689      	mov	r9, r1
 80221b6:	4606      	mov	r6, r0
 80221b8:	4611      	mov	r1, r2
 80221ba:	4648      	mov	r0, r9
 80221bc:	4614      	mov	r4, r2
 80221be:	f7ff ffdb 	bl	8022178 <__mcmp>
 80221c2:	1e05      	subs	r5, r0, #0
 80221c4:	d112      	bne.n	80221ec <__mdiff+0x3c>
 80221c6:	4629      	mov	r1, r5
 80221c8:	4630      	mov	r0, r6
 80221ca:	f7ff fd5b 	bl	8021c84 <_Balloc>
 80221ce:	4602      	mov	r2, r0
 80221d0:	b928      	cbnz	r0, 80221de <__mdiff+0x2e>
 80221d2:	4b3f      	ldr	r3, [pc, #252]	@ (80222d0 <__mdiff+0x120>)
 80221d4:	f240 2137 	movw	r1, #567	@ 0x237
 80221d8:	483e      	ldr	r0, [pc, #248]	@ (80222d4 <__mdiff+0x124>)
 80221da:	f7fe fe57 	bl	8020e8c <__assert_func>
 80221de:	2301      	movs	r3, #1
 80221e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80221e4:	4610      	mov	r0, r2
 80221e6:	b003      	add	sp, #12
 80221e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221ec:	bfbc      	itt	lt
 80221ee:	464b      	movlt	r3, r9
 80221f0:	46a1      	movlt	r9, r4
 80221f2:	4630      	mov	r0, r6
 80221f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80221f8:	bfba      	itte	lt
 80221fa:	461c      	movlt	r4, r3
 80221fc:	2501      	movlt	r5, #1
 80221fe:	2500      	movge	r5, #0
 8022200:	f7ff fd40 	bl	8021c84 <_Balloc>
 8022204:	4602      	mov	r2, r0
 8022206:	b918      	cbnz	r0, 8022210 <__mdiff+0x60>
 8022208:	4b31      	ldr	r3, [pc, #196]	@ (80222d0 <__mdiff+0x120>)
 802220a:	f240 2145 	movw	r1, #581	@ 0x245
 802220e:	e7e3      	b.n	80221d8 <__mdiff+0x28>
 8022210:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8022214:	6926      	ldr	r6, [r4, #16]
 8022216:	60c5      	str	r5, [r0, #12]
 8022218:	f109 0310 	add.w	r3, r9, #16
 802221c:	f109 0514 	add.w	r5, r9, #20
 8022220:	f104 0e14 	add.w	lr, r4, #20
 8022224:	f100 0b14 	add.w	fp, r0, #20
 8022228:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 802222c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8022230:	9301      	str	r3, [sp, #4]
 8022232:	46d9      	mov	r9, fp
 8022234:	f04f 0c00 	mov.w	ip, #0
 8022238:	9b01      	ldr	r3, [sp, #4]
 802223a:	f85e 0b04 	ldr.w	r0, [lr], #4
 802223e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8022242:	9301      	str	r3, [sp, #4]
 8022244:	fa1f f38a 	uxth.w	r3, sl
 8022248:	4619      	mov	r1, r3
 802224a:	b283      	uxth	r3, r0
 802224c:	1acb      	subs	r3, r1, r3
 802224e:	0c00      	lsrs	r0, r0, #16
 8022250:	4463      	add	r3, ip
 8022252:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8022256:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802225a:	b29b      	uxth	r3, r3
 802225c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8022260:	4576      	cmp	r6, lr
 8022262:	f849 3b04 	str.w	r3, [r9], #4
 8022266:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802226a:	d8e5      	bhi.n	8022238 <__mdiff+0x88>
 802226c:	1b33      	subs	r3, r6, r4
 802226e:	3b15      	subs	r3, #21
 8022270:	f023 0303 	bic.w	r3, r3, #3
 8022274:	3415      	adds	r4, #21
 8022276:	3304      	adds	r3, #4
 8022278:	42a6      	cmp	r6, r4
 802227a:	bf38      	it	cc
 802227c:	2304      	movcc	r3, #4
 802227e:	441d      	add	r5, r3
 8022280:	445b      	add	r3, fp
 8022282:	461e      	mov	r6, r3
 8022284:	462c      	mov	r4, r5
 8022286:	4544      	cmp	r4, r8
 8022288:	d30e      	bcc.n	80222a8 <__mdiff+0xf8>
 802228a:	f108 0103 	add.w	r1, r8, #3
 802228e:	1b49      	subs	r1, r1, r5
 8022290:	f021 0103 	bic.w	r1, r1, #3
 8022294:	3d03      	subs	r5, #3
 8022296:	45a8      	cmp	r8, r5
 8022298:	bf38      	it	cc
 802229a:	2100      	movcc	r1, #0
 802229c:	440b      	add	r3, r1
 802229e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80222a2:	b191      	cbz	r1, 80222ca <__mdiff+0x11a>
 80222a4:	6117      	str	r7, [r2, #16]
 80222a6:	e79d      	b.n	80221e4 <__mdiff+0x34>
 80222a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80222ac:	46e6      	mov	lr, ip
 80222ae:	0c08      	lsrs	r0, r1, #16
 80222b0:	fa1c fc81 	uxtah	ip, ip, r1
 80222b4:	4471      	add	r1, lr
 80222b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80222ba:	b289      	uxth	r1, r1
 80222bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80222c0:	f846 1b04 	str.w	r1, [r6], #4
 80222c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80222c8:	e7dd      	b.n	8022286 <__mdiff+0xd6>
 80222ca:	3f01      	subs	r7, #1
 80222cc:	e7e7      	b.n	802229e <__mdiff+0xee>
 80222ce:	bf00      	nop
 80222d0:	080270b7 	.word	0x080270b7
 80222d4:	080270c8 	.word	0x080270c8

080222d8 <__d2b>:
 80222d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80222dc:	460f      	mov	r7, r1
 80222de:	2101      	movs	r1, #1
 80222e0:	ec59 8b10 	vmov	r8, r9, d0
 80222e4:	4616      	mov	r6, r2
 80222e6:	f7ff fccd 	bl	8021c84 <_Balloc>
 80222ea:	4604      	mov	r4, r0
 80222ec:	b930      	cbnz	r0, 80222fc <__d2b+0x24>
 80222ee:	4602      	mov	r2, r0
 80222f0:	4b23      	ldr	r3, [pc, #140]	@ (8022380 <__d2b+0xa8>)
 80222f2:	4824      	ldr	r0, [pc, #144]	@ (8022384 <__d2b+0xac>)
 80222f4:	f240 310f 	movw	r1, #783	@ 0x30f
 80222f8:	f7fe fdc8 	bl	8020e8c <__assert_func>
 80222fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8022300:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022304:	b10d      	cbz	r5, 802230a <__d2b+0x32>
 8022306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802230a:	9301      	str	r3, [sp, #4]
 802230c:	f1b8 0300 	subs.w	r3, r8, #0
 8022310:	d023      	beq.n	802235a <__d2b+0x82>
 8022312:	4668      	mov	r0, sp
 8022314:	9300      	str	r3, [sp, #0]
 8022316:	f7ff fd7c 	bl	8021e12 <__lo0bits>
 802231a:	e9dd 1200 	ldrd	r1, r2, [sp]
 802231e:	b1d0      	cbz	r0, 8022356 <__d2b+0x7e>
 8022320:	f1c0 0320 	rsb	r3, r0, #32
 8022324:	fa02 f303 	lsl.w	r3, r2, r3
 8022328:	430b      	orrs	r3, r1
 802232a:	40c2      	lsrs	r2, r0
 802232c:	6163      	str	r3, [r4, #20]
 802232e:	9201      	str	r2, [sp, #4]
 8022330:	9b01      	ldr	r3, [sp, #4]
 8022332:	61a3      	str	r3, [r4, #24]
 8022334:	2b00      	cmp	r3, #0
 8022336:	bf0c      	ite	eq
 8022338:	2201      	moveq	r2, #1
 802233a:	2202      	movne	r2, #2
 802233c:	6122      	str	r2, [r4, #16]
 802233e:	b1a5      	cbz	r5, 802236a <__d2b+0x92>
 8022340:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8022344:	4405      	add	r5, r0
 8022346:	603d      	str	r5, [r7, #0]
 8022348:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 802234c:	6030      	str	r0, [r6, #0]
 802234e:	4620      	mov	r0, r4
 8022350:	b003      	add	sp, #12
 8022352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022356:	6161      	str	r1, [r4, #20]
 8022358:	e7ea      	b.n	8022330 <__d2b+0x58>
 802235a:	a801      	add	r0, sp, #4
 802235c:	f7ff fd59 	bl	8021e12 <__lo0bits>
 8022360:	9b01      	ldr	r3, [sp, #4]
 8022362:	6163      	str	r3, [r4, #20]
 8022364:	3020      	adds	r0, #32
 8022366:	2201      	movs	r2, #1
 8022368:	e7e8      	b.n	802233c <__d2b+0x64>
 802236a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802236e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8022372:	6038      	str	r0, [r7, #0]
 8022374:	6918      	ldr	r0, [r3, #16]
 8022376:	f7ff fd2d 	bl	8021dd4 <__hi0bits>
 802237a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802237e:	e7e5      	b.n	802234c <__d2b+0x74>
 8022380:	080270b7 	.word	0x080270b7
 8022384:	080270c8 	.word	0x080270c8

08022388 <__ssputs_r>:
 8022388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802238c:	688e      	ldr	r6, [r1, #8]
 802238e:	461f      	mov	r7, r3
 8022390:	42be      	cmp	r6, r7
 8022392:	680b      	ldr	r3, [r1, #0]
 8022394:	4682      	mov	sl, r0
 8022396:	460c      	mov	r4, r1
 8022398:	4690      	mov	r8, r2
 802239a:	d82d      	bhi.n	80223f8 <__ssputs_r+0x70>
 802239c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80223a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80223a4:	d026      	beq.n	80223f4 <__ssputs_r+0x6c>
 80223a6:	6965      	ldr	r5, [r4, #20]
 80223a8:	6909      	ldr	r1, [r1, #16]
 80223aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80223ae:	eba3 0901 	sub.w	r9, r3, r1
 80223b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80223b6:	1c7b      	adds	r3, r7, #1
 80223b8:	444b      	add	r3, r9
 80223ba:	106d      	asrs	r5, r5, #1
 80223bc:	429d      	cmp	r5, r3
 80223be:	bf38      	it	cc
 80223c0:	461d      	movcc	r5, r3
 80223c2:	0553      	lsls	r3, r2, #21
 80223c4:	d527      	bpl.n	8022416 <__ssputs_r+0x8e>
 80223c6:	4629      	mov	r1, r5
 80223c8:	f7ff fbd0 	bl	8021b6c <_malloc_r>
 80223cc:	4606      	mov	r6, r0
 80223ce:	b360      	cbz	r0, 802242a <__ssputs_r+0xa2>
 80223d0:	6921      	ldr	r1, [r4, #16]
 80223d2:	464a      	mov	r2, r9
 80223d4:	f7fe fd4b 	bl	8020e6e <memcpy>
 80223d8:	89a3      	ldrh	r3, [r4, #12]
 80223da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80223de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80223e2:	81a3      	strh	r3, [r4, #12]
 80223e4:	6126      	str	r6, [r4, #16]
 80223e6:	6165      	str	r5, [r4, #20]
 80223e8:	444e      	add	r6, r9
 80223ea:	eba5 0509 	sub.w	r5, r5, r9
 80223ee:	6026      	str	r6, [r4, #0]
 80223f0:	60a5      	str	r5, [r4, #8]
 80223f2:	463e      	mov	r6, r7
 80223f4:	42be      	cmp	r6, r7
 80223f6:	d900      	bls.n	80223fa <__ssputs_r+0x72>
 80223f8:	463e      	mov	r6, r7
 80223fa:	6820      	ldr	r0, [r4, #0]
 80223fc:	4632      	mov	r2, r6
 80223fe:	4641      	mov	r1, r8
 8022400:	f7fe fc4c 	bl	8020c9c <memmove>
 8022404:	68a3      	ldr	r3, [r4, #8]
 8022406:	1b9b      	subs	r3, r3, r6
 8022408:	60a3      	str	r3, [r4, #8]
 802240a:	6823      	ldr	r3, [r4, #0]
 802240c:	4433      	add	r3, r6
 802240e:	6023      	str	r3, [r4, #0]
 8022410:	2000      	movs	r0, #0
 8022412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022416:	462a      	mov	r2, r5
 8022418:	f000 fbcf 	bl	8022bba <_realloc_r>
 802241c:	4606      	mov	r6, r0
 802241e:	2800      	cmp	r0, #0
 8022420:	d1e0      	bne.n	80223e4 <__ssputs_r+0x5c>
 8022422:	6921      	ldr	r1, [r4, #16]
 8022424:	4650      	mov	r0, sl
 8022426:	f7ff fb2d 	bl	8021a84 <_free_r>
 802242a:	230c      	movs	r3, #12
 802242c:	f8ca 3000 	str.w	r3, [sl]
 8022430:	89a3      	ldrh	r3, [r4, #12]
 8022432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022436:	81a3      	strh	r3, [r4, #12]
 8022438:	f04f 30ff 	mov.w	r0, #4294967295
 802243c:	e7e9      	b.n	8022412 <__ssputs_r+0x8a>
	...

08022440 <_svfiprintf_r>:
 8022440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022444:	4698      	mov	r8, r3
 8022446:	898b      	ldrh	r3, [r1, #12]
 8022448:	061b      	lsls	r3, r3, #24
 802244a:	b09d      	sub	sp, #116	@ 0x74
 802244c:	4607      	mov	r7, r0
 802244e:	460d      	mov	r5, r1
 8022450:	4614      	mov	r4, r2
 8022452:	d510      	bpl.n	8022476 <_svfiprintf_r+0x36>
 8022454:	690b      	ldr	r3, [r1, #16]
 8022456:	b973      	cbnz	r3, 8022476 <_svfiprintf_r+0x36>
 8022458:	2140      	movs	r1, #64	@ 0x40
 802245a:	f7ff fb87 	bl	8021b6c <_malloc_r>
 802245e:	6028      	str	r0, [r5, #0]
 8022460:	6128      	str	r0, [r5, #16]
 8022462:	b930      	cbnz	r0, 8022472 <_svfiprintf_r+0x32>
 8022464:	230c      	movs	r3, #12
 8022466:	603b      	str	r3, [r7, #0]
 8022468:	f04f 30ff 	mov.w	r0, #4294967295
 802246c:	b01d      	add	sp, #116	@ 0x74
 802246e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022472:	2340      	movs	r3, #64	@ 0x40
 8022474:	616b      	str	r3, [r5, #20]
 8022476:	2300      	movs	r3, #0
 8022478:	9309      	str	r3, [sp, #36]	@ 0x24
 802247a:	2320      	movs	r3, #32
 802247c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8022480:	f8cd 800c 	str.w	r8, [sp, #12]
 8022484:	2330      	movs	r3, #48	@ 0x30
 8022486:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8022624 <_svfiprintf_r+0x1e4>
 802248a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802248e:	f04f 0901 	mov.w	r9, #1
 8022492:	4623      	mov	r3, r4
 8022494:	469a      	mov	sl, r3
 8022496:	f813 2b01 	ldrb.w	r2, [r3], #1
 802249a:	b10a      	cbz	r2, 80224a0 <_svfiprintf_r+0x60>
 802249c:	2a25      	cmp	r2, #37	@ 0x25
 802249e:	d1f9      	bne.n	8022494 <_svfiprintf_r+0x54>
 80224a0:	ebba 0b04 	subs.w	fp, sl, r4
 80224a4:	d00b      	beq.n	80224be <_svfiprintf_r+0x7e>
 80224a6:	465b      	mov	r3, fp
 80224a8:	4622      	mov	r2, r4
 80224aa:	4629      	mov	r1, r5
 80224ac:	4638      	mov	r0, r7
 80224ae:	f7ff ff6b 	bl	8022388 <__ssputs_r>
 80224b2:	3001      	adds	r0, #1
 80224b4:	f000 80a7 	beq.w	8022606 <_svfiprintf_r+0x1c6>
 80224b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80224ba:	445a      	add	r2, fp
 80224bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80224be:	f89a 3000 	ldrb.w	r3, [sl]
 80224c2:	2b00      	cmp	r3, #0
 80224c4:	f000 809f 	beq.w	8022606 <_svfiprintf_r+0x1c6>
 80224c8:	2300      	movs	r3, #0
 80224ca:	f04f 32ff 	mov.w	r2, #4294967295
 80224ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80224d2:	f10a 0a01 	add.w	sl, sl, #1
 80224d6:	9304      	str	r3, [sp, #16]
 80224d8:	9307      	str	r3, [sp, #28]
 80224da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80224de:	931a      	str	r3, [sp, #104]	@ 0x68
 80224e0:	4654      	mov	r4, sl
 80224e2:	2205      	movs	r2, #5
 80224e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80224e8:	484e      	ldr	r0, [pc, #312]	@ (8022624 <_svfiprintf_r+0x1e4>)
 80224ea:	f7dd ff11 	bl	8000310 <memchr>
 80224ee:	9a04      	ldr	r2, [sp, #16]
 80224f0:	b9d8      	cbnz	r0, 802252a <_svfiprintf_r+0xea>
 80224f2:	06d0      	lsls	r0, r2, #27
 80224f4:	bf44      	itt	mi
 80224f6:	2320      	movmi	r3, #32
 80224f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80224fc:	0711      	lsls	r1, r2, #28
 80224fe:	bf44      	itt	mi
 8022500:	232b      	movmi	r3, #43	@ 0x2b
 8022502:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022506:	f89a 3000 	ldrb.w	r3, [sl]
 802250a:	2b2a      	cmp	r3, #42	@ 0x2a
 802250c:	d015      	beq.n	802253a <_svfiprintf_r+0xfa>
 802250e:	9a07      	ldr	r2, [sp, #28]
 8022510:	4654      	mov	r4, sl
 8022512:	2000      	movs	r0, #0
 8022514:	f04f 0c0a 	mov.w	ip, #10
 8022518:	4621      	mov	r1, r4
 802251a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802251e:	3b30      	subs	r3, #48	@ 0x30
 8022520:	2b09      	cmp	r3, #9
 8022522:	d94b      	bls.n	80225bc <_svfiprintf_r+0x17c>
 8022524:	b1b0      	cbz	r0, 8022554 <_svfiprintf_r+0x114>
 8022526:	9207      	str	r2, [sp, #28]
 8022528:	e014      	b.n	8022554 <_svfiprintf_r+0x114>
 802252a:	eba0 0308 	sub.w	r3, r0, r8
 802252e:	fa09 f303 	lsl.w	r3, r9, r3
 8022532:	4313      	orrs	r3, r2
 8022534:	9304      	str	r3, [sp, #16]
 8022536:	46a2      	mov	sl, r4
 8022538:	e7d2      	b.n	80224e0 <_svfiprintf_r+0xa0>
 802253a:	9b03      	ldr	r3, [sp, #12]
 802253c:	1d19      	adds	r1, r3, #4
 802253e:	681b      	ldr	r3, [r3, #0]
 8022540:	9103      	str	r1, [sp, #12]
 8022542:	2b00      	cmp	r3, #0
 8022544:	bfbb      	ittet	lt
 8022546:	425b      	neglt	r3, r3
 8022548:	f042 0202 	orrlt.w	r2, r2, #2
 802254c:	9307      	strge	r3, [sp, #28]
 802254e:	9307      	strlt	r3, [sp, #28]
 8022550:	bfb8      	it	lt
 8022552:	9204      	strlt	r2, [sp, #16]
 8022554:	7823      	ldrb	r3, [r4, #0]
 8022556:	2b2e      	cmp	r3, #46	@ 0x2e
 8022558:	d10a      	bne.n	8022570 <_svfiprintf_r+0x130>
 802255a:	7863      	ldrb	r3, [r4, #1]
 802255c:	2b2a      	cmp	r3, #42	@ 0x2a
 802255e:	d132      	bne.n	80225c6 <_svfiprintf_r+0x186>
 8022560:	9b03      	ldr	r3, [sp, #12]
 8022562:	1d1a      	adds	r2, r3, #4
 8022564:	681b      	ldr	r3, [r3, #0]
 8022566:	9203      	str	r2, [sp, #12]
 8022568:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802256c:	3402      	adds	r4, #2
 802256e:	9305      	str	r3, [sp, #20]
 8022570:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8022634 <_svfiprintf_r+0x1f4>
 8022574:	7821      	ldrb	r1, [r4, #0]
 8022576:	2203      	movs	r2, #3
 8022578:	4650      	mov	r0, sl
 802257a:	f7dd fec9 	bl	8000310 <memchr>
 802257e:	b138      	cbz	r0, 8022590 <_svfiprintf_r+0x150>
 8022580:	9b04      	ldr	r3, [sp, #16]
 8022582:	eba0 000a 	sub.w	r0, r0, sl
 8022586:	2240      	movs	r2, #64	@ 0x40
 8022588:	4082      	lsls	r2, r0
 802258a:	4313      	orrs	r3, r2
 802258c:	3401      	adds	r4, #1
 802258e:	9304      	str	r3, [sp, #16]
 8022590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022594:	4824      	ldr	r0, [pc, #144]	@ (8022628 <_svfiprintf_r+0x1e8>)
 8022596:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802259a:	2206      	movs	r2, #6
 802259c:	f7dd feb8 	bl	8000310 <memchr>
 80225a0:	2800      	cmp	r0, #0
 80225a2:	d036      	beq.n	8022612 <_svfiprintf_r+0x1d2>
 80225a4:	4b21      	ldr	r3, [pc, #132]	@ (802262c <_svfiprintf_r+0x1ec>)
 80225a6:	bb1b      	cbnz	r3, 80225f0 <_svfiprintf_r+0x1b0>
 80225a8:	9b03      	ldr	r3, [sp, #12]
 80225aa:	3307      	adds	r3, #7
 80225ac:	f023 0307 	bic.w	r3, r3, #7
 80225b0:	3308      	adds	r3, #8
 80225b2:	9303      	str	r3, [sp, #12]
 80225b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80225b6:	4433      	add	r3, r6
 80225b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80225ba:	e76a      	b.n	8022492 <_svfiprintf_r+0x52>
 80225bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80225c0:	460c      	mov	r4, r1
 80225c2:	2001      	movs	r0, #1
 80225c4:	e7a8      	b.n	8022518 <_svfiprintf_r+0xd8>
 80225c6:	2300      	movs	r3, #0
 80225c8:	3401      	adds	r4, #1
 80225ca:	9305      	str	r3, [sp, #20]
 80225cc:	4619      	mov	r1, r3
 80225ce:	f04f 0c0a 	mov.w	ip, #10
 80225d2:	4620      	mov	r0, r4
 80225d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80225d8:	3a30      	subs	r2, #48	@ 0x30
 80225da:	2a09      	cmp	r2, #9
 80225dc:	d903      	bls.n	80225e6 <_svfiprintf_r+0x1a6>
 80225de:	2b00      	cmp	r3, #0
 80225e0:	d0c6      	beq.n	8022570 <_svfiprintf_r+0x130>
 80225e2:	9105      	str	r1, [sp, #20]
 80225e4:	e7c4      	b.n	8022570 <_svfiprintf_r+0x130>
 80225e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80225ea:	4604      	mov	r4, r0
 80225ec:	2301      	movs	r3, #1
 80225ee:	e7f0      	b.n	80225d2 <_svfiprintf_r+0x192>
 80225f0:	ab03      	add	r3, sp, #12
 80225f2:	9300      	str	r3, [sp, #0]
 80225f4:	462a      	mov	r2, r5
 80225f6:	4b0e      	ldr	r3, [pc, #56]	@ (8022630 <_svfiprintf_r+0x1f0>)
 80225f8:	a904      	add	r1, sp, #16
 80225fa:	4638      	mov	r0, r7
 80225fc:	f7fd fd58 	bl	80200b0 <_printf_float>
 8022600:	1c42      	adds	r2, r0, #1
 8022602:	4606      	mov	r6, r0
 8022604:	d1d6      	bne.n	80225b4 <_svfiprintf_r+0x174>
 8022606:	89ab      	ldrh	r3, [r5, #12]
 8022608:	065b      	lsls	r3, r3, #25
 802260a:	f53f af2d 	bmi.w	8022468 <_svfiprintf_r+0x28>
 802260e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022610:	e72c      	b.n	802246c <_svfiprintf_r+0x2c>
 8022612:	ab03      	add	r3, sp, #12
 8022614:	9300      	str	r3, [sp, #0]
 8022616:	462a      	mov	r2, r5
 8022618:	4b05      	ldr	r3, [pc, #20]	@ (8022630 <_svfiprintf_r+0x1f0>)
 802261a:	a904      	add	r1, sp, #16
 802261c:	4638      	mov	r0, r7
 802261e:	f7fd ffcf 	bl	80205c0 <_printf_i>
 8022622:	e7ed      	b.n	8022600 <_svfiprintf_r+0x1c0>
 8022624:	08027220 	.word	0x08027220
 8022628:	0802722a 	.word	0x0802722a
 802262c:	080200b1 	.word	0x080200b1
 8022630:	08022389 	.word	0x08022389
 8022634:	08027226 	.word	0x08027226

08022638 <__sfputc_r>:
 8022638:	6893      	ldr	r3, [r2, #8]
 802263a:	3b01      	subs	r3, #1
 802263c:	2b00      	cmp	r3, #0
 802263e:	b410      	push	{r4}
 8022640:	6093      	str	r3, [r2, #8]
 8022642:	da08      	bge.n	8022656 <__sfputc_r+0x1e>
 8022644:	6994      	ldr	r4, [r2, #24]
 8022646:	42a3      	cmp	r3, r4
 8022648:	db01      	blt.n	802264e <__sfputc_r+0x16>
 802264a:	290a      	cmp	r1, #10
 802264c:	d103      	bne.n	8022656 <__sfputc_r+0x1e>
 802264e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022652:	f7fe ba7e 	b.w	8020b52 <__swbuf_r>
 8022656:	6813      	ldr	r3, [r2, #0]
 8022658:	1c58      	adds	r0, r3, #1
 802265a:	6010      	str	r0, [r2, #0]
 802265c:	7019      	strb	r1, [r3, #0]
 802265e:	4608      	mov	r0, r1
 8022660:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022664:	4770      	bx	lr

08022666 <__sfputs_r>:
 8022666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022668:	4606      	mov	r6, r0
 802266a:	460f      	mov	r7, r1
 802266c:	4614      	mov	r4, r2
 802266e:	18d5      	adds	r5, r2, r3
 8022670:	42ac      	cmp	r4, r5
 8022672:	d101      	bne.n	8022678 <__sfputs_r+0x12>
 8022674:	2000      	movs	r0, #0
 8022676:	e007      	b.n	8022688 <__sfputs_r+0x22>
 8022678:	f814 1b01 	ldrb.w	r1, [r4], #1
 802267c:	463a      	mov	r2, r7
 802267e:	4630      	mov	r0, r6
 8022680:	f7ff ffda 	bl	8022638 <__sfputc_r>
 8022684:	1c43      	adds	r3, r0, #1
 8022686:	d1f3      	bne.n	8022670 <__sfputs_r+0xa>
 8022688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802268c <_vfiprintf_r>:
 802268c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022690:	460d      	mov	r5, r1
 8022692:	b09d      	sub	sp, #116	@ 0x74
 8022694:	4614      	mov	r4, r2
 8022696:	4698      	mov	r8, r3
 8022698:	4606      	mov	r6, r0
 802269a:	b118      	cbz	r0, 80226a4 <_vfiprintf_r+0x18>
 802269c:	6a03      	ldr	r3, [r0, #32]
 802269e:	b90b      	cbnz	r3, 80226a4 <_vfiprintf_r+0x18>
 80226a0:	f7fe f93a 	bl	8020918 <__sinit>
 80226a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80226a6:	07d9      	lsls	r1, r3, #31
 80226a8:	d405      	bmi.n	80226b6 <_vfiprintf_r+0x2a>
 80226aa:	89ab      	ldrh	r3, [r5, #12]
 80226ac:	059a      	lsls	r2, r3, #22
 80226ae:	d402      	bmi.n	80226b6 <_vfiprintf_r+0x2a>
 80226b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80226b2:	f7fe fbda 	bl	8020e6a <__retarget_lock_acquire_recursive>
 80226b6:	89ab      	ldrh	r3, [r5, #12]
 80226b8:	071b      	lsls	r3, r3, #28
 80226ba:	d501      	bpl.n	80226c0 <_vfiprintf_r+0x34>
 80226bc:	692b      	ldr	r3, [r5, #16]
 80226be:	b99b      	cbnz	r3, 80226e8 <_vfiprintf_r+0x5c>
 80226c0:	4629      	mov	r1, r5
 80226c2:	4630      	mov	r0, r6
 80226c4:	f7fe fa84 	bl	8020bd0 <__swsetup_r>
 80226c8:	b170      	cbz	r0, 80226e8 <_vfiprintf_r+0x5c>
 80226ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80226cc:	07dc      	lsls	r4, r3, #31
 80226ce:	d504      	bpl.n	80226da <_vfiprintf_r+0x4e>
 80226d0:	f04f 30ff 	mov.w	r0, #4294967295
 80226d4:	b01d      	add	sp, #116	@ 0x74
 80226d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226da:	89ab      	ldrh	r3, [r5, #12]
 80226dc:	0598      	lsls	r0, r3, #22
 80226de:	d4f7      	bmi.n	80226d0 <_vfiprintf_r+0x44>
 80226e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80226e2:	f7fe fbc3 	bl	8020e6c <__retarget_lock_release_recursive>
 80226e6:	e7f3      	b.n	80226d0 <_vfiprintf_r+0x44>
 80226e8:	2300      	movs	r3, #0
 80226ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80226ec:	2320      	movs	r3, #32
 80226ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80226f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80226f6:	2330      	movs	r3, #48	@ 0x30
 80226f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80228a8 <_vfiprintf_r+0x21c>
 80226fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022700:	f04f 0901 	mov.w	r9, #1
 8022704:	4623      	mov	r3, r4
 8022706:	469a      	mov	sl, r3
 8022708:	f813 2b01 	ldrb.w	r2, [r3], #1
 802270c:	b10a      	cbz	r2, 8022712 <_vfiprintf_r+0x86>
 802270e:	2a25      	cmp	r2, #37	@ 0x25
 8022710:	d1f9      	bne.n	8022706 <_vfiprintf_r+0x7a>
 8022712:	ebba 0b04 	subs.w	fp, sl, r4
 8022716:	d00b      	beq.n	8022730 <_vfiprintf_r+0xa4>
 8022718:	465b      	mov	r3, fp
 802271a:	4622      	mov	r2, r4
 802271c:	4629      	mov	r1, r5
 802271e:	4630      	mov	r0, r6
 8022720:	f7ff ffa1 	bl	8022666 <__sfputs_r>
 8022724:	3001      	adds	r0, #1
 8022726:	f000 80a7 	beq.w	8022878 <_vfiprintf_r+0x1ec>
 802272a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802272c:	445a      	add	r2, fp
 802272e:	9209      	str	r2, [sp, #36]	@ 0x24
 8022730:	f89a 3000 	ldrb.w	r3, [sl]
 8022734:	2b00      	cmp	r3, #0
 8022736:	f000 809f 	beq.w	8022878 <_vfiprintf_r+0x1ec>
 802273a:	2300      	movs	r3, #0
 802273c:	f04f 32ff 	mov.w	r2, #4294967295
 8022740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022744:	f10a 0a01 	add.w	sl, sl, #1
 8022748:	9304      	str	r3, [sp, #16]
 802274a:	9307      	str	r3, [sp, #28]
 802274c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8022750:	931a      	str	r3, [sp, #104]	@ 0x68
 8022752:	4654      	mov	r4, sl
 8022754:	2205      	movs	r2, #5
 8022756:	f814 1b01 	ldrb.w	r1, [r4], #1
 802275a:	4853      	ldr	r0, [pc, #332]	@ (80228a8 <_vfiprintf_r+0x21c>)
 802275c:	f7dd fdd8 	bl	8000310 <memchr>
 8022760:	9a04      	ldr	r2, [sp, #16]
 8022762:	b9d8      	cbnz	r0, 802279c <_vfiprintf_r+0x110>
 8022764:	06d1      	lsls	r1, r2, #27
 8022766:	bf44      	itt	mi
 8022768:	2320      	movmi	r3, #32
 802276a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802276e:	0713      	lsls	r3, r2, #28
 8022770:	bf44      	itt	mi
 8022772:	232b      	movmi	r3, #43	@ 0x2b
 8022774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022778:	f89a 3000 	ldrb.w	r3, [sl]
 802277c:	2b2a      	cmp	r3, #42	@ 0x2a
 802277e:	d015      	beq.n	80227ac <_vfiprintf_r+0x120>
 8022780:	9a07      	ldr	r2, [sp, #28]
 8022782:	4654      	mov	r4, sl
 8022784:	2000      	movs	r0, #0
 8022786:	f04f 0c0a 	mov.w	ip, #10
 802278a:	4621      	mov	r1, r4
 802278c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022790:	3b30      	subs	r3, #48	@ 0x30
 8022792:	2b09      	cmp	r3, #9
 8022794:	d94b      	bls.n	802282e <_vfiprintf_r+0x1a2>
 8022796:	b1b0      	cbz	r0, 80227c6 <_vfiprintf_r+0x13a>
 8022798:	9207      	str	r2, [sp, #28]
 802279a:	e014      	b.n	80227c6 <_vfiprintf_r+0x13a>
 802279c:	eba0 0308 	sub.w	r3, r0, r8
 80227a0:	fa09 f303 	lsl.w	r3, r9, r3
 80227a4:	4313      	orrs	r3, r2
 80227a6:	9304      	str	r3, [sp, #16]
 80227a8:	46a2      	mov	sl, r4
 80227aa:	e7d2      	b.n	8022752 <_vfiprintf_r+0xc6>
 80227ac:	9b03      	ldr	r3, [sp, #12]
 80227ae:	1d19      	adds	r1, r3, #4
 80227b0:	681b      	ldr	r3, [r3, #0]
 80227b2:	9103      	str	r1, [sp, #12]
 80227b4:	2b00      	cmp	r3, #0
 80227b6:	bfbb      	ittet	lt
 80227b8:	425b      	neglt	r3, r3
 80227ba:	f042 0202 	orrlt.w	r2, r2, #2
 80227be:	9307      	strge	r3, [sp, #28]
 80227c0:	9307      	strlt	r3, [sp, #28]
 80227c2:	bfb8      	it	lt
 80227c4:	9204      	strlt	r2, [sp, #16]
 80227c6:	7823      	ldrb	r3, [r4, #0]
 80227c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80227ca:	d10a      	bne.n	80227e2 <_vfiprintf_r+0x156>
 80227cc:	7863      	ldrb	r3, [r4, #1]
 80227ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80227d0:	d132      	bne.n	8022838 <_vfiprintf_r+0x1ac>
 80227d2:	9b03      	ldr	r3, [sp, #12]
 80227d4:	1d1a      	adds	r2, r3, #4
 80227d6:	681b      	ldr	r3, [r3, #0]
 80227d8:	9203      	str	r2, [sp, #12]
 80227da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80227de:	3402      	adds	r4, #2
 80227e0:	9305      	str	r3, [sp, #20]
 80227e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80228b8 <_vfiprintf_r+0x22c>
 80227e6:	7821      	ldrb	r1, [r4, #0]
 80227e8:	2203      	movs	r2, #3
 80227ea:	4650      	mov	r0, sl
 80227ec:	f7dd fd90 	bl	8000310 <memchr>
 80227f0:	b138      	cbz	r0, 8022802 <_vfiprintf_r+0x176>
 80227f2:	9b04      	ldr	r3, [sp, #16]
 80227f4:	eba0 000a 	sub.w	r0, r0, sl
 80227f8:	2240      	movs	r2, #64	@ 0x40
 80227fa:	4082      	lsls	r2, r0
 80227fc:	4313      	orrs	r3, r2
 80227fe:	3401      	adds	r4, #1
 8022800:	9304      	str	r3, [sp, #16]
 8022802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022806:	4829      	ldr	r0, [pc, #164]	@ (80228ac <_vfiprintf_r+0x220>)
 8022808:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802280c:	2206      	movs	r2, #6
 802280e:	f7dd fd7f 	bl	8000310 <memchr>
 8022812:	2800      	cmp	r0, #0
 8022814:	d03f      	beq.n	8022896 <_vfiprintf_r+0x20a>
 8022816:	4b26      	ldr	r3, [pc, #152]	@ (80228b0 <_vfiprintf_r+0x224>)
 8022818:	bb1b      	cbnz	r3, 8022862 <_vfiprintf_r+0x1d6>
 802281a:	9b03      	ldr	r3, [sp, #12]
 802281c:	3307      	adds	r3, #7
 802281e:	f023 0307 	bic.w	r3, r3, #7
 8022822:	3308      	adds	r3, #8
 8022824:	9303      	str	r3, [sp, #12]
 8022826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022828:	443b      	add	r3, r7
 802282a:	9309      	str	r3, [sp, #36]	@ 0x24
 802282c:	e76a      	b.n	8022704 <_vfiprintf_r+0x78>
 802282e:	fb0c 3202 	mla	r2, ip, r2, r3
 8022832:	460c      	mov	r4, r1
 8022834:	2001      	movs	r0, #1
 8022836:	e7a8      	b.n	802278a <_vfiprintf_r+0xfe>
 8022838:	2300      	movs	r3, #0
 802283a:	3401      	adds	r4, #1
 802283c:	9305      	str	r3, [sp, #20]
 802283e:	4619      	mov	r1, r3
 8022840:	f04f 0c0a 	mov.w	ip, #10
 8022844:	4620      	mov	r0, r4
 8022846:	f810 2b01 	ldrb.w	r2, [r0], #1
 802284a:	3a30      	subs	r2, #48	@ 0x30
 802284c:	2a09      	cmp	r2, #9
 802284e:	d903      	bls.n	8022858 <_vfiprintf_r+0x1cc>
 8022850:	2b00      	cmp	r3, #0
 8022852:	d0c6      	beq.n	80227e2 <_vfiprintf_r+0x156>
 8022854:	9105      	str	r1, [sp, #20]
 8022856:	e7c4      	b.n	80227e2 <_vfiprintf_r+0x156>
 8022858:	fb0c 2101 	mla	r1, ip, r1, r2
 802285c:	4604      	mov	r4, r0
 802285e:	2301      	movs	r3, #1
 8022860:	e7f0      	b.n	8022844 <_vfiprintf_r+0x1b8>
 8022862:	ab03      	add	r3, sp, #12
 8022864:	9300      	str	r3, [sp, #0]
 8022866:	462a      	mov	r2, r5
 8022868:	4b12      	ldr	r3, [pc, #72]	@ (80228b4 <_vfiprintf_r+0x228>)
 802286a:	a904      	add	r1, sp, #16
 802286c:	4630      	mov	r0, r6
 802286e:	f7fd fc1f 	bl	80200b0 <_printf_float>
 8022872:	4607      	mov	r7, r0
 8022874:	1c78      	adds	r0, r7, #1
 8022876:	d1d6      	bne.n	8022826 <_vfiprintf_r+0x19a>
 8022878:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802287a:	07d9      	lsls	r1, r3, #31
 802287c:	d405      	bmi.n	802288a <_vfiprintf_r+0x1fe>
 802287e:	89ab      	ldrh	r3, [r5, #12]
 8022880:	059a      	lsls	r2, r3, #22
 8022882:	d402      	bmi.n	802288a <_vfiprintf_r+0x1fe>
 8022884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022886:	f7fe faf1 	bl	8020e6c <__retarget_lock_release_recursive>
 802288a:	89ab      	ldrh	r3, [r5, #12]
 802288c:	065b      	lsls	r3, r3, #25
 802288e:	f53f af1f 	bmi.w	80226d0 <_vfiprintf_r+0x44>
 8022892:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022894:	e71e      	b.n	80226d4 <_vfiprintf_r+0x48>
 8022896:	ab03      	add	r3, sp, #12
 8022898:	9300      	str	r3, [sp, #0]
 802289a:	462a      	mov	r2, r5
 802289c:	4b05      	ldr	r3, [pc, #20]	@ (80228b4 <_vfiprintf_r+0x228>)
 802289e:	a904      	add	r1, sp, #16
 80228a0:	4630      	mov	r0, r6
 80228a2:	f7fd fe8d 	bl	80205c0 <_printf_i>
 80228a6:	e7e4      	b.n	8022872 <_vfiprintf_r+0x1e6>
 80228a8:	08027220 	.word	0x08027220
 80228ac:	0802722a 	.word	0x0802722a
 80228b0:	080200b1 	.word	0x080200b1
 80228b4:	08022667 	.word	0x08022667
 80228b8:	08027226 	.word	0x08027226

080228bc <__sflush_r>:
 80228bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80228c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80228c4:	0716      	lsls	r6, r2, #28
 80228c6:	4605      	mov	r5, r0
 80228c8:	460c      	mov	r4, r1
 80228ca:	d454      	bmi.n	8022976 <__sflush_r+0xba>
 80228cc:	684b      	ldr	r3, [r1, #4]
 80228ce:	2b00      	cmp	r3, #0
 80228d0:	dc02      	bgt.n	80228d8 <__sflush_r+0x1c>
 80228d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80228d4:	2b00      	cmp	r3, #0
 80228d6:	dd48      	ble.n	802296a <__sflush_r+0xae>
 80228d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80228da:	2e00      	cmp	r6, #0
 80228dc:	d045      	beq.n	802296a <__sflush_r+0xae>
 80228de:	2300      	movs	r3, #0
 80228e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80228e4:	682f      	ldr	r7, [r5, #0]
 80228e6:	6a21      	ldr	r1, [r4, #32]
 80228e8:	602b      	str	r3, [r5, #0]
 80228ea:	d030      	beq.n	802294e <__sflush_r+0x92>
 80228ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80228ee:	89a3      	ldrh	r3, [r4, #12]
 80228f0:	0759      	lsls	r1, r3, #29
 80228f2:	d505      	bpl.n	8022900 <__sflush_r+0x44>
 80228f4:	6863      	ldr	r3, [r4, #4]
 80228f6:	1ad2      	subs	r2, r2, r3
 80228f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80228fa:	b10b      	cbz	r3, 8022900 <__sflush_r+0x44>
 80228fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80228fe:	1ad2      	subs	r2, r2, r3
 8022900:	2300      	movs	r3, #0
 8022902:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022904:	6a21      	ldr	r1, [r4, #32]
 8022906:	4628      	mov	r0, r5
 8022908:	47b0      	blx	r6
 802290a:	1c43      	adds	r3, r0, #1
 802290c:	89a3      	ldrh	r3, [r4, #12]
 802290e:	d106      	bne.n	802291e <__sflush_r+0x62>
 8022910:	6829      	ldr	r1, [r5, #0]
 8022912:	291d      	cmp	r1, #29
 8022914:	d82b      	bhi.n	802296e <__sflush_r+0xb2>
 8022916:	4a2a      	ldr	r2, [pc, #168]	@ (80229c0 <__sflush_r+0x104>)
 8022918:	410a      	asrs	r2, r1
 802291a:	07d6      	lsls	r6, r2, #31
 802291c:	d427      	bmi.n	802296e <__sflush_r+0xb2>
 802291e:	2200      	movs	r2, #0
 8022920:	6062      	str	r2, [r4, #4]
 8022922:	04d9      	lsls	r1, r3, #19
 8022924:	6922      	ldr	r2, [r4, #16]
 8022926:	6022      	str	r2, [r4, #0]
 8022928:	d504      	bpl.n	8022934 <__sflush_r+0x78>
 802292a:	1c42      	adds	r2, r0, #1
 802292c:	d101      	bne.n	8022932 <__sflush_r+0x76>
 802292e:	682b      	ldr	r3, [r5, #0]
 8022930:	b903      	cbnz	r3, 8022934 <__sflush_r+0x78>
 8022932:	6560      	str	r0, [r4, #84]	@ 0x54
 8022934:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022936:	602f      	str	r7, [r5, #0]
 8022938:	b1b9      	cbz	r1, 802296a <__sflush_r+0xae>
 802293a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802293e:	4299      	cmp	r1, r3
 8022940:	d002      	beq.n	8022948 <__sflush_r+0x8c>
 8022942:	4628      	mov	r0, r5
 8022944:	f7ff f89e 	bl	8021a84 <_free_r>
 8022948:	2300      	movs	r3, #0
 802294a:	6363      	str	r3, [r4, #52]	@ 0x34
 802294c:	e00d      	b.n	802296a <__sflush_r+0xae>
 802294e:	2301      	movs	r3, #1
 8022950:	4628      	mov	r0, r5
 8022952:	47b0      	blx	r6
 8022954:	4602      	mov	r2, r0
 8022956:	1c50      	adds	r0, r2, #1
 8022958:	d1c9      	bne.n	80228ee <__sflush_r+0x32>
 802295a:	682b      	ldr	r3, [r5, #0]
 802295c:	2b00      	cmp	r3, #0
 802295e:	d0c6      	beq.n	80228ee <__sflush_r+0x32>
 8022960:	2b1d      	cmp	r3, #29
 8022962:	d001      	beq.n	8022968 <__sflush_r+0xac>
 8022964:	2b16      	cmp	r3, #22
 8022966:	d11e      	bne.n	80229a6 <__sflush_r+0xea>
 8022968:	602f      	str	r7, [r5, #0]
 802296a:	2000      	movs	r0, #0
 802296c:	e022      	b.n	80229b4 <__sflush_r+0xf8>
 802296e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022972:	b21b      	sxth	r3, r3
 8022974:	e01b      	b.n	80229ae <__sflush_r+0xf2>
 8022976:	690f      	ldr	r7, [r1, #16]
 8022978:	2f00      	cmp	r7, #0
 802297a:	d0f6      	beq.n	802296a <__sflush_r+0xae>
 802297c:	0793      	lsls	r3, r2, #30
 802297e:	680e      	ldr	r6, [r1, #0]
 8022980:	bf08      	it	eq
 8022982:	694b      	ldreq	r3, [r1, #20]
 8022984:	600f      	str	r7, [r1, #0]
 8022986:	bf18      	it	ne
 8022988:	2300      	movne	r3, #0
 802298a:	eba6 0807 	sub.w	r8, r6, r7
 802298e:	608b      	str	r3, [r1, #8]
 8022990:	f1b8 0f00 	cmp.w	r8, #0
 8022994:	dde9      	ble.n	802296a <__sflush_r+0xae>
 8022996:	6a21      	ldr	r1, [r4, #32]
 8022998:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802299a:	4643      	mov	r3, r8
 802299c:	463a      	mov	r2, r7
 802299e:	4628      	mov	r0, r5
 80229a0:	47b0      	blx	r6
 80229a2:	2800      	cmp	r0, #0
 80229a4:	dc08      	bgt.n	80229b8 <__sflush_r+0xfc>
 80229a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80229aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80229ae:	81a3      	strh	r3, [r4, #12]
 80229b0:	f04f 30ff 	mov.w	r0, #4294967295
 80229b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80229b8:	4407      	add	r7, r0
 80229ba:	eba8 0800 	sub.w	r8, r8, r0
 80229be:	e7e7      	b.n	8022990 <__sflush_r+0xd4>
 80229c0:	dfbffffe 	.word	0xdfbffffe

080229c4 <_fflush_r>:
 80229c4:	b538      	push	{r3, r4, r5, lr}
 80229c6:	690b      	ldr	r3, [r1, #16]
 80229c8:	4605      	mov	r5, r0
 80229ca:	460c      	mov	r4, r1
 80229cc:	b913      	cbnz	r3, 80229d4 <_fflush_r+0x10>
 80229ce:	2500      	movs	r5, #0
 80229d0:	4628      	mov	r0, r5
 80229d2:	bd38      	pop	{r3, r4, r5, pc}
 80229d4:	b118      	cbz	r0, 80229de <_fflush_r+0x1a>
 80229d6:	6a03      	ldr	r3, [r0, #32]
 80229d8:	b90b      	cbnz	r3, 80229de <_fflush_r+0x1a>
 80229da:	f7fd ff9d 	bl	8020918 <__sinit>
 80229de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80229e2:	2b00      	cmp	r3, #0
 80229e4:	d0f3      	beq.n	80229ce <_fflush_r+0xa>
 80229e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80229e8:	07d0      	lsls	r0, r2, #31
 80229ea:	d404      	bmi.n	80229f6 <_fflush_r+0x32>
 80229ec:	0599      	lsls	r1, r3, #22
 80229ee:	d402      	bmi.n	80229f6 <_fflush_r+0x32>
 80229f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80229f2:	f7fe fa3a 	bl	8020e6a <__retarget_lock_acquire_recursive>
 80229f6:	4628      	mov	r0, r5
 80229f8:	4621      	mov	r1, r4
 80229fa:	f7ff ff5f 	bl	80228bc <__sflush_r>
 80229fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022a00:	07da      	lsls	r2, r3, #31
 8022a02:	4605      	mov	r5, r0
 8022a04:	d4e4      	bmi.n	80229d0 <_fflush_r+0xc>
 8022a06:	89a3      	ldrh	r3, [r4, #12]
 8022a08:	059b      	lsls	r3, r3, #22
 8022a0a:	d4e1      	bmi.n	80229d0 <_fflush_r+0xc>
 8022a0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022a0e:	f7fe fa2d 	bl	8020e6c <__retarget_lock_release_recursive>
 8022a12:	e7dd      	b.n	80229d0 <_fflush_r+0xc>

08022a14 <fiprintf>:
 8022a14:	b40e      	push	{r1, r2, r3}
 8022a16:	b503      	push	{r0, r1, lr}
 8022a18:	4601      	mov	r1, r0
 8022a1a:	ab03      	add	r3, sp, #12
 8022a1c:	4805      	ldr	r0, [pc, #20]	@ (8022a34 <fiprintf+0x20>)
 8022a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022a22:	6800      	ldr	r0, [r0, #0]
 8022a24:	9301      	str	r3, [sp, #4]
 8022a26:	f7ff fe31 	bl	802268c <_vfiprintf_r>
 8022a2a:	b002      	add	sp, #8
 8022a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022a30:	b003      	add	sp, #12
 8022a32:	4770      	bx	lr
 8022a34:	24000044 	.word	0x24000044

08022a38 <__swhatbuf_r>:
 8022a38:	b570      	push	{r4, r5, r6, lr}
 8022a3a:	460c      	mov	r4, r1
 8022a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022a40:	2900      	cmp	r1, #0
 8022a42:	b096      	sub	sp, #88	@ 0x58
 8022a44:	4615      	mov	r5, r2
 8022a46:	461e      	mov	r6, r3
 8022a48:	da0d      	bge.n	8022a66 <__swhatbuf_r+0x2e>
 8022a4a:	89a3      	ldrh	r3, [r4, #12]
 8022a4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8022a50:	f04f 0100 	mov.w	r1, #0
 8022a54:	bf14      	ite	ne
 8022a56:	2340      	movne	r3, #64	@ 0x40
 8022a58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8022a5c:	2000      	movs	r0, #0
 8022a5e:	6031      	str	r1, [r6, #0]
 8022a60:	602b      	str	r3, [r5, #0]
 8022a62:	b016      	add	sp, #88	@ 0x58
 8022a64:	bd70      	pop	{r4, r5, r6, pc}
 8022a66:	466a      	mov	r2, sp
 8022a68:	f000 f848 	bl	8022afc <_fstat_r>
 8022a6c:	2800      	cmp	r0, #0
 8022a6e:	dbec      	blt.n	8022a4a <__swhatbuf_r+0x12>
 8022a70:	9901      	ldr	r1, [sp, #4]
 8022a72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8022a76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8022a7a:	4259      	negs	r1, r3
 8022a7c:	4159      	adcs	r1, r3
 8022a7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8022a82:	e7eb      	b.n	8022a5c <__swhatbuf_r+0x24>

08022a84 <__smakebuf_r>:
 8022a84:	898b      	ldrh	r3, [r1, #12]
 8022a86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022a88:	079d      	lsls	r5, r3, #30
 8022a8a:	4606      	mov	r6, r0
 8022a8c:	460c      	mov	r4, r1
 8022a8e:	d507      	bpl.n	8022aa0 <__smakebuf_r+0x1c>
 8022a90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8022a94:	6023      	str	r3, [r4, #0]
 8022a96:	6123      	str	r3, [r4, #16]
 8022a98:	2301      	movs	r3, #1
 8022a9a:	6163      	str	r3, [r4, #20]
 8022a9c:	b003      	add	sp, #12
 8022a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022aa0:	ab01      	add	r3, sp, #4
 8022aa2:	466a      	mov	r2, sp
 8022aa4:	f7ff ffc8 	bl	8022a38 <__swhatbuf_r>
 8022aa8:	9f00      	ldr	r7, [sp, #0]
 8022aaa:	4605      	mov	r5, r0
 8022aac:	4639      	mov	r1, r7
 8022aae:	4630      	mov	r0, r6
 8022ab0:	f7ff f85c 	bl	8021b6c <_malloc_r>
 8022ab4:	b948      	cbnz	r0, 8022aca <__smakebuf_r+0x46>
 8022ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022aba:	059a      	lsls	r2, r3, #22
 8022abc:	d4ee      	bmi.n	8022a9c <__smakebuf_r+0x18>
 8022abe:	f023 0303 	bic.w	r3, r3, #3
 8022ac2:	f043 0302 	orr.w	r3, r3, #2
 8022ac6:	81a3      	strh	r3, [r4, #12]
 8022ac8:	e7e2      	b.n	8022a90 <__smakebuf_r+0xc>
 8022aca:	89a3      	ldrh	r3, [r4, #12]
 8022acc:	6020      	str	r0, [r4, #0]
 8022ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022ad2:	81a3      	strh	r3, [r4, #12]
 8022ad4:	9b01      	ldr	r3, [sp, #4]
 8022ad6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8022ada:	b15b      	cbz	r3, 8022af4 <__smakebuf_r+0x70>
 8022adc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022ae0:	4630      	mov	r0, r6
 8022ae2:	f000 f81d 	bl	8022b20 <_isatty_r>
 8022ae6:	b128      	cbz	r0, 8022af4 <__smakebuf_r+0x70>
 8022ae8:	89a3      	ldrh	r3, [r4, #12]
 8022aea:	f023 0303 	bic.w	r3, r3, #3
 8022aee:	f043 0301 	orr.w	r3, r3, #1
 8022af2:	81a3      	strh	r3, [r4, #12]
 8022af4:	89a3      	ldrh	r3, [r4, #12]
 8022af6:	431d      	orrs	r5, r3
 8022af8:	81a5      	strh	r5, [r4, #12]
 8022afa:	e7cf      	b.n	8022a9c <__smakebuf_r+0x18>

08022afc <_fstat_r>:
 8022afc:	b538      	push	{r3, r4, r5, lr}
 8022afe:	4d07      	ldr	r5, [pc, #28]	@ (8022b1c <_fstat_r+0x20>)
 8022b00:	2300      	movs	r3, #0
 8022b02:	4604      	mov	r4, r0
 8022b04:	4608      	mov	r0, r1
 8022b06:	4611      	mov	r1, r2
 8022b08:	602b      	str	r3, [r5, #0]
 8022b0a:	f7de fd53 	bl	80015b4 <_fstat>
 8022b0e:	1c43      	adds	r3, r0, #1
 8022b10:	d102      	bne.n	8022b18 <_fstat_r+0x1c>
 8022b12:	682b      	ldr	r3, [r5, #0]
 8022b14:	b103      	cbz	r3, 8022b18 <_fstat_r+0x1c>
 8022b16:	6023      	str	r3, [r4, #0]
 8022b18:	bd38      	pop	{r3, r4, r5, pc}
 8022b1a:	bf00      	nop
 8022b1c:	2400cdcc 	.word	0x2400cdcc

08022b20 <_isatty_r>:
 8022b20:	b538      	push	{r3, r4, r5, lr}
 8022b22:	4d06      	ldr	r5, [pc, #24]	@ (8022b3c <_isatty_r+0x1c>)
 8022b24:	2300      	movs	r3, #0
 8022b26:	4604      	mov	r4, r0
 8022b28:	4608      	mov	r0, r1
 8022b2a:	602b      	str	r3, [r5, #0]
 8022b2c:	f7de fd52 	bl	80015d4 <_isatty>
 8022b30:	1c43      	adds	r3, r0, #1
 8022b32:	d102      	bne.n	8022b3a <_isatty_r+0x1a>
 8022b34:	682b      	ldr	r3, [r5, #0]
 8022b36:	b103      	cbz	r3, 8022b3a <_isatty_r+0x1a>
 8022b38:	6023      	str	r3, [r4, #0]
 8022b3a:	bd38      	pop	{r3, r4, r5, pc}
 8022b3c:	2400cdcc 	.word	0x2400cdcc

08022b40 <_sbrk_r>:
 8022b40:	b538      	push	{r3, r4, r5, lr}
 8022b42:	4d06      	ldr	r5, [pc, #24]	@ (8022b5c <_sbrk_r+0x1c>)
 8022b44:	2300      	movs	r3, #0
 8022b46:	4604      	mov	r4, r0
 8022b48:	4608      	mov	r0, r1
 8022b4a:	602b      	str	r3, [r5, #0]
 8022b4c:	f7de fd5a 	bl	8001604 <_sbrk>
 8022b50:	1c43      	adds	r3, r0, #1
 8022b52:	d102      	bne.n	8022b5a <_sbrk_r+0x1a>
 8022b54:	682b      	ldr	r3, [r5, #0]
 8022b56:	b103      	cbz	r3, 8022b5a <_sbrk_r+0x1a>
 8022b58:	6023      	str	r3, [r4, #0]
 8022b5a:	bd38      	pop	{r3, r4, r5, pc}
 8022b5c:	2400cdcc 	.word	0x2400cdcc

08022b60 <abort>:
 8022b60:	b508      	push	{r3, lr}
 8022b62:	2006      	movs	r0, #6
 8022b64:	f000 f88c 	bl	8022c80 <raise>
 8022b68:	2001      	movs	r0, #1
 8022b6a:	f7de fcef 	bl	800154c <_exit>

08022b6e <_calloc_r>:
 8022b6e:	b570      	push	{r4, r5, r6, lr}
 8022b70:	fba1 5402 	umull	r5, r4, r1, r2
 8022b74:	b93c      	cbnz	r4, 8022b86 <_calloc_r+0x18>
 8022b76:	4629      	mov	r1, r5
 8022b78:	f7fe fff8 	bl	8021b6c <_malloc_r>
 8022b7c:	4606      	mov	r6, r0
 8022b7e:	b928      	cbnz	r0, 8022b8c <_calloc_r+0x1e>
 8022b80:	2600      	movs	r6, #0
 8022b82:	4630      	mov	r0, r6
 8022b84:	bd70      	pop	{r4, r5, r6, pc}
 8022b86:	220c      	movs	r2, #12
 8022b88:	6002      	str	r2, [r0, #0]
 8022b8a:	e7f9      	b.n	8022b80 <_calloc_r+0x12>
 8022b8c:	462a      	mov	r2, r5
 8022b8e:	4621      	mov	r1, r4
 8022b90:	f7fe f89e 	bl	8020cd0 <memset>
 8022b94:	e7f5      	b.n	8022b82 <_calloc_r+0x14>

08022b96 <__ascii_mbtowc>:
 8022b96:	b082      	sub	sp, #8
 8022b98:	b901      	cbnz	r1, 8022b9c <__ascii_mbtowc+0x6>
 8022b9a:	a901      	add	r1, sp, #4
 8022b9c:	b142      	cbz	r2, 8022bb0 <__ascii_mbtowc+0x1a>
 8022b9e:	b14b      	cbz	r3, 8022bb4 <__ascii_mbtowc+0x1e>
 8022ba0:	7813      	ldrb	r3, [r2, #0]
 8022ba2:	600b      	str	r3, [r1, #0]
 8022ba4:	7812      	ldrb	r2, [r2, #0]
 8022ba6:	1e10      	subs	r0, r2, #0
 8022ba8:	bf18      	it	ne
 8022baa:	2001      	movne	r0, #1
 8022bac:	b002      	add	sp, #8
 8022bae:	4770      	bx	lr
 8022bb0:	4610      	mov	r0, r2
 8022bb2:	e7fb      	b.n	8022bac <__ascii_mbtowc+0x16>
 8022bb4:	f06f 0001 	mvn.w	r0, #1
 8022bb8:	e7f8      	b.n	8022bac <__ascii_mbtowc+0x16>

08022bba <_realloc_r>:
 8022bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022bbe:	4680      	mov	r8, r0
 8022bc0:	4615      	mov	r5, r2
 8022bc2:	460c      	mov	r4, r1
 8022bc4:	b921      	cbnz	r1, 8022bd0 <_realloc_r+0x16>
 8022bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022bca:	4611      	mov	r1, r2
 8022bcc:	f7fe bfce 	b.w	8021b6c <_malloc_r>
 8022bd0:	b92a      	cbnz	r2, 8022bde <_realloc_r+0x24>
 8022bd2:	f7fe ff57 	bl	8021a84 <_free_r>
 8022bd6:	2400      	movs	r4, #0
 8022bd8:	4620      	mov	r0, r4
 8022bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022bde:	f000 f86b 	bl	8022cb8 <_malloc_usable_size_r>
 8022be2:	4285      	cmp	r5, r0
 8022be4:	4606      	mov	r6, r0
 8022be6:	d802      	bhi.n	8022bee <_realloc_r+0x34>
 8022be8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8022bec:	d8f4      	bhi.n	8022bd8 <_realloc_r+0x1e>
 8022bee:	4629      	mov	r1, r5
 8022bf0:	4640      	mov	r0, r8
 8022bf2:	f7fe ffbb 	bl	8021b6c <_malloc_r>
 8022bf6:	4607      	mov	r7, r0
 8022bf8:	2800      	cmp	r0, #0
 8022bfa:	d0ec      	beq.n	8022bd6 <_realloc_r+0x1c>
 8022bfc:	42b5      	cmp	r5, r6
 8022bfe:	462a      	mov	r2, r5
 8022c00:	4621      	mov	r1, r4
 8022c02:	bf28      	it	cs
 8022c04:	4632      	movcs	r2, r6
 8022c06:	f7fe f932 	bl	8020e6e <memcpy>
 8022c0a:	4621      	mov	r1, r4
 8022c0c:	4640      	mov	r0, r8
 8022c0e:	f7fe ff39 	bl	8021a84 <_free_r>
 8022c12:	463c      	mov	r4, r7
 8022c14:	e7e0      	b.n	8022bd8 <_realloc_r+0x1e>

08022c16 <__ascii_wctomb>:
 8022c16:	4603      	mov	r3, r0
 8022c18:	4608      	mov	r0, r1
 8022c1a:	b141      	cbz	r1, 8022c2e <__ascii_wctomb+0x18>
 8022c1c:	2aff      	cmp	r2, #255	@ 0xff
 8022c1e:	d904      	bls.n	8022c2a <__ascii_wctomb+0x14>
 8022c20:	228a      	movs	r2, #138	@ 0x8a
 8022c22:	601a      	str	r2, [r3, #0]
 8022c24:	f04f 30ff 	mov.w	r0, #4294967295
 8022c28:	4770      	bx	lr
 8022c2a:	700a      	strb	r2, [r1, #0]
 8022c2c:	2001      	movs	r0, #1
 8022c2e:	4770      	bx	lr

08022c30 <_raise_r>:
 8022c30:	291f      	cmp	r1, #31
 8022c32:	b538      	push	{r3, r4, r5, lr}
 8022c34:	4605      	mov	r5, r0
 8022c36:	460c      	mov	r4, r1
 8022c38:	d904      	bls.n	8022c44 <_raise_r+0x14>
 8022c3a:	2316      	movs	r3, #22
 8022c3c:	6003      	str	r3, [r0, #0]
 8022c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8022c42:	bd38      	pop	{r3, r4, r5, pc}
 8022c44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8022c46:	b112      	cbz	r2, 8022c4e <_raise_r+0x1e>
 8022c48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022c4c:	b94b      	cbnz	r3, 8022c62 <_raise_r+0x32>
 8022c4e:	4628      	mov	r0, r5
 8022c50:	f000 f830 	bl	8022cb4 <_getpid_r>
 8022c54:	4622      	mov	r2, r4
 8022c56:	4601      	mov	r1, r0
 8022c58:	4628      	mov	r0, r5
 8022c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022c5e:	f000 b817 	b.w	8022c90 <_kill_r>
 8022c62:	2b01      	cmp	r3, #1
 8022c64:	d00a      	beq.n	8022c7c <_raise_r+0x4c>
 8022c66:	1c59      	adds	r1, r3, #1
 8022c68:	d103      	bne.n	8022c72 <_raise_r+0x42>
 8022c6a:	2316      	movs	r3, #22
 8022c6c:	6003      	str	r3, [r0, #0]
 8022c6e:	2001      	movs	r0, #1
 8022c70:	e7e7      	b.n	8022c42 <_raise_r+0x12>
 8022c72:	2100      	movs	r1, #0
 8022c74:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8022c78:	4620      	mov	r0, r4
 8022c7a:	4798      	blx	r3
 8022c7c:	2000      	movs	r0, #0
 8022c7e:	e7e0      	b.n	8022c42 <_raise_r+0x12>

08022c80 <raise>:
 8022c80:	4b02      	ldr	r3, [pc, #8]	@ (8022c8c <raise+0xc>)
 8022c82:	4601      	mov	r1, r0
 8022c84:	6818      	ldr	r0, [r3, #0]
 8022c86:	f7ff bfd3 	b.w	8022c30 <_raise_r>
 8022c8a:	bf00      	nop
 8022c8c:	24000044 	.word	0x24000044

08022c90 <_kill_r>:
 8022c90:	b538      	push	{r3, r4, r5, lr}
 8022c92:	4d07      	ldr	r5, [pc, #28]	@ (8022cb0 <_kill_r+0x20>)
 8022c94:	2300      	movs	r3, #0
 8022c96:	4604      	mov	r4, r0
 8022c98:	4608      	mov	r0, r1
 8022c9a:	4611      	mov	r1, r2
 8022c9c:	602b      	str	r3, [r5, #0]
 8022c9e:	f7de fc43 	bl	8001528 <_kill>
 8022ca2:	1c43      	adds	r3, r0, #1
 8022ca4:	d102      	bne.n	8022cac <_kill_r+0x1c>
 8022ca6:	682b      	ldr	r3, [r5, #0]
 8022ca8:	b103      	cbz	r3, 8022cac <_kill_r+0x1c>
 8022caa:	6023      	str	r3, [r4, #0]
 8022cac:	bd38      	pop	{r3, r4, r5, pc}
 8022cae:	bf00      	nop
 8022cb0:	2400cdcc 	.word	0x2400cdcc

08022cb4 <_getpid_r>:
 8022cb4:	f7de bc30 	b.w	8001518 <_getpid>

08022cb8 <_malloc_usable_size_r>:
 8022cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022cbc:	1f18      	subs	r0, r3, #4
 8022cbe:	2b00      	cmp	r3, #0
 8022cc0:	bfbc      	itt	lt
 8022cc2:	580b      	ldrlt	r3, [r1, r0]
 8022cc4:	18c0      	addlt	r0, r0, r3
 8022cc6:	4770      	bx	lr

08022cc8 <_init>:
 8022cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022cca:	bf00      	nop
 8022ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022cce:	bc08      	pop	{r3}
 8022cd0:	469e      	mov	lr, r3
 8022cd2:	4770      	bx	lr

08022cd4 <_fini>:
 8022cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022cd6:	bf00      	nop
 8022cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022cda:	bc08      	pop	{r3}
 8022cdc:	469e      	mov	lr, r3
 8022cde:	4770      	bx	lr
